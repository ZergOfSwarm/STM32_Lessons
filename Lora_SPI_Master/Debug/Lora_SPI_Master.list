
Lora_SPI_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b0  080045b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000078  0800462c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800462c  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c189  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d5  00000000  00000000  0002c226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c96  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b01d  00000000  00000000  000484ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086446  00000000  00000000  000534cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  000d9964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004364 	.word	0x08004364

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004364 	.word	0x08004364

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000164:	f000 b96e 	b.w	8000444 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	f040 8083 	bne.w	8000298 <__udivmoddi4+0x118>
 8000192:	428a      	cmp	r2, r1
 8000194:	4617      	mov	r7, r2
 8000196:	d947      	bls.n	8000228 <__udivmoddi4+0xa8>
 8000198:	fab2 f382 	clz	r3, r2
 800019c:	b14b      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019e:	f1c3 0120 	rsb	r1, r3, #32
 80001a2:	fa05 fe03 	lsl.w	lr, r5, r3
 80001a6:	fa20 f101 	lsr.w	r1, r0, r1
 80001aa:	409f      	lsls	r7, r3
 80001ac:	ea41 0e0e 	orr.w	lr, r1, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001b6:	fbbe fcf8 	udiv	ip, lr, r8
 80001ba:	fa1f f987 	uxth.w	r9, r7
 80001be:	fb08 e21c 	mls	r2, r8, ip, lr
 80001c2:	fb0c f009 	mul.w	r0, ip, r9
 80001c6:	0c21      	lsrs	r1, r4, #16
 80001c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	18ba      	adds	r2, r7, r2
 80001d2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80001d6:	f080 8118 	bcs.w	800040a <__udivmoddi4+0x28a>
 80001da:	4290      	cmp	r0, r2
 80001dc:	f240 8115 	bls.w	800040a <__udivmoddi4+0x28a>
 80001e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80001e4:	443a      	add	r2, r7
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f8 	udiv	r0, r2, r8
 80001ec:	fb08 2210 	mls	r2, r8, r0, r2
 80001f0:	fb00 f109 	mul.w	r1, r0, r9
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a1      	cmp	r1, r4
 80001fc:	d909      	bls.n	8000212 <__udivmoddi4+0x92>
 80001fe:	193c      	adds	r4, r7, r4
 8000200:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000204:	f080 8103 	bcs.w	800040e <__udivmoddi4+0x28e>
 8000208:	42a1      	cmp	r1, r4
 800020a:	f240 8100 	bls.w	800040e <__udivmoddi4+0x28e>
 800020e:	3802      	subs	r0, #2
 8000210:	443c      	add	r4, r7
 8000212:	1a64      	subs	r4, r4, r1
 8000214:	2100      	movs	r1, #0
 8000216:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800021a:	b11e      	cbz	r6, 8000224 <__udivmoddi4+0xa4>
 800021c:	2200      	movs	r2, #0
 800021e:	40dc      	lsrs	r4, r3
 8000220:	e9c6 4200 	strd	r4, r2, [r6]
 8000224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000228:	b902      	cbnz	r2, 800022c <__udivmoddi4+0xac>
 800022a:	deff      	udf	#255	; 0xff
 800022c:	fab2 f382 	clz	r3, r2
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14f      	bne.n	80002d4 <__udivmoddi4+0x154>
 8000234:	1a8d      	subs	r5, r1, r2
 8000236:	2101      	movs	r1, #1
 8000238:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800023c:	fa1f f882 	uxth.w	r8, r2
 8000240:	fbb5 fcfe 	udiv	ip, r5, lr
 8000244:	fb0e 551c 	mls	r5, lr, ip, r5
 8000248:	fb08 f00c 	mul.w	r0, r8, ip
 800024c:	0c22      	lsrs	r2, r4, #16
 800024e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000252:	42a8      	cmp	r0, r5
 8000254:	d907      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000256:	197d      	adds	r5, r7, r5
 8000258:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800025c:	d202      	bcs.n	8000264 <__udivmoddi4+0xe4>
 800025e:	42a8      	cmp	r0, r5
 8000260:	f200 80e9 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 8000264:	4694      	mov	ip, r2
 8000266:	1a2d      	subs	r5, r5, r0
 8000268:	fbb5 f0fe 	udiv	r0, r5, lr
 800026c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000270:	fb08 f800 	mul.w	r8, r8, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027a:	45a0      	cmp	r8, r4
 800027c:	d907      	bls.n	800028e <__udivmoddi4+0x10e>
 800027e:	193c      	adds	r4, r7, r4
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000284:	d202      	bcs.n	800028c <__udivmoddi4+0x10c>
 8000286:	45a0      	cmp	r8, r4
 8000288:	f200 80d9 	bhi.w	800043e <__udivmoddi4+0x2be>
 800028c:	4610      	mov	r0, r2
 800028e:	eba4 0408 	sub.w	r4, r4, r8
 8000292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000296:	e7c0      	b.n	800021a <__udivmoddi4+0x9a>
 8000298:	428b      	cmp	r3, r1
 800029a:	d908      	bls.n	80002ae <__udivmoddi4+0x12e>
 800029c:	2e00      	cmp	r6, #0
 800029e:	f000 80b1 	beq.w	8000404 <__udivmoddi4+0x284>
 80002a2:	2100      	movs	r1, #0
 80002a4:	e9c6 0500 	strd	r0, r5, [r6]
 80002a8:	4608      	mov	r0, r1
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d14b      	bne.n	800034e <__udivmoddi4+0x1ce>
 80002b6:	42ab      	cmp	r3, r5
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0x140>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 80b9 	bhi.w	8000432 <__udivmoddi4+0x2b2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb65 0303 	sbc.w	r3, r5, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	469e      	mov	lr, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d0aa      	beq.n	8000224 <__udivmoddi4+0xa4>
 80002ce:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d2:	e7a7      	b.n	8000224 <__udivmoddi4+0xa4>
 80002d4:	409f      	lsls	r7, r3
 80002d6:	f1c3 0220 	rsb	r2, r3, #32
 80002da:	40d1      	lsrs	r1, r2
 80002dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	fa24 f202 	lsr.w	r2, r4, r2
 80002f0:	409d      	lsls	r5, r3
 80002f2:	fb00 fc08 	mul.w	ip, r0, r8
 80002f6:	432a      	orrs	r2, r5
 80002f8:	0c15      	lsrs	r5, r2, #16
 80002fa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80002fe:	45ac      	cmp	ip, r5
 8000300:	fa04 f403 	lsl.w	r4, r4, r3
 8000304:	d909      	bls.n	800031a <__udivmoddi4+0x19a>
 8000306:	197d      	adds	r5, r7, r5
 8000308:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800030c:	f080 808f 	bcs.w	800042e <__udivmoddi4+0x2ae>
 8000310:	45ac      	cmp	ip, r5
 8000312:	f240 808c 	bls.w	800042e <__udivmoddi4+0x2ae>
 8000316:	3802      	subs	r0, #2
 8000318:	443d      	add	r5, r7
 800031a:	eba5 050c 	sub.w	r5, r5, ip
 800031e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000322:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000326:	fb01 f908 	mul.w	r9, r1, r8
 800032a:	b295      	uxth	r5, r2
 800032c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000330:	45a9      	cmp	r9, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x1c4>
 8000334:	197d      	adds	r5, r7, r5
 8000336:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800033a:	d274      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 800033c:	45a9      	cmp	r9, r5
 800033e:	d972      	bls.n	8000426 <__udivmoddi4+0x2a6>
 8000340:	3902      	subs	r1, #2
 8000342:	443d      	add	r5, r7
 8000344:	eba5 0509 	sub.w	r5, r5, r9
 8000348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800034c:	e778      	b.n	8000240 <__udivmoddi4+0xc0>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 f407 	lsr.w	r4, r5, r7
 8000360:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000364:	fbb4 f9fe 	udiv	r9, r4, lr
 8000368:	fa1f f88c 	uxth.w	r8, ip
 800036c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000370:	fa20 f307 	lsr.w	r3, r0, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	408d      	lsls	r5, r1
 800037a:	431d      	orrs	r5, r3
 800037c:	0c2b      	lsrs	r3, r5, #16
 800037e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000382:	45a2      	cmp	sl, r4
 8000384:	fa02 f201 	lsl.w	r2, r2, r1
 8000388:	fa00 f301 	lsl.w	r3, r0, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x222>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000396:	d248      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000398:	45a2      	cmp	sl, r4
 800039a:	d946      	bls.n	800042a <__udivmoddi4+0x2aa>
 800039c:	f1a9 0902 	sub.w	r9, r9, #2
 80003a0:	4464      	add	r4, ip
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	fbb4 f0fe 	udiv	r0, r4, lr
 80003aa:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ae:	fb00 fa08 	mul.w	sl, r0, r8
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	45a2      	cmp	sl, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x24e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003c4:	d22d      	bcs.n	8000422 <__udivmoddi4+0x2a2>
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d92b      	bls.n	8000422 <__udivmoddi4+0x2a2>
 80003ca:	3802      	subs	r0, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d2:	fba0 8902 	umull	r8, r9, r0, r2
 80003d6:	eba4 040a 	sub.w	r4, r4, sl
 80003da:	454c      	cmp	r4, r9
 80003dc:	46c6      	mov	lr, r8
 80003de:	464d      	mov	r5, r9
 80003e0:	d319      	bcc.n	8000416 <__udivmoddi4+0x296>
 80003e2:	d016      	beq.n	8000412 <__udivmoddi4+0x292>
 80003e4:	b15e      	cbz	r6, 80003fe <__udivmoddi4+0x27e>
 80003e6:	ebb3 020e 	subs.w	r2, r3, lr
 80003ea:	eb64 0405 	sbc.w	r4, r4, r5
 80003ee:	fa04 f707 	lsl.w	r7, r4, r7
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431f      	orrs	r7, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c6 7400 	strd	r7, r4, [r6]
 80003fe:	2100      	movs	r1, #0
 8000400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000404:	4631      	mov	r1, r6
 8000406:	4630      	mov	r0, r6
 8000408:	e70c      	b.n	8000224 <__udivmoddi4+0xa4>
 800040a:	468c      	mov	ip, r1
 800040c:	e6eb      	b.n	80001e6 <__udivmoddi4+0x66>
 800040e:	4610      	mov	r0, r2
 8000410:	e6ff      	b.n	8000212 <__udivmoddi4+0x92>
 8000412:	4543      	cmp	r3, r8
 8000414:	d2e6      	bcs.n	80003e4 <__udivmoddi4+0x264>
 8000416:	ebb8 0e02 	subs.w	lr, r8, r2
 800041a:	eb69 050c 	sbc.w	r5, r9, ip
 800041e:	3801      	subs	r0, #1
 8000420:	e7e0      	b.n	80003e4 <__udivmoddi4+0x264>
 8000422:	4628      	mov	r0, r5
 8000424:	e7d3      	b.n	80003ce <__udivmoddi4+0x24e>
 8000426:	4611      	mov	r1, r2
 8000428:	e78c      	b.n	8000344 <__udivmoddi4+0x1c4>
 800042a:	4681      	mov	r9, r0
 800042c:	e7b9      	b.n	80003a2 <__udivmoddi4+0x222>
 800042e:	4608      	mov	r0, r1
 8000430:	e773      	b.n	800031a <__udivmoddi4+0x19a>
 8000432:	4608      	mov	r0, r1
 8000434:	e749      	b.n	80002ca <__udivmoddi4+0x14a>
 8000436:	f1ac 0c02 	sub.w	ip, ip, #2
 800043a:	443d      	add	r5, r7
 800043c:	e713      	b.n	8000266 <__udivmoddi4+0xe6>
 800043e:	3802      	subs	r0, #2
 8000440:	443c      	add	r4, r7
 8000442:	e724      	b.n	800028e <__udivmoddi4+0x10e>

08000444 <__aeabi_idiv0>:
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	78fa      	ldrb	r2, [r7, #3]
 800045a:	4611      	mov	r1, r2
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fbd0 	bl	8000c02 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fbeb 	bl	8000c42 <SX1278_hw_SPIReadByte>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2101      	movs	r1, #1
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fb88 	bl	8000b8c <SX1278_hw_SetNSS>
	return tmp;
 800047c:	7bfb      	ldrb	r3, [r7, #15]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	460b      	mov	r3, r1
 8000490:	70fb      	strb	r3, [r7, #3]
 8000492:	4613      	mov	r3, r2
 8000494:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fb75 	bl	8000b8c <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	4610      	mov	r0, r2
 80004b2:	f000 fba6 	bl	8000c02 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	78ba      	ldrb	r2, [r7, #2]
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fb9f 	bl	8000c02 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2101      	movs	r1, #1
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fb5e 	bl	8000b8c <SX1278_hw_SetNSS>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	607a      	str	r2, [r7, #4]
 80004e2:	461a      	mov	r2, r3
 80004e4:	460b      	mov	r3, r1
 80004e6:	72fb      	strb	r3, [r7, #11]
 80004e8:	4613      	mov	r3, r2
 80004ea:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004ec:	7abb      	ldrb	r3, [r7, #10]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d927      	bls.n	8000542 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fb47 	bl	8000b8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	7afa      	ldrb	r2, [r7, #11]
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fb7b 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	75fb      	strb	r3, [r7, #23]
 8000510:	e00c      	b.n	800052c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	6819      	ldr	r1, [r3, #0]
 8000516:	7dfb      	ldrb	r3, [r7, #23]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	18d4      	adds	r4, r2, r3
 800051c:	4608      	mov	r0, r1
 800051e:	f000 fb90 	bl	8000c42 <SX1278_hw_SPIReadByte>
 8000522:	4603      	mov	r3, r0
 8000524:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	3301      	adds	r3, #1
 800052a:	75fb      	strb	r3, [r7, #23]
 800052c:	7dfa      	ldrb	r2, [r7, #23]
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	429a      	cmp	r2, r3
 8000532:	d3ee      	bcc.n	8000512 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fb26 	bl	8000b8c <SX1278_hw_SetNSS>
 8000540:	e000      	b.n	8000544 <SX1278_SPIBurstRead+0x6c>
		return;
 8000542:	bf00      	nop
	}
}
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd90      	pop	{r4, r7, pc}

0800054a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800054a:	b580      	push	{r7, lr}
 800054c:	b086      	sub	sp, #24
 800054e:	af00      	add	r7, sp, #0
 8000550:	60f8      	str	r0, [r7, #12]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	461a      	mov	r2, r3
 8000556:	460b      	mov	r3, r1
 8000558:	72fb      	strb	r3, [r7, #11]
 800055a:	4613      	mov	r3, r2
 800055c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800055e:	7abb      	ldrb	r3, [r7, #10]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d929      	bls.n	80005b8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fb0e 	bl	8000b8c <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	4610      	mov	r0, r2
 8000580:	f000 fb3f 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	75fb      	strb	r3, [r7, #23]
 8000588:	e00b      	b.n	80005a2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	f000 fb33 	bl	8000c02 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	3301      	adds	r3, #1
 80005a0:	75fb      	strb	r3, [r7, #23]
 80005a2:	7dfa      	ldrb	r2, [r7, #23]
 80005a4:	7abb      	ldrb	r3, [r7, #10]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d3ef      	bcc.n	800058a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 faeb 	bl	8000b8c <SX1278_hw_SetNSS>
 80005b6:	e000      	b.n	80005ba <SX1278_SPIBurstWrite+0x70>
		return;
 80005b8:	bf00      	nop
	}
}
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f90d 	bl	80007e8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f000 fb5d 	bl	8000c8e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f917 	bl	8000808 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	f04f 0100 	mov.w	r1, #0
 80005e8:	04d9      	lsls	r1, r3, #19
 80005ea:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005ee:	04d0      	lsls	r0, r2, #19
 80005f0:	4a6f      	ldr	r2, [pc, #444]	; (80007b0 <SX1278_config+0x1f0>)
 80005f2:	f04f 0300 	mov.w	r3, #0
 80005f6:	f7ff fdab 	bl	8000150 <__aeabi_uldivmod>
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000602:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	0c02      	lsrs	r2, r0, #16
 8000610:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000614:	0c0b      	lsrs	r3, r1, #16
 8000616:	b2d3      	uxtb	r3, r2
 8000618:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800061a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	0a02      	lsrs	r2, r0, #8
 8000628:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800062c:	0a0b      	lsrs	r3, r1, #8
 800062e:	b2d3      	uxtb	r3, r2
 8000630:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000632:	7c3b      	ldrb	r3, [r7, #16]
 8000634:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000636:	f107 020c 	add.w	r2, r7, #12
 800063a:	2303      	movs	r3, #3
 800063c:	2106      	movs	r1, #6
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff83 	bl	800054a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000644:	2234      	movs	r2, #52	; 0x34
 8000646:	2139      	movs	r1, #57	; 0x39
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff1c 	bl	8000486 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7c1b      	ldrb	r3, [r3, #16]
 8000652:	461a      	mov	r2, r3
 8000654:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <SX1278_config+0x1f4>)
 8000656:	5c9b      	ldrb	r3, [r3, r2]
 8000658:	461a      	mov	r2, r3
 800065a:	2109      	movs	r1, #9
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff ff12 	bl	8000486 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000662:	220b      	movs	r2, #11
 8000664:	210b      	movs	r1, #11
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff0d 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800066c:	2223      	movs	r2, #35	; 0x23
 800066e:	210c      	movs	r1, #12
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff ff08 	bl	8000486 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7c5b      	ldrb	r3, [r3, #17]
 800067a:	461a      	mov	r2, r3
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <SX1278_config+0x1f8>)
 800067e:	5c9b      	ldrb	r3, [r3, r2]
 8000680:	2b06      	cmp	r3, #6
 8000682:	d147      	bne.n	8000714 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7c9b      	ldrb	r3, [r3, #18]
 8000688:	461a      	mov	r2, r3
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <SX1278_config+0x1fc>)
 800068c:	5c9b      	ldrb	r3, [r3, r2]
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7cdb      	ldrb	r3, [r3, #19]
 8000696:	4619      	mov	r1, r3
 8000698:	4b49      	ldr	r3, [pc, #292]	; (80007c0 <SX1278_config+0x200>)
 800069a:	5c5b      	ldrb	r3, [r3, r1]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	211d      	movs	r1, #29
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff feea 	bl	8000486 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7c5b      	ldrb	r3, [r3, #17]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <SX1278_config+0x1f8>)
 80006ba:	5c9b      	ldrb	r3, [r3, r2]
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7d1b      	ldrb	r3, [r3, #20]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <SX1278_config+0x204>)
 80006c8:	5c5b      	ldrb	r3, [r3, r1]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4413      	add	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006d2:	3303      	adds	r3, #3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	211e      	movs	r1, #30
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff fed3 	bl	8000486 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006e0:	2131      	movs	r1, #49	; 0x31
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff feb0 	bl	8000448 <SX1278_SPIRead>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f023 0307 	bic.w	r3, r3, #7
 80006f2:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f043 0305 	orr.w	r3, r3, #5
 80006fa:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2131      	movs	r1, #49	; 0x31
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff febf 	bl	8000486 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000708:	220c      	movs	r2, #12
 800070a:	2137      	movs	r1, #55	; 0x37
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff feba 	bl	8000486 <SX1278_SPIWrite>
 8000712:	e029      	b.n	8000768 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7c9b      	ldrb	r3, [r3, #18]
 8000718:	461a      	mov	r2, r3
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SX1278_config+0x1fc>)
 800071c:	5c9b      	ldrb	r3, [r3, r2]
 800071e:	011b      	lsls	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7cdb      	ldrb	r3, [r3, #19]
 8000726:	4619      	mov	r1, r3
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SX1278_config+0x200>)
 800072a:	5c5b      	ldrb	r3, [r3, r1]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000730:	4413      	add	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	211d      	movs	r1, #29
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fea4 	bl	8000486 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7c5b      	ldrb	r3, [r3, #17]
 8000742:	461a      	mov	r2, r3
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <SX1278_config+0x1f8>)
 8000746:	5c9b      	ldrb	r3, [r3, r2]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7d1b      	ldrb	r3, [r3, #20]
 8000750:	4619      	mov	r1, r3
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <SX1278_config+0x204>)
 8000754:	5c5b      	ldrb	r3, [r3, r1]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800075a:	4413      	add	r3, r2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	211e      	movs	r1, #30
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fe8f 	bl	8000486 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000768:	2204      	movs	r2, #4
 800076a:	2126      	movs	r1, #38	; 0x26
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe8a 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000772:	2208      	movs	r2, #8
 8000774:	211f      	movs	r1, #31
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff fe85 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe80 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000786:	2208      	movs	r2, #8
 8000788:	2121      	movs	r1, #33	; 0x21
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fe7b 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000790:	2201      	movs	r2, #1
 8000792:	2141      	movs	r1, #65	; 0x41
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fe76 	bl	8000486 <SX1278_SPIWrite>
	module->readBytes = 0;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f810 	bl	80007c8 <SX1278_standby>
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	01e84800 	.word	0x01e84800
 80007b4:	080044d8 	.word	0x080044d8
 80007b8:	080044dc 	.word	0x080044dc
 80007bc:	080044e4 	.word	0x080044e4
 80007c0:	080044f0 	.word	0x080044f0
 80007c4:	080044f4 	.word	0x080044f4

080007c8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007d0:	2209      	movs	r2, #9
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fe56 	bl	8000486 <SX1278_SPIWrite>
	module->status = STANDBY;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	759a      	strb	r2, [r3, #22]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80007f0:	2208      	movs	r2, #8
 80007f2:	2101      	movs	r1, #1
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff fe46 	bl	8000486 <SX1278_SPIWrite>
	module->status = SLEEP;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	759a      	strb	r2, [r3, #22]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000810:	2288      	movs	r2, #136	; 0x88
 8000812:	2101      	movs	r1, #1
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fe36 	bl	8000486 <SX1278_SPIWrite>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	2112      	movs	r1, #18
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fe29 	bl	8000486 <SX1278_SPIWrite>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	460b      	mov	r3, r1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	7afa      	ldrb	r2, [r7, #11]
 800084e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f7ff feb5 	bl	80005c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000856:	2284      	movs	r2, #132	; 0x84
 8000858:	214d      	movs	r1, #77	; 0x4d
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff fe13 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000860:	22ff      	movs	r2, #255	; 0xff
 8000862:	2124      	movs	r1, #36	; 0x24
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff fe0e 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff fe09 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000874:	223f      	movs	r2, #63	; 0x3f
 8000876:	2111      	movs	r1, #17
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f7ff fe04 	bl	8000486 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff ffcf 	bl	8000822 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	461a      	mov	r2, r3
 8000888:	2122      	movs	r1, #34	; 0x22
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f7ff fdfb 	bl	8000486 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000890:	210f      	movs	r1, #15
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fdd8 	bl	8000448 <SX1278_SPIRead>
 8000898:	4603      	mov	r3, r0
 800089a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	461a      	mov	r2, r3
 80008a0:	210d      	movs	r1, #13
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fdef 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008a8:	228d      	movs	r2, #141	; 0x8d
 80008aa:	2101      	movs	r1, #1
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fdea 	bl	8000486 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ba:	2118      	movs	r1, #24
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fdc3 	bl	8000448 <SX1278_SPIRead>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d104      	bne.n	80008d6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2203      	movs	r2, #3
 80008d0:	759a      	strb	r2, [r3, #22]
			return 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e013      	b.n	80008fe <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f967 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff fe67 	bl	80005c0 <SX1278_config>
			return 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e003      	b.n	80008fe <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f9c9 	bl	8000c8e <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008fc:	e7dd      	b.n	80008ba <SX1278_LoRaEntryRx+0x7e>
	}
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000906:	b580      	push	{r7, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f9c6 	bl	8000ca4 <SX1278_hw_GetDIO0>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d030      	beq.n	8000980 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3317      	adds	r3, #23
 8000922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fb79 	bl	8003020 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800092e:	2110      	movs	r1, #16
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fd89 	bl	8000448 <SX1278_SPIRead>
 8000936:	4603      	mov	r3, r0
 8000938:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	461a      	mov	r2, r3
 800093e:	210d      	movs	r1, #13
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fda0 	bl	8000486 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7c5b      	ldrb	r3, [r3, #17]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7d5b      	ldrb	r3, [r3, #21]
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e005      	b.n	8000962 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000956:	2113      	movs	r1, #19
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fd75 	bl	8000448 <SX1278_SPIRead>
 800095e:	4603      	mov	r3, r0
 8000960:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f103 0217 	add.w	r2, r3, #23
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2100      	movs	r1, #0
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fdb3 	bl	80004d8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7bfa      	ldrb	r2, [r7, #15]
 8000976:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff51 	bl	8000822 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	460b      	mov	r3, r1
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	7afa      	ldrb	r2, [r7, #11]
 80009a0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff fe0c 	bl	80005c0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009a8:	2287      	movs	r2, #135	; 0x87
 80009aa:	214d      	movs	r1, #77	; 0x4d
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fd6a 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009b2:	2200      	movs	r2, #0
 80009b4:	2124      	movs	r1, #36	; 0x24
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fd65 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009bc:	2241      	movs	r2, #65	; 0x41
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fd60 	bl	8000486 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff ff2b 	bl	8000822 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009cc:	22f7      	movs	r2, #247	; 0xf7
 80009ce:	2111      	movs	r1, #17
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd58 	bl	8000486 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	461a      	mov	r2, r3
 80009da:	2122      	movs	r1, #34	; 0x22
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fd52 	bl	8000486 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009e2:	210e      	movs	r1, #14
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fd2f 	bl	8000448 <SX1278_SPIRead>
 80009ea:	4603      	mov	r3, r0
 80009ec:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	461a      	mov	r2, r3
 80009f2:	210d      	movs	r1, #13
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fd46 	bl	8000486 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009fa:	2122      	movs	r1, #34	; 0x22
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fd23 	bl	8000448 <SX1278_SPIRead>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a06:	7dba      	ldrb	r2, [r7, #22]
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d104      	bne.n	8000a18 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2202      	movs	r2, #2
 8000a12:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00e      	b.n	8000a36 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ea      	bne.n	80009fa <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8c6 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fdc6 	bl	80005c0 <SX1278_config>
			return 0;
 8000a34:	2300      	movs	r3, #0
		}
	}
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	60f8      	str	r0, [r7, #12]
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	2100      	movs	r1, #0
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fd78 	bl	800054a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a5a:	228b      	movs	r2, #139	; 0x8b
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff fd11 	bl	8000486 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f91b 	bl	8000ca4 <SX1278_hw_GetDIO0>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00b      	beq.n	8000a8c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a74:	2112      	movs	r1, #18
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fce6 	bl	8000448 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f7ff fed0 	bl	8000822 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff fea0 	bl	80007c8 <SX1278_standby>
			return 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e013      	b.n	8000ab4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f88c 	bl	8000bba <SX1278_hw_Reset>
			SX1278_config(module);
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff fd8c 	bl	80005c0 <SX1278_config>
			return 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e003      	b.n	8000ab4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f8ee 	bl	8000c8e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ab2:	e7d7      	b.n	8000a64 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f848 	bl	8000b62 <SX1278_hw_init>
	module->frequency = frequency;
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ad8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	7e3a      	ldrb	r2, [r7, #24]
 8000ae0:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	7f3a      	ldrb	r2, [r7, #28]
 8000ae6:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000aee:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000af6:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000afe:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b06:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f7ff fd59 	bl	80005c0 <SX1278_config>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4613      	mov	r3, r2
 8000b22:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d003      	beq.n	8000b38 <SX1278_read+0x22>
		length = module->readBytes;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b36:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3317      	adds	r3, #23
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f002 fa5f 	bl	8003004 <memcpy>
	rxBuf[length] = '\0';
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f80d 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6858      	ldr	r0, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f001 f815 	bl	8001bae <HAL_GPIO_WritePin>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6958      	ldr	r0, [r3, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	b299      	uxth	r1, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	bf0c      	ite	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	2300      	movne	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	f000 fffe 	bl	8001bae <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffe1 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6858      	ldr	r0, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f000 ffe9 	bl	8001bae <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 f856 	bl	8000c8e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6858      	ldr	r0, [r3, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f000 ffdd 	bl	8001bae <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f000 f84a 	bl	8000c8e <SX1278_hw_DelayMs>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffbb 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6998      	ldr	r0, [r3, #24]
 8000c1a:	1cf9      	adds	r1, r7, #3
 8000c1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c20:	2201      	movs	r2, #1
 8000c22:	f001 fc7b 	bl	800251c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c26:	bf00      	nop
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 ff53 	bl	8002ad8 <HAL_SPI_GetState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d1f7      	bne.n	8000c28 <SX1278_hw_SPICommand+0x26>
		;
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af02      	add	r7, sp, #8
 8000c48:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff99 	bl	8000b8c <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6998      	ldr	r0, [r3, #24]
 8000c5e:	f107 020e 	add.w	r2, r7, #14
 8000c62:	f107 010f 	add.w	r1, r7, #15
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f001 fd91 	bl	8002794 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c72:	bf00      	nop
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 ff2d 	bl	8002ad8 <HAL_SPI_GetState>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d1f7      	bne.n	8000c74 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 fce6 	bl	8001668 <HAL_Delay>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4610      	mov	r0, r2
 8000cba:	f000 ff61 	bl	8001b80 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a3c      	ldr	r2, [pc, #240]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_GPIO_Init+0x10c>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	4825      	ldr	r0, [pc, #148]	; (8000de4 <MX_GPIO_Init+0x110>)
 8000d50:	f000 ff2d 	bl	8001bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2110      	movs	r1, #16
 8000d58:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_GPIO_Init+0x114>)
 8000d5a:	f000 ff28 	bl	8001bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2102      	movs	r1, #2
 8000d62:	4822      	ldr	r0, [pc, #136]	; (8000dec <MX_GPIO_Init+0x118>)
 8000d64:	f000 ff23 	bl	8001bae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_GPIO_Init+0x110>)
 8000d82:	f000 fd79 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000d86:	2310      	movs	r3, #16
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0x114>)
 8000d9e:	f000 fd6b 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8000da2:	f241 0301 	movw	r3, #4097	; 0x1001
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_GPIO_Init+0x118>)
 8000db8:	f000 fd5e 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_GPIO_Init+0x118>)
 8000dd4:	f000 fd50 	bl	8001878 <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dfc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e18:	e000      	b.n	8000e1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	2332      	movs	r3, #50	; 0x32
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <_write+0x48>)
 8000e52:	f001 ff42 	bl	8002cda <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e009      	b.n	8000e70 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ffc3 	bl	8000df0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf1      	blt.n	8000e5c <_write+0x20>
	}
	return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000438 	.word	0x20000438

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fb89 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f941 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f7ff ff1d 	bl	8000cd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e9a:	f000 f987 	bl	80011ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000e9e:	f000 fae7 	bl	8001470 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //master = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
   	if (master == 1) {
 8000ea2:	4b81      	ldr	r3, [pc, #516]	; (80010a8 <main+0x220>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d103      	bne.n	8000eb2 <main+0x2a>
   		printf("Mode: Master-103\r\n");
 8000eaa:	4880      	ldr	r0, [pc, #512]	; (80010ac <main+0x224>)
 8000eac:	f002 f946 	bl	800313c <puts>
 8000eb0:	e002      	b.n	8000eb8 <main+0x30>
   		//HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
   	} else {
   		printf("Mode: Slave-103\r\n");
 8000eb2:	487f      	ldr	r0, [pc, #508]	; (80010b0 <main+0x228>)
 8000eb4:	f002 f942 	bl	800313c <puts>
   		//HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
   	}

   	//initialize LoRa module
   	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000eb8:	4b7e      	ldr	r3, [pc, #504]	; (80010b4 <main+0x22c>)
 8000eba:	4a7f      	ldr	r2, [pc, #508]	; (80010b8 <main+0x230>)
 8000ebc:	60da      	str	r2, [r3, #12]
   	SX1278_hw.dio0.pin = DIO0_Pin;
 8000ebe:	4b7d      	ldr	r3, [pc, #500]	; (80010b4 <main+0x22c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	609a      	str	r2, [r3, #8]
   	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000ec4:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <main+0x22c>)
 8000ec6:	4a7d      	ldr	r2, [pc, #500]	; (80010bc <main+0x234>)
 8000ec8:	615a      	str	r2, [r3, #20]
   	SX1278_hw.nss.pin = NSS_Pin;
 8000eca:	4b7a      	ldr	r3, [pc, #488]	; (80010b4 <main+0x22c>)
 8000ecc:	2210      	movs	r2, #16
 8000ece:	611a      	str	r2, [r3, #16]
   	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000ed0:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <main+0x22c>)
 8000ed2:	4a79      	ldr	r2, [pc, #484]	; (80010b8 <main+0x230>)
 8000ed4:	605a      	str	r2, [r3, #4]
   	SX1278_hw.reset.pin = RESET_Pin;
 8000ed6:	4b77      	ldr	r3, [pc, #476]	; (80010b4 <main+0x22c>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	601a      	str	r2, [r3, #0]
   	SX1278_hw.spi = &hspi1;
 8000edc:	4b75      	ldr	r3, [pc, #468]	; (80010b4 <main+0x22c>)
 8000ede:	4a78      	ldr	r2, [pc, #480]	; (80010c0 <main+0x238>)
 8000ee0:	619a      	str	r2, [r3, #24]

   	SX1278.hw = &SX1278_hw;
 8000ee2:	4b78      	ldr	r3, [pc, #480]	; (80010c4 <main+0x23c>)
 8000ee4:	4a73      	ldr	r2, [pc, #460]	; (80010b4 <main+0x22c>)
 8000ee6:	601a      	str	r2, [r3, #0]

   	printf("Configuring LoRa module\r\n");
 8000ee8:	4877      	ldr	r0, [pc, #476]	; (80010c8 <main+0x240>)
 8000eea:	f002 f927 	bl	800313c <puts>
   	SX1278_init(&SX1278, 868000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000eee:	230a      	movs	r3, #10
 8000ef0:	9305      	str	r3, [sp, #20]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9304      	str	r3, [sp, #16]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	2307      	movs	r3, #7
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2301      	movs	r3, #1
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	a366      	add	r3, pc, #408	; (adr r3, 80010a0 <main+0x218>)
 8000f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0c:	486d      	ldr	r0, [pc, #436]	; (80010c4 <main+0x23c>)
 8000f0e:	f7ff fdd5 	bl	8000abc <SX1278_init>
   	SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
   	printf("Done configuring LoRaModule\r\n");
 8000f12:	486e      	ldr	r0, [pc, #440]	; (80010cc <main+0x244>)
 8000f14:	f002 f912 	bl	800313c <puts>

   	if (master == 1) {
 8000f18:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <main+0x220>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10f      	bne.n	8000f40 <main+0xb8>
   		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000f20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f24:	2110      	movs	r1, #16
 8000f26:	4867      	ldr	r0, [pc, #412]	; (80010c4 <main+0x23c>)
 8000f28:	f7ff fd31 	bl	800098e <SX1278_LoRaEntryTx>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a68      	ldr	r2, [pc, #416]	; (80010d0 <main+0x248>)
 8000f30:	6013      	str	r3, [r2, #0]
   		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f38:	4866      	ldr	r0, [pc, #408]	; (80010d4 <main+0x24c>)
 8000f3a:	f000 fe38 	bl	8001bae <HAL_GPIO_WritePin>
 8000f3e:	e00e      	b.n	8000f5e <main+0xd6>
   	} else {
   		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000f40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f44:	2110      	movs	r1, #16
 8000f46:	485f      	ldr	r0, [pc, #380]	; (80010c4 <main+0x23c>)
 8000f48:	f7ff fc78 	bl	800083c <SX1278_LoRaEntryRx>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a60      	ldr	r2, [pc, #384]	; (80010d0 <main+0x248>)
 8000f50:	6013      	str	r3, [r2, #0]
   		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f58:	485e      	ldr	r0, [pc, #376]	; (80010d4 <main+0x24c>)
 8000f5a:	f000 fe28 	bl	8001bae <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		if (master == 1) {
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <main+0x220>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d144      	bne.n	8000ff0 <main+0x168>
  				printf("Master-103 ...\r\n");
 8000f66:	485c      	ldr	r0, [pc, #368]	; (80010d8 <main+0x250>)
 8000f68:	f002 f8e8 	bl	800313c <puts>
  				HAL_Delay(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f000 fb7a 	bl	8001668 <HAL_Delay>
  				printf("Sending package...\r\n");
 8000f74:	4859      	ldr	r0, [pc, #356]	; (80010dc <main+0x254>)
 8000f76:	f002 f8e1 	bl	800313c <puts>

  				message_length = sprintf(buffer, "Hello %d", message);
 8000f7a:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <main+0x258>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4958      	ldr	r1, [pc, #352]	; (80010e4 <main+0x25c>)
 8000f82:	4859      	ldr	r0, [pc, #356]	; (80010e8 <main+0x260>)
 8000f84:	f002 f8e2 	bl	800314c <siprintf>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <main+0x264>)
 8000f8c:	6013      	str	r3, [r2, #0]
  				ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <main+0x264>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	484a      	ldr	r0, [pc, #296]	; (80010c4 <main+0x23c>)
 8000f9c:	f7ff fcf7 	bl	800098e <SX1278_LoRaEntryTx>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <main+0x248>)
 8000fa4:	6013      	str	r3, [r2, #0]
  				printf("Entry: %d\r\n", ret);
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <main+0x248>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4850      	ldr	r0, [pc, #320]	; (80010f0 <main+0x268>)
 8000fae:	f002 f83f 	bl	8003030 <iprintf>

  				printf("Sending %s\r\n", buffer);
 8000fb2:	494d      	ldr	r1, [pc, #308]	; (80010e8 <main+0x260>)
 8000fb4:	484f      	ldr	r0, [pc, #316]	; (80010f4 <main+0x26c>)
 8000fb6:	f002 f83b 	bl	8003030 <iprintf>
  				ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,message_length, 2000);
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <main+0x264>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fc4:	4948      	ldr	r1, [pc, #288]	; (80010e8 <main+0x260>)
 8000fc6:	483f      	ldr	r0, [pc, #252]	; (80010c4 <main+0x23c>)
 8000fc8:	f7ff fd39 	bl	8000a3e <SX1278_LoRaTxPacket>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a40      	ldr	r2, [pc, #256]	; (80010d0 <main+0x248>)
 8000fd0:	6013      	str	r3, [r2, #0]
  				message += 1;
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <main+0x258>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <main+0x258>)
 8000fda:	6013      	str	r3, [r2, #0]

  				printf("Transmission: %d\r\n", ret);
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <main+0x248>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4845      	ldr	r0, [pc, #276]	; (80010f8 <main+0x270>)
 8000fe4:	f002 f824 	bl	8003030 <iprintf>
  				printf("Package sent...\r\n");
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <main+0x274>)
 8000fea:	f002 f8a7 	bl	800313c <puts>
 8000fee:	e02c      	b.n	800104a <main+0x1c2>

  			} else {
  				printf("Slave-103 ...\r\n");
 8000ff0:	4843      	ldr	r0, [pc, #268]	; (8001100 <main+0x278>)
 8000ff2:	f002 f8a3 	bl	800313c <puts>
  				HAL_Delay(800);
 8000ff6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ffa:	f000 fb35 	bl	8001668 <HAL_Delay>
  				printf("Receiving package...\r\n");
 8000ffe:	4841      	ldr	r0, [pc, #260]	; (8001104 <main+0x27c>)
 8001000:	f002 f89c 	bl	800313c <puts>

  				ret = SX1278_LoRaRxPacket(&SX1278);
 8001004:	482f      	ldr	r0, [pc, #188]	; (80010c4 <main+0x23c>)
 8001006:	f7ff fc7e 	bl	8000906 <SX1278_LoRaRxPacket>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <main+0x248>)
 8001010:	601a      	str	r2, [r3, #0]
  				printf("Received: %d\r\n", ret);
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <main+0x248>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	483b      	ldr	r0, [pc, #236]	; (8001108 <main+0x280>)
 800101a:	f002 f809 	bl	8003030 <iprintf>
  				if (ret > 0) {
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <main+0x248>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dd0e      	ble.n	8001044 <main+0x1bc>
  					SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <main+0x248>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	492e      	ldr	r1, [pc, #184]	; (80010e8 <main+0x260>)
 8001030:	4824      	ldr	r0, [pc, #144]	; (80010c4 <main+0x23c>)
 8001032:	f7ff fd70 	bl	8000b16 <SX1278_read>
  					printf("Content (%d): %s\r\n", ret, buffer);
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <main+0x248>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <main+0x260>)
 800103c:	4619      	mov	r1, r3
 800103e:	4833      	ldr	r0, [pc, #204]	; (800110c <main+0x284>)
 8001040:	f001 fff6 	bl	8003030 <iprintf>
  				}
  				printf("Package received ...\r\n");
 8001044:	4832      	ldr	r0, [pc, #200]	; (8001110 <main+0x288>)
 8001046:	f002 f879 	bl	800313c <puts>

  			}

  			//change mode
  			//if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin)) {
  				printf("Changing mode\r\n");
 800104a:	4832      	ldr	r0, [pc, #200]	; (8001114 <main+0x28c>)
 800104c:	f002 f876 	bl	800313c <puts>
  				//master = ~master & 0x01;
  				if (master == 1) {
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <main+0x220>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10f      	bne.n	8001078 <main+0x1f0>
  					ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8001058:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800105c:	2110      	movs	r1, #16
 800105e:	4819      	ldr	r0, [pc, #100]	; (80010c4 <main+0x23c>)
 8001060:	f7ff fc95 	bl	800098e <SX1278_LoRaEntryTx>
 8001064:	4603      	mov	r3, r0
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <main+0x248>)
 8001068:	6013      	str	r3, [r2, #0]
  					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <main+0x24c>)
 8001072:	f000 fd9c 	bl	8001bae <HAL_GPIO_WritePin>
 8001076:	e00e      	b.n	8001096 <main+0x20e>
  				} else {
  					ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8001078:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800107c:	2110      	movs	r1, #16
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <main+0x23c>)
 8001080:	f7ff fbdc 	bl	800083c <SX1278_LoRaEntryRx>
 8001084:	4603      	mov	r3, r0
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <main+0x248>)
 8001088:	6013      	str	r3, [r2, #0]
  					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <main+0x24c>)
 8001092:	f000 fd8c 	bl	8001bae <HAL_GPIO_WritePin>
  				}
  				HAL_Delay(1000);
 8001096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109a:	f000 fae5 	bl	8001668 <HAL_Delay>
  		if (master == 1) {
 800109e:	e75e      	b.n	8000f5e <main+0xd6>
 80010a0:	33bca100 	.word	0x33bca100
 80010a4:	00000000 	.word	0x00000000
 80010a8:	20000000 	.word	0x20000000
 80010ac:	0800437c 	.word	0x0800437c
 80010b0:	08004390 	.word	0x08004390
 80010b4:	200003c4 	.word	0x200003c4
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	40010800 	.word	0x40010800
 80010c0:	200003e0 	.word	0x200003e0
 80010c4:	200002a8 	.word	0x200002a8
 80010c8:	080043a4 	.word	0x080043a4
 80010cc:	080043c0 	.word	0x080043c0
 80010d0:	200003c0 	.word	0x200003c0
 80010d4:	40011000 	.word	0x40011000
 80010d8:	080043e0 	.word	0x080043e0
 80010dc:	080043f0 	.word	0x080043f0
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	08004404 	.word	0x08004404
 80010e8:	200000a8 	.word	0x200000a8
 80010ec:	200000a0 	.word	0x200000a0
 80010f0:	08004410 	.word	0x08004410
 80010f4:	0800441c 	.word	0x0800441c
 80010f8:	0800442c 	.word	0x0800442c
 80010fc:	08004440 	.word	0x08004440
 8001100:	08004454 	.word	0x08004454
 8001104:	08004464 	.word	0x08004464
 8001108:	0800447c 	.word	0x0800447c
 800110c:	0800448c 	.word	0x0800448c
 8001110:	080044a0 	.word	0x080044a0
 8001114:	080044b8 	.word	0x080044b8

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	; 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	; 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f001 ff7a 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001156:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fd3d 	bl	8001be0 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800116c:	f000 f819 	bl	80011a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 ffa8 	bl	80020e0 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001196:	f000 f804 	bl	80011a2 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	; 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a6:	b672      	cpsid	i
}
 80011a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011aa:	e7fe      	b.n	80011aa <Error_Handler+0x8>

080011ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SPI1_Init+0x64>)
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <MX_SPI1_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SPI1_Init+0x64>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI1_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SPI1_Init+0x64>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SPI1_Init+0x64>)
 80011e0:	2220      	movs	r2, #32
 80011e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SPI1_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_SPI1_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_SPI1_Init+0x64>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_SPI1_Init+0x64>)
 80011fe:	f001 f909 	bl	8002414 <HAL_SPI_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001208:	f7ff ffcb 	bl	80011a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200003e0 	.word	0x200003e0
 8001214:	40013000 	.word	0x40013000

08001218 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_SPI_MspInit+0x88>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d12f      	bne.n	8001298 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_SPI_MspInit+0x8c>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_SPI_MspInit+0x8c>)
 800123e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_SPI_MspInit+0x8c>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_SPI_MspInit+0x8c>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <HAL_SPI_MspInit+0x8c>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_SPI_MspInit+0x8c>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <HAL_SPI_MspInit+0x90>)
 800127c:	f000 fafc 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_SPI_MspInit+0x90>)
 8001294:	f000 faf0 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013000 	.word	0x40013000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40010800 	.word	0x40010800

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a14      	ldr	r2, [pc, #80]	; (8001308 <HAL_MspInit+0x5c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_MspInit+0x5c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_MspInit+0x5c>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_MspInit+0x5c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_MspInit+0x60>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_MspInit+0x60>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001356:	f000 f96b 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e00a      	b.n	8001386 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001370:	f3af 8000 	nop.w
 8001374:	4601      	mov	r1, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	b2ca      	uxtb	r2, r1
 800137e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	dbf0      	blt.n	8001370 <_read+0x12>
	}

return len;
 800138e:	687b      	ldr	r3, [r7, #4]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013be:	605a      	str	r2, [r3, #4]
	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <_isatty>:

int _isatty(int file)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001400:	4a14      	ldr	r2, [pc, #80]	; (8001454 <_sbrk+0x5c>)
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <_sbrk+0x60>)
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <_sbrk+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <_sbrk+0x68>)
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d207      	bcs.n	8001438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001428:	f001 fdc2 	bl	8002fb0 <__errno>
 800142c:	4603      	mov	r3, r0
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001436:	e009      	b.n	800144c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20005000 	.word	0x20005000
 8001458:	00000400 	.word	0x00000400
 800145c:	20000094 	.word	0x20000094
 8001460:	20000490 	.word	0x20000490

08001464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART2_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART2_UART_Init+0x4c>)
 80014a8:	f001 fbca 	bl	8002c40 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f7ff fe76 	bl	80011a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000438 	.word	0x20000438
 80014c0:	40004400 	.word	0x40004400

080014c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_UART_MspInit+0x88>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d12f      	bne.n	8001544 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ee:	61d3      	str	r3, [r2, #28]
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x8c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_UART_MspInit+0x8c>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x8c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001514:	2304      	movs	r3, #4
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	480b      	ldr	r0, [pc, #44]	; (8001554 <HAL_UART_MspInit+0x90>)
 8001528:	f000 f9a6 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800152c:	2308      	movs	r3, #8
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_UART_MspInit+0x90>)
 8001540:	f000 f99a 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40004400 	.word	0x40004400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	; (800159c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800157e:	f7ff ff71 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f001 fd1b 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001586:	f7ff fc7f 	bl	8000e88 <main>
  bx lr
 800158a:	4770      	bx	lr
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001594:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8001598:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800159c:	20000490 	.word	0x20000490

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_Init+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_Init+0x28>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f92b 	bl	8001810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fe74 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f935 	bl	800185e <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800160c:	f000 f90b 	bl	8001826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000004 	.word	0x20000004
 8001628:	2000000c 	.word	0x2000000c
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_IncTick+0x1c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x20>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_IncTick+0x20>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	2000000c 	.word	0x2000000c
 8001650:	2000047c 	.word	0x2000047c

08001654 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_GetTick+0x10>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	2000047c 	.word	0x2000047c

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff fff0 	bl	8001654 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffe0 	bl	8001654 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000000c 	.word	0x2000000c

080016b0 <__NVIC_SetPriorityGrouping>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_SetPriority>:
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <SysTick_Config>:
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017dc:	d301      	bcc.n	80017e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e00f      	b.n	8001802 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <SysTick_Config+0x40>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	210f      	movs	r1, #15
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f7ff ff90 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SysTick_Config+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <SysTick_Config+0x40>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff49 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001838:	f7ff ff5e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800183c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	6978      	ldr	r0, [r7, #20]
 8001844:	f7ff ff90 	bl	8001768 <NVIC_EncodePriority>
 8001848:	4602      	mov	r2, r0
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff5f 	bl	8001714 <__NVIC_SetPriority>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffb0 	bl	80017cc <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b08b      	sub	sp, #44	; 0x2c
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e169      	b.n	8001b60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800188c:	2201      	movs	r2, #1
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f040 8158 	bne.w	8001b5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a9a      	ldr	r2, [pc, #616]	; (8001b18 <HAL_GPIO_Init+0x2a0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d05e      	beq.n	8001972 <HAL_GPIO_Init+0xfa>
 80018b4:	4a98      	ldr	r2, [pc, #608]	; (8001b18 <HAL_GPIO_Init+0x2a0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d875      	bhi.n	80019a6 <HAL_GPIO_Init+0x12e>
 80018ba:	4a98      	ldr	r2, [pc, #608]	; (8001b1c <HAL_GPIO_Init+0x2a4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d058      	beq.n	8001972 <HAL_GPIO_Init+0xfa>
 80018c0:	4a96      	ldr	r2, [pc, #600]	; (8001b1c <HAL_GPIO_Init+0x2a4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d86f      	bhi.n	80019a6 <HAL_GPIO_Init+0x12e>
 80018c6:	4a96      	ldr	r2, [pc, #600]	; (8001b20 <HAL_GPIO_Init+0x2a8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d052      	beq.n	8001972 <HAL_GPIO_Init+0xfa>
 80018cc:	4a94      	ldr	r2, [pc, #592]	; (8001b20 <HAL_GPIO_Init+0x2a8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d869      	bhi.n	80019a6 <HAL_GPIO_Init+0x12e>
 80018d2:	4a94      	ldr	r2, [pc, #592]	; (8001b24 <HAL_GPIO_Init+0x2ac>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04c      	beq.n	8001972 <HAL_GPIO_Init+0xfa>
 80018d8:	4a92      	ldr	r2, [pc, #584]	; (8001b24 <HAL_GPIO_Init+0x2ac>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d863      	bhi.n	80019a6 <HAL_GPIO_Init+0x12e>
 80018de:	4a92      	ldr	r2, [pc, #584]	; (8001b28 <HAL_GPIO_Init+0x2b0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d046      	beq.n	8001972 <HAL_GPIO_Init+0xfa>
 80018e4:	4a90      	ldr	r2, [pc, #576]	; (8001b28 <HAL_GPIO_Init+0x2b0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d85d      	bhi.n	80019a6 <HAL_GPIO_Init+0x12e>
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d82a      	bhi.n	8001944 <HAL_GPIO_Init+0xcc>
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	d859      	bhi.n	80019a6 <HAL_GPIO_Init+0x12e>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <HAL_GPIO_Init+0x80>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001973 	.word	0x08001973
 80018fc:	0800194d 	.word	0x0800194d
 8001900:	0800195f 	.word	0x0800195f
 8001904:	080019a1 	.word	0x080019a1
 8001908:	080019a7 	.word	0x080019a7
 800190c:	080019a7 	.word	0x080019a7
 8001910:	080019a7 	.word	0x080019a7
 8001914:	080019a7 	.word	0x080019a7
 8001918:	080019a7 	.word	0x080019a7
 800191c:	080019a7 	.word	0x080019a7
 8001920:	080019a7 	.word	0x080019a7
 8001924:	080019a7 	.word	0x080019a7
 8001928:	080019a7 	.word	0x080019a7
 800192c:	080019a7 	.word	0x080019a7
 8001930:	080019a7 	.word	0x080019a7
 8001934:	080019a7 	.word	0x080019a7
 8001938:	080019a7 	.word	0x080019a7
 800193c:	08001955 	.word	0x08001955
 8001940:	08001969 	.word	0x08001969
 8001944:	4a79      	ldr	r2, [pc, #484]	; (8001b2c <HAL_GPIO_Init+0x2b4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800194a:	e02c      	b.n	80019a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e029      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	3304      	adds	r3, #4
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e024      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	3308      	adds	r3, #8
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e01f      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	330c      	adds	r3, #12
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e01a      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800197a:	2304      	movs	r3, #4
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e013      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001988:	2308      	movs	r3, #8
 800198a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	611a      	str	r2, [r3, #16]
          break;
 8001992:	e009      	b.n	80019a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001994:	2308      	movs	r3, #8
 8001996:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	615a      	str	r2, [r3, #20]
          break;
 800199e:	e003      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x130>
          break;
 80019a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	d801      	bhi.n	80019b2 <HAL_GPIO_Init+0x13a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	e001      	b.n	80019b6 <HAL_GPIO_Init+0x13e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3304      	adds	r3, #4
 80019b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d802      	bhi.n	80019c4 <HAL_GPIO_Init+0x14c>
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x152>
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	3b08      	subs	r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	210f      	movs	r1, #15
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	401a      	ands	r2, r3
 80019dc:	6a39      	ldr	r1, [r7, #32]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80b1 	beq.w	8001b5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <HAL_GPIO_Init+0x2b8>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_GPIO_Init+0x2b8>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_GPIO_Init+0x2b8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a10:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2bc>)
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a40      	ldr	r2, [pc, #256]	; (8001b38 <HAL_GPIO_Init+0x2c0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_GPIO_Init+0x1ec>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	; (8001b3c <HAL_GPIO_Init+0x2c4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_GPIO_Init+0x1e8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3e      	ldr	r2, [pc, #248]	; (8001b40 <HAL_GPIO_Init+0x2c8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0x1e4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3d      	ldr	r2, [pc, #244]	; (8001b44 <HAL_GPIO_Init+0x2cc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_GPIO_Init+0x1e0>
 8001a54:	2303      	movs	r3, #3
 8001a56:	e006      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e004      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_GPIO_Init+0x1ee>
 8001a64:	2300      	movs	r3, #0
 8001a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a68:	f002 0203 	and.w	r2, r2, #3
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a76:	492f      	ldr	r1, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x2bc>)
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	492c      	ldr	r1, [pc, #176]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4928      	ldr	r1, [pc, #160]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4922      	ldr	r1, [pc, #136]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	491e      	ldr	r1, [pc, #120]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4918      	ldr	r1, [pc, #96]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	608b      	str	r3, [r1, #8]
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	4914      	ldr	r1, [pc, #80]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d021      	beq.n	8001b4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
 8001b14:	e021      	b.n	8001b5a <HAL_GPIO_Init+0x2e2>
 8001b16:	bf00      	nop
 8001b18:	10320000 	.word	0x10320000
 8001b1c:	10310000 	.word	0x10310000
 8001b20:	10220000 	.word	0x10220000
 8001b24:	10210000 	.word	0x10210000
 8001b28:	10120000 	.word	0x10120000
 8001b2c:	10110000 	.word	0x10110000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40010800 	.word	0x40010800
 8001b3c:	40010c00 	.word	0x40010c00
 8001b40:	40011000 	.word	0x40011000
 8001b44:	40011400 	.word	0x40011400
 8001b48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_GPIO_Init+0x304>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	4909      	ldr	r1, [pc, #36]	; (8001b7c <HAL_GPIO_Init+0x304>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f ae8e 	bne.w	800188c <HAL_GPIO_Init+0x14>
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	372c      	adds	r7, #44	; 0x2c
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbe:	787b      	ldrb	r3, [r7, #1]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bca:	e003      	b.n	8001bd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	041a      	lsls	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e26c      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8087 	beq.w	8001d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d00c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d112      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d10b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x12c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d168      	bne.n	8001d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e246      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x76>
 8001c48:	4b80      	ldr	r3, [pc, #512]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a7f      	ldr	r2, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x98>
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b78      	ldr	r3, [pc, #480]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a77      	ldr	r2, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xbc>
 8001c82:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a71      	ldr	r2, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6e      	ldr	r2, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd4>
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a67      	ldr	r2, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fcca 	bl	8001654 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fcc6 	bl	8001654 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1fa      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe4>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fcb6 	bl	8001654 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fcb2 	bl	8001654 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1e6      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x10c>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d063      	beq.n	8001de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1ba      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4939      	ldr	r1, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fc6b 	bl	8001654 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff fc67 	bl	8001654 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e19b      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4927      	ldr	r1, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCC_OscConfig+0x270>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc4a 	bl	8001654 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fc46 	bl	8001654 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e17a      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03a      	beq.n	8001e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d019      	beq.n	8001e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fc2a 	bl	8001654 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc26 	bl	8001654 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e15a      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fad8 	bl	80023d8 <RCC_Delay>
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fc10 	bl	8001654 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff fc0c 	bl	8001654 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d908      	bls.n	8001e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e140      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	42420000 	.word	0x42420000
 8001e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b9e      	ldr	r3, [pc, #632]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e9      	bne.n	8001e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a6 	beq.w	8001fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b97      	ldr	r3, [pc, #604]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b94      	ldr	r3, [pc, #592]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a93      	ldr	r2, [pc, #588]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b91      	ldr	r3, [pc, #580]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b8e      	ldr	r3, [pc, #568]	; (80020d8 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	; (80020d8 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a8a      	ldr	r2, [pc, #552]	; (80020d8 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fbcd 	bl	8001654 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7ff fbc9 	bl	8001654 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0fd      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b81      	ldr	r3, [pc, #516]	; (80020d8 <HAL_RCC_OscConfig+0x4f8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x312>
 8001ee4:	4b7b      	ldr	r3, [pc, #492]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a7a      	ldr	r2, [pc, #488]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x334>
 8001efa:	4b76      	ldr	r3, [pc, #472]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a75      	ldr	r2, [pc, #468]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a72      	ldr	r2, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x356>
 8001f1c:	4b6d      	ldr	r3, [pc, #436]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a6c      	ldr	r2, [pc, #432]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a69      	ldr	r2, [pc, #420]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x36e>
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4b64      	ldr	r3, [pc, #400]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a63      	ldr	r2, [pc, #396]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fb7d 	bl	8001654 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fb79 	bl	8001654 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0ab      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x37e>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb67 	bl	8001654 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fb63 	bl	8001654 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e095      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b48      	ldr	r3, [pc, #288]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4a47      	ldr	r2, [pc, #284]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8081 	beq.w	80020ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc8:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d061      	beq.n	8002098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d146      	bne.n	800206a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_RCC_OscConfig+0x4fc>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fb37 	bl	8001654 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fea:	f7ff fb33 	bl	8001654 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e067      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f0      	bne.n	8001fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	492d      	ldr	r1, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a19      	ldr	r1, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	430b      	orrs	r3, r1
 8002036:	4927      	ldr	r1, [pc, #156]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_RCC_OscConfig+0x4fc>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fb07 	bl	8001654 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fb03 	bl	8001654 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e037      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x46a>
 8002068:	e02f      	b.n	80020ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCC_OscConfig+0x4fc>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff faf0 	bl	8001654 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff faec 	bl	8001654 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e020      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x498>
 8002096:	e018      	b.n	80020ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42420060 	.word	0x42420060

080020e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0d0      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 0207 	bic.w	r2, r3, #7
 800210a:	4965      	ldr	r1, [pc, #404]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b8      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002154:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800215e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	494d      	ldr	r1, [pc, #308]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d040      	beq.n	8002200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d115      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e07f      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e073      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4936      	ldr	r1, [pc, #216]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff fa40 	bl	8001654 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7ff fa3c 	bl	8001654 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e053      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d210      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4922      	ldr	r1, [pc, #136]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e032      	b.n	8002296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4916      	ldr	r1, [pc, #88]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	490e      	ldr	r1, [pc, #56]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226e:	f000 f821 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002272:	4602      	mov	r2, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	490a      	ldr	r1, [pc, #40]	; (80022a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1cc>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1d0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f99e 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	080044f8 	.word	0x080044f8
 80022ac:	20000004 	.word	0x20000004
 80022b0:	20000008 	.word	0x20000008

080022b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b4:	b490      	push	{r4, r7}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022ba:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022bc:	1d3c      	adds	r4, r7, #4
 80022be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022c4:	f240 2301 	movw	r3, #513	; 0x201
 80022c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x40>
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x46>
 80022f2:	e02d      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f6:	623b      	str	r3, [r7, #32]
      break;
 80022f8:	e02d      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	0c9b      	lsrs	r3, r3, #18
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002306:	4413      	add	r3, r2
 8002308:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800230c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	0c5b      	lsrs	r3, r3, #17
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002326:	4413      	add	r3, r2
 8002328:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800232c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002332:	fb02 f203 	mul.w	r2, r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	e004      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	623b      	str	r3, [r7, #32]
      break;
 800234e:	e002      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002352:	623b      	str	r3, [r7, #32]
      break;
 8002354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002356:	6a3b      	ldr	r3, [r7, #32]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc90      	pop	{r4, r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	080044c8 	.word	0x080044c8
 8002368:	40021000 	.word	0x40021000
 800236c:	007a1200 	.word	0x007a1200
 8002370:	003d0900 	.word	0x003d0900

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_RCC_GetHCLKFreq+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000004 	.word	0x20000004

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800238c:	f7ff fff2 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08004508 	.word	0x08004508

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff ffde 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08004508 	.word	0x08004508

080023d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <RCC_Delay+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <RCC_Delay+0x38>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a5b      	lsrs	r3, r3, #9
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f4:	bf00      	nop
  }
  while (Delay --);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <RCC_Delay+0x1c>
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000004 	.word	0x20000004
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e076      	b.n	8002514 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002436:	d009      	beq.n	800244c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
 800243e:	e005      	b.n	800244c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fed6 	bl	8001218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	0c1a      	lsrs	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f002 0204 	and.w	r2, r2, #4
 80024f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002502:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_SPI_Transmit+0x22>
 800253a:	2302      	movs	r3, #2
 800253c:	e126      	b.n	800278c <HAL_SPI_Transmit+0x270>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002546:	f7ff f885 	bl	8001654 <HAL_GetTick>
 800254a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002560:	e10b      	b.n	800277a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_SPI_Transmit+0x52>
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002572:	e102      	b.n	800277a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ba:	d10f      	bne.n	80025dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d007      	beq.n	80025fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002602:	d14b      	bne.n	800269c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_SPI_Transmit+0xf6>
 800260c:	8afb      	ldrh	r3, [r7, #22]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d13e      	bne.n	8002690 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002636:	e02b      	b.n	8002690 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	d112      	bne.n	800266c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	86da      	strh	r2, [r3, #54]	; 0x36
 800266a:	e011      	b.n	8002690 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266c:	f7fe fff2 	bl	8001654 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d803      	bhi.n	8002684 <HAL_SPI_Transmit+0x168>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002682:	d102      	bne.n	800268a <HAL_SPI_Transmit+0x16e>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800268e:	e074      	b.n	800277a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ce      	bne.n	8002638 <HAL_SPI_Transmit+0x11c>
 800269a:	e04c      	b.n	8002736 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_SPI_Transmit+0x18e>
 80026a4:	8afb      	ldrh	r3, [r7, #22]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d140      	bne.n	800272c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026d0:	e02c      	b.n	800272c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d113      	bne.n	8002708 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
 8002706:	e011      	b.n	800272c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002708:	f7fe ffa4 	bl	8001654 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d803      	bhi.n	8002720 <HAL_SPI_Transmit+0x204>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271e:	d102      	bne.n	8002726 <HAL_SPI_Transmit+0x20a>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	77fb      	strb	r3, [r7, #31]
          goto error;
 800272a:	e026      	b.n	800277a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1cd      	bne.n	80026d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	6839      	ldr	r1, [r7, #0]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fa62 	bl	8002c04 <SPI_EndRxTxTransaction>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e000      	b.n	800277a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002778:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800278a:	7ffb      	ldrb	r3, [r7, #31]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_SPI_TransmitReceive+0x26>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e18a      	b.n	8002ad0 <HAL_SPI_TransmitReceive+0x33c>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c2:	f7fe ff47 	bl	8001654 <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d00f      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x70>
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ea:	d107      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x68>
 80027f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002802:	e15b      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x82>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x82>
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800281c:	e14e      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2205      	movs	r2, #5
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	887a      	ldrh	r2, [r7, #2]
 800285a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d007      	beq.n	8002886 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288e:	d178      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_TransmitReceive+0x10a>
 8002898:	8b7b      	ldrh	r3, [r7, #26]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d166      	bne.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028c2:	e053      	b.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11b      	bne.n	800290a <HAL_SPI_TransmitReceive+0x176>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d016      	beq.n	800290a <HAL_SPI_TransmitReceive+0x176>
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d113      	bne.n	800290a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	881a      	ldrh	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b01      	cmp	r3, #1
 8002916:	d119      	bne.n	800294c <HAL_SPI_TransmitReceive+0x1b8>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	b292      	uxth	r2, r2
 800292e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	1c9a      	adds	r2, r3, #2
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800294c:	f7fe fe82 	bl	8001654 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002958:	429a      	cmp	r2, r3
 800295a:	d807      	bhi.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002962:	d003      	beq.n	800296c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800296a:	e0a7      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1a6      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x130>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1a1      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x130>
 8002980:	e07c      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1fc>
 800298a:	8b7b      	ldrh	r3, [r7, #26]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d16b      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b6:	e057      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d11c      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d114      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d119      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x2ae>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a42:	f7fe fe07 	bl	8001654 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d803      	bhi.n	8002a5a <HAL_SPI_TransmitReceive+0x2c6>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_TransmitReceive+0x2cc>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a66:	e029      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1a2      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x224>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d19d      	bne.n	80029b8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f8bf 	bl	8002c04 <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a98:	e010      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	e000      	b.n	8002abc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002acc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae6:	b2db      	uxtb	r3, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
	...

08002af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b04:	f7fe fda6 	bl	8001654 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b14:	f7fe fd9e 	bl	8001654 <HAL_GetTick>
 8002b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	015b      	lsls	r3, r3, #5
 8002b20:	0d1b      	lsrs	r3, r3, #20
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b2a:	e054      	b.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b32:	d050      	beq.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b34:	f7fe fd8e 	bl	8001654 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d902      	bls.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d13d      	bne.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b62:	d111      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6c:	d004      	beq.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d107      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b90:	d10f      	bne.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e017      	b.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d19b      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000004 	.word	0x20000004

08002c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff ff6a 	bl	8002af4 <SPI_WaitFlagStateUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 0220 	orr.w	r2, r3, #32
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e000      	b.n	8002c38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e03f      	b.n	8002cd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fc2c 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f905 	bl	8002e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	; 0x28
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d17c      	bne.n	8002df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_UART_Transmit+0x2c>
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e075      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Transmit+0x3e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e06e      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe fc91 	bl	8001654 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	88fa      	ldrh	r2, [r7, #6]
 8002d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d108      	bne.n	8002d5c <HAL_UART_Transmit+0x82>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	e003      	b.n	8002d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d6c:	e02a      	b.n	8002dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f840 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e036      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	3302      	adds	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e007      	b.n	8002db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1cf      	bne.n	8002d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f810 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0e:	e02c      	b.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e16:	d028      	beq.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e1e:	f7fe fc19 	bl	8001654 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d21d      	bcs.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e00f      	b.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d0c3      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ece:	f023 030c 	bic.w	r3, r3, #12
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <UART_SetConfig+0x114>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fa58 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	e002      	b.n	8002f0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fa40 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009a      	lsls	r2, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <UART_SetConfig+0x118>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	0119      	lsls	r1, r3, #4
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <UART_SetConfig+0x118>)
 8002f42:	fba3 0302 	umull	r0, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2064      	movs	r0, #100	; 0x64
 8002f4a:	fb00 f303 	mul.w	r3, r0, r3
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	3332      	adds	r3, #50	; 0x32
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <UART_SetConfig+0x118>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f60:	4419      	add	r1, r3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <UART_SetConfig+0x118>)
 8002f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2064      	movs	r0, #100	; 0x64
 8002f82:	fb00 f303 	mul.w	r3, r0, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <UART_SetConfig+0x118>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	51eb851f 	.word	0x51eb851f

08002fb0 <__errno>:
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <__errno+0x8>)
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000010 	.word	0x20000010

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	4d0c      	ldr	r5, [pc, #48]	; (8002ff4 <__libc_init_array+0x38>)
 8002fc2:	4c0d      	ldr	r4, [pc, #52]	; (8002ff8 <__libc_init_array+0x3c>)
 8002fc4:	1b64      	subs	r4, r4, r5
 8002fc6:	10a4      	asrs	r4, r4, #2
 8002fc8:	42a6      	cmp	r6, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	f001 f9ca 	bl	8004364 <_init>
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	4d0a      	ldr	r5, [pc, #40]	; (8002ffc <__libc_init_array+0x40>)
 8002fd4:	4c0a      	ldr	r4, [pc, #40]	; (8003000 <__libc_init_array+0x44>)
 8002fd6:	1b64      	subs	r4, r4, r5
 8002fd8:	10a4      	asrs	r4, r4, #2
 8002fda:	42a6      	cmp	r6, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe4:	4798      	blx	r3
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fee:	4798      	blx	r3
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	080045b0 	.word	0x080045b0
 8002ff8:	080045b0 	.word	0x080045b0
 8002ffc:	080045b0 	.word	0x080045b0
 8003000:	080045b4 	.word	0x080045b4

08003004 <memcpy>:
 8003004:	440a      	add	r2, r1
 8003006:	4291      	cmp	r1, r2
 8003008:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800300c:	d100      	bne.n	8003010 <memcpy+0xc>
 800300e:	4770      	bx	lr
 8003010:	b510      	push	{r4, lr}
 8003012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003016:	4291      	cmp	r1, r2
 8003018:	f803 4f01 	strb.w	r4, [r3, #1]!
 800301c:	d1f9      	bne.n	8003012 <memcpy+0xe>
 800301e:	bd10      	pop	{r4, pc}

08003020 <memset>:
 8003020:	4603      	mov	r3, r0
 8003022:	4402      	add	r2, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <iprintf>:
 8003030:	b40f      	push	{r0, r1, r2, r3}
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <iprintf+0x2c>)
 8003034:	b513      	push	{r0, r1, r4, lr}
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	b124      	cbz	r4, 8003044 <iprintf+0x14>
 800303a:	69a3      	ldr	r3, [r4, #24]
 800303c:	b913      	cbnz	r3, 8003044 <iprintf+0x14>
 800303e:	4620      	mov	r0, r4
 8003040:	f000 fa7e 	bl	8003540 <__sinit>
 8003044:	ab05      	add	r3, sp, #20
 8003046:	4620      	mov	r0, r4
 8003048:	9a04      	ldr	r2, [sp, #16]
 800304a:	68a1      	ldr	r1, [r4, #8]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	f000 fda5 	bl	8003b9c <_vfiprintf_r>
 8003052:	b002      	add	sp, #8
 8003054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003058:	b004      	add	sp, #16
 800305a:	4770      	bx	lr
 800305c:	20000010 	.word	0x20000010

08003060 <_puts_r>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	460e      	mov	r6, r1
 8003064:	4605      	mov	r5, r0
 8003066:	b118      	cbz	r0, 8003070 <_puts_r+0x10>
 8003068:	6983      	ldr	r3, [r0, #24]
 800306a:	b90b      	cbnz	r3, 8003070 <_puts_r+0x10>
 800306c:	f000 fa68 	bl	8003540 <__sinit>
 8003070:	69ab      	ldr	r3, [r5, #24]
 8003072:	68ac      	ldr	r4, [r5, #8]
 8003074:	b913      	cbnz	r3, 800307c <_puts_r+0x1c>
 8003076:	4628      	mov	r0, r5
 8003078:	f000 fa62 	bl	8003540 <__sinit>
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <_puts_r+0xd0>)
 800307e:	429c      	cmp	r4, r3
 8003080:	d120      	bne.n	80030c4 <_puts_r+0x64>
 8003082:	686c      	ldr	r4, [r5, #4]
 8003084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003086:	07db      	lsls	r3, r3, #31
 8003088:	d405      	bmi.n	8003096 <_puts_r+0x36>
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	0598      	lsls	r0, r3, #22
 800308e:	d402      	bmi.n	8003096 <_puts_r+0x36>
 8003090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003092:	f000 faf3 	bl	800367c <__retarget_lock_acquire_recursive>
 8003096:	89a3      	ldrh	r3, [r4, #12]
 8003098:	0719      	lsls	r1, r3, #28
 800309a:	d51d      	bpl.n	80030d8 <_puts_r+0x78>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b1db      	cbz	r3, 80030d8 <_puts_r+0x78>
 80030a0:	3e01      	subs	r6, #1
 80030a2:	68a3      	ldr	r3, [r4, #8]
 80030a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	bb39      	cbnz	r1, 80030fe <_puts_r+0x9e>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da38      	bge.n	8003124 <_puts_r+0xc4>
 80030b2:	4622      	mov	r2, r4
 80030b4:	210a      	movs	r1, #10
 80030b6:	4628      	mov	r0, r5
 80030b8:	f000 f868 	bl	800318c <__swbuf_r>
 80030bc:	3001      	adds	r0, #1
 80030be:	d011      	beq.n	80030e4 <_puts_r+0x84>
 80030c0:	250a      	movs	r5, #10
 80030c2:	e011      	b.n	80030e8 <_puts_r+0x88>
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <_puts_r+0xd4>)
 80030c6:	429c      	cmp	r4, r3
 80030c8:	d101      	bne.n	80030ce <_puts_r+0x6e>
 80030ca:	68ac      	ldr	r4, [r5, #8]
 80030cc:	e7da      	b.n	8003084 <_puts_r+0x24>
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <_puts_r+0xd8>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	bf08      	it	eq
 80030d4:	68ec      	ldreq	r4, [r5, #12]
 80030d6:	e7d5      	b.n	8003084 <_puts_r+0x24>
 80030d8:	4621      	mov	r1, r4
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 f8a8 	bl	8003230 <__swsetup_r>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d0dd      	beq.n	80030a0 <_puts_r+0x40>
 80030e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80030e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ea:	07da      	lsls	r2, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_puts_r+0x9a>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	059b      	lsls	r3, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_puts_r+0x9a>
 80030f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030f6:	f000 fac2 	bl	800367e <__retarget_lock_release_recursive>
 80030fa:	4628      	mov	r0, r5
 80030fc:	bd70      	pop	{r4, r5, r6, pc}
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da04      	bge.n	800310c <_puts_r+0xac>
 8003102:	69a2      	ldr	r2, [r4, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	dc06      	bgt.n	8003116 <_puts_r+0xb6>
 8003108:	290a      	cmp	r1, #10
 800310a:	d004      	beq.n	8003116 <_puts_r+0xb6>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	7019      	strb	r1, [r3, #0]
 8003114:	e7c5      	b.n	80030a2 <_puts_r+0x42>
 8003116:	4622      	mov	r2, r4
 8003118:	4628      	mov	r0, r5
 800311a:	f000 f837 	bl	800318c <__swbuf_r>
 800311e:	3001      	adds	r0, #1
 8003120:	d1bf      	bne.n	80030a2 <_puts_r+0x42>
 8003122:	e7df      	b.n	80030e4 <_puts_r+0x84>
 8003124:	250a      	movs	r5, #10
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	6022      	str	r2, [r4, #0]
 800312c:	701d      	strb	r5, [r3, #0]
 800312e:	e7db      	b.n	80030e8 <_puts_r+0x88>
 8003130:	08004534 	.word	0x08004534
 8003134:	08004554 	.word	0x08004554
 8003138:	08004514 	.word	0x08004514

0800313c <puts>:
 800313c:	4b02      	ldr	r3, [pc, #8]	; (8003148 <puts+0xc>)
 800313e:	4601      	mov	r1, r0
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f7ff bf8d 	b.w	8003060 <_puts_r>
 8003146:	bf00      	nop
 8003148:	20000010 	.word	0x20000010

0800314c <siprintf>:
 800314c:	b40e      	push	{r1, r2, r3}
 800314e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003152:	b500      	push	{lr}
 8003154:	b09c      	sub	sp, #112	; 0x70
 8003156:	ab1d      	add	r3, sp, #116	; 0x74
 8003158:	9002      	str	r0, [sp, #8]
 800315a:	9006      	str	r0, [sp, #24]
 800315c:	9107      	str	r1, [sp, #28]
 800315e:	9104      	str	r1, [sp, #16]
 8003160:	4808      	ldr	r0, [pc, #32]	; (8003184 <siprintf+0x38>)
 8003162:	4909      	ldr	r1, [pc, #36]	; (8003188 <siprintf+0x3c>)
 8003164:	f853 2b04 	ldr.w	r2, [r3], #4
 8003168:	9105      	str	r1, [sp, #20]
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	a902      	add	r1, sp, #8
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	f000 fbec 	bl	800394c <_svfiprintf_r>
 8003174:	2200      	movs	r2, #0
 8003176:	9b02      	ldr	r3, [sp, #8]
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	b01c      	add	sp, #112	; 0x70
 800317c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003180:	b003      	add	sp, #12
 8003182:	4770      	bx	lr
 8003184:	20000010 	.word	0x20000010
 8003188:	ffff0208 	.word	0xffff0208

0800318c <__swbuf_r>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	460e      	mov	r6, r1
 8003190:	4614      	mov	r4, r2
 8003192:	4605      	mov	r5, r0
 8003194:	b118      	cbz	r0, 800319e <__swbuf_r+0x12>
 8003196:	6983      	ldr	r3, [r0, #24]
 8003198:	b90b      	cbnz	r3, 800319e <__swbuf_r+0x12>
 800319a:	f000 f9d1 	bl	8003540 <__sinit>
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <__swbuf_r+0x98>)
 80031a0:	429c      	cmp	r4, r3
 80031a2:	d12b      	bne.n	80031fc <__swbuf_r+0x70>
 80031a4:	686c      	ldr	r4, [r5, #4]
 80031a6:	69a3      	ldr	r3, [r4, #24]
 80031a8:	60a3      	str	r3, [r4, #8]
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	071a      	lsls	r2, r3, #28
 80031ae:	d52f      	bpl.n	8003210 <__swbuf_r+0x84>
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	b36b      	cbz	r3, 8003210 <__swbuf_r+0x84>
 80031b4:	6923      	ldr	r3, [r4, #16]
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	b2f6      	uxtb	r6, r6
 80031ba:	1ac0      	subs	r0, r0, r3
 80031bc:	6963      	ldr	r3, [r4, #20]
 80031be:	4637      	mov	r7, r6
 80031c0:	4283      	cmp	r3, r0
 80031c2:	dc04      	bgt.n	80031ce <__swbuf_r+0x42>
 80031c4:	4621      	mov	r1, r4
 80031c6:	4628      	mov	r0, r5
 80031c8:	f000 f926 	bl	8003418 <_fflush_r>
 80031cc:	bb30      	cbnz	r0, 800321c <__swbuf_r+0x90>
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	3001      	adds	r0, #1
 80031d2:	3b01      	subs	r3, #1
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	6022      	str	r2, [r4, #0]
 80031dc:	701e      	strb	r6, [r3, #0]
 80031de:	6963      	ldr	r3, [r4, #20]
 80031e0:	4283      	cmp	r3, r0
 80031e2:	d004      	beq.n	80031ee <__swbuf_r+0x62>
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	07db      	lsls	r3, r3, #31
 80031e8:	d506      	bpl.n	80031f8 <__swbuf_r+0x6c>
 80031ea:	2e0a      	cmp	r6, #10
 80031ec:	d104      	bne.n	80031f8 <__swbuf_r+0x6c>
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f911 	bl	8003418 <_fflush_r>
 80031f6:	b988      	cbnz	r0, 800321c <__swbuf_r+0x90>
 80031f8:	4638      	mov	r0, r7
 80031fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <__swbuf_r+0x9c>)
 80031fe:	429c      	cmp	r4, r3
 8003200:	d101      	bne.n	8003206 <__swbuf_r+0x7a>
 8003202:	68ac      	ldr	r4, [r5, #8]
 8003204:	e7cf      	b.n	80031a6 <__swbuf_r+0x1a>
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <__swbuf_r+0xa0>)
 8003208:	429c      	cmp	r4, r3
 800320a:	bf08      	it	eq
 800320c:	68ec      	ldreq	r4, [r5, #12]
 800320e:	e7ca      	b.n	80031a6 <__swbuf_r+0x1a>
 8003210:	4621      	mov	r1, r4
 8003212:	4628      	mov	r0, r5
 8003214:	f000 f80c 	bl	8003230 <__swsetup_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	d0cb      	beq.n	80031b4 <__swbuf_r+0x28>
 800321c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003220:	e7ea      	b.n	80031f8 <__swbuf_r+0x6c>
 8003222:	bf00      	nop
 8003224:	08004534 	.word	0x08004534
 8003228:	08004554 	.word	0x08004554
 800322c:	08004514 	.word	0x08004514

08003230 <__swsetup_r>:
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <__swsetup_r+0xcc>)
 8003232:	b570      	push	{r4, r5, r6, lr}
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	4606      	mov	r6, r0
 8003238:	460c      	mov	r4, r1
 800323a:	b125      	cbz	r5, 8003246 <__swsetup_r+0x16>
 800323c:	69ab      	ldr	r3, [r5, #24]
 800323e:	b913      	cbnz	r3, 8003246 <__swsetup_r+0x16>
 8003240:	4628      	mov	r0, r5
 8003242:	f000 f97d 	bl	8003540 <__sinit>
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <__swsetup_r+0xd0>)
 8003248:	429c      	cmp	r4, r3
 800324a:	d10f      	bne.n	800326c <__swsetup_r+0x3c>
 800324c:	686c      	ldr	r4, [r5, #4]
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003254:	0719      	lsls	r1, r3, #28
 8003256:	d42c      	bmi.n	80032b2 <__swsetup_r+0x82>
 8003258:	06dd      	lsls	r5, r3, #27
 800325a:	d411      	bmi.n	8003280 <__swsetup_r+0x50>
 800325c:	2309      	movs	r3, #9
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	e03e      	b.n	80032ea <__swsetup_r+0xba>
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <__swsetup_r+0xd4>)
 800326e:	429c      	cmp	r4, r3
 8003270:	d101      	bne.n	8003276 <__swsetup_r+0x46>
 8003272:	68ac      	ldr	r4, [r5, #8]
 8003274:	e7eb      	b.n	800324e <__swsetup_r+0x1e>
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <__swsetup_r+0xd8>)
 8003278:	429c      	cmp	r4, r3
 800327a:	bf08      	it	eq
 800327c:	68ec      	ldreq	r4, [r5, #12]
 800327e:	e7e6      	b.n	800324e <__swsetup_r+0x1e>
 8003280:	0758      	lsls	r0, r3, #29
 8003282:	d512      	bpl.n	80032aa <__swsetup_r+0x7a>
 8003284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003286:	b141      	cbz	r1, 800329a <__swsetup_r+0x6a>
 8003288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800328c:	4299      	cmp	r1, r3
 800328e:	d002      	beq.n	8003296 <__swsetup_r+0x66>
 8003290:	4630      	mov	r0, r6
 8003292:	f000 fa59 	bl	8003748 <_free_r>
 8003296:	2300      	movs	r3, #0
 8003298:	6363      	str	r3, [r4, #52]	; 0x34
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	81a3      	strh	r3, [r4, #12]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	b94b      	cbnz	r3, 80032ca <__swsetup_r+0x9a>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d003      	beq.n	80032ca <__swsetup_r+0x9a>
 80032c2:	4621      	mov	r1, r4
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f9ff 	bl	80036c8 <__smakebuf_r>
 80032ca:	89a0      	ldrh	r0, [r4, #12]
 80032cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032d0:	f010 0301 	ands.w	r3, r0, #1
 80032d4:	d00a      	beq.n	80032ec <__swsetup_r+0xbc>
 80032d6:	2300      	movs	r3, #0
 80032d8:	60a3      	str	r3, [r4, #8]
 80032da:	6963      	ldr	r3, [r4, #20]
 80032dc:	425b      	negs	r3, r3
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	b943      	cbnz	r3, 80032f6 <__swsetup_r+0xc6>
 80032e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032e8:	d1ba      	bne.n	8003260 <__swsetup_r+0x30>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	0781      	lsls	r1, r0, #30
 80032ee:	bf58      	it	pl
 80032f0:	6963      	ldrpl	r3, [r4, #20]
 80032f2:	60a3      	str	r3, [r4, #8]
 80032f4:	e7f4      	b.n	80032e0 <__swsetup_r+0xb0>
 80032f6:	2000      	movs	r0, #0
 80032f8:	e7f7      	b.n	80032ea <__swsetup_r+0xba>
 80032fa:	bf00      	nop
 80032fc:	20000010 	.word	0x20000010
 8003300:	08004534 	.word	0x08004534
 8003304:	08004554 	.word	0x08004554
 8003308:	08004514 	.word	0x08004514

0800330c <__sflush_r>:
 800330c:	898a      	ldrh	r2, [r1, #12]
 800330e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003312:	4605      	mov	r5, r0
 8003314:	0710      	lsls	r0, r2, #28
 8003316:	460c      	mov	r4, r1
 8003318:	d458      	bmi.n	80033cc <__sflush_r+0xc0>
 800331a:	684b      	ldr	r3, [r1, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	dc05      	bgt.n	800332c <__sflush_r+0x20>
 8003320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	dc02      	bgt.n	800332c <__sflush_r+0x20>
 8003326:	2000      	movs	r0, #0
 8003328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800332c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800332e:	2e00      	cmp	r6, #0
 8003330:	d0f9      	beq.n	8003326 <__sflush_r+0x1a>
 8003332:	2300      	movs	r3, #0
 8003334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003338:	682f      	ldr	r7, [r5, #0]
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	d032      	beq.n	80033a4 <__sflush_r+0x98>
 800333e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	075a      	lsls	r2, r3, #29
 8003344:	d505      	bpl.n	8003352 <__sflush_r+0x46>
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	1ac0      	subs	r0, r0, r3
 800334a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800334c:	b10b      	cbz	r3, 8003352 <__sflush_r+0x46>
 800334e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003350:	1ac0      	subs	r0, r0, r3
 8003352:	2300      	movs	r3, #0
 8003354:	4602      	mov	r2, r0
 8003356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003358:	4628      	mov	r0, r5
 800335a:	6a21      	ldr	r1, [r4, #32]
 800335c:	47b0      	blx	r6
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	d106      	bne.n	8003372 <__sflush_r+0x66>
 8003364:	6829      	ldr	r1, [r5, #0]
 8003366:	291d      	cmp	r1, #29
 8003368:	d82c      	bhi.n	80033c4 <__sflush_r+0xb8>
 800336a:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <__sflush_r+0x108>)
 800336c:	40ca      	lsrs	r2, r1
 800336e:	07d6      	lsls	r6, r2, #31
 8003370:	d528      	bpl.n	80033c4 <__sflush_r+0xb8>
 8003372:	2200      	movs	r2, #0
 8003374:	6062      	str	r2, [r4, #4]
 8003376:	6922      	ldr	r2, [r4, #16]
 8003378:	04d9      	lsls	r1, r3, #19
 800337a:	6022      	str	r2, [r4, #0]
 800337c:	d504      	bpl.n	8003388 <__sflush_r+0x7c>
 800337e:	1c42      	adds	r2, r0, #1
 8003380:	d101      	bne.n	8003386 <__sflush_r+0x7a>
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	b903      	cbnz	r3, 8003388 <__sflush_r+0x7c>
 8003386:	6560      	str	r0, [r4, #84]	; 0x54
 8003388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800338a:	602f      	str	r7, [r5, #0]
 800338c:	2900      	cmp	r1, #0
 800338e:	d0ca      	beq.n	8003326 <__sflush_r+0x1a>
 8003390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003394:	4299      	cmp	r1, r3
 8003396:	d002      	beq.n	800339e <__sflush_r+0x92>
 8003398:	4628      	mov	r0, r5
 800339a:	f000 f9d5 	bl	8003748 <_free_r>
 800339e:	2000      	movs	r0, #0
 80033a0:	6360      	str	r0, [r4, #52]	; 0x34
 80033a2:	e7c1      	b.n	8003328 <__sflush_r+0x1c>
 80033a4:	6a21      	ldr	r1, [r4, #32]
 80033a6:	2301      	movs	r3, #1
 80033a8:	4628      	mov	r0, r5
 80033aa:	47b0      	blx	r6
 80033ac:	1c41      	adds	r1, r0, #1
 80033ae:	d1c7      	bne.n	8003340 <__sflush_r+0x34>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0c4      	beq.n	8003340 <__sflush_r+0x34>
 80033b6:	2b1d      	cmp	r3, #29
 80033b8:	d001      	beq.n	80033be <__sflush_r+0xb2>
 80033ba:	2b16      	cmp	r3, #22
 80033bc:	d101      	bne.n	80033c2 <__sflush_r+0xb6>
 80033be:	602f      	str	r7, [r5, #0]
 80033c0:	e7b1      	b.n	8003326 <__sflush_r+0x1a>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	e7ad      	b.n	8003328 <__sflush_r+0x1c>
 80033cc:	690f      	ldr	r7, [r1, #16]
 80033ce:	2f00      	cmp	r7, #0
 80033d0:	d0a9      	beq.n	8003326 <__sflush_r+0x1a>
 80033d2:	0793      	lsls	r3, r2, #30
 80033d4:	bf18      	it	ne
 80033d6:	2300      	movne	r3, #0
 80033d8:	680e      	ldr	r6, [r1, #0]
 80033da:	bf08      	it	eq
 80033dc:	694b      	ldreq	r3, [r1, #20]
 80033de:	eba6 0807 	sub.w	r8, r6, r7
 80033e2:	600f      	str	r7, [r1, #0]
 80033e4:	608b      	str	r3, [r1, #8]
 80033e6:	f1b8 0f00 	cmp.w	r8, #0
 80033ea:	dd9c      	ble.n	8003326 <__sflush_r+0x1a>
 80033ec:	4643      	mov	r3, r8
 80033ee:	463a      	mov	r2, r7
 80033f0:	4628      	mov	r0, r5
 80033f2:	6a21      	ldr	r1, [r4, #32]
 80033f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033f6:	47b0      	blx	r6
 80033f8:	2800      	cmp	r0, #0
 80033fa:	dc06      	bgt.n	800340a <__sflush_r+0xfe>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	e78e      	b.n	8003328 <__sflush_r+0x1c>
 800340a:	4407      	add	r7, r0
 800340c:	eba8 0800 	sub.w	r8, r8, r0
 8003410:	e7e9      	b.n	80033e6 <__sflush_r+0xda>
 8003412:	bf00      	nop
 8003414:	20400001 	.word	0x20400001

08003418 <_fflush_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	690b      	ldr	r3, [r1, #16]
 800341c:	4605      	mov	r5, r0
 800341e:	460c      	mov	r4, r1
 8003420:	b913      	cbnz	r3, 8003428 <_fflush_r+0x10>
 8003422:	2500      	movs	r5, #0
 8003424:	4628      	mov	r0, r5
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	b118      	cbz	r0, 8003432 <_fflush_r+0x1a>
 800342a:	6983      	ldr	r3, [r0, #24]
 800342c:	b90b      	cbnz	r3, 8003432 <_fflush_r+0x1a>
 800342e:	f000 f887 	bl	8003540 <__sinit>
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <_fflush_r+0x6c>)
 8003434:	429c      	cmp	r4, r3
 8003436:	d11b      	bne.n	8003470 <_fflush_r+0x58>
 8003438:	686c      	ldr	r4, [r5, #4]
 800343a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ef      	beq.n	8003422 <_fflush_r+0xa>
 8003442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003444:	07d0      	lsls	r0, r2, #31
 8003446:	d404      	bmi.n	8003452 <_fflush_r+0x3a>
 8003448:	0599      	lsls	r1, r3, #22
 800344a:	d402      	bmi.n	8003452 <_fflush_r+0x3a>
 800344c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800344e:	f000 f915 	bl	800367c <__retarget_lock_acquire_recursive>
 8003452:	4628      	mov	r0, r5
 8003454:	4621      	mov	r1, r4
 8003456:	f7ff ff59 	bl	800330c <__sflush_r>
 800345a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800345c:	4605      	mov	r5, r0
 800345e:	07da      	lsls	r2, r3, #31
 8003460:	d4e0      	bmi.n	8003424 <_fflush_r+0xc>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	059b      	lsls	r3, r3, #22
 8003466:	d4dd      	bmi.n	8003424 <_fflush_r+0xc>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f000 f908 	bl	800367e <__retarget_lock_release_recursive>
 800346e:	e7d9      	b.n	8003424 <_fflush_r+0xc>
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <_fflush_r+0x70>)
 8003472:	429c      	cmp	r4, r3
 8003474:	d101      	bne.n	800347a <_fflush_r+0x62>
 8003476:	68ac      	ldr	r4, [r5, #8]
 8003478:	e7df      	b.n	800343a <_fflush_r+0x22>
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <_fflush_r+0x74>)
 800347c:	429c      	cmp	r4, r3
 800347e:	bf08      	it	eq
 8003480:	68ec      	ldreq	r4, [r5, #12]
 8003482:	e7da      	b.n	800343a <_fflush_r+0x22>
 8003484:	08004534 	.word	0x08004534
 8003488:	08004554 	.word	0x08004554
 800348c:	08004514 	.word	0x08004514

08003490 <std>:
 8003490:	2300      	movs	r3, #0
 8003492:	b510      	push	{r4, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	e9c0 3300 	strd	r3, r3, [r0]
 800349a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800349e:	6083      	str	r3, [r0, #8]
 80034a0:	8181      	strh	r1, [r0, #12]
 80034a2:	6643      	str	r3, [r0, #100]	; 0x64
 80034a4:	81c2      	strh	r2, [r0, #14]
 80034a6:	6183      	str	r3, [r0, #24]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2208      	movs	r2, #8
 80034ac:	305c      	adds	r0, #92	; 0x5c
 80034ae:	f7ff fdb7 	bl	8003020 <memset>
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <std+0x38>)
 80034b4:	6224      	str	r4, [r4, #32]
 80034b6:	6263      	str	r3, [r4, #36]	; 0x24
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <std+0x3c>)
 80034ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <std+0x40>)
 80034be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <std+0x44>)
 80034c2:	6323      	str	r3, [r4, #48]	; 0x30
 80034c4:	bd10      	pop	{r4, pc}
 80034c6:	bf00      	nop
 80034c8:	08004149 	.word	0x08004149
 80034cc:	0800416b 	.word	0x0800416b
 80034d0:	080041a3 	.word	0x080041a3
 80034d4:	080041c7 	.word	0x080041c7

080034d8 <_cleanup_r>:
 80034d8:	4901      	ldr	r1, [pc, #4]	; (80034e0 <_cleanup_r+0x8>)
 80034da:	f000 b8af 	b.w	800363c <_fwalk_reent>
 80034de:	bf00      	nop
 80034e0:	08003419 	.word	0x08003419

080034e4 <__sfmoreglue>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2568      	movs	r5, #104	; 0x68
 80034e8:	1e4a      	subs	r2, r1, #1
 80034ea:	4355      	muls	r5, r2
 80034ec:	460e      	mov	r6, r1
 80034ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034f2:	f000 f975 	bl	80037e0 <_malloc_r>
 80034f6:	4604      	mov	r4, r0
 80034f8:	b140      	cbz	r0, 800350c <__sfmoreglue+0x28>
 80034fa:	2100      	movs	r1, #0
 80034fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003500:	300c      	adds	r0, #12
 8003502:	60a0      	str	r0, [r4, #8]
 8003504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003508:	f7ff fd8a 	bl	8003020 <memset>
 800350c:	4620      	mov	r0, r4
 800350e:	bd70      	pop	{r4, r5, r6, pc}

08003510 <__sfp_lock_acquire>:
 8003510:	4801      	ldr	r0, [pc, #4]	; (8003518 <__sfp_lock_acquire+0x8>)
 8003512:	f000 b8b3 	b.w	800367c <__retarget_lock_acquire_recursive>
 8003516:	bf00      	nop
 8003518:	20000488 	.word	0x20000488

0800351c <__sfp_lock_release>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__sfp_lock_release+0x8>)
 800351e:	f000 b8ae 	b.w	800367e <__retarget_lock_release_recursive>
 8003522:	bf00      	nop
 8003524:	20000488 	.word	0x20000488

08003528 <__sinit_lock_acquire>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__sinit_lock_acquire+0x8>)
 800352a:	f000 b8a7 	b.w	800367c <__retarget_lock_acquire_recursive>
 800352e:	bf00      	nop
 8003530:	20000483 	.word	0x20000483

08003534 <__sinit_lock_release>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__sinit_lock_release+0x8>)
 8003536:	f000 b8a2 	b.w	800367e <__retarget_lock_release_recursive>
 800353a:	bf00      	nop
 800353c:	20000483 	.word	0x20000483

08003540 <__sinit>:
 8003540:	b510      	push	{r4, lr}
 8003542:	4604      	mov	r4, r0
 8003544:	f7ff fff0 	bl	8003528 <__sinit_lock_acquire>
 8003548:	69a3      	ldr	r3, [r4, #24]
 800354a:	b11b      	cbz	r3, 8003554 <__sinit+0x14>
 800354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003550:	f7ff bff0 	b.w	8003534 <__sinit_lock_release>
 8003554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003558:	6523      	str	r3, [r4, #80]	; 0x50
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <__sinit+0x68>)
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <__sinit+0x6c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	62a2      	str	r2, [r4, #40]	; 0x28
 8003562:	42a3      	cmp	r3, r4
 8003564:	bf08      	it	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	4620      	mov	r0, r4
 800356a:	bf08      	it	eq
 800356c:	61a3      	streq	r3, [r4, #24]
 800356e:	f000 f81f 	bl	80035b0 <__sfp>
 8003572:	6060      	str	r0, [r4, #4]
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f81b 	bl	80035b0 <__sfp>
 800357a:	60a0      	str	r0, [r4, #8]
 800357c:	4620      	mov	r0, r4
 800357e:	f000 f817 	bl	80035b0 <__sfp>
 8003582:	2200      	movs	r2, #0
 8003584:	2104      	movs	r1, #4
 8003586:	60e0      	str	r0, [r4, #12]
 8003588:	6860      	ldr	r0, [r4, #4]
 800358a:	f7ff ff81 	bl	8003490 <std>
 800358e:	2201      	movs	r2, #1
 8003590:	2109      	movs	r1, #9
 8003592:	68a0      	ldr	r0, [r4, #8]
 8003594:	f7ff ff7c 	bl	8003490 <std>
 8003598:	2202      	movs	r2, #2
 800359a:	2112      	movs	r1, #18
 800359c:	68e0      	ldr	r0, [r4, #12]
 800359e:	f7ff ff77 	bl	8003490 <std>
 80035a2:	2301      	movs	r3, #1
 80035a4:	61a3      	str	r3, [r4, #24]
 80035a6:	e7d1      	b.n	800354c <__sinit+0xc>
 80035a8:	08004510 	.word	0x08004510
 80035ac:	080034d9 	.word	0x080034d9

080035b0 <__sfp>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	4607      	mov	r7, r0
 80035b4:	f7ff ffac 	bl	8003510 <__sfp_lock_acquire>
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <__sfp+0x84>)
 80035ba:	681e      	ldr	r6, [r3, #0]
 80035bc:	69b3      	ldr	r3, [r6, #24]
 80035be:	b913      	cbnz	r3, 80035c6 <__sfp+0x16>
 80035c0:	4630      	mov	r0, r6
 80035c2:	f7ff ffbd 	bl	8003540 <__sinit>
 80035c6:	3648      	adds	r6, #72	; 0x48
 80035c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	d503      	bpl.n	80035d8 <__sfp+0x28>
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	b30b      	cbz	r3, 8003618 <__sfp+0x68>
 80035d4:	6836      	ldr	r6, [r6, #0]
 80035d6:	e7f7      	b.n	80035c8 <__sfp+0x18>
 80035d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035dc:	b9d5      	cbnz	r5, 8003614 <__sfp+0x64>
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <__sfp+0x88>)
 80035e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035e4:	60e3      	str	r3, [r4, #12]
 80035e6:	6665      	str	r5, [r4, #100]	; 0x64
 80035e8:	f000 f847 	bl	800367a <__retarget_lock_init_recursive>
 80035ec:	f7ff ff96 	bl	800351c <__sfp_lock_release>
 80035f0:	2208      	movs	r2, #8
 80035f2:	4629      	mov	r1, r5
 80035f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035fc:	6025      	str	r5, [r4, #0]
 80035fe:	61a5      	str	r5, [r4, #24]
 8003600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003604:	f7ff fd0c 	bl	8003020 <memset>
 8003608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800360c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003610:	4620      	mov	r0, r4
 8003612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003614:	3468      	adds	r4, #104	; 0x68
 8003616:	e7d9      	b.n	80035cc <__sfp+0x1c>
 8003618:	2104      	movs	r1, #4
 800361a:	4638      	mov	r0, r7
 800361c:	f7ff ff62 	bl	80034e4 <__sfmoreglue>
 8003620:	4604      	mov	r4, r0
 8003622:	6030      	str	r0, [r6, #0]
 8003624:	2800      	cmp	r0, #0
 8003626:	d1d5      	bne.n	80035d4 <__sfp+0x24>
 8003628:	f7ff ff78 	bl	800351c <__sfp_lock_release>
 800362c:	230c      	movs	r3, #12
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	e7ee      	b.n	8003610 <__sfp+0x60>
 8003632:	bf00      	nop
 8003634:	08004510 	.word	0x08004510
 8003638:	ffff0001 	.word	0xffff0001

0800363c <_fwalk_reent>:
 800363c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003640:	4606      	mov	r6, r0
 8003642:	4688      	mov	r8, r1
 8003644:	2700      	movs	r7, #0
 8003646:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800364a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800364e:	f1b9 0901 	subs.w	r9, r9, #1
 8003652:	d505      	bpl.n	8003660 <_fwalk_reent+0x24>
 8003654:	6824      	ldr	r4, [r4, #0]
 8003656:	2c00      	cmp	r4, #0
 8003658:	d1f7      	bne.n	800364a <_fwalk_reent+0xe>
 800365a:	4638      	mov	r0, r7
 800365c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003660:	89ab      	ldrh	r3, [r5, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d907      	bls.n	8003676 <_fwalk_reent+0x3a>
 8003666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800366a:	3301      	adds	r3, #1
 800366c:	d003      	beq.n	8003676 <_fwalk_reent+0x3a>
 800366e:	4629      	mov	r1, r5
 8003670:	4630      	mov	r0, r6
 8003672:	47c0      	blx	r8
 8003674:	4307      	orrs	r7, r0
 8003676:	3568      	adds	r5, #104	; 0x68
 8003678:	e7e9      	b.n	800364e <_fwalk_reent+0x12>

0800367a <__retarget_lock_init_recursive>:
 800367a:	4770      	bx	lr

0800367c <__retarget_lock_acquire_recursive>:
 800367c:	4770      	bx	lr

0800367e <__retarget_lock_release_recursive>:
 800367e:	4770      	bx	lr

08003680 <__swhatbuf_r>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	460e      	mov	r6, r1
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	4614      	mov	r4, r2
 800368a:	2900      	cmp	r1, #0
 800368c:	461d      	mov	r5, r3
 800368e:	b096      	sub	sp, #88	; 0x58
 8003690:	da07      	bge.n	80036a2 <__swhatbuf_r+0x22>
 8003692:	2300      	movs	r3, #0
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	89b3      	ldrh	r3, [r6, #12]
 8003698:	061a      	lsls	r2, r3, #24
 800369a:	d410      	bmi.n	80036be <__swhatbuf_r+0x3e>
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	e00e      	b.n	80036c0 <__swhatbuf_r+0x40>
 80036a2:	466a      	mov	r2, sp
 80036a4:	f000 fdb6 	bl	8004214 <_fstat_r>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	dbf2      	blt.n	8003692 <__swhatbuf_r+0x12>
 80036ac:	9a01      	ldr	r2, [sp, #4]
 80036ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036b6:	425a      	negs	r2, r3
 80036b8:	415a      	adcs	r2, r3
 80036ba:	602a      	str	r2, [r5, #0]
 80036bc:	e7ee      	b.n	800369c <__swhatbuf_r+0x1c>
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	2000      	movs	r0, #0
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	b016      	add	sp, #88	; 0x58
 80036c6:	bd70      	pop	{r4, r5, r6, pc}

080036c8 <__smakebuf_r>:
 80036c8:	898b      	ldrh	r3, [r1, #12]
 80036ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036cc:	079d      	lsls	r5, r3, #30
 80036ce:	4606      	mov	r6, r0
 80036d0:	460c      	mov	r4, r1
 80036d2:	d507      	bpl.n	80036e4 <__smakebuf_r+0x1c>
 80036d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	2301      	movs	r3, #1
 80036de:	6163      	str	r3, [r4, #20]
 80036e0:	b002      	add	sp, #8
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	466a      	mov	r2, sp
 80036e6:	ab01      	add	r3, sp, #4
 80036e8:	f7ff ffca 	bl	8003680 <__swhatbuf_r>
 80036ec:	9900      	ldr	r1, [sp, #0]
 80036ee:	4605      	mov	r5, r0
 80036f0:	4630      	mov	r0, r6
 80036f2:	f000 f875 	bl	80037e0 <_malloc_r>
 80036f6:	b948      	cbnz	r0, 800370c <__smakebuf_r+0x44>
 80036f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036fc:	059a      	lsls	r2, r3, #22
 80036fe:	d4ef      	bmi.n	80036e0 <__smakebuf_r+0x18>
 8003700:	f023 0303 	bic.w	r3, r3, #3
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	e7e3      	b.n	80036d4 <__smakebuf_r+0xc>
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <__smakebuf_r+0x7c>)
 800370e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	6020      	str	r0, [r4, #0]
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	81a3      	strh	r3, [r4, #12]
 800371a:	9b00      	ldr	r3, [sp, #0]
 800371c:	6120      	str	r0, [r4, #16]
 800371e:	6163      	str	r3, [r4, #20]
 8003720:	9b01      	ldr	r3, [sp, #4]
 8003722:	b15b      	cbz	r3, 800373c <__smakebuf_r+0x74>
 8003724:	4630      	mov	r0, r6
 8003726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800372a:	f000 fd85 	bl	8004238 <_isatty_r>
 800372e:	b128      	cbz	r0, 800373c <__smakebuf_r+0x74>
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	81a3      	strh	r3, [r4, #12]
 800373c:	89a0      	ldrh	r0, [r4, #12]
 800373e:	4305      	orrs	r5, r0
 8003740:	81a5      	strh	r5, [r4, #12]
 8003742:	e7cd      	b.n	80036e0 <__smakebuf_r+0x18>
 8003744:	080034d9 	.word	0x080034d9

08003748 <_free_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4605      	mov	r5, r0
 800374c:	2900      	cmp	r1, #0
 800374e:	d043      	beq.n	80037d8 <_free_r+0x90>
 8003750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003754:	1f0c      	subs	r4, r1, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	bfb8      	it	lt
 800375a:	18e4      	addlt	r4, r4, r3
 800375c:	f000 fdb6 	bl	80042cc <__malloc_lock>
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <_free_r+0x94>)
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	4610      	mov	r0, r2
 8003766:	b933      	cbnz	r3, 8003776 <_free_r+0x2e>
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	6014      	str	r4, [r2, #0]
 800376c:	4628      	mov	r0, r5
 800376e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003772:	f000 bdb1 	b.w	80042d8 <__malloc_unlock>
 8003776:	42a3      	cmp	r3, r4
 8003778:	d90a      	bls.n	8003790 <_free_r+0x48>
 800377a:	6821      	ldr	r1, [r4, #0]
 800377c:	1862      	adds	r2, r4, r1
 800377e:	4293      	cmp	r3, r2
 8003780:	bf01      	itttt	eq
 8003782:	681a      	ldreq	r2, [r3, #0]
 8003784:	685b      	ldreq	r3, [r3, #4]
 8003786:	1852      	addeq	r2, r2, r1
 8003788:	6022      	streq	r2, [r4, #0]
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	6004      	str	r4, [r0, #0]
 800378e:	e7ed      	b.n	800376c <_free_r+0x24>
 8003790:	461a      	mov	r2, r3
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	b10b      	cbz	r3, 800379a <_free_r+0x52>
 8003796:	42a3      	cmp	r3, r4
 8003798:	d9fa      	bls.n	8003790 <_free_r+0x48>
 800379a:	6811      	ldr	r1, [r2, #0]
 800379c:	1850      	adds	r0, r2, r1
 800379e:	42a0      	cmp	r0, r4
 80037a0:	d10b      	bne.n	80037ba <_free_r+0x72>
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	4401      	add	r1, r0
 80037a6:	1850      	adds	r0, r2, r1
 80037a8:	4283      	cmp	r3, r0
 80037aa:	6011      	str	r1, [r2, #0]
 80037ac:	d1de      	bne.n	800376c <_free_r+0x24>
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4401      	add	r1, r0
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	6053      	str	r3, [r2, #4]
 80037b8:	e7d8      	b.n	800376c <_free_r+0x24>
 80037ba:	d902      	bls.n	80037c2 <_free_r+0x7a>
 80037bc:	230c      	movs	r3, #12
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	e7d4      	b.n	800376c <_free_r+0x24>
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	1821      	adds	r1, r4, r0
 80037c6:	428b      	cmp	r3, r1
 80037c8:	bf01      	itttt	eq
 80037ca:	6819      	ldreq	r1, [r3, #0]
 80037cc:	685b      	ldreq	r3, [r3, #4]
 80037ce:	1809      	addeq	r1, r1, r0
 80037d0:	6021      	streq	r1, [r4, #0]
 80037d2:	6063      	str	r3, [r4, #4]
 80037d4:	6054      	str	r4, [r2, #4]
 80037d6:	e7c9      	b.n	800376c <_free_r+0x24>
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	bf00      	nop
 80037dc:	20000098 	.word	0x20000098

080037e0 <_malloc_r>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	1ccd      	adds	r5, r1, #3
 80037e4:	f025 0503 	bic.w	r5, r5, #3
 80037e8:	3508      	adds	r5, #8
 80037ea:	2d0c      	cmp	r5, #12
 80037ec:	bf38      	it	cc
 80037ee:	250c      	movcc	r5, #12
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	4606      	mov	r6, r0
 80037f4:	db01      	blt.n	80037fa <_malloc_r+0x1a>
 80037f6:	42a9      	cmp	r1, r5
 80037f8:	d903      	bls.n	8003802 <_malloc_r+0x22>
 80037fa:	230c      	movs	r3, #12
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003802:	f000 fd63 	bl	80042cc <__malloc_lock>
 8003806:	4921      	ldr	r1, [pc, #132]	; (800388c <_malloc_r+0xac>)
 8003808:	680a      	ldr	r2, [r1, #0]
 800380a:	4614      	mov	r4, r2
 800380c:	b99c      	cbnz	r4, 8003836 <_malloc_r+0x56>
 800380e:	4f20      	ldr	r7, [pc, #128]	; (8003890 <_malloc_r+0xb0>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b923      	cbnz	r3, 800381e <_malloc_r+0x3e>
 8003814:	4621      	mov	r1, r4
 8003816:	4630      	mov	r0, r6
 8003818:	f000 fc86 	bl	8004128 <_sbrk_r>
 800381c:	6038      	str	r0, [r7, #0]
 800381e:	4629      	mov	r1, r5
 8003820:	4630      	mov	r0, r6
 8003822:	f000 fc81 	bl	8004128 <_sbrk_r>
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d123      	bne.n	8003872 <_malloc_r+0x92>
 800382a:	230c      	movs	r3, #12
 800382c:	4630      	mov	r0, r6
 800382e:	6033      	str	r3, [r6, #0]
 8003830:	f000 fd52 	bl	80042d8 <__malloc_unlock>
 8003834:	e7e3      	b.n	80037fe <_malloc_r+0x1e>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	1b5b      	subs	r3, r3, r5
 800383a:	d417      	bmi.n	800386c <_malloc_r+0x8c>
 800383c:	2b0b      	cmp	r3, #11
 800383e:	d903      	bls.n	8003848 <_malloc_r+0x68>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	441c      	add	r4, r3
 8003844:	6025      	str	r5, [r4, #0]
 8003846:	e004      	b.n	8003852 <_malloc_r+0x72>
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	42a2      	cmp	r2, r4
 800384c:	bf0c      	ite	eq
 800384e:	600b      	streq	r3, [r1, #0]
 8003850:	6053      	strne	r3, [r2, #4]
 8003852:	4630      	mov	r0, r6
 8003854:	f000 fd40 	bl	80042d8 <__malloc_unlock>
 8003858:	f104 000b 	add.w	r0, r4, #11
 800385c:	1d23      	adds	r3, r4, #4
 800385e:	f020 0007 	bic.w	r0, r0, #7
 8003862:	1ac2      	subs	r2, r0, r3
 8003864:	d0cc      	beq.n	8003800 <_malloc_r+0x20>
 8003866:	1a1b      	subs	r3, r3, r0
 8003868:	50a3      	str	r3, [r4, r2]
 800386a:	e7c9      	b.n	8003800 <_malloc_r+0x20>
 800386c:	4622      	mov	r2, r4
 800386e:	6864      	ldr	r4, [r4, #4]
 8003870:	e7cc      	b.n	800380c <_malloc_r+0x2c>
 8003872:	1cc4      	adds	r4, r0, #3
 8003874:	f024 0403 	bic.w	r4, r4, #3
 8003878:	42a0      	cmp	r0, r4
 800387a:	d0e3      	beq.n	8003844 <_malloc_r+0x64>
 800387c:	1a21      	subs	r1, r4, r0
 800387e:	4630      	mov	r0, r6
 8003880:	f000 fc52 	bl	8004128 <_sbrk_r>
 8003884:	3001      	adds	r0, #1
 8003886:	d1dd      	bne.n	8003844 <_malloc_r+0x64>
 8003888:	e7cf      	b.n	800382a <_malloc_r+0x4a>
 800388a:	bf00      	nop
 800388c:	20000098 	.word	0x20000098
 8003890:	2000009c 	.word	0x2000009c

08003894 <__ssputs_r>:
 8003894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	688e      	ldr	r6, [r1, #8]
 800389a:	4682      	mov	sl, r0
 800389c:	429e      	cmp	r6, r3
 800389e:	460c      	mov	r4, r1
 80038a0:	4690      	mov	r8, r2
 80038a2:	461f      	mov	r7, r3
 80038a4:	d838      	bhi.n	8003918 <__ssputs_r+0x84>
 80038a6:	898a      	ldrh	r2, [r1, #12]
 80038a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038ac:	d032      	beq.n	8003914 <__ssputs_r+0x80>
 80038ae:	6825      	ldr	r5, [r4, #0]
 80038b0:	6909      	ldr	r1, [r1, #16]
 80038b2:	3301      	adds	r3, #1
 80038b4:	eba5 0901 	sub.w	r9, r5, r1
 80038b8:	6965      	ldr	r5, [r4, #20]
 80038ba:	444b      	add	r3, r9
 80038bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038c4:	106d      	asrs	r5, r5, #1
 80038c6:	429d      	cmp	r5, r3
 80038c8:	bf38      	it	cc
 80038ca:	461d      	movcc	r5, r3
 80038cc:	0553      	lsls	r3, r2, #21
 80038ce:	d531      	bpl.n	8003934 <__ssputs_r+0xa0>
 80038d0:	4629      	mov	r1, r5
 80038d2:	f7ff ff85 	bl	80037e0 <_malloc_r>
 80038d6:	4606      	mov	r6, r0
 80038d8:	b950      	cbnz	r0, 80038f0 <__ssputs_r+0x5c>
 80038da:	230c      	movs	r3, #12
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e0:	f8ca 3000 	str.w	r3, [sl]
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f0:	464a      	mov	r2, r9
 80038f2:	6921      	ldr	r1, [r4, #16]
 80038f4:	f7ff fb86 	bl	8003004 <memcpy>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	6126      	str	r6, [r4, #16]
 8003906:	444e      	add	r6, r9
 8003908:	6026      	str	r6, [r4, #0]
 800390a:	463e      	mov	r6, r7
 800390c:	6165      	str	r5, [r4, #20]
 800390e:	eba5 0509 	sub.w	r5, r5, r9
 8003912:	60a5      	str	r5, [r4, #8]
 8003914:	42be      	cmp	r6, r7
 8003916:	d900      	bls.n	800391a <__ssputs_r+0x86>
 8003918:	463e      	mov	r6, r7
 800391a:	4632      	mov	r2, r6
 800391c:	4641      	mov	r1, r8
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	f000 fcba 	bl	8004298 <memmove>
 8003924:	68a3      	ldr	r3, [r4, #8]
 8003926:	6822      	ldr	r2, [r4, #0]
 8003928:	1b9b      	subs	r3, r3, r6
 800392a:	4432      	add	r2, r6
 800392c:	2000      	movs	r0, #0
 800392e:	60a3      	str	r3, [r4, #8]
 8003930:	6022      	str	r2, [r4, #0]
 8003932:	e7db      	b.n	80038ec <__ssputs_r+0x58>
 8003934:	462a      	mov	r2, r5
 8003936:	f000 fcd5 	bl	80042e4 <_realloc_r>
 800393a:	4606      	mov	r6, r0
 800393c:	2800      	cmp	r0, #0
 800393e:	d1e1      	bne.n	8003904 <__ssputs_r+0x70>
 8003940:	4650      	mov	r0, sl
 8003942:	6921      	ldr	r1, [r4, #16]
 8003944:	f7ff ff00 	bl	8003748 <_free_r>
 8003948:	e7c7      	b.n	80038da <__ssputs_r+0x46>
	...

0800394c <_svfiprintf_r>:
 800394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003950:	4698      	mov	r8, r3
 8003952:	898b      	ldrh	r3, [r1, #12]
 8003954:	4607      	mov	r7, r0
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	460d      	mov	r5, r1
 800395a:	4614      	mov	r4, r2
 800395c:	b09d      	sub	sp, #116	; 0x74
 800395e:	d50e      	bpl.n	800397e <_svfiprintf_r+0x32>
 8003960:	690b      	ldr	r3, [r1, #16]
 8003962:	b963      	cbnz	r3, 800397e <_svfiprintf_r+0x32>
 8003964:	2140      	movs	r1, #64	; 0x40
 8003966:	f7ff ff3b 	bl	80037e0 <_malloc_r>
 800396a:	6028      	str	r0, [r5, #0]
 800396c:	6128      	str	r0, [r5, #16]
 800396e:	b920      	cbnz	r0, 800397a <_svfiprintf_r+0x2e>
 8003970:	230c      	movs	r3, #12
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003978:	e0d1      	b.n	8003b1e <_svfiprintf_r+0x1d2>
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	616b      	str	r3, [r5, #20]
 800397e:	2300      	movs	r3, #0
 8003980:	9309      	str	r3, [sp, #36]	; 0x24
 8003982:	2320      	movs	r3, #32
 8003984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003988:	2330      	movs	r3, #48	; 0x30
 800398a:	f04f 0901 	mov.w	r9, #1
 800398e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b38 <_svfiprintf_r+0x1ec>
 8003996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800399a:	4623      	mov	r3, r4
 800399c:	469a      	mov	sl, r3
 800399e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039a2:	b10a      	cbz	r2, 80039a8 <_svfiprintf_r+0x5c>
 80039a4:	2a25      	cmp	r2, #37	; 0x25
 80039a6:	d1f9      	bne.n	800399c <_svfiprintf_r+0x50>
 80039a8:	ebba 0b04 	subs.w	fp, sl, r4
 80039ac:	d00b      	beq.n	80039c6 <_svfiprintf_r+0x7a>
 80039ae:	465b      	mov	r3, fp
 80039b0:	4622      	mov	r2, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	4638      	mov	r0, r7
 80039b6:	f7ff ff6d 	bl	8003894 <__ssputs_r>
 80039ba:	3001      	adds	r0, #1
 80039bc:	f000 80aa 	beq.w	8003b14 <_svfiprintf_r+0x1c8>
 80039c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039c2:	445a      	add	r2, fp
 80039c4:	9209      	str	r2, [sp, #36]	; 0x24
 80039c6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80a2 	beq.w	8003b14 <_svfiprintf_r+0x1c8>
 80039d0:	2300      	movs	r3, #0
 80039d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039da:	f10a 0a01 	add.w	sl, sl, #1
 80039de:	9304      	str	r3, [sp, #16]
 80039e0:	9307      	str	r3, [sp, #28]
 80039e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039e6:	931a      	str	r3, [sp, #104]	; 0x68
 80039e8:	4654      	mov	r4, sl
 80039ea:	2205      	movs	r2, #5
 80039ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f0:	4851      	ldr	r0, [pc, #324]	; (8003b38 <_svfiprintf_r+0x1ec>)
 80039f2:	f000 fc43 	bl	800427c <memchr>
 80039f6:	9a04      	ldr	r2, [sp, #16]
 80039f8:	b9d8      	cbnz	r0, 8003a32 <_svfiprintf_r+0xe6>
 80039fa:	06d0      	lsls	r0, r2, #27
 80039fc:	bf44      	itt	mi
 80039fe:	2320      	movmi	r3, #32
 8003a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a04:	0711      	lsls	r1, r2, #28
 8003a06:	bf44      	itt	mi
 8003a08:	232b      	movmi	r3, #43	; 0x2b
 8003a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a12:	2b2a      	cmp	r3, #42	; 0x2a
 8003a14:	d015      	beq.n	8003a42 <_svfiprintf_r+0xf6>
 8003a16:	4654      	mov	r4, sl
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f04f 0c0a 	mov.w	ip, #10
 8003a1e:	9a07      	ldr	r2, [sp, #28]
 8003a20:	4621      	mov	r1, r4
 8003a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a26:	3b30      	subs	r3, #48	; 0x30
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	d94e      	bls.n	8003aca <_svfiprintf_r+0x17e>
 8003a2c:	b1b0      	cbz	r0, 8003a5c <_svfiprintf_r+0x110>
 8003a2e:	9207      	str	r2, [sp, #28]
 8003a30:	e014      	b.n	8003a5c <_svfiprintf_r+0x110>
 8003a32:	eba0 0308 	sub.w	r3, r0, r8
 8003a36:	fa09 f303 	lsl.w	r3, r9, r3
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	46a2      	mov	sl, r4
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	e7d2      	b.n	80039e8 <_svfiprintf_r+0x9c>
 8003a42:	9b03      	ldr	r3, [sp, #12]
 8003a44:	1d19      	adds	r1, r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	9103      	str	r1, [sp, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bfbb      	ittet	lt
 8003a4e:	425b      	neglt	r3, r3
 8003a50:	f042 0202 	orrlt.w	r2, r2, #2
 8003a54:	9307      	strge	r3, [sp, #28]
 8003a56:	9307      	strlt	r3, [sp, #28]
 8003a58:	bfb8      	it	lt
 8003a5a:	9204      	strlt	r2, [sp, #16]
 8003a5c:	7823      	ldrb	r3, [r4, #0]
 8003a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a60:	d10c      	bne.n	8003a7c <_svfiprintf_r+0x130>
 8003a62:	7863      	ldrb	r3, [r4, #1]
 8003a64:	2b2a      	cmp	r3, #42	; 0x2a
 8003a66:	d135      	bne.n	8003ad4 <_svfiprintf_r+0x188>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	3402      	adds	r4, #2
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	9203      	str	r2, [sp, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfb8      	it	lt
 8003a76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b48 <_svfiprintf_r+0x1fc>
 8003a80:	2203      	movs	r2, #3
 8003a82:	4650      	mov	r0, sl
 8003a84:	7821      	ldrb	r1, [r4, #0]
 8003a86:	f000 fbf9 	bl	800427c <memchr>
 8003a8a:	b140      	cbz	r0, 8003a9e <_svfiprintf_r+0x152>
 8003a8c:	2340      	movs	r3, #64	; 0x40
 8003a8e:	eba0 000a 	sub.w	r0, r0, sl
 8003a92:	fa03 f000 	lsl.w	r0, r3, r0
 8003a96:	9b04      	ldr	r3, [sp, #16]
 8003a98:	3401      	adds	r4, #1
 8003a9a:	4303      	orrs	r3, r0
 8003a9c:	9304      	str	r3, [sp, #16]
 8003a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa2:	2206      	movs	r2, #6
 8003aa4:	4825      	ldr	r0, [pc, #148]	; (8003b3c <_svfiprintf_r+0x1f0>)
 8003aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aaa:	f000 fbe7 	bl	800427c <memchr>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d038      	beq.n	8003b24 <_svfiprintf_r+0x1d8>
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <_svfiprintf_r+0x1f4>)
 8003ab4:	bb1b      	cbnz	r3, 8003afe <_svfiprintf_r+0x1b2>
 8003ab6:	9b03      	ldr	r3, [sp, #12]
 8003ab8:	3307      	adds	r3, #7
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	3308      	adds	r3, #8
 8003ac0:	9303      	str	r3, [sp, #12]
 8003ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac4:	4433      	add	r3, r6
 8003ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac8:	e767      	b.n	800399a <_svfiprintf_r+0x4e>
 8003aca:	460c      	mov	r4, r1
 8003acc:	2001      	movs	r0, #1
 8003ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ad2:	e7a5      	b.n	8003a20 <_svfiprintf_r+0xd4>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f04f 0c0a 	mov.w	ip, #10
 8003ada:	4619      	mov	r1, r3
 8003adc:	3401      	adds	r4, #1
 8003ade:	9305      	str	r3, [sp, #20]
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae6:	3a30      	subs	r2, #48	; 0x30
 8003ae8:	2a09      	cmp	r2, #9
 8003aea:	d903      	bls.n	8003af4 <_svfiprintf_r+0x1a8>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0c5      	beq.n	8003a7c <_svfiprintf_r+0x130>
 8003af0:	9105      	str	r1, [sp, #20]
 8003af2:	e7c3      	b.n	8003a7c <_svfiprintf_r+0x130>
 8003af4:	4604      	mov	r4, r0
 8003af6:	2301      	movs	r3, #1
 8003af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003afc:	e7f0      	b.n	8003ae0 <_svfiprintf_r+0x194>
 8003afe:	ab03      	add	r3, sp, #12
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	462a      	mov	r2, r5
 8003b04:	4638      	mov	r0, r7
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <_svfiprintf_r+0x1f8>)
 8003b08:	a904      	add	r1, sp, #16
 8003b0a:	f3af 8000 	nop.w
 8003b0e:	1c42      	adds	r2, r0, #1
 8003b10:	4606      	mov	r6, r0
 8003b12:	d1d6      	bne.n	8003ac2 <_svfiprintf_r+0x176>
 8003b14:	89ab      	ldrh	r3, [r5, #12]
 8003b16:	065b      	lsls	r3, r3, #25
 8003b18:	f53f af2c 	bmi.w	8003974 <_svfiprintf_r+0x28>
 8003b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b1e:	b01d      	add	sp, #116	; 0x74
 8003b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	462a      	mov	r2, r5
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_svfiprintf_r+0x1f8>)
 8003b2e:	a904      	add	r1, sp, #16
 8003b30:	f000 f9d4 	bl	8003edc <_printf_i>
 8003b34:	e7eb      	b.n	8003b0e <_svfiprintf_r+0x1c2>
 8003b36:	bf00      	nop
 8003b38:	08004574 	.word	0x08004574
 8003b3c:	0800457e 	.word	0x0800457e
 8003b40:	00000000 	.word	0x00000000
 8003b44:	08003895 	.word	0x08003895
 8003b48:	0800457a 	.word	0x0800457a

08003b4c <__sfputc_r>:
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	b410      	push	{r4}
 8003b50:	3b01      	subs	r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	6093      	str	r3, [r2, #8]
 8003b56:	da07      	bge.n	8003b68 <__sfputc_r+0x1c>
 8003b58:	6994      	ldr	r4, [r2, #24]
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	db01      	blt.n	8003b62 <__sfputc_r+0x16>
 8003b5e:	290a      	cmp	r1, #10
 8003b60:	d102      	bne.n	8003b68 <__sfputc_r+0x1c>
 8003b62:	bc10      	pop	{r4}
 8003b64:	f7ff bb12 	b.w	800318c <__swbuf_r>
 8003b68:	6813      	ldr	r3, [r2, #0]
 8003b6a:	1c58      	adds	r0, r3, #1
 8003b6c:	6010      	str	r0, [r2, #0]
 8003b6e:	7019      	strb	r1, [r3, #0]
 8003b70:	4608      	mov	r0, r1
 8003b72:	bc10      	pop	{r4}
 8003b74:	4770      	bx	lr

08003b76 <__sfputs_r>:
 8003b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b78:	4606      	mov	r6, r0
 8003b7a:	460f      	mov	r7, r1
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	18d5      	adds	r5, r2, r3
 8003b80:	42ac      	cmp	r4, r5
 8003b82:	d101      	bne.n	8003b88 <__sfputs_r+0x12>
 8003b84:	2000      	movs	r0, #0
 8003b86:	e007      	b.n	8003b98 <__sfputs_r+0x22>
 8003b88:	463a      	mov	r2, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b90:	f7ff ffdc 	bl	8003b4c <__sfputc_r>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d1f3      	bne.n	8003b80 <__sfputs_r+0xa>
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b9c <_vfiprintf_r>:
 8003b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	4698      	mov	r8, r3
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	b09d      	sub	sp, #116	; 0x74
 8003baa:	b118      	cbz	r0, 8003bb4 <_vfiprintf_r+0x18>
 8003bac:	6983      	ldr	r3, [r0, #24]
 8003bae:	b90b      	cbnz	r3, 8003bb4 <_vfiprintf_r+0x18>
 8003bb0:	f7ff fcc6 	bl	8003540 <__sinit>
 8003bb4:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <_vfiprintf_r+0x240>)
 8003bb6:	429d      	cmp	r5, r3
 8003bb8:	d11b      	bne.n	8003bf2 <_vfiprintf_r+0x56>
 8003bba:	6875      	ldr	r5, [r6, #4]
 8003bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bbe:	07d9      	lsls	r1, r3, #31
 8003bc0:	d405      	bmi.n	8003bce <_vfiprintf_r+0x32>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	059a      	lsls	r2, r3, #22
 8003bc6:	d402      	bmi.n	8003bce <_vfiprintf_r+0x32>
 8003bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bca:	f7ff fd57 	bl	800367c <__retarget_lock_acquire_recursive>
 8003bce:	89ab      	ldrh	r3, [r5, #12]
 8003bd0:	071b      	lsls	r3, r3, #28
 8003bd2:	d501      	bpl.n	8003bd8 <_vfiprintf_r+0x3c>
 8003bd4:	692b      	ldr	r3, [r5, #16]
 8003bd6:	b9eb      	cbnz	r3, 8003c14 <_vfiprintf_r+0x78>
 8003bd8:	4629      	mov	r1, r5
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7ff fb28 	bl	8003230 <__swsetup_r>
 8003be0:	b1c0      	cbz	r0, 8003c14 <_vfiprintf_r+0x78>
 8003be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003be4:	07dc      	lsls	r4, r3, #31
 8003be6:	d50e      	bpl.n	8003c06 <_vfiprintf_r+0x6a>
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bec:	b01d      	add	sp, #116	; 0x74
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <_vfiprintf_r+0x244>)
 8003bf4:	429d      	cmp	r5, r3
 8003bf6:	d101      	bne.n	8003bfc <_vfiprintf_r+0x60>
 8003bf8:	68b5      	ldr	r5, [r6, #8]
 8003bfa:	e7df      	b.n	8003bbc <_vfiprintf_r+0x20>
 8003bfc:	4b79      	ldr	r3, [pc, #484]	; (8003de4 <_vfiprintf_r+0x248>)
 8003bfe:	429d      	cmp	r5, r3
 8003c00:	bf08      	it	eq
 8003c02:	68f5      	ldreq	r5, [r6, #12]
 8003c04:	e7da      	b.n	8003bbc <_vfiprintf_r+0x20>
 8003c06:	89ab      	ldrh	r3, [r5, #12]
 8003c08:	0598      	lsls	r0, r3, #22
 8003c0a:	d4ed      	bmi.n	8003be8 <_vfiprintf_r+0x4c>
 8003c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c0e:	f7ff fd36 	bl	800367e <__retarget_lock_release_recursive>
 8003c12:	e7e9      	b.n	8003be8 <_vfiprintf_r+0x4c>
 8003c14:	2300      	movs	r3, #0
 8003c16:	9309      	str	r3, [sp, #36]	; 0x24
 8003c18:	2320      	movs	r3, #32
 8003c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c1e:	2330      	movs	r3, #48	; 0x30
 8003c20:	f04f 0901 	mov.w	r9, #1
 8003c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003de8 <_vfiprintf_r+0x24c>
 8003c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c30:	4623      	mov	r3, r4
 8003c32:	469a      	mov	sl, r3
 8003c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c38:	b10a      	cbz	r2, 8003c3e <_vfiprintf_r+0xa2>
 8003c3a:	2a25      	cmp	r2, #37	; 0x25
 8003c3c:	d1f9      	bne.n	8003c32 <_vfiprintf_r+0x96>
 8003c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8003c42:	d00b      	beq.n	8003c5c <_vfiprintf_r+0xc0>
 8003c44:	465b      	mov	r3, fp
 8003c46:	4622      	mov	r2, r4
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7ff ff93 	bl	8003b76 <__sfputs_r>
 8003c50:	3001      	adds	r0, #1
 8003c52:	f000 80aa 	beq.w	8003daa <_vfiprintf_r+0x20e>
 8003c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c58:	445a      	add	r2, fp
 8003c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a2 	beq.w	8003daa <_vfiprintf_r+0x20e>
 8003c66:	2300      	movs	r3, #0
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c70:	f10a 0a01 	add.w	sl, sl, #1
 8003c74:	9304      	str	r3, [sp, #16]
 8003c76:	9307      	str	r3, [sp, #28]
 8003c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c7e:	4654      	mov	r4, sl
 8003c80:	2205      	movs	r2, #5
 8003c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c86:	4858      	ldr	r0, [pc, #352]	; (8003de8 <_vfiprintf_r+0x24c>)
 8003c88:	f000 faf8 	bl	800427c <memchr>
 8003c8c:	9a04      	ldr	r2, [sp, #16]
 8003c8e:	b9d8      	cbnz	r0, 8003cc8 <_vfiprintf_r+0x12c>
 8003c90:	06d1      	lsls	r1, r2, #27
 8003c92:	bf44      	itt	mi
 8003c94:	2320      	movmi	r3, #32
 8003c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c9a:	0713      	lsls	r3, r2, #28
 8003c9c:	bf44      	itt	mi
 8003c9e:	232b      	movmi	r3, #43	; 0x2b
 8003ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8003caa:	d015      	beq.n	8003cd8 <_vfiprintf_r+0x13c>
 8003cac:	4654      	mov	r4, sl
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f04f 0c0a 	mov.w	ip, #10
 8003cb4:	9a07      	ldr	r2, [sp, #28]
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cbc:	3b30      	subs	r3, #48	; 0x30
 8003cbe:	2b09      	cmp	r3, #9
 8003cc0:	d94e      	bls.n	8003d60 <_vfiprintf_r+0x1c4>
 8003cc2:	b1b0      	cbz	r0, 8003cf2 <_vfiprintf_r+0x156>
 8003cc4:	9207      	str	r2, [sp, #28]
 8003cc6:	e014      	b.n	8003cf2 <_vfiprintf_r+0x156>
 8003cc8:	eba0 0308 	sub.w	r3, r0, r8
 8003ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	46a2      	mov	sl, r4
 8003cd4:	9304      	str	r3, [sp, #16]
 8003cd6:	e7d2      	b.n	8003c7e <_vfiprintf_r+0xe2>
 8003cd8:	9b03      	ldr	r3, [sp, #12]
 8003cda:	1d19      	adds	r1, r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	9103      	str	r1, [sp, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bfbb      	ittet	lt
 8003ce4:	425b      	neglt	r3, r3
 8003ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8003cea:	9307      	strge	r3, [sp, #28]
 8003cec:	9307      	strlt	r3, [sp, #28]
 8003cee:	bfb8      	it	lt
 8003cf0:	9204      	strlt	r2, [sp, #16]
 8003cf2:	7823      	ldrb	r3, [r4, #0]
 8003cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf6:	d10c      	bne.n	8003d12 <_vfiprintf_r+0x176>
 8003cf8:	7863      	ldrb	r3, [r4, #1]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	d135      	bne.n	8003d6a <_vfiprintf_r+0x1ce>
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	3402      	adds	r4, #2
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	9203      	str	r2, [sp, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bfb8      	it	lt
 8003d0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d10:	9305      	str	r3, [sp, #20]
 8003d12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003df8 <_vfiprintf_r+0x25c>
 8003d16:	2203      	movs	r2, #3
 8003d18:	4650      	mov	r0, sl
 8003d1a:	7821      	ldrb	r1, [r4, #0]
 8003d1c:	f000 faae 	bl	800427c <memchr>
 8003d20:	b140      	cbz	r0, 8003d34 <_vfiprintf_r+0x198>
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	eba0 000a 	sub.w	r0, r0, sl
 8003d28:	fa03 f000 	lsl.w	r0, r3, r0
 8003d2c:	9b04      	ldr	r3, [sp, #16]
 8003d2e:	3401      	adds	r4, #1
 8003d30:	4303      	orrs	r3, r0
 8003d32:	9304      	str	r3, [sp, #16]
 8003d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d38:	2206      	movs	r2, #6
 8003d3a:	482c      	ldr	r0, [pc, #176]	; (8003dec <_vfiprintf_r+0x250>)
 8003d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d40:	f000 fa9c 	bl	800427c <memchr>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d03f      	beq.n	8003dc8 <_vfiprintf_r+0x22c>
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <_vfiprintf_r+0x254>)
 8003d4a:	bb1b      	cbnz	r3, 8003d94 <_vfiprintf_r+0x1f8>
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	3308      	adds	r3, #8
 8003d56:	9303      	str	r3, [sp, #12]
 8003d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d5a:	443b      	add	r3, r7
 8003d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5e:	e767      	b.n	8003c30 <_vfiprintf_r+0x94>
 8003d60:	460c      	mov	r4, r1
 8003d62:	2001      	movs	r0, #1
 8003d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d68:	e7a5      	b.n	8003cb6 <_vfiprintf_r+0x11a>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f04f 0c0a 	mov.w	ip, #10
 8003d70:	4619      	mov	r1, r3
 8003d72:	3401      	adds	r4, #1
 8003d74:	9305      	str	r3, [sp, #20]
 8003d76:	4620      	mov	r0, r4
 8003d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d7c:	3a30      	subs	r2, #48	; 0x30
 8003d7e:	2a09      	cmp	r2, #9
 8003d80:	d903      	bls.n	8003d8a <_vfiprintf_r+0x1ee>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0c5      	beq.n	8003d12 <_vfiprintf_r+0x176>
 8003d86:	9105      	str	r1, [sp, #20]
 8003d88:	e7c3      	b.n	8003d12 <_vfiprintf_r+0x176>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d92:	e7f0      	b.n	8003d76 <_vfiprintf_r+0x1da>
 8003d94:	ab03      	add	r3, sp, #12
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	462a      	mov	r2, r5
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <_vfiprintf_r+0x258>)
 8003d9e:	a904      	add	r1, sp, #16
 8003da0:	f3af 8000 	nop.w
 8003da4:	4607      	mov	r7, r0
 8003da6:	1c78      	adds	r0, r7, #1
 8003da8:	d1d6      	bne.n	8003d58 <_vfiprintf_r+0x1bc>
 8003daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dac:	07d9      	lsls	r1, r3, #31
 8003dae:	d405      	bmi.n	8003dbc <_vfiprintf_r+0x220>
 8003db0:	89ab      	ldrh	r3, [r5, #12]
 8003db2:	059a      	lsls	r2, r3, #22
 8003db4:	d402      	bmi.n	8003dbc <_vfiprintf_r+0x220>
 8003db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003db8:	f7ff fc61 	bl	800367e <__retarget_lock_release_recursive>
 8003dbc:	89ab      	ldrh	r3, [r5, #12]
 8003dbe:	065b      	lsls	r3, r3, #25
 8003dc0:	f53f af12 	bmi.w	8003be8 <_vfiprintf_r+0x4c>
 8003dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dc6:	e711      	b.n	8003bec <_vfiprintf_r+0x50>
 8003dc8:	ab03      	add	r3, sp, #12
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	462a      	mov	r2, r5
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <_vfiprintf_r+0x258>)
 8003dd2:	a904      	add	r1, sp, #16
 8003dd4:	f000 f882 	bl	8003edc <_printf_i>
 8003dd8:	e7e4      	b.n	8003da4 <_vfiprintf_r+0x208>
 8003dda:	bf00      	nop
 8003ddc:	08004534 	.word	0x08004534
 8003de0:	08004554 	.word	0x08004554
 8003de4:	08004514 	.word	0x08004514
 8003de8:	08004574 	.word	0x08004574
 8003dec:	0800457e 	.word	0x0800457e
 8003df0:	00000000 	.word	0x00000000
 8003df4:	08003b77 	.word	0x08003b77
 8003df8:	0800457a 	.word	0x0800457a

08003dfc <_printf_common>:
 8003dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	4616      	mov	r6, r2
 8003e02:	4699      	mov	r9, r3
 8003e04:	688a      	ldr	r2, [r1, #8]
 8003e06:	690b      	ldr	r3, [r1, #16]
 8003e08:	4607      	mov	r7, r0
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	bfb8      	it	lt
 8003e0e:	4613      	movlt	r3, r2
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e16:	460c      	mov	r4, r1
 8003e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e1c:	b10a      	cbz	r2, 8003e22 <_printf_common+0x26>
 8003e1e:	3301      	adds	r3, #1
 8003e20:	6033      	str	r3, [r6, #0]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	0699      	lsls	r1, r3, #26
 8003e26:	bf42      	ittt	mi
 8003e28:	6833      	ldrmi	r3, [r6, #0]
 8003e2a:	3302      	addmi	r3, #2
 8003e2c:	6033      	strmi	r3, [r6, #0]
 8003e2e:	6825      	ldr	r5, [r4, #0]
 8003e30:	f015 0506 	ands.w	r5, r5, #6
 8003e34:	d106      	bne.n	8003e44 <_printf_common+0x48>
 8003e36:	f104 0a19 	add.w	sl, r4, #25
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	6832      	ldr	r2, [r6, #0]
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	dc28      	bgt.n	8003e96 <_printf_common+0x9a>
 8003e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e48:	1e13      	subs	r3, r2, #0
 8003e4a:	6822      	ldr	r2, [r4, #0]
 8003e4c:	bf18      	it	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	0692      	lsls	r2, r2, #26
 8003e52:	d42d      	bmi.n	8003eb0 <_printf_common+0xb4>
 8003e54:	4649      	mov	r1, r9
 8003e56:	4638      	mov	r0, r7
 8003e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e5c:	47c0      	blx	r8
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d020      	beq.n	8003ea4 <_printf_common+0xa8>
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	68e5      	ldr	r5, [r4, #12]
 8003e66:	f003 0306 	and.w	r3, r3, #6
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	bf18      	it	ne
 8003e6e:	2500      	movne	r5, #0
 8003e70:	6832      	ldr	r2, [r6, #0]
 8003e72:	f04f 0600 	mov.w	r6, #0
 8003e76:	68a3      	ldr	r3, [r4, #8]
 8003e78:	bf08      	it	eq
 8003e7a:	1aad      	subeq	r5, r5, r2
 8003e7c:	6922      	ldr	r2, [r4, #16]
 8003e7e:	bf08      	it	eq
 8003e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bfc4      	itt	gt
 8003e88:	1a9b      	subgt	r3, r3, r2
 8003e8a:	18ed      	addgt	r5, r5, r3
 8003e8c:	341a      	adds	r4, #26
 8003e8e:	42b5      	cmp	r5, r6
 8003e90:	d11a      	bne.n	8003ec8 <_printf_common+0xcc>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e008      	b.n	8003ea8 <_printf_common+0xac>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4652      	mov	r2, sl
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	47c0      	blx	r8
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d103      	bne.n	8003eac <_printf_common+0xb0>
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	3501      	adds	r5, #1
 8003eae:	e7c4      	b.n	8003e3a <_printf_common+0x3e>
 8003eb0:	2030      	movs	r0, #48	; 0x30
 8003eb2:	18e1      	adds	r1, r4, r3
 8003eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ebe:	4422      	add	r2, r4
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ec6:	e7c5      	b.n	8003e54 <_printf_common+0x58>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4649      	mov	r1, r9
 8003ece:	4638      	mov	r0, r7
 8003ed0:	47c0      	blx	r8
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d0e6      	beq.n	8003ea4 <_printf_common+0xa8>
 8003ed6:	3601      	adds	r6, #1
 8003ed8:	e7d9      	b.n	8003e8e <_printf_common+0x92>
	...

08003edc <_printf_i>:
 8003edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	7e27      	ldrb	r7, [r4, #24]
 8003ee4:	4691      	mov	r9, r2
 8003ee6:	2f78      	cmp	r7, #120	; 0x78
 8003ee8:	4680      	mov	r8, r0
 8003eea:	469a      	mov	sl, r3
 8003eec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ef2:	d807      	bhi.n	8003f04 <_printf_i+0x28>
 8003ef4:	2f62      	cmp	r7, #98	; 0x62
 8003ef6:	d80a      	bhi.n	8003f0e <_printf_i+0x32>
 8003ef8:	2f00      	cmp	r7, #0
 8003efa:	f000 80d9 	beq.w	80040b0 <_printf_i+0x1d4>
 8003efe:	2f58      	cmp	r7, #88	; 0x58
 8003f00:	f000 80a4 	beq.w	800404c <_printf_i+0x170>
 8003f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f0c:	e03a      	b.n	8003f84 <_printf_i+0xa8>
 8003f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f12:	2b15      	cmp	r3, #21
 8003f14:	d8f6      	bhi.n	8003f04 <_printf_i+0x28>
 8003f16:	a001      	add	r0, pc, #4	; (adr r0, 8003f1c <_printf_i+0x40>)
 8003f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	08003f05 	.word	0x08003f05
 8003f28:	08003f05 	.word	0x08003f05
 8003f2c:	08003f05 	.word	0x08003f05
 8003f30:	08003f05 	.word	0x08003f05
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003f05 	.word	0x08003f05
 8003f3c:	08003f05 	.word	0x08003f05
 8003f40:	08003f05 	.word	0x08003f05
 8003f44:	08003f05 	.word	0x08003f05
 8003f48:	08004097 	.word	0x08004097
 8003f4c:	08003fb9 	.word	0x08003fb9
 8003f50:	08004079 	.word	0x08004079
 8003f54:	08003f05 	.word	0x08003f05
 8003f58:	08003f05 	.word	0x08003f05
 8003f5c:	080040b9 	.word	0x080040b9
 8003f60:	08003f05 	.word	0x08003f05
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003f05 	.word	0x08003f05
 8003f6c:	08003f05 	.word	0x08003f05
 8003f70:	08004081 	.word	0x08004081
 8003f74:	680b      	ldr	r3, [r1, #0]
 8003f76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	600a      	str	r2, [r1, #0]
 8003f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0a4      	b.n	80040d2 <_printf_i+0x1f6>
 8003f88:	6825      	ldr	r5, [r4, #0]
 8003f8a:	6808      	ldr	r0, [r1, #0]
 8003f8c:	062e      	lsls	r6, r5, #24
 8003f8e:	f100 0304 	add.w	r3, r0, #4
 8003f92:	d50a      	bpl.n	8003faa <_printf_i+0xce>
 8003f94:	6805      	ldr	r5, [r0, #0]
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	da03      	bge.n	8003fa4 <_printf_i+0xc8>
 8003f9c:	232d      	movs	r3, #45	; 0x2d
 8003f9e:	426d      	negs	r5, r5
 8003fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa4:	230a      	movs	r3, #10
 8003fa6:	485e      	ldr	r0, [pc, #376]	; (8004120 <_printf_i+0x244>)
 8003fa8:	e019      	b.n	8003fde <_printf_i+0x102>
 8003faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003fae:	6805      	ldr	r5, [r0, #0]
 8003fb0:	600b      	str	r3, [r1, #0]
 8003fb2:	bf18      	it	ne
 8003fb4:	b22d      	sxthne	r5, r5
 8003fb6:	e7ef      	b.n	8003f98 <_printf_i+0xbc>
 8003fb8:	680b      	ldr	r3, [r1, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	1d18      	adds	r0, r3, #4
 8003fbe:	6008      	str	r0, [r1, #0]
 8003fc0:	0628      	lsls	r0, r5, #24
 8003fc2:	d501      	bpl.n	8003fc8 <_printf_i+0xec>
 8003fc4:	681d      	ldr	r5, [r3, #0]
 8003fc6:	e002      	b.n	8003fce <_printf_i+0xf2>
 8003fc8:	0669      	lsls	r1, r5, #25
 8003fca:	d5fb      	bpl.n	8003fc4 <_printf_i+0xe8>
 8003fcc:	881d      	ldrh	r5, [r3, #0]
 8003fce:	2f6f      	cmp	r7, #111	; 0x6f
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2308      	moveq	r3, #8
 8003fd4:	230a      	movne	r3, #10
 8003fd6:	4852      	ldr	r0, [pc, #328]	; (8004120 <_printf_i+0x244>)
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fde:	6866      	ldr	r6, [r4, #4]
 8003fe0:	2e00      	cmp	r6, #0
 8003fe2:	bfa8      	it	ge
 8003fe4:	6821      	ldrge	r1, [r4, #0]
 8003fe6:	60a6      	str	r6, [r4, #8]
 8003fe8:	bfa4      	itt	ge
 8003fea:	f021 0104 	bicge.w	r1, r1, #4
 8003fee:	6021      	strge	r1, [r4, #0]
 8003ff0:	b90d      	cbnz	r5, 8003ff6 <_printf_i+0x11a>
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	d04d      	beq.n	8004092 <_printf_i+0x1b6>
 8003ff6:	4616      	mov	r6, r2
 8003ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ffc:	fb03 5711 	mls	r7, r3, r1, r5
 8004000:	5dc7      	ldrb	r7, [r0, r7]
 8004002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004006:	462f      	mov	r7, r5
 8004008:	42bb      	cmp	r3, r7
 800400a:	460d      	mov	r5, r1
 800400c:	d9f4      	bls.n	8003ff8 <_printf_i+0x11c>
 800400e:	2b08      	cmp	r3, #8
 8004010:	d10b      	bne.n	800402a <_printf_i+0x14e>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	07df      	lsls	r7, r3, #31
 8004016:	d508      	bpl.n	800402a <_printf_i+0x14e>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	6861      	ldr	r1, [r4, #4]
 800401c:	4299      	cmp	r1, r3
 800401e:	bfde      	ittt	le
 8004020:	2330      	movle	r3, #48	; 0x30
 8004022:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004026:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800402a:	1b92      	subs	r2, r2, r6
 800402c:	6122      	str	r2, [r4, #16]
 800402e:	464b      	mov	r3, r9
 8004030:	4621      	mov	r1, r4
 8004032:	4640      	mov	r0, r8
 8004034:	f8cd a000 	str.w	sl, [sp]
 8004038:	aa03      	add	r2, sp, #12
 800403a:	f7ff fedf 	bl	8003dfc <_printf_common>
 800403e:	3001      	adds	r0, #1
 8004040:	d14c      	bne.n	80040dc <_printf_i+0x200>
 8004042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004046:	b004      	add	sp, #16
 8004048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404c:	4834      	ldr	r0, [pc, #208]	; (8004120 <_printf_i+0x244>)
 800404e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004052:	680e      	ldr	r6, [r1, #0]
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f856 5b04 	ldr.w	r5, [r6], #4
 800405a:	061f      	lsls	r7, r3, #24
 800405c:	600e      	str	r6, [r1, #0]
 800405e:	d514      	bpl.n	800408a <_printf_i+0x1ae>
 8004060:	07d9      	lsls	r1, r3, #31
 8004062:	bf44      	itt	mi
 8004064:	f043 0320 	orrmi.w	r3, r3, #32
 8004068:	6023      	strmi	r3, [r4, #0]
 800406a:	b91d      	cbnz	r5, 8004074 <_printf_i+0x198>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	f023 0320 	bic.w	r3, r3, #32
 8004072:	6023      	str	r3, [r4, #0]
 8004074:	2310      	movs	r3, #16
 8004076:	e7af      	b.n	8003fd8 <_printf_i+0xfc>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	f043 0320 	orr.w	r3, r3, #32
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	2378      	movs	r3, #120	; 0x78
 8004082:	4828      	ldr	r0, [pc, #160]	; (8004124 <_printf_i+0x248>)
 8004084:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004088:	e7e3      	b.n	8004052 <_printf_i+0x176>
 800408a:	065e      	lsls	r6, r3, #25
 800408c:	bf48      	it	mi
 800408e:	b2ad      	uxthmi	r5, r5
 8004090:	e7e6      	b.n	8004060 <_printf_i+0x184>
 8004092:	4616      	mov	r6, r2
 8004094:	e7bb      	b.n	800400e <_printf_i+0x132>
 8004096:	680b      	ldr	r3, [r1, #0]
 8004098:	6826      	ldr	r6, [r4, #0]
 800409a:	1d1d      	adds	r5, r3, #4
 800409c:	6960      	ldr	r0, [r4, #20]
 800409e:	600d      	str	r5, [r1, #0]
 80040a0:	0635      	lsls	r5, r6, #24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	d501      	bpl.n	80040aa <_printf_i+0x1ce>
 80040a6:	6018      	str	r0, [r3, #0]
 80040a8:	e002      	b.n	80040b0 <_printf_i+0x1d4>
 80040aa:	0671      	lsls	r1, r6, #25
 80040ac:	d5fb      	bpl.n	80040a6 <_printf_i+0x1ca>
 80040ae:	8018      	strh	r0, [r3, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	4616      	mov	r6, r2
 80040b4:	6123      	str	r3, [r4, #16]
 80040b6:	e7ba      	b.n	800402e <_printf_i+0x152>
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	600a      	str	r2, [r1, #0]
 80040be:	681e      	ldr	r6, [r3, #0]
 80040c0:	2100      	movs	r1, #0
 80040c2:	4630      	mov	r0, r6
 80040c4:	6862      	ldr	r2, [r4, #4]
 80040c6:	f000 f8d9 	bl	800427c <memchr>
 80040ca:	b108      	cbz	r0, 80040d0 <_printf_i+0x1f4>
 80040cc:	1b80      	subs	r0, r0, r6
 80040ce:	6060      	str	r0, [r4, #4]
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2300      	movs	r3, #0
 80040d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040da:	e7a8      	b.n	800402e <_printf_i+0x152>
 80040dc:	4632      	mov	r2, r6
 80040de:	4649      	mov	r1, r9
 80040e0:	4640      	mov	r0, r8
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	47d0      	blx	sl
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0ab      	beq.n	8004042 <_printf_i+0x166>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	079b      	lsls	r3, r3, #30
 80040ee:	d413      	bmi.n	8004118 <_printf_i+0x23c>
 80040f0:	68e0      	ldr	r0, [r4, #12]
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	4298      	cmp	r0, r3
 80040f6:	bfb8      	it	lt
 80040f8:	4618      	movlt	r0, r3
 80040fa:	e7a4      	b.n	8004046 <_printf_i+0x16a>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4632      	mov	r2, r6
 8004100:	4649      	mov	r1, r9
 8004102:	4640      	mov	r0, r8
 8004104:	47d0      	blx	sl
 8004106:	3001      	adds	r0, #1
 8004108:	d09b      	beq.n	8004042 <_printf_i+0x166>
 800410a:	3501      	adds	r5, #1
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	9903      	ldr	r1, [sp, #12]
 8004110:	1a5b      	subs	r3, r3, r1
 8004112:	42ab      	cmp	r3, r5
 8004114:	dcf2      	bgt.n	80040fc <_printf_i+0x220>
 8004116:	e7eb      	b.n	80040f0 <_printf_i+0x214>
 8004118:	2500      	movs	r5, #0
 800411a:	f104 0619 	add.w	r6, r4, #25
 800411e:	e7f5      	b.n	800410c <_printf_i+0x230>
 8004120:	08004585 	.word	0x08004585
 8004124:	08004596 	.word	0x08004596

08004128 <_sbrk_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	2300      	movs	r3, #0
 800412c:	4d05      	ldr	r5, [pc, #20]	; (8004144 <_sbrk_r+0x1c>)
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f7fd f960 	bl	80013f8 <_sbrk>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_sbrk_r+0x1a>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_sbrk_r+0x1a>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	2000048c 	.word	0x2000048c

08004148 <__sread>:
 8004148:	b510      	push	{r4, lr}
 800414a:	460c      	mov	r4, r1
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	f000 f8ee 	bl	8004330 <_read_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	bfab      	itete	ge
 8004158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800415a:	89a3      	ldrhlt	r3, [r4, #12]
 800415c:	181b      	addge	r3, r3, r0
 800415e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004162:	bfac      	ite	ge
 8004164:	6563      	strge	r3, [r4, #84]	; 0x54
 8004166:	81a3      	strhlt	r3, [r4, #12]
 8004168:	bd10      	pop	{r4, pc}

0800416a <__swrite>:
 800416a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800416e:	461f      	mov	r7, r3
 8004170:	898b      	ldrh	r3, [r1, #12]
 8004172:	4605      	mov	r5, r0
 8004174:	05db      	lsls	r3, r3, #23
 8004176:	460c      	mov	r4, r1
 8004178:	4616      	mov	r6, r2
 800417a:	d505      	bpl.n	8004188 <__swrite+0x1e>
 800417c:	2302      	movs	r3, #2
 800417e:	2200      	movs	r2, #0
 8004180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004184:	f000 f868 	bl	8004258 <_lseek_r>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	4632      	mov	r2, r6
 800418c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	4628      	mov	r0, r5
 8004194:	463b      	mov	r3, r7
 8004196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800419a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800419e:	f000 b817 	b.w	80041d0 <_write_r>

080041a2 <__sseek>:
 80041a2:	b510      	push	{r4, lr}
 80041a4:	460c      	mov	r4, r1
 80041a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041aa:	f000 f855 	bl	8004258 <_lseek_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	bf15      	itete	ne
 80041b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041be:	81a3      	strheq	r3, [r4, #12]
 80041c0:	bf18      	it	ne
 80041c2:	81a3      	strhne	r3, [r4, #12]
 80041c4:	bd10      	pop	{r4, pc}

080041c6 <__sclose>:
 80041c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ca:	f000 b813 	b.w	80041f4 <_close_r>
	...

080041d0 <_write_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	4d05      	ldr	r5, [pc, #20]	; (80041f0 <_write_r+0x20>)
 80041dc:	602a      	str	r2, [r5, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	f7fc fe2c 	bl	8000e3c <_write>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_write_r+0x1e>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_write_r+0x1e>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	2000048c 	.word	0x2000048c

080041f4 <_close_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	2300      	movs	r3, #0
 80041f8:	4d05      	ldr	r5, [pc, #20]	; (8004210 <_close_r+0x1c>)
 80041fa:	4604      	mov	r4, r0
 80041fc:	4608      	mov	r0, r1
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	f7fd f8ca 	bl	8001398 <_close>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_close_r+0x1a>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_close_r+0x1a>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	2000048c 	.word	0x2000048c

08004214 <_fstat_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	2300      	movs	r3, #0
 8004218:	4d06      	ldr	r5, [pc, #24]	; (8004234 <_fstat_r+0x20>)
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	f7fd f8c4 	bl	80013ae <_fstat>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	d102      	bne.n	8004230 <_fstat_r+0x1c>
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	b103      	cbz	r3, 8004230 <_fstat_r+0x1c>
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	2000048c 	.word	0x2000048c

08004238 <_isatty_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	2300      	movs	r3, #0
 800423c:	4d05      	ldr	r5, [pc, #20]	; (8004254 <_isatty_r+0x1c>)
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f7fd f8c2 	bl	80013cc <_isatty>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_isatty_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_isatty_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	2000048c 	.word	0x2000048c

08004258 <_lseek_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	2200      	movs	r2, #0
 8004262:	4d05      	ldr	r5, [pc, #20]	; (8004278 <_lseek_r+0x20>)
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f7fd f8ba 	bl	80013e0 <_lseek>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_lseek_r+0x1e>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_lseek_r+0x1e>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	2000048c 	.word	0x2000048c

0800427c <memchr>:
 800427c:	4603      	mov	r3, r0
 800427e:	b510      	push	{r4, lr}
 8004280:	b2c9      	uxtb	r1, r1
 8004282:	4402      	add	r2, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	4618      	mov	r0, r3
 8004288:	d101      	bne.n	800428e <memchr+0x12>
 800428a:	2000      	movs	r0, #0
 800428c:	e003      	b.n	8004296 <memchr+0x1a>
 800428e:	7804      	ldrb	r4, [r0, #0]
 8004290:	3301      	adds	r3, #1
 8004292:	428c      	cmp	r4, r1
 8004294:	d1f6      	bne.n	8004284 <memchr+0x8>
 8004296:	bd10      	pop	{r4, pc}

08004298 <memmove>:
 8004298:	4288      	cmp	r0, r1
 800429a:	b510      	push	{r4, lr}
 800429c:	eb01 0402 	add.w	r4, r1, r2
 80042a0:	d902      	bls.n	80042a8 <memmove+0x10>
 80042a2:	4284      	cmp	r4, r0
 80042a4:	4623      	mov	r3, r4
 80042a6:	d807      	bhi.n	80042b8 <memmove+0x20>
 80042a8:	1e43      	subs	r3, r0, #1
 80042aa:	42a1      	cmp	r1, r4
 80042ac:	d008      	beq.n	80042c0 <memmove+0x28>
 80042ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042b6:	e7f8      	b.n	80042aa <memmove+0x12>
 80042b8:	4601      	mov	r1, r0
 80042ba:	4402      	add	r2, r0
 80042bc:	428a      	cmp	r2, r1
 80042be:	d100      	bne.n	80042c2 <memmove+0x2a>
 80042c0:	bd10      	pop	{r4, pc}
 80042c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042ca:	e7f7      	b.n	80042bc <memmove+0x24>

080042cc <__malloc_lock>:
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <__malloc_lock+0x8>)
 80042ce:	f7ff b9d5 	b.w	800367c <__retarget_lock_acquire_recursive>
 80042d2:	bf00      	nop
 80042d4:	20000484 	.word	0x20000484

080042d8 <__malloc_unlock>:
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <__malloc_unlock+0x8>)
 80042da:	f7ff b9d0 	b.w	800367e <__retarget_lock_release_recursive>
 80042de:	bf00      	nop
 80042e0:	20000484 	.word	0x20000484

080042e4 <_realloc_r>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	4607      	mov	r7, r0
 80042e8:	4614      	mov	r4, r2
 80042ea:	460e      	mov	r6, r1
 80042ec:	b921      	cbnz	r1, 80042f8 <_realloc_r+0x14>
 80042ee:	4611      	mov	r1, r2
 80042f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042f4:	f7ff ba74 	b.w	80037e0 <_malloc_r>
 80042f8:	b922      	cbnz	r2, 8004304 <_realloc_r+0x20>
 80042fa:	f7ff fa25 	bl	8003748 <_free_r>
 80042fe:	4625      	mov	r5, r4
 8004300:	4628      	mov	r0, r5
 8004302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004304:	f000 f826 	bl	8004354 <_malloc_usable_size_r>
 8004308:	42a0      	cmp	r0, r4
 800430a:	d20f      	bcs.n	800432c <_realloc_r+0x48>
 800430c:	4621      	mov	r1, r4
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff fa66 	bl	80037e0 <_malloc_r>
 8004314:	4605      	mov	r5, r0
 8004316:	2800      	cmp	r0, #0
 8004318:	d0f2      	beq.n	8004300 <_realloc_r+0x1c>
 800431a:	4631      	mov	r1, r6
 800431c:	4622      	mov	r2, r4
 800431e:	f7fe fe71 	bl	8003004 <memcpy>
 8004322:	4631      	mov	r1, r6
 8004324:	4638      	mov	r0, r7
 8004326:	f7ff fa0f 	bl	8003748 <_free_r>
 800432a:	e7e9      	b.n	8004300 <_realloc_r+0x1c>
 800432c:	4635      	mov	r5, r6
 800432e:	e7e7      	b.n	8004300 <_realloc_r+0x1c>

08004330 <_read_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4604      	mov	r4, r0
 8004334:	4608      	mov	r0, r1
 8004336:	4611      	mov	r1, r2
 8004338:	2200      	movs	r2, #0
 800433a:	4d05      	ldr	r5, [pc, #20]	; (8004350 <_read_r+0x20>)
 800433c:	602a      	str	r2, [r5, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	f7fd f80d 	bl	800135e <_read>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d102      	bne.n	800434e <_read_r+0x1e>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	b103      	cbz	r3, 800434e <_read_r+0x1e>
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	bd38      	pop	{r3, r4, r5, pc}
 8004350:	2000048c 	.word	0x2000048c

08004354 <_malloc_usable_size_r>:
 8004354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004358:	1f18      	subs	r0, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbc      	itt	lt
 800435e:	580b      	ldrlt	r3, [r1, r0]
 8004360:	18c0      	addlt	r0, r0, r3
 8004362:	4770      	bx	lr

08004364 <_init>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	bf00      	nop
 8004368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436a:	bc08      	pop	{r3}
 800436c:	469e      	mov	lr, r3
 800436e:	4770      	bx	lr

08004370 <_fini>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	bf00      	nop
 8004374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004376:	bc08      	pop	{r3}
 8004378:	469e      	mov	lr, r3
 800437a:	4770      	bx	lr
