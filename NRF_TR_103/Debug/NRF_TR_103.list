
NRF_TR_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041b0  080041b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041b0  080041b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08004228  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004228  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002186  00000000  00000000  0002f47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185fe  00000000  00000000  000333c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f86e  00000000  00000000  0004b9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd08  00000000  00000000  0005b22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e0  00000000  00000000  000e7f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fcc 	.word	0x08003fcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003fcc 	.word	0x08003fcc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin	== IRQ_Pin)
 800016a:	88fb      	ldrh	r3, [r7, #6]
 800016c:	2b04      	cmp	r3, #4
 800016e:	d106      	bne.n	800017e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"IRQ\n", strlen("IRQ\n"), 1000);
 8000170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000174:	2204      	movs	r2, #4
 8000176:	4904      	ldr	r1, [pc, #16]	; (8000188 <HAL_GPIO_EXTI_Callback+0x28>)
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <HAL_GPIO_EXTI_Callback+0x2c>)
 800017a:	f003 f8e7 	bl	800334c <HAL_UART_Transmit>
	}
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	08003fe4 	.word	0x08003fe4
 800018c:	200000e4 	.word	0x200000e4

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b09e      	sub	sp, #120	; 0x78
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f001 f973 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 fa03 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 faa7 	bl	80006f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001a2:	f000 fa45 	bl	8000630 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 fa79 	bl	800069c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init(); // счётчик для микросекундных пауз
 80001aa:	f000 fb2f 	bl	800080c <DWT_Init>

    const uint64_t pipe1 = 0xE8E8F0F0E2LL;
 80001ae:	a3c4      	add	r3, pc, #784	; (adr r3, 80004c0 <main+0x330>)
 80001b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

    uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 80001b8:	f000 fd82 	bl	8000cc0 <isChipConnected>
 80001bc:	4603      	mov	r3, r0
 80001be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    char str[64] = {0,};
 80001c2:	2300      	movs	r3, #0
 80001c4:	627b      	str	r3, [r7, #36]	; 0x24
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	223c      	movs	r2, #60	; 0x3c
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f003 fa74 	bl	80036bc <memset>
    snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 80001d4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80001d8:	4ba5      	ldr	r3, [pc, #660]	; (8000470 <main+0x2e0>)
 80001da:	4aa6      	ldr	r2, [pc, #664]	; (8000474 <main+0x2e4>)
 80001dc:	2140      	movs	r1, #64	; 0x40
 80001de:	f003 fa75 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80001e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffb2 	bl	8000150 <strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	489f      	ldr	r0, [pc, #636]	; (8000478 <main+0x2e8>)
 80001fa:	f003 f8a7 	bl	800334c <HAL_UART_Transmit>

    res = NRF_Init(); // инициализация
 80001fe:	f000 fce9 	bl	8000bd4 <NRF_Init>
 8000202:	4603      	mov	r3, r0
 8000204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 8000208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800020c:	2b00      	cmp	r3, #0
 800020e:	d005      	beq.n	800021c <main+0x8c>
 8000210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000214:	2bff      	cmp	r3, #255	; 0xff
 8000216:	d001      	beq.n	800021c <main+0x8c>
 8000218:	4b95      	ldr	r3, [pc, #596]	; (8000470 <main+0x2e0>)
 800021a:	e000      	b.n	800021e <main+0x8e>
 800021c:	4b97      	ldr	r3, [pc, #604]	; (800047c <main+0x2ec>)
 800021e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000222:	4a97      	ldr	r2, [pc, #604]	; (8000480 <main+0x2f0>)
 8000224:	2140      	movs	r1, #64	; 0x40
 8000226:	f003 fa51 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800022a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800022e:	4618      	mov	r0, r3
 8000230:	f7ff ff8e 	bl	8000150 <strlen>
 8000234:	4603      	mov	r3, r0
 8000236:	b29a      	uxth	r2, r3
 8000238:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800023c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000240:	488d      	ldr	r0, [pc, #564]	; (8000478 <main+0x2e8>)
 8000242:	f003 f883 	bl	800334c <HAL_UART_Transmit>

    ////////////// SET ////////////////
    enableAckPayload();
 8000246:	f000 fe3b 	bl	8000ec0 <enableAckPayload>
    //setAutoAck(false);
    //setPayloadSize(6);
    setChannel(200);
 800024a:	20c8      	movs	r0, #200	; 0xc8
 800024c:	f000 fca2 	bl	8000b94 <setChannel>
    openWritingPipe(pipe1);
 8000250:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000254:	f000 fdf2 	bl	8000e3c <openWritingPipe>
    ///////////////////////////////////

    ////////////////////////// Вывод всяких статусов, для работы не нужно /////////////////////////////
    uint8_t status = get_status();
 8000258:	f000 fc94 	bl	8000b84 <get_status>
 800025c:	4603      	mov	r3, r0
 800025e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "get_status: 0x%02x\n", status);
 8000262:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000266:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800026a:	4a86      	ldr	r2, [pc, #536]	; (8000484 <main+0x2f4>)
 800026c:	2140      	movs	r1, #64	; 0x40
 800026e:	f003 fa2d 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff6a 	bl	8000150 <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	b29a      	uxth	r2, r3
 8000280:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000288:	487b      	ldr	r0, [pc, #492]	; (8000478 <main+0x2e8>)
 800028a:	f003 f85f 	bl	800334c <HAL_UART_Transmit>

    status = getPALevel();
 800028e:	f000 fe6a 	bl	8000f66 <getPALevel>
 8000292:	4603      	mov	r3, r0
 8000294:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 8000298:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800029c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80002a0:	4a79      	ldr	r2, [pc, #484]	; (8000488 <main+0x2f8>)
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	f003 fa12 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80002a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80002ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002be:	486e      	ldr	r0, [pc, #440]	; (8000478 <main+0x2e8>)
 80002c0:	f003 f844 	bl	800334c <HAL_UART_Transmit>

    if(status == 0x00)
 80002c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d107      	bne.n	80002dc <main+0x14c>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MIN\n", strlen("RF24_PA_MIN\n"), 1000);
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	220c      	movs	r2, #12
 80002d2:	496e      	ldr	r1, [pc, #440]	; (800048c <main+0x2fc>)
 80002d4:	4868      	ldr	r0, [pc, #416]	; (8000478 <main+0x2e8>)
 80002d6:	f003 f839 	bl	800334c <HAL_UART_Transmit>
 80002da:	e022      	b.n	8000322 <main+0x192>
    }
    else if(status == 0x01)
 80002dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d107      	bne.n	80002f4 <main+0x164>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_LOW\n", strlen("RF24_PA_LOW\n"), 1000);
 80002e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e8:	220c      	movs	r2, #12
 80002ea:	4969      	ldr	r1, [pc, #420]	; (8000490 <main+0x300>)
 80002ec:	4862      	ldr	r0, [pc, #392]	; (8000478 <main+0x2e8>)
 80002ee:	f003 f82d 	bl	800334c <HAL_UART_Transmit>
 80002f2:	e016      	b.n	8000322 <main+0x192>
    }
    else if(status == 0x02)
 80002f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80002f8:	2b02      	cmp	r3, #2
 80002fa:	d107      	bne.n	800030c <main+0x17c>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_HIGH\n", strlen("RF24_PA_HIGH\n"), 1000);
 80002fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000300:	220d      	movs	r2, #13
 8000302:	4964      	ldr	r1, [pc, #400]	; (8000494 <main+0x304>)
 8000304:	485c      	ldr	r0, [pc, #368]	; (8000478 <main+0x2e8>)
 8000306:	f003 f821 	bl	800334c <HAL_UART_Transmit>
 800030a:	e00a      	b.n	8000322 <main+0x192>
    }
    else if(status == 0x03)
 800030c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000310:	2b03      	cmp	r3, #3
 8000312:	d106      	bne.n	8000322 <main+0x192>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 8000314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000318:	220c      	movs	r2, #12
 800031a:	495f      	ldr	r1, [pc, #380]	; (8000498 <main+0x308>)
 800031c:	4856      	ldr	r0, [pc, #344]	; (8000478 <main+0x2e8>)
 800031e:	f003 f815 	bl	800334c <HAL_UART_Transmit>
    }

    status = getChannel();
 8000322:	f000 fc45 	bl	8000bb0 <getChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 800032c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000330:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000334:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	4613      	mov	r3, r2
 800033c:	4a57      	ldr	r2, [pc, #348]	; (800049c <main+0x30c>)
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	f003 f9c4 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff01 	bl	8000150 <strlen>
 800034e:	4603      	mov	r3, r0
 8000350:	b29a      	uxth	r2, r3
 8000352:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800035a:	4847      	ldr	r0, [pc, #284]	; (8000478 <main+0x2e8>)
 800035c:	f002 fff6 	bl	800334c <HAL_UART_Transmit>

    status = getDataRate();
 8000360:	f000 fe4e 	bl	8001000 <getDataRate>
 8000364:	4603      	mov	r3, r0
 8000366:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 800036a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800036e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000372:	4a4b      	ldr	r2, [pc, #300]	; (80004a0 <main+0x310>)
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	f003 f9a9 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800037a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fee6 	bl	8000150 <strlen>
 8000384:	4603      	mov	r3, r0
 8000386:	b29a      	uxth	r2, r3
 8000388:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800038c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000390:	4839      	ldr	r0, [pc, #228]	; (8000478 <main+0x2e8>)
 8000392:	f002 ffdb 	bl	800334c <HAL_UART_Transmit>

    if(status == 0x02)
 8000396:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800039a:	2b02      	cmp	r3, #2
 800039c:	d107      	bne.n	80003ae <main+0x21e>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 800039e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a2:	220d      	movs	r2, #13
 80003a4:	493f      	ldr	r1, [pc, #252]	; (80004a4 <main+0x314>)
 80003a6:	4834      	ldr	r0, [pc, #208]	; (8000478 <main+0x2e8>)
 80003a8:	f002 ffd0 	bl	800334c <HAL_UART_Transmit>
 80003ac:	e012      	b.n	80003d4 <main+0x244>
    }
    else if(status == 0x01)
 80003ae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d107      	bne.n	80003c6 <main+0x236>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_2MBPS\n", strlen("RF24_2MBPS\n"), 1000);
 80003b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ba:	220b      	movs	r2, #11
 80003bc:	493a      	ldr	r1, [pc, #232]	; (80004a8 <main+0x318>)
 80003be:	482e      	ldr	r0, [pc, #184]	; (8000478 <main+0x2e8>)
 80003c0:	f002 ffc4 	bl	800334c <HAL_UART_Transmit>
 80003c4:	e006      	b.n	80003d4 <main+0x244>
    }
    else
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 80003c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ca:	220b      	movs	r2, #11
 80003cc:	4937      	ldr	r1, [pc, #220]	; (80004ac <main+0x31c>)
 80003ce:	482a      	ldr	r0, [pc, #168]	; (8000478 <main+0x2e8>)
 80003d0:	f002 ffbc 	bl	800334c <HAL_UART_Transmit>
    }

    status = getPayloadSize();
 80003d4:	f000 fbf4 	bl	8000bc0 <getPayloadSize>
 80003d8:	4603      	mov	r3, r0
 80003da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getPayloadSize: %d\n", status);
 80003de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80003e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80003e6:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <main+0x320>)
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	f003 f96f 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff feac 	bl	8000150 <strlen>
 80003f8:	4603      	mov	r3, r0
 80003fa:	b29a      	uxth	r2, r3
 80003fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000404:	481c      	ldr	r0, [pc, #112]	; (8000478 <main+0x2e8>)
 8000406:	f002 ffa1 	bl	800334c <HAL_UART_Transmit>

    status = getCRCLength();
 800040a:	f000 fe16 	bl	800103a <getCRCLength>
 800040e:	4603      	mov	r3, r0
 8000410:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 8000414:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000418:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800041c:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <main+0x324>)
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	f003 f954 	bl	80036cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe91 	bl	8000150 <strlen>
 800042e:	4603      	mov	r3, r0
 8000430:	b29a      	uxth	r2, r3
 8000432:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	480f      	ldr	r0, [pc, #60]	; (8000478 <main+0x2e8>)
 800043c:	f002 ff86 	bl	800334c <HAL_UART_Transmit>

    if(status == 0x00)
 8000440:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000444:	2b00      	cmp	r3, #0
 8000446:	d107      	bne.n	8000458 <main+0x2c8>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_DISABLED\n", strlen("RF24_CRC_DISABLED\n"), 1000);
 8000448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044c:	2212      	movs	r2, #18
 800044e:	491a      	ldr	r1, [pc, #104]	; (80004b8 <main+0x328>)
 8000450:	4809      	ldr	r0, [pc, #36]	; (8000478 <main+0x2e8>)
 8000452:	f002 ff7b 	bl	800334c <HAL_UART_Transmit>
 8000456:	e042      	b.n	80004de <main+0x34e>
    }
    else if(status == 0x01)
 8000458:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800045c:	2b01      	cmp	r3, #1
 800045e:	d133      	bne.n	80004c8 <main+0x338>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_8\n", strlen("RF24_CRC_8\n"), 1000);
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	220b      	movs	r2, #11
 8000466:	4915      	ldr	r1, [pc, #84]	; (80004bc <main+0x32c>)
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <main+0x2e8>)
 800046a:	f002 ff6f 	bl	800334c <HAL_UART_Transmit>
 800046e:	e036      	b.n	80004de <main+0x34e>
 8000470:	08003fec 	.word	0x08003fec
 8000474:	08003ff0 	.word	0x08003ff0
 8000478:	200000e4 	.word	0x200000e4
 800047c:	08004000 	.word	0x08004000
 8000480:	08004008 	.word	0x08004008
 8000484:	08004014 	.word	0x08004014
 8000488:	08004028 	.word	0x08004028
 800048c:	08004040 	.word	0x08004040
 8000490:	08004050 	.word	0x08004050
 8000494:	08004060 	.word	0x08004060
 8000498:	08004070 	.word	0x08004070
 800049c:	08004080 	.word	0x08004080
 80004a0:	0800409c 	.word	0x0800409c
 80004a4:	080040b4 	.word	0x080040b4
 80004a8:	080040c4 	.word	0x080040c4
 80004ac:	080040d0 	.word	0x080040d0
 80004b0:	080040dc 	.word	0x080040dc
 80004b4:	080040f0 	.word	0x080040f0
 80004b8:	08004108 	.word	0x08004108
 80004bc:	0800411c 	.word	0x0800411c
 80004c0:	e8f0f0e2 	.word	0xe8f0f0e2
 80004c4:	000000e8 	.word	0x000000e8
    }
    else if(status == 0x02)
 80004c8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d106      	bne.n	80004de <main+0x34e>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 80004d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d4:	220c      	movs	r2, #12
 80004d6:	492e      	ldr	r1, [pc, #184]	; (8000590 <main+0x400>)
 80004d8:	482e      	ldr	r0, [pc, #184]	; (8000594 <main+0x404>)
 80004da:	f002 ff37 	bl	800334c <HAL_UART_Transmit>
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////


    maskIRQ(true, true, true); // маскируем прерывания
 80004de:	2201      	movs	r2, #1
 80004e0:	2101      	movs	r1, #1
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 fc6a 	bl	8000dbc <maskIRQ>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ///////////////////////////////////// ПЕРЕДАЧА /////////////////////////////////////////////
	 	  uint8_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 80004e8:	2300      	movs	r3, #0
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	619a      	str	r2, [r3, #24]
	 	  nrf_data[0] = 77;
 80004fe:	234d      	movs	r3, #77	; 0x4d
 8000500:	703b      	strb	r3, [r7, #0]
	 	  nrf_data[1] = 86;
 8000502:	2356      	movs	r3, #86	; 0x56
 8000504:	707b      	strb	r3, [r7, #1]
	 	  nrf_data[2] = 97;
 8000506:	2361      	movs	r3, #97	; 0x61
 8000508:	70bb      	strb	r3, [r7, #2]

	 	  uint8_t remsg = 0; // переменная для приёма байта пришедшего вместе с ответом
 800050a:	2300      	movs	r3, #0
 800050c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	 	  if(write(&nrf_data, strlen((const char*)nrf_data))) // отправляем данные
 8000510:	463b      	mov	r3, r7
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe1c 	bl	8000150 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b2da      	uxtb	r2, r3
 800051c:	463b      	mov	r3, r7
 800051e:	4611      	mov	r1, r2
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fbfe 	bl	8000d22 <write>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d026      	beq.n	800057a <main+0x3ea>
	 	  {
	 		if(isAckPayloadAvailable()) // проверяем пришло ли что-то вместе с ответом
 800052c:	f000 fce8 	bl	8000f00 <isAckPayloadAvailable>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d028      	beq.n	8000588 <main+0x3f8>
	 		{
	 			read(&remsg, sizeof(remsg));
 8000536:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800053a:	2101      	movs	r1, #1
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fc6a 	bl	8000e16 <read>
	 			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <main+0x408>)
 8000548:	f001 fa6c 	bl	8001a24 <HAL_GPIO_TogglePin>
	 			snprintf(str, 64, "Ack: %d\n", remsg);
 800054c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000550:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000554:	4a11      	ldr	r2, [pc, #68]	; (800059c <main+0x40c>)
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	f003 f8b8 	bl	80036cc <sniprintf>
	 			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800055c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fdf5 	bl	8000150 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x404>)
 8000574:	f002 feea 	bl	800334c <HAL_UART_Transmit>
 8000578:	e006      	b.n	8000588 <main+0x3f8>
	 		}
	 	  }
	 	  else HAL_UART_Transmit(&huart1, (uint8_t*)"Not write\n", strlen("Not write\n"), 1000);
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	220a      	movs	r2, #10
 8000580:	4907      	ldr	r1, [pc, #28]	; (80005a0 <main+0x410>)
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <main+0x404>)
 8000584:	f002 fee2 	bl	800334c <HAL_UART_Transmit>

	 	  HAL_Delay(100);
 8000588:	2064      	movs	r0, #100	; 0x64
 800058a:	f000 ffab 	bl	80014e4 <HAL_Delay>
  {
 800058e:	e7ab      	b.n	80004e8 <main+0x358>
 8000590:	08004128 	.word	0x08004128
 8000594:	200000e4 	.word	0x200000e4
 8000598:	40011000 	.word	0x40011000
 800059c:	08004138 	.word	0x08004138
 80005a0:	08004144 	.word	0x08004144

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b090      	sub	sp, #64	; 0x40
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2228      	movs	r2, #40	; 0x28
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 f882 	bl	80036bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fa4b 	bl	8001a88 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005f8:	f000 f902 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fcb8 	bl	8001f8c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000622:	f000 f8ed 	bl	8000800 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3740      	adds	r7, #64	; 0x40
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_SPI1_Init+0x64>)
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_SPI1_Init+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_SPI1_Init+0x64>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_SPI1_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_SPI1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_SPI1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_SPI1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_SPI1_Init+0x64>)
 800065c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000660:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_SPI1_Init+0x64>)
 8000664:	2210      	movs	r2, #16
 8000666:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_SPI1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_SPI1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_SPI1_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_SPI1_Init+0x64>)
 800067c:	220a      	movs	r2, #10
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_SPI1_Init+0x64>)
 8000682:	f001 fe41 	bl	8002308 <HAL_SPI_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800068c:	f000 f8b8 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000008c 	.word	0x2000008c
 8000698:	40013000 	.word	0x40013000

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART1_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f002 fdea 	bl	80032ac <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f88f 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000e4 	.word	0x200000e4
 80006ec:	40013800 	.word	0x40013800

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000704:	4b31      	ldr	r3, [pc, #196]	; (80007cc <MX_GPIO_Init+0xdc>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a30      	ldr	r2, [pc, #192]	; (80007cc <MX_GPIO_Init+0xdc>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <MX_GPIO_Init+0xdc>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0310 	and.w	r3, r3, #16
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0xdc>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_GPIO_Init+0xdc>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xdc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0320 	and.w	r3, r3, #32
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xdc>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a24      	ldr	r2, [pc, #144]	; (80007cc <MX_GPIO_Init+0xdc>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_GPIO_Init+0xdc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	481f      	ldr	r0, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xe0>)
 8000754:	f001 f94e 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2118      	movs	r1, #24
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <MX_GPIO_Init+0xe4>)
 800075e:	f001 f949 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4815      	ldr	r0, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xe0>)
 800077c:	f000 ffb6 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000780:	2304      	movs	r3, #4
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_GPIO_Init+0xe8>)
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <MX_GPIO_Init+0xe4>)
 8000794:	f000 ffaa 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000798:	2318      	movs	r3, #24
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4809      	ldr	r0, [pc, #36]	; (80007d4 <MX_GPIO_Init+0xe4>)
 80007b0:	f000 ff9c 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	2008      	movs	r0, #8
 80007ba:	f000 ff6c 	bl	8001696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007be:	2008      	movs	r0, #8
 80007c0:	f000 ff85 	bl	80016ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40011000 	.word	0x40011000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	10210000 	.word	0x10210000

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 fe5d 	bl	80014ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40000800 	.word	0x40000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <DWT_Init+0x24>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <DWT_Init+0x24>)
 8000816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081a:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <DWT_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <DWT_Init+0x28>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	e000edfc 	.word	0xe000edfc
 8000834:	e0001000 	.word	0xe0001000

08000838 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <delay_us+0x3c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <delay_us+0x40>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9a      	lsrs	r2, r3, #18
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	fb02 f303 	mul.w	r3, r2, r3
 8000852:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <delay_us+0x44>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 800085a:	bf00      	nop
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <delay_us+0x44>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	429a      	cmp	r2, r3
 8000864:	d8fa      	bhi.n	800085c <delay_us+0x24>
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000000 	.word	0x20000000
 8000878:	431bde83 	.word	0x431bde83
 800087c:	e0001000 	.word	0xe0001000

08000880 <csn>:

void csn(uint8_t level)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	461a      	mov	r2, r3
 800088e:	2110      	movs	r1, #16
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <csn+0x24>)
 8000892:	f001 f8af 	bl	80019f4 <HAL_GPIO_WritePin>
	delay_us(5);
 8000896:	2005      	movs	r0, #5
 8000898:	f7ff ffce 	bl	8000838 <delay_us>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010800 	.word	0x40010800

080008a8 <ce>:

void ce(uint8_t level)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	461a      	mov	r2, r3
 80008b6:	2108      	movs	r1, #8
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <ce+0x20>)
 80008ba:	f001 f89b 	bl	80019f4 <HAL_GPIO_WritePin>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010800 	.word	0x40010800

080008cc <read_register>:

uint8_t read_register(uint8_t reg)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 031f 	and.w	r3, r3, #31
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ffcb 	bl	8000880 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 80008ea:	f107 020e 	add.w	r2, r7, #14
 80008ee:	f107 010f 	add.w	r1, r7, #15
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <read_register+0x58>)
 80008fc:	f001 ffe3 	bl	80028c6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 8000900:	f107 020e 	add.w	r2, r7, #14
 8000904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	21ff      	movs	r1, #255	; 0xff
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <read_register+0x58>)
 8000910:	f001 ffd9 	bl	80028c6 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff ffb3 	bl	8000880 <csn>
	return dt;
 800091a:	7bbb      	ldrb	r3, [r7, #14]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000008c 	.word	0x2000008c

08000928 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 031f 	and.w	r3, r3, #31
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	b2db      	uxtb	r3, r3
 800094a:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ff97 	bl	8000880 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000952:	f107 020f 	add.w	r2, r7, #15
 8000956:	f107 010e 	add.w	r1, r7, #14
 800095a:	2364      	movs	r3, #100	; 0x64
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <write_registerMy+0x5c>)
 8000962:	f001 ffb0 	bl	80028c6 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	b29a      	uxth	r2, r3
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	6839      	ldr	r1, [r7, #0]
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <write_registerMy+0x5c>)
 8000970:	f001 fd4e 	bl	8002410 <HAL_SPI_Transmit>
	csn(HIGH);
 8000974:	2001      	movs	r0, #1
 8000976:	f7ff ff83 	bl	8000880 <csn>
	return status;
 800097a:	7bfb      	ldrb	r3, [r7, #15]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000008c 	.word	0x2000008c

08000988 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af02      	add	r7, sp, #8
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 031f 	and.w	r3, r3, #31
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ff67 	bl	8000880 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80009b2:	f107 020f 	add.w	r2, r7, #15
 80009b6:	f107 010e 	add.w	r1, r7, #14
 80009ba:	2364      	movs	r3, #100	; 0x64
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <write_register+0x5c>)
 80009c2:	f001 ff80 	bl	80028c6 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80009c6:	1db9      	adds	r1, r7, #6
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	2201      	movs	r2, #1
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <write_register+0x5c>)
 80009d0:	f001 fd1e 	bl	8002410 <HAL_SPI_Transmit>
	csn(HIGH);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff53 	bl	8000880 <csn>
	return status;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000008c 	.word	0x2000008c

080009e8 <write_payload>:

uint8_t write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
 80009f4:	4613      	mov	r3, r2
 80009f6:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
	const uint8_t* current = (const uint8_t*)buf;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	613b      	str	r3, [r7, #16]
	uint8_t addr = writeType;
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	73bb      	strb	r3, [r7, #14]

	data_len = rf24_min(data_len, payload_size);
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <write_payload+0x98>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	bf28      	it	cs
 8000a0e:	4613      	movcs	r3, r2
 8000a10:	70fb      	strb	r3, [r7, #3]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <write_payload+0x9c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <write_payload+0x36>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e004      	b.n	8000a28 <write_payload+0x40>
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <write_payload+0x98>)
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	75fb      	strb	r3, [r7, #23]

	csn(LOW);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ff28 	bl	8000880 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000a30:	f107 020f 	add.w	r2, r7, #15
 8000a34:	f107 010e 	add.w	r1, r7, #14
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <write_payload+0xa0>)
 8000a40:	f001 ff41 	bl	80028c6 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 100);
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	2364      	movs	r3, #100	; 0x64
 8000a4a:	6939      	ldr	r1, [r7, #16]
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <write_payload+0xa0>)
 8000a4e:	f001 fcdf 	bl	8002410 <HAL_SPI_Transmit>

	while(blank_len--)
 8000a52:	e008      	b.n	8000a66 <write_payload+0x7e>
	{
		uint8_t empt = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	737b      	strb	r3, [r7, #13]
		HAL_SPI_Transmit(&hspi1, &empt, 1, 100);
 8000a58:	f107 010d 	add.w	r1, r7, #13
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <write_payload+0xa0>)
 8000a62:	f001 fcd5 	bl	8002410 <HAL_SPI_Transmit>
	while(blank_len--)
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	75fa      	strb	r2, [r7, #23]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1f1      	bne.n	8000a54 <write_payload+0x6c>
	}

	csn(HIGH);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff ff05 	bl	8000880 <csn>
	return status;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000012d 	.word	0x2000012d
 8000a84:	2000012e 	.word	0x2000012e
 8000a88:	2000008c 	.word	0x2000008c

08000a8c <read_payload>:

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <read_payload+0x90>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	78fa      	ldrb	r2, [r7, #3]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d902      	bls.n	8000ab0 <read_payload+0x24>
	{
		data_len = payload_size;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <read_payload+0x90>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <read_payload+0x94>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <read_payload+0x30>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e004      	b.n	8000ac6 <read_payload+0x3a>
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <read_payload+0x90>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000ac8:	2361      	movs	r3, #97	; 0x61
 8000aca:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fed7 	bl	8000880 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000ad2:	f107 010f 	add.w	r1, r7, #15
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <read_payload+0x98>)
 8000adc:	f001 fc98 	bl	8002410 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	2364      	movs	r3, #100	; 0x64
 8000ae6:	6939      	ldr	r1, [r7, #16]
 8000ae8:	480e      	ldr	r0, [pc, #56]	; (8000b24 <read_payload+0x98>)
 8000aea:	f001 fdd4 	bl	8002696 <HAL_SPI_Receive>

	while(blank_len--)
 8000aee:	e008      	b.n	8000b02 <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000af4:	f107 010e 	add.w	r1, r7, #14
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	2201      	movs	r2, #1
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <read_payload+0x98>)
 8000afe:	f001 fdca 	bl	8002696 <HAL_SPI_Receive>
	while(blank_len--)
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	1e5a      	subs	r2, r3, #1
 8000b06:	75fa      	strb	r2, [r7, #23]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f1      	bne.n	8000af0 <read_payload+0x64>
	}

	csn(HIGH);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff feb7 	bl	8000880 <csn>
	return status;
 8000b12:	7dbb      	ldrb	r3, [r7, #22]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000012d 	.word	0x2000012d
 8000b20:	2000012e 	.word	0x2000012e
 8000b24:	2000008c 	.word	0x2000008c

08000b28 <flush_rx>:

uint8_t flush_rx(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000b2c:	20e2      	movs	r0, #226	; 0xe2
 8000b2e:	f000 f80b 	bl	8000b48 <spiTrans>
 8000b32:	4603      	mov	r3, r0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <flush_tx>:

uint8_t flush_tx(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000b3c:	20e1      	movs	r0, #225	; 0xe1
 8000b3e:	f000 f803 	bl	8000b48 <spiTrans>
 8000b42:	4603      	mov	r3, r0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff fe92 	bl	8000880 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000b5c:	f107 020f 	add.w	r2, r7, #15
 8000b60:	1df9      	adds	r1, r7, #7
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <spiTrans+0x38>)
 8000b6c:	f001 feab 	bl	80028c6 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff fe85 	bl	8000880 <csn>
	return status;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000008c 	.word	0x2000008c

08000b84 <get_status>:

uint8_t get_status(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000b88:	20ff      	movs	r0, #255	; 0xff
 8000b8a:	f7ff ffdd 	bl	8000b48 <spiTrans>
 8000b8e:	4603      	mov	r3, r0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <setChannel>:

void setChannel(uint8_t channel)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2005      	movs	r0, #5
 8000ba4:	f7ff fef0 	bl	8000988 <write_register>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <getChannel>:

uint8_t getChannel()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	return read_register(RF_CH);
 8000bb4:	2005      	movs	r0, #5
 8000bb6:	f7ff fe89 	bl	80008cc <read_register>
 8000bba:	4603      	mov	r3, r0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <getPayloadSize>:
{
	payload_size = rf24_min(size, 32);
}

uint8_t getPayloadSize(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	return payload_size;
 8000bc4:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <getPayloadSize+0x10>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	2000012d 	.word	0x2000012d

08000bd4 <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <NRF_Init+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <NRF_Init+0xdc>)
 8000be6:	2220      	movs	r2, #32
 8000be8:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <NRF_Init+0xe0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <NRF_Init+0xe4>)
 8000bf2:	2205      	movs	r2, #5
 8000bf4:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <NRF_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fe53 	bl	80008a8 <ce>
	csn(HIGH);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fe3c 	bl	8000880 <csn>
	HAL_Delay(5);
 8000c08:	2005      	movs	r0, #5
 8000c0a:	f000 fc6b 	bl	80014e4 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000c0e:	210c      	movs	r1, #12
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff feb9 	bl	8000988 <write_register>
	setRetries(5, 15);
 8000c16:	210f      	movs	r1, #15
 8000c18:	2005      	movs	r0, #5
 8000c1a:	f000 fa36 	bl	800108a <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 f97d 	bl	8000f1e <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8000c24:	2002      	movs	r0, #2
 8000c26:	f000 f9ab 	bl	8000f80 <setDataRate>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <NRF_Init+0x62>
	{
		p_variant = true;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <NRF_Init+0xd8>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8000c36:	2006      	movs	r0, #6
 8000c38:	f7ff fe48 	bl	80008cc <read_register>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f99d 	bl	8000f80 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8000c46:	f000 f91b 	bl	8000e80 <toggle_features>
	write_register(FEATURE, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	201d      	movs	r0, #29
 8000c4e:	f7ff fe9b 	bl	8000988 <write_register>
	write_register(DYNPD, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	201c      	movs	r0, #28
 8000c56:	f7ff fe97 	bl	8000988 <write_register>
	dynamic_payloads_enabled = false;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <NRF_Init+0xe0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000c60:	2170      	movs	r1, #112	; 0x70
 8000c62:	2007      	movs	r0, #7
 8000c64:	f7ff fe90 	bl	8000988 <write_register>
	setChannel(76);
 8000c68:	204c      	movs	r0, #76	; 0x4c
 8000c6a:	f7ff ff93 	bl	8000b94 <setChannel>
	flush_rx();
 8000c6e:	f7ff ff5b 	bl	8000b28 <flush_rx>
	flush_tx();
 8000c72:	f7ff ff61 	bl	8000b38 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8000c76:	f000 f838 	bl	8000cea <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fe26 	bl	80008cc <read_register>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fe7c 	bl	8000988 <write_register>
	return (setup != 0 && setup != 0xff);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <NRF_Init+0xcc>
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2bff      	cmp	r3, #255	; 0xff
 8000c9a:	d001      	beq.n	8000ca0 <NRF_Init+0xcc>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <NRF_Init+0xce>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000012c 	.word	0x2000012c
 8000cb0:	2000012d 	.word	0x2000012d
 8000cb4:	2000012e 	.word	0x2000012e
 8000cb8:	20000135 	.word	0x20000135
 8000cbc:	20000130 	.word	0x20000130

08000cc0 <isChipConnected>:

bool isChipConnected()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f7ff fe00 	bl	80008cc <read_register>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <isChipConnected+0x20>
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d801      	bhi.n	8000ce0 <isChipConnected+0x20>
	{
		return true;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <isChipConnected+0x22>
	}

	return false;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff fdeb 	bl	80008cc <read_register>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d10a      	bne.n	8000d1a <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fe3a 	bl	8000988 <write_register>
		HAL_Delay(5);
 8000d14:	2005      	movs	r0, #5
 8000d16:	f000 fbe5 	bl	80014e4 <HAL_Delay>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <write>:


//Similar to the previous write, clears the interrupt flags
bool write(const void* buf, uint8_t len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70fb      	strb	r3, [r7, #3]
	startFastWrite(buf, len, 1, 1);
 8000d2e:	78f9      	ldrb	r1, [r7, #3]
 8000d30:	2301      	movs	r3, #1
 8000d32:	2201      	movs	r2, #1
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f81f 	bl	8000d78 <startFastWrite>

	while(!(get_status() & ((1 << TX_DS) | (1 << MAX_RT))))
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ff22 	bl	8000b84 <get_status>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f8      	beq.n	8000d3c <write+0x1a>
	{}

	ce(LOW);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fdac 	bl	80008a8 <ce>
	uint8_t status = write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8000d50:	2170      	movs	r1, #112	; 0x70
 8000d52:	2007      	movs	r0, #7
 8000d54:	f7ff fe18 	bl	8000988 <write_register>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]

	if(status & (1 << MAX_RT))
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <write+0x4c>
	{
		flush_tx(); //Only going to be 1 packet int the FIFO at a time using this method, so just flush
 8000d66:	f7ff fee7 	bl	8000b38 <flush_tx>
		return 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <write+0x4e>
	}

	//TX OK 1 or 0
	return 1;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <startFastWrite>:

void startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	4608      	mov	r0, r1
 8000d82:	4611      	mov	r1, r2
 8000d84:	461a      	mov	r2, r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	70fb      	strb	r3, [r7, #3]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	70bb      	strb	r3, [r7, #2]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	707b      	strb	r3, [r7, #1]
	write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 8000d92:	78bb      	ldrb	r3, [r7, #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <startFastWrite+0x24>
 8000d98:	22b0      	movs	r2, #176	; 0xb0
 8000d9a:	e000      	b.n	8000d9e <startFastWrite+0x26>
 8000d9c:	22a0      	movs	r2, #160	; 0xa0
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fe20 	bl	80009e8 <write_payload>

	if(startTx)
 8000da8:	787b      	ldrb	r3, [r7, #1]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <startFastWrite+0x3c>
	{
		ce(HIGH);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fd7a 	bl	80008a8 <ce>
	}
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <maskIRQ>:

void maskIRQ(bool tx, bool fail, bool rx)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	71bb      	strb	r3, [r7, #6]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	717b      	strb	r3, [r7, #5]
	uint8_t config = read_register(NRF_CONFIG);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fd7c 	bl	80008cc <read_register>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dde:	73fb      	strb	r3, [r7, #15]
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	015b      	lsls	r3, r3, #5
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	b25a      	sxtb	r2, r3
 8000df0:	797b      	ldrb	r3, [r7, #5]
 8000df2:	019b      	lsls	r3, r3, #6
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b25a      	sxtb	r2, r3
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	73fb      	strb	r3, [r7, #15]
	write_register(NRF_CONFIG, config);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4619      	mov	r1, r3
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fdbd 	bl	8000988 <write_register>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <read>:

	return 0;
}

void read(void* buf, uint8_t len)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fe30 	bl	8000a8c <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 8000e2c:	2170      	movs	r1, #112	; 0x70
 8000e2e:	2007      	movs	r0, #7
 8000e30:	f7ff fdaa 	bl	8000988 <write_register>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <openWritingPipe>:
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
}

void openWritingPipe(uint64_t value)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <openWritingPipe+0x3c>)
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	200a      	movs	r0, #10
 8000e50:	f7ff fd6a 	bl	8000928 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <openWritingPipe+0x3c>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff fd63 	bl	8000928 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <openWritingPipe+0x40>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	4619      	mov	r1, r3
 8000e68:	2011      	movs	r0, #17
 8000e6a:	f7ff fd8d 	bl	8000988 <write_register>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000135 	.word	0x20000135
 8000e7c:	2000012d 	.word	0x2000012d

08000e80 <toggle_features>:
{
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
}

void toggle_features(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 8000e86:	2350      	movs	r3, #80	; 0x50
 8000e88:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fcf8 	bl	8000880 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8000e90:	1df9      	adds	r1, r7, #7
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	2201      	movs	r2, #1
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <toggle_features+0x3c>)
 8000e9a:	f001 fab9 	bl	8002410 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2173      	movs	r1, #115	; 0x73
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <toggle_features+0x3c>)
 8000ea8:	f001 fab2 	bl	8002410 <HAL_SPI_Transmit>
	csn(HIGH);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fce7 	bl	8000880 <csn>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000008c 	.word	0x2000008c

08000ec0 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 8000ec4:	201d      	movs	r0, #29
 8000ec6:	f7ff fd01 	bl	80008cc <read_register>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f043 0306 	orr.w	r3, r3, #6
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	201d      	movs	r0, #29
 8000ed6:	f7ff fd57 	bl	8000988 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 8000eda:	201c      	movs	r0, #28
 8000edc:	f7ff fcf6 	bl	80008cc <read_register>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f043 0303 	orr.w	r3, r3, #3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	201c      	movs	r0, #28
 8000eec:	f7ff fd4c 	bl	8000988 <write_register>
	dynamic_payloads_enabled = true;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <enableAckPayload+0x3c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000012e 	.word	0x2000012e

08000f00 <isAckPayloadAvailable>:
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
	csn(HIGH);
}

bool isAckPayloadAvailable(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	return !(read_register(FIFO_STATUS) & (1 << RX_EMPTY));
 8000f04:	2017      	movs	r0, #23
 8000f06:	f7ff fce1 	bl	80008cc <read_register>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf0c      	ite	eq
 8000f14:	2301      	moveq	r3, #1
 8000f16:	2300      	movne	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fccf 	bl	80008cc <read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f023 0307 	bic.w	r3, r3, #7
 8000f34:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d902      	bls.n	8000f42 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	e004      	b.n	8000f4c <setPALevel+0x2e>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3301      	adds	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	4619      	mov	r1, r3
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f7ff fd15 	bl	8000988 <write_register>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <getPALevel>:

uint8_t getPALevel(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff fcae 	bl	80008cc <read_register>
 8000f70:	4603      	mov	r3, r0
 8000f72:	105b      	asrs	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	b2db      	uxtb	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f7ff fc9c 	bl	80008cc <read_register>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f9e:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <setDataRate+0x7c>)
 8000fa2:	2255      	movs	r2, #85	; 0x55
 8000fa4:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d107      	bne.n	8000fbc <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <setDataRate+0x7c>)
 8000fb6:	229b      	movs	r2, #155	; 0x9b
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e009      	b.n	8000fd0 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <setDataRate+0x7c>)
 8000fcc:	2241      	movs	r2, #65	; 0x41
 8000fce:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f7ff fcd7 	bl	8000988 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f7ff fc76 	bl	80008cc <read_register>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8000fe4:	7b7a      	ldrb	r2, [r7, #13]
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d101      	bne.n	8000ff0 <setDataRate+0x70>
	{
		result = true;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000136 	.word	0x20000136

08001000 <getDataRate>:

rf24_datarate_e getDataRate(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	rf24_datarate_e result ;
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001006:	2006      	movs	r0, #6
 8001008:	f7ff fc60 	bl	80008cc <read_register>
 800100c:	4603      	mov	r3, r0
 800100e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001012:	71bb      	strb	r3, [r7, #6]

	// switch uses RAM (evil!)
	// Order matters in our case below
	if(dr == (1 << RF_DR_LOW))
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	2b20      	cmp	r3, #32
 8001018:	d102      	bne.n	8001020 <getDataRate+0x20>
	{
		result = RF24_250KBPS;
 800101a:	2302      	movs	r3, #2
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	e007      	b.n	8001030 <getDataRate+0x30>
	}
	else if(dr == (1 << RF_DR_HIGH))
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b08      	cmp	r3, #8
 8001024:	d102      	bne.n	800102c <getDataRate+0x2c>
	{
		result = RF24_2MBPS;
 8001026:	2301      	movs	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	e001      	b.n	8001030 <getDataRate+0x30>
	}
	else
	{
		result = RF24_1MBPS;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <getCRCLength>:

	write_register(NRF_CONFIG, config);
}

rf24_crclength_e getCRCLength(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
	rf24_crclength_e result = RF24_CRC_DISABLED;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]

	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fc41 	bl	80008cc <read_register>
 800104a:	4603      	mov	r3, r0
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	71bb      	strb	r3, [r7, #6]
	uint8_t AA = read_register(EN_AA);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fc3a 	bl	80008cc <read_register>
 8001058:	4603      	mov	r3, r0
 800105a:	717b      	strb	r3, [r7, #5]

	if(config & (1 << EN_CRC) || AA)
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <getCRCLength+0x32>
 8001066:	797b      	ldrb	r3, [r7, #5]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d009      	beq.n	8001080 <getCRCLength+0x46>
	{
		if(config & (1 << CRCO))
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <getCRCLength+0x42>
		  result = RF24_CRC_16;
 8001076:	2302      	movs	r3, #2
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e001      	b.n	8001080 <getCRCLength+0x46>
		else
		  result = RF24_CRC_8;
 800107c:	2301      	movs	r3, #1
 800107e:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 8001080:	79fb      	ldrb	r3, [r7, #7]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	460a      	mov	r2, r1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	4613      	mov	r3, r2
 8001098:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff fc68 	bl	8000988 <write_register>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_MspInit+0x5c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_MspInit+0x5c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_MspInit+0x5c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_MspInit+0x5c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_MspInit+0x60>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_MspInit+0x60>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000

08001124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d12f      	bne.n	80011a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800114a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 8001188:	f000 fab0 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 80011a0:	f000 faa4 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40013000 	.word	0x40013000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_UART_MspInit+0x8c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d131      	bne.n	800123c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800120c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <HAL_UART_MspInit+0x94>)
 800121e:	f000 fa65 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_UART_MspInit+0x94>)
 8001238:	f000 fa58 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40013800 	.word	0x40013800
 8001248:	40021000 	.word	0x40021000
 800124c:	40010800 	.word	0x40010800

08001250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <HAL_InitTick+0xe8>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a33      	ldr	r2, [pc, #204]	; (8001338 <HAL_InitTick+0xe8>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <HAL_InitTick+0xe8>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800127e:	f107 0210 	add.w	r2, r7, #16
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 ffef 	bl	800226c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001298:	f000 ffc0 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 800129c:	6378      	str	r0, [r7, #52]	; 0x34
 800129e:	e004      	b.n	80012aa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012a0:	f000 ffbc 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80012a4:	4603      	mov	r3, r0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_InitTick+0xec>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	3b01      	subs	r3, #1
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_InitTick+0xf0>)
 80012ba:	4a22      	ldr	r2, [pc, #136]	; (8001344 <HAL_InitTick+0xf4>)
 80012bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_InitTick+0xf0>)
 80012c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_InitTick+0xf0>)
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_InitTick+0xf0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_InitTick+0xf0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_InitTick+0xf0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <HAL_InitTick+0xf0>)
 80012e0:	f001 fd9a 	bl	8002e18 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11b      	bne.n	800132a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <HAL_InitTick+0xf0>)
 80012f4:	f001 fde8 	bl	8002ec8 <HAL_TIM_Base_Start_IT>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001302:	2b00      	cmp	r3, #0
 8001304:	d111      	bne.n	800132a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001306:	201e      	movs	r0, #30
 8001308:	f000 f9e1 	bl	80016ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	d808      	bhi.n	8001324 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001312:	2200      	movs	r2, #0
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	201e      	movs	r0, #30
 8001318:	f000 f9bd 	bl	8001696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0xf8>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e002      	b.n	800132a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800132a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800132e:	4618      	mov	r0, r3
 8001330:	3738      	adds	r7, #56	; 0x38
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	431bde83 	.word	0x431bde83
 8001340:	20000138 	.word	0x20000138
 8001344:	40000800 	.word	0x40000800
 8001348:	20000004 	.word	0x20000004

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 800139e:	2004      	movs	r0, #4
 80013a0:	f000 fb5a 	bl	8001a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM4_IRQHandler+0x10>)
 80013ae:	f001 fddd 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000138 	.word	0x20000138

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f002 f92e 	bl	800364c <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20005000 	.word	0x20005000
 800141c:	00000400 	.word	0x00000400
 8001420:	20000180 	.word	0x20000180
 8001424:	20000198 	.word	0x20000198

08001428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff fff8 	bl	8001428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800143a:	490c      	ldr	r1, [pc, #48]	; (800146c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <LoopFillZerobss+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001450:	4c09      	ldr	r4, [pc, #36]	; (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f002 f8fb 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7fe fe95 	bl	8000190 <main>
  bx lr
 8001466:	4770      	bx	lr
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001470:	080041b8 	.word	0x080041b8
  ldr r2, =_sbss
 8001474:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001478:	20000198 	.word	0x20000198

0800147c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f8f5 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff feda 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fe10 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000184 	.word	0x20000184

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000184 	.word	0x20000184

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffe0 	bl	80014d0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4906      	ldr	r1, [pc, #24]	; (80015c4 <__NVIC_EnableIRQ+0x34>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff4f 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff64 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ffb2 	bl	800161c <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff81 	bl	80015c8 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff57 	bl	8001590 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e169      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8158 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a9a      	ldr	r2, [pc, #616]	; (800198c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a92      	ldr	r2, [pc, #584]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a90      	ldr	r2, [pc, #576]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a79      	ldr	r2, [pc, #484]	; (80019a0 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b1 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491e      	ldr	r1, [pc, #120]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800196c:	4013      	ands	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d021      	beq.n	80019c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x2e2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae8e 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	; 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	041a      	lsls	r2, r3, #16
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43d9      	mvns	r1, r3
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	400b      	ands	r3, r1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	611a      	str	r2, [r3, #16]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fb72 	bl	8000160 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e272      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d168      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e24c      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x76>
 8001af0:	4b80      	ldr	r3, [pc, #512]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7f      	ldr	r2, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e02e      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x98>
 8001b06:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b78      	ldr	r3, [pc, #480]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xbc>
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a71      	ldr	r2, [pc, #452]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b44:	4b6b      	ldr	r3, [pc, #428]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a67      	ldr	r2, [pc, #412]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fcb4 	bl	80014d0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcb0 	bl	80014d0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e200      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe4>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fca0 	bl	80014d0 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fc9c 	bl	80014d0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1ec      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x10c>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bce:	4b49      	ldr	r3, [pc, #292]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1c0      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4939      	ldr	r1, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fc55 	bl	80014d0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fc51 	bl	80014d0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1a1      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fc34 	bl	80014d0 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fc30 	bl	80014d0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e180      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03a      	beq.n	8001d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fc14 	bl	80014d0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc10 	bl	80014d0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e160      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 fafe 	bl	80022cc <RCC_Delay>
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fbfa 	bl	80014d0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fbf6 	bl	80014d0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d908      	bls.n	8001d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e146      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42420000 	.word	0x42420000
 8001cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e9      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a6 	beq.w	8001e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a87      	ldr	r2, [pc, #540]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b85      	ldr	r3, [pc, #532]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d52:	4b7f      	ldr	r3, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7e      	ldr	r2, [pc, #504]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fbb7 	bl	80014d0 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7ff fbb3 	bl	80014d0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	; 0x64
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e103      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x312>
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x334>
 8001da2:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a69      	ldr	r2, [pc, #420]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a66      	ldr	r2, [pc, #408]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e01c      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x356>
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a5d      	ldr	r2, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a5a      	ldr	r2, [pc, #360]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a57      	ldr	r2, [pc, #348]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fb67 	bl	80014d0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff fb63 	bl	80014d0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0b1      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x37e>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fb51 	bl	80014d0 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff fb4d 	bl	80014d0 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e09b      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d061      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d146      	bne.n	8001f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fb21 	bl	80014d0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff fb1d 	bl	80014d0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e06d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4921      	ldr	r1, [pc, #132]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a19      	ldr	r1, [r3, #32]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	430b      	orrs	r3, r1
 8001ede:	491b      	ldr	r1, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff faf1 	bl	80014d0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff faed 	bl	80014d0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e03d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x46a>
 8001f10:	e035      	b.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fada 	bl	80014d0 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff fad6 	bl	80014d0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e026      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x498>
 8001f3e:	e01e      	b.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e019      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x500>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0d0      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4965      	ldr	r1, [pc, #404]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0b8      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe8:	4b59      	ldr	r3, [pc, #356]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a58      	ldr	r2, [pc, #352]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800200a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b50      	ldr	r3, [pc, #320]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	494d      	ldr	r1, [pc, #308]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d040      	beq.n	80020ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b47      	ldr	r3, [pc, #284]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e07f      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e073      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06b      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4936      	ldr	r1, [pc, #216]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800207c:	f7ff fa28 	bl	80014d0 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7ff fa24 	bl	80014d0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e053      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 020c 	and.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1eb      	bne.n	8002084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d210      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4922      	ldr	r1, [pc, #136]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e032      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4916      	ldr	r1, [pc, #88]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211a:	f000 f821 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490a      	ldr	r1, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1cc>)
 8002134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f888 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
 8002154:	08004150 	.word	0x08004150
 8002158:	20000000 	.word	0x20000000
 800215c:	20000004 	.word	0x20000004

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x30>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x36>
 800218e:	e027      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	613b      	str	r3, [r7, #16]
      break;
 8002194:	e027      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0c9b      	lsrs	r3, r3, #18
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0c5b      	lsrs	r3, r3, #17
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c2:	fb03 f202 	mul.w	r2, r3, r2
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e004      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e6:	693b      	ldr	r3, [r7, #16]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	08004168 	.word	0x08004168
 8002200:	08004178 	.word	0x08004178
 8002204:	003d0900 	.word	0x003d0900

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <HAL_RCC_GetHCLKFreq+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002220:	f7ff fff2 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4903      	ldr	r1, [pc, #12]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08004160 	.word	0x08004160

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002248:	f7ff ffde 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08004160 	.word	0x08004160

0800226c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	220f      	movs	r2, #15
 800227a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_GetClockConfig+0x58>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_RCC_GetClockConfig+0x58>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_GetClockConfig+0x58>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_RCC_GetClockConfig+0x58>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_GetClockConfig+0x5c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0207 	and.w	r2, r3, #7
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40022000 	.word	0x40022000

080022cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <RCC_Delay+0x34>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <RCC_Delay+0x38>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0a5b      	lsrs	r3, r3, #9
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e8:	bf00      	nop
  }
  while (Delay --);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	60fa      	str	r2, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <RCC_Delay+0x1c>
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000000 	.word	0x20000000
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e076      	b.n	8002408 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800232a:	d009      	beq.n	8002340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
 8002332:	e005      	b.n	8002340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fee2 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	ea42 0103 	orr.w	r1, r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	0c1a      	lsrs	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f002 0204 	and.w	r2, r2, #4
 80023e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_SPI_Transmit+0x22>
 800242e:	2302      	movs	r3, #2
 8002430:	e12d      	b.n	800268e <HAL_SPI_Transmit+0x27e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243a:	f7ff f849 	bl	80014d0 <HAL_GetTick>
 800243e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d002      	beq.n	8002456 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002450:	2302      	movs	r3, #2
 8002452:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002454:	e116      	b.n	8002684 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Transmit+0x52>
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002466:	e10d      	b.n	8002684 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2203      	movs	r2, #3
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ae:	d10f      	bne.n	80024d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f6:	d14f      	bne.n	8002598 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_Transmit+0xf6>
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d142      	bne.n	800258c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	881a      	ldrh	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800252a:	e02f      	b.n	800258c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d112      	bne.n	8002560 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	1c9a      	adds	r2, r3, #2
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	86da      	strh	r2, [r3, #54]	; 0x36
 800255e:	e015      	b.n	800258c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002560:	f7fe ffb6 	bl	80014d0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d803      	bhi.n	8002578 <HAL_SPI_Transmit+0x168>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002576:	d102      	bne.n	800257e <HAL_SPI_Transmit+0x16e>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800258a:	e07b      	b.n	8002684 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ca      	bne.n	800252c <HAL_SPI_Transmit+0x11c>
 8002596:	e050      	b.n	800263a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_SPI_Transmit+0x196>
 80025a0:	8afb      	ldrh	r3, [r7, #22]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d144      	bne.n	8002630 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025cc:	e030      	b.n	8002630 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d113      	bne.n	8002604 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	86da      	strh	r2, [r3, #54]	; 0x36
 8002602:	e015      	b.n	8002630 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002604:	f7fe ff64 	bl	80014d0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d803      	bhi.n	800261c <HAL_SPI_Transmit+0x20c>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800261a:	d102      	bne.n	8002622 <HAL_SPI_Transmit+0x212>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800262e:	e029      	b.n	8002684 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1c9      	bne.n	80025ce <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fbcc 	bl	8002ddc <SPI_EndRxTxTransaction>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e003      	b.n	8002684 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800268c:	7ffb      	ldrb	r3, [r7, #31]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b088      	sub	sp, #32
 800269a:	af02      	add	r7, sp, #8
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d002      	beq.n	80026bc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80026b6:	2302      	movs	r3, #2
 80026b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026ba:	e0fb      	b.n	80028b4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026c4:	d112      	bne.n	80026ec <HAL_SPI_Receive+0x56>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10e      	bne.n	80026ec <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2204      	movs	r2, #4
 80026d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8ef 	bl	80028c6 <HAL_SPI_TransmitReceive>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e0e8      	b.n	80028be <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_SPI_Receive+0x64>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0e1      	b.n	80028be <HAL_SPI_Receive+0x228>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002702:	f7fe fee5 	bl	80014d0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_SPI_Receive+0x7e>
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002718:	e0cc      	b.n	80028b4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2204      	movs	r2, #4
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002760:	d10f      	bne.n	8002782 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002770:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d007      	beq.n	80027a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d16a      	bne.n	800287e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027a8:	e032      	b.n	8002810 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d115      	bne.n	80027e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f103 020c 	add.w	r2, r3, #12
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027e2:	e015      	b.n	8002810 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e4:	f7fe fe74 	bl	80014d0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d803      	bhi.n	80027fc <HAL_SPI_Receive+0x166>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fa:	d102      	bne.n	8002802 <HAL_SPI_Receive+0x16c>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800280e:	e051      	b.n	80028b4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1c7      	bne.n	80027aa <HAL_SPI_Receive+0x114>
 800281a:	e035      	b.n	8002888 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d113      	bne.n	8002852 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	b292      	uxth	r2, r2
 8002836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	1c9a      	adds	r2, r3, #2
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002850:	e015      	b.n	800287e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002852:	f7fe fe3d 	bl	80014d0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d803      	bhi.n	800286a <HAL_SPI_Receive+0x1d4>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002868:	d102      	bne.n	8002870 <HAL_SPI_Receive+0x1da>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800287c:	e01a      	b.n	80028b4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1c9      	bne.n	800281c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fa53 	bl	8002d38 <SPI_EndRxTransaction>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
 80028aa:	e003      	b.n	80028b4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b08c      	sub	sp, #48	; 0x30
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x26>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e198      	b.n	8002c1e <HAL_SPI_TransmitReceive+0x358>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028f4:	f7fe fdec 	bl	80014d0 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800290e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002912:	2b01      	cmp	r3, #1
 8002914:	d00f      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x70>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291c:	d107      	bne.n	800292e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <HAL_SPI_TransmitReceive+0x68>
 8002926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800292a:	2b04      	cmp	r3, #4
 800292c:	d003      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002934:	e16d      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x82>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x82>
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800294e:	e160      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b04      	cmp	r3, #4
 800295a:	d003      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2205      	movs	r2, #5
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	887a      	ldrh	r2, [r7, #2]
 800297a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	887a      	ldrh	r2, [r7, #2]
 8002986:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d007      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	d17c      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_SPI_TransmitReceive+0x10a>
 80029ca:	8b7b      	ldrh	r3, [r7, #26]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d16a      	bne.n	8002aa6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	1c9a      	adds	r2, r3, #2
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029f4:	e057      	b.n	8002aa6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d11b      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x176>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x176>
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d113      	bne.n	8002a3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d119      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x1b8>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d014      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	1c9a      	adds	r2, r3, #2
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a7e:	f7fe fd27 	bl	80014d0 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d80b      	bhi.n	8002aa6 <HAL_SPI_TransmitReceive+0x1e0>
 8002a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a94:	d007      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002aa4:	e0b5      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1a2      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x130>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d19d      	bne.n	80029f6 <HAL_SPI_TransmitReceive+0x130>
 8002aba:	e080      	b.n	8002bbe <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_SPI_TransmitReceive+0x204>
 8002ac4:	8b7b      	ldrh	r3, [r7, #26]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d16f      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af0:	e05b      	b.n	8002baa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d11c      	bne.n	8002b3a <HAL_SPI_TransmitReceive+0x274>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_SPI_TransmitReceive+0x274>
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d114      	bne.n	8002b3a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d119      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x2b6>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d014      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b7c:	f7fe fca8 	bl	80014d0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d803      	bhi.n	8002b94 <HAL_SPI_TransmitReceive+0x2ce>
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x2d4>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002ba8:	e033      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d19e      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x22c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d199      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f90a 	bl	8002ddc <SPI_EndRxTxTransaction>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bda:	e01a      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c08:	e003      	b.n	8002c12 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3730      	adds	r7, #48	; 0x30
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c38:	f7fe fc4a 	bl	80014d0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c48:	f7fe fc42 	bl	80014d0 <HAL_GetTick>
 8002c4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	0d1b      	lsrs	r3, r3, #20
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5e:	e054      	b.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c66:	d050      	beq.n	8002d0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c68:	f7fe fc32 	bl	80014d0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d902      	bls.n	8002c7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d13d      	bne.n	8002cfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c96:	d111      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca0:	d004      	beq.n	8002cac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002caa:	d107      	bne.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc4:	d10f      	bne.n	8002ce6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e017      	b.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d19b      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4c:	d111      	bne.n	8002d72 <SPI_EndRxTransaction+0x3a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d004      	beq.n	8002d62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d107      	bne.n	8002d72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7a:	d117      	bne.n	8002dac <SPI_EndRxTransaction+0x74>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d84:	d112      	bne.n	8002dac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2101      	movs	r1, #1
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff ff49 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01a      	beq.n	8002dd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e013      	b.n	8002dd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff36 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff ff18 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e000      	b.n	8002e10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e041      	b.n	8002eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f839 	bl	8002eb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f000 f9b4 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e03a      	b.n	8002f56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_TIM_Base_Start_IT+0x98>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x58>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0a:	d009      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x58>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0x58>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d111      	bne.n	8002f44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d010      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	e007      	b.n	8002f54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800

08002f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0202 	mvn.w	r2, #2
 8002f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8ed 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f8e0 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f8ef 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0204 	mvn.w	r2, #4
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f8c3 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8b6 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8c5 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f899 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f88c 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f89b 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f86f 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f862 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f871 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0201 	mvn.w	r2, #1
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fb76 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b80      	cmp	r3, #128	; 0x80
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8bf 	bl	800329a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f835 	bl	80031b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0220 	mvn.w	r2, #32
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f88a 	bl	8003288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a29      	ldr	r2, [pc, #164]	; (800327c <TIM_Base_SetConfig+0xb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x30>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <TIM_Base_SetConfig+0xbc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <TIM_Base_SetConfig+0xc0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <TIM_Base_SetConfig+0xb8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <TIM_Base_SetConfig+0xbc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <TIM_Base_SetConfig+0xc0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <TIM_Base_SetConfig+0xb8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800

08003288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e042      	b.n	8003344 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd ff70 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f91d 	bl	8003530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b20      	cmp	r3, #32
 800336a:	d16d      	bne.n	8003448 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_UART_Transmit+0x2c>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e066      	b.n	800344a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2221      	movs	r2, #33	; 0x21
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338a:	f7fe f8a1 	bl	80014d0 <HAL_GetTick>
 800338e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88fa      	ldrh	r2, [r7, #6]
 800339a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d108      	bne.n	80033b8 <HAL_UART_Transmit+0x6c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	e003      	b.n	80033c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c0:	e02a      	b.n	8003418 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f840 	bl	8003452 <UART_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e036      	b.n	800344a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	3302      	adds	r3, #2
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	e007      	b.n	800340a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	3301      	adds	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1cf      	bne.n	80033c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	2140      	movs	r1, #64	; 0x40
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f810 	bl	8003452 <UART_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e006      	b.n	800344a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e000      	b.n	800344a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003448:	2302      	movs	r3, #2
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b090      	sub	sp, #64	; 0x40
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	4613      	mov	r3, r2
 8003460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003462:	e050      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346a:	d04c      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800346c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <UART_WaitOnFlagUntilTimeout+0x30>
 8003472:	f7fe f82d 	bl	80014d0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347e:	429a      	cmp	r2, r3
 8003480:	d241      	bcs.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034a2:	637a      	str	r2, [r7, #52]	; 0x34
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e5      	bne.n	8003482 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3314      	adds	r3, #20
 80034d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d6:	623a      	str	r2, [r7, #32]
 80034d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e5      	bne.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e00f      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d09f      	beq.n	8003464 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3740      	adds	r7, #64	; 0x40
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800356a:	f023 030c 	bic.w	r3, r3, #12
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	430b      	orrs	r3, r1
 8003576:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2c      	ldr	r2, [pc, #176]	; (8003644 <UART_SetConfig+0x114>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7fe fe54 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	e002      	b.n	80035a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7fe fe3c 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <UART_SetConfig+0x118>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	0119      	lsls	r1, r3, #4
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <UART_SetConfig+0x118>)
 80035de:	fba3 0302 	umull	r0, r3, r3, r2
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2064      	movs	r0, #100	; 0x64
 80035e6:	fb00 f303 	mul.w	r3, r0, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	3332      	adds	r3, #50	; 0x32
 80035f0:	4a15      	ldr	r2, [pc, #84]	; (8003648 <UART_SetConfig+0x118>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fc:	4419      	add	r1, r3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009a      	lsls	r2, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <UART_SetConfig+0x118>)
 8003616:	fba3 0302 	umull	r0, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2064      	movs	r0, #100	; 0x64
 800361e:	fb00 f303 	mul.w	r3, r0, r3
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	3332      	adds	r3, #50	; 0x32
 8003628:	4a07      	ldr	r2, [pc, #28]	; (8003648 <UART_SetConfig+0x118>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	440a      	add	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40013800 	.word	0x40013800
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <__errno>:
 800364c:	4b01      	ldr	r3, [pc, #4]	; (8003654 <__errno+0x8>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	2600      	movs	r6, #0
 800365c:	4d0c      	ldr	r5, [pc, #48]	; (8003690 <__libc_init_array+0x38>)
 800365e:	4c0d      	ldr	r4, [pc, #52]	; (8003694 <__libc_init_array+0x3c>)
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	42a6      	cmp	r6, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	f000 fcb0 	bl	8003fcc <_init>
 800366c:	2600      	movs	r6, #0
 800366e:	4d0a      	ldr	r5, [pc, #40]	; (8003698 <__libc_init_array+0x40>)
 8003670:	4c0a      	ldr	r4, [pc, #40]	; (800369c <__libc_init_array+0x44>)
 8003672:	1b64      	subs	r4, r4, r5
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	42a6      	cmp	r6, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003680:	4798      	blx	r3
 8003682:	3601      	adds	r6, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f855 3b04 	ldr.w	r3, [r5], #4
 800368a:	4798      	blx	r3
 800368c:	3601      	adds	r6, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	080041b0 	.word	0x080041b0
 8003694:	080041b0 	.word	0x080041b0
 8003698:	080041b0 	.word	0x080041b0
 800369c:	080041b4 	.word	0x080041b4

080036a0 <memcpy>:
 80036a0:	440a      	add	r2, r1
 80036a2:	4291      	cmp	r1, r2
 80036a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80036a8:	d100      	bne.n	80036ac <memcpy+0xc>
 80036aa:	4770      	bx	lr
 80036ac:	b510      	push	{r4, lr}
 80036ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b2:	4291      	cmp	r1, r2
 80036b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b8:	d1f9      	bne.n	80036ae <memcpy+0xe>
 80036ba:	bd10      	pop	{r4, pc}

080036bc <memset>:
 80036bc:	4603      	mov	r3, r0
 80036be:	4402      	add	r2, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d100      	bne.n	80036c6 <memset+0xa>
 80036c4:	4770      	bx	lr
 80036c6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ca:	e7f9      	b.n	80036c0 <memset+0x4>

080036cc <sniprintf>:
 80036cc:	b40c      	push	{r2, r3}
 80036ce:	b530      	push	{r4, r5, lr}
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <sniprintf+0x64>)
 80036d2:	1e0c      	subs	r4, r1, #0
 80036d4:	681d      	ldr	r5, [r3, #0]
 80036d6:	b09d      	sub	sp, #116	; 0x74
 80036d8:	da08      	bge.n	80036ec <sniprintf+0x20>
 80036da:	238b      	movs	r3, #139	; 0x8b
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	b01d      	add	sp, #116	; 0x74
 80036e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036e8:	b002      	add	sp, #8
 80036ea:	4770      	bx	lr
 80036ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80036f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80036f4:	bf0c      	ite	eq
 80036f6:	4623      	moveq	r3, r4
 80036f8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	9307      	str	r3, [sp, #28]
 8003700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003704:	9002      	str	r0, [sp, #8]
 8003706:	9006      	str	r0, [sp, #24]
 8003708:	f8ad 3016 	strh.w	r3, [sp, #22]
 800370c:	4628      	mov	r0, r5
 800370e:	ab21      	add	r3, sp, #132	; 0x84
 8003710:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003712:	a902      	add	r1, sp, #8
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	f000 f869 	bl	80037ec <_svfiprintf_r>
 800371a:	1c43      	adds	r3, r0, #1
 800371c:	bfbc      	itt	lt
 800371e:	238b      	movlt	r3, #139	; 0x8b
 8003720:	602b      	strlt	r3, [r5, #0]
 8003722:	2c00      	cmp	r4, #0
 8003724:	d0dd      	beq.n	80036e2 <sniprintf+0x16>
 8003726:	2200      	movs	r2, #0
 8003728:	9b02      	ldr	r3, [sp, #8]
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e7d9      	b.n	80036e2 <sniprintf+0x16>
 800372e:	bf00      	nop
 8003730:	2000000c 	.word	0x2000000c

08003734 <__ssputs_r>:
 8003734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	688e      	ldr	r6, [r1, #8]
 800373a:	4682      	mov	sl, r0
 800373c:	429e      	cmp	r6, r3
 800373e:	460c      	mov	r4, r1
 8003740:	4690      	mov	r8, r2
 8003742:	461f      	mov	r7, r3
 8003744:	d838      	bhi.n	80037b8 <__ssputs_r+0x84>
 8003746:	898a      	ldrh	r2, [r1, #12]
 8003748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800374c:	d032      	beq.n	80037b4 <__ssputs_r+0x80>
 800374e:	6825      	ldr	r5, [r4, #0]
 8003750:	6909      	ldr	r1, [r1, #16]
 8003752:	3301      	adds	r3, #1
 8003754:	eba5 0901 	sub.w	r9, r5, r1
 8003758:	6965      	ldr	r5, [r4, #20]
 800375a:	444b      	add	r3, r9
 800375c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003760:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003764:	106d      	asrs	r5, r5, #1
 8003766:	429d      	cmp	r5, r3
 8003768:	bf38      	it	cc
 800376a:	461d      	movcc	r5, r3
 800376c:	0553      	lsls	r3, r2, #21
 800376e:	d531      	bpl.n	80037d4 <__ssputs_r+0xa0>
 8003770:	4629      	mov	r1, r5
 8003772:	f000 fb61 	bl	8003e38 <_malloc_r>
 8003776:	4606      	mov	r6, r0
 8003778:	b950      	cbnz	r0, 8003790 <__ssputs_r+0x5c>
 800377a:	230c      	movs	r3, #12
 800377c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003780:	f8ca 3000 	str.w	r3, [sl]
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003790:	464a      	mov	r2, r9
 8003792:	6921      	ldr	r1, [r4, #16]
 8003794:	f7ff ff84 	bl	80036a0 <memcpy>
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800379e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	6126      	str	r6, [r4, #16]
 80037a6:	444e      	add	r6, r9
 80037a8:	6026      	str	r6, [r4, #0]
 80037aa:	463e      	mov	r6, r7
 80037ac:	6165      	str	r5, [r4, #20]
 80037ae:	eba5 0509 	sub.w	r5, r5, r9
 80037b2:	60a5      	str	r5, [r4, #8]
 80037b4:	42be      	cmp	r6, r7
 80037b6:	d900      	bls.n	80037ba <__ssputs_r+0x86>
 80037b8:	463e      	mov	r6, r7
 80037ba:	4632      	mov	r2, r6
 80037bc:	4641      	mov	r1, r8
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	f000 fab8 	bl	8003d34 <memmove>
 80037c4:	68a3      	ldr	r3, [r4, #8]
 80037c6:	2000      	movs	r0, #0
 80037c8:	1b9b      	subs	r3, r3, r6
 80037ca:	60a3      	str	r3, [r4, #8]
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	4433      	add	r3, r6
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	e7db      	b.n	800378c <__ssputs_r+0x58>
 80037d4:	462a      	mov	r2, r5
 80037d6:	f000 fba3 	bl	8003f20 <_realloc_r>
 80037da:	4606      	mov	r6, r0
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1e1      	bne.n	80037a4 <__ssputs_r+0x70>
 80037e0:	4650      	mov	r0, sl
 80037e2:	6921      	ldr	r1, [r4, #16]
 80037e4:	f000 fac0 	bl	8003d68 <_free_r>
 80037e8:	e7c7      	b.n	800377a <__ssputs_r+0x46>
	...

080037ec <_svfiprintf_r>:
 80037ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f0:	4698      	mov	r8, r3
 80037f2:	898b      	ldrh	r3, [r1, #12]
 80037f4:	4607      	mov	r7, r0
 80037f6:	061b      	lsls	r3, r3, #24
 80037f8:	460d      	mov	r5, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	b09d      	sub	sp, #116	; 0x74
 80037fe:	d50e      	bpl.n	800381e <_svfiprintf_r+0x32>
 8003800:	690b      	ldr	r3, [r1, #16]
 8003802:	b963      	cbnz	r3, 800381e <_svfiprintf_r+0x32>
 8003804:	2140      	movs	r1, #64	; 0x40
 8003806:	f000 fb17 	bl	8003e38 <_malloc_r>
 800380a:	6028      	str	r0, [r5, #0]
 800380c:	6128      	str	r0, [r5, #16]
 800380e:	b920      	cbnz	r0, 800381a <_svfiprintf_r+0x2e>
 8003810:	230c      	movs	r3, #12
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003818:	e0d1      	b.n	80039be <_svfiprintf_r+0x1d2>
 800381a:	2340      	movs	r3, #64	; 0x40
 800381c:	616b      	str	r3, [r5, #20]
 800381e:	2300      	movs	r3, #0
 8003820:	9309      	str	r3, [sp, #36]	; 0x24
 8003822:	2320      	movs	r3, #32
 8003824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003828:	2330      	movs	r3, #48	; 0x30
 800382a:	f04f 0901 	mov.w	r9, #1
 800382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003832:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80039d8 <_svfiprintf_r+0x1ec>
 8003836:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800383a:	4623      	mov	r3, r4
 800383c:	469a      	mov	sl, r3
 800383e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003842:	b10a      	cbz	r2, 8003848 <_svfiprintf_r+0x5c>
 8003844:	2a25      	cmp	r2, #37	; 0x25
 8003846:	d1f9      	bne.n	800383c <_svfiprintf_r+0x50>
 8003848:	ebba 0b04 	subs.w	fp, sl, r4
 800384c:	d00b      	beq.n	8003866 <_svfiprintf_r+0x7a>
 800384e:	465b      	mov	r3, fp
 8003850:	4622      	mov	r2, r4
 8003852:	4629      	mov	r1, r5
 8003854:	4638      	mov	r0, r7
 8003856:	f7ff ff6d 	bl	8003734 <__ssputs_r>
 800385a:	3001      	adds	r0, #1
 800385c:	f000 80aa 	beq.w	80039b4 <_svfiprintf_r+0x1c8>
 8003860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003862:	445a      	add	r2, fp
 8003864:	9209      	str	r2, [sp, #36]	; 0x24
 8003866:	f89a 3000 	ldrb.w	r3, [sl]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80a2 	beq.w	80039b4 <_svfiprintf_r+0x1c8>
 8003870:	2300      	movs	r3, #0
 8003872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800387a:	f10a 0a01 	add.w	sl, sl, #1
 800387e:	9304      	str	r3, [sp, #16]
 8003880:	9307      	str	r3, [sp, #28]
 8003882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003886:	931a      	str	r3, [sp, #104]	; 0x68
 8003888:	4654      	mov	r4, sl
 800388a:	2205      	movs	r2, #5
 800388c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003890:	4851      	ldr	r0, [pc, #324]	; (80039d8 <_svfiprintf_r+0x1ec>)
 8003892:	f000 fa41 	bl	8003d18 <memchr>
 8003896:	9a04      	ldr	r2, [sp, #16]
 8003898:	b9d8      	cbnz	r0, 80038d2 <_svfiprintf_r+0xe6>
 800389a:	06d0      	lsls	r0, r2, #27
 800389c:	bf44      	itt	mi
 800389e:	2320      	movmi	r3, #32
 80038a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a4:	0711      	lsls	r1, r2, #28
 80038a6:	bf44      	itt	mi
 80038a8:	232b      	movmi	r3, #43	; 0x2b
 80038aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ae:	f89a 3000 	ldrb.w	r3, [sl]
 80038b2:	2b2a      	cmp	r3, #42	; 0x2a
 80038b4:	d015      	beq.n	80038e2 <_svfiprintf_r+0xf6>
 80038b6:	4654      	mov	r4, sl
 80038b8:	2000      	movs	r0, #0
 80038ba:	f04f 0c0a 	mov.w	ip, #10
 80038be:	9a07      	ldr	r2, [sp, #28]
 80038c0:	4621      	mov	r1, r4
 80038c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038c6:	3b30      	subs	r3, #48	; 0x30
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d94e      	bls.n	800396a <_svfiprintf_r+0x17e>
 80038cc:	b1b0      	cbz	r0, 80038fc <_svfiprintf_r+0x110>
 80038ce:	9207      	str	r2, [sp, #28]
 80038d0:	e014      	b.n	80038fc <_svfiprintf_r+0x110>
 80038d2:	eba0 0308 	sub.w	r3, r0, r8
 80038d6:	fa09 f303 	lsl.w	r3, r9, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	46a2      	mov	sl, r4
 80038de:	9304      	str	r3, [sp, #16]
 80038e0:	e7d2      	b.n	8003888 <_svfiprintf_r+0x9c>
 80038e2:	9b03      	ldr	r3, [sp, #12]
 80038e4:	1d19      	adds	r1, r3, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	9103      	str	r1, [sp, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bfbb      	ittet	lt
 80038ee:	425b      	neglt	r3, r3
 80038f0:	f042 0202 	orrlt.w	r2, r2, #2
 80038f4:	9307      	strge	r3, [sp, #28]
 80038f6:	9307      	strlt	r3, [sp, #28]
 80038f8:	bfb8      	it	lt
 80038fa:	9204      	strlt	r2, [sp, #16]
 80038fc:	7823      	ldrb	r3, [r4, #0]
 80038fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003900:	d10c      	bne.n	800391c <_svfiprintf_r+0x130>
 8003902:	7863      	ldrb	r3, [r4, #1]
 8003904:	2b2a      	cmp	r3, #42	; 0x2a
 8003906:	d135      	bne.n	8003974 <_svfiprintf_r+0x188>
 8003908:	9b03      	ldr	r3, [sp, #12]
 800390a:	3402      	adds	r4, #2
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	9203      	str	r2, [sp, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	bfb8      	it	lt
 8003916:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800391a:	9305      	str	r3, [sp, #20]
 800391c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80039dc <_svfiprintf_r+0x1f0>
 8003920:	2203      	movs	r2, #3
 8003922:	4650      	mov	r0, sl
 8003924:	7821      	ldrb	r1, [r4, #0]
 8003926:	f000 f9f7 	bl	8003d18 <memchr>
 800392a:	b140      	cbz	r0, 800393e <_svfiprintf_r+0x152>
 800392c:	2340      	movs	r3, #64	; 0x40
 800392e:	eba0 000a 	sub.w	r0, r0, sl
 8003932:	fa03 f000 	lsl.w	r0, r3, r0
 8003936:	9b04      	ldr	r3, [sp, #16]
 8003938:	3401      	adds	r4, #1
 800393a:	4303      	orrs	r3, r0
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003942:	2206      	movs	r2, #6
 8003944:	4826      	ldr	r0, [pc, #152]	; (80039e0 <_svfiprintf_r+0x1f4>)
 8003946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800394a:	f000 f9e5 	bl	8003d18 <memchr>
 800394e:	2800      	cmp	r0, #0
 8003950:	d038      	beq.n	80039c4 <_svfiprintf_r+0x1d8>
 8003952:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <_svfiprintf_r+0x1f8>)
 8003954:	bb1b      	cbnz	r3, 800399e <_svfiprintf_r+0x1b2>
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	3307      	adds	r3, #7
 800395a:	f023 0307 	bic.w	r3, r3, #7
 800395e:	3308      	adds	r3, #8
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003964:	4433      	add	r3, r6
 8003966:	9309      	str	r3, [sp, #36]	; 0x24
 8003968:	e767      	b.n	800383a <_svfiprintf_r+0x4e>
 800396a:	460c      	mov	r4, r1
 800396c:	2001      	movs	r0, #1
 800396e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003972:	e7a5      	b.n	80038c0 <_svfiprintf_r+0xd4>
 8003974:	2300      	movs	r3, #0
 8003976:	f04f 0c0a 	mov.w	ip, #10
 800397a:	4619      	mov	r1, r3
 800397c:	3401      	adds	r4, #1
 800397e:	9305      	str	r3, [sp, #20]
 8003980:	4620      	mov	r0, r4
 8003982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003986:	3a30      	subs	r2, #48	; 0x30
 8003988:	2a09      	cmp	r2, #9
 800398a:	d903      	bls.n	8003994 <_svfiprintf_r+0x1a8>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0c5      	beq.n	800391c <_svfiprintf_r+0x130>
 8003990:	9105      	str	r1, [sp, #20]
 8003992:	e7c3      	b.n	800391c <_svfiprintf_r+0x130>
 8003994:	4604      	mov	r4, r0
 8003996:	2301      	movs	r3, #1
 8003998:	fb0c 2101 	mla	r1, ip, r1, r2
 800399c:	e7f0      	b.n	8003980 <_svfiprintf_r+0x194>
 800399e:	ab03      	add	r3, sp, #12
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	462a      	mov	r2, r5
 80039a4:	4638      	mov	r0, r7
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <_svfiprintf_r+0x1fc>)
 80039a8:	a904      	add	r1, sp, #16
 80039aa:	f3af 8000 	nop.w
 80039ae:	1c42      	adds	r2, r0, #1
 80039b0:	4606      	mov	r6, r0
 80039b2:	d1d6      	bne.n	8003962 <_svfiprintf_r+0x176>
 80039b4:	89ab      	ldrh	r3, [r5, #12]
 80039b6:	065b      	lsls	r3, r3, #25
 80039b8:	f53f af2c 	bmi.w	8003814 <_svfiprintf_r+0x28>
 80039bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039be:	b01d      	add	sp, #116	; 0x74
 80039c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c4:	ab03      	add	r3, sp, #12
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	462a      	mov	r2, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <_svfiprintf_r+0x1fc>)
 80039ce:	a904      	add	r1, sp, #16
 80039d0:	f000 f87c 	bl	8003acc <_printf_i>
 80039d4:	e7eb      	b.n	80039ae <_svfiprintf_r+0x1c2>
 80039d6:	bf00      	nop
 80039d8:	0800417a 	.word	0x0800417a
 80039dc:	08004180 	.word	0x08004180
 80039e0:	08004184 	.word	0x08004184
 80039e4:	00000000 	.word	0x00000000
 80039e8:	08003735 	.word	0x08003735

080039ec <_printf_common>:
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	4616      	mov	r6, r2
 80039f2:	4699      	mov	r9, r3
 80039f4:	688a      	ldr	r2, [r1, #8]
 80039f6:	690b      	ldr	r3, [r1, #16]
 80039f8:	4607      	mov	r7, r0
 80039fa:	4293      	cmp	r3, r2
 80039fc:	bfb8      	it	lt
 80039fe:	4613      	movlt	r3, r2
 8003a00:	6033      	str	r3, [r6, #0]
 8003a02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a06:	460c      	mov	r4, r1
 8003a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a0c:	b10a      	cbz	r2, 8003a12 <_printf_common+0x26>
 8003a0e:	3301      	adds	r3, #1
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	0699      	lsls	r1, r3, #26
 8003a16:	bf42      	ittt	mi
 8003a18:	6833      	ldrmi	r3, [r6, #0]
 8003a1a:	3302      	addmi	r3, #2
 8003a1c:	6033      	strmi	r3, [r6, #0]
 8003a1e:	6825      	ldr	r5, [r4, #0]
 8003a20:	f015 0506 	ands.w	r5, r5, #6
 8003a24:	d106      	bne.n	8003a34 <_printf_common+0x48>
 8003a26:	f104 0a19 	add.w	sl, r4, #25
 8003a2a:	68e3      	ldr	r3, [r4, #12]
 8003a2c:	6832      	ldr	r2, [r6, #0]
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	42ab      	cmp	r3, r5
 8003a32:	dc28      	bgt.n	8003a86 <_printf_common+0x9a>
 8003a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a38:	1e13      	subs	r3, r2, #0
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	bf18      	it	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	0692      	lsls	r2, r2, #26
 8003a42:	d42d      	bmi.n	8003aa0 <_printf_common+0xb4>
 8003a44:	4649      	mov	r1, r9
 8003a46:	4638      	mov	r0, r7
 8003a48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d020      	beq.n	8003a94 <_printf_common+0xa8>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	68e5      	ldr	r5, [r4, #12]
 8003a56:	f003 0306 	and.w	r3, r3, #6
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf18      	it	ne
 8003a5e:	2500      	movne	r5, #0
 8003a60:	6832      	ldr	r2, [r6, #0]
 8003a62:	f04f 0600 	mov.w	r6, #0
 8003a66:	68a3      	ldr	r3, [r4, #8]
 8003a68:	bf08      	it	eq
 8003a6a:	1aad      	subeq	r5, r5, r2
 8003a6c:	6922      	ldr	r2, [r4, #16]
 8003a6e:	bf08      	it	eq
 8003a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bfc4      	itt	gt
 8003a78:	1a9b      	subgt	r3, r3, r2
 8003a7a:	18ed      	addgt	r5, r5, r3
 8003a7c:	341a      	adds	r4, #26
 8003a7e:	42b5      	cmp	r5, r6
 8003a80:	d11a      	bne.n	8003ab8 <_printf_common+0xcc>
 8003a82:	2000      	movs	r0, #0
 8003a84:	e008      	b.n	8003a98 <_printf_common+0xac>
 8003a86:	2301      	movs	r3, #1
 8003a88:	4652      	mov	r2, sl
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	47c0      	blx	r8
 8003a90:	3001      	adds	r0, #1
 8003a92:	d103      	bne.n	8003a9c <_printf_common+0xb0>
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9c:	3501      	adds	r5, #1
 8003a9e:	e7c4      	b.n	8003a2a <_printf_common+0x3e>
 8003aa0:	2030      	movs	r0, #48	; 0x30
 8003aa2:	18e1      	adds	r1, r4, r3
 8003aa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aae:	4422      	add	r2, r4
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ab6:	e7c5      	b.n	8003a44 <_printf_common+0x58>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4622      	mov	r2, r4
 8003abc:	4649      	mov	r1, r9
 8003abe:	4638      	mov	r0, r7
 8003ac0:	47c0      	blx	r8
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	d0e6      	beq.n	8003a94 <_printf_common+0xa8>
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e7d9      	b.n	8003a7e <_printf_common+0x92>
	...

08003acc <_printf_i>:
 8003acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad0:	7e0f      	ldrb	r7, [r1, #24]
 8003ad2:	4691      	mov	r9, r2
 8003ad4:	2f78      	cmp	r7, #120	; 0x78
 8003ad6:	4680      	mov	r8, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	469a      	mov	sl, r3
 8003adc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ae2:	d807      	bhi.n	8003af4 <_printf_i+0x28>
 8003ae4:	2f62      	cmp	r7, #98	; 0x62
 8003ae6:	d80a      	bhi.n	8003afe <_printf_i+0x32>
 8003ae8:	2f00      	cmp	r7, #0
 8003aea:	f000 80d9 	beq.w	8003ca0 <_printf_i+0x1d4>
 8003aee:	2f58      	cmp	r7, #88	; 0x58
 8003af0:	f000 80a4 	beq.w	8003c3c <_printf_i+0x170>
 8003af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003af8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003afc:	e03a      	b.n	8003b74 <_printf_i+0xa8>
 8003afe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b02:	2b15      	cmp	r3, #21
 8003b04:	d8f6      	bhi.n	8003af4 <_printf_i+0x28>
 8003b06:	a101      	add	r1, pc, #4	; (adr r1, 8003b0c <_printf_i+0x40>)
 8003b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b0c:	08003b65 	.word	0x08003b65
 8003b10:	08003b79 	.word	0x08003b79
 8003b14:	08003af5 	.word	0x08003af5
 8003b18:	08003af5 	.word	0x08003af5
 8003b1c:	08003af5 	.word	0x08003af5
 8003b20:	08003af5 	.word	0x08003af5
 8003b24:	08003b79 	.word	0x08003b79
 8003b28:	08003af5 	.word	0x08003af5
 8003b2c:	08003af5 	.word	0x08003af5
 8003b30:	08003af5 	.word	0x08003af5
 8003b34:	08003af5 	.word	0x08003af5
 8003b38:	08003c87 	.word	0x08003c87
 8003b3c:	08003ba9 	.word	0x08003ba9
 8003b40:	08003c69 	.word	0x08003c69
 8003b44:	08003af5 	.word	0x08003af5
 8003b48:	08003af5 	.word	0x08003af5
 8003b4c:	08003ca9 	.word	0x08003ca9
 8003b50:	08003af5 	.word	0x08003af5
 8003b54:	08003ba9 	.word	0x08003ba9
 8003b58:	08003af5 	.word	0x08003af5
 8003b5c:	08003af5 	.word	0x08003af5
 8003b60:	08003c71 	.word	0x08003c71
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	1d1a      	adds	r2, r3, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	602a      	str	r2, [r5, #0]
 8003b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0a4      	b.n	8003cc2 <_printf_i+0x1f6>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	6829      	ldr	r1, [r5, #0]
 8003b7c:	0606      	lsls	r6, r0, #24
 8003b7e:	f101 0304 	add.w	r3, r1, #4
 8003b82:	d50a      	bpl.n	8003b9a <_printf_i+0xce>
 8003b84:	680e      	ldr	r6, [r1, #0]
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	2e00      	cmp	r6, #0
 8003b8a:	da03      	bge.n	8003b94 <_printf_i+0xc8>
 8003b8c:	232d      	movs	r3, #45	; 0x2d
 8003b8e:	4276      	negs	r6, r6
 8003b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b94:	230a      	movs	r3, #10
 8003b96:	485e      	ldr	r0, [pc, #376]	; (8003d10 <_printf_i+0x244>)
 8003b98:	e019      	b.n	8003bce <_printf_i+0x102>
 8003b9a:	680e      	ldr	r6, [r1, #0]
 8003b9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ba0:	602b      	str	r3, [r5, #0]
 8003ba2:	bf18      	it	ne
 8003ba4:	b236      	sxthne	r6, r6
 8003ba6:	e7ef      	b.n	8003b88 <_printf_i+0xbc>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	1d19      	adds	r1, r3, #4
 8003bae:	6029      	str	r1, [r5, #0]
 8003bb0:	0601      	lsls	r1, r0, #24
 8003bb2:	d501      	bpl.n	8003bb8 <_printf_i+0xec>
 8003bb4:	681e      	ldr	r6, [r3, #0]
 8003bb6:	e002      	b.n	8003bbe <_printf_i+0xf2>
 8003bb8:	0646      	lsls	r6, r0, #25
 8003bba:	d5fb      	bpl.n	8003bb4 <_printf_i+0xe8>
 8003bbc:	881e      	ldrh	r6, [r3, #0]
 8003bbe:	2f6f      	cmp	r7, #111	; 0x6f
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2308      	moveq	r3, #8
 8003bc4:	230a      	movne	r3, #10
 8003bc6:	4852      	ldr	r0, [pc, #328]	; (8003d10 <_printf_i+0x244>)
 8003bc8:	2100      	movs	r1, #0
 8003bca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bce:	6865      	ldr	r5, [r4, #4]
 8003bd0:	2d00      	cmp	r5, #0
 8003bd2:	bfa8      	it	ge
 8003bd4:	6821      	ldrge	r1, [r4, #0]
 8003bd6:	60a5      	str	r5, [r4, #8]
 8003bd8:	bfa4      	itt	ge
 8003bda:	f021 0104 	bicge.w	r1, r1, #4
 8003bde:	6021      	strge	r1, [r4, #0]
 8003be0:	b90e      	cbnz	r6, 8003be6 <_printf_i+0x11a>
 8003be2:	2d00      	cmp	r5, #0
 8003be4:	d04d      	beq.n	8003c82 <_printf_i+0x1b6>
 8003be6:	4615      	mov	r5, r2
 8003be8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bec:	fb03 6711 	mls	r7, r3, r1, r6
 8003bf0:	5dc7      	ldrb	r7, [r0, r7]
 8003bf2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bf6:	4637      	mov	r7, r6
 8003bf8:	42bb      	cmp	r3, r7
 8003bfa:	460e      	mov	r6, r1
 8003bfc:	d9f4      	bls.n	8003be8 <_printf_i+0x11c>
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d10b      	bne.n	8003c1a <_printf_i+0x14e>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	07de      	lsls	r6, r3, #31
 8003c06:	d508      	bpl.n	8003c1a <_printf_i+0x14e>
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	6861      	ldr	r1, [r4, #4]
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	bfde      	ittt	le
 8003c10:	2330      	movle	r3, #48	; 0x30
 8003c12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c16:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c1a:	1b52      	subs	r2, r2, r5
 8003c1c:	6122      	str	r2, [r4, #16]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	4621      	mov	r1, r4
 8003c22:	4640      	mov	r0, r8
 8003c24:	f8cd a000 	str.w	sl, [sp]
 8003c28:	aa03      	add	r2, sp, #12
 8003c2a:	f7ff fedf 	bl	80039ec <_printf_common>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d14c      	bne.n	8003ccc <_printf_i+0x200>
 8003c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c36:	b004      	add	sp, #16
 8003c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3c:	4834      	ldr	r0, [pc, #208]	; (8003d10 <_printf_i+0x244>)
 8003c3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c42:	6829      	ldr	r1, [r5, #0]
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c4a:	6029      	str	r1, [r5, #0]
 8003c4c:	061d      	lsls	r5, r3, #24
 8003c4e:	d514      	bpl.n	8003c7a <_printf_i+0x1ae>
 8003c50:	07df      	lsls	r7, r3, #31
 8003c52:	bf44      	itt	mi
 8003c54:	f043 0320 	orrmi.w	r3, r3, #32
 8003c58:	6023      	strmi	r3, [r4, #0]
 8003c5a:	b91e      	cbnz	r6, 8003c64 <_printf_i+0x198>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	f023 0320 	bic.w	r3, r3, #32
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	2310      	movs	r3, #16
 8003c66:	e7af      	b.n	8003bc8 <_printf_i+0xfc>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	f043 0320 	orr.w	r3, r3, #32
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	2378      	movs	r3, #120	; 0x78
 8003c72:	4828      	ldr	r0, [pc, #160]	; (8003d14 <_printf_i+0x248>)
 8003c74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c78:	e7e3      	b.n	8003c42 <_printf_i+0x176>
 8003c7a:	0659      	lsls	r1, r3, #25
 8003c7c:	bf48      	it	mi
 8003c7e:	b2b6      	uxthmi	r6, r6
 8003c80:	e7e6      	b.n	8003c50 <_printf_i+0x184>
 8003c82:	4615      	mov	r5, r2
 8003c84:	e7bb      	b.n	8003bfe <_printf_i+0x132>
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	6826      	ldr	r6, [r4, #0]
 8003c8a:	1d18      	adds	r0, r3, #4
 8003c8c:	6961      	ldr	r1, [r4, #20]
 8003c8e:	6028      	str	r0, [r5, #0]
 8003c90:	0635      	lsls	r5, r6, #24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	d501      	bpl.n	8003c9a <_printf_i+0x1ce>
 8003c96:	6019      	str	r1, [r3, #0]
 8003c98:	e002      	b.n	8003ca0 <_printf_i+0x1d4>
 8003c9a:	0670      	lsls	r0, r6, #25
 8003c9c:	d5fb      	bpl.n	8003c96 <_printf_i+0x1ca>
 8003c9e:	8019      	strh	r1, [r3, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4615      	mov	r5, r2
 8003ca4:	6123      	str	r3, [r4, #16]
 8003ca6:	e7ba      	b.n	8003c1e <_printf_i+0x152>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	2100      	movs	r1, #0
 8003cac:	1d1a      	adds	r2, r3, #4
 8003cae:	602a      	str	r2, [r5, #0]
 8003cb0:	681d      	ldr	r5, [r3, #0]
 8003cb2:	6862      	ldr	r2, [r4, #4]
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 f82f 	bl	8003d18 <memchr>
 8003cba:	b108      	cbz	r0, 8003cc0 <_printf_i+0x1f4>
 8003cbc:	1b40      	subs	r0, r0, r5
 8003cbe:	6060      	str	r0, [r4, #4]
 8003cc0:	6863      	ldr	r3, [r4, #4]
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cca:	e7a8      	b.n	8003c1e <_printf_i+0x152>
 8003ccc:	462a      	mov	r2, r5
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	47d0      	blx	sl
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d0ab      	beq.n	8003c32 <_printf_i+0x166>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	079b      	lsls	r3, r3, #30
 8003cde:	d413      	bmi.n	8003d08 <_printf_i+0x23c>
 8003ce0:	68e0      	ldr	r0, [r4, #12]
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	4298      	cmp	r0, r3
 8003ce6:	bfb8      	it	lt
 8003ce8:	4618      	movlt	r0, r3
 8003cea:	e7a4      	b.n	8003c36 <_printf_i+0x16a>
 8003cec:	2301      	movs	r3, #1
 8003cee:	4632      	mov	r2, r6
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	47d0      	blx	sl
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d09b      	beq.n	8003c32 <_printf_i+0x166>
 8003cfa:	3501      	adds	r5, #1
 8003cfc:	68e3      	ldr	r3, [r4, #12]
 8003cfe:	9903      	ldr	r1, [sp, #12]
 8003d00:	1a5b      	subs	r3, r3, r1
 8003d02:	42ab      	cmp	r3, r5
 8003d04:	dcf2      	bgt.n	8003cec <_printf_i+0x220>
 8003d06:	e7eb      	b.n	8003ce0 <_printf_i+0x214>
 8003d08:	2500      	movs	r5, #0
 8003d0a:	f104 0619 	add.w	r6, r4, #25
 8003d0e:	e7f5      	b.n	8003cfc <_printf_i+0x230>
 8003d10:	0800418b 	.word	0x0800418b
 8003d14:	0800419c 	.word	0x0800419c

08003d18 <memchr>:
 8003d18:	4603      	mov	r3, r0
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	b2c9      	uxtb	r1, r1
 8003d1e:	4402      	add	r2, r0
 8003d20:	4293      	cmp	r3, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	d101      	bne.n	8003d2a <memchr+0x12>
 8003d26:	2000      	movs	r0, #0
 8003d28:	e003      	b.n	8003d32 <memchr+0x1a>
 8003d2a:	7804      	ldrb	r4, [r0, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	428c      	cmp	r4, r1
 8003d30:	d1f6      	bne.n	8003d20 <memchr+0x8>
 8003d32:	bd10      	pop	{r4, pc}

08003d34 <memmove>:
 8003d34:	4288      	cmp	r0, r1
 8003d36:	b510      	push	{r4, lr}
 8003d38:	eb01 0402 	add.w	r4, r1, r2
 8003d3c:	d902      	bls.n	8003d44 <memmove+0x10>
 8003d3e:	4284      	cmp	r4, r0
 8003d40:	4623      	mov	r3, r4
 8003d42:	d807      	bhi.n	8003d54 <memmove+0x20>
 8003d44:	1e43      	subs	r3, r0, #1
 8003d46:	42a1      	cmp	r1, r4
 8003d48:	d008      	beq.n	8003d5c <memmove+0x28>
 8003d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d52:	e7f8      	b.n	8003d46 <memmove+0x12>
 8003d54:	4601      	mov	r1, r0
 8003d56:	4402      	add	r2, r0
 8003d58:	428a      	cmp	r2, r1
 8003d5a:	d100      	bne.n	8003d5e <memmove+0x2a>
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d66:	e7f7      	b.n	8003d58 <memmove+0x24>

08003d68 <_free_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	d040      	beq.n	8003df2 <_free_r+0x8a>
 8003d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d74:	1f0c      	subs	r4, r1, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bfb8      	it	lt
 8003d7a:	18e4      	addlt	r4, r4, r3
 8003d7c:	f000 f910 	bl	8003fa0 <__malloc_lock>
 8003d80:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <_free_r+0x8c>)
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	b933      	cbnz	r3, 8003d94 <_free_r+0x2c>
 8003d86:	6063      	str	r3, [r4, #4]
 8003d88:	6014      	str	r4, [r2, #0]
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d90:	f000 b90c 	b.w	8003fac <__malloc_unlock>
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	d908      	bls.n	8003daa <_free_r+0x42>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	1821      	adds	r1, r4, r0
 8003d9c:	428b      	cmp	r3, r1
 8003d9e:	bf01      	itttt	eq
 8003da0:	6819      	ldreq	r1, [r3, #0]
 8003da2:	685b      	ldreq	r3, [r3, #4]
 8003da4:	1809      	addeq	r1, r1, r0
 8003da6:	6021      	streq	r1, [r4, #0]
 8003da8:	e7ed      	b.n	8003d86 <_free_r+0x1e>
 8003daa:	461a      	mov	r2, r3
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b10b      	cbz	r3, 8003db4 <_free_r+0x4c>
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	d9fa      	bls.n	8003daa <_free_r+0x42>
 8003db4:	6811      	ldr	r1, [r2, #0]
 8003db6:	1850      	adds	r0, r2, r1
 8003db8:	42a0      	cmp	r0, r4
 8003dba:	d10b      	bne.n	8003dd4 <_free_r+0x6c>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	4401      	add	r1, r0
 8003dc0:	1850      	adds	r0, r2, r1
 8003dc2:	4283      	cmp	r3, r0
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	d1e0      	bne.n	8003d8a <_free_r+0x22>
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4401      	add	r1, r0
 8003dce:	6011      	str	r1, [r2, #0]
 8003dd0:	6053      	str	r3, [r2, #4]
 8003dd2:	e7da      	b.n	8003d8a <_free_r+0x22>
 8003dd4:	d902      	bls.n	8003ddc <_free_r+0x74>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	e7d6      	b.n	8003d8a <_free_r+0x22>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	1821      	adds	r1, r4, r0
 8003de0:	428b      	cmp	r3, r1
 8003de2:	bf01      	itttt	eq
 8003de4:	6819      	ldreq	r1, [r3, #0]
 8003de6:	685b      	ldreq	r3, [r3, #4]
 8003de8:	1809      	addeq	r1, r1, r0
 8003dea:	6021      	streq	r1, [r4, #0]
 8003dec:	6063      	str	r3, [r4, #4]
 8003dee:	6054      	str	r4, [r2, #4]
 8003df0:	e7cb      	b.n	8003d8a <_free_r+0x22>
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	20000188 	.word	0x20000188

08003df8 <sbrk_aligned>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4e0e      	ldr	r6, [pc, #56]	; (8003e34 <sbrk_aligned+0x3c>)
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	6831      	ldr	r1, [r6, #0]
 8003e00:	4605      	mov	r5, r0
 8003e02:	b911      	cbnz	r1, 8003e0a <sbrk_aligned+0x12>
 8003e04:	f000 f8bc 	bl	8003f80 <_sbrk_r>
 8003e08:	6030      	str	r0, [r6, #0]
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f8b7 	bl	8003f80 <_sbrk_r>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d00a      	beq.n	8003e2c <sbrk_aligned+0x34>
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d007      	beq.n	8003e30 <sbrk_aligned+0x38>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 f8ac 	bl	8003f80 <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d101      	bne.n	8003e30 <sbrk_aligned+0x38>
 8003e2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e30:	4620      	mov	r0, r4
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
 8003e34:	2000018c 	.word	0x2000018c

08003e38 <_malloc_r>:
 8003e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3c:	1ccd      	adds	r5, r1, #3
 8003e3e:	f025 0503 	bic.w	r5, r5, #3
 8003e42:	3508      	adds	r5, #8
 8003e44:	2d0c      	cmp	r5, #12
 8003e46:	bf38      	it	cc
 8003e48:	250c      	movcc	r5, #12
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	4607      	mov	r7, r0
 8003e4e:	db01      	blt.n	8003e54 <_malloc_r+0x1c>
 8003e50:	42a9      	cmp	r1, r5
 8003e52:	d905      	bls.n	8003e60 <_malloc_r+0x28>
 8003e54:	230c      	movs	r3, #12
 8003e56:	2600      	movs	r6, #0
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e60:	4e2e      	ldr	r6, [pc, #184]	; (8003f1c <_malloc_r+0xe4>)
 8003e62:	f000 f89d 	bl	8003fa0 <__malloc_lock>
 8003e66:	6833      	ldr	r3, [r6, #0]
 8003e68:	461c      	mov	r4, r3
 8003e6a:	bb34      	cbnz	r4, 8003eba <_malloc_r+0x82>
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4638      	mov	r0, r7
 8003e70:	f7ff ffc2 	bl	8003df8 <sbrk_aligned>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	4604      	mov	r4, r0
 8003e78:	d14d      	bne.n	8003f16 <_malloc_r+0xde>
 8003e7a:	6834      	ldr	r4, [r6, #0]
 8003e7c:	4626      	mov	r6, r4
 8003e7e:	2e00      	cmp	r6, #0
 8003e80:	d140      	bne.n	8003f04 <_malloc_r+0xcc>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	4631      	mov	r1, r6
 8003e86:	4638      	mov	r0, r7
 8003e88:	eb04 0803 	add.w	r8, r4, r3
 8003e8c:	f000 f878 	bl	8003f80 <_sbrk_r>
 8003e90:	4580      	cmp	r8, r0
 8003e92:	d13a      	bne.n	8003f0a <_malloc_r+0xd2>
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	3503      	adds	r5, #3
 8003e98:	1a6d      	subs	r5, r5, r1
 8003e9a:	f025 0503 	bic.w	r5, r5, #3
 8003e9e:	3508      	adds	r5, #8
 8003ea0:	2d0c      	cmp	r5, #12
 8003ea2:	bf38      	it	cc
 8003ea4:	250c      	movcc	r5, #12
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7ff ffa5 	bl	8003df8 <sbrk_aligned>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d02b      	beq.n	8003f0a <_malloc_r+0xd2>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	442b      	add	r3, r5
 8003eb6:	6023      	str	r3, [r4, #0]
 8003eb8:	e00e      	b.n	8003ed8 <_malloc_r+0xa0>
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	1b52      	subs	r2, r2, r5
 8003ebe:	d41e      	bmi.n	8003efe <_malloc_r+0xc6>
 8003ec0:	2a0b      	cmp	r2, #11
 8003ec2:	d916      	bls.n	8003ef2 <_malloc_r+0xba>
 8003ec4:	1961      	adds	r1, r4, r5
 8003ec6:	42a3      	cmp	r3, r4
 8003ec8:	6025      	str	r5, [r4, #0]
 8003eca:	bf18      	it	ne
 8003ecc:	6059      	strne	r1, [r3, #4]
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	bf08      	it	eq
 8003ed2:	6031      	streq	r1, [r6, #0]
 8003ed4:	5162      	str	r2, [r4, r5]
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f104 060b 	add.w	r6, r4, #11
 8003ede:	f000 f865 	bl	8003fac <__malloc_unlock>
 8003ee2:	f026 0607 	bic.w	r6, r6, #7
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	1af2      	subs	r2, r6, r3
 8003eea:	d0b6      	beq.n	8003e5a <_malloc_r+0x22>
 8003eec:	1b9b      	subs	r3, r3, r6
 8003eee:	50a3      	str	r3, [r4, r2]
 8003ef0:	e7b3      	b.n	8003e5a <_malloc_r+0x22>
 8003ef2:	6862      	ldr	r2, [r4, #4]
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	bf0c      	ite	eq
 8003ef8:	6032      	streq	r2, [r6, #0]
 8003efa:	605a      	strne	r2, [r3, #4]
 8003efc:	e7ec      	b.n	8003ed8 <_malloc_r+0xa0>
 8003efe:	4623      	mov	r3, r4
 8003f00:	6864      	ldr	r4, [r4, #4]
 8003f02:	e7b2      	b.n	8003e6a <_malloc_r+0x32>
 8003f04:	4634      	mov	r4, r6
 8003f06:	6876      	ldr	r6, [r6, #4]
 8003f08:	e7b9      	b.n	8003e7e <_malloc_r+0x46>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	f000 f84c 	bl	8003fac <__malloc_unlock>
 8003f14:	e7a1      	b.n	8003e5a <_malloc_r+0x22>
 8003f16:	6025      	str	r5, [r4, #0]
 8003f18:	e7de      	b.n	8003ed8 <_malloc_r+0xa0>
 8003f1a:	bf00      	nop
 8003f1c:	20000188 	.word	0x20000188

08003f20 <_realloc_r>:
 8003f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f24:	4680      	mov	r8, r0
 8003f26:	4614      	mov	r4, r2
 8003f28:	460e      	mov	r6, r1
 8003f2a:	b921      	cbnz	r1, 8003f36 <_realloc_r+0x16>
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	f7ff bf81 	b.w	8003e38 <_malloc_r>
 8003f36:	b92a      	cbnz	r2, 8003f44 <_realloc_r+0x24>
 8003f38:	f7ff ff16 	bl	8003d68 <_free_r>
 8003f3c:	4625      	mov	r5, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f44:	f000 f838 	bl	8003fb8 <_malloc_usable_size_r>
 8003f48:	4284      	cmp	r4, r0
 8003f4a:	4607      	mov	r7, r0
 8003f4c:	d802      	bhi.n	8003f54 <_realloc_r+0x34>
 8003f4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f52:	d812      	bhi.n	8003f7a <_realloc_r+0x5a>
 8003f54:	4621      	mov	r1, r4
 8003f56:	4640      	mov	r0, r8
 8003f58:	f7ff ff6e 	bl	8003e38 <_malloc_r>
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0ed      	beq.n	8003f3e <_realloc_r+0x1e>
 8003f62:	42bc      	cmp	r4, r7
 8003f64:	4622      	mov	r2, r4
 8003f66:	4631      	mov	r1, r6
 8003f68:	bf28      	it	cs
 8003f6a:	463a      	movcs	r2, r7
 8003f6c:	f7ff fb98 	bl	80036a0 <memcpy>
 8003f70:	4631      	mov	r1, r6
 8003f72:	4640      	mov	r0, r8
 8003f74:	f7ff fef8 	bl	8003d68 <_free_r>
 8003f78:	e7e1      	b.n	8003f3e <_realloc_r+0x1e>
 8003f7a:	4635      	mov	r5, r6
 8003f7c:	e7df      	b.n	8003f3e <_realloc_r+0x1e>
	...

08003f80 <_sbrk_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	2300      	movs	r3, #0
 8003f84:	4d05      	ldr	r5, [pc, #20]	; (8003f9c <_sbrk_r+0x1c>)
 8003f86:	4604      	mov	r4, r0
 8003f88:	4608      	mov	r0, r1
 8003f8a:	602b      	str	r3, [r5, #0]
 8003f8c:	f7fd fa16 	bl	80013bc <_sbrk>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_sbrk_r+0x1a>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_sbrk_r+0x1a>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	20000190 	.word	0x20000190

08003fa0 <__malloc_lock>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	; (8003fa8 <__malloc_lock+0x8>)
 8003fa2:	f000 b811 	b.w	8003fc8 <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	20000194 	.word	0x20000194

08003fac <__malloc_unlock>:
 8003fac:	4801      	ldr	r0, [pc, #4]	; (8003fb4 <__malloc_unlock+0x8>)
 8003fae:	f000 b80c 	b.w	8003fca <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	20000194 	.word	0x20000194

08003fb8 <_malloc_usable_size_r>:
 8003fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fbc:	1f18      	subs	r0, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bfbc      	itt	lt
 8003fc2:	580b      	ldrlt	r3, [r1, r0]
 8003fc4:	18c0      	addlt	r0, r0, r3
 8003fc6:	4770      	bx	lr

08003fc8 <__retarget_lock_acquire_recursive>:
 8003fc8:	4770      	bx	lr

08003fca <__retarget_lock_release_recursive>:
 8003fca:	4770      	bx	lr

08003fcc <_init>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr

08003fd8 <_fini>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	bf00      	nop
 8003fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fde:	bc08      	pop	{r3}
 8003fe0:	469e      	mov	lr, r3
 8003fe2:	4770      	bx	lr
