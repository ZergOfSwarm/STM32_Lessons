
ADC_Multiple_Channels.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005bf8  08005bf8  00015bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006024  08006024  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006024  08006024  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006024  08006024  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800602c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200001dc  08006208  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08006208  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098f2  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de4  00000000  00000000  00029af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e1  00000000  00000000  0002c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000965c  00000000  00000000  00044f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a90  00000000  00000000  0004e585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7015  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000d7068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bdc 	.word	0x08005bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005bdc 	.word	0x08005bdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d013      	beq.n	8000b68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b50:	e000      	b.n	8000b54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	2332      	movs	r3, #50	; 0x32
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <_write+0x48>)
 8000b8a:	f002 f99e 	bl	8002eca <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e009      	b.n	8000ba8 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ffc3 	bl	8000b28 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf1      	blt.n	8000b94 <_write+0x20>
	}
	return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000020c 	.word	0x2000020c

08000bc0 <get_temp>:
float temp;
#define V25 1.43 // from datasheet
#define VSENSE 3.3/4096 // VSENSE value ?????????????????????????????
#define Avg_Slope .0043 // 4.3mV from datasheet
float get_temp (uint32_t variable)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 return (((V25 - (variable*VSENSE)) / Avg_Slope) + 25); // formula from datasheet
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fc0b 	bl	80003e4 <__aeabi_ui2d>
 8000bce:	a31a      	add	r3, pc, #104	; (adr r3, 8000c38 <get_temp+0x78>)
 8000bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd4:	f7ff fc80 	bl	80004d8 <__aeabi_dmul>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4610      	mov	r0, r2
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <get_temp+0x90>)
 8000be6:	f7ff fda1 	bl	800072c <__aeabi_ddiv>
 8000bea:	4602      	mov	r2, r0
 8000bec:	460b      	mov	r3, r1
 8000bee:	a114      	add	r1, pc, #80	; (adr r1, 8000c40 <get_temp+0x80>)
 8000bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bf4:	f7ff fab8 	bl	8000168 <__aeabi_dsub>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	a311      	add	r3, pc, #68	; (adr r3, 8000c48 <get_temp+0x88>)
 8000c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c06:	f7ff fd91 	bl	800072c <__aeabi_ddiv>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4610      	mov	r0, r2
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <get_temp+0x94>)
 8000c18:	f7ff faa8 	bl	800016c <__adddf3>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff ff30 	bl	8000a88 <__aeabi_d2f>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	f3af 8000 	nop.w
 8000c38:	66666666 	.word	0x66666666
 8000c3c:	400a6666 	.word	0x400a6666
 8000c40:	ae147ae1 	.word	0xae147ae1
 8000c44:	3ff6e147 	.word	0x3ff6e147
 8000c48:	75f6fd22 	.word	0x75f6fd22
 8000c4c:	3f719ce0 	.word	0x3f719ce0
 8000c50:	40b00000 	.word	0x40b00000
 8000c54:	40390000 	.word	0x40390000

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f000 fb45 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f835 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 f925 	bl	8000eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6a:	f000 f905 	bl	8000e78 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6e:	f000 f88b 	bl	8000d88 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000c72:	f000 f8d7 	bl	8000e24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 2); // start adc in DMA mode
 8000c76:	2202      	movs	r2, #2
 8000c78:	4910      	ldr	r1, [pc, #64]	; (8000cbc <main+0x64>)
 8000c7a:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <main+0x68>)
 8000c7c:	f000 fc94 	bl	80015a8 <HAL_ADC_Start_DMA>
//	  printf("x4 = %d\r\n",x);

//	  uint8_t high_byte = value[0] & 0xFF;
//	  uint8_t low_byte = (value[0] << 8) & 0xFF;

	  uint8_t high_byte = value[0];
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <main+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	71fb      	strb	r3, [r7, #7]
	  printf("high_byte = %d\r\n",high_byte);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <main+0x6c>)
 8000c8c:	f002 ff1a 	bl	8003ac4 <iprintf>
//	  printf("low_byte = %d\r\n",low_byte);
	  temp = get_temp(value[1]);
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <main+0x64>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff93 	bl	8000bc0 <get_temp>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <main+0x70>)
 8000c9e:	6013      	str	r3, [r2, #0]
	  printf("temp = %lf\n",temp);
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <main+0x70>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fbbf 	bl	8000428 <__aeabi_f2d>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <main+0x74>)
 8000cb0:	f002 ff08 	bl	8003ac4 <iprintf>
	  HAL_Delay(200);
 8000cb4:	20c8      	movs	r0, #200	; 0xc8
 8000cb6:	f000 fb7b 	bl	80013b0 <HAL_Delay>
  {
 8000cba:	e7e1      	b.n	8000c80 <main+0x28>
 8000cbc:	200001f8 	.word	0x200001f8
 8000cc0:	20000254 	.word	0x20000254
 8000cc4:	08005bf8 	.word	0x08005bf8
 8000cc8:	20000250 	.word	0x20000250
 8000ccc:	08005c0c 	.word	0x08005c0c

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fa88 	bl	80031f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000d1c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fbb2 	bl	8002490 <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d32:	f000 f8ed 	bl	8000f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2102      	movs	r1, #2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 fe1c 	bl	8002990 <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d5e:	f000 f8d7 	bl	8000f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d62:	2302      	movs	r3, #2
 8000d64:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 ffa8 	bl	8002cc4 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d7a:	f000 f8c9 	bl	8000f10 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3750      	adds	r7, #80	; 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000d9a:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <MX_ADC1_Init+0x98>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000db4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc6:	4815      	ldr	r0, [pc, #84]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000dc8:	f000 fb16 	bl	80013f8 <HAL_ADC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000dd2:	f000 f89d 	bl	8000f10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000dde:	2307      	movs	r3, #7
 8000de0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000de8:	f000 fcd8 	bl	800179c <HAL_ADC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f000 f88d 	bl	8000f10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000df6:	2310      	movs	r3, #16
 8000df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_ADC1_Init+0x94>)
 8000e04:	f000 fcca 	bl	800179c <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e0e:	f000 f87f 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000254 	.word	0x20000254
 8000e20:	40012400 	.word	0x40012400

08000e24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_USART3_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e5c:	f001 ffe8 	bl	8002e30 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f000 f853 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000020c 	.word	0x2000020c
 8000e74:	40004800 	.word	0x40004800

08000e78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_DMA_Init+0x38>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <MX_DMA_Init+0x38>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_DMA_Init+0x38>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200b      	movs	r0, #11
 8000e9c:	f000 ff4f 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f000 ff68 	bl	8001d76 <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 0320 	and.w	r3, r3, #32
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6193      	str	r3, [r2, #24]
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <MX_GPIO_Init+0x58>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_MspInit+0x60>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_MspInit+0x60>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000

08000f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_ADC_MspInit+0xbc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d149      	bne.n	8001034 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_ADC_MspInit+0xc0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <HAL_ADC_MspInit+0xc4>)
 8000fe0:	f001 f8d2 	bl	8002188 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_ADC_MspInit+0xcc>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8000ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001002:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8001006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 800100e:	2220      	movs	r2, #32
 8001010:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 800101a:	f000 fec7 	bl	8001dac <HAL_DMA_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001024:	f7ff ff74 	bl	8000f10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_ADC_MspInit+0xc8>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40012400 	.word	0x40012400
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800
 8001048:	20000284 	.word	0x20000284
 800104c:	40020008 	.word	0x40020008

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_UART_MspInit+0x8c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d131      	bne.n	80010d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0x90>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0x90>)
 8001076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107a:	61d3      	str	r3, [r2, #28]
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0x90>)
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0x90>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x90>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_MspInit+0x90>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_UART_MspInit+0x94>)
 80010b6:	f001 f867 	bl	8002188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_UART_MspInit+0x94>)
 80010d0:	f001 f85a 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004800 	.word	0x40004800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112e:	f000 f923 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Channel1_IRQHandler+0x10>)
 800113e:	f000 feef 	bl	8001f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000284 	.word	0x20000284

0800114c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <_kill>:

int _kill(int pid, int sig)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001164:	f002 f81c 	bl	80031a0 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	2216      	movs	r2, #22
 800116c:	601a      	str	r2, [r3, #0]
	return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_exit>:

void _exit (int status)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffe7 	bl	800115a <_kill>
	while (1) {}		/* Make sure we hang here */
 800118c:	e7fe      	b.n	800118c <_exit+0x12>

0800118e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	e00a      	b.n	80011b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a0:	f3af 8000 	nop.w
 80011a4:	4601      	mov	r1, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	60ba      	str	r2, [r7, #8]
 80011ac:	b2ca      	uxtb	r2, r1
 80011ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbf0      	blt.n	80011a0 <_read+0x12>
	}

return len;
 80011be:	687b      	ldr	r3, [r7, #4]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	return -1;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ee:	605a      	str	r2, [r3, #4]
	return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <_isatty>:

int _isatty(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f001 ffa2 	bl	80031a0 <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20005000 	.word	0x20005000
 8001288:	00000400 	.word	0x00000400
 800128c:	20000200 	.word	0x20000200
 8001290:	200002e0 	.word	0x200002e0

08001294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c6:	f7ff ffe5 	bl	8001294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f001 ff6f 	bl	80031ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ce:	f7ff fcc3 	bl	8000c58 <main>
  bx lr
 80012d2:	4770      	bx	lr
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80012dc:	0800602c 	.word	0x0800602c
  ldr r2, =_sbss
 80012e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80012e4:	200002dc 	.word	0x200002dc

080012e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x28>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x28>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 fd13 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	200f      	movs	r0, #15
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fe08 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fd2b 	bl	8001d92 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f000 fcf3 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_IncTick+0x20>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000008 	.word	0x20000008
 8001398:	200002c8 	.word	0x200002c8

0800139c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200002c8 	.word	0x200002c8

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff fff0 	bl	800139c <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffe0 	bl	800139c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0be      	b.n	8001598 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fda2 	bl	8000f80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 faff 	bl	8001a40 <ADC_ConversionStop_Disable>
 8001442:	4603      	mov	r3, r0
 8001444:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8099 	bne.w	8001586 <HAL_ADC_Init+0x18e>
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8095 	bne.w	8001586 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001464:	f023 0302 	bic.w	r3, r3, #2
 8001468:	f043 0202 	orr.w	r2, r3, #2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001478:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001480:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4313      	orrs	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001490:	d003      	beq.n	800149a <HAL_ADC_Init+0xa2>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <HAL_ADC_Init+0xa8>
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149e:	e000      	b.n	80014a2 <HAL_ADC_Init+0xaa>
 80014a0:	2300      	movs	r3, #0
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7d1b      	ldrb	r3, [r3, #20]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d119      	bne.n	80014e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	3b01      	subs	r3, #1
 80014be:	035a      	lsls	r2, r3, #13
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e00b      	b.n	80014e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <HAL_ADC_Init+0x1a8>)
 8001500:	4013      	ands	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	430b      	orrs	r3, r1
 800150a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001514:	d003      	beq.n	800151e <HAL_ADC_Init+0x126>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d104      	bne.n	8001528 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	3b01      	subs	r3, #1
 8001524:	051b      	lsls	r3, r3, #20
 8001526:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	430a      	orrs	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_ADC_Init+0x1ac>)
 8001544:	4013      	ands	r3, r2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	f023 0303 	bic.w	r3, r3, #3
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001562:	e018      	b.n	8001596 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f023 0312 	bic.w	r3, r3, #18
 800156c:	f043 0210 	orr.w	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001584:	e007      	b.n	8001596 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f043 0210 	orr.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001596:	7dfb      	ldrb	r3, [r7, #23]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	ffe1f7fd 	.word	0xffe1f7fd
 80015a4:	ff1f0efe 	.word	0xff1f0efe

080015a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a64      	ldr	r2, [pc, #400]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_Start_DMA+0x24>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a63      	ldr	r2, [pc, #396]	; (8001754 <HAL_ADC_Start_DMA+0x1ac>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d106      	bne.n	80015da <HAL_ADC_Start_DMA+0x32>
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f040 80b3 	bne.w	8001740 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x40>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e0ae      	b.n	8001746 <HAL_ADC_Start_DMA+0x19e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f9cb 	bl	800198c <ADC_Enable>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 809a 	bne.w	8001736 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_ADC_Start_DMA+0x1ac>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d105      	bne.n	800162c <HAL_ADC_Start_DMA+0x84>
 8001620:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d115      	bne.n	8001658 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	2b00      	cmp	r3, #0
 8001644:	d026      	beq.n	8001694 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800164e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001656:	e01d      	b.n	8001694 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d004      	beq.n	8001678 <HAL_ADC_Start_DMA+0xd0>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <HAL_ADC_Start_DMA+0x1ac>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d10d      	bne.n	8001694 <HAL_ADC_Start_DMA+0xec>
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800168c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f023 0206 	bic.w	r2, r3, #6
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_ADC_Start_DMA+0x1b0>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a24      	ldr	r2, [pc, #144]	; (800175c <HAL_ADC_Start_DMA+0x1b4>)
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_ADC_Start_DMA+0x1b8>)
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0202 	mvn.w	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a18      	ldr	r0, [r3, #32]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	334c      	adds	r3, #76	; 0x4c
 80016f8:	4619      	mov	r1, r3
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f000 fbaf 	bl	8001e60 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800170c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001710:	d108      	bne.n	8001724 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001720:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001722:	e00f      	b.n	8001744 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001732:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001734:	e006      	b.n	8001744 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800173e:	e001      	b.n	8001744 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40012400 	.word	0x40012400
 8001754:	40012800 	.word	0x40012800
 8001758:	08001ac3 	.word	0x08001ac3
 800175c:	08001b3f 	.word	0x08001b3f
 8001760:	08001b5b 	.word	0x08001b5b

08001764 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
	...

0800179c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x20>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e0dc      	b.n	8001976 <HAL_ADC_ConfigChannel+0x1da>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b06      	cmp	r3, #6
 80017ca:	d81c      	bhi.n	8001806 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b05      	subs	r3, #5
 80017de:	221f      	movs	r2, #31
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4019      	ands	r1, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3b05      	subs	r3, #5
 80017f8:	fa00 f203 	lsl.w	r2, r0, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	e03c      	b.n	8001880 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d81c      	bhi.n	8001848 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b23      	subs	r3, #35	; 0x23
 8001820:	221f      	movs	r2, #31
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	4019      	ands	r1, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3b23      	subs	r3, #35	; 0x23
 800183a:	fa00 f203 	lsl.w	r2, r0, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
 8001846:	e01b      	b.n	8001880 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b41      	subs	r3, #65	; 0x41
 800185a:	221f      	movs	r2, #31
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	4019      	ands	r1, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3b41      	subs	r3, #65	; 0x41
 8001874:	fa00 f203 	lsl.w	r2, r0, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b09      	cmp	r3, #9
 8001886:	d91c      	bls.n	80018c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68d9      	ldr	r1, [r3, #12]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	3b1e      	subs	r3, #30
 800189a:	2207      	movs	r2, #7
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4019      	ands	r1, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6898      	ldr	r0, [r3, #8]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	3b1e      	subs	r3, #30
 80018b4:	fa00 f203 	lsl.w	r2, r0, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	e019      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6919      	ldr	r1, [r3, #16]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	2207      	movs	r2, #7
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	4019      	ands	r1, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6898      	ldr	r0, [r3, #8]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	fa00 f203 	lsl.w	r2, r0, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d003      	beq.n	8001906 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001902:	2b11      	cmp	r3, #17
 8001904:	d132      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_ADC_ConfigChannel+0x1e4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d125      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d126      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800192c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b10      	cmp	r3, #16
 8001934:	d11a      	bne.n	800196c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_ADC_ConfigChannel+0x1e8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <HAL_ADC_ConfigChannel+0x1ec>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	0c9a      	lsrs	r2, r3, #18
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194c:	e002      	b.n	8001954 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3b01      	subs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <HAL_ADC_ConfigChannel+0x1b2>
 800195a:	e007      	b.n	800196c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40012400 	.word	0x40012400
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d040      	beq.n	8001a2c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <ADC_Enable+0xac>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <ADC_Enable+0xb0>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	0c9b      	lsrs	r3, r3, #18
 80019c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019c8:	e002      	b.n	80019d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019d6:	f7ff fce1 	bl	800139c <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019dc:	e01f      	b.n	8001a1e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019de:	f7ff fcdd 	bl	800139c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d918      	bls.n	8001a1e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d011      	beq.n	8001a1e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e007      	b.n	8001a2e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d1d8      	bne.n	80019de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d12e      	bne.n	8001ab8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff fc97 	bl	800139c <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a70:	e01b      	b.n	8001aaa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a72:	f7ff fc93 	bl	800139c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d914      	bls.n	8001aaa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10d      	bne.n	8001aaa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f043 0210 	orr.w	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e007      	b.n	8001aba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d0dc      	beq.n	8001a72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d127      	bne.n	8001b2c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001af2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001af6:	d115      	bne.n	8001b24 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d111      	bne.n	8001b24 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fe1d 	bl	8001764 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b2a:	e004      	b.n	8001b36 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff fe12 	bl	8001776 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff fe01 	bl	8001788 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <__NVIC_SetPriorityGrouping>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <__NVIC_EnableIRQ+0x34>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Config>:
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d08:	f7ff ff90 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff2d 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff42 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff90 	bl	8001c80 <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5f 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff35 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e043      	b.n	8001e4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_DMA_Init+0xa8>)
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_DMA_Init+0xac>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	009a      	lsls	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_DMA_Init+0xb0>)
 8001dde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001df6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	bffdfff8 	.word	0xbffdfff8
 8001e58:	cccccccd 	.word	0xcccccccd
 8001e5c:	40020000 	.word	0x40020000

08001e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA_Start_IT+0x20>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e04a      	b.n	8001f16 <HAL_DMA_Start_IT+0xb6>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d13a      	bne.n	8001f08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f938 	bl	800212c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 020e 	orr.w	r2, r2, #14
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e00f      	b.n	8001ef6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0204 	bic.w	r2, r2, #4
 8001ee4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 020a 	orr.w	r2, r2, #10
 8001ef4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e005      	b.n	8001f14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
 8001f12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d04f      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xc8>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a66      	ldr	r2, [pc, #408]	; (8002110 <HAL_DMA_IRQHandler+0x1f0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d029      	beq.n	8001fce <HAL_DMA_IRQHandler+0xae>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_DMA_IRQHandler+0x1f4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_IRQHandler+0xaa>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a63      	ldr	r2, [pc, #396]	; (8002118 <HAL_DMA_IRQHandler+0x1f8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xa4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a62      	ldr	r2, [pc, #392]	; (800211c <HAL_DMA_IRQHandler+0x1fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x9e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a60      	ldr	r2, [pc, #384]	; (8002120 <HAL_DMA_IRQHandler+0x200>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x98>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <HAL_DMA_IRQHandler+0x204>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x92>
 8001fac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fb6:	e00b      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fbc:	e008      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc2:	e005      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc8:	e002      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fca:	2340      	movs	r3, #64	; 0x40
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	4a55      	ldr	r2, [pc, #340]	; (8002128 <HAL_DMA_IRQHandler+0x208>)
 8001fd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8094 	beq.w	8002106 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	e08e      	b.n	8002106 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	2202      	movs	r2, #2
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d056      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x186>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d051      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020a 	bic.w	r2, r2, #10
 800201e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_DMA_IRQHandler+0x1f0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d029      	beq.n	8002086 <HAL_DMA_IRQHandler+0x166>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_DMA_IRQHandler+0x1f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <HAL_DMA_IRQHandler+0x162>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a35      	ldr	r2, [pc, #212]	; (8002118 <HAL_DMA_IRQHandler+0x1f8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01a      	beq.n	800207c <HAL_DMA_IRQHandler+0x15c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <HAL_DMA_IRQHandler+0x1fc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d012      	beq.n	8002076 <HAL_DMA_IRQHandler+0x156>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_DMA_IRQHandler+0x200>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00a      	beq.n	8002070 <HAL_DMA_IRQHandler+0x150>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_DMA_IRQHandler+0x204>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d102      	bne.n	800206a <HAL_DMA_IRQHandler+0x14a>
 8002064:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002068:	e00e      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 800206a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206e:	e00b      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002074:	e008      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207a:	e005      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 800207c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002080:	e002      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002082:	2320      	movs	r3, #32
 8002084:	e000      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002086:	2302      	movs	r3, #2
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <HAL_DMA_IRQHandler+0x208>)
 800208a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d034      	beq.n	8002106 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020a4:	e02f      	b.n	8002106 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d028      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1e8>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 020e 	bic.w	r2, r2, #14
 80020ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
    }
  }
  return;
 8002106:	bf00      	nop
 8002108:	bf00      	nop
}
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40020008 	.word	0x40020008
 8002114:	4002001c 	.word	0x4002001c
 8002118:	40020030 	.word	0x40020030
 800211c:	40020044 	.word	0x40020044
 8002120:	40020058 	.word	0x40020058
 8002124:	4002006c 	.word	0x4002006c
 8002128:	40020000 	.word	0x40020000

0800212c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d108      	bne.n	800216c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800216a:	e007      	b.n	800217c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b08b      	sub	sp, #44	; 0x2c
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	e169      	b.n	8002470 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800219c:	2201      	movs	r2, #1
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f040 8158 	bne.w	800246a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a9a      	ldr	r2, [pc, #616]	; (8002428 <HAL_GPIO_Init+0x2a0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d05e      	beq.n	8002282 <HAL_GPIO_Init+0xfa>
 80021c4:	4a98      	ldr	r2, [pc, #608]	; (8002428 <HAL_GPIO_Init+0x2a0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d875      	bhi.n	80022b6 <HAL_GPIO_Init+0x12e>
 80021ca:	4a98      	ldr	r2, [pc, #608]	; (800242c <HAL_GPIO_Init+0x2a4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d058      	beq.n	8002282 <HAL_GPIO_Init+0xfa>
 80021d0:	4a96      	ldr	r2, [pc, #600]	; (800242c <HAL_GPIO_Init+0x2a4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d86f      	bhi.n	80022b6 <HAL_GPIO_Init+0x12e>
 80021d6:	4a96      	ldr	r2, [pc, #600]	; (8002430 <HAL_GPIO_Init+0x2a8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d052      	beq.n	8002282 <HAL_GPIO_Init+0xfa>
 80021dc:	4a94      	ldr	r2, [pc, #592]	; (8002430 <HAL_GPIO_Init+0x2a8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d869      	bhi.n	80022b6 <HAL_GPIO_Init+0x12e>
 80021e2:	4a94      	ldr	r2, [pc, #592]	; (8002434 <HAL_GPIO_Init+0x2ac>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d04c      	beq.n	8002282 <HAL_GPIO_Init+0xfa>
 80021e8:	4a92      	ldr	r2, [pc, #584]	; (8002434 <HAL_GPIO_Init+0x2ac>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d863      	bhi.n	80022b6 <HAL_GPIO_Init+0x12e>
 80021ee:	4a92      	ldr	r2, [pc, #584]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d046      	beq.n	8002282 <HAL_GPIO_Init+0xfa>
 80021f4:	4a90      	ldr	r2, [pc, #576]	; (8002438 <HAL_GPIO_Init+0x2b0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d85d      	bhi.n	80022b6 <HAL_GPIO_Init+0x12e>
 80021fa:	2b12      	cmp	r3, #18
 80021fc:	d82a      	bhi.n	8002254 <HAL_GPIO_Init+0xcc>
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d859      	bhi.n	80022b6 <HAL_GPIO_Init+0x12e>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <HAL_GPIO_Init+0x80>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002283 	.word	0x08002283
 800220c:	0800225d 	.word	0x0800225d
 8002210:	0800226f 	.word	0x0800226f
 8002214:	080022b1 	.word	0x080022b1
 8002218:	080022b7 	.word	0x080022b7
 800221c:	080022b7 	.word	0x080022b7
 8002220:	080022b7 	.word	0x080022b7
 8002224:	080022b7 	.word	0x080022b7
 8002228:	080022b7 	.word	0x080022b7
 800222c:	080022b7 	.word	0x080022b7
 8002230:	080022b7 	.word	0x080022b7
 8002234:	080022b7 	.word	0x080022b7
 8002238:	080022b7 	.word	0x080022b7
 800223c:	080022b7 	.word	0x080022b7
 8002240:	080022b7 	.word	0x080022b7
 8002244:	080022b7 	.word	0x080022b7
 8002248:	080022b7 	.word	0x080022b7
 800224c:	08002265 	.word	0x08002265
 8002250:	08002279 	.word	0x08002279
 8002254:	4a79      	ldr	r2, [pc, #484]	; (800243c <HAL_GPIO_Init+0x2b4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800225a:	e02c      	b.n	80022b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	623b      	str	r3, [r7, #32]
          break;
 8002262:	e029      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	3304      	adds	r3, #4
 800226a:	623b      	str	r3, [r7, #32]
          break;
 800226c:	e024      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	3308      	adds	r3, #8
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e01f      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	330c      	adds	r3, #12
 800227e:	623b      	str	r3, [r7, #32]
          break;
 8002280:	e01a      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800228a:	2304      	movs	r3, #4
 800228c:	623b      	str	r3, [r7, #32]
          break;
 800228e:	e013      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002298:	2308      	movs	r3, #8
 800229a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	611a      	str	r2, [r3, #16]
          break;
 80022a2:	e009      	b.n	80022b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a4:	2308      	movs	r3, #8
 80022a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69fa      	ldr	r2, [r7, #28]
 80022ac:	615a      	str	r2, [r3, #20]
          break;
 80022ae:	e003      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
          break;
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x130>
          break;
 80022b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2bff      	cmp	r3, #255	; 0xff
 80022bc:	d801      	bhi.n	80022c2 <HAL_GPIO_Init+0x13a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	e001      	b.n	80022c6 <HAL_GPIO_Init+0x13e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2bff      	cmp	r3, #255	; 0xff
 80022cc:	d802      	bhi.n	80022d4 <HAL_GPIO_Init+0x14c>
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	e002      	b.n	80022da <HAL_GPIO_Init+0x152>
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	3b08      	subs	r3, #8
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	210f      	movs	r1, #15
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	6a39      	ldr	r1, [r7, #32]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	431a      	orrs	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80b1 	beq.w	800246a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_GPIO_Init+0x2b8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_GPIO_Init+0x2b8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_GPIO_Init+0x2b8>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002320:	4a48      	ldr	r2, [pc, #288]	; (8002444 <HAL_GPIO_Init+0x2bc>)
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	220f      	movs	r2, #15
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a40      	ldr	r2, [pc, #256]	; (8002448 <HAL_GPIO_Init+0x2c0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d013      	beq.n	8002374 <HAL_GPIO_Init+0x1ec>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3f      	ldr	r2, [pc, #252]	; (800244c <HAL_GPIO_Init+0x2c4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00d      	beq.n	8002370 <HAL_GPIO_Init+0x1e8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <HAL_GPIO_Init+0x2c8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d007      	beq.n	800236c <HAL_GPIO_Init+0x1e4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <HAL_GPIO_Init+0x2cc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_GPIO_Init+0x1e0>
 8002364:	2303      	movs	r3, #3
 8002366:	e006      	b.n	8002376 <HAL_GPIO_Init+0x1ee>
 8002368:	2304      	movs	r3, #4
 800236a:	e004      	b.n	8002376 <HAL_GPIO_Init+0x1ee>
 800236c:	2302      	movs	r3, #2
 800236e:	e002      	b.n	8002376 <HAL_GPIO_Init+0x1ee>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_GPIO_Init+0x1ee>
 8002374:	2300      	movs	r3, #0
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	f002 0203 	and.w	r2, r2, #3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4093      	lsls	r3, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002386:	492f      	ldr	r1, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x2bc>)
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	492c      	ldr	r1, [pc, #176]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4928      	ldr	r1, [pc, #160]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4922      	ldr	r1, [pc, #136]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	43db      	mvns	r3, r3
 80023de:	491e      	ldr	r1, [pc, #120]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4918      	ldr	r1, [pc, #96]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	43db      	mvns	r3, r3
 8002406:	4914      	ldr	r1, [pc, #80]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 8002408:	4013      	ands	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d021      	beq.n	800245c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	490e      	ldr	r1, [pc, #56]	; (8002458 <HAL_GPIO_Init+0x2d0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e021      	b.n	800246a <HAL_GPIO_Init+0x2e2>
 8002426:	bf00      	nop
 8002428:	10320000 	.word	0x10320000
 800242c:	10310000 	.word	0x10310000
 8002430:	10220000 	.word	0x10220000
 8002434:	10210000 	.word	0x10210000
 8002438:	10120000 	.word	0x10120000
 800243c:	10110000 	.word	0x10110000
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000
 8002448:	40010800 	.word	0x40010800
 800244c:	40010c00 	.word	0x40010c00
 8002450:	40011000 	.word	0x40011000
 8002454:	40011400 	.word	0x40011400
 8002458:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_GPIO_Init+0x304>)
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	43db      	mvns	r3, r3
 8002464:	4909      	ldr	r1, [pc, #36]	; (800248c <HAL_GPIO_Init+0x304>)
 8002466:	4013      	ands	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	3301      	adds	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	f47f ae8e 	bne.w	800219c <HAL_GPIO_Init+0x14>
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	372c      	adds	r7, #44	; 0x2c
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40010400 	.word	0x40010400

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e26c      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8087 	beq.w	80025be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b0:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d00c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024bc:	4b8f      	ldr	r3, [pc, #572]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d112      	bne.n	80024ee <HAL_RCC_OscConfig+0x5e>
 80024c8:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d10b      	bne.n	80024ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d6:	4b89      	ldr	r3, [pc, #548]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d06c      	beq.n	80025bc <HAL_RCC_OscConfig+0x12c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d168      	bne.n	80025bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e246      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x76>
 80024f8:	4b80      	ldr	r3, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7f      	ldr	r2, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e02e      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7a      	ldr	r2, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b78      	ldr	r3, [pc, #480]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0xbc>
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 800254c:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6a      	ldr	r2, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a67      	ldr	r2, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe ff16 	bl	800139c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe ff12 	bl	800139c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1fa      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xe4>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe ff02 	bl	800139c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe fefe 	bl	800139c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1e6      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x10c>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x18c>
 80025e2:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x176>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1ba      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4939      	ldr	r1, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe feb7 	bl	800139c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe feb3 	bl	800139c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e19b      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4927      	ldr	r1, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fe96 	bl	800139c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe fe92 	bl	800139c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e17a      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d03a      	beq.n	8002714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d019      	beq.n	80026da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7fe fe76 	bl	800139c <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b4:	f7fe fe72 	bl	800139c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e15a      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f000 fad8 	bl	8002c88 <RCC_Delay>
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe fe5c 	bl	800139c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e6:	e00f      	b.n	8002708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe fe58 	bl	800139c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d908      	bls.n	8002708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e140      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	42420000 	.word	0x42420000
 8002704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	4b9e      	ldr	r3, [pc, #632]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e9      	bne.n	80026e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a6 	beq.w	800286e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b97      	ldr	r3, [pc, #604]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b94      	ldr	r3, [pc, #592]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a93      	ldr	r2, [pc, #588]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b91      	ldr	r3, [pc, #580]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a8a      	ldr	r2, [pc, #552]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe fe19 	bl	800139c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe fe15 	bl	800139c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0fd      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x312>
 8002794:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_OscConfig+0x36e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x334>
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a75      	ldr	r2, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	e01c      	b.n	80027fe <HAL_RCC_OscConfig+0x36e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x356>
 80027cc:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a6c      	ldr	r2, [pc, #432]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a69      	ldr	r2, [pc, #420]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x36e>
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a66      	ldr	r2, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a63      	ldr	r2, [pc, #396]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d015      	beq.n	8002832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe fdc9 	bl	800139c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fdc5 	bl	800139c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ab      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	4b57      	ldr	r3, [pc, #348]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCC_OscConfig+0x37e>
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fdb3 	bl	800139c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fdaf 	bl	800139c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e095      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ee      	bne.n	800283a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a47      	ldr	r2, [pc, #284]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8081 	beq.w	800297a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d061      	beq.n	8002948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d146      	bne.n	800291a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x4fc>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fd83 	bl	800139c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fd7f 	bl	800139c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e067      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ac:	4b35      	ldr	r3, [pc, #212]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	492d      	ldr	r1, [pc, #180]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a19      	ldr	r1, [r3, #32]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	430b      	orrs	r3, r1
 80028e6:	4927      	ldr	r1, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x4fc>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fd53 	bl	800139c <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fd4f 	bl	800139c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e037      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x46a>
 8002918:	e02f      	b.n	800297a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x4fc>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fd3c 	bl	800139c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fd38 	bl	800139c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e020      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x498>
 8002946:	e018      	b.n	800297a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e013      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	42420060 	.word	0x42420060

08002990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d0      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4965      	ldr	r1, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d040      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d115      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e073      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06b      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fc8c 	bl	800139c <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fc88 	bl	800139c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e053      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d210      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4922      	ldr	r1, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1cc>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fbea 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08005c28 	.word	0x08005c28
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b490      	push	{r4, r7}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b6c:	1d3c      	adds	r4, r7, #4
 8002b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b74:	f240 2301 	movw	r3, #513	; 0x201
 8002b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x46>
 8002ba2:	e02d      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba6:	623b      	str	r3, [r7, #32]
      break;
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c5b      	lsrs	r3, r3, #17
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be2:	fb02 f203 	mul.w	r2, r2, r3
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	e004      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	623b      	str	r3, [r7, #32]
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c02:	623b      	str	r3, [r7, #32]
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc90      	pop	{r4, r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	08005c18 	.word	0x08005c18
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	007a1200 	.word	0x007a1200
 8002c20:	003d0900 	.word	0x003d0900

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	20000000 	.word	0x20000000

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff2 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08005c38 	.word	0x08005c38

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c64:	f7ff ffde 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	0adb      	lsrs	r3, r3, #11
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	08005c38 	.word	0x08005c38

08002c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <RCC_Delay+0x34>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <RCC_Delay+0x38>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0a5b      	lsrs	r3, r3, #9
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ca4:	bf00      	nop
  }
  while (Delay --);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1e5a      	subs	r2, r3, #1
 8002caa:	60fa      	str	r2, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f9      	bne.n	8002ca4 <RCC_Delay+0x1c>
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	10624dd3 	.word	0x10624dd3

08002cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d07d      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	61d3      	str	r3, [r2, #28]
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d118      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a42      	ldr	r2, [pc, #264]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d24:	f7fe fb3a 	bl	800139c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe fb36 	bl	800139c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e06d      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d4a:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02e      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d027      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d68:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d014      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fb05 	bl	800139c <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe fb01 	bl	800139c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e036      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ee      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4917      	ldr	r1, [pc, #92]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	490b      	ldr	r1, [pc, #44]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4904      	ldr	r1, [pc, #16]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42420440 	.word	0x42420440

08002e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e03f      	b.n	8002ec2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe f8fa 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f905 	bl	8003084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08a      	sub	sp, #40	; 0x28
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d17c      	bne.n	8002fe4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_UART_Transmit+0x2c>
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e075      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Transmit+0x3e>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e06e      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe fa3d 	bl	800139c <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d108      	bne.n	8002f4c <HAL_UART_Transmit+0x82>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	e003      	b.n	8002f54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f5c:	e02a      	b.n	8002fb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f840 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e036      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3302      	adds	r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	e007      	b.n	8002fa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1cf      	bne.n	8002f5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f810 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e006      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	e02c      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003006:	d028      	beq.n	800305a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x30>
 800300e:	f7fe f9c5 	bl	800139c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	429a      	cmp	r2, r3
 800301c:	d21d      	bcs.n	800305a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800302c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e00f      	b.n	800307a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4013      	ands	r3, r2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	429a      	cmp	r2, r3
 8003068:	bf0c      	ite	eq
 800306a:	2301      	moveq	r3, #1
 800306c:	2300      	movne	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	429a      	cmp	r2, r3
 8003076:	d0c3      	beq.n	8003000 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030be:	f023 030c 	bic.w	r3, r3, #12
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <UART_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7ff fdb8 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	e002      	b.n	80030fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7ff fda0 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <UART_SetConfig+0x118>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	0119      	lsls	r1, r3, #4
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <UART_SetConfig+0x118>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	; 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <UART_SetConfig+0x118>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003150:	4419      	add	r1, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <UART_SetConfig+0x118>)
 800316a:	fba3 0302 	umull	r0, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	440a      	add	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013800 	.word	0x40013800
 800319c:	51eb851f 	.word	0x51eb851f

080031a0 <__errno>:
 80031a0:	4b01      	ldr	r3, [pc, #4]	; (80031a8 <__errno+0x8>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000000c 	.word	0x2000000c

080031ac <__libc_init_array>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	2600      	movs	r6, #0
 80031b0:	4d0c      	ldr	r5, [pc, #48]	; (80031e4 <__libc_init_array+0x38>)
 80031b2:	4c0d      	ldr	r4, [pc, #52]	; (80031e8 <__libc_init_array+0x3c>)
 80031b4:	1b64      	subs	r4, r4, r5
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	42a6      	cmp	r6, r4
 80031ba:	d109      	bne.n	80031d0 <__libc_init_array+0x24>
 80031bc:	f002 fd0e 	bl	8005bdc <_init>
 80031c0:	2600      	movs	r6, #0
 80031c2:	4d0a      	ldr	r5, [pc, #40]	; (80031ec <__libc_init_array+0x40>)
 80031c4:	4c0a      	ldr	r4, [pc, #40]	; (80031f0 <__libc_init_array+0x44>)
 80031c6:	1b64      	subs	r4, r4, r5
 80031c8:	10a4      	asrs	r4, r4, #2
 80031ca:	42a6      	cmp	r6, r4
 80031cc:	d105      	bne.n	80031da <__libc_init_array+0x2e>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d4:	4798      	blx	r3
 80031d6:	3601      	adds	r6, #1
 80031d8:	e7ee      	b.n	80031b8 <__libc_init_array+0xc>
 80031da:	f855 3b04 	ldr.w	r3, [r5], #4
 80031de:	4798      	blx	r3
 80031e0:	3601      	adds	r6, #1
 80031e2:	e7f2      	b.n	80031ca <__libc_init_array+0x1e>
 80031e4:	08006024 	.word	0x08006024
 80031e8:	08006024 	.word	0x08006024
 80031ec:	08006024 	.word	0x08006024
 80031f0:	08006028 	.word	0x08006028

080031f4 <memset>:
 80031f4:	4603      	mov	r3, r0
 80031f6:	4402      	add	r2, r0
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d100      	bne.n	80031fe <memset+0xa>
 80031fc:	4770      	bx	lr
 80031fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003202:	e7f9      	b.n	80031f8 <memset+0x4>

08003204 <__cvt>:
 8003204:	2b00      	cmp	r3, #0
 8003206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800320a:	461f      	mov	r7, r3
 800320c:	bfbb      	ittet	lt
 800320e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003212:	461f      	movlt	r7, r3
 8003214:	2300      	movge	r3, #0
 8003216:	232d      	movlt	r3, #45	; 0x2d
 8003218:	b088      	sub	sp, #32
 800321a:	4614      	mov	r4, r2
 800321c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800321e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003220:	7013      	strb	r3, [r2, #0]
 8003222:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003224:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003228:	f023 0820 	bic.w	r8, r3, #32
 800322c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003230:	d005      	beq.n	800323e <__cvt+0x3a>
 8003232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003236:	d100      	bne.n	800323a <__cvt+0x36>
 8003238:	3501      	adds	r5, #1
 800323a:	2302      	movs	r3, #2
 800323c:	e000      	b.n	8003240 <__cvt+0x3c>
 800323e:	2303      	movs	r3, #3
 8003240:	aa07      	add	r2, sp, #28
 8003242:	9204      	str	r2, [sp, #16]
 8003244:	aa06      	add	r2, sp, #24
 8003246:	e9cd a202 	strd	sl, r2, [sp, #8]
 800324a:	e9cd 3500 	strd	r3, r5, [sp]
 800324e:	4622      	mov	r2, r4
 8003250:	463b      	mov	r3, r7
 8003252:	f000 fcdd 	bl	8003c10 <_dtoa_r>
 8003256:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800325a:	4606      	mov	r6, r0
 800325c:	d102      	bne.n	8003264 <__cvt+0x60>
 800325e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003260:	07db      	lsls	r3, r3, #31
 8003262:	d522      	bpl.n	80032aa <__cvt+0xa6>
 8003264:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003268:	eb06 0905 	add.w	r9, r6, r5
 800326c:	d110      	bne.n	8003290 <__cvt+0x8c>
 800326e:	7833      	ldrb	r3, [r6, #0]
 8003270:	2b30      	cmp	r3, #48	; 0x30
 8003272:	d10a      	bne.n	800328a <__cvt+0x86>
 8003274:	2200      	movs	r2, #0
 8003276:	2300      	movs	r3, #0
 8003278:	4620      	mov	r0, r4
 800327a:	4639      	mov	r1, r7
 800327c:	f7fd fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8003280:	b918      	cbnz	r0, 800328a <__cvt+0x86>
 8003282:	f1c5 0501 	rsb	r5, r5, #1
 8003286:	f8ca 5000 	str.w	r5, [sl]
 800328a:	f8da 3000 	ldr.w	r3, [sl]
 800328e:	4499      	add	r9, r3
 8003290:	2200      	movs	r2, #0
 8003292:	2300      	movs	r3, #0
 8003294:	4620      	mov	r0, r4
 8003296:	4639      	mov	r1, r7
 8003298:	f7fd fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800329c:	b108      	cbz	r0, 80032a2 <__cvt+0x9e>
 800329e:	f8cd 901c 	str.w	r9, [sp, #28]
 80032a2:	2230      	movs	r2, #48	; 0x30
 80032a4:	9b07      	ldr	r3, [sp, #28]
 80032a6:	454b      	cmp	r3, r9
 80032a8:	d307      	bcc.n	80032ba <__cvt+0xb6>
 80032aa:	4630      	mov	r0, r6
 80032ac:	9b07      	ldr	r3, [sp, #28]
 80032ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032b0:	1b9b      	subs	r3, r3, r6
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	b008      	add	sp, #32
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	9107      	str	r1, [sp, #28]
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e7f0      	b.n	80032a4 <__cvt+0xa0>

080032c2 <__exponent>:
 80032c2:	4603      	mov	r3, r0
 80032c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032c6:	2900      	cmp	r1, #0
 80032c8:	f803 2b02 	strb.w	r2, [r3], #2
 80032cc:	bfb6      	itet	lt
 80032ce:	222d      	movlt	r2, #45	; 0x2d
 80032d0:	222b      	movge	r2, #43	; 0x2b
 80032d2:	4249      	neglt	r1, r1
 80032d4:	2909      	cmp	r1, #9
 80032d6:	7042      	strb	r2, [r0, #1]
 80032d8:	dd2b      	ble.n	8003332 <__exponent+0x70>
 80032da:	f10d 0407 	add.w	r4, sp, #7
 80032de:	46a4      	mov	ip, r4
 80032e0:	270a      	movs	r7, #10
 80032e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80032e6:	460a      	mov	r2, r1
 80032e8:	46a6      	mov	lr, r4
 80032ea:	fb07 1516 	mls	r5, r7, r6, r1
 80032ee:	2a63      	cmp	r2, #99	; 0x63
 80032f0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80032f4:	4631      	mov	r1, r6
 80032f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80032fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80032fe:	dcf0      	bgt.n	80032e2 <__exponent+0x20>
 8003300:	3130      	adds	r1, #48	; 0x30
 8003302:	f1ae 0502 	sub.w	r5, lr, #2
 8003306:	f804 1c01 	strb.w	r1, [r4, #-1]
 800330a:	4629      	mov	r1, r5
 800330c:	1c44      	adds	r4, r0, #1
 800330e:	4561      	cmp	r1, ip
 8003310:	d30a      	bcc.n	8003328 <__exponent+0x66>
 8003312:	f10d 0209 	add.w	r2, sp, #9
 8003316:	eba2 020e 	sub.w	r2, r2, lr
 800331a:	4565      	cmp	r5, ip
 800331c:	bf88      	it	hi
 800331e:	2200      	movhi	r2, #0
 8003320:	4413      	add	r3, r2
 8003322:	1a18      	subs	r0, r3, r0
 8003324:	b003      	add	sp, #12
 8003326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003328:	f811 2b01 	ldrb.w	r2, [r1], #1
 800332c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003330:	e7ed      	b.n	800330e <__exponent+0x4c>
 8003332:	2330      	movs	r3, #48	; 0x30
 8003334:	3130      	adds	r1, #48	; 0x30
 8003336:	7083      	strb	r3, [r0, #2]
 8003338:	70c1      	strb	r1, [r0, #3]
 800333a:	1d03      	adds	r3, r0, #4
 800333c:	e7f1      	b.n	8003322 <__exponent+0x60>
	...

08003340 <_printf_float>:
 8003340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003344:	b091      	sub	sp, #68	; 0x44
 8003346:	460c      	mov	r4, r1
 8003348:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800334c:	4616      	mov	r6, r2
 800334e:	461f      	mov	r7, r3
 8003350:	4605      	mov	r5, r0
 8003352:	f001 fb41 	bl	80049d8 <_localeconv_r>
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	9309      	str	r3, [sp, #36]	; 0x24
 800335c:	f7fc fef8 	bl	8000150 <strlen>
 8003360:	2300      	movs	r3, #0
 8003362:	930e      	str	r3, [sp, #56]	; 0x38
 8003364:	f8d8 3000 	ldr.w	r3, [r8]
 8003368:	900a      	str	r0, [sp, #40]	; 0x28
 800336a:	3307      	adds	r3, #7
 800336c:	f023 0307 	bic.w	r3, r3, #7
 8003370:	f103 0208 	add.w	r2, r3, #8
 8003374:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003378:	f8d4 b000 	ldr.w	fp, [r4]
 800337c:	f8c8 2000 	str.w	r2, [r8]
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003388:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800338c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003390:	930b      	str	r3, [sp, #44]	; 0x2c
 8003392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003396:	4640      	mov	r0, r8
 8003398:	4b9c      	ldr	r3, [pc, #624]	; (800360c <_printf_float+0x2cc>)
 800339a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800339c:	f7fd fb36 	bl	8000a0c <__aeabi_dcmpun>
 80033a0:	bb70      	cbnz	r0, 8003400 <_printf_float+0xc0>
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033a6:	4640      	mov	r0, r8
 80033a8:	4b98      	ldr	r3, [pc, #608]	; (800360c <_printf_float+0x2cc>)
 80033aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033ac:	f7fd fb10 	bl	80009d0 <__aeabi_dcmple>
 80033b0:	bb30      	cbnz	r0, 8003400 <_printf_float+0xc0>
 80033b2:	2200      	movs	r2, #0
 80033b4:	2300      	movs	r3, #0
 80033b6:	4640      	mov	r0, r8
 80033b8:	4651      	mov	r1, sl
 80033ba:	f7fd faff 	bl	80009bc <__aeabi_dcmplt>
 80033be:	b110      	cbz	r0, 80033c6 <_printf_float+0x86>
 80033c0:	232d      	movs	r3, #45	; 0x2d
 80033c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c6:	4b92      	ldr	r3, [pc, #584]	; (8003610 <_printf_float+0x2d0>)
 80033c8:	4892      	ldr	r0, [pc, #584]	; (8003614 <_printf_float+0x2d4>)
 80033ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80033ce:	bf94      	ite	ls
 80033d0:	4698      	movls	r8, r3
 80033d2:	4680      	movhi	r8, r0
 80033d4:	2303      	movs	r3, #3
 80033d6:	f04f 0a00 	mov.w	sl, #0
 80033da:	6123      	str	r3, [r4, #16]
 80033dc:	f02b 0304 	bic.w	r3, fp, #4
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	4633      	mov	r3, r6
 80033e4:	4621      	mov	r1, r4
 80033e6:	4628      	mov	r0, r5
 80033e8:	9700      	str	r7, [sp, #0]
 80033ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80033ec:	f000 f9d4 	bl	8003798 <_printf_common>
 80033f0:	3001      	adds	r0, #1
 80033f2:	f040 8090 	bne.w	8003516 <_printf_float+0x1d6>
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033fa:	b011      	add	sp, #68	; 0x44
 80033fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003400:	4642      	mov	r2, r8
 8003402:	4653      	mov	r3, sl
 8003404:	4640      	mov	r0, r8
 8003406:	4651      	mov	r1, sl
 8003408:	f7fd fb00 	bl	8000a0c <__aeabi_dcmpun>
 800340c:	b148      	cbz	r0, 8003422 <_printf_float+0xe2>
 800340e:	f1ba 0f00 	cmp.w	sl, #0
 8003412:	bfb8      	it	lt
 8003414:	232d      	movlt	r3, #45	; 0x2d
 8003416:	4880      	ldr	r0, [pc, #512]	; (8003618 <_printf_float+0x2d8>)
 8003418:	bfb8      	it	lt
 800341a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800341e:	4b7f      	ldr	r3, [pc, #508]	; (800361c <_printf_float+0x2dc>)
 8003420:	e7d3      	b.n	80033ca <_printf_float+0x8a>
 8003422:	6863      	ldr	r3, [r4, #4]
 8003424:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	d142      	bne.n	80034b2 <_printf_float+0x172>
 800342c:	2306      	movs	r3, #6
 800342e:	6063      	str	r3, [r4, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	9206      	str	r2, [sp, #24]
 8003434:	aa0e      	add	r2, sp, #56	; 0x38
 8003436:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800343a:	aa0d      	add	r2, sp, #52	; 0x34
 800343c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003440:	9203      	str	r2, [sp, #12]
 8003442:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003446:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	4642      	mov	r2, r8
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	4628      	mov	r0, r5
 8003454:	4653      	mov	r3, sl
 8003456:	910b      	str	r1, [sp, #44]	; 0x2c
 8003458:	f7ff fed4 	bl	8003204 <__cvt>
 800345c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800345e:	4680      	mov	r8, r0
 8003460:	2947      	cmp	r1, #71	; 0x47
 8003462:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003464:	d108      	bne.n	8003478 <_printf_float+0x138>
 8003466:	1cc8      	adds	r0, r1, #3
 8003468:	db02      	blt.n	8003470 <_printf_float+0x130>
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	4299      	cmp	r1, r3
 800346e:	dd40      	ble.n	80034f2 <_printf_float+0x1b2>
 8003470:	f1a9 0902 	sub.w	r9, r9, #2
 8003474:	fa5f f989 	uxtb.w	r9, r9
 8003478:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800347c:	d81f      	bhi.n	80034be <_printf_float+0x17e>
 800347e:	464a      	mov	r2, r9
 8003480:	3901      	subs	r1, #1
 8003482:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003486:	910d      	str	r1, [sp, #52]	; 0x34
 8003488:	f7ff ff1b 	bl	80032c2 <__exponent>
 800348c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800348e:	4682      	mov	sl, r0
 8003490:	1813      	adds	r3, r2, r0
 8003492:	2a01      	cmp	r2, #1
 8003494:	6123      	str	r3, [r4, #16]
 8003496:	dc02      	bgt.n	800349e <_printf_float+0x15e>
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	07d2      	lsls	r2, r2, #31
 800349c:	d501      	bpl.n	80034a2 <_printf_float+0x162>
 800349e:	3301      	adds	r3, #1
 80034a0:	6123      	str	r3, [r4, #16]
 80034a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d09b      	beq.n	80033e2 <_printf_float+0xa2>
 80034aa:	232d      	movs	r3, #45	; 0x2d
 80034ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b0:	e797      	b.n	80033e2 <_printf_float+0xa2>
 80034b2:	2947      	cmp	r1, #71	; 0x47
 80034b4:	d1bc      	bne.n	8003430 <_printf_float+0xf0>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ba      	bne.n	8003430 <_printf_float+0xf0>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e7b7      	b.n	800342e <_printf_float+0xee>
 80034be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80034c2:	d118      	bne.n	80034f6 <_printf_float+0x1b6>
 80034c4:	2900      	cmp	r1, #0
 80034c6:	6863      	ldr	r3, [r4, #4]
 80034c8:	dd0b      	ble.n	80034e2 <_printf_float+0x1a2>
 80034ca:	6121      	str	r1, [r4, #16]
 80034cc:	b913      	cbnz	r3, 80034d4 <_printf_float+0x194>
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	07d0      	lsls	r0, r2, #31
 80034d2:	d502      	bpl.n	80034da <_printf_float+0x19a>
 80034d4:	3301      	adds	r3, #1
 80034d6:	440b      	add	r3, r1
 80034d8:	6123      	str	r3, [r4, #16]
 80034da:	f04f 0a00 	mov.w	sl, #0
 80034de:	65a1      	str	r1, [r4, #88]	; 0x58
 80034e0:	e7df      	b.n	80034a2 <_printf_float+0x162>
 80034e2:	b913      	cbnz	r3, 80034ea <_printf_float+0x1aa>
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	07d2      	lsls	r2, r2, #31
 80034e8:	d501      	bpl.n	80034ee <_printf_float+0x1ae>
 80034ea:	3302      	adds	r3, #2
 80034ec:	e7f4      	b.n	80034d8 <_printf_float+0x198>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e7f2      	b.n	80034d8 <_printf_float+0x198>
 80034f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80034f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f8:	4299      	cmp	r1, r3
 80034fa:	db05      	blt.n	8003508 <_printf_float+0x1c8>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	6121      	str	r1, [r4, #16]
 8003500:	07d8      	lsls	r0, r3, #31
 8003502:	d5ea      	bpl.n	80034da <_printf_float+0x19a>
 8003504:	1c4b      	adds	r3, r1, #1
 8003506:	e7e7      	b.n	80034d8 <_printf_float+0x198>
 8003508:	2900      	cmp	r1, #0
 800350a:	bfcc      	ite	gt
 800350c:	2201      	movgt	r2, #1
 800350e:	f1c1 0202 	rsble	r2, r1, #2
 8003512:	4413      	add	r3, r2
 8003514:	e7e0      	b.n	80034d8 <_printf_float+0x198>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	055a      	lsls	r2, r3, #21
 800351a:	d407      	bmi.n	800352c <_printf_float+0x1ec>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	4642      	mov	r2, r8
 8003520:	4631      	mov	r1, r6
 8003522:	4628      	mov	r0, r5
 8003524:	47b8      	blx	r7
 8003526:	3001      	adds	r0, #1
 8003528:	d12b      	bne.n	8003582 <_printf_float+0x242>
 800352a:	e764      	b.n	80033f6 <_printf_float+0xb6>
 800352c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003530:	f240 80dd 	bls.w	80036ee <_printf_float+0x3ae>
 8003534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003538:	2200      	movs	r2, #0
 800353a:	2300      	movs	r3, #0
 800353c:	f7fd fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8003540:	2800      	cmp	r0, #0
 8003542:	d033      	beq.n	80035ac <_printf_float+0x26c>
 8003544:	2301      	movs	r3, #1
 8003546:	4631      	mov	r1, r6
 8003548:	4628      	mov	r0, r5
 800354a:	4a35      	ldr	r2, [pc, #212]	; (8003620 <_printf_float+0x2e0>)
 800354c:	47b8      	blx	r7
 800354e:	3001      	adds	r0, #1
 8003550:	f43f af51 	beq.w	80033f6 <_printf_float+0xb6>
 8003554:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003558:	429a      	cmp	r2, r3
 800355a:	db02      	blt.n	8003562 <_printf_float+0x222>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	07d8      	lsls	r0, r3, #31
 8003560:	d50f      	bpl.n	8003582 <_printf_float+0x242>
 8003562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003566:	4631      	mov	r1, r6
 8003568:	4628      	mov	r0, r5
 800356a:	47b8      	blx	r7
 800356c:	3001      	adds	r0, #1
 800356e:	f43f af42 	beq.w	80033f6 <_printf_float+0xb6>
 8003572:	f04f 0800 	mov.w	r8, #0
 8003576:	f104 091a 	add.w	r9, r4, #26
 800357a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800357c:	3b01      	subs	r3, #1
 800357e:	4543      	cmp	r3, r8
 8003580:	dc09      	bgt.n	8003596 <_printf_float+0x256>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	079b      	lsls	r3, r3, #30
 8003586:	f100 8102 	bmi.w	800378e <_printf_float+0x44e>
 800358a:	68e0      	ldr	r0, [r4, #12]
 800358c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800358e:	4298      	cmp	r0, r3
 8003590:	bfb8      	it	lt
 8003592:	4618      	movlt	r0, r3
 8003594:	e731      	b.n	80033fa <_printf_float+0xba>
 8003596:	2301      	movs	r3, #1
 8003598:	464a      	mov	r2, r9
 800359a:	4631      	mov	r1, r6
 800359c:	4628      	mov	r0, r5
 800359e:	47b8      	blx	r7
 80035a0:	3001      	adds	r0, #1
 80035a2:	f43f af28 	beq.w	80033f6 <_printf_float+0xb6>
 80035a6:	f108 0801 	add.w	r8, r8, #1
 80035aa:	e7e6      	b.n	800357a <_printf_float+0x23a>
 80035ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dc38      	bgt.n	8003624 <_printf_float+0x2e4>
 80035b2:	2301      	movs	r3, #1
 80035b4:	4631      	mov	r1, r6
 80035b6:	4628      	mov	r0, r5
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <_printf_float+0x2e0>)
 80035ba:	47b8      	blx	r7
 80035bc:	3001      	adds	r0, #1
 80035be:	f43f af1a 	beq.w	80033f6 <_printf_float+0xb6>
 80035c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d102      	bne.n	80035d0 <_printf_float+0x290>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	07d9      	lsls	r1, r3, #31
 80035ce:	d5d8      	bpl.n	8003582 <_printf_float+0x242>
 80035d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035d4:	4631      	mov	r1, r6
 80035d6:	4628      	mov	r0, r5
 80035d8:	47b8      	blx	r7
 80035da:	3001      	adds	r0, #1
 80035dc:	f43f af0b 	beq.w	80033f6 <_printf_float+0xb6>
 80035e0:	f04f 0900 	mov.w	r9, #0
 80035e4:	f104 0a1a 	add.w	sl, r4, #26
 80035e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035ea:	425b      	negs	r3, r3
 80035ec:	454b      	cmp	r3, r9
 80035ee:	dc01      	bgt.n	80035f4 <_printf_float+0x2b4>
 80035f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035f2:	e794      	b.n	800351e <_printf_float+0x1de>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4652      	mov	r2, sl
 80035f8:	4631      	mov	r1, r6
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	3001      	adds	r0, #1
 8003600:	f43f aef9 	beq.w	80033f6 <_printf_float+0xb6>
 8003604:	f109 0901 	add.w	r9, r9, #1
 8003608:	e7ee      	b.n	80035e8 <_printf_float+0x2a8>
 800360a:	bf00      	nop
 800360c:	7fefffff 	.word	0x7fefffff
 8003610:	08005c44 	.word	0x08005c44
 8003614:	08005c48 	.word	0x08005c48
 8003618:	08005c50 	.word	0x08005c50
 800361c:	08005c4c 	.word	0x08005c4c
 8003620:	08005c54 	.word	0x08005c54
 8003624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003628:	429a      	cmp	r2, r3
 800362a:	bfa8      	it	ge
 800362c:	461a      	movge	r2, r3
 800362e:	2a00      	cmp	r2, #0
 8003630:	4691      	mov	r9, r2
 8003632:	dc37      	bgt.n	80036a4 <_printf_float+0x364>
 8003634:	f04f 0b00 	mov.w	fp, #0
 8003638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800363c:	f104 021a 	add.w	r2, r4, #26
 8003640:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003644:	ebaa 0309 	sub.w	r3, sl, r9
 8003648:	455b      	cmp	r3, fp
 800364a:	dc33      	bgt.n	80036b4 <_printf_float+0x374>
 800364c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003650:	429a      	cmp	r2, r3
 8003652:	db3b      	blt.n	80036cc <_printf_float+0x38c>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07da      	lsls	r2, r3, #31
 8003658:	d438      	bmi.n	80036cc <_printf_float+0x38c>
 800365a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800365c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800365e:	eba2 030a 	sub.w	r3, r2, sl
 8003662:	eba2 0901 	sub.w	r9, r2, r1
 8003666:	4599      	cmp	r9, r3
 8003668:	bfa8      	it	ge
 800366a:	4699      	movge	r9, r3
 800366c:	f1b9 0f00 	cmp.w	r9, #0
 8003670:	dc34      	bgt.n	80036dc <_printf_float+0x39c>
 8003672:	f04f 0800 	mov.w	r8, #0
 8003676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800367a:	f104 0a1a 	add.w	sl, r4, #26
 800367e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	eba3 0309 	sub.w	r3, r3, r9
 8003688:	4543      	cmp	r3, r8
 800368a:	f77f af7a 	ble.w	8003582 <_printf_float+0x242>
 800368e:	2301      	movs	r3, #1
 8003690:	4652      	mov	r2, sl
 8003692:	4631      	mov	r1, r6
 8003694:	4628      	mov	r0, r5
 8003696:	47b8      	blx	r7
 8003698:	3001      	adds	r0, #1
 800369a:	f43f aeac 	beq.w	80033f6 <_printf_float+0xb6>
 800369e:	f108 0801 	add.w	r8, r8, #1
 80036a2:	e7ec      	b.n	800367e <_printf_float+0x33e>
 80036a4:	4613      	mov	r3, r2
 80036a6:	4631      	mov	r1, r6
 80036a8:	4642      	mov	r2, r8
 80036aa:	4628      	mov	r0, r5
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	d1c0      	bne.n	8003634 <_printf_float+0x2f4>
 80036b2:	e6a0      	b.n	80033f6 <_printf_float+0xb6>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80036bc:	47b8      	blx	r7
 80036be:	3001      	adds	r0, #1
 80036c0:	f43f ae99 	beq.w	80033f6 <_printf_float+0xb6>
 80036c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036c6:	f10b 0b01 	add.w	fp, fp, #1
 80036ca:	e7b9      	b.n	8003640 <_printf_float+0x300>
 80036cc:	4631      	mov	r1, r6
 80036ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036d2:	4628      	mov	r0, r5
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	d1bf      	bne.n	800365a <_printf_float+0x31a>
 80036da:	e68c      	b.n	80033f6 <_printf_float+0xb6>
 80036dc:	464b      	mov	r3, r9
 80036de:	4631      	mov	r1, r6
 80036e0:	4628      	mov	r0, r5
 80036e2:	eb08 020a 	add.w	r2, r8, sl
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	d1c2      	bne.n	8003672 <_printf_float+0x332>
 80036ec:	e683      	b.n	80033f6 <_printf_float+0xb6>
 80036ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036f0:	2a01      	cmp	r2, #1
 80036f2:	dc01      	bgt.n	80036f8 <_printf_float+0x3b8>
 80036f4:	07db      	lsls	r3, r3, #31
 80036f6:	d537      	bpl.n	8003768 <_printf_float+0x428>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4642      	mov	r2, r8
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	f43f ae77 	beq.w	80033f6 <_printf_float+0xb6>
 8003708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800370c:	4631      	mov	r1, r6
 800370e:	4628      	mov	r0, r5
 8003710:	47b8      	blx	r7
 8003712:	3001      	adds	r0, #1
 8003714:	f43f ae6f 	beq.w	80033f6 <_printf_float+0xb6>
 8003718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800371c:	2200      	movs	r2, #0
 800371e:	2300      	movs	r3, #0
 8003720:	f7fd f942 	bl	80009a8 <__aeabi_dcmpeq>
 8003724:	b9d8      	cbnz	r0, 800375e <_printf_float+0x41e>
 8003726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003728:	f108 0201 	add.w	r2, r8, #1
 800372c:	3b01      	subs	r3, #1
 800372e:	4631      	mov	r1, r6
 8003730:	4628      	mov	r0, r5
 8003732:	47b8      	blx	r7
 8003734:	3001      	adds	r0, #1
 8003736:	d10e      	bne.n	8003756 <_printf_float+0x416>
 8003738:	e65d      	b.n	80033f6 <_printf_float+0xb6>
 800373a:	2301      	movs	r3, #1
 800373c:	464a      	mov	r2, r9
 800373e:	4631      	mov	r1, r6
 8003740:	4628      	mov	r0, r5
 8003742:	47b8      	blx	r7
 8003744:	3001      	adds	r0, #1
 8003746:	f43f ae56 	beq.w	80033f6 <_printf_float+0xb6>
 800374a:	f108 0801 	add.w	r8, r8, #1
 800374e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003750:	3b01      	subs	r3, #1
 8003752:	4543      	cmp	r3, r8
 8003754:	dcf1      	bgt.n	800373a <_printf_float+0x3fa>
 8003756:	4653      	mov	r3, sl
 8003758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800375c:	e6e0      	b.n	8003520 <_printf_float+0x1e0>
 800375e:	f04f 0800 	mov.w	r8, #0
 8003762:	f104 091a 	add.w	r9, r4, #26
 8003766:	e7f2      	b.n	800374e <_printf_float+0x40e>
 8003768:	2301      	movs	r3, #1
 800376a:	4642      	mov	r2, r8
 800376c:	e7df      	b.n	800372e <_printf_float+0x3ee>
 800376e:	2301      	movs	r3, #1
 8003770:	464a      	mov	r2, r9
 8003772:	4631      	mov	r1, r6
 8003774:	4628      	mov	r0, r5
 8003776:	47b8      	blx	r7
 8003778:	3001      	adds	r0, #1
 800377a:	f43f ae3c 	beq.w	80033f6 <_printf_float+0xb6>
 800377e:	f108 0801 	add.w	r8, r8, #1
 8003782:	68e3      	ldr	r3, [r4, #12]
 8003784:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003786:	1a5b      	subs	r3, r3, r1
 8003788:	4543      	cmp	r3, r8
 800378a:	dcf0      	bgt.n	800376e <_printf_float+0x42e>
 800378c:	e6fd      	b.n	800358a <_printf_float+0x24a>
 800378e:	f04f 0800 	mov.w	r8, #0
 8003792:	f104 0919 	add.w	r9, r4, #25
 8003796:	e7f4      	b.n	8003782 <_printf_float+0x442>

08003798 <_printf_common>:
 8003798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	4616      	mov	r6, r2
 800379e:	4699      	mov	r9, r3
 80037a0:	688a      	ldr	r2, [r1, #8]
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	4607      	mov	r7, r0
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bfb8      	it	lt
 80037aa:	4613      	movlt	r3, r2
 80037ac:	6033      	str	r3, [r6, #0]
 80037ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b2:	460c      	mov	r4, r1
 80037b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037b8:	b10a      	cbz	r2, 80037be <_printf_common+0x26>
 80037ba:	3301      	adds	r3, #1
 80037bc:	6033      	str	r3, [r6, #0]
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	0699      	lsls	r1, r3, #26
 80037c2:	bf42      	ittt	mi
 80037c4:	6833      	ldrmi	r3, [r6, #0]
 80037c6:	3302      	addmi	r3, #2
 80037c8:	6033      	strmi	r3, [r6, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	f015 0506 	ands.w	r5, r5, #6
 80037d0:	d106      	bne.n	80037e0 <_printf_common+0x48>
 80037d2:	f104 0a19 	add.w	sl, r4, #25
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	6832      	ldr	r2, [r6, #0]
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dc28      	bgt.n	8003832 <_printf_common+0x9a>
 80037e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e4:	1e13      	subs	r3, r2, #0
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	bf18      	it	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	0692      	lsls	r2, r2, #26
 80037ee:	d42d      	bmi.n	800384c <_printf_common+0xb4>
 80037f0:	4649      	mov	r1, r9
 80037f2:	4638      	mov	r0, r7
 80037f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f8:	47c0      	blx	r8
 80037fa:	3001      	adds	r0, #1
 80037fc:	d020      	beq.n	8003840 <_printf_common+0xa8>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	68e5      	ldr	r5, [r4, #12]
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf18      	it	ne
 800380a:	2500      	movne	r5, #0
 800380c:	6832      	ldr	r2, [r6, #0]
 800380e:	f04f 0600 	mov.w	r6, #0
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	bf08      	it	eq
 8003816:	1aad      	subeq	r5, r5, r2
 8003818:	6922      	ldr	r2, [r4, #16]
 800381a:	bf08      	it	eq
 800381c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003820:	4293      	cmp	r3, r2
 8003822:	bfc4      	itt	gt
 8003824:	1a9b      	subgt	r3, r3, r2
 8003826:	18ed      	addgt	r5, r5, r3
 8003828:	341a      	adds	r4, #26
 800382a:	42b5      	cmp	r5, r6
 800382c:	d11a      	bne.n	8003864 <_printf_common+0xcc>
 800382e:	2000      	movs	r0, #0
 8003830:	e008      	b.n	8003844 <_printf_common+0xac>
 8003832:	2301      	movs	r3, #1
 8003834:	4652      	mov	r2, sl
 8003836:	4649      	mov	r1, r9
 8003838:	4638      	mov	r0, r7
 800383a:	47c0      	blx	r8
 800383c:	3001      	adds	r0, #1
 800383e:	d103      	bne.n	8003848 <_printf_common+0xb0>
 8003840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	3501      	adds	r5, #1
 800384a:	e7c4      	b.n	80037d6 <_printf_common+0x3e>
 800384c:	2030      	movs	r0, #48	; 0x30
 800384e:	18e1      	adds	r1, r4, r3
 8003850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800385a:	4422      	add	r2, r4
 800385c:	3302      	adds	r3, #2
 800385e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003862:	e7c5      	b.n	80037f0 <_printf_common+0x58>
 8003864:	2301      	movs	r3, #1
 8003866:	4622      	mov	r2, r4
 8003868:	4649      	mov	r1, r9
 800386a:	4638      	mov	r0, r7
 800386c:	47c0      	blx	r8
 800386e:	3001      	adds	r0, #1
 8003870:	d0e6      	beq.n	8003840 <_printf_common+0xa8>
 8003872:	3601      	adds	r6, #1
 8003874:	e7d9      	b.n	800382a <_printf_common+0x92>
	...

08003878 <_printf_i>:
 8003878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	460c      	mov	r4, r1
 800387e:	7e27      	ldrb	r7, [r4, #24]
 8003880:	4691      	mov	r9, r2
 8003882:	2f78      	cmp	r7, #120	; 0x78
 8003884:	4680      	mov	r8, r0
 8003886:	469a      	mov	sl, r3
 8003888:	990c      	ldr	r1, [sp, #48]	; 0x30
 800388a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800388e:	d807      	bhi.n	80038a0 <_printf_i+0x28>
 8003890:	2f62      	cmp	r7, #98	; 0x62
 8003892:	d80a      	bhi.n	80038aa <_printf_i+0x32>
 8003894:	2f00      	cmp	r7, #0
 8003896:	f000 80d9 	beq.w	8003a4c <_printf_i+0x1d4>
 800389a:	2f58      	cmp	r7, #88	; 0x58
 800389c:	f000 80a4 	beq.w	80039e8 <_printf_i+0x170>
 80038a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a8:	e03a      	b.n	8003920 <_printf_i+0xa8>
 80038aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ae:	2b15      	cmp	r3, #21
 80038b0:	d8f6      	bhi.n	80038a0 <_printf_i+0x28>
 80038b2:	a001      	add	r0, pc, #4	; (adr r0, 80038b8 <_printf_i+0x40>)
 80038b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003925 	.word	0x08003925
 80038c0:	080038a1 	.word	0x080038a1
 80038c4:	080038a1 	.word	0x080038a1
 80038c8:	080038a1 	.word	0x080038a1
 80038cc:	080038a1 	.word	0x080038a1
 80038d0:	08003925 	.word	0x08003925
 80038d4:	080038a1 	.word	0x080038a1
 80038d8:	080038a1 	.word	0x080038a1
 80038dc:	080038a1 	.word	0x080038a1
 80038e0:	080038a1 	.word	0x080038a1
 80038e4:	08003a33 	.word	0x08003a33
 80038e8:	08003955 	.word	0x08003955
 80038ec:	08003a15 	.word	0x08003a15
 80038f0:	080038a1 	.word	0x080038a1
 80038f4:	080038a1 	.word	0x080038a1
 80038f8:	08003a55 	.word	0x08003a55
 80038fc:	080038a1 	.word	0x080038a1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038a1 	.word	0x080038a1
 8003908:	080038a1 	.word	0x080038a1
 800390c:	08003a1d 	.word	0x08003a1d
 8003910:	680b      	ldr	r3, [r1, #0]
 8003912:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003916:	1d1a      	adds	r2, r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	600a      	str	r2, [r1, #0]
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e0a4      	b.n	8003a6e <_printf_i+0x1f6>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	6808      	ldr	r0, [r1, #0]
 8003928:	062e      	lsls	r6, r5, #24
 800392a:	f100 0304 	add.w	r3, r0, #4
 800392e:	d50a      	bpl.n	8003946 <_printf_i+0xce>
 8003930:	6805      	ldr	r5, [r0, #0]
 8003932:	600b      	str	r3, [r1, #0]
 8003934:	2d00      	cmp	r5, #0
 8003936:	da03      	bge.n	8003940 <_printf_i+0xc8>
 8003938:	232d      	movs	r3, #45	; 0x2d
 800393a:	426d      	negs	r5, r5
 800393c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003940:	230a      	movs	r3, #10
 8003942:	485e      	ldr	r0, [pc, #376]	; (8003abc <_printf_i+0x244>)
 8003944:	e019      	b.n	800397a <_printf_i+0x102>
 8003946:	f015 0f40 	tst.w	r5, #64	; 0x40
 800394a:	6805      	ldr	r5, [r0, #0]
 800394c:	600b      	str	r3, [r1, #0]
 800394e:	bf18      	it	ne
 8003950:	b22d      	sxthne	r5, r5
 8003952:	e7ef      	b.n	8003934 <_printf_i+0xbc>
 8003954:	680b      	ldr	r3, [r1, #0]
 8003956:	6825      	ldr	r5, [r4, #0]
 8003958:	1d18      	adds	r0, r3, #4
 800395a:	6008      	str	r0, [r1, #0]
 800395c:	0628      	lsls	r0, r5, #24
 800395e:	d501      	bpl.n	8003964 <_printf_i+0xec>
 8003960:	681d      	ldr	r5, [r3, #0]
 8003962:	e002      	b.n	800396a <_printf_i+0xf2>
 8003964:	0669      	lsls	r1, r5, #25
 8003966:	d5fb      	bpl.n	8003960 <_printf_i+0xe8>
 8003968:	881d      	ldrh	r5, [r3, #0]
 800396a:	2f6f      	cmp	r7, #111	; 0x6f
 800396c:	bf0c      	ite	eq
 800396e:	2308      	moveq	r3, #8
 8003970:	230a      	movne	r3, #10
 8003972:	4852      	ldr	r0, [pc, #328]	; (8003abc <_printf_i+0x244>)
 8003974:	2100      	movs	r1, #0
 8003976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800397a:	6866      	ldr	r6, [r4, #4]
 800397c:	2e00      	cmp	r6, #0
 800397e:	bfa8      	it	ge
 8003980:	6821      	ldrge	r1, [r4, #0]
 8003982:	60a6      	str	r6, [r4, #8]
 8003984:	bfa4      	itt	ge
 8003986:	f021 0104 	bicge.w	r1, r1, #4
 800398a:	6021      	strge	r1, [r4, #0]
 800398c:	b90d      	cbnz	r5, 8003992 <_printf_i+0x11a>
 800398e:	2e00      	cmp	r6, #0
 8003990:	d04d      	beq.n	8003a2e <_printf_i+0x1b6>
 8003992:	4616      	mov	r6, r2
 8003994:	fbb5 f1f3 	udiv	r1, r5, r3
 8003998:	fb03 5711 	mls	r7, r3, r1, r5
 800399c:	5dc7      	ldrb	r7, [r0, r7]
 800399e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039a2:	462f      	mov	r7, r5
 80039a4:	42bb      	cmp	r3, r7
 80039a6:	460d      	mov	r5, r1
 80039a8:	d9f4      	bls.n	8003994 <_printf_i+0x11c>
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d10b      	bne.n	80039c6 <_printf_i+0x14e>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	07df      	lsls	r7, r3, #31
 80039b2:	d508      	bpl.n	80039c6 <_printf_i+0x14e>
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	6861      	ldr	r1, [r4, #4]
 80039b8:	4299      	cmp	r1, r3
 80039ba:	bfde      	ittt	le
 80039bc:	2330      	movle	r3, #48	; 0x30
 80039be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039c2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80039c6:	1b92      	subs	r2, r2, r6
 80039c8:	6122      	str	r2, [r4, #16]
 80039ca:	464b      	mov	r3, r9
 80039cc:	4621      	mov	r1, r4
 80039ce:	4640      	mov	r0, r8
 80039d0:	f8cd a000 	str.w	sl, [sp]
 80039d4:	aa03      	add	r2, sp, #12
 80039d6:	f7ff fedf 	bl	8003798 <_printf_common>
 80039da:	3001      	adds	r0, #1
 80039dc:	d14c      	bne.n	8003a78 <_printf_i+0x200>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e2:	b004      	add	sp, #16
 80039e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e8:	4834      	ldr	r0, [pc, #208]	; (8003abc <_printf_i+0x244>)
 80039ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ee:	680e      	ldr	r6, [r1, #0]
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80039f6:	061f      	lsls	r7, r3, #24
 80039f8:	600e      	str	r6, [r1, #0]
 80039fa:	d514      	bpl.n	8003a26 <_printf_i+0x1ae>
 80039fc:	07d9      	lsls	r1, r3, #31
 80039fe:	bf44      	itt	mi
 8003a00:	f043 0320 	orrmi.w	r3, r3, #32
 8003a04:	6023      	strmi	r3, [r4, #0]
 8003a06:	b91d      	cbnz	r5, 8003a10 <_printf_i+0x198>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f023 0320 	bic.w	r3, r3, #32
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	2310      	movs	r3, #16
 8003a12:	e7af      	b.n	8003974 <_printf_i+0xfc>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	2378      	movs	r3, #120	; 0x78
 8003a1e:	4828      	ldr	r0, [pc, #160]	; (8003ac0 <_printf_i+0x248>)
 8003a20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a24:	e7e3      	b.n	80039ee <_printf_i+0x176>
 8003a26:	065e      	lsls	r6, r3, #25
 8003a28:	bf48      	it	mi
 8003a2a:	b2ad      	uxthmi	r5, r5
 8003a2c:	e7e6      	b.n	80039fc <_printf_i+0x184>
 8003a2e:	4616      	mov	r6, r2
 8003a30:	e7bb      	b.n	80039aa <_printf_i+0x132>
 8003a32:	680b      	ldr	r3, [r1, #0]
 8003a34:	6826      	ldr	r6, [r4, #0]
 8003a36:	1d1d      	adds	r5, r3, #4
 8003a38:	6960      	ldr	r0, [r4, #20]
 8003a3a:	600d      	str	r5, [r1, #0]
 8003a3c:	0635      	lsls	r5, r6, #24
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	d501      	bpl.n	8003a46 <_printf_i+0x1ce>
 8003a42:	6018      	str	r0, [r3, #0]
 8003a44:	e002      	b.n	8003a4c <_printf_i+0x1d4>
 8003a46:	0671      	lsls	r1, r6, #25
 8003a48:	d5fb      	bpl.n	8003a42 <_printf_i+0x1ca>
 8003a4a:	8018      	strh	r0, [r3, #0]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4616      	mov	r6, r2
 8003a50:	6123      	str	r3, [r4, #16]
 8003a52:	e7ba      	b.n	80039ca <_printf_i+0x152>
 8003a54:	680b      	ldr	r3, [r1, #0]
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	600a      	str	r2, [r1, #0]
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	f000 ffc9 	bl	80049f8 <memchr>
 8003a66:	b108      	cbz	r0, 8003a6c <_printf_i+0x1f4>
 8003a68:	1b80      	subs	r0, r0, r6
 8003a6a:	6060      	str	r0, [r4, #4]
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	6123      	str	r3, [r4, #16]
 8003a70:	2300      	movs	r3, #0
 8003a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a76:	e7a8      	b.n	80039ca <_printf_i+0x152>
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	47d0      	blx	sl
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0ab      	beq.n	80039de <_printf_i+0x166>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	079b      	lsls	r3, r3, #30
 8003a8a:	d413      	bmi.n	8003ab4 <_printf_i+0x23c>
 8003a8c:	68e0      	ldr	r0, [r4, #12]
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	4298      	cmp	r0, r3
 8003a92:	bfb8      	it	lt
 8003a94:	4618      	movlt	r0, r3
 8003a96:	e7a4      	b.n	80039e2 <_printf_i+0x16a>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	47d0      	blx	sl
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d09b      	beq.n	80039de <_printf_i+0x166>
 8003aa6:	3501      	adds	r5, #1
 8003aa8:	68e3      	ldr	r3, [r4, #12]
 8003aaa:	9903      	ldr	r1, [sp, #12]
 8003aac:	1a5b      	subs	r3, r3, r1
 8003aae:	42ab      	cmp	r3, r5
 8003ab0:	dcf2      	bgt.n	8003a98 <_printf_i+0x220>
 8003ab2:	e7eb      	b.n	8003a8c <_printf_i+0x214>
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	f104 0619 	add.w	r6, r4, #25
 8003aba:	e7f5      	b.n	8003aa8 <_printf_i+0x230>
 8003abc:	08005c56 	.word	0x08005c56
 8003ac0:	08005c67 	.word	0x08005c67

08003ac4 <iprintf>:
 8003ac4:	b40f      	push	{r0, r1, r2, r3}
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <iprintf+0x2c>)
 8003ac8:	b513      	push	{r0, r1, r4, lr}
 8003aca:	681c      	ldr	r4, [r3, #0]
 8003acc:	b124      	cbz	r4, 8003ad8 <iprintf+0x14>
 8003ace:	69a3      	ldr	r3, [r4, #24]
 8003ad0:	b913      	cbnz	r3, 8003ad8 <iprintf+0x14>
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f000 fee2 	bl	800489c <__sinit>
 8003ad8:	ab05      	add	r3, sp, #20
 8003ada:	4620      	mov	r0, r4
 8003adc:	9a04      	ldr	r2, [sp, #16]
 8003ade:	68a1      	ldr	r1, [r4, #8]
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	f001 fc03 	bl	80052ec <_vfiprintf_r>
 8003ae6:	b002      	add	sp, #8
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aec:	b004      	add	sp, #16
 8003aee:	4770      	bx	lr
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <quorem>:
 8003af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af8:	6903      	ldr	r3, [r0, #16]
 8003afa:	690c      	ldr	r4, [r1, #16]
 8003afc:	4607      	mov	r7, r0
 8003afe:	42a3      	cmp	r3, r4
 8003b00:	f2c0 8083 	blt.w	8003c0a <quorem+0x116>
 8003b04:	3c01      	subs	r4, #1
 8003b06:	f100 0514 	add.w	r5, r0, #20
 8003b0a:	f101 0814 	add.w	r8, r1, #20
 8003b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b2c:	d332      	bcc.n	8003b94 <quorem+0xa0>
 8003b2e:	f04f 0e00 	mov.w	lr, #0
 8003b32:	4640      	mov	r0, r8
 8003b34:	46ac      	mov	ip, r5
 8003b36:	46f2      	mov	sl, lr
 8003b38:	f850 2b04 	ldr.w	r2, [r0], #4
 8003b3c:	b293      	uxth	r3, r2
 8003b3e:	fb06 e303 	mla	r3, r6, r3, lr
 8003b42:	0c12      	lsrs	r2, r2, #16
 8003b44:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003b48:	fb06 e202 	mla	r2, r6, r2, lr
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	ebaa 0303 	sub.w	r3, sl, r3
 8003b52:	f8dc a000 	ldr.w	sl, [ip]
 8003b56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b5a:	fa1f fa8a 	uxth.w	sl, sl
 8003b5e:	4453      	add	r3, sl
 8003b60:	fa1f fa82 	uxth.w	sl, r2
 8003b64:	f8dc 2000 	ldr.w	r2, [ip]
 8003b68:	4581      	cmp	r9, r0
 8003b6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003b6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003b7c:	f84c 3b04 	str.w	r3, [ip], #4
 8003b80:	d2da      	bcs.n	8003b38 <quorem+0x44>
 8003b82:	f855 300b 	ldr.w	r3, [r5, fp]
 8003b86:	b92b      	cbnz	r3, 8003b94 <quorem+0xa0>
 8003b88:	9b01      	ldr	r3, [sp, #4]
 8003b8a:	3b04      	subs	r3, #4
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	d32f      	bcc.n	8003bf2 <quorem+0xfe>
 8003b92:	613c      	str	r4, [r7, #16]
 8003b94:	4638      	mov	r0, r7
 8003b96:	f001 f9c5 	bl	8004f24 <__mcmp>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	db25      	blt.n	8003bea <quorem+0xf6>
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f04f 0c00 	mov.w	ip, #0
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	f858 1b04 	ldr.w	r1, [r8], #4
 8003baa:	f8d0 e000 	ldr.w	lr, [r0]
 8003bae:	b28b      	uxth	r3, r1
 8003bb0:	ebac 0303 	sub.w	r3, ip, r3
 8003bb4:	fa1f f28e 	uxth.w	r2, lr
 8003bb8:	4413      	add	r3, r2
 8003bba:	0c0a      	lsrs	r2, r1, #16
 8003bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bca:	45c1      	cmp	r9, r8
 8003bcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003bd0:	f840 3b04 	str.w	r3, [r0], #4
 8003bd4:	d2e7      	bcs.n	8003ba6 <quorem+0xb2>
 8003bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bde:	b922      	cbnz	r2, 8003bea <quorem+0xf6>
 8003be0:	3b04      	subs	r3, #4
 8003be2:	429d      	cmp	r5, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	d30a      	bcc.n	8003bfe <quorem+0x10a>
 8003be8:	613c      	str	r4, [r7, #16]
 8003bea:	4630      	mov	r0, r6
 8003bec:	b003      	add	sp, #12
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	3b04      	subs	r3, #4
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	d1cb      	bne.n	8003b92 <quorem+0x9e>
 8003bfa:	3c01      	subs	r4, #1
 8003bfc:	e7c6      	b.n	8003b8c <quorem+0x98>
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	3b04      	subs	r3, #4
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d1f0      	bne.n	8003be8 <quorem+0xf4>
 8003c06:	3c01      	subs	r4, #1
 8003c08:	e7eb      	b.n	8003be2 <quorem+0xee>
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e7ee      	b.n	8003bec <quorem+0xf8>
	...

08003c10 <_dtoa_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	4616      	mov	r6, r2
 8003c16:	461f      	mov	r7, r3
 8003c18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c1a:	b099      	sub	sp, #100	; 0x64
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003c26:	b974      	cbnz	r4, 8003c46 <_dtoa_r+0x36>
 8003c28:	2010      	movs	r0, #16
 8003c2a:	f000 fedd 	bl	80049e8 <malloc>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	6268      	str	r0, [r5, #36]	; 0x24
 8003c32:	b920      	cbnz	r0, 8003c3e <_dtoa_r+0x2e>
 8003c34:	21ea      	movs	r1, #234	; 0xea
 8003c36:	4bae      	ldr	r3, [pc, #696]	; (8003ef0 <_dtoa_r+0x2e0>)
 8003c38:	48ae      	ldr	r0, [pc, #696]	; (8003ef4 <_dtoa_r+0x2e4>)
 8003c3a:	f001 fdad 	bl	8005798 <__assert_func>
 8003c3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c42:	6004      	str	r4, [r0, #0]
 8003c44:	60c4      	str	r4, [r0, #12]
 8003c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	b151      	cbz	r1, 8003c62 <_dtoa_r+0x52>
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4093      	lsls	r3, r2
 8003c52:	604a      	str	r2, [r1, #4]
 8003c54:	608b      	str	r3, [r1, #8]
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 ff2a 	bl	8004ab0 <_Bfree>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	1e3b      	subs	r3, r7, #0
 8003c64:	bfaf      	iteee	ge
 8003c66:	2300      	movge	r3, #0
 8003c68:	2201      	movlt	r2, #1
 8003c6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c6e:	9305      	strlt	r3, [sp, #20]
 8003c70:	bfa8      	it	ge
 8003c72:	f8c8 3000 	strge.w	r3, [r8]
 8003c76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003c7a:	4b9f      	ldr	r3, [pc, #636]	; (8003ef8 <_dtoa_r+0x2e8>)
 8003c7c:	bfb8      	it	lt
 8003c7e:	f8c8 2000 	strlt.w	r2, [r8]
 8003c82:	ea33 0309 	bics.w	r3, r3, r9
 8003c86:	d119      	bne.n	8003cbc <_dtoa_r+0xac>
 8003c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c94:	4333      	orrs	r3, r6
 8003c96:	f000 8580 	beq.w	800479a <_dtoa_r+0xb8a>
 8003c9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c9c:	b953      	cbnz	r3, 8003cb4 <_dtoa_r+0xa4>
 8003c9e:	4b97      	ldr	r3, [pc, #604]	; (8003efc <_dtoa_r+0x2ec>)
 8003ca0:	e022      	b.n	8003ce8 <_dtoa_r+0xd8>
 8003ca2:	4b97      	ldr	r3, [pc, #604]	; (8003f00 <_dtoa_r+0x2f0>)
 8003ca4:	9308      	str	r3, [sp, #32]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	9808      	ldr	r0, [sp, #32]
 8003cae:	b019      	add	sp, #100	; 0x64
 8003cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb4:	4b91      	ldr	r3, [pc, #580]	; (8003efc <_dtoa_r+0x2ec>)
 8003cb6:	9308      	str	r3, [sp, #32]
 8003cb8:	3303      	adds	r3, #3
 8003cba:	e7f5      	b.n	8003ca8 <_dtoa_r+0x98>
 8003cbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003cc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f7fc fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	b158      	cbz	r0, 8003cec <_dtoa_r+0xdc>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8559 	beq.w	8004794 <_dtoa_r+0xb84>
 8003ce2:	4888      	ldr	r0, [pc, #544]	; (8003f04 <_dtoa_r+0x2f4>)
 8003ce4:	6018      	str	r0, [r3, #0]
 8003ce6:	1e43      	subs	r3, r0, #1
 8003ce8:	9308      	str	r3, [sp, #32]
 8003cea:	e7df      	b.n	8003cac <_dtoa_r+0x9c>
 8003cec:	ab16      	add	r3, sp, #88	; 0x58
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	ab17      	add	r3, sp, #92	; 0x5c
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003cfa:	f001 f9bf 	bl	800507c <__d2b>
 8003cfe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d02:	4682      	mov	sl, r0
 8003d04:	2c00      	cmp	r4, #0
 8003d06:	d07e      	beq.n	8003e06 <_dtoa_r+0x1f6>
 8003d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d1a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d1e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003d22:	2200      	movs	r2, #0
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <_dtoa_r+0x2f8>)
 8003d26:	f7fc fa1f 	bl	8000168 <__aeabi_dsub>
 8003d2a:	a36b      	add	r3, pc, #428	; (adr r3, 8003ed8 <_dtoa_r+0x2c8>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc fbd2 	bl	80004d8 <__aeabi_dmul>
 8003d34:	a36a      	add	r3, pc, #424	; (adr r3, 8003ee0 <_dtoa_r+0x2d0>)
 8003d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3a:	f7fc fa17 	bl	800016c <__adddf3>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	4620      	mov	r0, r4
 8003d42:	460f      	mov	r7, r1
 8003d44:	f7fc fb5e 	bl	8000404 <__aeabi_i2d>
 8003d48:	a367      	add	r3, pc, #412	; (adr r3, 8003ee8 <_dtoa_r+0x2d8>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f7fc fbc3 	bl	80004d8 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4630      	mov	r0, r6
 8003d58:	4639      	mov	r1, r7
 8003d5a:	f7fc fa07 	bl	800016c <__adddf3>
 8003d5e:	4606      	mov	r6, r0
 8003d60:	460f      	mov	r7, r1
 8003d62:	f7fc fe69 	bl	8000a38 <__aeabi_d2iz>
 8003d66:	2200      	movs	r2, #0
 8003d68:	4681      	mov	r9, r0
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	4639      	mov	r1, r7
 8003d70:	f7fc fe24 	bl	80009bc <__aeabi_dcmplt>
 8003d74:	b148      	cbz	r0, 8003d8a <_dtoa_r+0x17a>
 8003d76:	4648      	mov	r0, r9
 8003d78:	f7fc fb44 	bl	8000404 <__aeabi_i2d>
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	463b      	mov	r3, r7
 8003d80:	f7fc fe12 	bl	80009a8 <__aeabi_dcmpeq>
 8003d84:	b908      	cbnz	r0, 8003d8a <_dtoa_r+0x17a>
 8003d86:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003d8a:	f1b9 0f16 	cmp.w	r9, #22
 8003d8e:	d857      	bhi.n	8003e40 <_dtoa_r+0x230>
 8003d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d94:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <_dtoa_r+0x2fc>)
 8003d96:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fe0d 	bl	80009bc <__aeabi_dcmplt>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d04e      	beq.n	8003e44 <_dtoa_r+0x234>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8003dae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003db0:	1b1c      	subs	r4, r3, r4
 8003db2:	1e63      	subs	r3, r4, #1
 8003db4:	9309      	str	r3, [sp, #36]	; 0x24
 8003db6:	bf49      	itett	mi
 8003db8:	f1c4 0301 	rsbmi	r3, r4, #1
 8003dbc:	2300      	movpl	r3, #0
 8003dbe:	9306      	strmi	r3, [sp, #24]
 8003dc0:	2300      	movmi	r3, #0
 8003dc2:	bf54      	ite	pl
 8003dc4:	9306      	strpl	r3, [sp, #24]
 8003dc6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003dc8:	f1b9 0f00 	cmp.w	r9, #0
 8003dcc:	db3c      	blt.n	8003e48 <_dtoa_r+0x238>
 8003dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003dd4:	444b      	add	r3, r9
 8003dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd8:	2300      	movs	r3, #0
 8003dda:	930a      	str	r3, [sp, #40]	; 0x28
 8003ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dde:	2b09      	cmp	r3, #9
 8003de0:	d86c      	bhi.n	8003ebc <_dtoa_r+0x2ac>
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	bfc4      	itt	gt
 8003de6:	3b04      	subgt	r3, #4
 8003de8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dec:	bfc8      	it	gt
 8003dee:	2400      	movgt	r4, #0
 8003df0:	f1a3 0302 	sub.w	r3, r3, #2
 8003df4:	bfd8      	it	le
 8003df6:	2401      	movle	r4, #1
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	f200 808b 	bhi.w	8003f14 <_dtoa_r+0x304>
 8003dfe:	e8df f003 	tbb	[pc, r3]
 8003e02:	4f2d      	.short	0x4f2d
 8003e04:	5b4d      	.short	0x5b4d
 8003e06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e0a:	441c      	add	r4, r3
 8003e0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	bfc3      	ittte	gt
 8003e14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003e1c:	fa09 f303 	lslgt.w	r3, r9, r3
 8003e20:	f1c3 0320 	rsble	r3, r3, #32
 8003e24:	bfc6      	itte	gt
 8003e26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003e2a:	4318      	orrgt	r0, r3
 8003e2c:	fa06 f003 	lslle.w	r0, r6, r3
 8003e30:	f7fc fad8 	bl	80003e4 <__aeabi_ui2d>
 8003e34:	2301      	movs	r3, #1
 8003e36:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003e3a:	3c01      	subs	r4, #1
 8003e3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e3e:	e770      	b.n	8003d22 <_dtoa_r+0x112>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e7b3      	b.n	8003dac <_dtoa_r+0x19c>
 8003e44:	900f      	str	r0, [sp, #60]	; 0x3c
 8003e46:	e7b2      	b.n	8003dae <_dtoa_r+0x19e>
 8003e48:	9b06      	ldr	r3, [sp, #24]
 8003e4a:	eba3 0309 	sub.w	r3, r3, r9
 8003e4e:	9306      	str	r3, [sp, #24]
 8003e50:	f1c9 0300 	rsb	r3, r9, #0
 8003e54:	930a      	str	r3, [sp, #40]	; 0x28
 8003e56:	2300      	movs	r3, #0
 8003e58:	930e      	str	r3, [sp, #56]	; 0x38
 8003e5a:	e7bf      	b.n	8003ddc <_dtoa_r+0x1cc>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	dc59      	bgt.n	8003f1a <_dtoa_r+0x30a>
 8003e66:	f04f 0b01 	mov.w	fp, #1
 8003e6a:	465b      	mov	r3, fp
 8003e6c:	f8cd b008 	str.w	fp, [sp, #8]
 8003e70:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003e74:	2200      	movs	r2, #0
 8003e76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e78:	6042      	str	r2, [r0, #4]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	f102 0614 	add.w	r6, r2, #20
 8003e80:	429e      	cmp	r6, r3
 8003e82:	6841      	ldr	r1, [r0, #4]
 8003e84:	d94f      	bls.n	8003f26 <_dtoa_r+0x316>
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fdd2 	bl	8004a30 <_Balloc>
 8003e8c:	9008      	str	r0, [sp, #32]
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d14d      	bne.n	8003f2e <_dtoa_r+0x31e>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <_dtoa_r+0x300>)
 8003e9a:	e6cd      	b.n	8003c38 <_dtoa_r+0x28>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e7de      	b.n	8003e5e <_dtoa_r+0x24e>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ea4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ea6:	eb09 0b03 	add.w	fp, r9, r3
 8003eaa:	f10b 0301 	add.w	r3, fp, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	9302      	str	r3, [sp, #8]
 8003eb2:	bfb8      	it	lt
 8003eb4:	2301      	movlt	r3, #1
 8003eb6:	e7dd      	b.n	8003e74 <_dtoa_r+0x264>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e7f2      	b.n	8003ea2 <_dtoa_r+0x292>
 8003ebc:	2401      	movs	r4, #1
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003ec2:	9322      	str	r3, [sp, #136]	; 0x88
 8003ec4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2312      	movs	r3, #18
 8003ecc:	f8cd b008 	str.w	fp, [sp, #8]
 8003ed0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003ed2:	e7cf      	b.n	8003e74 <_dtoa_r+0x264>
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	636f4361 	.word	0x636f4361
 8003edc:	3fd287a7 	.word	0x3fd287a7
 8003ee0:	8b60c8b3 	.word	0x8b60c8b3
 8003ee4:	3fc68a28 	.word	0x3fc68a28
 8003ee8:	509f79fb 	.word	0x509f79fb
 8003eec:	3fd34413 	.word	0x3fd34413
 8003ef0:	08005c85 	.word	0x08005c85
 8003ef4:	08005c9c 	.word	0x08005c9c
 8003ef8:	7ff00000 	.word	0x7ff00000
 8003efc:	08005c81 	.word	0x08005c81
 8003f00:	08005c78 	.word	0x08005c78
 8003f04:	08005c55 	.word	0x08005c55
 8003f08:	3ff80000 	.word	0x3ff80000
 8003f0c:	08005df8 	.word	0x08005df8
 8003f10:	08005cfb 	.word	0x08005cfb
 8003f14:	2301      	movs	r3, #1
 8003f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f18:	e7d4      	b.n	8003ec4 <_dtoa_r+0x2b4>
 8003f1a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003f1e:	465b      	mov	r3, fp
 8003f20:	f8cd b008 	str.w	fp, [sp, #8]
 8003f24:	e7a6      	b.n	8003e74 <_dtoa_r+0x264>
 8003f26:	3101      	adds	r1, #1
 8003f28:	6041      	str	r1, [r0, #4]
 8003f2a:	0052      	lsls	r2, r2, #1
 8003f2c:	e7a6      	b.n	8003e7c <_dtoa_r+0x26c>
 8003f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f30:	9a08      	ldr	r2, [sp, #32]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	9b02      	ldr	r3, [sp, #8]
 8003f36:	2b0e      	cmp	r3, #14
 8003f38:	f200 80a8 	bhi.w	800408c <_dtoa_r+0x47c>
 8003f3c:	2c00      	cmp	r4, #0
 8003f3e:	f000 80a5 	beq.w	800408c <_dtoa_r+0x47c>
 8003f42:	f1b9 0f00 	cmp.w	r9, #0
 8003f46:	dd34      	ble.n	8003fb2 <_dtoa_r+0x3a2>
 8003f48:	4a9a      	ldr	r2, [pc, #616]	; (80041b4 <_dtoa_r+0x5a4>)
 8003f4a:	f009 030f 	and.w	r3, r9, #15
 8003f4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f52:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f5e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003f62:	d016      	beq.n	8003f92 <_dtoa_r+0x382>
 8003f64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f68:	4b93      	ldr	r3, [pc, #588]	; (80041b8 <_dtoa_r+0x5a8>)
 8003f6a:	2703      	movs	r7, #3
 8003f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f70:	f7fc fbdc 	bl	800072c <__aeabi_ddiv>
 8003f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f78:	f004 040f 	and.w	r4, r4, #15
 8003f7c:	4e8e      	ldr	r6, [pc, #568]	; (80041b8 <_dtoa_r+0x5a8>)
 8003f7e:	b954      	cbnz	r4, 8003f96 <_dtoa_r+0x386>
 8003f80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f88:	f7fc fbd0 	bl	800072c <__aeabi_ddiv>
 8003f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f90:	e029      	b.n	8003fe6 <_dtoa_r+0x3d6>
 8003f92:	2702      	movs	r7, #2
 8003f94:	e7f2      	b.n	8003f7c <_dtoa_r+0x36c>
 8003f96:	07e1      	lsls	r1, r4, #31
 8003f98:	d508      	bpl.n	8003fac <_dtoa_r+0x39c>
 8003f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003fa2:	f7fc fa99 	bl	80004d8 <__aeabi_dmul>
 8003fa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003faa:	3701      	adds	r7, #1
 8003fac:	1064      	asrs	r4, r4, #1
 8003fae:	3608      	adds	r6, #8
 8003fb0:	e7e5      	b.n	8003f7e <_dtoa_r+0x36e>
 8003fb2:	f000 80a5 	beq.w	8004100 <_dtoa_r+0x4f0>
 8003fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fba:	f1c9 0400 	rsb	r4, r9, #0
 8003fbe:	4b7d      	ldr	r3, [pc, #500]	; (80041b4 <_dtoa_r+0x5a4>)
 8003fc0:	f004 020f 	and.w	r2, r4, #15
 8003fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fa84 	bl	80004d8 <__aeabi_dmul>
 8003fd0:	2702      	movs	r7, #2
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fd8:	4e77      	ldr	r6, [pc, #476]	; (80041b8 <_dtoa_r+0x5a8>)
 8003fda:	1124      	asrs	r4, r4, #4
 8003fdc:	2c00      	cmp	r4, #0
 8003fde:	f040 8084 	bne.w	80040ea <_dtoa_r+0x4da>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1d2      	bne.n	8003f8c <_dtoa_r+0x37c>
 8003fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 808b 	beq.w	8004104 <_dtoa_r+0x4f4>
 8003fee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ff2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ff6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <_dtoa_r+0x5ac>)
 8003ffe:	f7fc fcdd 	bl	80009bc <__aeabi_dcmplt>
 8004002:	2800      	cmp	r0, #0
 8004004:	d07e      	beq.n	8004104 <_dtoa_r+0x4f4>
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d07b      	beq.n	8004104 <_dtoa_r+0x4f4>
 800400c:	f1bb 0f00 	cmp.w	fp, #0
 8004010:	dd38      	ble.n	8004084 <_dtoa_r+0x474>
 8004012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004016:	2200      	movs	r2, #0
 8004018:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <_dtoa_r+0x5b0>)
 800401a:	f7fc fa5d 	bl	80004d8 <__aeabi_dmul>
 800401e:	465c      	mov	r4, fp
 8004020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004024:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8004028:	3701      	adds	r7, #1
 800402a:	4638      	mov	r0, r7
 800402c:	f7fc f9ea 	bl	8000404 <__aeabi_i2d>
 8004030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004034:	f7fc fa50 	bl	80004d8 <__aeabi_dmul>
 8004038:	2200      	movs	r2, #0
 800403a:	4b62      	ldr	r3, [pc, #392]	; (80041c4 <_dtoa_r+0x5b4>)
 800403c:	f7fc f896 	bl	800016c <__adddf3>
 8004040:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004044:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004048:	9611      	str	r6, [sp, #68]	; 0x44
 800404a:	2c00      	cmp	r4, #0
 800404c:	d15d      	bne.n	800410a <_dtoa_r+0x4fa>
 800404e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004052:	2200      	movs	r2, #0
 8004054:	4b5c      	ldr	r3, [pc, #368]	; (80041c8 <_dtoa_r+0x5b8>)
 8004056:	f7fc f887 	bl	8000168 <__aeabi_dsub>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004062:	4633      	mov	r3, r6
 8004064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004066:	f7fc fcc7 	bl	80009f8 <__aeabi_dcmpgt>
 800406a:	2800      	cmp	r0, #0
 800406c:	f040 829e 	bne.w	80045ac <_dtoa_r+0x99c>
 8004070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004076:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800407a:	f7fc fc9f 	bl	80009bc <__aeabi_dcmplt>
 800407e:	2800      	cmp	r0, #0
 8004080:	f040 8292 	bne.w	80045a8 <_dtoa_r+0x998>
 8004084:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004088:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800408c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800408e:	2b00      	cmp	r3, #0
 8004090:	f2c0 8153 	blt.w	800433a <_dtoa_r+0x72a>
 8004094:	f1b9 0f0e 	cmp.w	r9, #14
 8004098:	f300 814f 	bgt.w	800433a <_dtoa_r+0x72a>
 800409c:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <_dtoa_r+0x5a4>)
 800409e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80040a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80040aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f280 80db 	bge.w	8004268 <_dtoa_r+0x658>
 80040b2:	9b02      	ldr	r3, [sp, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f300 80d7 	bgt.w	8004268 <_dtoa_r+0x658>
 80040ba:	f040 8274 	bne.w	80045a6 <_dtoa_r+0x996>
 80040be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c2:	2200      	movs	r2, #0
 80040c4:	4b40      	ldr	r3, [pc, #256]	; (80041c8 <_dtoa_r+0x5b8>)
 80040c6:	f7fc fa07 	bl	80004d8 <__aeabi_dmul>
 80040ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ce:	f7fc fc89 	bl	80009e4 <__aeabi_dcmpge>
 80040d2:	9c02      	ldr	r4, [sp, #8]
 80040d4:	4626      	mov	r6, r4
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f040 824a 	bne.w	8004570 <_dtoa_r+0x960>
 80040dc:	2331      	movs	r3, #49	; 0x31
 80040de:	9f08      	ldr	r7, [sp, #32]
 80040e0:	f109 0901 	add.w	r9, r9, #1
 80040e4:	f807 3b01 	strb.w	r3, [r7], #1
 80040e8:	e246      	b.n	8004578 <_dtoa_r+0x968>
 80040ea:	07e2      	lsls	r2, r4, #31
 80040ec:	d505      	bpl.n	80040fa <_dtoa_r+0x4ea>
 80040ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80040f2:	f7fc f9f1 	bl	80004d8 <__aeabi_dmul>
 80040f6:	2301      	movs	r3, #1
 80040f8:	3701      	adds	r7, #1
 80040fa:	1064      	asrs	r4, r4, #1
 80040fc:	3608      	adds	r6, #8
 80040fe:	e76d      	b.n	8003fdc <_dtoa_r+0x3cc>
 8004100:	2702      	movs	r7, #2
 8004102:	e770      	b.n	8003fe6 <_dtoa_r+0x3d6>
 8004104:	46c8      	mov	r8, r9
 8004106:	9c02      	ldr	r4, [sp, #8]
 8004108:	e78f      	b.n	800402a <_dtoa_r+0x41a>
 800410a:	9908      	ldr	r1, [sp, #32]
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <_dtoa_r+0x5a4>)
 800410e:	4421      	add	r1, r4
 8004110:	9112      	str	r1, [sp, #72]	; 0x48
 8004112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004114:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004118:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800411c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004120:	2900      	cmp	r1, #0
 8004122:	d055      	beq.n	80041d0 <_dtoa_r+0x5c0>
 8004124:	2000      	movs	r0, #0
 8004126:	4929      	ldr	r1, [pc, #164]	; (80041cc <_dtoa_r+0x5bc>)
 8004128:	f7fc fb00 	bl	800072c <__aeabi_ddiv>
 800412c:	463b      	mov	r3, r7
 800412e:	4632      	mov	r2, r6
 8004130:	f7fc f81a 	bl	8000168 <__aeabi_dsub>
 8004134:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004138:	9f08      	ldr	r7, [sp, #32]
 800413a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800413e:	f7fc fc7b 	bl	8000a38 <__aeabi_d2iz>
 8004142:	4604      	mov	r4, r0
 8004144:	f7fc f95e 	bl	8000404 <__aeabi_i2d>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004150:	f7fc f80a 	bl	8000168 <__aeabi_dsub>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	3430      	adds	r4, #48	; 0x30
 800415a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800415e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004162:	f807 4b01 	strb.w	r4, [r7], #1
 8004166:	f7fc fc29 	bl	80009bc <__aeabi_dcmplt>
 800416a:	2800      	cmp	r0, #0
 800416c:	d174      	bne.n	8004258 <_dtoa_r+0x648>
 800416e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004172:	2000      	movs	r0, #0
 8004174:	4911      	ldr	r1, [pc, #68]	; (80041bc <_dtoa_r+0x5ac>)
 8004176:	f7fb fff7 	bl	8000168 <__aeabi_dsub>
 800417a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800417e:	f7fc fc1d 	bl	80009bc <__aeabi_dcmplt>
 8004182:	2800      	cmp	r0, #0
 8004184:	f040 80b6 	bne.w	80042f4 <_dtoa_r+0x6e4>
 8004188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800418a:	429f      	cmp	r7, r3
 800418c:	f43f af7a 	beq.w	8004084 <_dtoa_r+0x474>
 8004190:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004194:	2200      	movs	r2, #0
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <_dtoa_r+0x5b0>)
 8004198:	f7fc f99e 	bl	80004d8 <__aeabi_dmul>
 800419c:	2200      	movs	r2, #0
 800419e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <_dtoa_r+0x5b0>)
 80041a8:	f7fc f996 	bl	80004d8 <__aeabi_dmul>
 80041ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041b0:	e7c3      	b.n	800413a <_dtoa_r+0x52a>
 80041b2:	bf00      	nop
 80041b4:	08005df8 	.word	0x08005df8
 80041b8:	08005dd0 	.word	0x08005dd0
 80041bc:	3ff00000 	.word	0x3ff00000
 80041c0:	40240000 	.word	0x40240000
 80041c4:	401c0000 	.word	0x401c0000
 80041c8:	40140000 	.word	0x40140000
 80041cc:	3fe00000 	.word	0x3fe00000
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc f980 	bl	80004d8 <__aeabi_dmul>
 80041d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041de:	9c08      	ldr	r4, [sp, #32]
 80041e0:	9314      	str	r3, [sp, #80]	; 0x50
 80041e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041e6:	f7fc fc27 	bl	8000a38 <__aeabi_d2iz>
 80041ea:	9015      	str	r0, [sp, #84]	; 0x54
 80041ec:	f7fc f90a 	bl	8000404 <__aeabi_i2d>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041f8:	f7fb ffb6 	bl	8000168 <__aeabi_dsub>
 80041fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041fe:	4606      	mov	r6, r0
 8004200:	3330      	adds	r3, #48	; 0x30
 8004202:	f804 3b01 	strb.w	r3, [r4], #1
 8004206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004208:	460f      	mov	r7, r1
 800420a:	429c      	cmp	r4, r3
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	d124      	bne.n	800425c <_dtoa_r+0x64c>
 8004212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004216:	4bb3      	ldr	r3, [pc, #716]	; (80044e4 <_dtoa_r+0x8d4>)
 8004218:	f7fb ffa8 	bl	800016c <__adddf3>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4630      	mov	r0, r6
 8004222:	4639      	mov	r1, r7
 8004224:	f7fc fbe8 	bl	80009f8 <__aeabi_dcmpgt>
 8004228:	2800      	cmp	r0, #0
 800422a:	d162      	bne.n	80042f2 <_dtoa_r+0x6e2>
 800422c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004230:	2000      	movs	r0, #0
 8004232:	49ac      	ldr	r1, [pc, #688]	; (80044e4 <_dtoa_r+0x8d4>)
 8004234:	f7fb ff98 	bl	8000168 <__aeabi_dsub>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4630      	mov	r0, r6
 800423e:	4639      	mov	r1, r7
 8004240:	f7fc fbbc 	bl	80009bc <__aeabi_dcmplt>
 8004244:	2800      	cmp	r0, #0
 8004246:	f43f af1d 	beq.w	8004084 <_dtoa_r+0x474>
 800424a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800424c:	1e7b      	subs	r3, r7, #1
 800424e:	9314      	str	r3, [sp, #80]	; 0x50
 8004250:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	d0f8      	beq.n	800424a <_dtoa_r+0x63a>
 8004258:	46c1      	mov	r9, r8
 800425a:	e03a      	b.n	80042d2 <_dtoa_r+0x6c2>
 800425c:	4ba2      	ldr	r3, [pc, #648]	; (80044e8 <_dtoa_r+0x8d8>)
 800425e:	f7fc f93b 	bl	80004d8 <__aeabi_dmul>
 8004262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004266:	e7bc      	b.n	80041e2 <_dtoa_r+0x5d2>
 8004268:	9f08      	ldr	r7, [sp, #32]
 800426a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800426e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004272:	f7fc fa5b 	bl	800072c <__aeabi_ddiv>
 8004276:	f7fc fbdf 	bl	8000a38 <__aeabi_d2iz>
 800427a:	4604      	mov	r4, r0
 800427c:	f7fc f8c2 	bl	8000404 <__aeabi_i2d>
 8004280:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004284:	f7fc f928 	bl	80004d8 <__aeabi_dmul>
 8004288:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800428c:	460b      	mov	r3, r1
 800428e:	4602      	mov	r2, r0
 8004290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004294:	f7fb ff68 	bl	8000168 <__aeabi_dsub>
 8004298:	f807 6b01 	strb.w	r6, [r7], #1
 800429c:	9e08      	ldr	r6, [sp, #32]
 800429e:	9b02      	ldr	r3, [sp, #8]
 80042a0:	1bbe      	subs	r6, r7, r6
 80042a2:	42b3      	cmp	r3, r6
 80042a4:	d13a      	bne.n	800431c <_dtoa_r+0x70c>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	f7fb ff5f 	bl	800016c <__adddf3>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ba:	f7fc fb9d 	bl	80009f8 <__aeabi_dcmpgt>
 80042be:	bb58      	cbnz	r0, 8004318 <_dtoa_r+0x708>
 80042c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c8:	f7fc fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80042cc:	b108      	cbz	r0, 80042d2 <_dtoa_r+0x6c2>
 80042ce:	07e1      	lsls	r1, r4, #31
 80042d0:	d422      	bmi.n	8004318 <_dtoa_r+0x708>
 80042d2:	4628      	mov	r0, r5
 80042d4:	4651      	mov	r1, sl
 80042d6:	f000 fbeb 	bl	8004ab0 <_Bfree>
 80042da:	2300      	movs	r3, #0
 80042dc:	703b      	strb	r3, [r7, #0]
 80042de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80042e0:	f109 0001 	add.w	r0, r9, #1
 80042e4:	6018      	str	r0, [r3, #0]
 80042e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f43f acdf 	beq.w	8003cac <_dtoa_r+0x9c>
 80042ee:	601f      	str	r7, [r3, #0]
 80042f0:	e4dc      	b.n	8003cac <_dtoa_r+0x9c>
 80042f2:	4627      	mov	r7, r4
 80042f4:	463b      	mov	r3, r7
 80042f6:	461f      	mov	r7, r3
 80042f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042fc:	2a39      	cmp	r2, #57	; 0x39
 80042fe:	d107      	bne.n	8004310 <_dtoa_r+0x700>
 8004300:	9a08      	ldr	r2, [sp, #32]
 8004302:	429a      	cmp	r2, r3
 8004304:	d1f7      	bne.n	80042f6 <_dtoa_r+0x6e6>
 8004306:	2230      	movs	r2, #48	; 0x30
 8004308:	9908      	ldr	r1, [sp, #32]
 800430a:	f108 0801 	add.w	r8, r8, #1
 800430e:	700a      	strb	r2, [r1, #0]
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	3201      	adds	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e79f      	b.n	8004258 <_dtoa_r+0x648>
 8004318:	46c8      	mov	r8, r9
 800431a:	e7eb      	b.n	80042f4 <_dtoa_r+0x6e4>
 800431c:	2200      	movs	r2, #0
 800431e:	4b72      	ldr	r3, [pc, #456]	; (80044e8 <_dtoa_r+0x8d8>)
 8004320:	f7fc f8da 	bl	80004d8 <__aeabi_dmul>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800432c:	2200      	movs	r2, #0
 800432e:	2300      	movs	r3, #0
 8004330:	f7fc fb3a 	bl	80009a8 <__aeabi_dcmpeq>
 8004334:	2800      	cmp	r0, #0
 8004336:	d098      	beq.n	800426a <_dtoa_r+0x65a>
 8004338:	e7cb      	b.n	80042d2 <_dtoa_r+0x6c2>
 800433a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800433c:	2a00      	cmp	r2, #0
 800433e:	f000 80cd 	beq.w	80044dc <_dtoa_r+0x8cc>
 8004342:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004344:	2a01      	cmp	r2, #1
 8004346:	f300 80af 	bgt.w	80044a8 <_dtoa_r+0x898>
 800434a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800434c:	2a00      	cmp	r2, #0
 800434e:	f000 80a7 	beq.w	80044a0 <_dtoa_r+0x890>
 8004352:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004356:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004358:	9f06      	ldr	r7, [sp, #24]
 800435a:	9a06      	ldr	r2, [sp, #24]
 800435c:	2101      	movs	r1, #1
 800435e:	441a      	add	r2, r3
 8004360:	9206      	str	r2, [sp, #24]
 8004362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004364:	4628      	mov	r0, r5
 8004366:	441a      	add	r2, r3
 8004368:	9209      	str	r2, [sp, #36]	; 0x24
 800436a:	f000 fc5b 	bl	8004c24 <__i2b>
 800436e:	4606      	mov	r6, r0
 8004370:	2f00      	cmp	r7, #0
 8004372:	dd0c      	ble.n	800438e <_dtoa_r+0x77e>
 8004374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	dd09      	ble.n	800438e <_dtoa_r+0x77e>
 800437a:	42bb      	cmp	r3, r7
 800437c:	bfa8      	it	ge
 800437e:	463b      	movge	r3, r7
 8004380:	9a06      	ldr	r2, [sp, #24]
 8004382:	1aff      	subs	r7, r7, r3
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	9206      	str	r2, [sp, #24]
 8004388:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	9309      	str	r3, [sp, #36]	; 0x24
 800438e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004390:	b1f3      	cbz	r3, 80043d0 <_dtoa_r+0x7c0>
 8004392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a9 	beq.w	80044ec <_dtoa_r+0x8dc>
 800439a:	2c00      	cmp	r4, #0
 800439c:	dd10      	ble.n	80043c0 <_dtoa_r+0x7b0>
 800439e:	4631      	mov	r1, r6
 80043a0:	4622      	mov	r2, r4
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 fcf8 	bl	8004d98 <__pow5mult>
 80043a8:	4652      	mov	r2, sl
 80043aa:	4601      	mov	r1, r0
 80043ac:	4606      	mov	r6, r0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 fc4e 	bl	8004c50 <__multiply>
 80043b4:	4680      	mov	r8, r0
 80043b6:	4651      	mov	r1, sl
 80043b8:	4628      	mov	r0, r5
 80043ba:	f000 fb79 	bl	8004ab0 <_Bfree>
 80043be:	46c2      	mov	sl, r8
 80043c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c2:	1b1a      	subs	r2, r3, r4
 80043c4:	d004      	beq.n	80043d0 <_dtoa_r+0x7c0>
 80043c6:	4651      	mov	r1, sl
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 fce5 	bl	8004d98 <__pow5mult>
 80043ce:	4682      	mov	sl, r0
 80043d0:	2101      	movs	r1, #1
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 fc26 	bl	8004c24 <__i2b>
 80043d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043da:	4604      	mov	r4, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f340 8087 	ble.w	80044f0 <_dtoa_r+0x8e0>
 80043e2:	461a      	mov	r2, r3
 80043e4:	4601      	mov	r1, r0
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 fcd6 	bl	8004d98 <__pow5mult>
 80043ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043ee:	4604      	mov	r4, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	f340 8080 	ble.w	80044f6 <_dtoa_r+0x8e6>
 80043f6:	f04f 0800 	mov.w	r8, #0
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004400:	6918      	ldr	r0, [r3, #16]
 8004402:	f000 fbc1 	bl	8004b88 <__hi0bits>
 8004406:	f1c0 0020 	rsb	r0, r0, #32
 800440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440c:	4418      	add	r0, r3
 800440e:	f010 001f 	ands.w	r0, r0, #31
 8004412:	f000 8092 	beq.w	800453a <_dtoa_r+0x92a>
 8004416:	f1c0 0320 	rsb	r3, r0, #32
 800441a:	2b04      	cmp	r3, #4
 800441c:	f340 808a 	ble.w	8004534 <_dtoa_r+0x924>
 8004420:	f1c0 001c 	rsb	r0, r0, #28
 8004424:	9b06      	ldr	r3, [sp, #24]
 8004426:	4407      	add	r7, r0
 8004428:	4403      	add	r3, r0
 800442a:	9306      	str	r3, [sp, #24]
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	4403      	add	r3, r0
 8004430:	9309      	str	r3, [sp, #36]	; 0x24
 8004432:	9b06      	ldr	r3, [sp, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dd05      	ble.n	8004444 <_dtoa_r+0x834>
 8004438:	4651      	mov	r1, sl
 800443a:	461a      	mov	r2, r3
 800443c:	4628      	mov	r0, r5
 800443e:	f000 fd05 	bl	8004e4c <__lshift>
 8004442:	4682      	mov	sl, r0
 8004444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	dd05      	ble.n	8004456 <_dtoa_r+0x846>
 800444a:	4621      	mov	r1, r4
 800444c:	461a      	mov	r2, r3
 800444e:	4628      	mov	r0, r5
 8004450:	f000 fcfc 	bl	8004e4c <__lshift>
 8004454:	4604      	mov	r4, r0
 8004456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d070      	beq.n	800453e <_dtoa_r+0x92e>
 800445c:	4621      	mov	r1, r4
 800445e:	4650      	mov	r0, sl
 8004460:	f000 fd60 	bl	8004f24 <__mcmp>
 8004464:	2800      	cmp	r0, #0
 8004466:	da6a      	bge.n	800453e <_dtoa_r+0x92e>
 8004468:	2300      	movs	r3, #0
 800446a:	4651      	mov	r1, sl
 800446c:	220a      	movs	r2, #10
 800446e:	4628      	mov	r0, r5
 8004470:	f000 fb40 	bl	8004af4 <__multadd>
 8004474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004476:	4682      	mov	sl, r0
 8004478:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8193 	beq.w	80047a8 <_dtoa_r+0xb98>
 8004482:	4631      	mov	r1, r6
 8004484:	2300      	movs	r3, #0
 8004486:	220a      	movs	r2, #10
 8004488:	4628      	mov	r0, r5
 800448a:	f000 fb33 	bl	8004af4 <__multadd>
 800448e:	f1bb 0f00 	cmp.w	fp, #0
 8004492:	4606      	mov	r6, r0
 8004494:	f300 8093 	bgt.w	80045be <_dtoa_r+0x9ae>
 8004498:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800449a:	2b02      	cmp	r3, #2
 800449c:	dc57      	bgt.n	800454e <_dtoa_r+0x93e>
 800449e:	e08e      	b.n	80045be <_dtoa_r+0x9ae>
 80044a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044a6:	e756      	b.n	8004356 <_dtoa_r+0x746>
 80044a8:	9b02      	ldr	r3, [sp, #8]
 80044aa:	1e5c      	subs	r4, r3, #1
 80044ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	bfb7      	itett	lt
 80044b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80044b4:	1b1c      	subge	r4, r3, r4
 80044b6:	1ae2      	sublt	r2, r4, r3
 80044b8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80044ba:	bfbe      	ittt	lt
 80044bc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80044be:	189b      	addlt	r3, r3, r2
 80044c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80044c2:	9b02      	ldr	r3, [sp, #8]
 80044c4:	bfb8      	it	lt
 80044c6:	2400      	movlt	r4, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bfbb      	ittet	lt
 80044cc:	9b06      	ldrlt	r3, [sp, #24]
 80044ce:	9a02      	ldrlt	r2, [sp, #8]
 80044d0:	9f06      	ldrge	r7, [sp, #24]
 80044d2:	1a9f      	sublt	r7, r3, r2
 80044d4:	bfac      	ite	ge
 80044d6:	9b02      	ldrge	r3, [sp, #8]
 80044d8:	2300      	movlt	r3, #0
 80044da:	e73e      	b.n	800435a <_dtoa_r+0x74a>
 80044dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044de:	9f06      	ldr	r7, [sp, #24]
 80044e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80044e2:	e745      	b.n	8004370 <_dtoa_r+0x760>
 80044e4:	3fe00000 	.word	0x3fe00000
 80044e8:	40240000 	.word	0x40240000
 80044ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ee:	e76a      	b.n	80043c6 <_dtoa_r+0x7b6>
 80044f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	dc19      	bgt.n	800452a <_dtoa_r+0x91a>
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	b9bb      	cbnz	r3, 800452a <_dtoa_r+0x91a>
 80044fa:	9b05      	ldr	r3, [sp, #20]
 80044fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004500:	b99b      	cbnz	r3, 800452a <_dtoa_r+0x91a>
 8004502:	9b05      	ldr	r3, [sp, #20]
 8004504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004508:	0d1b      	lsrs	r3, r3, #20
 800450a:	051b      	lsls	r3, r3, #20
 800450c:	b183      	cbz	r3, 8004530 <_dtoa_r+0x920>
 800450e:	f04f 0801 	mov.w	r8, #1
 8004512:	9b06      	ldr	r3, [sp, #24]
 8004514:	3301      	adds	r3, #1
 8004516:	9306      	str	r3, [sp, #24]
 8004518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	9309      	str	r3, [sp, #36]	; 0x24
 800451e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f af6a 	bne.w	80043fa <_dtoa_r+0x7ea>
 8004526:	2001      	movs	r0, #1
 8004528:	e76f      	b.n	800440a <_dtoa_r+0x7fa>
 800452a:	f04f 0800 	mov.w	r8, #0
 800452e:	e7f6      	b.n	800451e <_dtoa_r+0x90e>
 8004530:	4698      	mov	r8, r3
 8004532:	e7f4      	b.n	800451e <_dtoa_r+0x90e>
 8004534:	f43f af7d 	beq.w	8004432 <_dtoa_r+0x822>
 8004538:	4618      	mov	r0, r3
 800453a:	301c      	adds	r0, #28
 800453c:	e772      	b.n	8004424 <_dtoa_r+0x814>
 800453e:	9b02      	ldr	r3, [sp, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	dc36      	bgt.n	80045b2 <_dtoa_r+0x9a2>
 8004544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004546:	2b02      	cmp	r3, #2
 8004548:	dd33      	ble.n	80045b2 <_dtoa_r+0x9a2>
 800454a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800454e:	f1bb 0f00 	cmp.w	fp, #0
 8004552:	d10d      	bne.n	8004570 <_dtoa_r+0x960>
 8004554:	4621      	mov	r1, r4
 8004556:	465b      	mov	r3, fp
 8004558:	2205      	movs	r2, #5
 800455a:	4628      	mov	r0, r5
 800455c:	f000 faca 	bl	8004af4 <__multadd>
 8004560:	4601      	mov	r1, r0
 8004562:	4604      	mov	r4, r0
 8004564:	4650      	mov	r0, sl
 8004566:	f000 fcdd 	bl	8004f24 <__mcmp>
 800456a:	2800      	cmp	r0, #0
 800456c:	f73f adb6 	bgt.w	80040dc <_dtoa_r+0x4cc>
 8004570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004572:	9f08      	ldr	r7, [sp, #32]
 8004574:	ea6f 0903 	mvn.w	r9, r3
 8004578:	f04f 0800 	mov.w	r8, #0
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fa96 	bl	8004ab0 <_Bfree>
 8004584:	2e00      	cmp	r6, #0
 8004586:	f43f aea4 	beq.w	80042d2 <_dtoa_r+0x6c2>
 800458a:	f1b8 0f00 	cmp.w	r8, #0
 800458e:	d005      	beq.n	800459c <_dtoa_r+0x98c>
 8004590:	45b0      	cmp	r8, r6
 8004592:	d003      	beq.n	800459c <_dtoa_r+0x98c>
 8004594:	4641      	mov	r1, r8
 8004596:	4628      	mov	r0, r5
 8004598:	f000 fa8a 	bl	8004ab0 <_Bfree>
 800459c:	4631      	mov	r1, r6
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 fa86 	bl	8004ab0 <_Bfree>
 80045a4:	e695      	b.n	80042d2 <_dtoa_r+0x6c2>
 80045a6:	2400      	movs	r4, #0
 80045a8:	4626      	mov	r6, r4
 80045aa:	e7e1      	b.n	8004570 <_dtoa_r+0x960>
 80045ac:	46c1      	mov	r9, r8
 80045ae:	4626      	mov	r6, r4
 80045b0:	e594      	b.n	80040dc <_dtoa_r+0x4cc>
 80045b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80fc 	beq.w	80047b6 <_dtoa_r+0xba6>
 80045be:	2f00      	cmp	r7, #0
 80045c0:	dd05      	ble.n	80045ce <_dtoa_r+0x9be>
 80045c2:	4631      	mov	r1, r6
 80045c4:	463a      	mov	r2, r7
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 fc40 	bl	8004e4c <__lshift>
 80045cc:	4606      	mov	r6, r0
 80045ce:	f1b8 0f00 	cmp.w	r8, #0
 80045d2:	d05c      	beq.n	800468e <_dtoa_r+0xa7e>
 80045d4:	4628      	mov	r0, r5
 80045d6:	6871      	ldr	r1, [r6, #4]
 80045d8:	f000 fa2a 	bl	8004a30 <_Balloc>
 80045dc:	4607      	mov	r7, r0
 80045de:	b928      	cbnz	r0, 80045ec <_dtoa_r+0x9dc>
 80045e0:	4602      	mov	r2, r0
 80045e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80045e6:	4b7e      	ldr	r3, [pc, #504]	; (80047e0 <_dtoa_r+0xbd0>)
 80045e8:	f7ff bb26 	b.w	8003c38 <_dtoa_r+0x28>
 80045ec:	6932      	ldr	r2, [r6, #16]
 80045ee:	f106 010c 	add.w	r1, r6, #12
 80045f2:	3202      	adds	r2, #2
 80045f4:	0092      	lsls	r2, r2, #2
 80045f6:	300c      	adds	r0, #12
 80045f8:	f000 fa0c 	bl	8004a14 <memcpy>
 80045fc:	2201      	movs	r2, #1
 80045fe:	4639      	mov	r1, r7
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fc23 	bl	8004e4c <__lshift>
 8004606:	46b0      	mov	r8, r6
 8004608:	4606      	mov	r6, r0
 800460a:	9b08      	ldr	r3, [sp, #32]
 800460c:	3301      	adds	r3, #1
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	9b08      	ldr	r3, [sp, #32]
 8004612:	445b      	add	r3, fp
 8004614:	930a      	str	r3, [sp, #40]	; 0x28
 8004616:	9b04      	ldr	r3, [sp, #16]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	9309      	str	r3, [sp, #36]	; 0x24
 800461e:	9b02      	ldr	r3, [sp, #8]
 8004620:	4621      	mov	r1, r4
 8004622:	4650      	mov	r0, sl
 8004624:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004628:	f7ff fa64 	bl	8003af4 <quorem>
 800462c:	4603      	mov	r3, r0
 800462e:	4641      	mov	r1, r8
 8004630:	3330      	adds	r3, #48	; 0x30
 8004632:	9004      	str	r0, [sp, #16]
 8004634:	4650      	mov	r0, sl
 8004636:	930b      	str	r3, [sp, #44]	; 0x2c
 8004638:	f000 fc74 	bl	8004f24 <__mcmp>
 800463c:	4632      	mov	r2, r6
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fc8a 	bl	8004f5c <__mdiff>
 8004648:	68c2      	ldr	r2, [r0, #12]
 800464a:	4607      	mov	r7, r0
 800464c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800464e:	bb02      	cbnz	r2, 8004692 <_dtoa_r+0xa82>
 8004650:	4601      	mov	r1, r0
 8004652:	4650      	mov	r0, sl
 8004654:	f000 fc66 	bl	8004f24 <__mcmp>
 8004658:	4602      	mov	r2, r0
 800465a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800465c:	4639      	mov	r1, r7
 800465e:	4628      	mov	r0, r5
 8004660:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004664:	f000 fa24 	bl	8004ab0 <_Bfree>
 8004668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800466a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800466c:	9f02      	ldr	r7, [sp, #8]
 800466e:	ea43 0102 	orr.w	r1, r3, r2
 8004672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004674:	430b      	orrs	r3, r1
 8004676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004678:	d10d      	bne.n	8004696 <_dtoa_r+0xa86>
 800467a:	2b39      	cmp	r3, #57	; 0x39
 800467c:	d027      	beq.n	80046ce <_dtoa_r+0xabe>
 800467e:	9a06      	ldr	r2, [sp, #24]
 8004680:	2a00      	cmp	r2, #0
 8004682:	dd01      	ble.n	8004688 <_dtoa_r+0xa78>
 8004684:	9b04      	ldr	r3, [sp, #16]
 8004686:	3331      	adds	r3, #49	; 0x31
 8004688:	f88b 3000 	strb.w	r3, [fp]
 800468c:	e776      	b.n	800457c <_dtoa_r+0x96c>
 800468e:	4630      	mov	r0, r6
 8004690:	e7b9      	b.n	8004606 <_dtoa_r+0x9f6>
 8004692:	2201      	movs	r2, #1
 8004694:	e7e2      	b.n	800465c <_dtoa_r+0xa4c>
 8004696:	9906      	ldr	r1, [sp, #24]
 8004698:	2900      	cmp	r1, #0
 800469a:	db04      	blt.n	80046a6 <_dtoa_r+0xa96>
 800469c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800469e:	4301      	orrs	r1, r0
 80046a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a2:	4301      	orrs	r1, r0
 80046a4:	d120      	bne.n	80046e8 <_dtoa_r+0xad8>
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	ddee      	ble.n	8004688 <_dtoa_r+0xa78>
 80046aa:	4651      	mov	r1, sl
 80046ac:	2201      	movs	r2, #1
 80046ae:	4628      	mov	r0, r5
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	f000 fbcb 	bl	8004e4c <__lshift>
 80046b6:	4621      	mov	r1, r4
 80046b8:	4682      	mov	sl, r0
 80046ba:	f000 fc33 	bl	8004f24 <__mcmp>
 80046be:	2800      	cmp	r0, #0
 80046c0:	9b02      	ldr	r3, [sp, #8]
 80046c2:	dc02      	bgt.n	80046ca <_dtoa_r+0xaba>
 80046c4:	d1e0      	bne.n	8004688 <_dtoa_r+0xa78>
 80046c6:	07da      	lsls	r2, r3, #31
 80046c8:	d5de      	bpl.n	8004688 <_dtoa_r+0xa78>
 80046ca:	2b39      	cmp	r3, #57	; 0x39
 80046cc:	d1da      	bne.n	8004684 <_dtoa_r+0xa74>
 80046ce:	2339      	movs	r3, #57	; 0x39
 80046d0:	f88b 3000 	strb.w	r3, [fp]
 80046d4:	463b      	mov	r3, r7
 80046d6:	461f      	mov	r7, r3
 80046d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80046dc:	3b01      	subs	r3, #1
 80046de:	2a39      	cmp	r2, #57	; 0x39
 80046e0:	d050      	beq.n	8004784 <_dtoa_r+0xb74>
 80046e2:	3201      	adds	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e749      	b.n	800457c <_dtoa_r+0x96c>
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	dd03      	ble.n	80046f4 <_dtoa_r+0xae4>
 80046ec:	2b39      	cmp	r3, #57	; 0x39
 80046ee:	d0ee      	beq.n	80046ce <_dtoa_r+0xabe>
 80046f0:	3301      	adds	r3, #1
 80046f2:	e7c9      	b.n	8004688 <_dtoa_r+0xa78>
 80046f4:	9a02      	ldr	r2, [sp, #8]
 80046f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80046fc:	428a      	cmp	r2, r1
 80046fe:	d02a      	beq.n	8004756 <_dtoa_r+0xb46>
 8004700:	4651      	mov	r1, sl
 8004702:	2300      	movs	r3, #0
 8004704:	220a      	movs	r2, #10
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f9f4 	bl	8004af4 <__multadd>
 800470c:	45b0      	cmp	r8, r6
 800470e:	4682      	mov	sl, r0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	f04f 020a 	mov.w	r2, #10
 8004718:	4641      	mov	r1, r8
 800471a:	4628      	mov	r0, r5
 800471c:	d107      	bne.n	800472e <_dtoa_r+0xb1e>
 800471e:	f000 f9e9 	bl	8004af4 <__multadd>
 8004722:	4680      	mov	r8, r0
 8004724:	4606      	mov	r6, r0
 8004726:	9b02      	ldr	r3, [sp, #8]
 8004728:	3301      	adds	r3, #1
 800472a:	9302      	str	r3, [sp, #8]
 800472c:	e777      	b.n	800461e <_dtoa_r+0xa0e>
 800472e:	f000 f9e1 	bl	8004af4 <__multadd>
 8004732:	4631      	mov	r1, r6
 8004734:	4680      	mov	r8, r0
 8004736:	2300      	movs	r3, #0
 8004738:	220a      	movs	r2, #10
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f9da 	bl	8004af4 <__multadd>
 8004740:	4606      	mov	r6, r0
 8004742:	e7f0      	b.n	8004726 <_dtoa_r+0xb16>
 8004744:	f1bb 0f00 	cmp.w	fp, #0
 8004748:	bfcc      	ite	gt
 800474a:	465f      	movgt	r7, fp
 800474c:	2701      	movle	r7, #1
 800474e:	f04f 0800 	mov.w	r8, #0
 8004752:	9a08      	ldr	r2, [sp, #32]
 8004754:	4417      	add	r7, r2
 8004756:	4651      	mov	r1, sl
 8004758:	2201      	movs	r2, #1
 800475a:	4628      	mov	r0, r5
 800475c:	9302      	str	r3, [sp, #8]
 800475e:	f000 fb75 	bl	8004e4c <__lshift>
 8004762:	4621      	mov	r1, r4
 8004764:	4682      	mov	sl, r0
 8004766:	f000 fbdd 	bl	8004f24 <__mcmp>
 800476a:	2800      	cmp	r0, #0
 800476c:	dcb2      	bgt.n	80046d4 <_dtoa_r+0xac4>
 800476e:	d102      	bne.n	8004776 <_dtoa_r+0xb66>
 8004770:	9b02      	ldr	r3, [sp, #8]
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	d4ae      	bmi.n	80046d4 <_dtoa_r+0xac4>
 8004776:	463b      	mov	r3, r7
 8004778:	461f      	mov	r7, r3
 800477a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800477e:	2a30      	cmp	r2, #48	; 0x30
 8004780:	d0fa      	beq.n	8004778 <_dtoa_r+0xb68>
 8004782:	e6fb      	b.n	800457c <_dtoa_r+0x96c>
 8004784:	9a08      	ldr	r2, [sp, #32]
 8004786:	429a      	cmp	r2, r3
 8004788:	d1a5      	bne.n	80046d6 <_dtoa_r+0xac6>
 800478a:	2331      	movs	r3, #49	; 0x31
 800478c:	f109 0901 	add.w	r9, r9, #1
 8004790:	7013      	strb	r3, [r2, #0]
 8004792:	e6f3      	b.n	800457c <_dtoa_r+0x96c>
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <_dtoa_r+0xbd4>)
 8004796:	f7ff baa7 	b.w	8003ce8 <_dtoa_r+0xd8>
 800479a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800479c:	2b00      	cmp	r3, #0
 800479e:	f47f aa80 	bne.w	8003ca2 <_dtoa_r+0x92>
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <_dtoa_r+0xbd8>)
 80047a4:	f7ff baa0 	b.w	8003ce8 <_dtoa_r+0xd8>
 80047a8:	f1bb 0f00 	cmp.w	fp, #0
 80047ac:	dc03      	bgt.n	80047b6 <_dtoa_r+0xba6>
 80047ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	f73f aecc 	bgt.w	800454e <_dtoa_r+0x93e>
 80047b6:	9f08      	ldr	r7, [sp, #32]
 80047b8:	4621      	mov	r1, r4
 80047ba:	4650      	mov	r0, sl
 80047bc:	f7ff f99a 	bl	8003af4 <quorem>
 80047c0:	9a08      	ldr	r2, [sp, #32]
 80047c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80047c6:	f807 3b01 	strb.w	r3, [r7], #1
 80047ca:	1aba      	subs	r2, r7, r2
 80047cc:	4593      	cmp	fp, r2
 80047ce:	ddb9      	ble.n	8004744 <_dtoa_r+0xb34>
 80047d0:	4651      	mov	r1, sl
 80047d2:	2300      	movs	r3, #0
 80047d4:	220a      	movs	r2, #10
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 f98c 	bl	8004af4 <__multadd>
 80047dc:	4682      	mov	sl, r0
 80047de:	e7eb      	b.n	80047b8 <_dtoa_r+0xba8>
 80047e0:	08005cfb 	.word	0x08005cfb
 80047e4:	08005c54 	.word	0x08005c54
 80047e8:	08005c78 	.word	0x08005c78

080047ec <std>:
 80047ec:	2300      	movs	r3, #0
 80047ee:	b510      	push	{r4, lr}
 80047f0:	4604      	mov	r4, r0
 80047f2:	e9c0 3300 	strd	r3, r3, [r0]
 80047f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047fa:	6083      	str	r3, [r0, #8]
 80047fc:	8181      	strh	r1, [r0, #12]
 80047fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004800:	81c2      	strh	r2, [r0, #14]
 8004802:	6183      	str	r3, [r0, #24]
 8004804:	4619      	mov	r1, r3
 8004806:	2208      	movs	r2, #8
 8004808:	305c      	adds	r0, #92	; 0x5c
 800480a:	f7fe fcf3 	bl	80031f4 <memset>
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <std+0x38>)
 8004810:	6224      	str	r4, [r4, #32]
 8004812:	6263      	str	r3, [r4, #36]	; 0x24
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <std+0x3c>)
 8004816:	62a3      	str	r3, [r4, #40]	; 0x28
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <std+0x40>)
 800481a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <std+0x44>)
 800481e:	6323      	str	r3, [r4, #48]	; 0x30
 8004820:	bd10      	pop	{r4, pc}
 8004822:	bf00      	nop
 8004824:	0800556d 	.word	0x0800556d
 8004828:	0800558f 	.word	0x0800558f
 800482c:	080055c7 	.word	0x080055c7
 8004830:	080055eb 	.word	0x080055eb

08004834 <_cleanup_r>:
 8004834:	4901      	ldr	r1, [pc, #4]	; (800483c <_cleanup_r+0x8>)
 8004836:	f000 b8af 	b.w	8004998 <_fwalk_reent>
 800483a:	bf00      	nop
 800483c:	08005901 	.word	0x08005901

08004840 <__sfmoreglue>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	2568      	movs	r5, #104	; 0x68
 8004844:	1e4a      	subs	r2, r1, #1
 8004846:	4355      	muls	r5, r2
 8004848:	460e      	mov	r6, r1
 800484a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800484e:	f000 fccb 	bl	80051e8 <_malloc_r>
 8004852:	4604      	mov	r4, r0
 8004854:	b140      	cbz	r0, 8004868 <__sfmoreglue+0x28>
 8004856:	2100      	movs	r1, #0
 8004858:	e9c0 1600 	strd	r1, r6, [r0]
 800485c:	300c      	adds	r0, #12
 800485e:	60a0      	str	r0, [r4, #8]
 8004860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004864:	f7fe fcc6 	bl	80031f4 <memset>
 8004868:	4620      	mov	r0, r4
 800486a:	bd70      	pop	{r4, r5, r6, pc}

0800486c <__sfp_lock_acquire>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__sfp_lock_acquire+0x8>)
 800486e:	f000 b8b8 	b.w	80049e2 <__retarget_lock_acquire_recursive>
 8004872:	bf00      	nop
 8004874:	200002d4 	.word	0x200002d4

08004878 <__sfp_lock_release>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__sfp_lock_release+0x8>)
 800487a:	f000 b8b3 	b.w	80049e4 <__retarget_lock_release_recursive>
 800487e:	bf00      	nop
 8004880:	200002d4 	.word	0x200002d4

08004884 <__sinit_lock_acquire>:
 8004884:	4801      	ldr	r0, [pc, #4]	; (800488c <__sinit_lock_acquire+0x8>)
 8004886:	f000 b8ac 	b.w	80049e2 <__retarget_lock_acquire_recursive>
 800488a:	bf00      	nop
 800488c:	200002cf 	.word	0x200002cf

08004890 <__sinit_lock_release>:
 8004890:	4801      	ldr	r0, [pc, #4]	; (8004898 <__sinit_lock_release+0x8>)
 8004892:	f000 b8a7 	b.w	80049e4 <__retarget_lock_release_recursive>
 8004896:	bf00      	nop
 8004898:	200002cf 	.word	0x200002cf

0800489c <__sinit>:
 800489c:	b510      	push	{r4, lr}
 800489e:	4604      	mov	r4, r0
 80048a0:	f7ff fff0 	bl	8004884 <__sinit_lock_acquire>
 80048a4:	69a3      	ldr	r3, [r4, #24]
 80048a6:	b11b      	cbz	r3, 80048b0 <__sinit+0x14>
 80048a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ac:	f7ff bff0 	b.w	8004890 <__sinit_lock_release>
 80048b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048b4:	6523      	str	r3, [r4, #80]	; 0x50
 80048b6:	4b13      	ldr	r3, [pc, #76]	; (8004904 <__sinit+0x68>)
 80048b8:	4a13      	ldr	r2, [pc, #76]	; (8004908 <__sinit+0x6c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80048be:	42a3      	cmp	r3, r4
 80048c0:	bf08      	it	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	4620      	mov	r0, r4
 80048c6:	bf08      	it	eq
 80048c8:	61a3      	streq	r3, [r4, #24]
 80048ca:	f000 f81f 	bl	800490c <__sfp>
 80048ce:	6060      	str	r0, [r4, #4]
 80048d0:	4620      	mov	r0, r4
 80048d2:	f000 f81b 	bl	800490c <__sfp>
 80048d6:	60a0      	str	r0, [r4, #8]
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 f817 	bl	800490c <__sfp>
 80048de:	2200      	movs	r2, #0
 80048e0:	2104      	movs	r1, #4
 80048e2:	60e0      	str	r0, [r4, #12]
 80048e4:	6860      	ldr	r0, [r4, #4]
 80048e6:	f7ff ff81 	bl	80047ec <std>
 80048ea:	2201      	movs	r2, #1
 80048ec:	2109      	movs	r1, #9
 80048ee:	68a0      	ldr	r0, [r4, #8]
 80048f0:	f7ff ff7c 	bl	80047ec <std>
 80048f4:	2202      	movs	r2, #2
 80048f6:	2112      	movs	r1, #18
 80048f8:	68e0      	ldr	r0, [r4, #12]
 80048fa:	f7ff ff77 	bl	80047ec <std>
 80048fe:	2301      	movs	r3, #1
 8004900:	61a3      	str	r3, [r4, #24]
 8004902:	e7d1      	b.n	80048a8 <__sinit+0xc>
 8004904:	08005c40 	.word	0x08005c40
 8004908:	08004835 	.word	0x08004835

0800490c <__sfp>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	4607      	mov	r7, r0
 8004910:	f7ff ffac 	bl	800486c <__sfp_lock_acquire>
 8004914:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <__sfp+0x84>)
 8004916:	681e      	ldr	r6, [r3, #0]
 8004918:	69b3      	ldr	r3, [r6, #24]
 800491a:	b913      	cbnz	r3, 8004922 <__sfp+0x16>
 800491c:	4630      	mov	r0, r6
 800491e:	f7ff ffbd 	bl	800489c <__sinit>
 8004922:	3648      	adds	r6, #72	; 0x48
 8004924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004928:	3b01      	subs	r3, #1
 800492a:	d503      	bpl.n	8004934 <__sfp+0x28>
 800492c:	6833      	ldr	r3, [r6, #0]
 800492e:	b30b      	cbz	r3, 8004974 <__sfp+0x68>
 8004930:	6836      	ldr	r6, [r6, #0]
 8004932:	e7f7      	b.n	8004924 <__sfp+0x18>
 8004934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004938:	b9d5      	cbnz	r5, 8004970 <__sfp+0x64>
 800493a:	4b16      	ldr	r3, [pc, #88]	; (8004994 <__sfp+0x88>)
 800493c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004940:	60e3      	str	r3, [r4, #12]
 8004942:	6665      	str	r5, [r4, #100]	; 0x64
 8004944:	f000 f84c 	bl	80049e0 <__retarget_lock_init_recursive>
 8004948:	f7ff ff96 	bl	8004878 <__sfp_lock_release>
 800494c:	2208      	movs	r2, #8
 800494e:	4629      	mov	r1, r5
 8004950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004958:	6025      	str	r5, [r4, #0]
 800495a:	61a5      	str	r5, [r4, #24]
 800495c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004960:	f7fe fc48 	bl	80031f4 <memset>
 8004964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800496c:	4620      	mov	r0, r4
 800496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004970:	3468      	adds	r4, #104	; 0x68
 8004972:	e7d9      	b.n	8004928 <__sfp+0x1c>
 8004974:	2104      	movs	r1, #4
 8004976:	4638      	mov	r0, r7
 8004978:	f7ff ff62 	bl	8004840 <__sfmoreglue>
 800497c:	4604      	mov	r4, r0
 800497e:	6030      	str	r0, [r6, #0]
 8004980:	2800      	cmp	r0, #0
 8004982:	d1d5      	bne.n	8004930 <__sfp+0x24>
 8004984:	f7ff ff78 	bl	8004878 <__sfp_lock_release>
 8004988:	230c      	movs	r3, #12
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	e7ee      	b.n	800496c <__sfp+0x60>
 800498e:	bf00      	nop
 8004990:	08005c40 	.word	0x08005c40
 8004994:	ffff0001 	.word	0xffff0001

08004998 <_fwalk_reent>:
 8004998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800499c:	4606      	mov	r6, r0
 800499e:	4688      	mov	r8, r1
 80049a0:	2700      	movs	r7, #0
 80049a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049aa:	f1b9 0901 	subs.w	r9, r9, #1
 80049ae:	d505      	bpl.n	80049bc <_fwalk_reent+0x24>
 80049b0:	6824      	ldr	r4, [r4, #0]
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	d1f7      	bne.n	80049a6 <_fwalk_reent+0xe>
 80049b6:	4638      	mov	r0, r7
 80049b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049bc:	89ab      	ldrh	r3, [r5, #12]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d907      	bls.n	80049d2 <_fwalk_reent+0x3a>
 80049c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049c6:	3301      	adds	r3, #1
 80049c8:	d003      	beq.n	80049d2 <_fwalk_reent+0x3a>
 80049ca:	4629      	mov	r1, r5
 80049cc:	4630      	mov	r0, r6
 80049ce:	47c0      	blx	r8
 80049d0:	4307      	orrs	r7, r0
 80049d2:	3568      	adds	r5, #104	; 0x68
 80049d4:	e7e9      	b.n	80049aa <_fwalk_reent+0x12>
	...

080049d8 <_localeconv_r>:
 80049d8:	4800      	ldr	r0, [pc, #0]	; (80049dc <_localeconv_r+0x4>)
 80049da:	4770      	bx	lr
 80049dc:	20000160 	.word	0x20000160

080049e0 <__retarget_lock_init_recursive>:
 80049e0:	4770      	bx	lr

080049e2 <__retarget_lock_acquire_recursive>:
 80049e2:	4770      	bx	lr

080049e4 <__retarget_lock_release_recursive>:
 80049e4:	4770      	bx	lr
	...

080049e8 <malloc>:
 80049e8:	4b02      	ldr	r3, [pc, #8]	; (80049f4 <malloc+0xc>)
 80049ea:	4601      	mov	r1, r0
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f000 bbfb 	b.w	80051e8 <_malloc_r>
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c

080049f8 <memchr>:
 80049f8:	4603      	mov	r3, r0
 80049fa:	b510      	push	{r4, lr}
 80049fc:	b2c9      	uxtb	r1, r1
 80049fe:	4402      	add	r2, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	d101      	bne.n	8004a0a <memchr+0x12>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e003      	b.n	8004a12 <memchr+0x1a>
 8004a0a:	7804      	ldrb	r4, [r0, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	428c      	cmp	r4, r1
 8004a10:	d1f6      	bne.n	8004a00 <memchr+0x8>
 8004a12:	bd10      	pop	{r4, pc}

08004a14 <memcpy>:
 8004a14:	440a      	add	r2, r1
 8004a16:	4291      	cmp	r1, r2
 8004a18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a1c:	d100      	bne.n	8004a20 <memcpy+0xc>
 8004a1e:	4770      	bx	lr
 8004a20:	b510      	push	{r4, lr}
 8004a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a26:	4291      	cmp	r1, r2
 8004a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a2c:	d1f9      	bne.n	8004a22 <memcpy+0xe>
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <_Balloc>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a34:	4604      	mov	r4, r0
 8004a36:	460d      	mov	r5, r1
 8004a38:	b976      	cbnz	r6, 8004a58 <_Balloc+0x28>
 8004a3a:	2010      	movs	r0, #16
 8004a3c:	f7ff ffd4 	bl	80049e8 <malloc>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6260      	str	r0, [r4, #36]	; 0x24
 8004a44:	b920      	cbnz	r0, 8004a50 <_Balloc+0x20>
 8004a46:	2166      	movs	r1, #102	; 0x66
 8004a48:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <_Balloc+0x78>)
 8004a4a:	4818      	ldr	r0, [pc, #96]	; (8004aac <_Balloc+0x7c>)
 8004a4c:	f000 fea4 	bl	8005798 <__assert_func>
 8004a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a54:	6006      	str	r6, [r0, #0]
 8004a56:	60c6      	str	r6, [r0, #12]
 8004a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a5a:	68f3      	ldr	r3, [r6, #12]
 8004a5c:	b183      	cbz	r3, 8004a80 <_Balloc+0x50>
 8004a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a66:	b9b8      	cbnz	r0, 8004a98 <_Balloc+0x68>
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8004a6e:	1d72      	adds	r2, r6, #5
 8004a70:	4620      	mov	r0, r4
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	f000 fb5e 	bl	8005134 <_calloc_r>
 8004a78:	b160      	cbz	r0, 8004a94 <_Balloc+0x64>
 8004a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a7e:	e00e      	b.n	8004a9e <_Balloc+0x6e>
 8004a80:	2221      	movs	r2, #33	; 0x21
 8004a82:	2104      	movs	r1, #4
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 fb55 	bl	8005134 <_calloc_r>
 8004a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a8c:	60f0      	str	r0, [r6, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e4      	bne.n	8004a5e <_Balloc+0x2e>
 8004a94:	2000      	movs	r0, #0
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	6802      	ldr	r2, [r0, #0]
 8004a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004aa4:	e7f7      	b.n	8004a96 <_Balloc+0x66>
 8004aa6:	bf00      	nop
 8004aa8:	08005c85 	.word	0x08005c85
 8004aac:	08005d6c 	.word	0x08005d6c

08004ab0 <_Bfree>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	b976      	cbnz	r6, 8004ad8 <_Bfree+0x28>
 8004aba:	2010      	movs	r0, #16
 8004abc:	f7ff ff94 	bl	80049e8 <malloc>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6268      	str	r0, [r5, #36]	; 0x24
 8004ac4:	b920      	cbnz	r0, 8004ad0 <_Bfree+0x20>
 8004ac6:	218a      	movs	r1, #138	; 0x8a
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <_Bfree+0x3c>)
 8004aca:	4809      	ldr	r0, [pc, #36]	; (8004af0 <_Bfree+0x40>)
 8004acc:	f000 fe64 	bl	8005798 <__assert_func>
 8004ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ad4:	6006      	str	r6, [r0, #0]
 8004ad6:	60c6      	str	r6, [r0, #12]
 8004ad8:	b13c      	cbz	r4, 8004aea <_Bfree+0x3a>
 8004ada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004adc:	6862      	ldr	r2, [r4, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae4:	6021      	str	r1, [r4, #0]
 8004ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	08005c85 	.word	0x08005c85
 8004af0:	08005d6c 	.word	0x08005d6c

08004af4 <__multadd>:
 8004af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af8:	4698      	mov	r8, r3
 8004afa:	460c      	mov	r4, r1
 8004afc:	2300      	movs	r3, #0
 8004afe:	690e      	ldr	r6, [r1, #16]
 8004b00:	4607      	mov	r7, r0
 8004b02:	f101 0014 	add.w	r0, r1, #20
 8004b06:	6805      	ldr	r5, [r0, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	b2a9      	uxth	r1, r5
 8004b0c:	fb02 8101 	mla	r1, r2, r1, r8
 8004b10:	0c2d      	lsrs	r5, r5, #16
 8004b12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004b16:	fb02 c505 	mla	r5, r2, r5, ip
 8004b1a:	b289      	uxth	r1, r1
 8004b1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004b20:	429e      	cmp	r6, r3
 8004b22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004b26:	f840 1b04 	str.w	r1, [r0], #4
 8004b2a:	dcec      	bgt.n	8004b06 <__multadd+0x12>
 8004b2c:	f1b8 0f00 	cmp.w	r8, #0
 8004b30:	d022      	beq.n	8004b78 <__multadd+0x84>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	42b3      	cmp	r3, r6
 8004b36:	dc19      	bgt.n	8004b6c <__multadd+0x78>
 8004b38:	6861      	ldr	r1, [r4, #4]
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	f7ff ff77 	bl	8004a30 <_Balloc>
 8004b42:	4605      	mov	r5, r0
 8004b44:	b928      	cbnz	r0, 8004b52 <__multadd+0x5e>
 8004b46:	4602      	mov	r2, r0
 8004b48:	21b5      	movs	r1, #181	; 0xb5
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <__multadd+0x8c>)
 8004b4c:	480d      	ldr	r0, [pc, #52]	; (8004b84 <__multadd+0x90>)
 8004b4e:	f000 fe23 	bl	8005798 <__assert_func>
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	f104 010c 	add.w	r1, r4, #12
 8004b58:	3202      	adds	r2, #2
 8004b5a:	0092      	lsls	r2, r2, #2
 8004b5c:	300c      	adds	r0, #12
 8004b5e:	f7ff ff59 	bl	8004a14 <memcpy>
 8004b62:	4621      	mov	r1, r4
 8004b64:	4638      	mov	r0, r7
 8004b66:	f7ff ffa3 	bl	8004ab0 <_Bfree>
 8004b6a:	462c      	mov	r4, r5
 8004b6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004b70:	3601      	adds	r6, #1
 8004b72:	f8c3 8014 	str.w	r8, [r3, #20]
 8004b76:	6126      	str	r6, [r4, #16]
 8004b78:	4620      	mov	r0, r4
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7e:	bf00      	nop
 8004b80:	08005cfb 	.word	0x08005cfb
 8004b84:	08005d6c 	.word	0x08005d6c

08004b88 <__hi0bits>:
 8004b88:	0c02      	lsrs	r2, r0, #16
 8004b8a:	0412      	lsls	r2, r2, #16
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	b9ca      	cbnz	r2, 8004bc4 <__hi0bits+0x3c>
 8004b90:	0403      	lsls	r3, r0, #16
 8004b92:	2010      	movs	r0, #16
 8004b94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b98:	bf04      	itt	eq
 8004b9a:	021b      	lsleq	r3, r3, #8
 8004b9c:	3008      	addeq	r0, #8
 8004b9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ba2:	bf04      	itt	eq
 8004ba4:	011b      	lsleq	r3, r3, #4
 8004ba6:	3004      	addeq	r0, #4
 8004ba8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004bac:	bf04      	itt	eq
 8004bae:	009b      	lsleq	r3, r3, #2
 8004bb0:	3002      	addeq	r0, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db05      	blt.n	8004bc2 <__hi0bits+0x3a>
 8004bb6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004bba:	f100 0001 	add.w	r0, r0, #1
 8004bbe:	bf08      	it	eq
 8004bc0:	2020      	moveq	r0, #32
 8004bc2:	4770      	bx	lr
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e7e5      	b.n	8004b94 <__hi0bits+0xc>

08004bc8 <__lo0bits>:
 8004bc8:	6803      	ldr	r3, [r0, #0]
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f013 0007 	ands.w	r0, r3, #7
 8004bd0:	d00b      	beq.n	8004bea <__lo0bits+0x22>
 8004bd2:	07d9      	lsls	r1, r3, #31
 8004bd4:	d422      	bmi.n	8004c1c <__lo0bits+0x54>
 8004bd6:	0798      	lsls	r0, r3, #30
 8004bd8:	bf49      	itett	mi
 8004bda:	085b      	lsrmi	r3, r3, #1
 8004bdc:	089b      	lsrpl	r3, r3, #2
 8004bde:	2001      	movmi	r0, #1
 8004be0:	6013      	strmi	r3, [r2, #0]
 8004be2:	bf5c      	itt	pl
 8004be4:	2002      	movpl	r0, #2
 8004be6:	6013      	strpl	r3, [r2, #0]
 8004be8:	4770      	bx	lr
 8004bea:	b299      	uxth	r1, r3
 8004bec:	b909      	cbnz	r1, 8004bf2 <__lo0bits+0x2a>
 8004bee:	2010      	movs	r0, #16
 8004bf0:	0c1b      	lsrs	r3, r3, #16
 8004bf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004bf6:	bf04      	itt	eq
 8004bf8:	0a1b      	lsreq	r3, r3, #8
 8004bfa:	3008      	addeq	r0, #8
 8004bfc:	0719      	lsls	r1, r3, #28
 8004bfe:	bf04      	itt	eq
 8004c00:	091b      	lsreq	r3, r3, #4
 8004c02:	3004      	addeq	r0, #4
 8004c04:	0799      	lsls	r1, r3, #30
 8004c06:	bf04      	itt	eq
 8004c08:	089b      	lsreq	r3, r3, #2
 8004c0a:	3002      	addeq	r0, #2
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	d403      	bmi.n	8004c18 <__lo0bits+0x50>
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	f100 0001 	add.w	r0, r0, #1
 8004c16:	d003      	beq.n	8004c20 <__lo0bits+0x58>
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4770      	bx	lr
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	4770      	bx	lr
 8004c20:	2020      	movs	r0, #32
 8004c22:	4770      	bx	lr

08004c24 <__i2b>:
 8004c24:	b510      	push	{r4, lr}
 8004c26:	460c      	mov	r4, r1
 8004c28:	2101      	movs	r1, #1
 8004c2a:	f7ff ff01 	bl	8004a30 <_Balloc>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	b928      	cbnz	r0, 8004c3e <__i2b+0x1a>
 8004c32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c36:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <__i2b+0x24>)
 8004c38:	4804      	ldr	r0, [pc, #16]	; (8004c4c <__i2b+0x28>)
 8004c3a:	f000 fdad 	bl	8005798 <__assert_func>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	6144      	str	r4, [r0, #20]
 8004c42:	6103      	str	r3, [r0, #16]
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	08005cfb 	.word	0x08005cfb
 8004c4c:	08005d6c 	.word	0x08005d6c

08004c50 <__multiply>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	4614      	mov	r4, r2
 8004c56:	690a      	ldr	r2, [r1, #16]
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	460d      	mov	r5, r1
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	bfbe      	ittt	lt
 8004c60:	460b      	movlt	r3, r1
 8004c62:	4625      	movlt	r5, r4
 8004c64:	461c      	movlt	r4, r3
 8004c66:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004c6a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004c6e:	68ab      	ldr	r3, [r5, #8]
 8004c70:	6869      	ldr	r1, [r5, #4]
 8004c72:	eb0a 0709 	add.w	r7, sl, r9
 8004c76:	42bb      	cmp	r3, r7
 8004c78:	b085      	sub	sp, #20
 8004c7a:	bfb8      	it	lt
 8004c7c:	3101      	addlt	r1, #1
 8004c7e:	f7ff fed7 	bl	8004a30 <_Balloc>
 8004c82:	b930      	cbnz	r0, 8004c92 <__multiply+0x42>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f240 115d 	movw	r1, #349	; 0x15d
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <__multiply+0x140>)
 8004c8c:	4841      	ldr	r0, [pc, #260]	; (8004d94 <__multiply+0x144>)
 8004c8e:	f000 fd83 	bl	8005798 <__assert_func>
 8004c92:	f100 0614 	add.w	r6, r0, #20
 8004c96:	4633      	mov	r3, r6
 8004c98:	2200      	movs	r2, #0
 8004c9a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004c9e:	4543      	cmp	r3, r8
 8004ca0:	d31e      	bcc.n	8004ce0 <__multiply+0x90>
 8004ca2:	f105 0c14 	add.w	ip, r5, #20
 8004ca6:	f104 0314 	add.w	r3, r4, #20
 8004caa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004cae:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004cb2:	9202      	str	r2, [sp, #8]
 8004cb4:	ebac 0205 	sub.w	r2, ip, r5
 8004cb8:	3a15      	subs	r2, #21
 8004cba:	f022 0203 	bic.w	r2, r2, #3
 8004cbe:	3204      	adds	r2, #4
 8004cc0:	f105 0115 	add.w	r1, r5, #21
 8004cc4:	458c      	cmp	ip, r1
 8004cc6:	bf38      	it	cc
 8004cc8:	2204      	movcc	r2, #4
 8004cca:	9201      	str	r2, [sp, #4]
 8004ccc:	9a02      	ldr	r2, [sp, #8]
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d808      	bhi.n	8004ce6 <__multiply+0x96>
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	dc55      	bgt.n	8004d84 <__multiply+0x134>
 8004cd8:	6107      	str	r7, [r0, #16]
 8004cda:	b005      	add	sp, #20
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	f843 2b04 	str.w	r2, [r3], #4
 8004ce4:	e7db      	b.n	8004c9e <__multiply+0x4e>
 8004ce6:	f8b3 a000 	ldrh.w	sl, [r3]
 8004cea:	f1ba 0f00 	cmp.w	sl, #0
 8004cee:	d020      	beq.n	8004d32 <__multiply+0xe2>
 8004cf0:	46b1      	mov	r9, r6
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f105 0e14 	add.w	lr, r5, #20
 8004cf8:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004cfc:	f8d9 b000 	ldr.w	fp, [r9]
 8004d00:	b2a1      	uxth	r1, r4
 8004d02:	fa1f fb8b 	uxth.w	fp, fp
 8004d06:	fb0a b101 	mla	r1, sl, r1, fp
 8004d0a:	4411      	add	r1, r2
 8004d0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d10:	0c24      	lsrs	r4, r4, #16
 8004d12:	0c12      	lsrs	r2, r2, #16
 8004d14:	fb0a 2404 	mla	r4, sl, r4, r2
 8004d18:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004d1c:	b289      	uxth	r1, r1
 8004d1e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004d22:	45f4      	cmp	ip, lr
 8004d24:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004d28:	f849 1b04 	str.w	r1, [r9], #4
 8004d2c:	d8e4      	bhi.n	8004cf8 <__multiply+0xa8>
 8004d2e:	9901      	ldr	r1, [sp, #4]
 8004d30:	5072      	str	r2, [r6, r1]
 8004d32:	9a03      	ldr	r2, [sp, #12]
 8004d34:	3304      	adds	r3, #4
 8004d36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	d01f      	beq.n	8004d80 <__multiply+0x130>
 8004d40:	46b6      	mov	lr, r6
 8004d42:	f04f 0a00 	mov.w	sl, #0
 8004d46:	6834      	ldr	r4, [r6, #0]
 8004d48:	f105 0114 	add.w	r1, r5, #20
 8004d4c:	880a      	ldrh	r2, [r1, #0]
 8004d4e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004d52:	b2a4      	uxth	r4, r4
 8004d54:	fb09 b202 	mla	r2, r9, r2, fp
 8004d58:	4492      	add	sl, r2
 8004d5a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004d5e:	f84e 4b04 	str.w	r4, [lr], #4
 8004d62:	f851 4b04 	ldr.w	r4, [r1], #4
 8004d66:	f8be 2000 	ldrh.w	r2, [lr]
 8004d6a:	0c24      	lsrs	r4, r4, #16
 8004d6c:	fb09 2404 	mla	r4, r9, r4, r2
 8004d70:	458c      	cmp	ip, r1
 8004d72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004d76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004d7a:	d8e7      	bhi.n	8004d4c <__multiply+0xfc>
 8004d7c:	9a01      	ldr	r2, [sp, #4]
 8004d7e:	50b4      	str	r4, [r6, r2]
 8004d80:	3604      	adds	r6, #4
 8004d82:	e7a3      	b.n	8004ccc <__multiply+0x7c>
 8004d84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1a5      	bne.n	8004cd8 <__multiply+0x88>
 8004d8c:	3f01      	subs	r7, #1
 8004d8e:	e7a1      	b.n	8004cd4 <__multiply+0x84>
 8004d90:	08005cfb 	.word	0x08005cfb
 8004d94:	08005d6c 	.word	0x08005d6c

08004d98 <__pow5mult>:
 8004d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	f012 0203 	ands.w	r2, r2, #3
 8004da2:	4606      	mov	r6, r0
 8004da4:	460f      	mov	r7, r1
 8004da6:	d007      	beq.n	8004db8 <__pow5mult+0x20>
 8004da8:	4c25      	ldr	r4, [pc, #148]	; (8004e40 <__pow5mult+0xa8>)
 8004daa:	3a01      	subs	r2, #1
 8004dac:	2300      	movs	r3, #0
 8004dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004db2:	f7ff fe9f 	bl	8004af4 <__multadd>
 8004db6:	4607      	mov	r7, r0
 8004db8:	10ad      	asrs	r5, r5, #2
 8004dba:	d03d      	beq.n	8004e38 <__pow5mult+0xa0>
 8004dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004dbe:	b97c      	cbnz	r4, 8004de0 <__pow5mult+0x48>
 8004dc0:	2010      	movs	r0, #16
 8004dc2:	f7ff fe11 	bl	80049e8 <malloc>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8004dca:	b928      	cbnz	r0, 8004dd8 <__pow5mult+0x40>
 8004dcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <__pow5mult+0xac>)
 8004dd2:	481d      	ldr	r0, [pc, #116]	; (8004e48 <__pow5mult+0xb0>)
 8004dd4:	f000 fce0 	bl	8005798 <__assert_func>
 8004dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ddc:	6004      	str	r4, [r0, #0]
 8004dde:	60c4      	str	r4, [r0, #12]
 8004de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004de8:	b94c      	cbnz	r4, 8004dfe <__pow5mult+0x66>
 8004dea:	f240 2171 	movw	r1, #625	; 0x271
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7ff ff18 	bl	8004c24 <__i2b>
 8004df4:	2300      	movs	r3, #0
 8004df6:	4604      	mov	r4, r0
 8004df8:	f8c8 0008 	str.w	r0, [r8, #8]
 8004dfc:	6003      	str	r3, [r0, #0]
 8004dfe:	f04f 0900 	mov.w	r9, #0
 8004e02:	07eb      	lsls	r3, r5, #31
 8004e04:	d50a      	bpl.n	8004e1c <__pow5mult+0x84>
 8004e06:	4639      	mov	r1, r7
 8004e08:	4622      	mov	r2, r4
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f7ff ff20 	bl	8004c50 <__multiply>
 8004e10:	4680      	mov	r8, r0
 8004e12:	4639      	mov	r1, r7
 8004e14:	4630      	mov	r0, r6
 8004e16:	f7ff fe4b 	bl	8004ab0 <_Bfree>
 8004e1a:	4647      	mov	r7, r8
 8004e1c:	106d      	asrs	r5, r5, #1
 8004e1e:	d00b      	beq.n	8004e38 <__pow5mult+0xa0>
 8004e20:	6820      	ldr	r0, [r4, #0]
 8004e22:	b938      	cbnz	r0, 8004e34 <__pow5mult+0x9c>
 8004e24:	4622      	mov	r2, r4
 8004e26:	4621      	mov	r1, r4
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f7ff ff11 	bl	8004c50 <__multiply>
 8004e2e:	6020      	str	r0, [r4, #0]
 8004e30:	f8c0 9000 	str.w	r9, [r0]
 8004e34:	4604      	mov	r4, r0
 8004e36:	e7e4      	b.n	8004e02 <__pow5mult+0x6a>
 8004e38:	4638      	mov	r0, r7
 8004e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e3e:	bf00      	nop
 8004e40:	08005ec0 	.word	0x08005ec0
 8004e44:	08005c85 	.word	0x08005c85
 8004e48:	08005d6c 	.word	0x08005d6c

08004e4c <__lshift>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	460c      	mov	r4, r1
 8004e52:	4607      	mov	r7, r0
 8004e54:	4691      	mov	r9, r2
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	6849      	ldr	r1, [r1, #4]
 8004e5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e64:	f108 0601 	add.w	r6, r8, #1
 8004e68:	42b3      	cmp	r3, r6
 8004e6a:	db0b      	blt.n	8004e84 <__lshift+0x38>
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff fddf 	bl	8004a30 <_Balloc>
 8004e72:	4605      	mov	r5, r0
 8004e74:	b948      	cbnz	r0, 8004e8a <__lshift+0x3e>
 8004e76:	4602      	mov	r2, r0
 8004e78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <__lshift+0xd0>)
 8004e7e:	4828      	ldr	r0, [pc, #160]	; (8004f20 <__lshift+0xd4>)
 8004e80:	f000 fc8a 	bl	8005798 <__assert_func>
 8004e84:	3101      	adds	r1, #1
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	e7ee      	b.n	8004e68 <__lshift+0x1c>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f100 0114 	add.w	r1, r0, #20
 8004e90:	f100 0210 	add.w	r2, r0, #16
 8004e94:	4618      	mov	r0, r3
 8004e96:	4553      	cmp	r3, sl
 8004e98:	db33      	blt.n	8004f02 <__lshift+0xb6>
 8004e9a:	6920      	ldr	r0, [r4, #16]
 8004e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ea0:	f104 0314 	add.w	r3, r4, #20
 8004ea4:	f019 091f 	ands.w	r9, r9, #31
 8004ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004eac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004eb0:	d02b      	beq.n	8004f0a <__lshift+0xbe>
 8004eb2:	468a      	mov	sl, r1
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f1c9 0e20 	rsb	lr, r9, #32
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	fa00 f009 	lsl.w	r0, r0, r9
 8004ec0:	4302      	orrs	r2, r0
 8004ec2:	f84a 2b04 	str.w	r2, [sl], #4
 8004ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eca:	459c      	cmp	ip, r3
 8004ecc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ed0:	d8f3      	bhi.n	8004eba <__lshift+0x6e>
 8004ed2:	ebac 0304 	sub.w	r3, ip, r4
 8004ed6:	3b15      	subs	r3, #21
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	3304      	adds	r3, #4
 8004ede:	f104 0015 	add.w	r0, r4, #21
 8004ee2:	4584      	cmp	ip, r0
 8004ee4:	bf38      	it	cc
 8004ee6:	2304      	movcc	r3, #4
 8004ee8:	50ca      	str	r2, [r1, r3]
 8004eea:	b10a      	cbz	r2, 8004ef0 <__lshift+0xa4>
 8004eec:	f108 0602 	add.w	r6, r8, #2
 8004ef0:	3e01      	subs	r6, #1
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	612e      	str	r6, [r5, #16]
 8004ef8:	f7ff fdda 	bl	8004ab0 <_Bfree>
 8004efc:	4628      	mov	r0, r5
 8004efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f02:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f06:	3301      	adds	r3, #1
 8004f08:	e7c5      	b.n	8004e96 <__lshift+0x4a>
 8004f0a:	3904      	subs	r1, #4
 8004f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f10:	459c      	cmp	ip, r3
 8004f12:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f16:	d8f9      	bhi.n	8004f0c <__lshift+0xc0>
 8004f18:	e7ea      	b.n	8004ef0 <__lshift+0xa4>
 8004f1a:	bf00      	nop
 8004f1c:	08005cfb 	.word	0x08005cfb
 8004f20:	08005d6c 	.word	0x08005d6c

08004f24 <__mcmp>:
 8004f24:	4603      	mov	r3, r0
 8004f26:	690a      	ldr	r2, [r1, #16]
 8004f28:	6900      	ldr	r0, [r0, #16]
 8004f2a:	b530      	push	{r4, r5, lr}
 8004f2c:	1a80      	subs	r0, r0, r2
 8004f2e:	d10d      	bne.n	8004f4c <__mcmp+0x28>
 8004f30:	3314      	adds	r3, #20
 8004f32:	3114      	adds	r1, #20
 8004f34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f44:	4295      	cmp	r5, r2
 8004f46:	d002      	beq.n	8004f4e <__mcmp+0x2a>
 8004f48:	d304      	bcc.n	8004f54 <__mcmp+0x30>
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	bd30      	pop	{r4, r5, pc}
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	d3f4      	bcc.n	8004f3c <__mcmp+0x18>
 8004f52:	e7fb      	b.n	8004f4c <__mcmp+0x28>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f58:	e7f8      	b.n	8004f4c <__mcmp+0x28>
	...

08004f5c <__mdiff>:
 8004f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	460c      	mov	r4, r1
 8004f62:	4606      	mov	r6, r0
 8004f64:	4611      	mov	r1, r2
 8004f66:	4620      	mov	r0, r4
 8004f68:	4692      	mov	sl, r2
 8004f6a:	f7ff ffdb 	bl	8004f24 <__mcmp>
 8004f6e:	1e05      	subs	r5, r0, #0
 8004f70:	d111      	bne.n	8004f96 <__mdiff+0x3a>
 8004f72:	4629      	mov	r1, r5
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff fd5b 	bl	8004a30 <_Balloc>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	b928      	cbnz	r0, 8004f8a <__mdiff+0x2e>
 8004f7e:	f240 2132 	movw	r1, #562	; 0x232
 8004f82:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <__mdiff+0x118>)
 8004f84:	483c      	ldr	r0, [pc, #240]	; (8005078 <__mdiff+0x11c>)
 8004f86:	f000 fc07 	bl	8005798 <__assert_func>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004f90:	4610      	mov	r0, r2
 8004f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f96:	bfa4      	itt	ge
 8004f98:	4653      	movge	r3, sl
 8004f9a:	46a2      	movge	sl, r4
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004fa2:	bfa6      	itte	ge
 8004fa4:	461c      	movge	r4, r3
 8004fa6:	2500      	movge	r5, #0
 8004fa8:	2501      	movlt	r5, #1
 8004faa:	f7ff fd41 	bl	8004a30 <_Balloc>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	b918      	cbnz	r0, 8004fba <__mdiff+0x5e>
 8004fb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <__mdiff+0x118>)
 8004fb8:	e7e4      	b.n	8004f84 <__mdiff+0x28>
 8004fba:	f100 0814 	add.w	r8, r0, #20
 8004fbe:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004fc2:	60c5      	str	r5, [r0, #12]
 8004fc4:	f04f 0c00 	mov.w	ip, #0
 8004fc8:	f10a 0514 	add.w	r5, sl, #20
 8004fcc:	f10a 0010 	add.w	r0, sl, #16
 8004fd0:	46c2      	mov	sl, r8
 8004fd2:	6926      	ldr	r6, [r4, #16]
 8004fd4:	f104 0914 	add.w	r9, r4, #20
 8004fd8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004fdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004fe0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004fe8:	fa1f f18b 	uxth.w	r1, fp
 8004fec:	4461      	add	r1, ip
 8004fee:	fa1f fc83 	uxth.w	ip, r3
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	eba1 010c 	sub.w	r1, r1, ip
 8004ff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ffc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005000:	b289      	uxth	r1, r1
 8005002:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005006:	454e      	cmp	r6, r9
 8005008:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800500c:	f84a 3b04 	str.w	r3, [sl], #4
 8005010:	d8e6      	bhi.n	8004fe0 <__mdiff+0x84>
 8005012:	1b33      	subs	r3, r6, r4
 8005014:	3b15      	subs	r3, #21
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	3415      	adds	r4, #21
 800501c:	3304      	adds	r3, #4
 800501e:	42a6      	cmp	r6, r4
 8005020:	bf38      	it	cc
 8005022:	2304      	movcc	r3, #4
 8005024:	441d      	add	r5, r3
 8005026:	4443      	add	r3, r8
 8005028:	461e      	mov	r6, r3
 800502a:	462c      	mov	r4, r5
 800502c:	4574      	cmp	r4, lr
 800502e:	d30e      	bcc.n	800504e <__mdiff+0xf2>
 8005030:	f10e 0103 	add.w	r1, lr, #3
 8005034:	1b49      	subs	r1, r1, r5
 8005036:	f021 0103 	bic.w	r1, r1, #3
 800503a:	3d03      	subs	r5, #3
 800503c:	45ae      	cmp	lr, r5
 800503e:	bf38      	it	cc
 8005040:	2100      	movcc	r1, #0
 8005042:	4419      	add	r1, r3
 8005044:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005048:	b18b      	cbz	r3, 800506e <__mdiff+0x112>
 800504a:	6117      	str	r7, [r2, #16]
 800504c:	e7a0      	b.n	8004f90 <__mdiff+0x34>
 800504e:	f854 8b04 	ldr.w	r8, [r4], #4
 8005052:	fa1f f188 	uxth.w	r1, r8
 8005056:	4461      	add	r1, ip
 8005058:	1408      	asrs	r0, r1, #16
 800505a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800505e:	b289      	uxth	r1, r1
 8005060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005064:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005068:	f846 1b04 	str.w	r1, [r6], #4
 800506c:	e7de      	b.n	800502c <__mdiff+0xd0>
 800506e:	3f01      	subs	r7, #1
 8005070:	e7e8      	b.n	8005044 <__mdiff+0xe8>
 8005072:	bf00      	nop
 8005074:	08005cfb 	.word	0x08005cfb
 8005078:	08005d6c 	.word	0x08005d6c

0800507c <__d2b>:
 800507c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005080:	2101      	movs	r1, #1
 8005082:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005086:	4690      	mov	r8, r2
 8005088:	461d      	mov	r5, r3
 800508a:	f7ff fcd1 	bl	8004a30 <_Balloc>
 800508e:	4604      	mov	r4, r0
 8005090:	b930      	cbnz	r0, 80050a0 <__d2b+0x24>
 8005092:	4602      	mov	r2, r0
 8005094:	f240 310a 	movw	r1, #778	; 0x30a
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <__d2b+0xb0>)
 800509a:	4825      	ldr	r0, [pc, #148]	; (8005130 <__d2b+0xb4>)
 800509c:	f000 fb7c 	bl	8005798 <__assert_func>
 80050a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80050a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80050a8:	bb2d      	cbnz	r5, 80050f6 <__d2b+0x7a>
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	f1b8 0300 	subs.w	r3, r8, #0
 80050b0:	d026      	beq.n	8005100 <__d2b+0x84>
 80050b2:	4668      	mov	r0, sp
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	f7ff fd87 	bl	8004bc8 <__lo0bits>
 80050ba:	9900      	ldr	r1, [sp, #0]
 80050bc:	b1f0      	cbz	r0, 80050fc <__d2b+0x80>
 80050be:	9a01      	ldr	r2, [sp, #4]
 80050c0:	f1c0 0320 	rsb	r3, r0, #32
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	430b      	orrs	r3, r1
 80050ca:	40c2      	lsrs	r2, r0
 80050cc:	6163      	str	r3, [r4, #20]
 80050ce:	9201      	str	r2, [sp, #4]
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf14      	ite	ne
 80050d6:	2102      	movne	r1, #2
 80050d8:	2101      	moveq	r1, #1
 80050da:	61a3      	str	r3, [r4, #24]
 80050dc:	6121      	str	r1, [r4, #16]
 80050de:	b1c5      	cbz	r5, 8005112 <__d2b+0x96>
 80050e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80050e4:	4405      	add	r5, r0
 80050e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050ea:	603d      	str	r5, [r7, #0]
 80050ec:	6030      	str	r0, [r6, #0]
 80050ee:	4620      	mov	r0, r4
 80050f0:	b002      	add	sp, #8
 80050f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050fa:	e7d6      	b.n	80050aa <__d2b+0x2e>
 80050fc:	6161      	str	r1, [r4, #20]
 80050fe:	e7e7      	b.n	80050d0 <__d2b+0x54>
 8005100:	a801      	add	r0, sp, #4
 8005102:	f7ff fd61 	bl	8004bc8 <__lo0bits>
 8005106:	2101      	movs	r1, #1
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	6121      	str	r1, [r4, #16]
 800510c:	6163      	str	r3, [r4, #20]
 800510e:	3020      	adds	r0, #32
 8005110:	e7e5      	b.n	80050de <__d2b+0x62>
 8005112:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005116:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800511a:	6038      	str	r0, [r7, #0]
 800511c:	6918      	ldr	r0, [r3, #16]
 800511e:	f7ff fd33 	bl	8004b88 <__hi0bits>
 8005122:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005126:	6031      	str	r1, [r6, #0]
 8005128:	e7e1      	b.n	80050ee <__d2b+0x72>
 800512a:	bf00      	nop
 800512c:	08005cfb 	.word	0x08005cfb
 8005130:	08005d6c 	.word	0x08005d6c

08005134 <_calloc_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	fb02 f501 	mul.w	r5, r2, r1
 800513a:	4629      	mov	r1, r5
 800513c:	f000 f854 	bl	80051e8 <_malloc_r>
 8005140:	4604      	mov	r4, r0
 8005142:	b118      	cbz	r0, 800514c <_calloc_r+0x18>
 8005144:	462a      	mov	r2, r5
 8005146:	2100      	movs	r1, #0
 8005148:	f7fe f854 	bl	80031f4 <memset>
 800514c:	4620      	mov	r0, r4
 800514e:	bd38      	pop	{r3, r4, r5, pc}

08005150 <_free_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4605      	mov	r5, r0
 8005154:	2900      	cmp	r1, #0
 8005156:	d043      	beq.n	80051e0 <_free_r+0x90>
 8005158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515c:	1f0c      	subs	r4, r1, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	bfb8      	it	lt
 8005162:	18e4      	addlt	r4, r4, r3
 8005164:	f000 fca2 	bl	8005aac <__malloc_lock>
 8005168:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <_free_r+0x94>)
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	4610      	mov	r0, r2
 800516e:	b933      	cbnz	r3, 800517e <_free_r+0x2e>
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	6014      	str	r4, [r2, #0]
 8005174:	4628      	mov	r0, r5
 8005176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800517a:	f000 bc9d 	b.w	8005ab8 <__malloc_unlock>
 800517e:	42a3      	cmp	r3, r4
 8005180:	d90a      	bls.n	8005198 <_free_r+0x48>
 8005182:	6821      	ldr	r1, [r4, #0]
 8005184:	1862      	adds	r2, r4, r1
 8005186:	4293      	cmp	r3, r2
 8005188:	bf01      	itttt	eq
 800518a:	681a      	ldreq	r2, [r3, #0]
 800518c:	685b      	ldreq	r3, [r3, #4]
 800518e:	1852      	addeq	r2, r2, r1
 8005190:	6022      	streq	r2, [r4, #0]
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	6004      	str	r4, [r0, #0]
 8005196:	e7ed      	b.n	8005174 <_free_r+0x24>
 8005198:	461a      	mov	r2, r3
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	b10b      	cbz	r3, 80051a2 <_free_r+0x52>
 800519e:	42a3      	cmp	r3, r4
 80051a0:	d9fa      	bls.n	8005198 <_free_r+0x48>
 80051a2:	6811      	ldr	r1, [r2, #0]
 80051a4:	1850      	adds	r0, r2, r1
 80051a6:	42a0      	cmp	r0, r4
 80051a8:	d10b      	bne.n	80051c2 <_free_r+0x72>
 80051aa:	6820      	ldr	r0, [r4, #0]
 80051ac:	4401      	add	r1, r0
 80051ae:	1850      	adds	r0, r2, r1
 80051b0:	4283      	cmp	r3, r0
 80051b2:	6011      	str	r1, [r2, #0]
 80051b4:	d1de      	bne.n	8005174 <_free_r+0x24>
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4401      	add	r1, r0
 80051bc:	6011      	str	r1, [r2, #0]
 80051be:	6053      	str	r3, [r2, #4]
 80051c0:	e7d8      	b.n	8005174 <_free_r+0x24>
 80051c2:	d902      	bls.n	80051ca <_free_r+0x7a>
 80051c4:	230c      	movs	r3, #12
 80051c6:	602b      	str	r3, [r5, #0]
 80051c8:	e7d4      	b.n	8005174 <_free_r+0x24>
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	1821      	adds	r1, r4, r0
 80051ce:	428b      	cmp	r3, r1
 80051d0:	bf01      	itttt	eq
 80051d2:	6819      	ldreq	r1, [r3, #0]
 80051d4:	685b      	ldreq	r3, [r3, #4]
 80051d6:	1809      	addeq	r1, r1, r0
 80051d8:	6021      	streq	r1, [r4, #0]
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	6054      	str	r4, [r2, #4]
 80051de:	e7c9      	b.n	8005174 <_free_r+0x24>
 80051e0:	bd38      	pop	{r3, r4, r5, pc}
 80051e2:	bf00      	nop
 80051e4:	20000204 	.word	0x20000204

080051e8 <_malloc_r>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520a:	f000 fc4f 	bl	8005aac <__malloc_lock>
 800520e:	4921      	ldr	r1, [pc, #132]	; (8005294 <_malloc_r+0xac>)
 8005210:	680a      	ldr	r2, [r1, #0]
 8005212:	4614      	mov	r4, r2
 8005214:	b99c      	cbnz	r4, 800523e <_malloc_r+0x56>
 8005216:	4f20      	ldr	r7, [pc, #128]	; (8005298 <_malloc_r+0xb0>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b923      	cbnz	r3, 8005226 <_malloc_r+0x3e>
 800521c:	4621      	mov	r1, r4
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f994 	bl	800554c <_sbrk_r>
 8005224:	6038      	str	r0, [r7, #0]
 8005226:	4629      	mov	r1, r5
 8005228:	4630      	mov	r0, r6
 800522a:	f000 f98f 	bl	800554c <_sbrk_r>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d123      	bne.n	800527a <_malloc_r+0x92>
 8005232:	230c      	movs	r3, #12
 8005234:	4630      	mov	r0, r6
 8005236:	6033      	str	r3, [r6, #0]
 8005238:	f000 fc3e 	bl	8005ab8 <__malloc_unlock>
 800523c:	e7e3      	b.n	8005206 <_malloc_r+0x1e>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	1b5b      	subs	r3, r3, r5
 8005242:	d417      	bmi.n	8005274 <_malloc_r+0x8c>
 8005244:	2b0b      	cmp	r3, #11
 8005246:	d903      	bls.n	8005250 <_malloc_r+0x68>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	441c      	add	r4, r3
 800524c:	6025      	str	r5, [r4, #0]
 800524e:	e004      	b.n	800525a <_malloc_r+0x72>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	42a2      	cmp	r2, r4
 8005254:	bf0c      	ite	eq
 8005256:	600b      	streq	r3, [r1, #0]
 8005258:	6053      	strne	r3, [r2, #4]
 800525a:	4630      	mov	r0, r6
 800525c:	f000 fc2c 	bl	8005ab8 <__malloc_unlock>
 8005260:	f104 000b 	add.w	r0, r4, #11
 8005264:	1d23      	adds	r3, r4, #4
 8005266:	f020 0007 	bic.w	r0, r0, #7
 800526a:	1ac2      	subs	r2, r0, r3
 800526c:	d0cc      	beq.n	8005208 <_malloc_r+0x20>
 800526e:	1a1b      	subs	r3, r3, r0
 8005270:	50a3      	str	r3, [r4, r2]
 8005272:	e7c9      	b.n	8005208 <_malloc_r+0x20>
 8005274:	4622      	mov	r2, r4
 8005276:	6864      	ldr	r4, [r4, #4]
 8005278:	e7cc      	b.n	8005214 <_malloc_r+0x2c>
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d0e3      	beq.n	800524c <_malloc_r+0x64>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4630      	mov	r0, r6
 8005288:	f000 f960 	bl	800554c <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d1dd      	bne.n	800524c <_malloc_r+0x64>
 8005290:	e7cf      	b.n	8005232 <_malloc_r+0x4a>
 8005292:	bf00      	nop
 8005294:	20000204 	.word	0x20000204
 8005298:	20000208 	.word	0x20000208

0800529c <__sfputc_r>:
 800529c:	6893      	ldr	r3, [r2, #8]
 800529e:	b410      	push	{r4}
 80052a0:	3b01      	subs	r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	da07      	bge.n	80052b8 <__sfputc_r+0x1c>
 80052a8:	6994      	ldr	r4, [r2, #24]
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	db01      	blt.n	80052b2 <__sfputc_r+0x16>
 80052ae:	290a      	cmp	r1, #10
 80052b0:	d102      	bne.n	80052b8 <__sfputc_r+0x1c>
 80052b2:	bc10      	pop	{r4}
 80052b4:	f000 b99e 	b.w	80055f4 <__swbuf_r>
 80052b8:	6813      	ldr	r3, [r2, #0]
 80052ba:	1c58      	adds	r0, r3, #1
 80052bc:	6010      	str	r0, [r2, #0]
 80052be:	7019      	strb	r1, [r3, #0]
 80052c0:	4608      	mov	r0, r1
 80052c2:	bc10      	pop	{r4}
 80052c4:	4770      	bx	lr

080052c6 <__sfputs_r>:
 80052c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	4614      	mov	r4, r2
 80052ce:	18d5      	adds	r5, r2, r3
 80052d0:	42ac      	cmp	r4, r5
 80052d2:	d101      	bne.n	80052d8 <__sfputs_r+0x12>
 80052d4:	2000      	movs	r0, #0
 80052d6:	e007      	b.n	80052e8 <__sfputs_r+0x22>
 80052d8:	463a      	mov	r2, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e0:	f7ff ffdc 	bl	800529c <__sfputc_r>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d1f3      	bne.n	80052d0 <__sfputs_r+0xa>
 80052e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052ec <_vfiprintf_r>:
 80052ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	460d      	mov	r5, r1
 80052f2:	4614      	mov	r4, r2
 80052f4:	4698      	mov	r8, r3
 80052f6:	4606      	mov	r6, r0
 80052f8:	b09d      	sub	sp, #116	; 0x74
 80052fa:	b118      	cbz	r0, 8005304 <_vfiprintf_r+0x18>
 80052fc:	6983      	ldr	r3, [r0, #24]
 80052fe:	b90b      	cbnz	r3, 8005304 <_vfiprintf_r+0x18>
 8005300:	f7ff facc 	bl	800489c <__sinit>
 8005304:	4b89      	ldr	r3, [pc, #548]	; (800552c <_vfiprintf_r+0x240>)
 8005306:	429d      	cmp	r5, r3
 8005308:	d11b      	bne.n	8005342 <_vfiprintf_r+0x56>
 800530a:	6875      	ldr	r5, [r6, #4]
 800530c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800530e:	07d9      	lsls	r1, r3, #31
 8005310:	d405      	bmi.n	800531e <_vfiprintf_r+0x32>
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	059a      	lsls	r2, r3, #22
 8005316:	d402      	bmi.n	800531e <_vfiprintf_r+0x32>
 8005318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800531a:	f7ff fb62 	bl	80049e2 <__retarget_lock_acquire_recursive>
 800531e:	89ab      	ldrh	r3, [r5, #12]
 8005320:	071b      	lsls	r3, r3, #28
 8005322:	d501      	bpl.n	8005328 <_vfiprintf_r+0x3c>
 8005324:	692b      	ldr	r3, [r5, #16]
 8005326:	b9eb      	cbnz	r3, 8005364 <_vfiprintf_r+0x78>
 8005328:	4629      	mov	r1, r5
 800532a:	4630      	mov	r0, r6
 800532c:	f000 f9c6 	bl	80056bc <__swsetup_r>
 8005330:	b1c0      	cbz	r0, 8005364 <_vfiprintf_r+0x78>
 8005332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005334:	07dc      	lsls	r4, r3, #31
 8005336:	d50e      	bpl.n	8005356 <_vfiprintf_r+0x6a>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800533c:	b01d      	add	sp, #116	; 0x74
 800533e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005342:	4b7b      	ldr	r3, [pc, #492]	; (8005530 <_vfiprintf_r+0x244>)
 8005344:	429d      	cmp	r5, r3
 8005346:	d101      	bne.n	800534c <_vfiprintf_r+0x60>
 8005348:	68b5      	ldr	r5, [r6, #8]
 800534a:	e7df      	b.n	800530c <_vfiprintf_r+0x20>
 800534c:	4b79      	ldr	r3, [pc, #484]	; (8005534 <_vfiprintf_r+0x248>)
 800534e:	429d      	cmp	r5, r3
 8005350:	bf08      	it	eq
 8005352:	68f5      	ldreq	r5, [r6, #12]
 8005354:	e7da      	b.n	800530c <_vfiprintf_r+0x20>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	0598      	lsls	r0, r3, #22
 800535a:	d4ed      	bmi.n	8005338 <_vfiprintf_r+0x4c>
 800535c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800535e:	f7ff fb41 	bl	80049e4 <__retarget_lock_release_recursive>
 8005362:	e7e9      	b.n	8005338 <_vfiprintf_r+0x4c>
 8005364:	2300      	movs	r3, #0
 8005366:	9309      	str	r3, [sp, #36]	; 0x24
 8005368:	2320      	movs	r3, #32
 800536a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800536e:	2330      	movs	r3, #48	; 0x30
 8005370:	f04f 0901 	mov.w	r9, #1
 8005374:	f8cd 800c 	str.w	r8, [sp, #12]
 8005378:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005538 <_vfiprintf_r+0x24c>
 800537c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005380:	4623      	mov	r3, r4
 8005382:	469a      	mov	sl, r3
 8005384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005388:	b10a      	cbz	r2, 800538e <_vfiprintf_r+0xa2>
 800538a:	2a25      	cmp	r2, #37	; 0x25
 800538c:	d1f9      	bne.n	8005382 <_vfiprintf_r+0x96>
 800538e:	ebba 0b04 	subs.w	fp, sl, r4
 8005392:	d00b      	beq.n	80053ac <_vfiprintf_r+0xc0>
 8005394:	465b      	mov	r3, fp
 8005396:	4622      	mov	r2, r4
 8005398:	4629      	mov	r1, r5
 800539a:	4630      	mov	r0, r6
 800539c:	f7ff ff93 	bl	80052c6 <__sfputs_r>
 80053a0:	3001      	adds	r0, #1
 80053a2:	f000 80aa 	beq.w	80054fa <_vfiprintf_r+0x20e>
 80053a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053a8:	445a      	add	r2, fp
 80053aa:	9209      	str	r2, [sp, #36]	; 0x24
 80053ac:	f89a 3000 	ldrb.w	r3, [sl]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a2 	beq.w	80054fa <_vfiprintf_r+0x20e>
 80053b6:	2300      	movs	r3, #0
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c0:	f10a 0a01 	add.w	sl, sl, #1
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	9307      	str	r3, [sp, #28]
 80053c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053cc:	931a      	str	r3, [sp, #104]	; 0x68
 80053ce:	4654      	mov	r4, sl
 80053d0:	2205      	movs	r2, #5
 80053d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d6:	4858      	ldr	r0, [pc, #352]	; (8005538 <_vfiprintf_r+0x24c>)
 80053d8:	f7ff fb0e 	bl	80049f8 <memchr>
 80053dc:	9a04      	ldr	r2, [sp, #16]
 80053de:	b9d8      	cbnz	r0, 8005418 <_vfiprintf_r+0x12c>
 80053e0:	06d1      	lsls	r1, r2, #27
 80053e2:	bf44      	itt	mi
 80053e4:	2320      	movmi	r3, #32
 80053e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ea:	0713      	lsls	r3, r2, #28
 80053ec:	bf44      	itt	mi
 80053ee:	232b      	movmi	r3, #43	; 0x2b
 80053f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f4:	f89a 3000 	ldrb.w	r3, [sl]
 80053f8:	2b2a      	cmp	r3, #42	; 0x2a
 80053fa:	d015      	beq.n	8005428 <_vfiprintf_r+0x13c>
 80053fc:	4654      	mov	r4, sl
 80053fe:	2000      	movs	r0, #0
 8005400:	f04f 0c0a 	mov.w	ip, #10
 8005404:	9a07      	ldr	r2, [sp, #28]
 8005406:	4621      	mov	r1, r4
 8005408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800540c:	3b30      	subs	r3, #48	; 0x30
 800540e:	2b09      	cmp	r3, #9
 8005410:	d94e      	bls.n	80054b0 <_vfiprintf_r+0x1c4>
 8005412:	b1b0      	cbz	r0, 8005442 <_vfiprintf_r+0x156>
 8005414:	9207      	str	r2, [sp, #28]
 8005416:	e014      	b.n	8005442 <_vfiprintf_r+0x156>
 8005418:	eba0 0308 	sub.w	r3, r0, r8
 800541c:	fa09 f303 	lsl.w	r3, r9, r3
 8005420:	4313      	orrs	r3, r2
 8005422:	46a2      	mov	sl, r4
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	e7d2      	b.n	80053ce <_vfiprintf_r+0xe2>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	1d19      	adds	r1, r3, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	9103      	str	r1, [sp, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	bfbb      	ittet	lt
 8005434:	425b      	neglt	r3, r3
 8005436:	f042 0202 	orrlt.w	r2, r2, #2
 800543a:	9307      	strge	r3, [sp, #28]
 800543c:	9307      	strlt	r3, [sp, #28]
 800543e:	bfb8      	it	lt
 8005440:	9204      	strlt	r2, [sp, #16]
 8005442:	7823      	ldrb	r3, [r4, #0]
 8005444:	2b2e      	cmp	r3, #46	; 0x2e
 8005446:	d10c      	bne.n	8005462 <_vfiprintf_r+0x176>
 8005448:	7863      	ldrb	r3, [r4, #1]
 800544a:	2b2a      	cmp	r3, #42	; 0x2a
 800544c:	d135      	bne.n	80054ba <_vfiprintf_r+0x1ce>
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	3402      	adds	r4, #2
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	9203      	str	r2, [sp, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	bfb8      	it	lt
 800545c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005460:	9305      	str	r3, [sp, #20]
 8005462:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005548 <_vfiprintf_r+0x25c>
 8005466:	2203      	movs	r2, #3
 8005468:	4650      	mov	r0, sl
 800546a:	7821      	ldrb	r1, [r4, #0]
 800546c:	f7ff fac4 	bl	80049f8 <memchr>
 8005470:	b140      	cbz	r0, 8005484 <_vfiprintf_r+0x198>
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	eba0 000a 	sub.w	r0, r0, sl
 8005478:	fa03 f000 	lsl.w	r0, r3, r0
 800547c:	9b04      	ldr	r3, [sp, #16]
 800547e:	3401      	adds	r4, #1
 8005480:	4303      	orrs	r3, r0
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	2206      	movs	r2, #6
 800548a:	482c      	ldr	r0, [pc, #176]	; (800553c <_vfiprintf_r+0x250>)
 800548c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005490:	f7ff fab2 	bl	80049f8 <memchr>
 8005494:	2800      	cmp	r0, #0
 8005496:	d03f      	beq.n	8005518 <_vfiprintf_r+0x22c>
 8005498:	4b29      	ldr	r3, [pc, #164]	; (8005540 <_vfiprintf_r+0x254>)
 800549a:	bb1b      	cbnz	r3, 80054e4 <_vfiprintf_r+0x1f8>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	9303      	str	r3, [sp, #12]
 80054a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054aa:	443b      	add	r3, r7
 80054ac:	9309      	str	r3, [sp, #36]	; 0x24
 80054ae:	e767      	b.n	8005380 <_vfiprintf_r+0x94>
 80054b0:	460c      	mov	r4, r1
 80054b2:	2001      	movs	r0, #1
 80054b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b8:	e7a5      	b.n	8005406 <_vfiprintf_r+0x11a>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 0c0a 	mov.w	ip, #10
 80054c0:	4619      	mov	r1, r3
 80054c2:	3401      	adds	r4, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4620      	mov	r0, r4
 80054c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054cc:	3a30      	subs	r2, #48	; 0x30
 80054ce:	2a09      	cmp	r2, #9
 80054d0:	d903      	bls.n	80054da <_vfiprintf_r+0x1ee>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c5      	beq.n	8005462 <_vfiprintf_r+0x176>
 80054d6:	9105      	str	r1, [sp, #20]
 80054d8:	e7c3      	b.n	8005462 <_vfiprintf_r+0x176>
 80054da:	4604      	mov	r4, r0
 80054dc:	2301      	movs	r3, #1
 80054de:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e2:	e7f0      	b.n	80054c6 <_vfiprintf_r+0x1da>
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <_vfiprintf_r+0x258>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	f7fd ff26 	bl	8003340 <_printf_float>
 80054f4:	4607      	mov	r7, r0
 80054f6:	1c78      	adds	r0, r7, #1
 80054f8:	d1d6      	bne.n	80054a8 <_vfiprintf_r+0x1bc>
 80054fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054fc:	07d9      	lsls	r1, r3, #31
 80054fe:	d405      	bmi.n	800550c <_vfiprintf_r+0x220>
 8005500:	89ab      	ldrh	r3, [r5, #12]
 8005502:	059a      	lsls	r2, r3, #22
 8005504:	d402      	bmi.n	800550c <_vfiprintf_r+0x220>
 8005506:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005508:	f7ff fa6c 	bl	80049e4 <__retarget_lock_release_recursive>
 800550c:	89ab      	ldrh	r3, [r5, #12]
 800550e:	065b      	lsls	r3, r3, #25
 8005510:	f53f af12 	bmi.w	8005338 <_vfiprintf_r+0x4c>
 8005514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005516:	e711      	b.n	800533c <_vfiprintf_r+0x50>
 8005518:	ab03      	add	r3, sp, #12
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	462a      	mov	r2, r5
 800551e:	4630      	mov	r0, r6
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <_vfiprintf_r+0x258>)
 8005522:	a904      	add	r1, sp, #16
 8005524:	f7fe f9a8 	bl	8003878 <_printf_i>
 8005528:	e7e4      	b.n	80054f4 <_vfiprintf_r+0x208>
 800552a:	bf00      	nop
 800552c:	08005d2c 	.word	0x08005d2c
 8005530:	08005d4c 	.word	0x08005d4c
 8005534:	08005d0c 	.word	0x08005d0c
 8005538:	08005ecc 	.word	0x08005ecc
 800553c:	08005ed6 	.word	0x08005ed6
 8005540:	08003341 	.word	0x08003341
 8005544:	080052c7 	.word	0x080052c7
 8005548:	08005ed2 	.word	0x08005ed2

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	2300      	movs	r3, #0
 8005550:	4d05      	ldr	r5, [pc, #20]	; (8005568 <_sbrk_r+0x1c>)
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fb fe66 	bl	8001228 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	200002d8 	.word	0x200002d8

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 faa6 	bl	8005ac4 <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	; 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	4605      	mov	r5, r0
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a8:	f000 f9f8 	bl	800599c <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	4632      	mov	r2, r6
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	4628      	mov	r0, r5
 80055b8:	463b      	mov	r3, r7
 80055ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b869 	b.w	8005698 <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f9e5 	bl	800599c <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b8f1 	b.w	80057d4 <_close_r>
	...

080055f4 <__swbuf_r>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	460e      	mov	r6, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	4605      	mov	r5, r0
 80055fc:	b118      	cbz	r0, 8005606 <__swbuf_r+0x12>
 80055fe:	6983      	ldr	r3, [r0, #24]
 8005600:	b90b      	cbnz	r3, 8005606 <__swbuf_r+0x12>
 8005602:	f7ff f94b 	bl	800489c <__sinit>
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <__swbuf_r+0x98>)
 8005608:	429c      	cmp	r4, r3
 800560a:	d12b      	bne.n	8005664 <__swbuf_r+0x70>
 800560c:	686c      	ldr	r4, [r5, #4]
 800560e:	69a3      	ldr	r3, [r4, #24]
 8005610:	60a3      	str	r3, [r4, #8]
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	071a      	lsls	r2, r3, #28
 8005616:	d52f      	bpl.n	8005678 <__swbuf_r+0x84>
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	b36b      	cbz	r3, 8005678 <__swbuf_r+0x84>
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	b2f6      	uxtb	r6, r6
 8005622:	1ac0      	subs	r0, r0, r3
 8005624:	6963      	ldr	r3, [r4, #20]
 8005626:	4637      	mov	r7, r6
 8005628:	4283      	cmp	r3, r0
 800562a:	dc04      	bgt.n	8005636 <__swbuf_r+0x42>
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f966 	bl	8005900 <_fflush_r>
 8005634:	bb30      	cbnz	r0, 8005684 <__swbuf_r+0x90>
 8005636:	68a3      	ldr	r3, [r4, #8]
 8005638:	3001      	adds	r0, #1
 800563a:	3b01      	subs	r3, #1
 800563c:	60a3      	str	r3, [r4, #8]
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	6022      	str	r2, [r4, #0]
 8005644:	701e      	strb	r6, [r3, #0]
 8005646:	6963      	ldr	r3, [r4, #20]
 8005648:	4283      	cmp	r3, r0
 800564a:	d004      	beq.n	8005656 <__swbuf_r+0x62>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	07db      	lsls	r3, r3, #31
 8005650:	d506      	bpl.n	8005660 <__swbuf_r+0x6c>
 8005652:	2e0a      	cmp	r6, #10
 8005654:	d104      	bne.n	8005660 <__swbuf_r+0x6c>
 8005656:	4621      	mov	r1, r4
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f951 	bl	8005900 <_fflush_r>
 800565e:	b988      	cbnz	r0, 8005684 <__swbuf_r+0x90>
 8005660:	4638      	mov	r0, r7
 8005662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <__swbuf_r+0x9c>)
 8005666:	429c      	cmp	r4, r3
 8005668:	d101      	bne.n	800566e <__swbuf_r+0x7a>
 800566a:	68ac      	ldr	r4, [r5, #8]
 800566c:	e7cf      	b.n	800560e <__swbuf_r+0x1a>
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <__swbuf_r+0xa0>)
 8005670:	429c      	cmp	r4, r3
 8005672:	bf08      	it	eq
 8005674:	68ec      	ldreq	r4, [r5, #12]
 8005676:	e7ca      	b.n	800560e <__swbuf_r+0x1a>
 8005678:	4621      	mov	r1, r4
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f81e 	bl	80056bc <__swsetup_r>
 8005680:	2800      	cmp	r0, #0
 8005682:	d0cb      	beq.n	800561c <__swbuf_r+0x28>
 8005684:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005688:	e7ea      	b.n	8005660 <__swbuf_r+0x6c>
 800568a:	bf00      	nop
 800568c:	08005d2c 	.word	0x08005d2c
 8005690:	08005d4c 	.word	0x08005d4c
 8005694:	08005d0c 	.word	0x08005d0c

08005698 <_write_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	2200      	movs	r2, #0
 80056a2:	4d05      	ldr	r5, [pc, #20]	; (80056b8 <_write_r+0x20>)
 80056a4:	602a      	str	r2, [r5, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f7fb fa64 	bl	8000b74 <_write>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_write_r+0x1e>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_write_r+0x1e>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	200002d8 	.word	0x200002d8

080056bc <__swsetup_r>:
 80056bc:	4b32      	ldr	r3, [pc, #200]	; (8005788 <__swsetup_r+0xcc>)
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	b125      	cbz	r5, 80056d2 <__swsetup_r+0x16>
 80056c8:	69ab      	ldr	r3, [r5, #24]
 80056ca:	b913      	cbnz	r3, 80056d2 <__swsetup_r+0x16>
 80056cc:	4628      	mov	r0, r5
 80056ce:	f7ff f8e5 	bl	800489c <__sinit>
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <__swsetup_r+0xd0>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d10f      	bne.n	80056f8 <__swsetup_r+0x3c>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e0:	0719      	lsls	r1, r3, #28
 80056e2:	d42c      	bmi.n	800573e <__swsetup_r+0x82>
 80056e4:	06dd      	lsls	r5, r3, #27
 80056e6:	d411      	bmi.n	800570c <__swsetup_r+0x50>
 80056e8:	2309      	movs	r3, #9
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	e03e      	b.n	8005776 <__swsetup_r+0xba>
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <__swsetup_r+0xd4>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d101      	bne.n	8005702 <__swsetup_r+0x46>
 80056fe:	68ac      	ldr	r4, [r5, #8]
 8005700:	e7eb      	b.n	80056da <__swsetup_r+0x1e>
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <__swsetup_r+0xd8>)
 8005704:	429c      	cmp	r4, r3
 8005706:	bf08      	it	eq
 8005708:	68ec      	ldreq	r4, [r5, #12]
 800570a:	e7e6      	b.n	80056da <__swsetup_r+0x1e>
 800570c:	0758      	lsls	r0, r3, #29
 800570e:	d512      	bpl.n	8005736 <__swsetup_r+0x7a>
 8005710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005712:	b141      	cbz	r1, 8005726 <__swsetup_r+0x6a>
 8005714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <__swsetup_r+0x66>
 800571c:	4630      	mov	r0, r6
 800571e:	f7ff fd17 	bl	8005150 <_free_r>
 8005722:	2300      	movs	r3, #0
 8005724:	6363      	str	r3, [r4, #52]	; 0x34
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	2300      	movs	r3, #0
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f043 0308 	orr.w	r3, r3, #8
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	b94b      	cbnz	r3, 8005756 <__swsetup_r+0x9a>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574c:	d003      	beq.n	8005756 <__swsetup_r+0x9a>
 800574e:	4621      	mov	r1, r4
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f959 	bl	8005a08 <__smakebuf_r>
 8005756:	89a0      	ldrh	r0, [r4, #12]
 8005758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800575c:	f010 0301 	ands.w	r3, r0, #1
 8005760:	d00a      	beq.n	8005778 <__swsetup_r+0xbc>
 8005762:	2300      	movs	r3, #0
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6963      	ldr	r3, [r4, #20]
 8005768:	425b      	negs	r3, r3
 800576a:	61a3      	str	r3, [r4, #24]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b943      	cbnz	r3, 8005782 <__swsetup_r+0xc6>
 8005770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005774:	d1ba      	bne.n	80056ec <__swsetup_r+0x30>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	0781      	lsls	r1, r0, #30
 800577a:	bf58      	it	pl
 800577c:	6963      	ldrpl	r3, [r4, #20]
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	e7f4      	b.n	800576c <__swsetup_r+0xb0>
 8005782:	2000      	movs	r0, #0
 8005784:	e7f7      	b.n	8005776 <__swsetup_r+0xba>
 8005786:	bf00      	nop
 8005788:	2000000c 	.word	0x2000000c
 800578c:	08005d2c 	.word	0x08005d2c
 8005790:	08005d4c 	.word	0x08005d4c
 8005794:	08005d0c 	.word	0x08005d0c

08005798 <__assert_func>:
 8005798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800579a:	4614      	mov	r4, r2
 800579c:	461a      	mov	r2, r3
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <__assert_func+0x2c>)
 80057a0:	4605      	mov	r5, r0
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68d8      	ldr	r0, [r3, #12]
 80057a6:	b14c      	cbz	r4, 80057bc <__assert_func+0x24>
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <__assert_func+0x30>)
 80057aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057ae:	9100      	str	r1, [sp, #0]
 80057b0:	462b      	mov	r3, r5
 80057b2:	4906      	ldr	r1, [pc, #24]	; (80057cc <__assert_func+0x34>)
 80057b4:	f000 f8e0 	bl	8005978 <fiprintf>
 80057b8:	f000 f9a3 	bl	8005b02 <abort>
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <__assert_func+0x38>)
 80057be:	461c      	mov	r4, r3
 80057c0:	e7f3      	b.n	80057aa <__assert_func+0x12>
 80057c2:	bf00      	nop
 80057c4:	2000000c 	.word	0x2000000c
 80057c8:	08005edd 	.word	0x08005edd
 80057cc:	08005eea 	.word	0x08005eea
 80057d0:	08005f18 	.word	0x08005f18

080057d4 <_close_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	2300      	movs	r3, #0
 80057d8:	4d05      	ldr	r5, [pc, #20]	; (80057f0 <_close_r+0x1c>)
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fb fcf2 	bl	80011c8 <_close>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_close_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_close_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	200002d8 	.word	0x200002d8

080057f4 <__sflush_r>:
 80057f4:	898a      	ldrh	r2, [r1, #12]
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	0710      	lsls	r0, r2, #28
 80057fe:	460c      	mov	r4, r1
 8005800:	d458      	bmi.n	80058b4 <__sflush_r+0xc0>
 8005802:	684b      	ldr	r3, [r1, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc05      	bgt.n	8005814 <__sflush_r+0x20>
 8005808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	dc02      	bgt.n	8005814 <__sflush_r+0x20>
 800580e:	2000      	movs	r0, #0
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0f9      	beq.n	800580e <__sflush_r+0x1a>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x98>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x46>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x46>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	4628      	mov	r0, r5
 8005842:	6a21      	ldr	r1, [r4, #32]
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x66>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb8>
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <__sflush_r+0x108>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb8>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	04d9      	lsls	r1, r3, #19
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x7c>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x7a>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x7c>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0ca      	beq.n	800580e <__sflush_r+0x1a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x92>
 8005880:	4628      	mov	r0, r5
 8005882:	f7ff fc65 	bl	8005150 <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c1      	b.n	8005810 <__sflush_r+0x1c>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x34>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x34>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xb2>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb6>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b1      	b.n	800580e <__sflush_r+0x1a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ad      	b.n	8005810 <__sflush_r+0x1c>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0a9      	beq.n	800580e <__sflush_r+0x1a>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	bf18      	it	ne
 80058be:	2300      	movne	r3, #0
 80058c0:	680e      	ldr	r6, [r1, #0]
 80058c2:	bf08      	it	eq
 80058c4:	694b      	ldreq	r3, [r1, #20]
 80058c6:	eba6 0807 	sub.w	r8, r6, r7
 80058ca:	600f      	str	r7, [r1, #0]
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	f1b8 0f00 	cmp.w	r8, #0
 80058d2:	dd9c      	ble.n	800580e <__sflush_r+0x1a>
 80058d4:	4643      	mov	r3, r8
 80058d6:	463a      	mov	r2, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	6a21      	ldr	r1, [r4, #32]
 80058dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058de:	47b0      	blx	r6
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dc06      	bgt.n	80058f2 <__sflush_r+0xfe>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ee:	81a3      	strh	r3, [r4, #12]
 80058f0:	e78e      	b.n	8005810 <__sflush_r+0x1c>
 80058f2:	4407      	add	r7, r0
 80058f4:	eba8 0800 	sub.w	r8, r8, r0
 80058f8:	e7e9      	b.n	80058ce <__sflush_r+0xda>
 80058fa:	bf00      	nop
 80058fc:	20400001 	.word	0x20400001

08005900 <_fflush_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b913      	cbnz	r3, 8005910 <_fflush_r+0x10>
 800590a:	2500      	movs	r5, #0
 800590c:	4628      	mov	r0, r5
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	b118      	cbz	r0, 800591a <_fflush_r+0x1a>
 8005912:	6983      	ldr	r3, [r0, #24]
 8005914:	b90b      	cbnz	r3, 800591a <_fflush_r+0x1a>
 8005916:	f7fe ffc1 	bl	800489c <__sinit>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <_fflush_r+0x6c>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d11b      	bne.n	8005958 <_fflush_r+0x58>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <_fflush_r+0xa>
 800592a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800592c:	07d0      	lsls	r0, r2, #31
 800592e:	d404      	bmi.n	800593a <_fflush_r+0x3a>
 8005930:	0599      	lsls	r1, r3, #22
 8005932:	d402      	bmi.n	800593a <_fflush_r+0x3a>
 8005934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005936:	f7ff f854 	bl	80049e2 <__retarget_lock_acquire_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff ff59 	bl	80057f4 <__sflush_r>
 8005942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005944:	4605      	mov	r5, r0
 8005946:	07da      	lsls	r2, r3, #31
 8005948:	d4e0      	bmi.n	800590c <_fflush_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d4dd      	bmi.n	800590c <_fflush_r+0xc>
 8005950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005952:	f7ff f847 	bl	80049e4 <__retarget_lock_release_recursive>
 8005956:	e7d9      	b.n	800590c <_fflush_r+0xc>
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <_fflush_r+0x70>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <_fflush_r+0x62>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7df      	b.n	8005922 <_fflush_r+0x22>
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <_fflush_r+0x74>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7da      	b.n	8005922 <_fflush_r+0x22>
 800596c:	08005d2c 	.word	0x08005d2c
 8005970:	08005d4c 	.word	0x08005d4c
 8005974:	08005d0c 	.word	0x08005d0c

08005978 <fiprintf>:
 8005978:	b40e      	push	{r1, r2, r3}
 800597a:	b503      	push	{r0, r1, lr}
 800597c:	4601      	mov	r1, r0
 800597e:	ab03      	add	r3, sp, #12
 8005980:	4805      	ldr	r0, [pc, #20]	; (8005998 <fiprintf+0x20>)
 8005982:	f853 2b04 	ldr.w	r2, [r3], #4
 8005986:	6800      	ldr	r0, [r0, #0]
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f7ff fcaf 	bl	80052ec <_vfiprintf_r>
 800598e:	b002      	add	sp, #8
 8005990:	f85d eb04 	ldr.w	lr, [sp], #4
 8005994:	b003      	add	sp, #12
 8005996:	4770      	bx	lr
 8005998:	2000000c 	.word	0x2000000c

0800599c <_lseek_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4604      	mov	r4, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	4611      	mov	r1, r2
 80059a4:	2200      	movs	r2, #0
 80059a6:	4d05      	ldr	r5, [pc, #20]	; (80059bc <_lseek_r+0x20>)
 80059a8:	602a      	str	r2, [r5, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f7fb fc30 	bl	8001210 <_lseek>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_lseek_r+0x1e>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_lseek_r+0x1e>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	200002d8 	.word	0x200002d8

080059c0 <__swhatbuf_r>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	460e      	mov	r6, r1
 80059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c8:	4614      	mov	r4, r2
 80059ca:	2900      	cmp	r1, #0
 80059cc:	461d      	mov	r5, r3
 80059ce:	b096      	sub	sp, #88	; 0x58
 80059d0:	da07      	bge.n	80059e2 <__swhatbuf_r+0x22>
 80059d2:	2300      	movs	r3, #0
 80059d4:	602b      	str	r3, [r5, #0]
 80059d6:	89b3      	ldrh	r3, [r6, #12]
 80059d8:	061a      	lsls	r2, r3, #24
 80059da:	d410      	bmi.n	80059fe <__swhatbuf_r+0x3e>
 80059dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e0:	e00e      	b.n	8005a00 <__swhatbuf_r+0x40>
 80059e2:	466a      	mov	r2, sp
 80059e4:	f000 f894 	bl	8005b10 <_fstat_r>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	dbf2      	blt.n	80059d2 <__swhatbuf_r+0x12>
 80059ec:	9a01      	ldr	r2, [sp, #4]
 80059ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059f6:	425a      	negs	r2, r3
 80059f8:	415a      	adcs	r2, r3
 80059fa:	602a      	str	r2, [r5, #0]
 80059fc:	e7ee      	b.n	80059dc <__swhatbuf_r+0x1c>
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	2000      	movs	r0, #0
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	b016      	add	sp, #88	; 0x58
 8005a06:	bd70      	pop	{r4, r5, r6, pc}

08005a08 <__smakebuf_r>:
 8005a08:	898b      	ldrh	r3, [r1, #12]
 8005a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a0c:	079d      	lsls	r5, r3, #30
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460c      	mov	r4, r1
 8005a12:	d507      	bpl.n	8005a24 <__smakebuf_r+0x1c>
 8005a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	b002      	add	sp, #8
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	466a      	mov	r2, sp
 8005a26:	ab01      	add	r3, sp, #4
 8005a28:	f7ff ffca 	bl	80059c0 <__swhatbuf_r>
 8005a2c:	9900      	ldr	r1, [sp, #0]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff fbd9 	bl	80051e8 <_malloc_r>
 8005a36:	b948      	cbnz	r0, 8005a4c <__smakebuf_r+0x44>
 8005a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d4ef      	bmi.n	8005a20 <__smakebuf_r+0x18>
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	e7e3      	b.n	8005a14 <__smakebuf_r+0xc>
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <__smakebuf_r+0x7c>)
 8005a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	6020      	str	r0, [r4, #0]
 8005a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	9b00      	ldr	r3, [sp, #0]
 8005a5c:	6120      	str	r0, [r4, #16]
 8005a5e:	6163      	str	r3, [r4, #20]
 8005a60:	9b01      	ldr	r3, [sp, #4]
 8005a62:	b15b      	cbz	r3, 8005a7c <__smakebuf_r+0x74>
 8005a64:	4630      	mov	r0, r6
 8005a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6a:	f000 f863 	bl	8005b34 <_isatty_r>
 8005a6e:	b128      	cbz	r0, 8005a7c <__smakebuf_r+0x74>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	81a3      	strh	r3, [r4, #12]
 8005a7c:	89a0      	ldrh	r0, [r4, #12]
 8005a7e:	4305      	orrs	r5, r0
 8005a80:	81a5      	strh	r5, [r4, #12]
 8005a82:	e7cd      	b.n	8005a20 <__smakebuf_r+0x18>
 8005a84:	08004835 	.word	0x08004835

08005a88 <__ascii_mbtowc>:
 8005a88:	b082      	sub	sp, #8
 8005a8a:	b901      	cbnz	r1, 8005a8e <__ascii_mbtowc+0x6>
 8005a8c:	a901      	add	r1, sp, #4
 8005a8e:	b142      	cbz	r2, 8005aa2 <__ascii_mbtowc+0x1a>
 8005a90:	b14b      	cbz	r3, 8005aa6 <__ascii_mbtowc+0x1e>
 8005a92:	7813      	ldrb	r3, [r2, #0]
 8005a94:	600b      	str	r3, [r1, #0]
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	1e10      	subs	r0, r2, #0
 8005a9a:	bf18      	it	ne
 8005a9c:	2001      	movne	r0, #1
 8005a9e:	b002      	add	sp, #8
 8005aa0:	4770      	bx	lr
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	e7fb      	b.n	8005a9e <__ascii_mbtowc+0x16>
 8005aa6:	f06f 0001 	mvn.w	r0, #1
 8005aaa:	e7f8      	b.n	8005a9e <__ascii_mbtowc+0x16>

08005aac <__malloc_lock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_lock+0x8>)
 8005aae:	f7fe bf98 	b.w	80049e2 <__retarget_lock_acquire_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200002d0 	.word	0x200002d0

08005ab8 <__malloc_unlock>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__malloc_unlock+0x8>)
 8005aba:	f7fe bf93 	b.w	80049e4 <__retarget_lock_release_recursive>
 8005abe:	bf00      	nop
 8005ac0:	200002d0 	.word	0x200002d0

08005ac4 <_read_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	2200      	movs	r2, #0
 8005ace:	4d05      	ldr	r5, [pc, #20]	; (8005ae4 <_read_r+0x20>)
 8005ad0:	602a      	str	r2, [r5, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f7fb fb5b 	bl	800118e <_read>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_read_r+0x1e>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_read_r+0x1e>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	200002d8 	.word	0x200002d8

08005ae8 <__ascii_wctomb>:
 8005ae8:	4603      	mov	r3, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	b141      	cbz	r1, 8005b00 <__ascii_wctomb+0x18>
 8005aee:	2aff      	cmp	r2, #255	; 0xff
 8005af0:	d904      	bls.n	8005afc <__ascii_wctomb+0x14>
 8005af2:	228a      	movs	r2, #138	; 0x8a
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	4770      	bx	lr
 8005afc:	2001      	movs	r0, #1
 8005afe:	700a      	strb	r2, [r1, #0]
 8005b00:	4770      	bx	lr

08005b02 <abort>:
 8005b02:	2006      	movs	r0, #6
 8005b04:	b508      	push	{r3, lr}
 8005b06:	f000 f84d 	bl	8005ba4 <raise>
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f7fb fb35 	bl	800117a <_exit>

08005b10 <_fstat_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	2300      	movs	r3, #0
 8005b14:	4d06      	ldr	r5, [pc, #24]	; (8005b30 <_fstat_r+0x20>)
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	f7fb fb5e 	bl	80011de <_fstat>
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	d102      	bne.n	8005b2c <_fstat_r+0x1c>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	b103      	cbz	r3, 8005b2c <_fstat_r+0x1c>
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
 8005b2e:	bf00      	nop
 8005b30:	200002d8 	.word	0x200002d8

08005b34 <_isatty_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	2300      	movs	r3, #0
 8005b38:	4d05      	ldr	r5, [pc, #20]	; (8005b50 <_isatty_r+0x1c>)
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fb fb5c 	bl	80011fc <_isatty>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_isatty_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_isatty_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	200002d8 	.word	0x200002d8

08005b54 <_raise_r>:
 8005b54:	291f      	cmp	r1, #31
 8005b56:	b538      	push	{r3, r4, r5, lr}
 8005b58:	4604      	mov	r4, r0
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	d904      	bls.n	8005b68 <_raise_r+0x14>
 8005b5e:	2316      	movs	r3, #22
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b6a:	b112      	cbz	r2, 8005b72 <_raise_r+0x1e>
 8005b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b70:	b94b      	cbnz	r3, 8005b86 <_raise_r+0x32>
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 f830 	bl	8005bd8 <_getpid_r>
 8005b78:	462a      	mov	r2, r5
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b82:	f000 b817 	b.w	8005bb4 <_kill_r>
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d00a      	beq.n	8005ba0 <_raise_r+0x4c>
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	d103      	bne.n	8005b96 <_raise_r+0x42>
 8005b8e:	2316      	movs	r3, #22
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	2001      	movs	r0, #1
 8005b94:	e7e7      	b.n	8005b66 <_raise_r+0x12>
 8005b96:	2400      	movs	r4, #0
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b9e:	4798      	blx	r3
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e7e0      	b.n	8005b66 <_raise_r+0x12>

08005ba4 <raise>:
 8005ba4:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <raise+0xc>)
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f7ff bfd3 	b.w	8005b54 <_raise_r>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c

08005bb4 <_kill_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4d06      	ldr	r5, [pc, #24]	; (8005bd4 <_kill_r+0x20>)
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	602b      	str	r3, [r5, #0]
 8005bc2:	f7fb faca 	bl	800115a <_kill>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	d102      	bne.n	8005bd0 <_kill_r+0x1c>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	b103      	cbz	r3, 8005bd0 <_kill_r+0x1c>
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200002d8 	.word	0x200002d8

08005bd8 <_getpid_r>:
 8005bd8:	f7fb bab8 	b.w	800114c <_getpid>

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
