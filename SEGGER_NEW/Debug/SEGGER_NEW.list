
SEGGER_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a14  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e24  08009e24  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e2c  08009e2c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e30  08009e30  00019e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009ea8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08009f48  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e50  200001b4  08009fe8  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006004  08009fe8  00026004  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a4ec  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004a62  00000000  00000000  0004a6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f60  00000000  00000000  0004f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001d68  00000000  00000000  00051090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000653d  00000000  00000000  00052df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000236c1  00000000  00000000  00059335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116676  00000000  00000000  0007c9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0019306c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008c48  00000000  00000000  001930bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009bfc 	.word	0x08009bfc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08009bfc 	.word	0x08009bfc

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	20005620 	.word	0x20005620

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SEGGER_SYSVIEW_Conf();
 80005dc:	f007 f8b4 	bl	8007748 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fddb 	bl	800119a <HAL_Init>

  /* USER CODE BEGIN Init */
	T = HAL_GetTick();
 80005e4:	f000 fdfa 	bl	80011dc <HAL_GetTick>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <main+0x70>)
 80005ec:	6013      	str	r3, [r2, #0]
	flag = 1;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <main+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f840 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f95a 	bl	80008b0 <MX_GPIO_Init>
  MX_ETH_Init();
 80005fc:	f000 f8ac 	bl	8000758 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f8f8 	bl	80007f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000604:	f000 f926 	bl	8000854 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f004 f984 	bl	8004914 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <main+0x78>)
 800060e:	2100      	movs	r1, #0
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <main+0x7c>)
 8000612:	f004 f9e9 	bl	80049e8 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <main+0x80>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of myTask_ON */
  myTask_ONHandle = osThreadNew(StartTask_ON, NULL, &myTask_ON_attributes);
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <main+0x84>)
 800061e:	2100      	movs	r1, #0
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0x88>)
 8000622:	f004 f9e1 	bl	80049e8 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <main+0x8c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of myTask_OFF */
  myTask_OFFHandle = osThreadNew(StartTask_OFF, NULL, &myTask_OFF_attributes);
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <main+0x90>)
 800062e:	2100      	movs	r1, #0
 8000630:	480e      	ldr	r0, [pc, #56]	; (800066c <main+0x94>)
 8000632:	f004 f9d9 	bl	80049e8 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x98>)
 800063a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  printf("SEGGER \r\n");
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x9c>)
 800063e:	f008 ff6f 	bl	8009520 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000642:	f004 f99b 	bl	800497c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x6e>
 8000648:	200001d4 	.word	0x200001d4
 800064c:	200001d0 	.word	0x200001d0
 8000650:	08009d14 	.word	0x08009d14
 8000654:	08000a19 	.word	0x08000a19
 8000658:	20000850 	.word	0x20000850
 800065c:	08009d38 	.word	0x08009d38
 8000660:	08000a29 	.word	0x08000a29
 8000664:	20000854 	.word	0x20000854
 8000668:	08009d5c 	.word	0x08009d5c
 800066c:	08000a99 	.word	0x08000a99
 8000670:	20000858 	.word	0x20000858
 8000674:	08009c38 	.word	0x08009c38

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fe3f 	bl	800930a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069c:	f001 fce4 	bl	8002068 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <SystemClock_Config+0xd8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <SystemClock_Config+0xd8>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xd8>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <SystemClock_Config+0xdc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a25      	ldr	r2, [pc, #148]	; (8000754 <SystemClock_Config+0xdc>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <SystemClock_Config+0xdc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006e8:	23d8      	movs	r3, #216	; 0xd8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006f0:	2309      	movs	r3, #9
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fd13 	bl	8002128 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 fa0e 	bl	8000b28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070c:	f001 fcbc 	bl	8002088 <HAL_PWREx_EnableOverDrive>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000716:	f000 fa07 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2107      	movs	r1, #7
 8000738:	4618      	mov	r0, r3
 800073a:	f001 ffa3 	bl	8002684 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000744:	f000 f9f0 	bl	8000b28 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	; 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_ETH_Init+0x84>)
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <MX_ETH_Init+0x88>)
 8000760:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_ETH_Init+0x8c>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000770:	22e1      	movs	r2, #225	; 0xe1
 8000772:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ETH_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_ETH_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_ETH_Init+0x84>)
 8000788:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_ETH_Init+0x8c>)
 800078a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ETH_Init+0x84>)
 800078e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000792:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_ETH_Init+0x84>)
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <MX_ETH_Init+0x90>)
 8000798:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_ETH_Init+0x84>)
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_ETH_Init+0x94>)
 800079e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_ETH_Init+0x84>)
 80007a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_ETH_Init+0x84>)
 80007aa:	f000 fe29 	bl	8001400 <HAL_ETH_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 f9b8 	bl	8000b28 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b8:	2238      	movs	r2, #56	; 0x38
 80007ba:	2100      	movs	r1, #0
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <MX_ETH_Init+0x98>)
 80007be:	f008 fda4 	bl	800930a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_ETH_Init+0x98>)
 80007c4:	2221      	movs	r2, #33	; 0x21
 80007c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_ETH_Init+0x98>)
 80007ca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_ETH_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000210 	.word	0x20000210
 80007e0:	40028000 	.word	0x40028000
 80007e4:	20000b18 	.word	0x20000b18
 80007e8:	20000114 	.word	0x20000114
 80007ec:	20000074 	.word	0x20000074
 80007f0:	200001d8 	.word	0x200001d8

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART3_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART3_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART3_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000838:	f003 f884 	bl	8003944 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f971 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002c0 	.word	0x200002c0
 8000850:	40004800 	.word	0x40004800

08000854 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800085e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2206      	movs	r2, #6
 8000864:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2202      	movs	r2, #2
 8000876:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2201      	movs	r2, #1
 800087c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2201      	movs	r2, #1
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	f001 fa9d 	bl	8001dd6 <HAL_PCD_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f941 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000348 	.word	0x20000348

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a46      	ldr	r2, [pc, #280]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a40      	ldr	r2, [pc, #256]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a3a      	ldr	r2, [pc, #232]	; (80009e4 <MX_GPIO_Init+0x134>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <MX_GPIO_Init+0x134>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <MX_GPIO_Init+0x134>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f244 0181 	movw	r1, #16513	; 0x4081
 800095c:	4822      	ldr	r0, [pc, #136]	; (80009e8 <MX_GPIO_Init+0x138>)
 800095e:	f001 fa21 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_GPIO_Init+0x13c>)
 8000968:	f001 fa1c 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <MX_GPIO_Init+0x140>)
 8000984:	f001 f862 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000988:	f244 0381 	movw	r3, #16513	; 0x4081
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4811      	ldr	r0, [pc, #68]	; (80009e8 <MX_GPIO_Init+0x138>)
 80009a2:	f001 f853 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <MX_GPIO_Init+0x13c>)
 80009be:	f001 f845 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0x13c>)
 80009d6:	f001 f839 	bl	8001a4c <HAL_GPIO_Init>

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020800 	.word	0x40020800

080009f4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80009fc:	1d39      	adds	r1, r7, #4
 80009fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a02:	2201      	movs	r2, #1
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <__io_putchar+0x20>)
 8000a06:	f002 ffeb 	bl	80039e0 <HAL_UART_Transmit>
  return ch;
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200002c0 	.word	0x200002c0

08000a18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f004 f887 	bl	8004b34 <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <StartDefaultTask+0x8>

08000a28 <StartTask_ON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_ON */
void StartTask_ON(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_ON */
  /* Infinite loop */
  for(;;)
	{
		if (flag == 0) {
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <StartTask_ON+0x64>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f083 0301 	eor.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00f      	beq.n	8000a5e <StartTask_ON+0x36>
			if (HAL_GetTick() - T >= 250) {
 8000a3e:	f000 fbcd 	bl	80011dc <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <StartTask_ON+0x68>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2bf9      	cmp	r3, #249	; 0xf9
 8000a4c:	d907      	bls.n	8000a5e <StartTask_ON+0x36>
				flag = 1;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <StartTask_ON+0x64>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000a54:	f000 fbc2 	bl	80011dc <HAL_GetTick>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <StartTask_ON+0x68>)
 8000a5c:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, flag);
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <StartTask_ON+0x64>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	2101      	movs	r1, #1
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <StartTask_ON+0x6c>)
 8000a68:	f001 f99c 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, flag);
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <StartTask_ON+0x64>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	4807      	ldr	r0, [pc, #28]	; (8000a94 <StartTask_ON+0x6c>)
 8000a76:	f001 f995 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, flag);
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <StartTask_ON+0x64>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <StartTask_ON+0x6c>)
 8000a86:	f001 f98d 	bl	8001da4 <HAL_GPIO_WritePin>
		if (flag == 0) {
 8000a8a:	e7d1      	b.n	8000a30 <StartTask_ON+0x8>
 8000a8c:	200001d0 	.word	0x200001d0
 8000a90:	200001d4 	.word	0x200001d4
 8000a94:	40020400 	.word	0x40020400

08000a98 <StartTask_OFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_OFF */
void StartTask_OFF(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_OFF */
  /* Infinite loop */
  for(;;)
	{
		if (flag == 1) {
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <StartTask_OFF+0x60>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00f      	beq.n	8000ac8 <StartTask_OFF+0x30>
			if (HAL_GetTick() - T >= 250) {
 8000aa8:	f000 fb98 	bl	80011dc <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <StartTask_OFF+0x64>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2bf9      	cmp	r3, #249	; 0xf9
 8000ab6:	d907      	bls.n	8000ac8 <StartTask_OFF+0x30>
				flag = 0;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <StartTask_OFF+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000abe:	f000 fb8d 	bl	80011dc <HAL_GetTick>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <StartTask_OFF+0x64>)
 8000ac6:	6013      	str	r3, [r2, #0]
			}
		}
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, flag);
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <StartTask_OFF+0x60>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	2101      	movs	r1, #1
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <StartTask_OFF+0x68>)
 8000ad2:	f001 f967 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, flag);
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <StartTask_OFF+0x60>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <StartTask_OFF+0x68>)
 8000ae0:	f001 f960 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, flag);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <StartTask_OFF+0x60>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <StartTask_OFF+0x68>)
 8000af0:	f001 f958 	bl	8001da4 <HAL_GPIO_WritePin>
		if (flag == 1) {
 8000af4:	e7d4      	b.n	8000aa0 <StartTask_OFF+0x8>
 8000af6:	bf00      	nop
 8000af8:	200001d0 	.word	0x200001d0
 8000afc:	200001d4 	.word	0x200001d4
 8000b00:	40020400 	.word	0x40020400

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 fb4d 	bl	80011b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40002000 	.word	0x40002000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	f06f 0001 	mvn.w	r0, #1
 8000b72:	f000 fc1b 	bl	80013ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a4e      	ldr	r2, [pc, #312]	; (8000cdc <HAL_ETH_MspInit+0x158>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	f040 8096 	bne.w	8000cd4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ba8:	4b4d      	ldr	r3, [pc, #308]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a4c      	ldr	r2, [pc, #304]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bbc:	623b      	str	r3, [r7, #32]
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a46      	ldr	r2, [pc, #280]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b44      	ldr	r3, [pc, #272]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfc:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a34      	ldr	r2, [pc, #208]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a28      	ldr	r2, [pc, #160]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <HAL_ETH_MspInit+0x15c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c50:	2332      	movs	r3, #50	; 0x32
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c60:	230b      	movs	r3, #11
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <HAL_ETH_MspInit+0x160>)
 8000c6c:	f000 feee 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c70:	2386      	movs	r3, #134	; 0x86
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <HAL_ETH_MspInit+0x164>)
 8000c8c:	f000 fede 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca2:	230b      	movs	r3, #11
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	480f      	ldr	r0, [pc, #60]	; (8000cec <HAL_ETH_MspInit+0x168>)
 8000cae:	f000 fecd 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <HAL_ETH_MspInit+0x16c>)
 8000cd0:	f000 febc 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3738      	adds	r7, #56	; 0x38
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40028000 	.word	0x40028000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40021800 	.word	0x40021800

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ae      	sub	sp, #184	; 0xb8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2290      	movs	r2, #144	; 0x90
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f008 faf8 	bl	800930a <memset>
  if(huart->Instance==USART3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d13c      	bne.n	8000d9e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fefe 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d3e:	f7ff fef3 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_UART_MspInit+0xb8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0xb8>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0xb8>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0xb8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_UART_MspInit+0xb8>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0xb8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0xbc>)
 8000d9a:	f000 fe57 	bl	8001a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	37b8      	adds	r7, #184	; 0xb8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004800 	.word	0x40004800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ae      	sub	sp, #184	; 0xb8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2290      	movs	r2, #144	; 0x90
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f008 fa98 	bl	800930a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de2:	d159      	bne.n	8000e98 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000de4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000de8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fe9d 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e00:	f7ff fe92 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e1c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e36:	230a      	movs	r3, #10
 8000e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e40:	4619      	mov	r1, r3
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e44:	f000 fe02 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <HAL_PCD_MspInit+0xf0>)
 8000e64:	f000 fdf2 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e72:	6353      	str	r3, [r2, #52]	; 0x34
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HAL_PCD_MspInit+0xec>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	37b8      	adds	r7, #184	; 0xb8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_InitTick+0xe0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <HAL_InitTick+0xe0>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <HAL_InitTick+0xe0>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed0:	f107 0210 	add.w	r2, r7, #16
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fdf8 	bl	8002ad0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eea:	f001 fdc9 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8000eee:	6378      	str	r0, [r7, #52]	; 0x34
 8000ef0:	e004      	b.n	8000efc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ef2:	f001 fdc5 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_InitTick+0xe4>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0c9b      	lsrs	r3, r3, #18
 8000f06:	3b01      	subs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <HAL_InitTick+0xec>)
 8000f0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f16:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000f30:	4817      	ldr	r0, [pc, #92]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f32:	f002 fa27 	bl	8003384 <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d11b      	bne.n	8000f7c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000f44:	4812      	ldr	r0, [pc, #72]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f46:	f002 fa7f 	bl	8003448 <HAL_TIM_Base_Start_IT>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d111      	bne.n	8000f7c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f58:	202d      	movs	r0, #45	; 0x2d
 8000f5a:	f000 fa43 	bl	80013e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d808      	bhi.n	8000f76 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	202d      	movs	r0, #45	; 0x2d
 8000f6a:	f000 fa1f 	bl	80013ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_InitTick+0xf0>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e002      	b.n	8000f7c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3738      	adds	r7, #56	; 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	20000b20 	.word	0x20000b20
 8000f94:	40002000 	.word	0x40002000
 8000f98:	20000004 	.word	0x20000004

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000fce:	f002 fab3 	bl	8003538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000b20 	.word	0x20000b20

08000fdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e00a      	b.n	8001004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fee:	f3af 8000 	nop.w
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf0      	blt.n	8000fee <_read+0x12>
  }

  return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e009      	b.n	800103c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	60ba      	str	r2, [r7, #8]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fcdf 	bl	80009f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf1      	blt.n	8001028 <_write+0x12>
  }
  return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_close>:

int _close(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001076:	605a      	str	r2, [r3, #4]
  return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_isatty>:

int _isatty(int file)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f007 ffce 	bl	8009088 <__errno>
 80010ec:	4603      	mov	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20080000 	.word	0x20080000
 8001118:	00000400 	.word	0x00000400
 800111c:	20000b6c 	.word	0x20000b6c
 8001120:	20006008 	.word	0x20006008

08001124 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <SystemInit+0x20>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <SystemInit+0x20>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001164:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001172:	f7ff ffd7 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f008 f883 	bl	8009280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fa2d 	bl	80005d8 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800118c:	08009e34 	.word	0x08009e34
  ldr r2, =_sbss
 8001190:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001194:	20006004 	.word	0x20006004

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>

0800119a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f8f9 	bl	8001396 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	200f      	movs	r0, #15
 80011a6:	f7ff fe7f 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fcc3 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000b70 	.word	0x20000b70

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000b70 	.word	0x20000b70

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	05fa0000 	.word	0x05fa0000

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff4c 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013be:	f7ff ff61 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	6978      	ldr	r0, [r7, #20]
 80013ca:	f7ff ffb1 	bl	8001330 <NVIC_EncodePriority>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff80 	bl	80012dc <__NVIC_SetPriority>
}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff54 	bl	80012a0 <__NVIC_EnableIRQ>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e06a      	b.n	80014e8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001418:	2b00      	cmp	r3, #0
 800141a:	d106      	bne.n	800142a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2223      	movs	r2, #35	; 0x23
 8001420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fbad 	bl	8000b84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_ETH_Init+0xf0>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <HAL_ETH_Init+0xf0>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <HAL_ETH_Init+0xf0>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_ETH_Init+0xf4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <HAL_ETH_Init+0xf4>)
 8001448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800144c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_ETH_Init+0xf4>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	4927      	ldr	r1, [pc, #156]	; (80014f4 <HAL_ETH_Init+0xf4>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_ETH_Init+0xf4>)
 800145e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001476:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff feb0 	bl	80011dc <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800147e:	e011      	b.n	80014a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001480:	f7ff feac 	bl	80011dc <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800148e:	d909      	bls.n	80014a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2204      	movs	r2, #4
 8001494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	22e0      	movs	r2, #224	; 0xe0
 800149c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e021      	b.n	80014e8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1e4      	bne.n	8001480 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f958 	bl	800176c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f9ff 	bl	80018c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fa55 	bl	8001972 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f9bd 	bl	8001850 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800

080014f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4b51      	ldr	r3, [pc, #324]	; (8001654 <ETH_SetMACConfig+0x15c>)
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7c1b      	ldrb	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <ETH_SetMACConfig+0x28>
 800151a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800151e:	e000      	b.n	8001522 <ETH_SetMACConfig+0x2a>
 8001520:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	7c5b      	ldrb	r3, [r3, #17]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ETH_SetMACConfig+0x38>
 800152a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152e:	e000      	b.n	8001532 <ETH_SetMACConfig+0x3a>
 8001530:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001532:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7fdb      	ldrb	r3, [r3, #31]
 800153e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001540:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	7f92      	ldrb	r2, [r2, #30]
 800154c:	2a00      	cmp	r2, #0
 800154e:	d102      	bne.n	8001556 <ETH_SetMACConfig+0x5e>
 8001550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001554:	e000      	b.n	8001558 <ETH_SetMACConfig+0x60>
 8001556:	2200      	movs	r2, #0
                        macconf->Speed |
 8001558:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7f1b      	ldrb	r3, [r3, #28]
 800155e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001560:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001566:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800156e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001576:	2a00      	cmp	r2, #0
 8001578:	d102      	bne.n	8001580 <ETH_SetMACConfig+0x88>
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	e000      	b.n	8001582 <ETH_SetMACConfig+0x8a>
 8001580:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001582:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7bdb      	ldrb	r3, [r3, #15]
 8001588:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800158a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001590:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001598:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800159a:	4313      	orrs	r3, r2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fe1e 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80015ce:	4013      	ands	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d101      	bne.n	80015e6 <ETH_SetMACConfig+0xee>
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	e000      	b.n	80015e8 <ETH_SetMACConfig+0xf0>
 80015e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80015f6:	2a01      	cmp	r2, #1
 80015f8:	d101      	bne.n	80015fe <ETH_SetMACConfig+0x106>
 80015fa:	2208      	movs	r2, #8
 80015fc:	e000      	b.n	8001600 <ETH_SetMACConfig+0x108>
 80015fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001600:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001608:	2a01      	cmp	r2, #1
 800160a:	d101      	bne.n	8001610 <ETH_SetMACConfig+0x118>
 800160c:	2204      	movs	r2, #4
 800160e:	e000      	b.n	8001612 <ETH_SetMACConfig+0x11a>
 8001610:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001612:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800161a:	2a01      	cmp	r2, #1
 800161c:	d101      	bne.n	8001622 <ETH_SetMACConfig+0x12a>
 800161e:	2202      	movs	r2, #2
 8001620:	e000      	b.n	8001624 <ETH_SetMACConfig+0x12c>
 8001622:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001624:	4313      	orrs	r3, r2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fdd9 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	ff20810f 	.word	0xff20810f

08001658 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <ETH_SetDMAConfig+0x110>)
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	7b1b      	ldrb	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <ETH_SetDMAConfig+0x2c>
 800167e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001682:	e000      	b.n	8001686 <ETH_SetDMAConfig+0x2e>
 8001684:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	7b5b      	ldrb	r3, [r3, #13]
 800168a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800168c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	7f52      	ldrb	r2, [r2, #29]
 8001692:	2a00      	cmp	r2, #0
 8001694:	d102      	bne.n	800169c <ETH_SetDMAConfig+0x44>
 8001696:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800169a:	e000      	b.n	800169e <ETH_SetDMAConfig+0x46>
 800169c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800169e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	7b9b      	ldrb	r3, [r3, #14]
 80016a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	7f1b      	ldrb	r3, [r3, #28]
 80016b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	7f9b      	ldrb	r3, [r3, #30]
 80016ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016cc:	4313      	orrs	r3, r2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff fd80 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fc:	461a      	mov	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	791b      	ldrb	r3, [r3, #4]
 8001706:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800170c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001712:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001718:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001720:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001722:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800172a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001730:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800173a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800173e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fd51 	bl	80011f4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	f8de3f23 	.word	0xf8de3f23

0800176c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0a6      	sub	sp, #152	; 0x98
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001780:	2300      	movs	r3, #0
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800178a:	2301      	movs	r3, #1
 800178c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017a8:	2300      	movs	r3, #0
 80017aa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e4:	4619      	mov	r1, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fe86 	bl	80014f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017f0:	2301      	movs	r3, #1
 80017f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001818:	2301      	movs	r3, #1
 800181a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001826:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff08 	bl	8001658 <ETH_SetDMAConfig>
}
 8001848:	bf00      	nop
 800184a:	3798      	adds	r7, #152	; 0x98
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3305      	adds	r3, #5
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	3204      	adds	r2, #4
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <ETH_MACAddressConfig+0x68>)
 8001872:	4413      	add	r3, r2
 8001874:	461a      	mov	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3303      	adds	r3, #3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	061a      	lsls	r2, r3, #24
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3302      	adds	r3, #2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	041b      	lsls	r3, r3, #16
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3301      	adds	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	4313      	orrs	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <ETH_MACAddressConfig+0x6c>)
 80018a2:	4413      	add	r3, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40028040 	.word	0x40028040
 80018bc:	40028044 	.word	0x40028044

080018c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e03e      	b.n	800194c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	3206      	adds	r2, #6
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d80c      	bhi.n	8001930 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68d9      	ldr	r1, [r3, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	e004      	b.n	800193a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	461a      	mov	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3301      	adds	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d9bd      	bls.n	80018ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e046      	b.n	8001a0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	3212      	adds	r2, #18
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d80c      	bhi.n	80019fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6919      	ldr	r1, [r3, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	e004      	b.n	8001a08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d9b5      	bls.n	8001980 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3e:	60da      	str	r2, [r3, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e175      	b.n	8001d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8164 	bne.w	8001d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x56>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80be 	beq.w	8001d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bee:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_GPIO_Init+0x32c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d037      	beq.n	8001c8a <HAL_GPIO_Init+0x23e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d031      	beq.n	8001c86 <HAL_GPIO_Init+0x23a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a56      	ldr	r2, [pc, #344]	; (8001d80 <HAL_GPIO_Init+0x334>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x236>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <HAL_GPIO_Init+0x338>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x232>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_GPIO_Init+0x33c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x22e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_GPIO_Init+0x340>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x22a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x344>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x226>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_GPIO_Init+0x348>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x222>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <HAL_GPIO_Init+0x34c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x21e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x350>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x21a>
 8001c62:	2309      	movs	r3, #9
 8001c64:	e012      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c66:	230a      	movs	r3, #10
 8001c68:	e010      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	e00e      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x240>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <HAL_GPIO_Init+0x354>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae86 	bls.w	8001a6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40022400 	.word	0x40022400
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd8:	b08f      	sub	sp, #60	; 0x3c
 8001dda:	af0a      	add	r7, sp, #40	; 0x28
 8001ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e116      	b.n	8002016 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe ffd6 	bl	8000db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fad0 	bl	80043cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	687e      	ldr	r6, [r7, #4]
 8001e34:	466d      	mov	r5, sp
 8001e36:	f106 0410 	add.w	r4, r6, #16
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e4a:	1d33      	adds	r3, r6, #4
 8001e4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f002 fa64 	bl	800431c <USB_CoreInit>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0d7      	b.n	8002016 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 fabe 	bl	80043ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e04a      	b.n	8001f0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	333d      	adds	r3, #61	; 0x3d
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	333c      	adds	r3, #60	; 0x3c
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	b298      	uxth	r0, r3
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3344      	adds	r3, #68	; 0x44
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3340      	adds	r3, #64	; 0x40
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	3348      	adds	r3, #72	; 0x48
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	334c      	adds	r3, #76	; 0x4c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3354      	adds	r3, #84	; 0x54
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3af      	bcc.n	8001e78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e044      	b.n	8001fa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3b5      	bcc.n	8001f1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	687e      	ldr	r6, [r7, #4]
 8001fba:	466d      	mov	r5, sp
 8001fbc:	f106 0410 	add.w	r4, r6, #16
 8001fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd0:	1d33      	adds	r3, r6, #4
 8001fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd4:	6838      	ldr	r0, [r7, #0]
 8001fd6:	f002 fa57 	bl	8004488 <USB_DevInit>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e014      	b.n	8002016 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f80b 	bl	8002020 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fc15 	bl	800483e <USB_DevDisconnect>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002020 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_PCDEx_ActivateLPM+0x44>)
 8002050:	4313      	orrs	r3, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	10000003 	.word	0x10000003

08002068 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40007000 	.word	0x40007000

08002088 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_PWREx_EnableOverDrive+0x98>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_PWREx_EnableOverDrive+0x98>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b6:	f7ff f891 	bl	80011dc <HAL_GetTick>
 80020ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020bc:	e009      	b.n	80020d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020be:	f7ff f88d 	bl	80011dc <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020cc:	d901      	bls.n	80020d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e022      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d1ee      	bne.n	80020be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff f876 	bl	80011dc <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f2:	e009      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f4:	f7ff f872 	bl	80011dc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002102:	d901      	bls.n	8002108 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e007      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_PWREx_EnableOverDrive+0x9c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002114:	d1ee      	bne.n	80020f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e29b      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b96      	ldr	r3, [pc, #600]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002158:	4b93      	ldr	r3, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x62>
 8002164:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b8d      	ldr	r3, [pc, #564]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x130>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e275      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x7a>
 8002194:	4b84      	ldr	r3, [pc, #528]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a83      	ldr	r2, [pc, #524]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x9c>
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7b      	ldr	r2, [pc, #492]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xc0>
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a75      	ldr	r2, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a72      	ldr	r2, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd8>
 80021e8:	4b6f      	ldr	r3, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6e      	ldr	r2, [pc, #440]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b6c      	ldr	r3, [pc, #432]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe ffe8 	bl	80011dc <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe ffe4 	bl	80011dc <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e229      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe8>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ffd4 	bl	80011dc <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe ffd0 	bl	80011dc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e215      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x110>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d069      	beq.n	800233a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x190>
 800227e:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x17a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1e9      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	493d      	ldr	r1, [pc, #244]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e040      	b.n	800233a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe ff86 	bl	80011dc <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d4:	f7fe ff82 	bl	80011dc <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1c7      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4929      	ldr	r1, [pc, #164]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe ff62 	bl	80011dc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7fe ff5e 	bl	80011dc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1a3      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d038      	beq.n	80023b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d019      	beq.n	8002382 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe ff3f 	bl	80011dc <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002362:	f7fe ff3b 	bl	80011dc <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e180      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x23a>
 8002380:	e01a      	b.n	80023b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x280>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe ff25 	bl	80011dc <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7fe ff21 	bl	80011dc <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d903      	bls.n	80023ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e166      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
 80023a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a4 	beq.w	800250e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a88      	ldr	r2, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b86      	ldr	r3, [pc, #536]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	4b83      	ldr	r3, [pc, #524]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023fa:	4b80      	ldr	r3, [pc, #512]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7f      	ldr	r2, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7fe fee9 	bl	80011dc <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7fe fee5 	bl	80011dc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b64      	cmp	r3, #100	; 0x64
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e12a      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x4d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x31a>
 8002434:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a6f      	ldr	r2, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	e02d      	b.n	800249e <HAL_RCC_OscConfig+0x376>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x33c>
 800244a:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
 8002462:	e01c      	b.n	800249e <HAL_RCC_OscConfig+0x376>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x35e>
 800246c:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	6713      	str	r3, [r2, #112]	; 0x70
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	4a5e      	ldr	r2, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6713      	str	r3, [r2, #112]	; 0x70
 8002484:	e00b      	b.n	800249e <HAL_RCC_OscConfig+0x376>
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a5b      	ldr	r2, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d015      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe fe99 	bl	80011dc <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fe95 	bl	80011dc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0d8      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ee      	beq.n	80024ae <HAL_RCC_OscConfig+0x386>
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fe83 	bl	80011dc <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fe7f 	bl	80011dc <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0c2      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ee      	bne.n	80024da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fc:	7dfb      	ldrb	r3, [r7, #23]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80ae 	beq.w	8002674 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d06d      	beq.n	8002600 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d14b      	bne.n	80025c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fe50 	bl	80011dc <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fe4c 	bl	80011dc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e091      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 8002596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fe1e 	bl	80011dc <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fe1a 	bl	80011dc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e05f      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x47c>
 80025c2:	e057      	b.n	8002674 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fe04 	bl	80011dc <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fe00 	bl	80011dc <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e045      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4b0>
 80025f6:	e03d      	b.n	8002674 <HAL_RCC_OscConfig+0x54c>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x558>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d030      	beq.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d129      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d122      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d119      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 020f 	bic.w	r2, r3, #15
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe fd30 	bl	80011dc <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fd2c 	bl	80011dc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fb36 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	08009d80 	.word	0x08009d80
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002860:	b094      	sub	sp, #80	; 0x50
 8002862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800286c:	2300      	movs	r3, #0
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d00d      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002880:	2b08      	cmp	r3, #8
 8002882:	f200 80e1 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 800288a:	2b04      	cmp	r3, #4
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x3a>
 800288e:	e0db      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002894:	e0db      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002896:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800289a:	e0d8      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80028bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e0:	0150      	lsls	r0, r2, #5
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4621      	mov	r1, r4
 80028e8:	1a51      	subs	r1, r2, r1
 80028ea:	6139      	str	r1, [r7, #16]
 80028ec:	4629      	mov	r1, r5
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002900:	4659      	mov	r1, fp
 8002902:	018b      	lsls	r3, r1, #6
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800290a:	4651      	mov	r1, sl
 800290c:	018a      	lsls	r2, r1, #6
 800290e:	4651      	mov	r1, sl
 8002910:	ebb2 0801 	subs.w	r8, r2, r1
 8002914:	4659      	mov	r1, fp
 8002916:	eb63 0901 	sbc.w	r9, r3, r1
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292e:	4690      	mov	r8, r2
 8002930:	4699      	mov	r9, r3
 8002932:	4623      	mov	r3, r4
 8002934:	eb18 0303 	adds.w	r3, r8, r3
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	462b      	mov	r3, r5
 800293c:	eb49 0303 	adc.w	r3, r9, r3
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800294e:	4629      	mov	r1, r5
 8002950:	024b      	lsls	r3, r1, #9
 8002952:	4621      	mov	r1, r4
 8002954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002958:	4621      	mov	r1, r4
 800295a:	024a      	lsls	r2, r1, #9
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	2200      	movs	r2, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
 8002966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800296c:	f7fd fcb2 	bl	80002d4 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4613      	mov	r3, r2
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002978:	e058      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	2200      	movs	r2, #0
 8002982:	4618      	mov	r0, r3
 8002984:	4611      	mov	r1, r2
 8002986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0159      	lsls	r1, r3, #5
 80029a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a6:	0150      	lsls	r0, r2, #5
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4641      	mov	r1, r8
 80029ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029cc:	ebb2 040a 	subs.w	r4, r2, sl
 80029d0:	eb63 050b 	sbc.w	r5, r3, fp
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	464b      	mov	r3, r9
 80029f0:	eb45 0303 	adc.w	r3, r5, r3
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	61fa      	str	r2, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	f7fd fc58 	bl	80002d4 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3750      	adds	r7, #80	; 0x50
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	007a1200 	.word	0x007a1200

08002a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08009d90 	.word	0x08009d90

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aac:	f7ff ffdc 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0b5b      	lsrs	r3, r3, #13
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08009d90 	.word	0x08009d90

08002ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	220f      	movs	r2, #15
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_RCC_GetClockConfig+0x60>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b5c:	4b69      	ldr	r3, [pc, #420]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	4964      	ldr	r1, [pc, #400]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d017      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	4959      	ldr	r1, [pc, #356]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d017      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	494a      	ldr	r1, [pc, #296]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be8:	d101      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 808b 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe face 	bl	80011dc <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fe faca 	bl	80011dc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e38f      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d035      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d02e      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d114      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fa92 	bl	80011dc <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fa8e 	bl	80011dc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e351      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cea:	d111      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	4901      	ldr	r1, [pc, #4]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	0ffffcff 	.word	0x0ffffcff
 8002d10:	4bac      	ldr	r3, [pc, #688]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4aab      	ldr	r2, [pc, #684]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	4ba9      	ldr	r3, [pc, #676]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	49a6      	ldr	r1, [pc, #664]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d3a:	4ba2      	ldr	r3, [pc, #648]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	4aa0      	ldr	r2, [pc, #640]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d4a:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	499b      	ldr	r1, [pc, #620]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d68:	4b96      	ldr	r3, [pc, #600]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	4993      	ldr	r1, [pc, #588]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d8a:	4b8e      	ldr	r3, [pc, #568]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d98:	498a      	ldr	r1, [pc, #552]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dac:	4b85      	ldr	r3, [pc, #532]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dba:	4982      	ldr	r1, [pc, #520]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dce:	4b7d      	ldr	r3, [pc, #500]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4979      	ldr	r1, [pc, #484]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002df0:	4b74      	ldr	r3, [pc, #464]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4971      	ldr	r1, [pc, #452]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f023 020c 	bic.w	r2, r3, #12
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	4968      	ldr	r1, [pc, #416]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e34:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	4960      	ldr	r1, [pc, #384]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e56:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	4957      	ldr	r1, [pc, #348]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	494f      	ldr	r1, [pc, #316]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	4946      	ldr	r1, [pc, #280]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	493e      	ldr	r1, [pc, #248]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ede:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	4935      	ldr	r1, [pc, #212]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f00:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d011      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f30:	4924      	ldr	r1, [pc, #144]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	4914      	ldr	r1, [pc, #80]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f94:	490b      	ldr	r1, [pc, #44]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00f      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	4902      	ldr	r1, [pc, #8]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd4:	4b8a      	ldr	r3, [pc, #552]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	4986      	ldr	r1, [pc, #536]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ff8:	4b81      	ldr	r3, [pc, #516]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	497d      	ldr	r1, [pc, #500]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d006      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80d6 	beq.w	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003024:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a75      	ldr	r2, [pc, #468]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fe f8d4 	bl	80011dc <HAL_GetTick>
 8003034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003038:	f7fe f8d0 	bl	80011dc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e195      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d021      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11d      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0c1b      	lsrs	r3, r3, #16
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	0e1b      	lsrs	r3, r3, #24
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	4958      	ldr	r1, [pc, #352]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02e      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d0:	d129      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030d2:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030e0:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	0f1b      	lsrs	r3, r3, #28
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	019a      	lsls	r2, r3, #6
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	041b      	lsls	r3, r3, #16
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	061b      	lsls	r3, r3, #24
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	071b      	lsls	r3, r3, #28
 8003106:	493e      	ldr	r1, [pc, #248]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800310e:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003114:	f023 021f 	bic.w	r2, r3, #31
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	3b01      	subs	r3, #1
 800311e:	4938      	ldr	r1, [pc, #224]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01d      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	0f1b      	lsrs	r3, r3, #28
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4926      	ldr	r1, [pc, #152]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	019a      	lsls	r2, r3, #6
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	491a      	ldr	r1, [pc, #104]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe f817 	bl	80011dc <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031b2:	f7fe f813 	bl	80011dc <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0d8      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	f040 80ce 	bne.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fd fffa 	bl	80011dc <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ea:	e00b      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031ec:	f7fd fff6 	bl	80011dc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d904      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0bb      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003204:	4b5e      	ldr	r3, [pc, #376]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003210:	d0ec      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02e      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d12a      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800323a:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003248:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	0f1b      	lsrs	r3, r3, #28
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	4944      	ldr	r1, [pc, #272]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003276:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	493d      	ldr	r1, [pc, #244]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a4:	d11d      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	0e1b      	lsrs	r3, r3, #24
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	0f1b      	lsrs	r3, r3, #28
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	019a      	lsls	r2, r3, #6
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	431a      	orrs	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	071b      	lsls	r3, r3, #28
 80032da:	4929      	ldr	r1, [pc, #164]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d028      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	0e1b      	lsrs	r3, r3, #24
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	019a      	lsls	r2, r3, #6
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	4917      	ldr	r1, [pc, #92]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4911      	ldr	r1, [pc, #68]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fd ff46 	bl	80011dc <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003354:	f7fd ff42 	bl	80011dc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e007      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003372:	d1ef      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e049      	b.n	800342a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f841 	bl	8003432 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f000 fa00 	bl	80037c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d001      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e054      	b.n	800350a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a26      	ldr	r2, [pc, #152]	; (8003518 <HAL_TIM_Base_Start_IT+0xd0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d01d      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_TIM_Base_Start_IT+0xd4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_TIM_Base_Start_IT+0xd8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_TIM_Base_Start_IT+0xdc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_TIM_Base_Start_IT+0xe0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_TIM_Base_Start_IT+0xe4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_TIM_Base_Start_IT+0xe8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d115      	bne.n	80034f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_TIM_Base_Start_IT+0xec>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d015      	beq.n	8003506 <HAL_TIM_Base_Start_IT+0xbe>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d011      	beq.n	8003506 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	e008      	b.n	8003506 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e000      	b.n	8003508 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40000c00 	.word	0x40000c00
 8003528:	40010400 	.word	0x40010400
 800352c:	40014000 	.word	0x40014000
 8003530:	40001800 	.word	0x40001800
 8003534:	00010007 	.word	0x00010007

08003538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f905 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8f7 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f908 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0204 	mvn.w	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8db 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8cd 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8de 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0208 	mvn.w	r2, #8
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8b1 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8a3 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8b4 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b10      	cmp	r3, #16
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0210 	mvn.w	r2, #16
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2208      	movs	r2, #8
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f887 	bl	800378a <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f879 	bl	8003776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f88a 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0201 	mvn.w	r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fa24 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f91a 	bl	800391c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f6:	d10e      	bne.n	8003716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d107      	bne.n	8003716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f90d 	bl	8003930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d10e      	bne.n	8003742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d107      	bne.n	8003742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f838 	bl	80037b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d10e      	bne.n	800376e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	d107      	bne.n	800376e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0220 	mvn.w	r2, #32
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8cd 	bl	8003908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a40      	ldr	r2, [pc, #256]	; (80038dc <TIM_Base_SetConfig+0x114>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d013      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d00f      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <TIM_Base_SetConfig+0x118>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00b      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a3c      	ldr	r2, [pc, #240]	; (80038e4 <TIM_Base_SetConfig+0x11c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3b      	ldr	r2, [pc, #236]	; (80038e8 <TIM_Base_SetConfig+0x120>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3a      	ldr	r2, [pc, #232]	; (80038ec <TIM_Base_SetConfig+0x124>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d108      	bne.n	800381a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <TIM_Base_SetConfig+0x114>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02b      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003828:	d027      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <TIM_Base_SetConfig+0x118>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d023      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2b      	ldr	r2, [pc, #172]	; (80038e4 <TIM_Base_SetConfig+0x11c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01f      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2a      	ldr	r2, [pc, #168]	; (80038e8 <TIM_Base_SetConfig+0x120>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01b      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <TIM_Base_SetConfig+0x124>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d017      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <TIM_Base_SetConfig+0x128>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <TIM_Base_SetConfig+0x12c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <TIM_Base_SetConfig+0x130>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a25      	ldr	r2, [pc, #148]	; (80038fc <TIM_Base_SetConfig+0x134>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <TIM_Base_SetConfig+0x138>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a23      	ldr	r2, [pc, #140]	; (8003904 <TIM_Base_SetConfig+0x13c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d108      	bne.n	800388c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <TIM_Base_SetConfig+0x114>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0xf8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <TIM_Base_SetConfig+0x124>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d103      	bne.n	80038c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	615a      	str	r2, [r3, #20]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40010400 	.word	0x40010400
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800
 80038fc:	40001800 	.word	0x40001800
 8003900:	40001c00 	.word	0x40001c00
 8003904:	40002000 	.word	0x40002000

08003908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e040      	b.n	80039d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd f9c4 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8b0 	bl	8003ae8 <UART_SetConfig>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e022      	b.n	80039d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fb08 	bl	8003fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fb8f 	bl	80040f4 <UART_CheckIdleState>
 80039d6:	4603      	mov	r3, r0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d171      	bne.n	8003adc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Transmit+0x24>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e06a      	b.n	8003ade <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2221      	movs	r2, #33	; 0x21
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd fbe1 	bl	80011dc <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x68>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a50:	e02c      	b.n	8003aac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fb96 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e038      	b.n	8003ade <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3302      	adds	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e007      	b.n	8003a9a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1cc      	bne.n	8003a52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fb63 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e005      	b.n	8003ade <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4ba6      	ldr	r3, [pc, #664]	; (8003dac <UART_SetConfig+0x2c4>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	6979      	ldr	r1, [r7, #20]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a94      	ldr	r2, [pc, #592]	; (8003db0 <UART_SetConfig+0x2c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d120      	bne.n	8003ba6 <UART_SetConfig+0xbe>
 8003b64:	4b93      	ldr	r3, [pc, #588]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d816      	bhi.n	8003ba0 <UART_SetConfig+0xb8>
 8003b72:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <UART_SetConfig+0x90>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003b89 	.word	0x08003b89
 8003b7c:	08003b95 	.word	0x08003b95
 8003b80:	08003b8f 	.word	0x08003b8f
 8003b84:	08003b9b 	.word	0x08003b9b
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e150      	b.n	8003e30 <UART_SetConfig+0x348>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e14d      	b.n	8003e30 <UART_SetConfig+0x348>
 8003b94:	2304      	movs	r3, #4
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e14a      	b.n	8003e30 <UART_SetConfig+0x348>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e147      	b.n	8003e30 <UART_SetConfig+0x348>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e144      	b.n	8003e30 <UART_SetConfig+0x348>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a83      	ldr	r2, [pc, #524]	; (8003db8 <UART_SetConfig+0x2d0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d132      	bne.n	8003c16 <UART_SetConfig+0x12e>
 8003bb0:	4b80      	ldr	r3, [pc, #512]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d828      	bhi.n	8003c10 <UART_SetConfig+0x128>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0xdc>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c11 	.word	0x08003c11
 8003bcc:	08003c11 	.word	0x08003c11
 8003bd0:	08003c11 	.word	0x08003c11
 8003bd4:	08003c05 	.word	0x08003c05
 8003bd8:	08003c11 	.word	0x08003c11
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c11 	.word	0x08003c11
 8003be4:	08003bff 	.word	0x08003bff
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c11 	.word	0x08003c11
 8003bf4:	08003c0b 	.word	0x08003c0b
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e118      	b.n	8003e30 <UART_SetConfig+0x348>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e115      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c04:	2304      	movs	r3, #4
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e112      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e10f      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c10:	2310      	movs	r3, #16
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	e10c      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a68      	ldr	r2, [pc, #416]	; (8003dbc <UART_SetConfig+0x2d4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d120      	bne.n	8003c62 <UART_SetConfig+0x17a>
 8003c20:	4b64      	ldr	r3, [pc, #400]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c2a:	2b30      	cmp	r3, #48	; 0x30
 8003c2c:	d013      	beq.n	8003c56 <UART_SetConfig+0x16e>
 8003c2e:	2b30      	cmp	r3, #48	; 0x30
 8003c30:	d814      	bhi.n	8003c5c <UART_SetConfig+0x174>
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d009      	beq.n	8003c4a <UART_SetConfig+0x162>
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d810      	bhi.n	8003c5c <UART_SetConfig+0x174>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <UART_SetConfig+0x15c>
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d006      	beq.n	8003c50 <UART_SetConfig+0x168>
 8003c42:	e00b      	b.n	8003c5c <UART_SetConfig+0x174>
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e0f2      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	77fb      	strb	r3, [r7, #31]
 8003c4e:	e0ef      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c50:	2304      	movs	r3, #4
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e0ec      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c56:	2308      	movs	r3, #8
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e0e9      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e0e6      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a56      	ldr	r2, [pc, #344]	; (8003dc0 <UART_SetConfig+0x2d8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d120      	bne.n	8003cae <UART_SetConfig+0x1c6>
 8003c6c:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c76:	2bc0      	cmp	r3, #192	; 0xc0
 8003c78:	d013      	beq.n	8003ca2 <UART_SetConfig+0x1ba>
 8003c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c7c:	d814      	bhi.n	8003ca8 <UART_SetConfig+0x1c0>
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d009      	beq.n	8003c96 <UART_SetConfig+0x1ae>
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d810      	bhi.n	8003ca8 <UART_SetConfig+0x1c0>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <UART_SetConfig+0x1a8>
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d006      	beq.n	8003c9c <UART_SetConfig+0x1b4>
 8003c8e:	e00b      	b.n	8003ca8 <UART_SetConfig+0x1c0>
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e0cc      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c96:	2302      	movs	r3, #2
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e0c9      	b.n	8003e30 <UART_SetConfig+0x348>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e0c6      	b.n	8003e30 <UART_SetConfig+0x348>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e0c3      	b.n	8003e30 <UART_SetConfig+0x348>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e0c0      	b.n	8003e30 <UART_SetConfig+0x348>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a44      	ldr	r2, [pc, #272]	; (8003dc4 <UART_SetConfig+0x2dc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d125      	bne.n	8003d04 <UART_SetConfig+0x21c>
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc6:	d017      	beq.n	8003cf8 <UART_SetConfig+0x210>
 8003cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ccc:	d817      	bhi.n	8003cfe <UART_SetConfig+0x216>
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd2:	d00b      	beq.n	8003cec <UART_SetConfig+0x204>
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd8:	d811      	bhi.n	8003cfe <UART_SetConfig+0x216>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <UART_SetConfig+0x1fe>
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce2:	d006      	beq.n	8003cf2 <UART_SetConfig+0x20a>
 8003ce4:	e00b      	b.n	8003cfe <UART_SetConfig+0x216>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e0a1      	b.n	8003e30 <UART_SetConfig+0x348>
 8003cec:	2302      	movs	r3, #2
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e09e      	b.n	8003e30 <UART_SetConfig+0x348>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e09b      	b.n	8003e30 <UART_SetConfig+0x348>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e098      	b.n	8003e30 <UART_SetConfig+0x348>
 8003cfe:	2310      	movs	r3, #16
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e095      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2f      	ldr	r2, [pc, #188]	; (8003dc8 <UART_SetConfig+0x2e0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d125      	bne.n	8003d5a <UART_SetConfig+0x272>
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d1c:	d017      	beq.n	8003d4e <UART_SetConfig+0x266>
 8003d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d22:	d817      	bhi.n	8003d54 <UART_SetConfig+0x26c>
 8003d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d28:	d00b      	beq.n	8003d42 <UART_SetConfig+0x25a>
 8003d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2e:	d811      	bhi.n	8003d54 <UART_SetConfig+0x26c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <UART_SetConfig+0x254>
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d38:	d006      	beq.n	8003d48 <UART_SetConfig+0x260>
 8003d3a:	e00b      	b.n	8003d54 <UART_SetConfig+0x26c>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e076      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d42:	2302      	movs	r3, #2
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e073      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e070      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e06d      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d54:	2310      	movs	r3, #16
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e06a      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <UART_SetConfig+0x2e4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d138      	bne.n	8003dd6 <UART_SetConfig+0x2ee>
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <UART_SetConfig+0x2cc>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d72:	d017      	beq.n	8003da4 <UART_SetConfig+0x2bc>
 8003d74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d78:	d82a      	bhi.n	8003dd0 <UART_SetConfig+0x2e8>
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7e:	d00b      	beq.n	8003d98 <UART_SetConfig+0x2b0>
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d824      	bhi.n	8003dd0 <UART_SetConfig+0x2e8>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <UART_SetConfig+0x2aa>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8e:	d006      	beq.n	8003d9e <UART_SetConfig+0x2b6>
 8003d90:	e01e      	b.n	8003dd0 <UART_SetConfig+0x2e8>
 8003d92:	2300      	movs	r3, #0
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e04b      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e048      	b.n	8003e30 <UART_SetConfig+0x348>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e045      	b.n	8003e30 <UART_SetConfig+0x348>
 8003da4:	2308      	movs	r3, #8
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e042      	b.n	8003e30 <UART_SetConfig+0x348>
 8003daa:	bf00      	nop
 8003dac:	efff69f3 	.word	0xefff69f3
 8003db0:	40011000 	.word	0x40011000
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40004400 	.word	0x40004400
 8003dbc:	40004800 	.word	0x40004800
 8003dc0:	40004c00 	.word	0x40004c00
 8003dc4:	40005000 	.word	0x40005000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	40007800 	.word	0x40007800
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e02c      	b.n	8003e30 <UART_SetConfig+0x348>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <UART_SetConfig+0x4bc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d125      	bne.n	8003e2c <UART_SetConfig+0x344>
 8003de0:	4b71      	ldr	r3, [pc, #452]	; (8003fa8 <UART_SetConfig+0x4c0>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dee:	d017      	beq.n	8003e20 <UART_SetConfig+0x338>
 8003df0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003df4:	d817      	bhi.n	8003e26 <UART_SetConfig+0x33e>
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfa:	d00b      	beq.n	8003e14 <UART_SetConfig+0x32c>
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e00:	d811      	bhi.n	8003e26 <UART_SetConfig+0x33e>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <UART_SetConfig+0x326>
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e0a:	d006      	beq.n	8003e1a <UART_SetConfig+0x332>
 8003e0c:	e00b      	b.n	8003e26 <UART_SetConfig+0x33e>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e00d      	b.n	8003e30 <UART_SetConfig+0x348>
 8003e14:	2302      	movs	r3, #2
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e00a      	b.n	8003e30 <UART_SetConfig+0x348>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	77fb      	strb	r3, [r7, #31]
 8003e1e:	e007      	b.n	8003e30 <UART_SetConfig+0x348>
 8003e20:	2308      	movs	r3, #8
 8003e22:	77fb      	strb	r3, [r7, #31]
 8003e24:	e004      	b.n	8003e30 <UART_SetConfig+0x348>
 8003e26:	2310      	movs	r3, #16
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e001      	b.n	8003e30 <UART_SetConfig+0x348>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e38:	d15b      	bne.n	8003ef2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e3a:	7ffb      	ldrb	r3, [r7, #31]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d828      	bhi.n	8003e92 <UART_SetConfig+0x3aa>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x360>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e83 	.word	0x08003e83
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fe08 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003e70:	61b8      	str	r0, [r7, #24]
        break;
 8003e72:	e013      	b.n	8003e9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fe18 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003e78:	61b8      	str	r0, [r7, #24]
        break;
 8003e7a:	e00f      	b.n	8003e9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <UART_SetConfig+0x4c4>)
 8003e7e:	61bb      	str	r3, [r7, #24]
        break;
 8003e80:	e00c      	b.n	8003e9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe fceb 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003e86:	61b8      	str	r0, [r7, #24]
        break;
 8003e88:	e008      	b.n	8003e9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e004      	b.n	8003e9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	77bb      	strb	r3, [r7, #30]
        break;
 8003e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d074      	beq.n	8003f8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	005a      	lsls	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	441a      	add	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	d916      	bls.n	8003eec <UART_SetConfig+0x404>
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d212      	bcs.n	8003eec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f023 030f 	bic.w	r3, r3, #15
 8003ece:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	89fa      	ldrh	r2, [r7, #14]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e04f      	b.n	8003f8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77bb      	strb	r3, [r7, #30]
 8003ef0:	e04c      	b.n	8003f8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef2:	7ffb      	ldrb	r3, [r7, #31]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d828      	bhi.n	8003f4a <UART_SetConfig+0x462>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x418>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f3b 	.word	0x08003f3b
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f4b 	.word	0x08003f4b
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f43 	.word	0x08003f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe fdac 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61b8      	str	r0, [r7, #24]
        break;
 8003f2a:	e013      	b.n	8003f54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe fdbc 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003f30:	61b8      	str	r0, [r7, #24]
        break;
 8003f32:	e00f      	b.n	8003f54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <UART_SetConfig+0x4c4>)
 8003f36:	61bb      	str	r3, [r7, #24]
        break;
 8003f38:	e00c      	b.n	8003f54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7fe fc8f 	bl	800285c <HAL_RCC_GetSysClockFreq>
 8003f3e:	61b8      	str	r0, [r7, #24]
        break;
 8003f40:	e008      	b.n	8003f54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	61bb      	str	r3, [r7, #24]
        break;
 8003f48:	e004      	b.n	8003f54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	77bb      	strb	r3, [r7, #30]
        break;
 8003f52:	bf00      	nop
    }

    if (pclk != 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	085a      	lsrs	r2, r3, #1
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	441a      	add	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	d909      	bls.n	8003f88 <UART_SetConfig+0x4a0>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d205      	bcs.n	8003f88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e001      	b.n	8003f8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f98:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40007c00 	.word	0x40007c00
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400

08003fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ae:	d10a      	bne.n	80040c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004104:	f7fd f86a 	bl	80011dc <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d10e      	bne.n	8004136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f831 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e027      	b.n	8004186 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b04      	cmp	r3, #4
 8004142:	d10e      	bne.n	8004162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f81b 	bl	800418e <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e011      	b.n	8004186 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b09c      	sub	sp, #112	; 0x70
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	e0a7      	b.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a6:	f000 80a3 	beq.w	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fd f817 	bl	80011dc <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80041ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d13f      	bne.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d4:	667b      	str	r3, [r7, #100]	; 0x64
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e6      	bne.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3308      	adds	r3, #8
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	663b      	str	r3, [r7, #96]	; 0x60
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004212:	64ba      	str	r2, [r7, #72]	; 0x48
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e5      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e068      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d050      	beq.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425c:	d148      	bne.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004266:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800427c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
 8004288:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800428c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e6      	bne.n	8004268 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042ba:	623a      	str	r2, [r7, #32]
 80042bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	69f9      	ldr	r1, [r7, #28]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e010      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	f43f af48 	beq.w	80041a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3770      	adds	r7, #112	; 0x70
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800431c:	b084      	sub	sp, #16
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	f107 001c 	add.w	r0, r7, #28
 800432a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	d120      	bne.n	8004376 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <USB_CoreInit+0xac>)
 8004346:	4013      	ands	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa96 	bl	800489c <USB_CoreReset>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e010      	b.n	8004398 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa8a 	bl	800489c <USB_CoreReset>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10b      	bne.n	80043b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f043 0206 	orr.w	r2, r3, #6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c2:	b004      	add	sp, #16
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	ffbdffbf 	.word	0xffbdffbf

080043cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 0201 	bic.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800441c:	2001      	movs	r0, #1
 800441e:	f7fc fee9 	bl	80011f4 <HAL_Delay>
      ms++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3301      	adds	r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fa29 	bl	8004880 <USB_GetMode>
 800442e:	4603      	mov	r3, r0
 8004430:	2b01      	cmp	r3, #1
 8004432:	d01e      	beq.n	8004472 <USB_SetCurrentMode+0x84>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b31      	cmp	r3, #49	; 0x31
 8004438:	d9f0      	bls.n	800441c <USB_SetCurrentMode+0x2e>
 800443a:	e01a      	b.n	8004472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800444e:	2001      	movs	r0, #1
 8004450:	f7fc fed0 	bl	80011f4 <HAL_Delay>
      ms++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa10 	bl	8004880 <USB_GetMode>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <USB_SetCurrentMode+0x84>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b31      	cmp	r3, #49	; 0x31
 800446a:	d9f0      	bls.n	800444e <USB_SetCurrentMode+0x60>
 800446c:	e001      	b.n	8004472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e005      	b.n	800447e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b32      	cmp	r3, #50	; 0x32
 8004476:	d101      	bne.n	800447c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e009      	b.n	80044bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3340      	adds	r3, #64	; 0x40
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3301      	adds	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0e      	cmp	r3, #14
 80044c0:	d9f2      	bls.n	80044a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11c      	bne.n	8004502 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d6:	f043 0302 	orr.w	r3, r3, #2
 80044da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e005      	b.n	800450e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004514:	461a      	mov	r2, r3
 8004516:	2300      	movs	r3, #0
 8004518:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	4619      	mov	r1, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	461a      	mov	r2, r3
 800452a:	680b      	ldr	r3, [r1, #0]
 800452c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10c      	bne.n	800454e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800453a:	2100      	movs	r1, #0
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f965 	bl	800480c <USB_SetDevSpeed>
 8004542:	e008      	b.n	8004556 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004544:	2101      	movs	r1, #1
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f960 	bl	800480c <USB_SetDevSpeed>
 800454c:	e003      	b.n	8004556 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800454e:	2103      	movs	r1, #3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f95b 	bl	800480c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004556:	2110      	movs	r1, #16
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8f3 	bl	8004744 <USB_FlushTxFifo>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f91f 	bl	80047ac <USB_FlushRxFifo>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	461a      	mov	r2, r3
 8004580:	2300      	movs	r3, #0
 8004582:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	461a      	mov	r2, r3
 800458c:	2300      	movs	r3, #0
 800458e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	461a      	mov	r2, r3
 8004598:	2300      	movs	r3, #0
 800459a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	e043      	b.n	800462a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045b8:	d118      	bne.n	80045ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	461a      	mov	r2, r3
 80045ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e013      	b.n	80045fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e008      	b.n	80045fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	2300      	movs	r3, #0
 80045fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460a:	461a      	mov	r2, r3
 800460c:	2300      	movs	r3, #0
 800460e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	461a      	mov	r2, r3
 800461e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004622:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3301      	adds	r3, #1
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3b7      	bcc.n	80045a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	e043      	b.n	80046c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464e:	d118      	bne.n	8004682 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	461a      	mov	r2, r3
 8004664:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e013      	b.n	8004694 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e008      	b.n	8004694 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	461a      	mov	r2, r3
 80046b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	3301      	adds	r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3b7      	bcc.n	8004638 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f043 0210 	orr.w	r2, r3, #16
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <USB_DevInit+0x2b4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f043 0208 	orr.w	r2, r3, #8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800471a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d105      	bne.n	800472c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <USB_DevInit+0x2b8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800472c:	7dfb      	ldrb	r3, [r7, #23]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004738:	b004      	add	sp, #16
 800473a:	4770      	bx	lr
 800473c:	803c3800 	.word	0x803c3800
 8004740:	40000004 	.word	0x40000004

08004744 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <USB_FlushTxFifo+0x64>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e01b      	b.n	800479c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	daf2      	bge.n	8004752 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	019b      	lsls	r3, r3, #6
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <USB_FlushTxFifo+0x64>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e006      	b.n	800479c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b20      	cmp	r3, #32
 8004798:	d0f0      	beq.n	800477c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	00030d40 	.word	0x00030d40

080047ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <USB_FlushRxFifo+0x5c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e018      	b.n	80047fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	daf2      	bge.n	80047b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2210      	movs	r2, #16
 80047da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <USB_FlushRxFifo+0x5c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e006      	b.n	80047fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d0f0      	beq.n	80047dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	00030d40 	.word	0x00030d40

0800480c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004858:	f023 0303 	bic.w	r3, r3, #3
 800485c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f003 0301 	and.w	r3, r3, #1
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <USB_CoreReset+0x64>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e01b      	b.n	80048f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	daf2      	bge.n	80048a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a09      	ldr	r2, [pc, #36]	; (8004900 <USB_CoreReset+0x64>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e006      	b.n	80048f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d0f0      	beq.n	80048d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	00030d40 	.word	0x00030d40

08004904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800491a:	f3ef 8305 	mrs	r3, IPSR
 800491e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004920:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004926:	f3ef 8310 	mrs	r3, PRIMASK
 800492a:	607b      	str	r3, [r7, #4]
  return(result);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004932:	f3ef 8311 	mrs	r3, BASEPRI
 8004936:	603b      	str	r3, [r7, #0]
  return(result);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <osKernelInitialize+0x3a>
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <osKernelInitialize+0x64>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d103      	bne.n	800494e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004946:	f06f 0305 	mvn.w	r3, #5
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e00c      	b.n	8004968 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <osKernelInitialize+0x64>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <osKernelInitialize+0x64>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e002      	b.n	8004968 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004966:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004968:	68fb      	ldr	r3, [r7, #12]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000b74 	.word	0x20000b74

0800497c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	60bb      	str	r3, [r7, #8]
  return(result);
 8004988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	607b      	str	r3, [r7, #4]
  return(result);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	603b      	str	r3, [r7, #0]
  return(result);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <osKernelStart+0x3a>
 80049a6:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <osKernelStart+0x68>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80049ae:	f06f 0305 	mvn.w	r3, #5
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e010      	b.n	80049d8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <osKernelStart+0x68>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d109      	bne.n	80049d2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049be:	f7ff ffa1 	bl	8004904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <osKernelStart+0x68>)
 80049c4:	2202      	movs	r2, #2
 80049c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049c8:	f001 f966 	bl	8005c98 <vTaskStartScheduler>
      stat = osOK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000b74 	.word	0x20000b74

080049e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	; 0x40
 80049ec:	af04      	add	r7, sp, #16
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f8:	f3ef 8305 	mrs	r3, IPSR
 80049fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80049fe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 808f 	bne.w	8004b24 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a06:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d105      	bne.n	8004a1e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a12:	f3ef 8311 	mrs	r3, BASEPRI
 8004a16:	617b      	str	r3, [r7, #20]
  return(result);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osThreadNew+0x3e>
 8004a1e:	4b44      	ldr	r3, [pc, #272]	; (8004b30 <osThreadNew+0x148>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d07e      	beq.n	8004b24 <osThreadNew+0x13c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d07b      	beq.n	8004b24 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a30:	2318      	movs	r3, #24
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d045      	beq.n	8004ad0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <osThreadNew+0x6a>
        name = attr->name;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <osThreadNew+0x90>
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	2b38      	cmp	r3, #56	; 0x38
 8004a6a:	d805      	bhi.n	8004a78 <osThreadNew+0x90>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <osThreadNew+0x94>
        return (NULL);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e054      	b.n	8004b26 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <osThreadNew+0xca>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2bbb      	cmp	r3, #187	; 0xbb
 8004a9a:	d90a      	bls.n	8004ab2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <osThreadNew+0xca>
        mem = 1;
 8004aac:	2301      	movs	r3, #1
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	e010      	b.n	8004ad4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10c      	bne.n	8004ad4 <osThreadNew+0xec>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <osThreadNew+0xec>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <osThreadNew+0xec>
          mem = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	e001      	b.n	8004ad4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d110      	bne.n	8004afc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ae2:	9202      	str	r2, [sp, #8]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 feb9 	bl	8005868 <xTaskCreateStatic>
 8004af6:	4603      	mov	r3, r0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e013      	b.n	8004b24 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d110      	bne.n	8004b24 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	f107 0310 	add.w	r3, r7, #16
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 ff0a 	bl	800592e <xTaskCreate>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <osThreadNew+0x13c>
          hTask = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b24:	693b      	ldr	r3, [r7, #16]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3730      	adds	r7, #48	; 0x30
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000b74 	.word	0x20000b74

08004b34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3c:	f3ef 8305 	mrs	r3, IPSR
 8004b40:	613b      	str	r3, [r7, #16]
  return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b48:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <osDelay+0x3c>
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <osDelay+0x58>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d103      	bne.n	8004b70 <osDelay+0x3c>
    stat = osErrorISR;
 8004b68:	f06f 0305 	mvn.w	r3, #5
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e007      	b.n	8004b80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f001 f852 	bl	8005c24 <vTaskDelay>
    }
  }

  return (stat);
 8004b80:	697b      	ldr	r3, [r7, #20]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000b74 	.word	0x20000b74

08004b90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4a06      	ldr	r2, [pc, #24]	; (8004bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000b78 	.word	0x20000b78
 8004bc0:	20000c34 	.word	0x20000c34

08004bc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a07      	ldr	r2, [pc, #28]	; (8004bf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <vApplicationGetTimerTaskMemory+0x30>)
 8004bda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000e34 	.word	0x20000e34
 8004bf4:	20000ef0 	.word	0x20000ef0

08004bf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f103 0208 	add.w	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f103 0208 	add.w	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f103 0208 	add.w	r2, r3, #8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb0:	d103      	bne.n	8004cba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e00c      	b.n	8004cd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e002      	b.n	8004cc8 <vListInsert+0x2e>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d2f6      	bcs.n	8004cc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6892      	ldr	r2, [r2, #8]
 8004d22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6852      	ldr	r2, [r2, #4]
 8004d2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d103      	bne.n	8004d40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	1e5a      	subs	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	b672      	cpsid	i
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	b662      	cpsie	i
 8004d88:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004d8e:	f002 f9bd 	bl	800710c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d9e:	fb01 f303 	mul.w	r3, r1, r3
 8004da2:	441a      	add	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	68f9      	ldr	r1, [r7, #12]
 8004dc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d114      	bne.n	8004e0e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3310      	adds	r3, #16
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fa31 	bl	8006258 <xTaskRemoveFromEventList>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <xQueueGenericReset+0xd0>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	e009      	b.n	8004e22 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3310      	adds	r3, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fef0 	bl	8004bf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3324      	adds	r3, #36	; 0x24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff feeb 	bl	8004bf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e22:	f002 f9a7 	bl	8007174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e26:	2301      	movs	r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	; 0x38
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	b672      	cpsid	i
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	b662      	cpsie	i
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10c      	bne.n	8004e82 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	b672      	cpsid	i
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	b662      	cpsie	i
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e7e:	bf00      	nop
 8004e80:	e7fe      	b.n	8004e80 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <xQueueGenericCreateStatic+0x5a>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <xQueueGenericCreateStatic+0x5e>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <xQueueGenericCreateStatic+0x60>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10c      	bne.n	8004eb2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	b672      	cpsid	i
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	b662      	cpsie	i
 8004eac:	623b      	str	r3, [r7, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <xQueueGenericCreateStatic+0x8a>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericCreateStatic+0x8e>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericCreateStatic+0x90>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10c      	bne.n	8004ee2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	b672      	cpsid	i
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	b662      	cpsie	i
 8004edc:	61fb      	str	r3, [r7, #28]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ee2:	2350      	movs	r3, #80	; 0x50
 8004ee4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b50      	cmp	r3, #80	; 0x50
 8004eea:	d00c      	beq.n	8004f06 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	b672      	cpsid	i
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	b662      	cpsie	i
 8004f00:	61bb      	str	r3, [r7, #24]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4613      	mov	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f805 	bl	8004f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3730      	adds	r7, #48	; 0x30
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d103      	bne.n	8004f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f66:	2101      	movs	r1, #1
 8004f68:	69b8      	ldr	r0, [r7, #24]
 8004f6a:	f7ff fef9 	bl	8004d60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	2073      	movs	r0, #115	; 0x73
 8004f7e:	f003 fa89 	bl	8008494 <SEGGER_SYSVIEW_RecordU32x3>
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b090      	sub	sp, #64	; 0x40
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10c      	bne.n	8004fc2 <xQueueGenericSend+0x36>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	b672      	cpsid	i
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	b662      	cpsie	i
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <xQueueGenericSend+0x44>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <xQueueGenericSend+0x48>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <xQueueGenericSend+0x4a>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <xQueueGenericSend+0x68>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	b672      	cpsid	i
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	b662      	cpsie	i
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d103      	bne.n	8005002 <xQueueGenericSend+0x76>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <xQueueGenericSend+0x7a>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <xQueueGenericSend+0x7c>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <xQueueGenericSend+0x9a>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	b672      	cpsid	i
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	b662      	cpsie	i
 8005020:	623b      	str	r3, [r7, #32]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005026:	f001 fb1d 	bl	8006664 <xTaskGetSchedulerState>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <xQueueGenericSend+0xaa>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <xQueueGenericSend+0xae>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericSend+0xb0>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10c      	bne.n	800505a <xQueueGenericSend+0xce>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	b672      	cpsid	i
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	b662      	cpsie	i
 8005054:	61fb      	str	r3, [r7, #28]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800505a:	f002 f857 	bl	800710c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <xQueueGenericSend+0xe4>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d136      	bne.n	80050de <xQueueGenericSend+0x152>
			{
				traceQUEUE_SEND( pxQueue );
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	4618      	mov	r0, r3
 8005074:	f003 fec0 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	460b      	mov	r3, r1
 8005082:	4601      	mov	r1, r0
 8005084:	205a      	movs	r0, #90	; 0x5a
 8005086:	f003 fa7b 	bl	8008580 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005090:	f000 fa74 	bl	800557c <prvCopyDataToQueue>
 8005094:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <xQueueGenericSend+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	3324      	adds	r3, #36	; 0x24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f8d8 	bl	8006258 <xTaskRemoveFromEventList>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d013      	beq.n	80050d6 <xQueueGenericSend+0x14a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050ae:	4b4d      	ldr	r3, [pc, #308]	; (80051e4 <xQueueGenericSend+0x258>)
 80050b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	e00a      	b.n	80050d6 <xQueueGenericSend+0x14a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <xQueueGenericSend+0x14a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <xQueueGenericSend+0x258>)
 80050c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050d6:	f002 f84d 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07d      	b.n	80051da <xQueueGenericSend+0x24e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d110      	bne.n	8005106 <xQueueGenericSend+0x17a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050e4:	f002 f846 	bl	8007174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	4618      	mov	r0, r3
 80050ec:	f003 fe84 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	460b      	mov	r3, r1
 80050fa:	4601      	mov	r1, r0
 80050fc:	205a      	movs	r0, #90	; 0x5a
 80050fe:	f003 fa3f 	bl	8008580 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8005102:	2300      	movs	r3, #0
 8005104:	e069      	b.n	80051da <xQueueGenericSend+0x24e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <xQueueGenericSend+0x18e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	4618      	mov	r0, r3
 8005112:	f001 f90b 	bl	800632c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800511a:	f002 f82b 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800511e:	f000 fe3d 	bl	8005d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005122:	f001 fff3 	bl	800710c <vPortEnterCritical>
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800512c:	b25b      	sxtb	r3, r3
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005132:	d103      	bne.n	800513c <xQueueGenericSend+0x1b0>
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005142:	b25b      	sxtb	r3, r3
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x1c6>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005152:	f002 f80f 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005156:	1d3a      	adds	r2, r7, #4
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f8fa 	bl	8006358 <xTaskCheckForTimeOut>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d124      	bne.n	80051b4 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800516a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800516c:	f000 fafe 	bl	800576c <prvIsQueueFull>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d018      	beq.n	80051a8 <xQueueGenericSend+0x21c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	3310      	adds	r3, #16
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f001 f814 	bl	80061ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005186:	f000 fa89 	bl	800569c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800518a:	f000 fe15 	bl	8005db8 <xTaskResumeAll>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f af62 	bne.w	800505a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <xQueueGenericSend+0x258>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	e758      	b.n	800505a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051aa:	f000 fa77 	bl	800569c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ae:	f000 fe03 	bl	8005db8 <xTaskResumeAll>
 80051b2:	e752      	b.n	800505a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051b6:	f000 fa71 	bl	800569c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ba:	f000 fdfd 	bl	8005db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	4618      	mov	r0, r3
 80051c2:	f003 fe19 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	460b      	mov	r3, r1
 80051d0:	4601      	mov	r1, r0
 80051d2:	205a      	movs	r0, #90	; 0x5a
 80051d4:	f003 f9d4 	bl	8008580 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80051d8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3738      	adds	r7, #56	; 0x38
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	; 0x38
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10c      	bne.n	800521a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	b672      	cpsid	i
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	b662      	cpsie	i
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <xQueueGenericSendFromISR+0x40>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <xQueueGenericSendFromISR+0x44>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <xQueueGenericSendFromISR+0x46>
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	623b      	str	r3, [r7, #32]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d103      	bne.n	800525a <xQueueGenericSendFromISR+0x72>
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <xQueueGenericSendFromISR+0x76>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <xQueueGenericSendFromISR+0x78>
 800525e:	2300      	movs	r3, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10c      	bne.n	800527e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	b672      	cpsid	i
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	b662      	cpsie	i
 8005278:	61fb      	str	r3, [r7, #28]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800527e:	f002 f82d 	bl	80072dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005282:	f3ef 8211 	mrs	r2, BASEPRI
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	b672      	cpsid	i
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	b662      	cpsie	i
 800529a:	61ba      	str	r2, [r7, #24]
 800529c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800529e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <xQueueGenericSendFromISR+0xcc>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d136      	bne.n	8005322 <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	4618      	mov	r0, r3
 80052c2:	f003 fd99 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 80052c6:	4601      	mov	r1, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	2060      	movs	r0, #96	; 0x60
 80052ce:	f003 f887 	bl	80083e0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052d8:	f000 f950 	bl	800557c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e4:	d112      	bne.n	800530c <xQueueGenericSendFromISR+0x124>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	3324      	adds	r3, #36	; 0x24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 ffb0 	bl	8006258 <xTaskRemoveFromEventList>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00e      	beq.n	800531c <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e007      	b.n	800531c <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800530c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005310:	3301      	adds	r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	b25a      	sxtb	r2, r3
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800531c:	2301      	movs	r3, #1
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005320:	e00b      	b.n	800533a <xQueueGenericSendFromISR+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	4618      	mov	r0, r3
 8005326:	f003 fd67 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 800532a:	4601      	mov	r1, r0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	461a      	mov	r2, r3
 8005330:	2060      	movs	r0, #96	; 0x60
 8005332:	f003 f855 	bl	80083e0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005344:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005348:	4618      	mov	r0, r3
 800534a:	3738      	adds	r7, #56	; 0x38
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005350:	b590      	push	{r4, r7, lr}
 8005352:	b08f      	sub	sp, #60	; 0x3c
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <xQueueReceive+0x34>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	b672      	cpsid	i
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	b662      	cpsie	i
 800537e:	623b      	str	r3, [r7, #32]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <xQueueReceive+0x42>
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <xQueueReceive+0x46>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <xQueueReceive+0x48>
 8005396:	2300      	movs	r3, #0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10c      	bne.n	80053b6 <xQueueReceive+0x66>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	b672      	cpsid	i
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	b662      	cpsie	i
 80053b0:	61fb      	str	r3, [r7, #28]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b6:	f001 f955 	bl	8006664 <xTaskGetSchedulerState>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <xQueueReceive+0x76>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <xQueueReceive+0x7a>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <xQueueReceive+0x7c>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10c      	bne.n	80053ea <xQueueReceive+0x9a>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	b672      	cpsid	i
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	b662      	cpsie	i
 80053e4:	61bb      	str	r3, [r7, #24]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ea:	f001 fe8f 	bl	800710c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02f      	beq.n	800545a <xQueueReceive+0x10a>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053fe:	f000 f927 	bl	8005650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	4618      	mov	r0, r3
 8005406:	f003 fcf7 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 800540a:	4604      	mov	r4, r0
 800540c:	2000      	movs	r0, #0
 800540e:	f003 fcf3 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2101      	movs	r1, #1
 8005418:	9100      	str	r1, [sp, #0]
 800541a:	4621      	mov	r1, r4
 800541c:	205c      	movs	r0, #92	; 0x5c
 800541e:	f003 f8af 	bl	8008580 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00f      	beq.n	8005452 <xQueueReceive+0x102>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	3310      	adds	r3, #16
 8005436:	4618      	mov	r0, r3
 8005438:	f000 ff0e 	bl	8006258 <xTaskRemoveFromEventList>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <xQueueReceive+0x102>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005442:	4b4d      	ldr	r3, [pc, #308]	; (8005578 <xQueueReceive+0x228>)
 8005444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005452:	f001 fe8f 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8005456:	2301      	movs	r3, #1
 8005458:	e08a      	b.n	8005570 <xQueueReceive+0x220>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d113      	bne.n	8005488 <xQueueReceive+0x138>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005460:	f001 fe88 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	4618      	mov	r0, r3
 8005468:	f003 fcc6 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 800546c:	4604      	mov	r4, r0
 800546e:	2000      	movs	r0, #0
 8005470:	f003 fcc2 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2101      	movs	r1, #1
 800547a:	9100      	str	r1, [sp, #0]
 800547c:	4621      	mov	r1, r4
 800547e:	205c      	movs	r0, #92	; 0x5c
 8005480:	f003 f87e 	bl	8008580 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8005484:	2300      	movs	r3, #0
 8005486:	e073      	b.n	8005570 <xQueueReceive+0x220>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <xQueueReceive+0x14c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800548e:	f107 0310 	add.w	r3, r7, #16
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ff4a 	bl	800632c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800549c:	f001 fe6a 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054a0:	f000 fc7c 	bl	8005d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054a4:	f001 fe32 	bl	800710c <vPortEnterCritical>
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b4:	d103      	bne.n	80054be <xQueueReceive+0x16e>
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ca:	d103      	bne.n	80054d4 <xQueueReceive+0x184>
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054d4:	f001 fe4e 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054d8:	1d3a      	adds	r2, r7, #4
 80054da:	f107 0310 	add.w	r3, r7, #16
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ff39 	bl	8006358 <xTaskCheckForTimeOut>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d124      	bne.n	8005536 <xQueueReceive+0x1e6>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ee:	f000 f927 	bl	8005740 <prvIsQueueEmpty>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d018      	beq.n	800552a <xQueueReceive+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	3324      	adds	r3, #36	; 0x24
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4611      	mov	r1, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fe53 	bl	80061ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005508:	f000 f8c8 	bl	800569c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800550c:	f000 fc54 	bl	8005db8 <xTaskResumeAll>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	f47f af69 	bne.w	80053ea <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8005518:	4b17      	ldr	r3, [pc, #92]	; (8005578 <xQueueReceive+0x228>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	e75f      	b.n	80053ea <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800552a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552c:	f000 f8b6 	bl	800569c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005530:	f000 fc42 	bl	8005db8 <xTaskResumeAll>
 8005534:	e759      	b.n	80053ea <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005538:	f000 f8b0 	bl	800569c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800553c:	f000 fc3c 	bl	8005db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005542:	f000 f8fd 	bl	8005740 <prvIsQueueEmpty>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f43f af4e 	beq.w	80053ea <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	4618      	mov	r0, r3
 8005552:	f003 fc51 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 8005556:	4604      	mov	r4, r0
 8005558:	2000      	movs	r0, #0
 800555a:	f003 fc4d 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 800555e:	4602      	mov	r2, r0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2101      	movs	r1, #1
 8005564:	9100      	str	r1, [sp, #0]
 8005566:	4621      	mov	r1, r4
 8005568:	205c      	movs	r0, #92	; 0x5c
 800556a:	f003 f809 	bl	8008580 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800556e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005570:	4618      	mov	r0, r3
 8005572:	3734      	adds	r7, #52	; 0x34
 8005574:	46bd      	mov	sp, r7
 8005576:	bd90      	pop	{r4, r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10d      	bne.n	80055b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d14d      	bne.n	800563e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f87a 	bl	80066a0 <xTaskPriorityDisinherit>
 80055ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	e043      	b.n	800563e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d119      	bne.n	80055f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6858      	ldr	r0, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	461a      	mov	r2, r3
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	f003 fe91 	bl	80092ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d32b      	bcc.n	800563e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	e026      	b.n	800563e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68d8      	ldr	r0, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	461a      	mov	r2, r3
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	f003 fe77 	bl	80092ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	425b      	negs	r3, r3
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d207      	bcs.n	800562c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	425b      	negs	r3, r3
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d105      	bne.n	800563e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3b01      	subs	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005646:	697b      	ldr	r3, [r7, #20]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d018      	beq.n	8005694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	441a      	add	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d303      	bcc.n	8005684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68d9      	ldr	r1, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	461a      	mov	r2, r3
 800568e:	6838      	ldr	r0, [r7, #0]
 8005690:	f003 fe2d 	bl	80092ee <memcpy>
	}
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056a4:	f001 fd32 	bl	800710c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056b0:	e011      	b.n	80056d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d012      	beq.n	80056e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3324      	adds	r3, #36	; 0x24
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fdca 	bl	8006258 <xTaskRemoveFromEventList>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056ca:	f000 feab 	bl	8006424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dce9      	bgt.n	80056b2 <prvUnlockQueue+0x16>
 80056de:	e000      	b.n	80056e2 <prvUnlockQueue+0x46>
					break;
 80056e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056ea:	f001 fd43 	bl	8007174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ee:	f001 fd0d 	bl	800710c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056fa:	e011      	b.n	8005720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d012      	beq.n	800572a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3310      	adds	r3, #16
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fda5 	bl	8006258 <xTaskRemoveFromEventList>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005714:	f000 fe86 	bl	8006424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	3b01      	subs	r3, #1
 800571c:	b2db      	uxtb	r3, r3
 800571e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005724:	2b00      	cmp	r3, #0
 8005726:	dce9      	bgt.n	80056fc <prvUnlockQueue+0x60>
 8005728:	e000      	b.n	800572c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800572a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005734:	f001 fd1e 	bl	8007174 <vPortExitCritical>
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005748:	f001 fce0 	bl	800710c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	2b00      	cmp	r3, #0
 8005752:	d102      	bne.n	800575a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f001 fd09 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005774:	f001 fcca 	bl	800710c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	429a      	cmp	r2, r3
 8005782:	d102      	bne.n	800578a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005784:	2301      	movs	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	e001      	b.n	800578e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578e:	f001 fcf1 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005792:	68fb      	ldr	r3, [r7, #12]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e01e      	b.n	80057ea <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057ac:	4a13      	ldr	r2, [pc, #76]	; (80057fc <vQueueAddToRegistry+0x60>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d115      	bne.n	80057e4 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057b8:	4910      	ldr	r1, [pc, #64]	; (80057fc <vQueueAddToRegistry+0x60>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <vQueueAddToRegistry+0x60>)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f003 fb11 	bl	8008df8 <SEGGER_SYSVIEW_ShrinkId>
 80057d6:	4601      	mov	r1, r0
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	2071      	movs	r0, #113	; 0x71
 80057de:	f002 fdff 	bl	80083e0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80057e2:	e006      	b.n	80057f2 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b07      	cmp	r3, #7
 80057ee:	d9dd      	bls.n	80057ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200012f0 	.word	0x200012f0

08005800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005810:	f001 fc7c 	bl	800710c <vPortEnterCritical>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800581a:	b25b      	sxtb	r3, r3
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005820:	d103      	bne.n	800582a <vQueueWaitForMessageRestricted+0x2a>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005830:	b25b      	sxtb	r3, r3
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005836:	d103      	bne.n	8005840 <vQueueWaitForMessageRestricted+0x40>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005840:	f001 fc98 	bl	8007174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fccf 	bl	80061f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800585a:	6978      	ldr	r0, [r7, #20]
 800585c:	f7ff ff1e 	bl	800569c <prvUnlockQueue>
	}
 8005860:	bf00      	nop
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af04      	add	r7, sp, #16
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <xTaskCreateStatic+0x2e>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	b672      	cpsid	i
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	b662      	cpsie	i
 8005890:	623b      	str	r3, [r7, #32]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10c      	bne.n	80058b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	b672      	cpsid	i
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	b662      	cpsie	i
 80058b0:	61fb      	str	r3, [r7, #28]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058b6:	23bc      	movs	r3, #188	; 0xbc
 80058b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2bbc      	cmp	r3, #188	; 0xbc
 80058be:	d00c      	beq.n	80058da <xTaskCreateStatic+0x72>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	61bb      	str	r3, [r7, #24]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d01e      	beq.n	8005920 <xTaskCreateStatic+0xb8>
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058fa:	2300      	movs	r3, #0
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	f107 0314 	add.w	r3, r7, #20
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f850 	bl	80059b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800591a:	f000 f8f5 	bl	8005b08 <prvAddNewTaskToReadyList>
 800591e:	e001      	b.n	8005924 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005924:	697b      	ldr	r3, [r7, #20]
	}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08c      	sub	sp, #48	; 0x30
 8005932:	af04      	add	r7, sp, #16
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	603b      	str	r3, [r7, #0]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fd0e 	bl	8007364 <pvPortMalloc>
 8005948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00e      	beq.n	800596e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005950:	20bc      	movs	r0, #188	; 0xbc
 8005952:	f001 fd07 	bl	8007364 <pvPortMalloc>
 8005956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
 8005964:	e005      	b.n	8005972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	f001 fdc6 	bl	80074f8 <vPortFree>
 800596c:	e001      	b.n	8005972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d017      	beq.n	80059a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	2300      	movs	r3, #0
 8005984:	9303      	str	r3, [sp, #12]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	9302      	str	r3, [sp, #8]
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f80e 	bl	80059b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800599c:	69f8      	ldr	r0, [r7, #28]
 800599e:	f000 f8b3 	bl	8005b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059a2:	2301      	movs	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e002      	b.n	80059ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059ae:	69bb      	ldr	r3, [r7, #24]
	}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	461a      	mov	r2, r3
 80059d0:	21a5      	movs	r1, #165	; 0xa5
 80059d2:	f003 fc9a 	bl	800930a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80059e0:	440b      	add	r3, r1
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00c      	beq.n	8005a14 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	b672      	cpsid	i
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	b662      	cpsie	i
 8005a0e:	617b      	str	r3, [r7, #20]
}
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01f      	beq.n	8005a5a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	e012      	b.n	8005a46 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	7819      	ldrb	r1, [r3, #0]
 8005a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3334      	adds	r3, #52	; 0x34
 8005a30:	460a      	mov	r2, r1
 8005a32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d006      	beq.n	8005a4e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d9e9      	bls.n	8005a20 <prvInitialiseNewTask+0x68>
 8005a4c:	e000      	b.n	8005a50 <prvInitialiseNewTask+0x98>
			{
				break;
 8005a4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a58:	e003      	b.n	8005a62 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2b37      	cmp	r3, #55	; 0x37
 8005a66:	d901      	bls.n	8005a6c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a68:	2337      	movs	r3, #55	; 0x37
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	3304      	adds	r3, #4
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff f8d8 	bl	8004c38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	3318      	adds	r3, #24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff f8d3 	bl	8004c38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	3354      	adds	r3, #84	; 0x54
 8005abc:	2260      	movs	r2, #96	; 0x60
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f003 fc22 	bl	800930a <memset>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <prvInitialiseNewTask+0x144>)
 8005aca:	659a      	str	r2, [r3, #88]	; 0x58
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <prvInitialiseNewTask+0x148>)
 8005ad0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <prvInitialiseNewTask+0x14c>)
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	68f9      	ldr	r1, [r7, #12]
 8005adc:	69b8      	ldr	r0, [r7, #24]
 8005ade:	f001 fa09 	bl	8006ef4 <pxPortInitialiseStack>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af4:	bf00      	nop
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	08009de0 	.word	0x08009de0
 8005b00:	08009e00 	.word	0x08009e00
 8005b04:	08009dc0 	.word	0x08009dc0

08005b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b08:	b5b0      	push	{r4, r5, r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b10:	f001 fafc 	bl	800710c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b14:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <prvAddNewTaskToReadyList+0x100>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	4a3b      	ldr	r2, [pc, #236]	; (8005c08 <prvAddNewTaskToReadyList+0x100>)
 8005b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	; (8005c0c <prvAddNewTaskToReadyList+0x104>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b26:	4a39      	ldr	r2, [pc, #228]	; (8005c0c <prvAddNewTaskToReadyList+0x104>)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <prvAddNewTaskToReadyList+0x100>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d110      	bne.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b34:	f000 fc9a 	bl	800646c <prvInitialiseTaskLists>
 8005b38:	e00d      	b.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b35      	ldr	r3, [pc, #212]	; (8005c10 <prvAddNewTaskToReadyList+0x108>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b42:	4b32      	ldr	r3, [pc, #200]	; (8005c0c <prvAddNewTaskToReadyList+0x104>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d802      	bhi.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b50:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <prvAddNewTaskToReadyList+0x104>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b56:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <prvAddNewTaskToReadyList+0x10c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	; (8005c14 <prvAddNewTaskToReadyList+0x10c>)
 8005b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b60:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <prvAddNewTaskToReadyList+0x10c>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <prvAddNewTaskToReadyList+0x94>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f003 f87b 	bl	8008c6c <SEGGER_SYSVIEW_OnTaskCreate>
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	461d      	mov	r5, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461c      	mov	r4, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	1ae3      	subs	r3, r4, r3
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	462b      	mov	r3, r5
 8005b98:	f001 fe8e 	bl	80078b8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f003 f8e8 	bl	8008d74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <prvAddNewTaskToReadyList+0x110>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d903      	bls.n	8005bb8 <prvAddNewTaskToReadyList+0xb0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <prvAddNewTaskToReadyList+0x110>)
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <prvAddNewTaskToReadyList+0x114>)
 8005bc6:	441a      	add	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7ff f83f 	bl	8004c52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bd4:	f001 face 	bl	8007174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <prvAddNewTaskToReadyList+0x108>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <prvAddNewTaskToReadyList+0x104>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d207      	bcs.n	8005bfe <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <prvAddNewTaskToReadyList+0x118>)
 8005bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bdb0      	pop	{r4, r5, r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20001804 	.word	0x20001804
 8005c0c:	20001330 	.word	0x20001330
 8005c10:	20001810 	.word	0x20001810
 8005c14:	20001820 	.word	0x20001820
 8005c18:	2000180c 	.word	0x2000180c
 8005c1c:	20001334 	.word	0x20001334
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01d      	beq.n	8005c72 <vTaskDelay+0x4e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c36:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <vTaskDelay+0x6c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <vTaskDelay+0x34>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	b672      	cpsid	i
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	b662      	cpsie	i
 8005c52:	60bb      	str	r3, [r7, #8]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005c58:	f000 f8a0 	bl	8005d9c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	2023      	movs	r0, #35	; 0x23
 8005c60:	f002 fb82 	bl	8008368 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c64:	2100      	movs	r1, #0
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fd94 	bl	8006794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c6c:	f000 f8a4 	bl	8005db8 <xTaskResumeAll>
 8005c70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d107      	bne.n	8005c88 <vTaskDelay+0x64>
		{
			portYIELD_WITHIN_API();
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <vTaskDelay+0x70>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	2000182c 	.word	0x2000182c
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ca6:	463a      	mov	r2, r7
 8005ca8:	1d39      	adds	r1, r7, #4
 8005caa:	f107 0308 	add.w	r3, r7, #8
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe ff6e 	bl	8004b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	9202      	str	r2, [sp, #8]
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	460a      	mov	r2, r1
 8005cc6:	492d      	ldr	r1, [pc, #180]	; (8005d7c <vTaskStartScheduler+0xe4>)
 8005cc8:	482d      	ldr	r0, [pc, #180]	; (8005d80 <vTaskStartScheduler+0xe8>)
 8005cca:	f7ff fdcd 	bl	8005868 <xTaskCreateStatic>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <vTaskStartScheduler+0xec>)
 8005cd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <vTaskStartScheduler+0xec>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e001      	b.n	8005ce6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d102      	bne.n	8005cf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005cec:	f000 fda6 	bl	800683c <xTimerCreateTimerTask>
 8005cf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d12b      	bne.n	8005d50 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	b672      	cpsid	i
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	b662      	cpsie	i
 8005d0c:	613b      	str	r3, [r7, #16]
}
 8005d0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d10:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <vTaskStartScheduler+0xf0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3354      	adds	r3, #84	; 0x54
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <vTaskStartScheduler+0xf4>)
 8005d18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <vTaskStartScheduler+0xf8>)
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <vTaskStartScheduler+0xfc>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <vTaskStartScheduler+0x100>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8005d2e:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <vTaskStartScheduler+0xf0>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <vTaskStartScheduler+0xec>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d102      	bne.n	8005d40 <vTaskStartScheduler+0xa8>
 8005d3a:	f002 ff7b 	bl	8008c34 <SEGGER_SYSVIEW_OnIdle>
 8005d3e:	e004      	b.n	8005d4a <vTaskStartScheduler+0xb2>
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <vTaskStartScheduler+0xf0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 ffd3 	bl	8008cf0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d4a:	f001 f961 	bl	8007010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d4e:	e010      	b.n	8005d72 <vTaskStartScheduler+0xda>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d56:	d10c      	bne.n	8005d72 <vTaskStartScheduler+0xda>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	b672      	cpsid	i
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	b662      	cpsie	i
 8005d6c:	60fb      	str	r3, [r7, #12]
}
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <vTaskStartScheduler+0xd8>
}
 8005d72:	bf00      	nop
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08009c44 	.word	0x08009c44
 8005d80:	0800643d 	.word	0x0800643d
 8005d84:	20001828 	.word	0x20001828
 8005d88:	20001330 	.word	0x20001330
 8005d8c:	20000010 	.word	0x20000010
 8005d90:	20001824 	.word	0x20001824
 8005d94:	20001810 	.word	0x20001810
 8005d98:	20001808 	.word	0x20001808

08005d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <vTaskSuspendAll+0x18>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a03      	ldr	r2, [pc, #12]	; (8005db4 <vTaskSuspendAll+0x18>)
 8005da8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005daa:	bf00      	nop
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	2000182c 	.word	0x2000182c

08005db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dc6:	4b45      	ldr	r3, [pc, #276]	; (8005edc <xTaskResumeAll+0x124>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <xTaskResumeAll+0x30>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	b672      	cpsid	i
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	b662      	cpsie	i
 8005de2:	603b      	str	r3, [r7, #0]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005de8:	f001 f990 	bl	800710c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dec:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <xTaskResumeAll+0x124>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	4a3a      	ldr	r2, [pc, #232]	; (8005edc <xTaskResumeAll+0x124>)
 8005df4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xTaskResumeAll+0x124>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d166      	bne.n	8005ecc <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <xTaskResumeAll+0x128>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d062      	beq.n	8005ecc <xTaskResumeAll+0x114>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e06:	e033      	b.n	8005e70 <xTaskResumeAll+0xb8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e08:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <xTaskResumeAll+0x12c>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3318      	adds	r3, #24
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe ff79 	bl	8004d0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe ff74 	bl	8004d0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f002 ffa4 	bl	8008d74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <xTaskResumeAll+0x130>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d903      	bls.n	8005e40 <xTaskResumeAll+0x88>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <xTaskResumeAll+0x130>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4a27      	ldr	r2, [pc, #156]	; (8005eec <xTaskResumeAll+0x134>)
 8005e4e:	441a      	add	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4619      	mov	r1, r3
 8005e56:	4610      	mov	r0, r2
 8005e58:	f7fe fefb 	bl	8004c52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <xTaskResumeAll+0x138>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <xTaskResumeAll+0xb8>
					{
						xYieldPending = pdTRUE;
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <xTaskResumeAll+0x13c>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e70:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <xTaskResumeAll+0x12c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1c7      	bne.n	8005e08 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <xTaskResumeAll+0xca>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e7e:	f000 fbd1 	bl	8006624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e82:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <xTaskResumeAll+0x140>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d010      	beq.n	8005eb0 <xTaskResumeAll+0xf8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e8e:	f000 f859 	bl	8005f44 <xTaskIncrementTick>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
 8005e98:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <xTaskResumeAll+0x13c>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f1      	bne.n	8005e8e <xTaskResumeAll+0xd6>

						uxPendedTicks = 0;
 8005eaa:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <xTaskResumeAll+0x140>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eb0:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <xTaskResumeAll+0x13c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <xTaskResumeAll+0x114>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <xTaskResumeAll+0x144>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ecc:	f001 f952 	bl	8007174 <vPortExitCritical>

	return xAlreadyYielded;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2000182c 	.word	0x2000182c
 8005ee0:	20001804 	.word	0x20001804
 8005ee4:	200017c4 	.word	0x200017c4
 8005ee8:	2000180c 	.word	0x2000180c
 8005eec:	20001334 	.word	0x20001334
 8005ef0:	20001330 	.word	0x20001330
 8005ef4:	20001818 	.word	0x20001818
 8005ef8:	20001814 	.word	0x20001814
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <xTaskGetTickCount+0x1c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f0c:	687b      	ldr	r3, [r7, #4]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20001808 	.word	0x20001808

08005f20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f26:	f001 f9d9 	bl	80072dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005f2e:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <xTaskGetTickCountFromISR+0x20>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f34:	683b      	ldr	r3, [r7, #0]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20001808 	.word	0x20001808

08005f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4e:	4b52      	ldr	r3, [pc, #328]	; (8006098 <xTaskIncrementTick+0x154>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 808f 	bne.w	8006076 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f58:	4b50      	ldr	r3, [pc, #320]	; (800609c <xTaskIncrementTick+0x158>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f60:	4a4e      	ldr	r2, [pc, #312]	; (800609c <xTaskIncrementTick+0x158>)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d122      	bne.n	8005fb2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f6c:	4b4c      	ldr	r3, [pc, #304]	; (80060a0 <xTaskIncrementTick+0x15c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	b672      	cpsid	i
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	b662      	cpsie	i
 8005f8a:	603b      	str	r3, [r7, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <xTaskIncrementTick+0x4a>
 8005f90:	4b43      	ldr	r3, [pc, #268]	; (80060a0 <xTaskIncrementTick+0x15c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	4b43      	ldr	r3, [pc, #268]	; (80060a4 <xTaskIncrementTick+0x160>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a41      	ldr	r2, [pc, #260]	; (80060a0 <xTaskIncrementTick+0x15c>)
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4a41      	ldr	r2, [pc, #260]	; (80060a4 <xTaskIncrementTick+0x160>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4b40      	ldr	r3, [pc, #256]	; (80060a8 <xTaskIncrementTick+0x164>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	4a3f      	ldr	r2, [pc, #252]	; (80060a8 <xTaskIncrementTick+0x164>)
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	f000 fb39 	bl	8006624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fb2:	4b3e      	ldr	r3, [pc, #248]	; (80060ac <xTaskIncrementTick+0x168>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d34d      	bcc.n	8006058 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fbc:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <xTaskIncrementTick+0x15c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <xTaskIncrementTick+0x168>)
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fcc:	601a      	str	r2, [r3, #0]
					break;
 8005fce:	e043      	b.n	8006058 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd0:	4b33      	ldr	r3, [pc, #204]	; (80060a0 <xTaskIncrementTick+0x15c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d203      	bcs.n	8005ff0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fe8:	4a30      	ldr	r2, [pc, #192]	; (80060ac <xTaskIncrementTick+0x168>)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fee:	e033      	b.n	8006058 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fe89 	bl	8004d0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	3318      	adds	r3, #24
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe fe80 	bl	8004d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f002 feb0 	bl	8008d74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <xTaskIncrementTick+0x16c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d903      	bls.n	8006028 <xTaskIncrementTick+0xe4>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <xTaskIncrementTick+0x16c>)
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a1f      	ldr	r2, [pc, #124]	; (80060b4 <xTaskIncrementTick+0x170>)
 8006036:	441a      	add	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3304      	adds	r3, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fe fe07 	bl	8004c52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <xTaskIncrementTick+0x174>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	429a      	cmp	r2, r3
 8006050:	d3b4      	bcc.n	8005fbc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006052:	2301      	movs	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006056:	e7b1      	b.n	8005fbc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006058:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <xTaskIncrementTick+0x174>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4915      	ldr	r1, [pc, #84]	; (80060b4 <xTaskIncrementTick+0x170>)
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d907      	bls.n	8006080 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	e004      	b.n	8006080 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <xTaskIncrementTick+0x178>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <xTaskIncrementTick+0x178>)
 800607e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <xTaskIncrementTick+0x17c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800608c:	697b      	ldr	r3, [r7, #20]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	2000182c 	.word	0x2000182c
 800609c:	20001808 	.word	0x20001808
 80060a0:	200017bc 	.word	0x200017bc
 80060a4:	200017c0 	.word	0x200017c0
 80060a8:	2000181c 	.word	0x2000181c
 80060ac:	20001824 	.word	0x20001824
 80060b0:	2000180c 	.word	0x2000180c
 80060b4:	20001334 	.word	0x20001334
 80060b8:	20001330 	.word	0x20001330
 80060bc:	20001814 	.word	0x20001814
 80060c0:	20001818 	.word	0x20001818

080060c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ca:	4b31      	ldr	r3, [pc, #196]	; (8006190 <vTaskSwitchContext+0xcc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060d2:	4b30      	ldr	r3, [pc, #192]	; (8006194 <vTaskSwitchContext+0xd0>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060d8:	e056      	b.n	8006188 <vTaskSwitchContext+0xc4>
		xYieldPending = pdFALSE;
 80060da:	4b2e      	ldr	r3, [pc, #184]	; (8006194 <vTaskSwitchContext+0xd0>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <vTaskSwitchContext+0xd4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e012      	b.n	800610e <vTaskSwitchContext+0x4a>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10c      	bne.n	8006108 <vTaskSwitchContext+0x44>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	b672      	cpsid	i
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	b662      	cpsie	i
 8006102:	607b      	str	r3, [r7, #4]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vTaskSwitchContext+0x42>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3b01      	subs	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	4923      	ldr	r1, [pc, #140]	; (800619c <vTaskSwitchContext+0xd8>)
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0e2      	beq.n	80060e8 <vTaskSwitchContext+0x24>
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <vTaskSwitchContext+0xd8>)
 800612e:	4413      	add	r3, r2
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	605a      	str	r2, [r3, #4]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3308      	adds	r3, #8
 8006144:	429a      	cmp	r2, r3
 8006146:	d104      	bne.n	8006152 <vTaskSwitchContext+0x8e>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a11      	ldr	r2, [pc, #68]	; (80061a0 <vTaskSwitchContext+0xdc>)
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4a0e      	ldr	r2, [pc, #56]	; (8006198 <vTaskSwitchContext+0xd4>)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8006162:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <vTaskSwitchContext+0xdc>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <vTaskSwitchContext+0xe0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d102      	bne.n	8006174 <vTaskSwitchContext+0xb0>
 800616e:	f002 fd61 	bl	8008c34 <SEGGER_SYSVIEW_OnIdle>
 8006172:	e004      	b.n	800617e <vTaskSwitchContext+0xba>
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <vTaskSwitchContext+0xdc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f002 fdb9 	bl	8008cf0 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800617e:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <vTaskSwitchContext+0xdc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3354      	adds	r3, #84	; 0x54
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <vTaskSwitchContext+0xe4>)
 8006186:	6013      	str	r3, [r2, #0]
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	2000182c 	.word	0x2000182c
 8006194:	20001818 	.word	0x20001818
 8006198:	2000180c 	.word	0x2000180c
 800619c:	20001334 	.word	0x20001334
 80061a0:	20001330 	.word	0x20001330
 80061a4:	20001828 	.word	0x20001828
 80061a8:	20000010 	.word	0x20000010

080061ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	60fb      	str	r3, [r7, #12]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <vTaskPlaceOnEventList+0x48>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3318      	adds	r3, #24
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fe fd5b 	bl	8004c9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061e4:	2101      	movs	r1, #1
 80061e6:	6838      	ldr	r0, [r7, #0]
 80061e8:	f000 fad4 	bl	8006794 <prvAddCurrentTaskToDelayedList>
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20001330 	.word	0x20001330

080061f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	b672      	cpsid	i
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	b662      	cpsie	i
 800621e:	617b      	str	r3, [r7, #20]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <vTaskPlaceOnEventListRestricted+0x5c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3318      	adds	r3, #24
 800622a:	4619      	mov	r1, r3
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7fe fd10 	bl	8004c52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800623c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800623e:	2024      	movs	r0, #36	; 0x24
 8006240:	f002 f874 	bl	800832c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	68b8      	ldr	r0, [r7, #8]
 8006248:	f000 faa4 	bl	8006794 <prvAddCurrentTaskToDelayedList>
	}
 800624c:	bf00      	nop
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20001330 	.word	0x20001330

08006258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10c      	bne.n	8006288 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	b672      	cpsid	i
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	b662      	cpsie	i
 8006282:	60fb      	str	r3, [r7, #12]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	3318      	adds	r3, #24
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe fd3d 	bl	8004d0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <xTaskRemoveFromEventList+0xbc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d121      	bne.n	80062de <xTaskRemoveFromEventList+0x86>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fd34 	bl	8004d0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f002 fd64 	bl	8008d74 <SEGGER_SYSVIEW_OnTaskStartReady>
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <xTaskRemoveFromEventList+0xc0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d903      	bls.n	80062c0 <xTaskRemoveFromEventList+0x68>
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <xTaskRemoveFromEventList+0xc0>)
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <xTaskRemoveFromEventList+0xc4>)
 80062ce:	441a      	add	r2, r3
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f7fe fcbb 	bl	8004c52 <vListInsertEnd>
 80062dc:	e005      	b.n	80062ea <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3318      	adds	r3, #24
 80062e2:	4619      	mov	r1, r3
 80062e4:	480e      	ldr	r0, [pc, #56]	; (8006320 <xTaskRemoveFromEventList+0xc8>)
 80062e6:	f7fe fcb4 	bl	8004c52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <xTaskRemoveFromEventList+0xcc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d905      	bls.n	8006304 <xTaskRemoveFromEventList+0xac>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <xTaskRemoveFromEventList+0xd0>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e001      	b.n	8006308 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		xReturn = pdFALSE;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006308:	697b      	ldr	r3, [r7, #20]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	2000182c 	.word	0x2000182c
 8006318:	2000180c 	.word	0x2000180c
 800631c:	20001334 	.word	0x20001334
 8006320:	200017c4 	.word	0x200017c4
 8006324:	20001330 	.word	0x20001330
 8006328:	20001818 	.word	0x20001818

0800632c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <vTaskInternalSetTimeOutState+0x24>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <vTaskInternalSetTimeOutState+0x28>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	605a      	str	r2, [r3, #4]
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	2000181c 	.word	0x2000181c
 8006354:	20001808 	.word	0x20001808

08006358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	613b      	str	r3, [r7, #16]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10c      	bne.n	80063a2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	b672      	cpsid	i
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	b662      	cpsie	i
 800639c:	60fb      	str	r3, [r7, #12]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80063a2:	f000 feb3 	bl	800710c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <xTaskCheckForTimeOut+0xc4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063be:	d102      	bne.n	80063c6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e023      	b.n	800640e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b15      	ldr	r3, [pc, #84]	; (8006420 <xTaskCheckForTimeOut+0xc8>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d007      	beq.n	80063e2 <xTaskCheckForTimeOut+0x8a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063dc:	2301      	movs	r3, #1
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	e015      	b.n	800640e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d20b      	bcs.n	8006404 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	1ad2      	subs	r2, r2, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ff97 	bl	800632c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	e004      	b.n	800640e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800640a:	2301      	movs	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800640e:	f000 feb1 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8006412:	69fb      	ldr	r3, [r7, #28]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20001808 	.word	0x20001808
 8006420:	2000181c 	.word	0x2000181c

08006424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006428:	4b03      	ldr	r3, [pc, #12]	; (8006438 <vTaskMissedYield+0x14>)
 800642a:	2201      	movs	r2, #1
 800642c:	601a      	str	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20001818 	.word	0x20001818

0800643c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006444:	f000 f852 	bl	80064ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <prvIdleTask+0x28>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d9f9      	bls.n	8006444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <prvIdleTask+0x2c>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006460:	e7f0      	b.n	8006444 <prvIdleTask+0x8>
 8006462:	bf00      	nop
 8006464:	20001334 	.word	0x20001334
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]
 8006476:	e00c      	b.n	8006492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4a12      	ldr	r2, [pc, #72]	; (80064cc <prvInitialiseTaskLists+0x60>)
 8006484:	4413      	add	r3, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fbb6 	bl	8004bf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3301      	adds	r3, #1
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b37      	cmp	r3, #55	; 0x37
 8006496:	d9ef      	bls.n	8006478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006498:	480d      	ldr	r0, [pc, #52]	; (80064d0 <prvInitialiseTaskLists+0x64>)
 800649a:	f7fe fbad 	bl	8004bf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800649e:	480d      	ldr	r0, [pc, #52]	; (80064d4 <prvInitialiseTaskLists+0x68>)
 80064a0:	f7fe fbaa 	bl	8004bf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064a4:	480c      	ldr	r0, [pc, #48]	; (80064d8 <prvInitialiseTaskLists+0x6c>)
 80064a6:	f7fe fba7 	bl	8004bf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064aa:	480c      	ldr	r0, [pc, #48]	; (80064dc <prvInitialiseTaskLists+0x70>)
 80064ac:	f7fe fba4 	bl	8004bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064b0:	480b      	ldr	r0, [pc, #44]	; (80064e0 <prvInitialiseTaskLists+0x74>)
 80064b2:	f7fe fba1 	bl	8004bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <prvInitialiseTaskLists+0x78>)
 80064b8:	4a05      	ldr	r2, [pc, #20]	; (80064d0 <prvInitialiseTaskLists+0x64>)
 80064ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <prvInitialiseTaskLists+0x7c>)
 80064be:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <prvInitialiseTaskLists+0x68>)
 80064c0:	601a      	str	r2, [r3, #0]
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20001334 	.word	0x20001334
 80064d0:	20001794 	.word	0x20001794
 80064d4:	200017a8 	.word	0x200017a8
 80064d8:	200017c4 	.word	0x200017c4
 80064dc:	200017d8 	.word	0x200017d8
 80064e0:	200017f0 	.word	0x200017f0
 80064e4:	200017bc 	.word	0x200017bc
 80064e8:	200017c0 	.word	0x200017c0

080064ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064f2:	e019      	b.n	8006528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064f4:	f000 fe0a 	bl	800710c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <prvCheckTasksWaitingTermination+0x50>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe fc01 	bl	8004d0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800650a:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <prvCheckTasksWaitingTermination+0x54>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3b01      	subs	r3, #1
 8006510:	4a0b      	ldr	r2, [pc, #44]	; (8006540 <prvCheckTasksWaitingTermination+0x54>)
 8006512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <prvCheckTasksWaitingTermination+0x58>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3b01      	subs	r3, #1
 800651a:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <prvCheckTasksWaitingTermination+0x58>)
 800651c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800651e:	f000 fe29 	bl	8007174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f848 	bl	80065b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006528:	4b06      	ldr	r3, [pc, #24]	; (8006544 <prvCheckTasksWaitingTermination+0x58>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e1      	bne.n	80064f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200017d8 	.word	0x200017d8
 8006540:	20001804 	.word	0x20001804
 8006544:	200017ec 	.word	0x200017ec

08006548 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006554:	e005      	b.n	8006562 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3301      	adds	r3, #1
 800655a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2ba5      	cmp	r3, #165	; 0xa5
 8006568:	d0f5      	beq.n	8006556 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	089b      	lsrs	r3, r3, #2
 800656e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	b29b      	uxth	r3, r3
	}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <uxTaskGetStackHighWaterMark+0x14>
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <uxTaskGetStackHighWaterMark+0x34>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	e000      	b.n	8006596 <uxTaskGetStackHighWaterMark+0x16>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800659e:	6938      	ldr	r0, [r7, #16]
 80065a0:	f7ff ffd2 	bl	8006548 <prvTaskCheckFreeStackSpace>
 80065a4:	4603      	mov	r3, r0
 80065a6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80065a8:	68fb      	ldr	r3, [r7, #12]
	}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20001330 	.word	0x20001330

080065b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3354      	adds	r3, #84	; 0x54
 80065c4:	4618      	mov	r0, r3
 80065c6:	f002 ffc1 	bl	800954c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 ff8d 	bl	80074f8 <vPortFree>
				vPortFree( pxTCB );
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 ff8a 	bl	80074f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065e4:	e01a      	b.n	800661c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d103      	bne.n	80065f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 ff81 	bl	80074f8 <vPortFree>
	}
 80065f6:	e011      	b.n	800661c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d00c      	beq.n	800661c <prvDeleteTCB+0x64>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	b672      	cpsid	i
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	b662      	cpsie	i
 8006616:	60fb      	str	r3, [r7, #12]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <prvDeleteTCB+0x62>
	}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662a:	4b0c      	ldr	r3, [pc, #48]	; (800665c <prvResetNextTaskUnblockTime+0x38>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <prvResetNextTaskUnblockTime+0x3c>)
 8006636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800663a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800663c:	e008      	b.n	8006650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <prvResetNextTaskUnblockTime+0x38>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <prvResetNextTaskUnblockTime+0x3c>)
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	200017bc 	.word	0x200017bc
 8006660:	20001824 	.word	0x20001824

08006664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <xTaskGetSchedulerState+0x34>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006672:	2301      	movs	r3, #1
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	e008      	b.n	800668a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <xTaskGetSchedulerState+0x38>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006680:	2302      	movs	r3, #2
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	e001      	b.n	800668a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006686:	2300      	movs	r3, #0
 8006688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800668a:	687b      	ldr	r3, [r7, #4]
	}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20001810 	.word	0x20001810
 800669c:	2000182c 	.word	0x2000182c

080066a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d063      	beq.n	800677e <xTaskPriorityDisinherit+0xde>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066b6:	4b34      	ldr	r3, [pc, #208]	; (8006788 <xTaskPriorityDisinherit+0xe8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d00c      	beq.n	80066da <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	b672      	cpsid	i
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	b662      	cpsie	i
 80066d4:	60fb      	str	r3, [r7, #12]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10c      	bne.n	80066fc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	b672      	cpsid	i
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	b662      	cpsie	i
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006700:	1e5a      	subs	r2, r3, #1
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670e:	429a      	cmp	r2, r3
 8006710:	d035      	beq.n	800677e <xTaskPriorityDisinherit+0xde>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006716:	2b00      	cmp	r3, #0
 8006718:	d131      	bne.n	800677e <xTaskPriorityDisinherit+0xde>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3304      	adds	r3, #4
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe faf4 	bl	8004d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4619      	mov	r1, r3
 8006728:	204a      	movs	r0, #74	; 0x4a
 800672a:	f001 fe1d 	bl	8008368 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4618      	mov	r0, r3
 8006746:	f002 fb15 	bl	8008d74 <SEGGER_SYSVIEW_OnTaskStartReady>
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <xTaskPriorityDisinherit+0xec>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d903      	bls.n	800675e <xTaskPriorityDisinherit+0xbe>
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	4a0c      	ldr	r2, [pc, #48]	; (800678c <xTaskPriorityDisinherit+0xec>)
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4a09      	ldr	r2, [pc, #36]	; (8006790 <xTaskPriorityDisinherit+0xf0>)
 800676c:	441a      	add	r2, r3
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f7fe fa6c 	bl	8004c52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800677a:	2301      	movs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800677e:	697b      	ldr	r3, [r7, #20]
	}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20001330 	.word	0x20001330
 800678c:	2000180c 	.word	0x2000180c
 8006790:	20001334 	.word	0x20001334

08006794 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800679e:	4b21      	ldr	r3, [pc, #132]	; (8006824 <prvAddCurrentTaskToDelayedList+0x90>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067a4:	4b20      	ldr	r3, [pc, #128]	; (8006828 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe faae 	bl	8004d0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b6:	d10a      	bne.n	80067ce <prvAddCurrentTaskToDelayedList+0x3a>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067be:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4819      	ldr	r0, [pc, #100]	; (800682c <prvAddCurrentTaskToDelayedList+0x98>)
 80067c8:	f7fe fa43 	bl	8004c52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067cc:	e026      	b.n	800681c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d209      	bcs.n	80067fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7fe fa51 	bl	8004c9a <vListInsert>
}
 80067f8:	e010      	b.n	800681c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067fa:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <prvAddCurrentTaskToDelayedList+0x94>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe fa47 	bl	8004c9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	429a      	cmp	r2, r3
 8006814:	d202      	bcs.n	800681c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6013      	str	r3, [r2, #0]
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20001808 	.word	0x20001808
 8006828:	20001330 	.word	0x20001330
 800682c:	200017f0 	.word	0x200017f0
 8006830:	200017c0 	.word	0x200017c0
 8006834:	200017bc 	.word	0x200017bc
 8006838:	20001824 	.word	0x20001824

0800683c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	; 0x28
 8006840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006846:	f000 fb15 	bl	8006e74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800684a:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <xTimerCreateTimerTask+0x84>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d021      	beq.n	8006896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800685a:	1d3a      	adds	r2, r7, #4
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe f9ad 	bl	8004bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	9202      	str	r2, [sp, #8]
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	2302      	movs	r3, #2
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	2300      	movs	r3, #0
 800687a:	460a      	mov	r2, r1
 800687c:	4911      	ldr	r1, [pc, #68]	; (80068c4 <xTimerCreateTimerTask+0x88>)
 800687e:	4812      	ldr	r0, [pc, #72]	; (80068c8 <xTimerCreateTimerTask+0x8c>)
 8006880:	f7fe fff2 	bl	8005868 <xTaskCreateStatic>
 8006884:	4603      	mov	r3, r0
 8006886:	4a11      	ldr	r2, [pc, #68]	; (80068cc <xTimerCreateTimerTask+0x90>)
 8006888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800688a:	4b10      	ldr	r3, [pc, #64]	; (80068cc <xTimerCreateTimerTask+0x90>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006892:	2301      	movs	r3, #1
 8006894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10c      	bne.n	80068b6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	b672      	cpsid	i
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	b662      	cpsie	i
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80068b6:	697b      	ldr	r3, [r7, #20]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20001860 	.word	0x20001860
 80068c4:	08009c4c 	.word	0x08009c4c
 80068c8:	08006a0d 	.word	0x08006a0d
 80068cc:	20001864 	.word	0x20001864

080068d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068de:	2300      	movs	r3, #0
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10c      	bne.n	8006902 <xTimerGenericCommand+0x32>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	b672      	cpsid	i
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	b662      	cpsie	i
 80068fc:	623b      	str	r3, [r7, #32]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <xTimerGenericCommand+0x9c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d02a      	beq.n	8006960 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b05      	cmp	r3, #5
 800691a:	dc18      	bgt.n	800694e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800691c:	f7ff fea2 	bl	8006664 <xTaskGetSchedulerState>
 8006920:	4603      	mov	r3, r0
 8006922:	2b02      	cmp	r3, #2
 8006924:	d109      	bne.n	800693a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <xTimerGenericCommand+0x9c>)
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	f107 0110 	add.w	r1, r7, #16
 800692e:	2300      	movs	r3, #0
 8006930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006932:	f7fe fb2b 	bl	8004f8c <xQueueGenericSend>
 8006936:	6278      	str	r0, [r7, #36]	; 0x24
 8006938:	e012      	b.n	8006960 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <xTimerGenericCommand+0x9c>)
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f107 0110 	add.w	r1, r7, #16
 8006942:	2300      	movs	r3, #0
 8006944:	2200      	movs	r2, #0
 8006946:	f7fe fb21 	bl	8004f8c <xQueueGenericSend>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24
 800694c:	e008      	b.n	8006960 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800694e:	4b07      	ldr	r3, [pc, #28]	; (800696c <xTimerGenericCommand+0x9c>)
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f107 0110 	add.w	r1, r7, #16
 8006956:	2300      	movs	r3, #0
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	f7fe fc45 	bl	80051e8 <xQueueGenericSendFromISR>
 800695e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006962:	4618      	mov	r0, r3
 8006964:	3728      	adds	r7, #40	; 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20001860 	.word	0x20001860

08006970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800697a:	4b23      	ldr	r3, [pc, #140]	; (8006a08 <prvProcessExpiredTimer+0x98>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3304      	adds	r3, #4
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe f9bf 	bl	8004d0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d024      	beq.n	80069e6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	18d1      	adds	r1, r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	6978      	ldr	r0, [r7, #20]
 80069aa:	f000 f8d3 	bl	8006b54 <prvInsertTimerInActiveList>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d021      	beq.n	80069f8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069b4:	2300      	movs	r3, #0
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	2300      	movs	r3, #0
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	2100      	movs	r1, #0
 80069be:	6978      	ldr	r0, [r7, #20]
 80069c0:	f7ff ff86 	bl	80068d0 <xTimerGenericCommand>
 80069c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d115      	bne.n	80069f8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	b672      	cpsid	i
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	b662      	cpsie	i
 80069e0:	60fb      	str	r3, [r7, #12]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	6978      	ldr	r0, [r7, #20]
 80069fe:	4798      	blx	r3
}
 8006a00:	bf00      	nop
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20001858 	.word	0x20001858

08006a0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a14:	f107 0308 	add.w	r3, r7, #8
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f857 	bl	8006acc <prvGetNextExpireTime>
 8006a1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4619      	mov	r1, r3
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f803 	bl	8006a30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a2a:	f000 f8d5 	bl	8006bd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a2e:	e7f1      	b.n	8006a14 <prvTimerTask+0x8>

08006a30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a3a:	f7ff f9af 	bl	8005d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a3e:	f107 0308 	add.w	r3, r7, #8
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f866 	bl	8006b14 <prvSampleTimeNow>
 8006a48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d130      	bne.n	8006ab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <prvProcessTimerOrBlockTask+0x3c>
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d806      	bhi.n	8006a6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a5e:	f7ff f9ab 	bl	8005db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a62:	68f9      	ldr	r1, [r7, #12]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ff83 	bl	8006970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a6a:	e024      	b.n	8006ab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a72:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <prvProcessTimerOrBlockTask+0x90>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <prvProcessTimerOrBlockTask+0x50>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <prvProcessTimerOrBlockTask+0x52>
 8006a80:	2300      	movs	r3, #0
 8006a82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a84:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <prvProcessTimerOrBlockTask+0x94>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	4619      	mov	r1, r3
 8006a92:	f7fe feb5 	bl	8005800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a96:	f7ff f98f 	bl	8005db8 <xTaskResumeAll>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <prvProcessTimerOrBlockTask+0x98>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
}
 8006ab0:	e001      	b.n	8006ab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ab2:	f7ff f981 	bl	8005db8 <xTaskResumeAll>
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	2000185c 	.word	0x2000185c
 8006ac4:	20001860 	.word	0x20001860
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <prvGetNextExpireTime+0x44>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <prvGetNextExpireTime+0x16>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	e000      	b.n	8006ae4 <prvGetNextExpireTime+0x18>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <prvGetNextExpireTime+0x44>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	e001      	b.n	8006b00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b00:	68fb      	ldr	r3, [r7, #12]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20001858 	.word	0x20001858

08006b14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b1c:	f7ff f9f0 	bl	8005f00 <xTaskGetTickCount>
 8006b20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <prvSampleTimeNow+0x3c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d205      	bcs.n	8006b38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b2c:	f000 f93c 	bl	8006da8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e002      	b.n	8006b3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b3e:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <prvSampleTimeNow+0x3c>)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b44:	68fb      	ldr	r3, [r7, #12]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20001868 	.word	0x20001868

08006b54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d812      	bhi.n	8006ba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d302      	bcc.n	8006b8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e01b      	b.n	8006bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b8e:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <prvInsertTimerInActiveList+0x7c>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7fe f87e 	bl	8004c9a <vListInsert>
 8006b9e:	e012      	b.n	8006bc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d206      	bcs.n	8006bb6 <prvInsertTimerInActiveList+0x62>
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d302      	bcc.n	8006bb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e007      	b.n	8006bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bb6:	4b07      	ldr	r3, [pc, #28]	; (8006bd4 <prvInsertTimerInActiveList+0x80>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7fe f86a 	bl	8004c9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bc6:	697b      	ldr	r3, [r7, #20]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	2000185c 	.word	0x2000185c
 8006bd4:	20001858 	.word	0x20001858

08006bd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08e      	sub	sp, #56	; 0x38
 8006bdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bde:	e0d0      	b.n	8006d82 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da1a      	bge.n	8006c1c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006be6:	1d3b      	adds	r3, r7, #4
 8006be8:	3304      	adds	r3, #4
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10c      	bne.n	8006c0c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c12:	6850      	ldr	r0, [r2, #4]
 8006c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f2c0 80ae 	blt.w	8006d80 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	3304      	adds	r3, #4
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe f869 	bl	8004d0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c3a:	463b      	mov	r3, r7
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff69 	bl	8006b14 <prvSampleTimeNow>
 8006c42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b09      	cmp	r3, #9
 8006c48:	f200 809b 	bhi.w	8006d82 <prvProcessReceivedCommands+0x1aa>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <prvProcessReceivedCommands+0x7c>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c7d 	.word	0x08006c7d
 8006c60:	08006cf5 	.word	0x08006cf5
 8006c64:	08006d09 	.word	0x08006d09
 8006c68:	08006d57 	.word	0x08006d57
 8006c6c:	08006c7d 	.word	0x08006c7d
 8006c70:	08006c7d 	.word	0x08006c7d
 8006c74:	08006cf5 	.word	0x08006cf5
 8006c78:	08006d09 	.word	0x08006d09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	18d1      	adds	r1, r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9c:	f7ff ff5a 	bl	8006b54 <prvInsertTimerInActiveList>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d06d      	beq.n	8006d82 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d062      	beq.n	8006d82 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	441a      	add	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cce:	f7ff fdff 	bl	80068d0 <xTimerGenericCommand>
 8006cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d153      	bne.n	8006d82 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	b672      	cpsid	i
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	b662      	cpsie	i
 8006cee:	61bb      	str	r3, [r7, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d06:	e03c      	b.n	8006d82 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10c      	bne.n	8006d42 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	b672      	cpsid	i
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	b662      	cpsie	i
 8006d3c:	617b      	str	r3, [r7, #20]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	18d1      	adds	r1, r2, r3
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d50:	f7ff ff00 	bl	8006b54 <prvInsertTimerInActiveList>
					break;
 8006d54:	e015      	b.n	8006d82 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d66:	f000 fbc7 	bl	80074f8 <vPortFree>
 8006d6a:	e00a      	b.n	8006d82 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d7e:	e000      	b.n	8006d82 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d82:	4b08      	ldr	r3, [pc, #32]	; (8006da4 <prvProcessReceivedCommands+0x1cc>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1d39      	adds	r1, r7, #4
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fae0 	bl	8005350 <xQueueReceive>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f47f af24 	bne.w	8006be0 <prvProcessReceivedCommands+0x8>
	}
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	3730      	adds	r7, #48	; 0x30
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20001860 	.word	0x20001860

08006da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dae:	e04a      	b.n	8006e46 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db0:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dba:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd ff9f 	bl	8004d0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d030      	beq.n	8006e46 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d90e      	bls.n	8006e14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e02:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f7fd ff44 	bl	8004c9a <vListInsert>
 8006e12:	e018      	b.n	8006e46 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fd56 	bl	80068d0 <xTimerGenericCommand>
 8006e24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10c      	bne.n	8006e46 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	b672      	cpsid	i
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	b662      	cpsie	i
 8006e40:	603b      	str	r3, [r7, #0]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e46:	4b09      	ldr	r3, [pc, #36]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1af      	bne.n	8006db0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e56:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <prvSwitchTimerLists+0xc8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a04      	ldr	r2, [pc, #16]	; (8006e6c <prvSwitchTimerLists+0xc4>)
 8006e5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e5e:	4a04      	ldr	r2, [pc, #16]	; (8006e70 <prvSwitchTimerLists+0xc8>)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6013      	str	r3, [r2, #0]
}
 8006e64:	bf00      	nop
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20001858 	.word	0x20001858
 8006e70:	2000185c 	.word	0x2000185c

08006e74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e7a:	f000 f947 	bl	800710c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e7e:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <prvCheckForValidListAndQueue+0x60>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d120      	bne.n	8006ec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e86:	4814      	ldr	r0, [pc, #80]	; (8006ed8 <prvCheckForValidListAndQueue+0x64>)
 8006e88:	f7fd feb6 	bl	8004bf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e8c:	4813      	ldr	r0, [pc, #76]	; (8006edc <prvCheckForValidListAndQueue+0x68>)
 8006e8e:	f7fd feb3 	bl	8004bf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <prvCheckForValidListAndQueue+0x6c>)
 8006e94:	4a10      	ldr	r2, [pc, #64]	; (8006ed8 <prvCheckForValidListAndQueue+0x64>)
 8006e96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e98:	4b12      	ldr	r3, [pc, #72]	; (8006ee4 <prvCheckForValidListAndQueue+0x70>)
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <prvCheckForValidListAndQueue+0x68>)
 8006e9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	4b11      	ldr	r3, [pc, #68]	; (8006ee8 <prvCheckForValidListAndQueue+0x74>)
 8006ea4:	4a11      	ldr	r2, [pc, #68]	; (8006eec <prvCheckForValidListAndQueue+0x78>)
 8006ea6:	2110      	movs	r1, #16
 8006ea8:	200a      	movs	r0, #10
 8006eaa:	f7fd ffc3 	bl	8004e34 <xQueueGenericCreateStatic>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <prvCheckForValidListAndQueue+0x60>)
 8006eb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <prvCheckForValidListAndQueue+0x60>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <prvCheckForValidListAndQueue+0x60>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <prvCheckForValidListAndQueue+0x7c>)
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fc6a 	bl	800579c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ec8:	f000 f954 	bl	8007174 <vPortExitCritical>
}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20001860 	.word	0x20001860
 8006ed8:	20001830 	.word	0x20001830
 8006edc:	20001844 	.word	0x20001844
 8006ee0:	20001858 	.word	0x20001858
 8006ee4:	2000185c 	.word	0x2000185c
 8006ee8:	2000190c 	.word	0x2000190c
 8006eec:	2000186c 	.word	0x2000186c
 8006ef0:	08009c54 	.word	0x08009c54

08006ef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3b04      	subs	r3, #4
 8006f04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b04      	subs	r3, #4
 8006f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b04      	subs	r3, #4
 8006f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f24:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <pxPortInitialiseStack+0x64>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b14      	subs	r3, #20
 8006f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f06f 0202 	mvn.w	r2, #2
 8006f42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3b20      	subs	r3, #32
 8006f48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	08006f5d 	.word	0x08006f5d

08006f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <prvTaskExitError+0x5c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d00c      	beq.n	8006f8a <prvTaskExitError+0x2e>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	b672      	cpsid	i
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	b662      	cpsie	i
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <prvTaskExitError+0x2c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	b672      	cpsid	i
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	b662      	cpsie	i
 8006f9e:	60bb      	str	r3, [r7, #8]
}
 8006fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fa2:	bf00      	nop
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0fc      	beq.n	8006fa4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	2000000c 	.word	0x2000000c
 8006fbc:	00000000 	.word	0x00000000

08006fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <pxCurrentTCBConst2>)
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	f380 8809 	msr	PSP, r0
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	4770      	bx	lr
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst2>:
 8006fe0:	20001330 	.word	0x20001330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fe8:	4808      	ldr	r0, [pc, #32]	; (800700c <prvPortStartFirstTask+0x24>)
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f380 8808 	msr	MSP, r0
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8814 	msr	CONTROL, r0
 8006ffa:	b662      	cpsie	i
 8006ffc:	b661      	cpsie	f
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	df00      	svc	0
 8007008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800700a:	bf00      	nop
 800700c:	e000ed08 	.word	0xe000ed08

08007010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007016:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <xPortStartScheduler+0xe4>)
 8007018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <xPortStartScheduler+0xe8>)
 800703c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <xPortStartScheduler+0xec>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007044:	e009      	b.n	800705a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007046:	4b2d      	ldr	r3, [pc, #180]	; (80070fc <xPortStartScheduler+0xec>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a2b      	ldr	r2, [pc, #172]	; (80070fc <xPortStartScheduler+0xec>)
 800704e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d0ef      	beq.n	8007046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007066:	4b25      	ldr	r3, [pc, #148]	; (80070fc <xPortStartScheduler+0xec>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00c      	beq.n	800708c <xPortStartScheduler+0x7c>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	b672      	cpsid	i
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	b662      	cpsie	i
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <xPortStartScheduler+0xec>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <xPortStartScheduler+0xec>)
 8007094:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007096:	4b19      	ldr	r3, [pc, #100]	; (80070fc <xPortStartScheduler+0xec>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709e:	4a17      	ldr	r2, [pc, #92]	; (80070fc <xPortStartScheduler+0xec>)
 80070a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070aa:	4b15      	ldr	r3, [pc, #84]	; (8007100 <xPortStartScheduler+0xf0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a14      	ldr	r2, [pc, #80]	; (8007100 <xPortStartScheduler+0xf0>)
 80070b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <xPortStartScheduler+0xf0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a11      	ldr	r2, [pc, #68]	; (8007100 <xPortStartScheduler+0xf0>)
 80070bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070c2:	f000 f8dd 	bl	8007280 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <xPortStartScheduler+0xf4>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070cc:	f000 f8fc 	bl	80072c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070d0:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <xPortStartScheduler+0xf8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a0c      	ldr	r2, [pc, #48]	; (8007108 <xPortStartScheduler+0xf8>)
 80070d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070dc:	f7ff ff84 	bl	8006fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070e0:	f7fe fff0 	bl	80060c4 <vTaskSwitchContext>
	prvTaskExitError();
 80070e4:	f7ff ff3a 	bl	8006f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	e000e400 	.word	0xe000e400
 80070f8:	2000195c 	.word	0x2000195c
 80070fc:	20001960 	.word	0x20001960
 8007100:	e000ed20 	.word	0xe000ed20
 8007104:	2000000c 	.word	0x2000000c
 8007108:	e000ef34 	.word	0xe000ef34

0800710c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	b672      	cpsid	i
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	b662      	cpsie	i
 8007126:	607b      	str	r3, [r7, #4]
}
 8007128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <vPortEnterCritical+0x60>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3301      	adds	r3, #1
 8007130:	4a0e      	ldr	r2, [pc, #56]	; (800716c <vPortEnterCritical+0x60>)
 8007132:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007134:	4b0d      	ldr	r3, [pc, #52]	; (800716c <vPortEnterCritical+0x60>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d111      	bne.n	8007160 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800713c:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <vPortEnterCritical+0x64>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <vPortEnterCritical+0x54>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	b672      	cpsid	i
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	b662      	cpsie	i
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortEnterCritical+0x52>
	}
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	2000000c 	.word	0x2000000c
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <vPortExitCritical+0x54>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <vPortExitCritical+0x28>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	b672      	cpsid	i
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	b662      	cpsie	i
 8007196:	607b      	str	r3, [r7, #4]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <vPortExitCritical+0x54>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <vPortExitCritical+0x54>)
 80071a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071a6:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <vPortExitCritical+0x54>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d105      	bne.n	80071ba <vPortExitCritical+0x46>
 80071ae:	2300      	movs	r3, #0
 80071b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	f383 8811 	msr	BASEPRI, r3
}
 80071b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	00000000 	.word	0x00000000

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071f4:	b672      	cpsid	i
 80071f6:	f380 8811 	msr	BASEPRI, r0
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	b662      	cpsie	i
 8007204:	f7fe ff5e 	bl	80060c4 <vTaskSwitchContext>
 8007208:	f04f 0000 	mov.w	r0, #0
 800720c:	f380 8811 	msr	BASEPRI, r0
 8007210:	bc09      	pop	{r0, r3}
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	6808      	ldr	r0, [r1, #0]
 8007216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f01e 0f10 	tst.w	lr, #16
 800721e:	bf08      	it	eq
 8007220:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007224:	f380 8809 	msr	PSP, r0
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <pxCurrentTCBConst>:
 8007230:	20001330 	.word	0x20001330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	b672      	cpsid	i
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	b662      	cpsie	i
 8007252:	607b      	str	r3, [r7, #4]
}
 8007254:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007256:	f7fe fe75 	bl	8005f44 <xTaskIncrementTick>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <SysTick_Handler+0x44>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	f383 8811 	msr	BASEPRI, r3
}
 8007272:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	e000ed04 	.word	0xe000ed04

08007280 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007284:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vPortSetupTimerInterrupt+0x34>)
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <vPortSetupTimerInterrupt+0x38>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <vPortSetupTimerInterrupt+0x3c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <vPortSetupTimerInterrupt+0x40>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	099b      	lsrs	r3, r3, #6
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <vPortSetupTimerInterrupt+0x44>)
 800729e:	3b01      	subs	r3, #1
 80072a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072a2:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <vPortSetupTimerInterrupt+0x34>)
 80072a4:	2207      	movs	r2, #7
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	e000e010 	.word	0xe000e010
 80072b8:	e000e018 	.word	0xe000e018
 80072bc:	20000000 	.word	0x20000000
 80072c0:	10624dd3 	.word	0x10624dd3
 80072c4:	e000e014 	.word	0xe000e014

080072c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072d8 <vPortEnableVFP+0x10>
 80072cc:	6801      	ldr	r1, [r0, #0]
 80072ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072d2:	6001      	str	r1, [r0, #0]
 80072d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d6:	bf00      	nop
 80072d8:	e000ed88 	.word	0xe000ed88

080072dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072e2:	f3ef 8305 	mrs	r3, IPSR
 80072e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d916      	bls.n	800731c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ee:	4a19      	ldr	r2, [pc, #100]	; (8007354 <vPortValidateInterruptPriority+0x78>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f8:	4b17      	ldr	r3, [pc, #92]	; (8007358 <vPortValidateInterruptPriority+0x7c>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	7afa      	ldrb	r2, [r7, #11]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d20c      	bcs.n	800731c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	b672      	cpsid	i
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	b662      	cpsie	i
 8007316:	607b      	str	r3, [r7, #4]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800731c:	4b0f      	ldr	r3, [pc, #60]	; (800735c <vPortValidateInterruptPriority+0x80>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <vPortValidateInterruptPriority+0x84>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d90c      	bls.n	8007346 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	b672      	cpsid	i
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	b662      	cpsie	i
 8007340:	603b      	str	r3, [r7, #0]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <vPortValidateInterruptPriority+0x68>
	}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	e000e3f0 	.word	0xe000e3f0
 8007358:	2000195c 	.word	0x2000195c
 800735c:	e000ed0c 	.word	0xe000ed0c
 8007360:	20001960 	.word	0x20001960

08007364 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007370:	f7fe fd14 	bl	8005d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007374:	4b5b      	ldr	r3, [pc, #364]	; (80074e4 <pvPortMalloc+0x180>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800737c:	f000 f91a 	bl	80075b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007380:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <pvPortMalloc+0x184>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 8092 	bne.w	80074b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01f      	beq.n	80073d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007394:	2208      	movs	r2, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f023 0307 	bic.w	r3, r3, #7
 80073ac:	3308      	adds	r3, #8
 80073ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <pvPortMalloc+0x70>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	b672      	cpsid	i
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	b662      	cpsie	i
 80073ce:	617b      	str	r3, [r7, #20]
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d06b      	beq.n	80074b2 <pvPortMalloc+0x14e>
 80073da:	4b44      	ldr	r3, [pc, #272]	; (80074ec <pvPortMalloc+0x188>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d866      	bhi.n	80074b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073e4:	4b42      	ldr	r3, [pc, #264]	; (80074f0 <pvPortMalloc+0x18c>)
 80073e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073e8:	4b41      	ldr	r3, [pc, #260]	; (80074f0 <pvPortMalloc+0x18c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ee:	e004      	b.n	80073fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d903      	bls.n	800740c <pvPortMalloc+0xa8>
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f1      	bne.n	80073f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800740c:	4b35      	ldr	r3, [pc, #212]	; (80074e4 <pvPortMalloc+0x180>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	429a      	cmp	r2, r3
 8007414:	d04d      	beq.n	80074b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2208      	movs	r2, #8
 800741c:	4413      	add	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	2308      	movs	r3, #8
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	429a      	cmp	r2, r3
 8007436:	d921      	bls.n	800747c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <pvPortMalloc+0x100>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	b672      	cpsid	i
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	b662      	cpsie	i
 800745e:	613b      	str	r3, [r7, #16]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007476:	69b8      	ldr	r0, [r7, #24]
 8007478:	f000 f8fe 	bl	8007678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800747c:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <pvPortMalloc+0x188>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	4a19      	ldr	r2, [pc, #100]	; (80074ec <pvPortMalloc+0x188>)
 8007488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <pvPortMalloc+0x188>)
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <pvPortMalloc+0x190>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d203      	bcs.n	800749e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <pvPortMalloc+0x188>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a16      	ldr	r2, [pc, #88]	; (80074f4 <pvPortMalloc+0x190>)
 800749c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <pvPortMalloc+0x184>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	431a      	orrs	r2, r3
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074b2:	f7fe fc81 	bl	8005db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00c      	beq.n	80074da <pvPortMalloc+0x176>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	60fb      	str	r3, [r7, #12]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <pvPortMalloc+0x174>
	return pvReturn;
 80074da:	69fb      	ldr	r3, [r7, #28]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3728      	adds	r7, #40	; 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	2000556c 	.word	0x2000556c
 80074e8:	20005578 	.word	0x20005578
 80074ec:	20005570 	.word	0x20005570
 80074f0:	20005564 	.word	0x20005564
 80074f4:	20005574 	.word	0x20005574

080074f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04c      	beq.n	80075a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750a:	2308      	movs	r3, #8
 800750c:	425b      	negs	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b23      	ldr	r3, [pc, #140]	; (80075ac <vPortFree+0xb4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10c      	bne.n	8007540 <vPortFree+0x48>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	b672      	cpsid	i
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	b662      	cpsie	i
 800753a:	60fb      	str	r3, [r7, #12]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00c      	beq.n	8007562 <vPortFree+0x6a>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754c:	b672      	cpsid	i
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	b662      	cpsie	i
 800755c:	60bb      	str	r3, [r7, #8]
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <vPortFree+0xb4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d019      	beq.n	80075a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d115      	bne.n	80075a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <vPortFree+0xb4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	43db      	mvns	r3, r3
 8007582:	401a      	ands	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007588:	f7fe fc08 	bl	8005d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vPortFree+0xb8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4413      	add	r3, r2
 8007596:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <vPortFree+0xb8>)
 8007598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800759a:	6938      	ldr	r0, [r7, #16]
 800759c:	f000 f86c 	bl	8007678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075a0:	f7fe fc0a 	bl	8005db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075a4:	bf00      	nop
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20005578 	.word	0x20005578
 80075b0:	20005570 	.word	0x20005570

080075b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <prvHeapInit+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvHeapInit+0xac>)
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <prvHeapInit+0xb0>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <prvHeapInit+0xb0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007600:	2208      	movs	r2, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <prvHeapInit+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvHeapInit+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <prvHeapInit+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvHeapInit+0xb4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <prvHeapInit+0xb8>)
 8007642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvHeapInit+0xbc>)
 800764a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvHeapInit+0xc0>)
 800764e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20001964 	.word	0x20001964
 8007664:	20005564 	.word	0x20005564
 8007668:	2000556c 	.word	0x2000556c
 800766c:	20005574 	.word	0x20005574
 8007670:	20005570 	.word	0x20005570
 8007674:	20005578 	.word	0x20005578

08007678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <prvInsertBlockIntoFreeList+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e002      	b.n	800768c <prvInsertBlockIntoFreeList+0x14>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8f7      	bhi.n	8007686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d108      	bne.n	80076ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d118      	bne.n	8007700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00d      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e008      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e003      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20005564 	.word	0x20005564
 8007728:	2000556c 	.word	0x2000556c

0800772c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007730:	4803      	ldr	r0, [pc, #12]	; (8007740 <_cbSendSystemDesc+0x14>)
 8007732:	f001 fa29 	bl	8008b88 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007736:	4803      	ldr	r0, [pc, #12]	; (8007744 <_cbSendSystemDesc+0x18>)
 8007738:	f001 fa26 	bl	8008b88 <SEGGER_SYSVIEW_SendSysDesc>
}
 800773c:	bf00      	nop
 800773e:	bd80      	pop	{r7, pc}
 8007740:	08009c5c 	.word	0x08009c5c
 8007744:	08009c98 	.word	0x08009c98

08007748 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <SEGGER_SYSVIEW_Conf+0x20>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <SEGGER_SYSVIEW_Conf+0x20>)
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <SEGGER_SYSVIEW_Conf+0x24>)
 8007756:	4a06      	ldr	r2, [pc, #24]	; (8007770 <SEGGER_SYSVIEW_Conf+0x28>)
 8007758:	f000 fd94 	bl	8008284 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800775c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007760:	f000 fdd4 	bl	800830c <SEGGER_SYSVIEW_SetRAMBase>
}
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000000 	.word	0x20000000
 800776c:	0800772d 	.word	0x0800772d
 8007770:	08009d98 	.word	0x08009d98

08007774 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007776:	b085      	sub	sp, #20
 8007778:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	e048      	b.n	8007812 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8007780:	4929      	ldr	r1, [pc, #164]	; (8007828 <_cbSendTaskList+0xb4>)
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fef5 	bl	8006580 <uxTaskGetStackHighWaterMark>
 8007796:	4601      	mov	r1, r0
 8007798:	4823      	ldr	r0, [pc, #140]	; (8007828 <_cbSendTaskList+0xb4>)
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4403      	add	r3, r0
 80077a6:	3310      	adds	r3, #16
 80077a8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80077aa:	491f      	ldr	r1, [pc, #124]	; (8007828 <_cbSendTaskList+0xb4>)
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	491b      	ldr	r1, [pc, #108]	; (8007828 <_cbSendTaskList+0xb4>)
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3304      	adds	r3, #4
 80077ca:	6819      	ldr	r1, [r3, #0]
 80077cc:	4c16      	ldr	r4, [pc, #88]	; (8007828 <_cbSendTaskList+0xb4>)
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4423      	add	r3, r4
 80077da:	3308      	adds	r3, #8
 80077dc:	681c      	ldr	r4, [r3, #0]
 80077de:	4d12      	ldr	r5, [pc, #72]	; (8007828 <_cbSendTaskList+0xb4>)
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	442b      	add	r3, r5
 80077ec:	330c      	adds	r3, #12
 80077ee:	681d      	ldr	r5, [r3, #0]
 80077f0:	4e0d      	ldr	r6, [pc, #52]	; (8007828 <_cbSendTaskList+0xb4>)
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4433      	add	r3, r6
 80077fe:	3310      	adds	r3, #16
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	462b      	mov	r3, r5
 8007806:	4622      	mov	r2, r4
 8007808:	f000 f8be 	bl	8007988 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3301      	adds	r3, #1
 8007810:	607b      	str	r3, [r7, #4]
 8007812:	4b06      	ldr	r3, [pc, #24]	; (800782c <_cbSendTaskList+0xb8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d3b1      	bcc.n	8007780 <_cbSendTaskList+0xc>
  }
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007826:	bf00      	nop
 8007828:	2000557c 	.word	0x2000557c
 800782c:	2000561c 	.word	0x2000561c

08007830 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007838:	f7fe fb72 	bl	8005f20 <xTaskGetTickCountFromISR>
 800783c:	4603      	mov	r3, r0
 800783e:	2200      	movs	r2, #0
 8007840:	469a      	mov	sl, r3
 8007842:	4693      	mov	fp, r2
 8007844:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	f04f 0b00 	mov.w	fp, #0
 8007858:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800785c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007860:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007864:	4652      	mov	r2, sl
 8007866:	465b      	mov	r3, fp
 8007868:	1a14      	subs	r4, r2, r0
 800786a:	eb63 0501 	sbc.w	r5, r3, r1
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	00ab      	lsls	r3, r5, #2
 8007878:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800787c:	00a2      	lsls	r2, r4, #2
 800787e:	4614      	mov	r4, r2
 8007880:	461d      	mov	r5, r3
 8007882:	eb14 0800 	adds.w	r8, r4, r0
 8007886:	eb45 0901 	adc.w	r9, r5, r1
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800789a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800789e:	4690      	mov	r8, r2
 80078a0:	4699      	mov	r9, r3
 80078a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80078a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80078aa:	4610      	mov	r0, r2
 80078ac:	4619      	mov	r1, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080078b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80078c6:	2205      	movs	r2, #5
 80078c8:	492b      	ldr	r1, [pc, #172]	; (8007978 <SYSVIEW_AddTask+0xc0>)
 80078ca:	68b8      	ldr	r0, [r7, #8]
 80078cc:	f001 fcff 	bl	80092ce <memcmp>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d04b      	beq.n	800796e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80078d6:	4b29      	ldr	r3, [pc, #164]	; (800797c <SYSVIEW_AddTask+0xc4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b07      	cmp	r3, #7
 80078dc:	d903      	bls.n	80078e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80078de:	4828      	ldr	r0, [pc, #160]	; (8007980 <SYSVIEW_AddTask+0xc8>)
 80078e0:	f001 fb76 	bl	8008fd0 <SEGGER_SYSVIEW_Warn>
    return;
 80078e4:	e044      	b.n	8007970 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80078e6:	4b25      	ldr	r3, [pc, #148]	; (800797c <SYSVIEW_AddTask+0xc4>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4926      	ldr	r1, [pc, #152]	; (8007984 <SYSVIEW_AddTask+0xcc>)
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <SYSVIEW_AddTask+0xc4>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4921      	ldr	r1, [pc, #132]	; (8007984 <SYSVIEW_AddTask+0xcc>)
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	3304      	adds	r3, #4
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <SYSVIEW_AddTask+0xc4>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	491b      	ldr	r1, [pc, #108]	; (8007984 <SYSVIEW_AddTask+0xcc>)
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	3308      	adds	r3, #8
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007926:	4b15      	ldr	r3, [pc, #84]	; (800797c <SYSVIEW_AddTask+0xc4>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4916      	ldr	r1, [pc, #88]	; (8007984 <SYSVIEW_AddTask+0xcc>)
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	330c      	adds	r3, #12
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800793c:	4b0f      	ldr	r3, [pc, #60]	; (800797c <SYSVIEW_AddTask+0xc4>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4910      	ldr	r1, [pc, #64]	; (8007984 <SYSVIEW_AddTask+0xcc>)
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3310      	adds	r3, #16
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007952:	4b0a      	ldr	r3, [pc, #40]	; (800797c <SYSVIEW_AddTask+0xc4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	4a08      	ldr	r2, [pc, #32]	; (800797c <SYSVIEW_AddTask+0xc4>)
 800795a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f80e 	bl	8007988 <SYSVIEW_SendTaskInfo>
 800796c:	e000      	b.n	8007970 <SYSVIEW_AddTask+0xb8>
    return;
 800796e:	bf00      	nop

}
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	08009ca8 	.word	0x08009ca8
 800797c:	2000561c 	.word	0x2000561c
 8007980:	08009cb0 	.word	0x08009cb0
 8007984:	2000557c 	.word	0x2000557c

08007988 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007996:	f107 0314 	add.w	r3, r7, #20
 800799a:	2214      	movs	r2, #20
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fcb3 	bl	800930a <memset>
  TaskInfo.TaskID     = TaskID;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 ffeb 	bl	8008998 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80079c2:	bf00      	nop
 80079c4:	3728      	adds	r7, #40	; 0x28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <_DoInit+0xa0>)
 80079d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80079d6:	22a8      	movs	r2, #168	; 0xa8
 80079d8:	2100      	movs	r1, #0
 80079da:	6838      	ldr	r0, [r7, #0]
 80079dc:	f001 fc95 	bl	800930a <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2203      	movs	r2, #3
 80079e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2203      	movs	r2, #3
 80079ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <_DoInit+0xa4>)
 80079f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <_DoInit+0xa8>)
 80079f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	4a16      	ldr	r2, [pc, #88]	; (8007a70 <_DoInit+0xa4>)
 8007a16:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <_DoInit+0xac>)
 8007a1c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2210      	movs	r2, #16
 8007a22:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2200      	movs	r2, #0
 8007a28:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2200      	movs	r2, #0
 8007a34:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007a36:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
 8007a3e:	e00c      	b.n	8007a5a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f1c3 030f 	rsb	r3, r3, #15
 8007a46:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <_DoInit+0xb0>)
 8007a48:	5cd1      	ldrb	r1, [r2, r3]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	460a      	mov	r2, r1
 8007a52:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3301      	adds	r3, #1
 8007a58:	607b      	str	r3, [r7, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b0f      	cmp	r3, #15
 8007a5e:	d9ef      	bls.n	8007a40 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007a60:	f3bf 8f5f 	dmb	sy
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20005620 	.word	0x20005620
 8007a70:	08009d00 	.word	0x08009d00
 8007a74:	200056c8 	.word	0x200056c8
 8007a78:	20005ac8 	.word	0x20005ac8
 8007a7c:	08009da0 	.word	0x08009da0

08007a80 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b08c      	sub	sp, #48	; 0x30
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007a8c:	4b3e      	ldr	r3, [pc, #248]	; (8007b88 <SEGGER_RTT_ReadNoLock+0x108>)
 8007a8e:	623b      	str	r3, [r7, #32]
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <SEGGER_RTT_ReadNoLock+0x1e>
 8007a9a:	f7ff ff97 	bl	80079cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	3360      	adds	r3, #96	; 0x60
 8007aaa:	4a37      	ldr	r2, [pc, #220]	; (8007b88 <SEGGER_RTT_ReadNoLock+0x108>)
 8007aac:	4413      	add	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d92b      	bls.n	8007b24 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4293      	cmp	r3, r2
 8007adc:	bf28      	it	cs
 8007ade:	4613      	movcs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	4413      	add	r3, r2
 8007aea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	6939      	ldr	r1, [r7, #16]
 8007af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af2:	f001 fbfc 	bl	80092ee <memcpy>
    NumBytesRead += NumBytesRem;
 8007af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4413      	add	r3, r2
 8007afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	4413      	add	r3, r2
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4413      	add	r3, r2
 8007b14:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d101      	bne.n	8007b24 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007b20:	2300      	movs	r3, #0
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	bf28      	it	cs
 8007b34:	4613      	movcs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d019      	beq.n	8007b72 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b44:	4413      	add	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	6939      	ldr	r1, [r7, #16]
 8007b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b4e:	f001 fbce 	bl	80092ee <memcpy>
    NumBytesRead += NumBytesRem;
 8007b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4413      	add	r3, r2
 8007b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4413      	add	r3, r2
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b7c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3730      	adds	r7, #48	; 0x30
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20005620 	.word	0x20005620

08007b8c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007b9a:	4b3d      	ldr	r3, [pc, #244]	; (8007c90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <SEGGER_RTT_AllocUpBuffer+0x20>
 8007ba8:	f7ff ff10 	bl	80079cc <_DoInit>
  SEGGER_RTT_LOCK();
 8007bac:	f3ef 8311 	mrs	r3, BASEPRI
 8007bb0:	f04f 0120 	mov.w	r1, #32
 8007bb4:	f381 8811 	msr	BASEPRI, r1
 8007bb8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007bba:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007bbc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007bc2:	6939      	ldr	r1, [r7, #16]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	4613      	mov	r3, r2
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	4413      	add	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	440b      	add	r3, r1
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	dbeb      	blt.n	8007bc2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8007bea:	e000      	b.n	8007bee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007bec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	da3f      	bge.n	8007c78 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007bf8:	6939      	ldr	r1, [r7, #16]
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	4613      	mov	r3, r2
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	4413      	add	r3, r2
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	440b      	add	r3, r1
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007c0c:	6939      	ldr	r1, [r7, #16]
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	4613      	mov	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007c22:	6939      	ldr	r1, [r7, #16]
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	4613      	mov	r3, r2
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	440b      	add	r3, r1
 8007c30:	3320      	adds	r3, #32
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007c36:	6939      	ldr	r1, [r7, #16]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4413      	add	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	440b      	add	r3, r1
 8007c44:	3328      	adds	r3, #40	; 0x28
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007c4a:	6939      	ldr	r1, [r7, #16]
 8007c4c:	69fa      	ldr	r2, [r7, #28]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	440b      	add	r3, r1
 8007c58:	3324      	adds	r3, #36	; 0x24
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8007c5e:	6939      	ldr	r1, [r7, #16]
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	4613      	mov	r3, r2
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	4413      	add	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	440b      	add	r3, r1
 8007c6c:	332c      	adds	r3, #44	; 0x2c
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007c72:	f3bf 8f5f 	dmb	sy
 8007c76:	e002      	b.n	8007c7e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c7c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20005620 	.word	0x20005620

08007c94 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8007ca2:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007ca4:	623b      	str	r3, [r7, #32]
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007cb0:	f7ff fe8c 	bl	80079cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007cb4:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007cb6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d82c      	bhi.n	8007d18 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8007cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8007cc2:	f04f 0120 	mov.w	r1, #32
 8007cc6:	f381 8811 	msr	BASEPRI, r1
 8007cca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	4413      	add	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	3360      	adds	r3, #96	; 0x60
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00e      	beq.n	8007d02 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d06:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007d08:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
 8007d16:	e002      	b.n	8007d1e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3728      	adds	r7, #40	; 0x28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20005620 	.word	0x20005620

08007d2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00f      	beq.n	8007d62 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8007d42:	e002      	b.n	8007d4a <_EncodeStr+0x1e>
      Len++;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	3301      	adds	r3, #1
 8007d48:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f6      	bne.n	8007d44 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d901      	bls.n	8007d62 <_EncodeStr+0x36>
      Len = Limit;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2bfe      	cmp	r3, #254	; 0xfe
 8007d66:	d806      	bhi.n	8007d76 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	60fa      	str	r2, [r7, #12]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e011      	b.n	8007d9a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	60fa      	str	r2, [r7, #12]
 8007d7c:	22ff      	movs	r2, #255	; 0xff
 8007d7e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	60fa      	str	r2, [r7, #12]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	0a19      	lsrs	r1, r3, #8
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	60fa      	str	r2, [r7, #12]
 8007d96:	b2ca      	uxtb	r2, r1
 8007d98:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007d9e:	e00a      	b.n	8007db6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	1c53      	adds	r3, r2, #1
 8007da4:	60bb      	str	r3, [r7, #8]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1c59      	adds	r1, r3, #1
 8007daa:	60f9      	str	r1, [r7, #12]
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	701a      	strb	r2, [r3, #0]
    n++;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	3301      	adds	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d3f0      	bcc.n	8007da0 <_EncodeStr+0x74>
  }
  return pPayload;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3307      	adds	r3, #7
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007dea:	4b35      	ldr	r3, [pc, #212]	; (8007ec0 <_HandleIncomingPacket+0xdc>)
 8007dec:	7e1b      	ldrb	r3, [r3, #24]
 8007dee:	4618      	mov	r0, r3
 8007df0:	1cfb      	adds	r3, r7, #3
 8007df2:	2201      	movs	r2, #1
 8007df4:	4619      	mov	r1, r3
 8007df6:	f7ff fe43 	bl	8007a80 <SEGGER_RTT_ReadNoLock>
 8007dfa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d052      	beq.n	8007ea8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	2b80      	cmp	r3, #128	; 0x80
 8007e06:	d031      	beq.n	8007e6c <_HandleIncomingPacket+0x88>
 8007e08:	2b80      	cmp	r3, #128	; 0x80
 8007e0a:	dc40      	bgt.n	8007e8e <_HandleIncomingPacket+0xaa>
 8007e0c:	2b07      	cmp	r3, #7
 8007e0e:	dc15      	bgt.n	8007e3c <_HandleIncomingPacket+0x58>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dd3c      	ble.n	8007e8e <_HandleIncomingPacket+0xaa>
 8007e14:	3b01      	subs	r3, #1
 8007e16:	2b06      	cmp	r3, #6
 8007e18:	d839      	bhi.n	8007e8e <_HandleIncomingPacket+0xaa>
 8007e1a:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <_HandleIncomingPacket+0x3c>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007e43 	.word	0x08007e43
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e4f 	.word	0x08007e4f
 8007e2c:	08007e55 	.word	0x08007e55
 8007e30:	08007e5b 	.word	0x08007e5b
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e3e:	d035      	beq.n	8007eac <_HandleIncomingPacket+0xc8>
 8007e40:	e025      	b.n	8007e8e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007e42:	f000 fc2f 	bl	80086a4 <SEGGER_SYSVIEW_Start>
      break;
 8007e46:	e036      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007e48:	f000 fce6 	bl	8008818 <SEGGER_SYSVIEW_Stop>
      break;
 8007e4c:	e033      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007e4e:	f000 febf 	bl	8008bd0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007e52:	e030      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007e54:	f000 fe84 	bl	8008b60 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007e58:	e02d      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007e5a:	f000 fd03 	bl	8008864 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007e5e:	e02a      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007e60:	f001 f878 	bl	8008f54 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007e64:	e027      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007e66:	f001 f857 	bl	8008f18 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007e6a:	e024      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007e6c:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <_HandleIncomingPacket+0xdc>)
 8007e6e:	7e1b      	ldrb	r3, [r3, #24]
 8007e70:	4618      	mov	r0, r3
 8007e72:	1cfb      	adds	r3, r7, #3
 8007e74:	2201      	movs	r2, #1
 8007e76:	4619      	mov	r1, r3
 8007e78:	f7ff fe02 	bl	8007a80 <SEGGER_RTT_ReadNoLock>
 8007e7c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d015      	beq.n	8007eb0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 ffc6 	bl	8008e18 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007e8c:	e010      	b.n	8007eb0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	b25b      	sxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da0e      	bge.n	8007eb4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <_HandleIncomingPacket+0xdc>)
 8007e98:	7e1b      	ldrb	r3, [r3, #24]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	1cfb      	adds	r3, r7, #3
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f7ff fded 	bl	8007a80 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007ea6:	e005      	b.n	8007eb4 <_HandleIncomingPacket+0xd0>
    }
  }
 8007ea8:	bf00      	nop
 8007eaa:	e004      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
      break;
 8007eac:	bf00      	nop
 8007eae:	e002      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <_HandleIncomingPacket+0xd2>
      break;
 8007eb4:	bf00      	nop
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20005ee0 	.word	0x20005ee0

08007ec4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	; 0x30
 8007ec8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007eca:	2301      	movs	r3, #1
 8007ecc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ed8:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ede:	e00b      	b.n	8007ef8 <_TrySendOverflowPacket+0x34>
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	1c59      	adds	r1, r3, #1
 8007ee8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007eee:	b2d2      	uxtb	r2, r2
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	09db      	lsrs	r3, r3, #7
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	2b7f      	cmp	r3, #127	; 0x7f
 8007efc:	d8f0      	bhi.n	8007ee0 <_TrySendOverflowPacket+0x1c>
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007f0e:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <_TrySendOverflowPacket+0xe0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007f14:	4b22      	ldr	r3, [pc, #136]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	623b      	str	r3, [r7, #32]
 8007f26:	e00b      	b.n	8007f40 <_TrySendOverflowPacket+0x7c>
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	1c59      	adds	r1, r3, #1
 8007f30:	6279      	str	r1, [r7, #36]	; 0x24
 8007f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	09db      	lsrs	r3, r3, #7
 8007f3e:	623b      	str	r3, [r7, #32]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b7f      	cmp	r3, #127	; 0x7f
 8007f44:	d8f0      	bhi.n	8007f28 <_TrySendOverflowPacket+0x64>
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	b2d2      	uxtb	r2, r2
 8007f50:	701a      	strb	r2, [r3, #0]
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007f56:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	69fa      	ldr	r2, [r7, #28]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	1d3b      	adds	r3, r7, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	f7f8 f96a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007f76:	4a0a      	ldr	r2, [pc, #40]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	e004      	b.n	8007f94 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	4a03      	ldr	r2, [pc, #12]	; (8007fa0 <_TrySendOverflowPacket+0xdc>)
 8007f92:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007f94:	693b      	ldr	r3, [r7, #16]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3730      	adds	r7, #48	; 0x30
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20005ee0 	.word	0x20005ee0
 8007fa4:	e0001004 	.word	0xe0001004

08007fa8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007fb4:	4b98      	ldr	r3, [pc, #608]	; (8008218 <_SendPacket+0x270>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d010      	beq.n	8007fde <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007fbc:	4b96      	ldr	r3, [pc, #600]	; (8008218 <_SendPacket+0x270>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 812d 	beq.w	8008220 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007fc6:	4b94      	ldr	r3, [pc, #592]	; (8008218 <_SendPacket+0x270>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d109      	bne.n	8007fe2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007fce:	f7ff ff79 	bl	8007ec4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007fd2:	4b91      	ldr	r3, [pc, #580]	; (8008218 <_SendPacket+0x270>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	f040 8124 	bne.w	8008224 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8007fdc:	e001      	b.n	8007fe2 <_SendPacket+0x3a>
    goto Send;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <_SendPacket+0x3c>
Send:
 8007fe2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b1f      	cmp	r3, #31
 8007fe8:	d809      	bhi.n	8007ffe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007fea:	4b8b      	ldr	r3, [pc, #556]	; (8008218 <_SendPacket+0x270>)
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f040 8115 	bne.w	8008228 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b17      	cmp	r3, #23
 8008002:	d807      	bhi.n	8008014 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3b01      	subs	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e0c4      	b.n	800819e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	2b7f      	cmp	r3, #127	; 0x7f
 8008020:	d912      	bls.n	8008048 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	09da      	lsrs	r2, r3, #7
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b01      	subs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	3a01      	subs	r2, #1
 800803a:	60fa      	str	r2, [r7, #12]
 800803c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008040:	b2da      	uxtb	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e006      	b.n	8008056 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3b01      	subs	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b7e      	cmp	r3, #126	; 0x7e
 800805a:	d807      	bhi.n	800806c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b01      	subs	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e098      	b.n	800819e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008072:	d212      	bcs.n	800809a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	09da      	lsrs	r2, r3, #7
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3b01      	subs	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	3a01      	subs	r2, #1
 800808c:	60fa      	str	r2, [r7, #12]
 800808e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008092:	b2da      	uxtb	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e081      	b.n	800819e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a0:	d21d      	bcs.n	80080de <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	0b9a      	lsrs	r2, r3, #14
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	b2d2      	uxtb	r2, r2
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	09db      	lsrs	r3, r3, #7
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	3a01      	subs	r2, #1
 80080bc:	60fa      	str	r2, [r7, #12]
 80080be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	3a01      	subs	r2, #1
 80080d0:	60fa      	str	r2, [r7, #12]
 80080d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e05f      	b.n	800819e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080e4:	d228      	bcs.n	8008138 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	0d5a      	lsrs	r2, r3, #21
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	b2d2      	uxtb	r2, r2
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	0b9b      	lsrs	r3, r3, #14
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	3a01      	subs	r2, #1
 8008100:	60fa      	str	r2, [r7, #12]
 8008102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008106:	b2da      	uxtb	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	09db      	lsrs	r3, r3, #7
 8008110:	b2db      	uxtb	r3, r3
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	3a01      	subs	r2, #1
 8008116:	60fa      	str	r2, [r7, #12]
 8008118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800811c:	b2da      	uxtb	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	3a01      	subs	r2, #1
 800812a:	60fa      	str	r2, [r7, #12]
 800812c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008130:	b2da      	uxtb	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	e032      	b.n	800819e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	0f1a      	lsrs	r2, r3, #28
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3b01      	subs	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	0d5b      	lsrs	r3, r3, #21
 800814c:	b2db      	uxtb	r3, r3
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	3a01      	subs	r2, #1
 8008152:	60fa      	str	r2, [r7, #12]
 8008154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008158:	b2da      	uxtb	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	0b9b      	lsrs	r3, r3, #14
 8008162:	b2db      	uxtb	r3, r3
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	3a01      	subs	r2, #1
 8008168:	60fa      	str	r2, [r7, #12]
 800816a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800816e:	b2da      	uxtb	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	09db      	lsrs	r3, r3, #7
 8008178:	b2db      	uxtb	r3, r3
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	3a01      	subs	r2, #1
 800817e:	60fa      	str	r2, [r7, #12]
 8008180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008184:	b2da      	uxtb	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	3a01      	subs	r2, #1
 8008192:	60fa      	str	r2, [r7, #12]
 8008194:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008198:	b2da      	uxtb	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800819e:	4b1f      	ldr	r3, [pc, #124]	; (800821c <_SendPacket+0x274>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80081a4:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <_SendPacket+0x270>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	623b      	str	r3, [r7, #32]
 80081b6:	e00b      	b.n	80081d0 <_SendPacket+0x228>
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	1c59      	adds	r1, r3, #1
 80081c0:	6279      	str	r1, [r7, #36]	; 0x24
 80081c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	09db      	lsrs	r3, r3, #7
 80081ce:	623b      	str	r3, [r7, #32]
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	2b7f      	cmp	r3, #127	; 0x7f
 80081d4:	d8f0      	bhi.n	80081b8 <_SendPacket+0x210>
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	627a      	str	r2, [r7, #36]	; 0x24
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <_SendPacket+0x270>)
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	4618      	mov	r0, r3
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	68f9      	ldr	r1, [r7, #12]
 80081f6:	f7f8 f823 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80081fa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008202:	4a05      	ldr	r2, [pc, #20]	; (8008218 <_SendPacket+0x270>)
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	60d3      	str	r3, [r2, #12]
 8008208:	e00f      	b.n	800822a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800820a:	4b03      	ldr	r3, [pc, #12]	; (8008218 <_SendPacket+0x270>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b01      	ldr	r3, [pc, #4]	; (8008218 <_SendPacket+0x270>)
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e008      	b.n	800822a <_SendPacket+0x282>
 8008218:	20005ee0 	.word	0x20005ee0
 800821c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8008220:	bf00      	nop
 8008222:	e002      	b.n	800822a <_SendPacket+0x282>
      goto SendDone;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <_SendPacket+0x282>
      goto SendDone;
 8008228:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800822a:	4b14      	ldr	r3, [pc, #80]	; (800827c <_SendPacket+0x2d4>)
 800822c:	7e1b      	ldrb	r3, [r3, #24]
 800822e:	4619      	mov	r1, r3
 8008230:	4a13      	ldr	r2, [pc, #76]	; (8008280 <_SendPacket+0x2d8>)
 8008232:	460b      	mov	r3, r1
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	440b      	add	r3, r1
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4413      	add	r3, r2
 800823c:	336c      	adds	r3, #108	; 0x6c
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	4b0e      	ldr	r3, [pc, #56]	; (800827c <_SendPacket+0x2d4>)
 8008242:	7e1b      	ldrb	r3, [r3, #24]
 8008244:	4618      	mov	r0, r3
 8008246:	490e      	ldr	r1, [pc, #56]	; (8008280 <_SendPacket+0x2d8>)
 8008248:	4603      	mov	r3, r0
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	4403      	add	r3, r0
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	440b      	add	r3, r1
 8008252:	3370      	adds	r3, #112	; 0x70
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d00b      	beq.n	8008272 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800825a:	4b08      	ldr	r3, [pc, #32]	; (800827c <_SendPacket+0x2d4>)
 800825c:	789b      	ldrb	r3, [r3, #2]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d107      	bne.n	8008272 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <_SendPacket+0x2d4>)
 8008264:	2201      	movs	r2, #1
 8008266:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008268:	f7ff fdbc 	bl	8007de4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <_SendPacket+0x2d4>)
 800826e:	2200      	movs	r2, #0
 8008270:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008272:	bf00      	nop
 8008274:	3728      	adds	r7, #40	; 0x28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20005ee0 	.word	0x20005ee0
 8008280:	20005620 	.word	0x20005620

08008284 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008292:	2300      	movs	r3, #0
 8008294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008298:	4917      	ldr	r1, [pc, #92]	; (80082f8 <SEGGER_SYSVIEW_Init+0x74>)
 800829a:	4818      	ldr	r0, [pc, #96]	; (80082fc <SEGGER_SYSVIEW_Init+0x78>)
 800829c:	f7ff fc76 	bl	8007b8c <SEGGER_RTT_AllocUpBuffer>
 80082a0:	4603      	mov	r3, r0
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	4b16      	ldr	r3, [pc, #88]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082a6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80082a8:	4b15      	ldr	r3, [pc, #84]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082aa:	785a      	ldrb	r2, [r3, #1]
 80082ac:	4b14      	ldr	r3, [pc, #80]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082ae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80082b0:	4b13      	ldr	r3, [pc, #76]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082b2:	7e1b      	ldrb	r3, [r3, #24]
 80082b4:	4618      	mov	r0, r3
 80082b6:	2300      	movs	r3, #0
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	2308      	movs	r3, #8
 80082bc:	4a11      	ldr	r2, [pc, #68]	; (8008304 <SEGGER_SYSVIEW_Init+0x80>)
 80082be:	490f      	ldr	r1, [pc, #60]	; (80082fc <SEGGER_SYSVIEW_Init+0x78>)
 80082c0:	f7ff fce8 	bl	8007c94 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80082c4:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80082ca:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <SEGGER_SYSVIEW_Init+0x84>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a0c      	ldr	r2, [pc, #48]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082d0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80082d2:	4a0b      	ldr	r2, [pc, #44]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80082de:	4a08      	ldr	r2, [pc, #32]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80082e4:	4a06      	ldr	r2, [pc, #24]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <SEGGER_SYSVIEW_Init+0x7c>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20005ad8 	.word	0x20005ad8
 80082fc:	08009d0c 	.word	0x08009d0c
 8008300:	20005ee0 	.word	0x20005ee0
 8008304:	20005ed8 	.word	0x20005ed8
 8008308:	e0001004 	.word	0xe0001004

0800830c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008314:	4a04      	ldr	r2, [pc, #16]	; (8008328 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6113      	str	r3, [r2, #16]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	20005ee0 	.word	0x20005ee0

0800832c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008334:	f3ef 8311 	mrs	r3, BASEPRI
 8008338:	f04f 0120 	mov.w	r1, #32
 800833c:	f381 8811 	msr	BASEPRI, r1
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	4808      	ldr	r0, [pc, #32]	; (8008364 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008344:	f7ff fd42 	bl	8007dcc <_PreparePacket>
 8008348:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	68b8      	ldr	r0, [r7, #8]
 8008350:	f7ff fe2a 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f383 8811 	msr	BASEPRI, r3
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20005f10 	.word	0x20005f10

08008368 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008372:	f3ef 8311 	mrs	r3, BASEPRI
 8008376:	f04f 0120 	mov.w	r1, #32
 800837a:	f381 8811 	msr	BASEPRI, r1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	4816      	ldr	r0, [pc, #88]	; (80083dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008382:	f7ff fd23 	bl	8007dcc <_PreparePacket>
 8008386:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	61bb      	str	r3, [r7, #24]
 8008394:	e00b      	b.n	80083ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	b2da      	uxtb	r2, r3
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	1c59      	adds	r1, r3, #1
 800839e:	61f9      	str	r1, [r7, #28]
 80083a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	09db      	lsrs	r3, r3, #7
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b7f      	cmp	r3, #127	; 0x7f
 80083b2:	d8f0      	bhi.n	8008396 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	61fa      	str	r2, [r7, #28]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	6938      	ldr	r0, [r7, #16]
 80083ca:	f7ff fded 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f383 8811 	msr	BASEPRI, r3
}
 80083d4:	bf00      	nop
 80083d6:	3720      	adds	r7, #32
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20005f10 	.word	0x20005f10

080083e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08c      	sub	sp, #48	; 0x30
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80083ec:	f3ef 8311 	mrs	r3, BASEPRI
 80083f0:	f04f 0120 	mov.w	r1, #32
 80083f4:	f381 8811 	msr	BASEPRI, r1
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	4825      	ldr	r0, [pc, #148]	; (8008490 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80083fc:	f7ff fce6 	bl	8007dcc <_PreparePacket>
 8008400:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
 800840e:	e00b      	b.n	8008428 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	b2da      	uxtb	r2, r3
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	1c59      	adds	r1, r3, #1
 8008418:	62f9      	str	r1, [r7, #44]	; 0x2c
 800841a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800841e:	b2d2      	uxtb	r2, r2
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	09db      	lsrs	r3, r3, #7
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2b7f      	cmp	r3, #127	; 0x7f
 800842c:	d8f0      	bhi.n	8008410 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	623b      	str	r3, [r7, #32]
 8008446:	e00b      	b.n	8008460 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	b2da      	uxtb	r2, r3
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	1c59      	adds	r1, r3, #1
 8008450:	6279      	str	r1, [r7, #36]	; 0x24
 8008452:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	09db      	lsrs	r3, r3, #7
 800845e:	623b      	str	r3, [r7, #32]
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	2b7f      	cmp	r3, #127	; 0x7f
 8008464:	d8f0      	bhi.n	8008448 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	627a      	str	r2, [r7, #36]	; 0x24
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	6979      	ldr	r1, [r7, #20]
 800847a:	69b8      	ldr	r0, [r7, #24]
 800847c:	f7ff fd94 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	f383 8811 	msr	BASEPRI, r3
}
 8008486:	bf00      	nop
 8008488:	3730      	adds	r7, #48	; 0x30
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20005f10 	.word	0x20005f10

08008494 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80084a2:	f3ef 8311 	mrs	r3, BASEPRI
 80084a6:	f04f 0120 	mov.w	r1, #32
 80084aa:	f381 8811 	msr	BASEPRI, r1
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	4832      	ldr	r0, [pc, #200]	; (800857c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80084b2:	f7ff fc8b 	bl	8007dcc <_PreparePacket>
 80084b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30
 80084c4:	e00b      	b.n	80084de <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	1c59      	adds	r1, r3, #1
 80084ce:	6379      	str	r1, [r7, #52]	; 0x34
 80084d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	09db      	lsrs	r3, r3, #7
 80084dc:	633b      	str	r3, [r7, #48]	; 0x30
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	2b7f      	cmp	r3, #127	; 0x7f
 80084e2:	d8f0      	bhi.n	80084c6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	637a      	str	r2, [r7, #52]	; 0x34
 80084ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fc:	e00b      	b.n	8008516 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	b2da      	uxtb	r2, r3
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	1c59      	adds	r1, r3, #1
 8008506:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800850c:	b2d2      	uxtb	r2, r2
 800850e:	701a      	strb	r2, [r3, #0]
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	09db      	lsrs	r3, r3, #7
 8008514:	62bb      	str	r3, [r7, #40]	; 0x28
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	2b7f      	cmp	r3, #127	; 0x7f
 800851a:	d8f0      	bhi.n	80084fe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	623b      	str	r3, [r7, #32]
 8008534:	e00b      	b.n	800854e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	b2da      	uxtb	r2, r3
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	1c59      	adds	r1, r3, #1
 800853e:	6279      	str	r1, [r7, #36]	; 0x24
 8008540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	09db      	lsrs	r3, r3, #7
 800854c:	623b      	str	r3, [r7, #32]
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	2b7f      	cmp	r3, #127	; 0x7f
 8008552:	d8f0      	bhi.n	8008536 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	627a      	str	r2, [r7, #36]	; 0x24
 800855a:	6a3a      	ldr	r2, [r7, #32]
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	69b8      	ldr	r0, [r7, #24]
 800856a:	f7ff fd1d 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	f383 8811 	msr	BASEPRI, r3
}
 8008574:	bf00      	nop
 8008576:	3738      	adds	r7, #56	; 0x38
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20005f10 	.word	0x20005f10

08008580 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008580:	b580      	push	{r7, lr}
 8008582:	b090      	sub	sp, #64	; 0x40
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800858e:	f3ef 8311 	mrs	r3, BASEPRI
 8008592:	f04f 0120 	mov.w	r1, #32
 8008596:	f381 8811 	msr	BASEPRI, r1
 800859a:	61fb      	str	r3, [r7, #28]
 800859c:	4840      	ldr	r0, [pc, #256]	; (80086a0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800859e:	f7ff fc15 	bl	8007dcc <_PreparePacket>
 80085a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80085b0:	e00b      	b.n	80085ca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b8:	1c59      	adds	r1, r3, #1
 80085ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 80085bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	09db      	lsrs	r3, r3, #7
 80085c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	2b7f      	cmp	r3, #127	; 0x7f
 80085ce:	d8f0      	bhi.n	80085b2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80085d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	633b      	str	r3, [r7, #48]	; 0x30
 80085e8:	e00b      	b.n	8008602 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f0:	1c59      	adds	r1, r3, #1
 80085f2:	6379      	str	r1, [r7, #52]	; 0x34
 80085f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	09db      	lsrs	r3, r3, #7
 8008600:	633b      	str	r3, [r7, #48]	; 0x30
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2b7f      	cmp	r3, #127	; 0x7f
 8008606:	d8f0      	bhi.n	80085ea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	637a      	str	r2, [r7, #52]	; 0x34
 800860e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008616:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008620:	e00b      	b.n	800863a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	b2da      	uxtb	r2, r3
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	1c59      	adds	r1, r3, #1
 800862a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800862c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	09db      	lsrs	r3, r3, #7
 8008638:	62bb      	str	r3, [r7, #40]	; 0x28
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	2b7f      	cmp	r3, #127	; 0x7f
 800863e:	d8f0      	bhi.n	8008622 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
 8008654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008656:	623b      	str	r3, [r7, #32]
 8008658:	e00b      	b.n	8008672 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	1c59      	adds	r1, r3, #1
 8008662:	6279      	str	r1, [r7, #36]	; 0x24
 8008664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008668:	b2d2      	uxtb	r2, r2
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	09db      	lsrs	r3, r3, #7
 8008670:	623b      	str	r3, [r7, #32]
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	2b7f      	cmp	r3, #127	; 0x7f
 8008676:	d8f0      	bhi.n	800865a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	627a      	str	r2, [r7, #36]	; 0x24
 800867e:	6a3a      	ldr	r2, [r7, #32]
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	701a      	strb	r2, [r3, #0]
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	6979      	ldr	r1, [r7, #20]
 800868c:	69b8      	ldr	r0, [r7, #24]
 800868e:	f7ff fc8b 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f383 8811 	msr	BASEPRI, r3
}
 8008698:	bf00      	nop
 800869a:	3740      	adds	r7, #64	; 0x40
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20005f10 	.word	0x20005f10

080086a4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08c      	sub	sp, #48	; 0x30
 80086a8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80086aa:	4b58      	ldr	r3, [pc, #352]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80086b0:	f3ef 8311 	mrs	r3, BASEPRI
 80086b4:	f04f 0120 	mov.w	r1, #32
 80086b8:	f381 8811 	msr	BASEPRI, r1
 80086bc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80086be:	4b53      	ldr	r3, [pc, #332]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	220a      	movs	r2, #10
 80086c4:	4952      	ldr	r1, [pc, #328]	; (8008810 <SEGGER_SYSVIEW_Start+0x16c>)
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7f7 fdba 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80086d2:	200a      	movs	r0, #10
 80086d4:	f7ff fe2a 	bl	800832c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80086d8:	f3ef 8311 	mrs	r3, BASEPRI
 80086dc:	f04f 0120 	mov.w	r1, #32
 80086e0:	f381 8811 	msr	BASEPRI, r1
 80086e4:	60bb      	str	r3, [r7, #8]
 80086e6:	484b      	ldr	r0, [pc, #300]	; (8008814 <SEGGER_SYSVIEW_Start+0x170>)
 80086e8:	f7ff fb70 	bl	8007dcc <_PreparePacket>
 80086ec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086f6:	4b45      	ldr	r3, [pc, #276]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80086fc:	e00b      	b.n	8008716 <SEGGER_SYSVIEW_Start+0x72>
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	b2da      	uxtb	r2, r3
 8008702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008704:	1c59      	adds	r1, r3, #1
 8008706:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	09db      	lsrs	r3, r3, #7
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	2b7f      	cmp	r3, #127	; 0x7f
 800871a:	d8f0      	bhi.n	80086fe <SEGGER_SYSVIEW_Start+0x5a>
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
 8008730:	4b36      	ldr	r3, [pc, #216]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	623b      	str	r3, [r7, #32]
 8008736:	e00b      	b.n	8008750 <SEGGER_SYSVIEW_Start+0xac>
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	1c59      	adds	r1, r3, #1
 8008740:	6279      	str	r1, [r7, #36]	; 0x24
 8008742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	09db      	lsrs	r3, r3, #7
 800874e:	623b      	str	r3, [r7, #32]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	2b7f      	cmp	r3, #127	; 0x7f
 8008754:	d8f0      	bhi.n	8008738 <SEGGER_SYSVIEW_Start+0x94>
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	1c5a      	adds	r2, r3, #1
 800875a:	627a      	str	r2, [r7, #36]	; 0x24
 800875c:	6a3a      	ldr	r2, [r7, #32]
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	61fb      	str	r3, [r7, #28]
 800876a:	4b28      	ldr	r3, [pc, #160]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	61bb      	str	r3, [r7, #24]
 8008770:	e00b      	b.n	800878a <SEGGER_SYSVIEW_Start+0xe6>
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	b2da      	uxtb	r2, r3
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	1c59      	adds	r1, r3, #1
 800877a:	61f9      	str	r1, [r7, #28]
 800877c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	09db      	lsrs	r3, r3, #7
 8008788:	61bb      	str	r3, [r7, #24]
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b7f      	cmp	r3, #127	; 0x7f
 800878e:	d8f0      	bhi.n	8008772 <SEGGER_SYSVIEW_Start+0xce>
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	61fa      	str	r2, [r7, #28]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	2300      	movs	r3, #0
 80087a6:	613b      	str	r3, [r7, #16]
 80087a8:	e00b      	b.n	80087c2 <SEGGER_SYSVIEW_Start+0x11e>
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	1c59      	adds	r1, r3, #1
 80087b2:	6179      	str	r1, [r7, #20]
 80087b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	09db      	lsrs	r3, r3, #7
 80087c0:	613b      	str	r3, [r7, #16]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2b7f      	cmp	r3, #127	; 0x7f
 80087c6:	d8f0      	bhi.n	80087aa <SEGGER_SYSVIEW_Start+0x106>
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	617a      	str	r2, [r7, #20]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80087d8:	2218      	movs	r2, #24
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff fbe3 	bl	8007fa8 <_SendPacket>
      RECORD_END();
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80087e8:	4b08      	ldr	r3, [pc, #32]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <SEGGER_SYSVIEW_Start+0x168>)
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80087f6:	f000 f9eb 	bl	8008bd0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80087fa:	f000 f9b1 	bl	8008b60 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80087fe:	f000 fba9 	bl	8008f54 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008802:	bf00      	nop
 8008804:	3730      	adds	r7, #48	; 0x30
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20005ee0 	.word	0x20005ee0
 8008810:	08009db4 	.word	0x08009db4
 8008814:	20005f10 	.word	0x20005f10

08008818 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800881e:	f3ef 8311 	mrs	r3, BASEPRI
 8008822:	f04f 0120 	mov.w	r1, #32
 8008826:	f381 8811 	msr	BASEPRI, r1
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	480b      	ldr	r0, [pc, #44]	; (800885c <SEGGER_SYSVIEW_Stop+0x44>)
 800882e:	f7ff facd 	bl	8007dcc <_PreparePacket>
 8008832:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008834:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <SEGGER_SYSVIEW_Stop+0x48>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800883c:	220b      	movs	r2, #11
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6838      	ldr	r0, [r7, #0]
 8008842:	f7ff fbb1 	bl	8007fa8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <SEGGER_SYSVIEW_Stop+0x48>)
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f383 8811 	msr	BASEPRI, r3
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20005f10 	.word	0x20005f10
 8008860:	20005ee0 	.word	0x20005ee0

08008864 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b08c      	sub	sp, #48	; 0x30
 8008868:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800886a:	f3ef 8311 	mrs	r3, BASEPRI
 800886e:	f04f 0120 	mov.w	r1, #32
 8008872:	f381 8811 	msr	BASEPRI, r1
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	4845      	ldr	r0, [pc, #276]	; (8008990 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800887a:	f7ff faa7 	bl	8007dcc <_PreparePacket>
 800887e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008888:	4b42      	ldr	r3, [pc, #264]	; (8008994 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	62bb      	str	r3, [r7, #40]	; 0x28
 800888e:	e00b      	b.n	80088a8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	b2da      	uxtb	r2, r3
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	1c59      	adds	r1, r3, #1
 8008898:	62f9      	str	r1, [r7, #44]	; 0x2c
 800889a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	09db      	lsrs	r3, r3, #7
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	2b7f      	cmp	r3, #127	; 0x7f
 80088ac:	d8f0      	bhi.n	8008890 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
 80088c2:	4b34      	ldr	r3, [pc, #208]	; (8008994 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	623b      	str	r3, [r7, #32]
 80088c8:	e00b      	b.n	80088e2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	1c59      	adds	r1, r3, #1
 80088d2:	6279      	str	r1, [r7, #36]	; 0x24
 80088d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	701a      	strb	r2, [r3, #0]
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	09db      	lsrs	r3, r3, #7
 80088e0:	623b      	str	r3, [r7, #32]
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	2b7f      	cmp	r3, #127	; 0x7f
 80088e6:	d8f0      	bhi.n	80088ca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	627a      	str	r2, [r7, #36]	; 0x24
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	b2d2      	uxtb	r2, r2
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	4b25      	ldr	r3, [pc, #148]	; (8008994 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	e00b      	b.n	800891c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	1c59      	adds	r1, r3, #1
 800890c:	61f9      	str	r1, [r7, #28]
 800890e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	09db      	lsrs	r3, r3, #7
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b7f      	cmp	r3, #127	; 0x7f
 8008920:	d8f0      	bhi.n	8008904 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	61fa      	str	r2, [r7, #28]
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	e00b      	b.n	8008954 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	b2da      	uxtb	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	1c59      	adds	r1, r3, #1
 8008944:	6179      	str	r1, [r7, #20]
 8008946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	09db      	lsrs	r3, r3, #7
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b7f      	cmp	r3, #127	; 0x7f
 8008958:	d8f0      	bhi.n	800893c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	617a      	str	r2, [r7, #20]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800896a:	2218      	movs	r2, #24
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	68b8      	ldr	r0, [r7, #8]
 8008970:	f7ff fb1a 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800897a:	4b06      	ldr	r3, [pc, #24]	; (8008994 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008982:	4b04      	ldr	r3, [pc, #16]	; (8008994 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	4798      	blx	r3
  }
}
 8008988:	bf00      	nop
 800898a:	3730      	adds	r7, #48	; 0x30
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20005f10 	.word	0x20005f10
 8008994:	20005ee0 	.word	0x20005ee0

08008998 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008998:	b580      	push	{r7, lr}
 800899a:	b092      	sub	sp, #72	; 0x48
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80089a0:	f3ef 8311 	mrs	r3, BASEPRI
 80089a4:	f04f 0120 	mov.w	r1, #32
 80089a8:	f381 8811 	msr	BASEPRI, r1
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	486a      	ldr	r0, [pc, #424]	; (8008b58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80089b0:	f7ff fa0c 	bl	8007dcc <_PreparePacket>
 80089b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	647b      	str	r3, [r7, #68]	; 0x44
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	4b66      	ldr	r3, [pc, #408]	; (8008b5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ca:	e00b      	b.n	80089e4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80089cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d2:	1c59      	adds	r1, r3, #1
 80089d4:	6479      	str	r1, [r7, #68]	; 0x44
 80089d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e0:	09db      	lsrs	r3, r3, #7
 80089e2:	643b      	str	r3, [r7, #64]	; 0x40
 80089e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e6:	2b7f      	cmp	r3, #127	; 0x7f
 80089e8:	d8f0      	bhi.n	80089cc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80089ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	647a      	str	r2, [r7, #68]	; 0x44
 80089f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	701a      	strb	r2, [r3, #0]
 80089f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a04:	e00b      	b.n	8008a1e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0c:	1c59      	adds	r1, r3, #1
 8008a0e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	09db      	lsrs	r3, r3, #7
 8008a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	2b7f      	cmp	r3, #127	; 0x7f
 8008a22:	d8f0      	bhi.n	8008a06 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a2c:	b2d2      	uxtb	r2, r2
 8008a2e:	701a      	strb	r2, [r3, #0]
 8008a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a32:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7ff f975 	bl	8007d2c <_EncodeStr>
 8008a42:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008a44:	2209      	movs	r2, #9
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	6938      	ldr	r0, [r7, #16]
 8008a4a:	f7ff faad 	bl	8007fa8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	633b      	str	r3, [r7, #48]	; 0x30
 8008a62:	e00b      	b.n	8008a7c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6a:	1c59      	adds	r1, r3, #1
 8008a6c:	6379      	str	r1, [r7, #52]	; 0x34
 8008a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	09db      	lsrs	r3, r3, #7
 8008a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a80:	d8f0      	bhi.n	8008a64 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	637a      	str	r2, [r7, #52]	; 0x34
 8008a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a9c:	e00b      	b.n	8008ab6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	1c59      	adds	r1, r3, #1
 8008aa6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	09db      	lsrs	r3, r3, #7
 8008ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8008aba:	d8f0      	bhi.n	8008a9e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	623b      	str	r3, [r7, #32]
 8008ad6:	e00b      	b.n	8008af0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	6279      	str	r1, [r7, #36]	; 0x24
 8008ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	09db      	lsrs	r3, r3, #7
 8008aee:	623b      	str	r3, [r7, #32]
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	2b7f      	cmp	r3, #127	; 0x7f
 8008af4:	d8f0      	bhi.n	8008ad8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	1c5a      	adds	r2, r3, #1
 8008afa:	627a      	str	r2, [r7, #36]	; 0x24
 8008afc:	6a3a      	ldr	r2, [r7, #32]
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	e00b      	b.n	8008b28 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	1c59      	adds	r1, r3, #1
 8008b18:	61f9      	str	r1, [r7, #28]
 8008b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	701a      	strb	r2, [r3, #0]
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	09db      	lsrs	r3, r3, #7
 8008b26:	61bb      	str	r3, [r7, #24]
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b2c:	d8f0      	bhi.n	8008b10 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	61fa      	str	r2, [r7, #28]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008b3e:	2215      	movs	r2, #21
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	6938      	ldr	r0, [r7, #16]
 8008b44:	f7ff fa30 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f383 8811 	msr	BASEPRI, r3
}
 8008b4e:	bf00      	nop
 8008b50:	3748      	adds	r7, #72	; 0x48
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20005f10 	.word	0x20005f10
 8008b5c:	20005ee0 	.word	0x20005ee0

08008b60 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d008      	beq.n	8008b7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008b6c:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	4798      	blx	r3
  }
}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20005ee0 	.word	0x20005ee0

08008b88 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b90:	f3ef 8311 	mrs	r3, BASEPRI
 8008b94:	f04f 0120 	mov.w	r1, #32
 8008b98:	f381 8811 	msr	BASEPRI, r1
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	480b      	ldr	r0, [pc, #44]	; (8008bcc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008ba0:	f7ff f914 	bl	8007dcc <_PreparePacket>
 8008ba4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ba6:	2280      	movs	r2, #128	; 0x80
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	6938      	ldr	r0, [r7, #16]
 8008bac:	f7ff f8be 	bl	8007d2c <_EncodeStr>
 8008bb0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008bb2:	220e      	movs	r2, #14
 8008bb4:	68f9      	ldr	r1, [r7, #12]
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f7ff f9f6 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f383 8811 	msr	BASEPRI, r3
}
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20005f10 	.word	0x20005f10

08008bd0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008bd0:	b590      	push	{r4, r7, lr}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008bd6:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01a      	beq.n	8008c14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d015      	beq.n	8008c14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008be8:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4798      	blx	r3
 8008bf0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008bf4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	000a      	movs	r2, r1
 8008c04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008c06:	4613      	mov	r3, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	200d      	movs	r0, #13
 8008c0e:	f7ff fbe7 	bl	80083e0 <SEGGER_SYSVIEW_RecordU32x2>
 8008c12:	e006      	b.n	8008c22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	200c      	movs	r0, #12
 8008c1c:	f7ff fba4 	bl	8008368 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd90      	pop	{r4, r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20005ee0 	.word	0x20005ee0
 8008c30:	e0001004 	.word	0xe0001004

08008c34 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8008c3e:	f04f 0120 	mov.w	r1, #32
 8008c42:	f381 8811 	msr	BASEPRI, r1
 8008c46:	607b      	str	r3, [r7, #4]
 8008c48:	4807      	ldr	r0, [pc, #28]	; (8008c68 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008c4a:	f7ff f8bf 	bl	8007dcc <_PreparePacket>
 8008c4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008c50:	2211      	movs	r2, #17
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6838      	ldr	r0, [r7, #0]
 8008c56:	f7ff f9a7 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f383 8811 	msr	BASEPRI, r3
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20005f10 	.word	0x20005f10

08008c6c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008c74:	f3ef 8311 	mrs	r3, BASEPRI
 8008c78:	f04f 0120 	mov.w	r1, #32
 8008c7c:	f381 8811 	msr	BASEPRI, r1
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	4819      	ldr	r0, [pc, #100]	; (8008ce8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008c84:	f7ff f8a2 	bl	8007dcc <_PreparePacket>
 8008c88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008c8e:	4b17      	ldr	r3, [pc, #92]	; (8008cec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	61bb      	str	r3, [r7, #24]
 8008ca0:	e00b      	b.n	8008cba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	1c59      	adds	r1, r3, #1
 8008caa:	61f9      	str	r1, [r7, #28]
 8008cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	09db      	lsrs	r3, r3, #7
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8008cbe:	d8f0      	bhi.n	8008ca2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	61fa      	str	r2, [r7, #28]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	6938      	ldr	r0, [r7, #16]
 8008cd6:	f7ff f967 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f383 8811 	msr	BASEPRI, r3
}
 8008ce0:	bf00      	nop
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20005f10 	.word	0x20005f10
 8008cec:	20005ee0 	.word	0x20005ee0

08008cf0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8008cfc:	f04f 0120 	mov.w	r1, #32
 8008d00:	f381 8811 	msr	BASEPRI, r1
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	4819      	ldr	r0, [pc, #100]	; (8008d6c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008d08:	f7ff f860 	bl	8007dcc <_PreparePacket>
 8008d0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008d12:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	61bb      	str	r3, [r7, #24]
 8008d24:	e00b      	b.n	8008d3e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	1c59      	adds	r1, r3, #1
 8008d2e:	61f9      	str	r1, [r7, #28]
 8008d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	09db      	lsrs	r3, r3, #7
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b7f      	cmp	r3, #127	; 0x7f
 8008d42:	d8f0      	bhi.n	8008d26 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	61fa      	str	r2, [r7, #28]
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008d54:	2204      	movs	r2, #4
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	6938      	ldr	r0, [r7, #16]
 8008d5a:	f7ff f925 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f383 8811 	msr	BASEPRI, r3
}
 8008d64:	bf00      	nop
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20005f10 	.word	0x20005f10
 8008d70:	20005ee0 	.word	0x20005ee0

08008d74 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008d7c:	f3ef 8311 	mrs	r3, BASEPRI
 8008d80:	f04f 0120 	mov.w	r1, #32
 8008d84:	f381 8811 	msr	BASEPRI, r1
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	4819      	ldr	r0, [pc, #100]	; (8008df0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008d8c:	f7ff f81e 	bl	8007dcc <_PreparePacket>
 8008d90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008d96:	4b17      	ldr	r3, [pc, #92]	; (8008df4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	61fb      	str	r3, [r7, #28]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	61bb      	str	r3, [r7, #24]
 8008da8:	e00b      	b.n	8008dc2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	1c59      	adds	r1, r3, #1
 8008db2:	61f9      	str	r1, [r7, #28]
 8008db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	09db      	lsrs	r3, r3, #7
 8008dc0:	61bb      	str	r3, [r7, #24]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8008dc6:	d8f0      	bhi.n	8008daa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	61fa      	str	r2, [r7, #28]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	b2d2      	uxtb	r2, r2
 8008dd2:	701a      	strb	r2, [r3, #0]
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008dd8:	2206      	movs	r2, #6
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	6938      	ldr	r0, [r7, #16]
 8008dde:	f7ff f8e3 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f383 8811 	msr	BASEPRI, r3
}
 8008de8:	bf00      	nop
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20005f10 	.word	0x20005f10
 8008df4:	20005ee0 	.word	0x20005ee0

08008df8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	1ad3      	subs	r3, r2, r3
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	20005ee0 	.word	0x20005ee0

08008e18 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08c      	sub	sp, #48	; 0x30
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008e22:	4b3b      	ldr	r3, [pc, #236]	; (8008f10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d06d      	beq.n	8008f06 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008e2a:	4b39      	ldr	r3, [pc, #228]	; (8008f10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008e30:	2300      	movs	r3, #0
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e34:	e008      	b.n	8008e48 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d007      	beq.n	8008e52 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	3301      	adds	r3, #1
 8008e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d3f2      	bcc.n	8008e36 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008e50:	e000      	b.n	8008e54 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008e52:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d055      	beq.n	8008f06 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e5e:	f04f 0120 	mov.w	r1, #32
 8008e62:	f381 8811 	msr	BASEPRI, r1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	482a      	ldr	r0, [pc, #168]	; (8008f14 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008e6a:	f7fe ffaf 	bl	8007dcc <_PreparePacket>
 8008e6e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	623b      	str	r3, [r7, #32]
 8008e7c:	e00b      	b.n	8008e96 <SEGGER_SYSVIEW_SendModule+0x7e>
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	1c59      	adds	r1, r3, #1
 8008e86:	6279      	str	r1, [r7, #36]	; 0x24
 8008e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	09db      	lsrs	r3, r3, #7
 8008e94:	623b      	str	r3, [r7, #32]
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	2b7f      	cmp	r3, #127	; 0x7f
 8008e9a:	d8f0      	bhi.n	8008e7e <SEGGER_SYSVIEW_SendModule+0x66>
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8008ea2:	6a3a      	ldr	r2, [r7, #32]
 8008ea4:	b2d2      	uxtb	r2, r2
 8008ea6:	701a      	strb	r2, [r3, #0]
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	e00b      	b.n	8008ed0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	61f9      	str	r1, [r7, #28]
 8008ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	09db      	lsrs	r3, r3, #7
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ed4:	d8f0      	bhi.n	8008eb8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	61fa      	str	r2, [r7, #28]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2280      	movs	r2, #128	; 0x80
 8008eec:	4619      	mov	r1, r3
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f7fe ff1c 	bl	8007d2c <_EncodeStr>
 8008ef4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008ef6:	2216      	movs	r2, #22
 8008ef8:	68f9      	ldr	r1, [r7, #12]
 8008efa:	6938      	ldr	r0, [r7, #16]
 8008efc:	f7ff f854 	bl	8007fa8 <_SendPacket>
      RECORD_END();
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008f06:	bf00      	nop
 8008f08:	3730      	adds	r7, #48	; 0x30
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20005f08 	.word	0x20005f08
 8008f14:	20005f10 	.word	0x20005f10

08008f18 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008f1e:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00f      	beq.n	8008f46 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008f26:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f2      	bne.n	8008f2c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20005f08 	.word	0x20005f08

08008f54 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f5e:	f04f 0120 	mov.w	r1, #32
 8008f62:	f381 8811 	msr	BASEPRI, r1
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	4817      	ldr	r0, [pc, #92]	; (8008fc8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008f6a:	f7fe ff2f 	bl	8007dcc <_PreparePacket>
 8008f6e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	e00b      	b.n	8008f98 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	1c59      	adds	r1, r3, #1
 8008f88:	6179      	str	r1, [r7, #20]
 8008f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	09db      	lsrs	r3, r3, #7
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f9c:	d8f0      	bhi.n	8008f80 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	617a      	str	r2, [r7, #20]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	b2d2      	uxtb	r2, r2
 8008fa8:	701a      	strb	r2, [r3, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008fae:	221b      	movs	r2, #27
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	68b8      	ldr	r0, [r7, #8]
 8008fb4:	f7fe fff8 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f383 8811 	msr	BASEPRI, r3
}
 8008fbe:	bf00      	nop
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20005f10 	.word	0x20005f10
 8008fcc:	20005f0c 	.word	0x20005f0c

08008fd0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8008fdc:	f04f 0120 	mov.w	r1, #32
 8008fe0:	f381 8811 	msr	BASEPRI, r1
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	4827      	ldr	r0, [pc, #156]	; (8009084 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008fe8:	f7fe fef0 	bl	8007dcc <_PreparePacket>
 8008fec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008fee:	2280      	movs	r2, #128	; 0x80
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	6938      	ldr	r0, [r7, #16]
 8008ff4:	f7fe fe9a 	bl	8007d2c <_EncodeStr>
 8008ff8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8008ffe:	2301      	movs	r3, #1
 8009000:	623b      	str	r3, [r7, #32]
 8009002:	e00b      	b.n	800901c <SEGGER_SYSVIEW_Warn+0x4c>
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	b2da      	uxtb	r2, r3
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	1c59      	adds	r1, r3, #1
 800900c:	6279      	str	r1, [r7, #36]	; 0x24
 800900e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009012:	b2d2      	uxtb	r2, r2
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	09db      	lsrs	r3, r3, #7
 800901a:	623b      	str	r3, [r7, #32]
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	2b7f      	cmp	r3, #127	; 0x7f
 8009020:	d8f0      	bhi.n	8009004 <SEGGER_SYSVIEW_Warn+0x34>
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	627a      	str	r2, [r7, #36]	; 0x24
 8009028:	6a3a      	ldr	r2, [r7, #32]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	2300      	movs	r3, #0
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e00b      	b.n	8009054 <SEGGER_SYSVIEW_Warn+0x84>
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	b2da      	uxtb	r2, r3
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	1c59      	adds	r1, r3, #1
 8009044:	61f9      	str	r1, [r7, #28]
 8009046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800904a:	b2d2      	uxtb	r2, r2
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	09db      	lsrs	r3, r3, #7
 8009052:	61bb      	str	r3, [r7, #24]
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	2b7f      	cmp	r3, #127	; 0x7f
 8009058:	d8f0      	bhi.n	800903c <SEGGER_SYSVIEW_Warn+0x6c>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	61fa      	str	r2, [r7, #28]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800906a:	221a      	movs	r2, #26
 800906c:	68f9      	ldr	r1, [r7, #12]
 800906e:	6938      	ldr	r0, [r7, #16]
 8009070:	f7fe ff9a 	bl	8007fa8 <_SendPacket>
  RECORD_END();
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f383 8811 	msr	BASEPRI, r3
}
 800907a:	bf00      	nop
 800907c:	3728      	adds	r7, #40	; 0x28
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20005f10 	.word	0x20005f10

08009088 <__errno>:
 8009088:	4b01      	ldr	r3, [pc, #4]	; (8009090 <__errno+0x8>)
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	20000010 	.word	0x20000010

08009094 <std>:
 8009094:	2300      	movs	r3, #0
 8009096:	b510      	push	{r4, lr}
 8009098:	4604      	mov	r4, r0
 800909a:	e9c0 3300 	strd	r3, r3, [r0]
 800909e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090a2:	6083      	str	r3, [r0, #8]
 80090a4:	8181      	strh	r1, [r0, #12]
 80090a6:	6643      	str	r3, [r0, #100]	; 0x64
 80090a8:	81c2      	strh	r2, [r0, #14]
 80090aa:	6183      	str	r3, [r0, #24]
 80090ac:	4619      	mov	r1, r3
 80090ae:	2208      	movs	r2, #8
 80090b0:	305c      	adds	r0, #92	; 0x5c
 80090b2:	f000 f92a 	bl	800930a <memset>
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x38>)
 80090b8:	6263      	str	r3, [r4, #36]	; 0x24
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <std+0x3c>)
 80090bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <std+0x40>)
 80090c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <std+0x44>)
 80090c4:	6224      	str	r4, [r4, #32]
 80090c6:	6323      	str	r3, [r4, #48]	; 0x30
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	bf00      	nop
 80090cc:	08009625 	.word	0x08009625
 80090d0:	08009647 	.word	0x08009647
 80090d4:	0800967f 	.word	0x0800967f
 80090d8:	080096a3 	.word	0x080096a3

080090dc <_cleanup_r>:
 80090dc:	4901      	ldr	r1, [pc, #4]	; (80090e4 <_cleanup_r+0x8>)
 80090de:	f000 b8af 	b.w	8009240 <_fwalk_reent>
 80090e2:	bf00      	nop
 80090e4:	0800997d 	.word	0x0800997d

080090e8 <__sfmoreglue>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	2268      	movs	r2, #104	; 0x68
 80090ec:	1e4d      	subs	r5, r1, #1
 80090ee:	4355      	muls	r5, r2
 80090f0:	460e      	mov	r6, r1
 80090f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090f6:	f000 f931 	bl	800935c <_malloc_r>
 80090fa:	4604      	mov	r4, r0
 80090fc:	b140      	cbz	r0, 8009110 <__sfmoreglue+0x28>
 80090fe:	2100      	movs	r1, #0
 8009100:	e9c0 1600 	strd	r1, r6, [r0]
 8009104:	300c      	adds	r0, #12
 8009106:	60a0      	str	r0, [r4, #8]
 8009108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800910c:	f000 f8fd 	bl	800930a <memset>
 8009110:	4620      	mov	r0, r4
 8009112:	bd70      	pop	{r4, r5, r6, pc}

08009114 <__sfp_lock_acquire>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_acquire+0x8>)
 8009116:	f000 b8d8 	b.w	80092ca <__retarget_lock_acquire_recursive>
 800911a:	bf00      	nop
 800911c:	20005ff4 	.word	0x20005ff4

08009120 <__sfp_lock_release>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sfp_lock_release+0x8>)
 8009122:	f000 b8d3 	b.w	80092cc <__retarget_lock_release_recursive>
 8009126:	bf00      	nop
 8009128:	20005ff4 	.word	0x20005ff4

0800912c <__sinit_lock_acquire>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_acquire+0x8>)
 800912e:	f000 b8cc 	b.w	80092ca <__retarget_lock_acquire_recursive>
 8009132:	bf00      	nop
 8009134:	20005ff5 	.word	0x20005ff5

08009138 <__sinit_lock_release>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__sinit_lock_release+0x8>)
 800913a:	f000 b8c7 	b.w	80092cc <__retarget_lock_release_recursive>
 800913e:	bf00      	nop
 8009140:	20005ff5 	.word	0x20005ff5

08009144 <__sinit>:
 8009144:	b510      	push	{r4, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	f7ff fff0 	bl	800912c <__sinit_lock_acquire>
 800914c:	69a3      	ldr	r3, [r4, #24]
 800914e:	b11b      	cbz	r3, 8009158 <__sinit+0x14>
 8009150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009154:	f7ff bff0 	b.w	8009138 <__sinit_lock_release>
 8009158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800915c:	6523      	str	r3, [r4, #80]	; 0x50
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <__sinit+0x68>)
 8009160:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <__sinit+0x6c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	62a2      	str	r2, [r4, #40]	; 0x28
 8009166:	42a3      	cmp	r3, r4
 8009168:	bf04      	itt	eq
 800916a:	2301      	moveq	r3, #1
 800916c:	61a3      	streq	r3, [r4, #24]
 800916e:	4620      	mov	r0, r4
 8009170:	f000 f820 	bl	80091b4 <__sfp>
 8009174:	6060      	str	r0, [r4, #4]
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f81c 	bl	80091b4 <__sfp>
 800917c:	60a0      	str	r0, [r4, #8]
 800917e:	4620      	mov	r0, r4
 8009180:	f000 f818 	bl	80091b4 <__sfp>
 8009184:	2200      	movs	r2, #0
 8009186:	60e0      	str	r0, [r4, #12]
 8009188:	2104      	movs	r1, #4
 800918a:	6860      	ldr	r0, [r4, #4]
 800918c:	f7ff ff82 	bl	8009094 <std>
 8009190:	68a0      	ldr	r0, [r4, #8]
 8009192:	2201      	movs	r2, #1
 8009194:	2109      	movs	r1, #9
 8009196:	f7ff ff7d 	bl	8009094 <std>
 800919a:	68e0      	ldr	r0, [r4, #12]
 800919c:	2202      	movs	r2, #2
 800919e:	2112      	movs	r1, #18
 80091a0:	f7ff ff78 	bl	8009094 <std>
 80091a4:	2301      	movs	r3, #1
 80091a6:	61a3      	str	r3, [r4, #24]
 80091a8:	e7d2      	b.n	8009150 <__sinit+0xc>
 80091aa:	bf00      	nop
 80091ac:	08009e20 	.word	0x08009e20
 80091b0:	080090dd 	.word	0x080090dd

080091b4 <__sfp>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	4607      	mov	r7, r0
 80091b8:	f7ff ffac 	bl	8009114 <__sfp_lock_acquire>
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <__sfp+0x84>)
 80091be:	681e      	ldr	r6, [r3, #0]
 80091c0:	69b3      	ldr	r3, [r6, #24]
 80091c2:	b913      	cbnz	r3, 80091ca <__sfp+0x16>
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff ffbd 	bl	8009144 <__sinit>
 80091ca:	3648      	adds	r6, #72	; 0x48
 80091cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	d503      	bpl.n	80091dc <__sfp+0x28>
 80091d4:	6833      	ldr	r3, [r6, #0]
 80091d6:	b30b      	cbz	r3, 800921c <__sfp+0x68>
 80091d8:	6836      	ldr	r6, [r6, #0]
 80091da:	e7f7      	b.n	80091cc <__sfp+0x18>
 80091dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091e0:	b9d5      	cbnz	r5, 8009218 <__sfp+0x64>
 80091e2:	4b16      	ldr	r3, [pc, #88]	; (800923c <__sfp+0x88>)
 80091e4:	60e3      	str	r3, [r4, #12]
 80091e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091ea:	6665      	str	r5, [r4, #100]	; 0x64
 80091ec:	f000 f86c 	bl	80092c8 <__retarget_lock_init_recursive>
 80091f0:	f7ff ff96 	bl	8009120 <__sfp_lock_release>
 80091f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091fc:	6025      	str	r5, [r4, #0]
 80091fe:	61a5      	str	r5, [r4, #24]
 8009200:	2208      	movs	r2, #8
 8009202:	4629      	mov	r1, r5
 8009204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009208:	f000 f87f 	bl	800930a <memset>
 800920c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009214:	4620      	mov	r0, r4
 8009216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009218:	3468      	adds	r4, #104	; 0x68
 800921a:	e7d9      	b.n	80091d0 <__sfp+0x1c>
 800921c:	2104      	movs	r1, #4
 800921e:	4638      	mov	r0, r7
 8009220:	f7ff ff62 	bl	80090e8 <__sfmoreglue>
 8009224:	4604      	mov	r4, r0
 8009226:	6030      	str	r0, [r6, #0]
 8009228:	2800      	cmp	r0, #0
 800922a:	d1d5      	bne.n	80091d8 <__sfp+0x24>
 800922c:	f7ff ff78 	bl	8009120 <__sfp_lock_release>
 8009230:	230c      	movs	r3, #12
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	e7ee      	b.n	8009214 <__sfp+0x60>
 8009236:	bf00      	nop
 8009238:	08009e20 	.word	0x08009e20
 800923c:	ffff0001 	.word	0xffff0001

08009240 <_fwalk_reent>:
 8009240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009244:	4606      	mov	r6, r0
 8009246:	4688      	mov	r8, r1
 8009248:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800924c:	2700      	movs	r7, #0
 800924e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009252:	f1b9 0901 	subs.w	r9, r9, #1
 8009256:	d505      	bpl.n	8009264 <_fwalk_reent+0x24>
 8009258:	6824      	ldr	r4, [r4, #0]
 800925a:	2c00      	cmp	r4, #0
 800925c:	d1f7      	bne.n	800924e <_fwalk_reent+0xe>
 800925e:	4638      	mov	r0, r7
 8009260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009264:	89ab      	ldrh	r3, [r5, #12]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d907      	bls.n	800927a <_fwalk_reent+0x3a>
 800926a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800926e:	3301      	adds	r3, #1
 8009270:	d003      	beq.n	800927a <_fwalk_reent+0x3a>
 8009272:	4629      	mov	r1, r5
 8009274:	4630      	mov	r0, r6
 8009276:	47c0      	blx	r8
 8009278:	4307      	orrs	r7, r0
 800927a:	3568      	adds	r5, #104	; 0x68
 800927c:	e7e9      	b.n	8009252 <_fwalk_reent+0x12>
	...

08009280 <__libc_init_array>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4d0d      	ldr	r5, [pc, #52]	; (80092b8 <__libc_init_array+0x38>)
 8009284:	4c0d      	ldr	r4, [pc, #52]	; (80092bc <__libc_init_array+0x3c>)
 8009286:	1b64      	subs	r4, r4, r5
 8009288:	10a4      	asrs	r4, r4, #2
 800928a:	2600      	movs	r6, #0
 800928c:	42a6      	cmp	r6, r4
 800928e:	d109      	bne.n	80092a4 <__libc_init_array+0x24>
 8009290:	4d0b      	ldr	r5, [pc, #44]	; (80092c0 <__libc_init_array+0x40>)
 8009292:	4c0c      	ldr	r4, [pc, #48]	; (80092c4 <__libc_init_array+0x44>)
 8009294:	f000 fcb2 	bl	8009bfc <_init>
 8009298:	1b64      	subs	r4, r4, r5
 800929a:	10a4      	asrs	r4, r4, #2
 800929c:	2600      	movs	r6, #0
 800929e:	42a6      	cmp	r6, r4
 80092a0:	d105      	bne.n	80092ae <__libc_init_array+0x2e>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a8:	4798      	blx	r3
 80092aa:	3601      	adds	r6, #1
 80092ac:	e7ee      	b.n	800928c <__libc_init_array+0xc>
 80092ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b2:	4798      	blx	r3
 80092b4:	3601      	adds	r6, #1
 80092b6:	e7f2      	b.n	800929e <__libc_init_array+0x1e>
 80092b8:	08009e2c 	.word	0x08009e2c
 80092bc:	08009e2c 	.word	0x08009e2c
 80092c0:	08009e2c 	.word	0x08009e2c
 80092c4:	08009e30 	.word	0x08009e30

080092c8 <__retarget_lock_init_recursive>:
 80092c8:	4770      	bx	lr

080092ca <__retarget_lock_acquire_recursive>:
 80092ca:	4770      	bx	lr

080092cc <__retarget_lock_release_recursive>:
 80092cc:	4770      	bx	lr

080092ce <memcmp>:
 80092ce:	b510      	push	{r4, lr}
 80092d0:	3901      	subs	r1, #1
 80092d2:	4402      	add	r2, r0
 80092d4:	4290      	cmp	r0, r2
 80092d6:	d101      	bne.n	80092dc <memcmp+0xe>
 80092d8:	2000      	movs	r0, #0
 80092da:	e005      	b.n	80092e8 <memcmp+0x1a>
 80092dc:	7803      	ldrb	r3, [r0, #0]
 80092de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	d001      	beq.n	80092ea <memcmp+0x1c>
 80092e6:	1b18      	subs	r0, r3, r4
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	3001      	adds	r0, #1
 80092ec:	e7f2      	b.n	80092d4 <memcmp+0x6>

080092ee <memcpy>:
 80092ee:	440a      	add	r2, r1
 80092f0:	4291      	cmp	r1, r2
 80092f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092f6:	d100      	bne.n	80092fa <memcpy+0xc>
 80092f8:	4770      	bx	lr
 80092fa:	b510      	push	{r4, lr}
 80092fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009300:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009304:	4291      	cmp	r1, r2
 8009306:	d1f9      	bne.n	80092fc <memcpy+0xe>
 8009308:	bd10      	pop	{r4, pc}

0800930a <memset>:
 800930a:	4402      	add	r2, r0
 800930c:	4603      	mov	r3, r0
 800930e:	4293      	cmp	r3, r2
 8009310:	d100      	bne.n	8009314 <memset+0xa>
 8009312:	4770      	bx	lr
 8009314:	f803 1b01 	strb.w	r1, [r3], #1
 8009318:	e7f9      	b.n	800930e <memset+0x4>
	...

0800931c <sbrk_aligned>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	4e0e      	ldr	r6, [pc, #56]	; (8009358 <sbrk_aligned+0x3c>)
 8009320:	460c      	mov	r4, r1
 8009322:	6831      	ldr	r1, [r6, #0]
 8009324:	4605      	mov	r5, r0
 8009326:	b911      	cbnz	r1, 800932e <sbrk_aligned+0x12>
 8009328:	f000 f96c 	bl	8009604 <_sbrk_r>
 800932c:	6030      	str	r0, [r6, #0]
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	f000 f967 	bl	8009604 <_sbrk_r>
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	d00a      	beq.n	8009350 <sbrk_aligned+0x34>
 800933a:	1cc4      	adds	r4, r0, #3
 800933c:	f024 0403 	bic.w	r4, r4, #3
 8009340:	42a0      	cmp	r0, r4
 8009342:	d007      	beq.n	8009354 <sbrk_aligned+0x38>
 8009344:	1a21      	subs	r1, r4, r0
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f95c 	bl	8009604 <_sbrk_r>
 800934c:	3001      	adds	r0, #1
 800934e:	d101      	bne.n	8009354 <sbrk_aligned+0x38>
 8009350:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009354:	4620      	mov	r0, r4
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	20005ffc 	.word	0x20005ffc

0800935c <_malloc_r>:
 800935c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009360:	1ccd      	adds	r5, r1, #3
 8009362:	f025 0503 	bic.w	r5, r5, #3
 8009366:	3508      	adds	r5, #8
 8009368:	2d0c      	cmp	r5, #12
 800936a:	bf38      	it	cc
 800936c:	250c      	movcc	r5, #12
 800936e:	2d00      	cmp	r5, #0
 8009370:	4607      	mov	r7, r0
 8009372:	db01      	blt.n	8009378 <_malloc_r+0x1c>
 8009374:	42a9      	cmp	r1, r5
 8009376:	d905      	bls.n	8009384 <_malloc_r+0x28>
 8009378:	230c      	movs	r3, #12
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	2600      	movs	r6, #0
 800937e:	4630      	mov	r0, r6
 8009380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009384:	4e2e      	ldr	r6, [pc, #184]	; (8009440 <_malloc_r+0xe4>)
 8009386:	f000 fbad 	bl	8009ae4 <__malloc_lock>
 800938a:	6833      	ldr	r3, [r6, #0]
 800938c:	461c      	mov	r4, r3
 800938e:	bb34      	cbnz	r4, 80093de <_malloc_r+0x82>
 8009390:	4629      	mov	r1, r5
 8009392:	4638      	mov	r0, r7
 8009394:	f7ff ffc2 	bl	800931c <sbrk_aligned>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	4604      	mov	r4, r0
 800939c:	d14d      	bne.n	800943a <_malloc_r+0xde>
 800939e:	6834      	ldr	r4, [r6, #0]
 80093a0:	4626      	mov	r6, r4
 80093a2:	2e00      	cmp	r6, #0
 80093a4:	d140      	bne.n	8009428 <_malloc_r+0xcc>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	4631      	mov	r1, r6
 80093aa:	4638      	mov	r0, r7
 80093ac:	eb04 0803 	add.w	r8, r4, r3
 80093b0:	f000 f928 	bl	8009604 <_sbrk_r>
 80093b4:	4580      	cmp	r8, r0
 80093b6:	d13a      	bne.n	800942e <_malloc_r+0xd2>
 80093b8:	6821      	ldr	r1, [r4, #0]
 80093ba:	3503      	adds	r5, #3
 80093bc:	1a6d      	subs	r5, r5, r1
 80093be:	f025 0503 	bic.w	r5, r5, #3
 80093c2:	3508      	adds	r5, #8
 80093c4:	2d0c      	cmp	r5, #12
 80093c6:	bf38      	it	cc
 80093c8:	250c      	movcc	r5, #12
 80093ca:	4629      	mov	r1, r5
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ffa5 	bl	800931c <sbrk_aligned>
 80093d2:	3001      	adds	r0, #1
 80093d4:	d02b      	beq.n	800942e <_malloc_r+0xd2>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	442b      	add	r3, r5
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	e00e      	b.n	80093fc <_malloc_r+0xa0>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	1b52      	subs	r2, r2, r5
 80093e2:	d41e      	bmi.n	8009422 <_malloc_r+0xc6>
 80093e4:	2a0b      	cmp	r2, #11
 80093e6:	d916      	bls.n	8009416 <_malloc_r+0xba>
 80093e8:	1961      	adds	r1, r4, r5
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	6025      	str	r5, [r4, #0]
 80093ee:	bf18      	it	ne
 80093f0:	6059      	strne	r1, [r3, #4]
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	bf08      	it	eq
 80093f6:	6031      	streq	r1, [r6, #0]
 80093f8:	5162      	str	r2, [r4, r5]
 80093fa:	604b      	str	r3, [r1, #4]
 80093fc:	4638      	mov	r0, r7
 80093fe:	f104 060b 	add.w	r6, r4, #11
 8009402:	f000 fb75 	bl	8009af0 <__malloc_unlock>
 8009406:	f026 0607 	bic.w	r6, r6, #7
 800940a:	1d23      	adds	r3, r4, #4
 800940c:	1af2      	subs	r2, r6, r3
 800940e:	d0b6      	beq.n	800937e <_malloc_r+0x22>
 8009410:	1b9b      	subs	r3, r3, r6
 8009412:	50a3      	str	r3, [r4, r2]
 8009414:	e7b3      	b.n	800937e <_malloc_r+0x22>
 8009416:	6862      	ldr	r2, [r4, #4]
 8009418:	42a3      	cmp	r3, r4
 800941a:	bf0c      	ite	eq
 800941c:	6032      	streq	r2, [r6, #0]
 800941e:	605a      	strne	r2, [r3, #4]
 8009420:	e7ec      	b.n	80093fc <_malloc_r+0xa0>
 8009422:	4623      	mov	r3, r4
 8009424:	6864      	ldr	r4, [r4, #4]
 8009426:	e7b2      	b.n	800938e <_malloc_r+0x32>
 8009428:	4634      	mov	r4, r6
 800942a:	6876      	ldr	r6, [r6, #4]
 800942c:	e7b9      	b.n	80093a2 <_malloc_r+0x46>
 800942e:	230c      	movs	r3, #12
 8009430:	603b      	str	r3, [r7, #0]
 8009432:	4638      	mov	r0, r7
 8009434:	f000 fb5c 	bl	8009af0 <__malloc_unlock>
 8009438:	e7a1      	b.n	800937e <_malloc_r+0x22>
 800943a:	6025      	str	r5, [r4, #0]
 800943c:	e7de      	b.n	80093fc <_malloc_r+0xa0>
 800943e:	bf00      	nop
 8009440:	20005ff8 	.word	0x20005ff8

08009444 <_puts_r>:
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	460e      	mov	r6, r1
 8009448:	4605      	mov	r5, r0
 800944a:	b118      	cbz	r0, 8009454 <_puts_r+0x10>
 800944c:	6983      	ldr	r3, [r0, #24]
 800944e:	b90b      	cbnz	r3, 8009454 <_puts_r+0x10>
 8009450:	f7ff fe78 	bl	8009144 <__sinit>
 8009454:	69ab      	ldr	r3, [r5, #24]
 8009456:	68ac      	ldr	r4, [r5, #8]
 8009458:	b913      	cbnz	r3, 8009460 <_puts_r+0x1c>
 800945a:	4628      	mov	r0, r5
 800945c:	f7ff fe72 	bl	8009144 <__sinit>
 8009460:	4b2c      	ldr	r3, [pc, #176]	; (8009514 <_puts_r+0xd0>)
 8009462:	429c      	cmp	r4, r3
 8009464:	d120      	bne.n	80094a8 <_puts_r+0x64>
 8009466:	686c      	ldr	r4, [r5, #4]
 8009468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800946a:	07db      	lsls	r3, r3, #31
 800946c:	d405      	bmi.n	800947a <_puts_r+0x36>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	0598      	lsls	r0, r3, #22
 8009472:	d402      	bmi.n	800947a <_puts_r+0x36>
 8009474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009476:	f7ff ff28 	bl	80092ca <__retarget_lock_acquire_recursive>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	0719      	lsls	r1, r3, #28
 800947e:	d51d      	bpl.n	80094bc <_puts_r+0x78>
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	b1db      	cbz	r3, 80094bc <_puts_r+0x78>
 8009484:	3e01      	subs	r6, #1
 8009486:	68a3      	ldr	r3, [r4, #8]
 8009488:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800948c:	3b01      	subs	r3, #1
 800948e:	60a3      	str	r3, [r4, #8]
 8009490:	bb39      	cbnz	r1, 80094e2 <_puts_r+0x9e>
 8009492:	2b00      	cmp	r3, #0
 8009494:	da38      	bge.n	8009508 <_puts_r+0xc4>
 8009496:	4622      	mov	r2, r4
 8009498:	210a      	movs	r1, #10
 800949a:	4628      	mov	r0, r5
 800949c:	f000 f906 	bl	80096ac <__swbuf_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d011      	beq.n	80094c8 <_puts_r+0x84>
 80094a4:	250a      	movs	r5, #10
 80094a6:	e011      	b.n	80094cc <_puts_r+0x88>
 80094a8:	4b1b      	ldr	r3, [pc, #108]	; (8009518 <_puts_r+0xd4>)
 80094aa:	429c      	cmp	r4, r3
 80094ac:	d101      	bne.n	80094b2 <_puts_r+0x6e>
 80094ae:	68ac      	ldr	r4, [r5, #8]
 80094b0:	e7da      	b.n	8009468 <_puts_r+0x24>
 80094b2:	4b1a      	ldr	r3, [pc, #104]	; (800951c <_puts_r+0xd8>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	bf08      	it	eq
 80094b8:	68ec      	ldreq	r4, [r5, #12]
 80094ba:	e7d5      	b.n	8009468 <_puts_r+0x24>
 80094bc:	4621      	mov	r1, r4
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 f958 	bl	8009774 <__swsetup_r>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d0dd      	beq.n	8009484 <_puts_r+0x40>
 80094c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80094cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094ce:	07da      	lsls	r2, r3, #31
 80094d0:	d405      	bmi.n	80094de <_puts_r+0x9a>
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	059b      	lsls	r3, r3, #22
 80094d6:	d402      	bmi.n	80094de <_puts_r+0x9a>
 80094d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094da:	f7ff fef7 	bl	80092cc <__retarget_lock_release_recursive>
 80094de:	4628      	mov	r0, r5
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	da04      	bge.n	80094f0 <_puts_r+0xac>
 80094e6:	69a2      	ldr	r2, [r4, #24]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	dc06      	bgt.n	80094fa <_puts_r+0xb6>
 80094ec:	290a      	cmp	r1, #10
 80094ee:	d004      	beq.n	80094fa <_puts_r+0xb6>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	6022      	str	r2, [r4, #0]
 80094f6:	7019      	strb	r1, [r3, #0]
 80094f8:	e7c5      	b.n	8009486 <_puts_r+0x42>
 80094fa:	4622      	mov	r2, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f8d5 	bl	80096ac <__swbuf_r>
 8009502:	3001      	adds	r0, #1
 8009504:	d1bf      	bne.n	8009486 <_puts_r+0x42>
 8009506:	e7df      	b.n	80094c8 <_puts_r+0x84>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	250a      	movs	r5, #10
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	6022      	str	r2, [r4, #0]
 8009510:	701d      	strb	r5, [r3, #0]
 8009512:	e7db      	b.n	80094cc <_puts_r+0x88>
 8009514:	08009de0 	.word	0x08009de0
 8009518:	08009e00 	.word	0x08009e00
 800951c:	08009dc0 	.word	0x08009dc0

08009520 <puts>:
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <puts+0xc>)
 8009522:	4601      	mov	r1, r0
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	f7ff bf8d 	b.w	8009444 <_puts_r>
 800952a:	bf00      	nop
 800952c:	20000010 	.word	0x20000010

08009530 <cleanup_glue>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	460c      	mov	r4, r1
 8009534:	6809      	ldr	r1, [r1, #0]
 8009536:	4605      	mov	r5, r0
 8009538:	b109      	cbz	r1, 800953e <cleanup_glue+0xe>
 800953a:	f7ff fff9 	bl	8009530 <cleanup_glue>
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009546:	f000 bad9 	b.w	8009afc <_free_r>
	...

0800954c <_reclaim_reent>:
 800954c:	4b2c      	ldr	r3, [pc, #176]	; (8009600 <_reclaim_reent+0xb4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4283      	cmp	r3, r0
 8009552:	b570      	push	{r4, r5, r6, lr}
 8009554:	4604      	mov	r4, r0
 8009556:	d051      	beq.n	80095fc <_reclaim_reent+0xb0>
 8009558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800955a:	b143      	cbz	r3, 800956e <_reclaim_reent+0x22>
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d14a      	bne.n	80095f8 <_reclaim_reent+0xac>
 8009562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009564:	6819      	ldr	r1, [r3, #0]
 8009566:	b111      	cbz	r1, 800956e <_reclaim_reent+0x22>
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fac7 	bl	8009afc <_free_r>
 800956e:	6961      	ldr	r1, [r4, #20]
 8009570:	b111      	cbz	r1, 8009578 <_reclaim_reent+0x2c>
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fac2 	bl	8009afc <_free_r>
 8009578:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800957a:	b111      	cbz	r1, 8009582 <_reclaim_reent+0x36>
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fabd 	bl	8009afc <_free_r>
 8009582:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009584:	b111      	cbz	r1, 800958c <_reclaim_reent+0x40>
 8009586:	4620      	mov	r0, r4
 8009588:	f000 fab8 	bl	8009afc <_free_r>
 800958c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800958e:	b111      	cbz	r1, 8009596 <_reclaim_reent+0x4a>
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fab3 	bl	8009afc <_free_r>
 8009596:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009598:	b111      	cbz	r1, 80095a0 <_reclaim_reent+0x54>
 800959a:	4620      	mov	r0, r4
 800959c:	f000 faae 	bl	8009afc <_free_r>
 80095a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80095a2:	b111      	cbz	r1, 80095aa <_reclaim_reent+0x5e>
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 faa9 	bl	8009afc <_free_r>
 80095aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80095ac:	b111      	cbz	r1, 80095b4 <_reclaim_reent+0x68>
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 faa4 	bl	8009afc <_free_r>
 80095b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b6:	b111      	cbz	r1, 80095be <_reclaim_reent+0x72>
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 fa9f 	bl	8009afc <_free_r>
 80095be:	69a3      	ldr	r3, [r4, #24]
 80095c0:	b1e3      	cbz	r3, 80095fc <_reclaim_reent+0xb0>
 80095c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095c4:	4620      	mov	r0, r4
 80095c6:	4798      	blx	r3
 80095c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80095ca:	b1b9      	cbz	r1, 80095fc <_reclaim_reent+0xb0>
 80095cc:	4620      	mov	r0, r4
 80095ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095d2:	f7ff bfad 	b.w	8009530 <cleanup_glue>
 80095d6:	5949      	ldr	r1, [r1, r5]
 80095d8:	b941      	cbnz	r1, 80095ec <_reclaim_reent+0xa0>
 80095da:	3504      	adds	r5, #4
 80095dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095de:	2d80      	cmp	r5, #128	; 0x80
 80095e0:	68d9      	ldr	r1, [r3, #12]
 80095e2:	d1f8      	bne.n	80095d6 <_reclaim_reent+0x8a>
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fa89 	bl	8009afc <_free_r>
 80095ea:	e7ba      	b.n	8009562 <_reclaim_reent+0x16>
 80095ec:	680e      	ldr	r6, [r1, #0]
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fa84 	bl	8009afc <_free_r>
 80095f4:	4631      	mov	r1, r6
 80095f6:	e7ef      	b.n	80095d8 <_reclaim_reent+0x8c>
 80095f8:	2500      	movs	r5, #0
 80095fa:	e7ef      	b.n	80095dc <_reclaim_reent+0x90>
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	bf00      	nop
 8009600:	20000010 	.word	0x20000010

08009604 <_sbrk_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d06      	ldr	r5, [pc, #24]	; (8009620 <_sbrk_r+0x1c>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	602b      	str	r3, [r5, #0]
 8009610:	f7f7 fd52 	bl	80010b8 <_sbrk>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_sbrk_r+0x1a>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_sbrk_r+0x1a>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	20006000 	.word	0x20006000

08009624 <__sread>:
 8009624:	b510      	push	{r4, lr}
 8009626:	460c      	mov	r4, r1
 8009628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962c:	f000 fab2 	bl	8009b94 <_read_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	bfab      	itete	ge
 8009634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009636:	89a3      	ldrhlt	r3, [r4, #12]
 8009638:	181b      	addge	r3, r3, r0
 800963a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800963e:	bfac      	ite	ge
 8009640:	6563      	strge	r3, [r4, #84]	; 0x54
 8009642:	81a3      	strhlt	r3, [r4, #12]
 8009644:	bd10      	pop	{r4, pc}

08009646 <__swrite>:
 8009646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	461f      	mov	r7, r3
 800964c:	898b      	ldrh	r3, [r1, #12]
 800964e:	05db      	lsls	r3, r3, #23
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	4616      	mov	r6, r2
 8009656:	d505      	bpl.n	8009664 <__swrite+0x1e>
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	2302      	movs	r3, #2
 800965e:	2200      	movs	r2, #0
 8009660:	f000 f9c8 	bl	80099f4 <_lseek_r>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	4632      	mov	r2, r6
 8009672:	463b      	mov	r3, r7
 8009674:	4628      	mov	r0, r5
 8009676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	f000 b869 	b.w	8009750 <_write_r>

0800967e <__sseek>:
 800967e:	b510      	push	{r4, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009686:	f000 f9b5 	bl	80099f4 <_lseek_r>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	bf15      	itete	ne
 8009690:	6560      	strne	r0, [r4, #84]	; 0x54
 8009692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800969a:	81a3      	strheq	r3, [r4, #12]
 800969c:	bf18      	it	ne
 800969e:	81a3      	strhne	r3, [r4, #12]
 80096a0:	bd10      	pop	{r4, pc}

080096a2 <__sclose>:
 80096a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a6:	f000 b8d3 	b.w	8009850 <_close_r>
	...

080096ac <__swbuf_r>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	460e      	mov	r6, r1
 80096b0:	4614      	mov	r4, r2
 80096b2:	4605      	mov	r5, r0
 80096b4:	b118      	cbz	r0, 80096be <__swbuf_r+0x12>
 80096b6:	6983      	ldr	r3, [r0, #24]
 80096b8:	b90b      	cbnz	r3, 80096be <__swbuf_r+0x12>
 80096ba:	f7ff fd43 	bl	8009144 <__sinit>
 80096be:	4b21      	ldr	r3, [pc, #132]	; (8009744 <__swbuf_r+0x98>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	d12b      	bne.n	800971c <__swbuf_r+0x70>
 80096c4:	686c      	ldr	r4, [r5, #4]
 80096c6:	69a3      	ldr	r3, [r4, #24]
 80096c8:	60a3      	str	r3, [r4, #8]
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	071a      	lsls	r2, r3, #28
 80096ce:	d52f      	bpl.n	8009730 <__swbuf_r+0x84>
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	b36b      	cbz	r3, 8009730 <__swbuf_r+0x84>
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	6820      	ldr	r0, [r4, #0]
 80096d8:	1ac0      	subs	r0, r0, r3
 80096da:	6963      	ldr	r3, [r4, #20]
 80096dc:	b2f6      	uxtb	r6, r6
 80096de:	4283      	cmp	r3, r0
 80096e0:	4637      	mov	r7, r6
 80096e2:	dc04      	bgt.n	80096ee <__swbuf_r+0x42>
 80096e4:	4621      	mov	r1, r4
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f948 	bl	800997c <_fflush_r>
 80096ec:	bb30      	cbnz	r0, 800973c <__swbuf_r+0x90>
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	60a3      	str	r3, [r4, #8]
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	6022      	str	r2, [r4, #0]
 80096fa:	701e      	strb	r6, [r3, #0]
 80096fc:	6963      	ldr	r3, [r4, #20]
 80096fe:	3001      	adds	r0, #1
 8009700:	4283      	cmp	r3, r0
 8009702:	d004      	beq.n	800970e <__swbuf_r+0x62>
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	07db      	lsls	r3, r3, #31
 8009708:	d506      	bpl.n	8009718 <__swbuf_r+0x6c>
 800970a:	2e0a      	cmp	r6, #10
 800970c:	d104      	bne.n	8009718 <__swbuf_r+0x6c>
 800970e:	4621      	mov	r1, r4
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f933 	bl	800997c <_fflush_r>
 8009716:	b988      	cbnz	r0, 800973c <__swbuf_r+0x90>
 8009718:	4638      	mov	r0, r7
 800971a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <__swbuf_r+0x9c>)
 800971e:	429c      	cmp	r4, r3
 8009720:	d101      	bne.n	8009726 <__swbuf_r+0x7a>
 8009722:	68ac      	ldr	r4, [r5, #8]
 8009724:	e7cf      	b.n	80096c6 <__swbuf_r+0x1a>
 8009726:	4b09      	ldr	r3, [pc, #36]	; (800974c <__swbuf_r+0xa0>)
 8009728:	429c      	cmp	r4, r3
 800972a:	bf08      	it	eq
 800972c:	68ec      	ldreq	r4, [r5, #12]
 800972e:	e7ca      	b.n	80096c6 <__swbuf_r+0x1a>
 8009730:	4621      	mov	r1, r4
 8009732:	4628      	mov	r0, r5
 8009734:	f000 f81e 	bl	8009774 <__swsetup_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	d0cb      	beq.n	80096d4 <__swbuf_r+0x28>
 800973c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009740:	e7ea      	b.n	8009718 <__swbuf_r+0x6c>
 8009742:	bf00      	nop
 8009744:	08009de0 	.word	0x08009de0
 8009748:	08009e00 	.word	0x08009e00
 800974c:	08009dc0 	.word	0x08009dc0

08009750 <_write_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	4d07      	ldr	r5, [pc, #28]	; (8009770 <_write_r+0x20>)
 8009754:	4604      	mov	r4, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	2200      	movs	r2, #0
 800975c:	602a      	str	r2, [r5, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	f7f7 fc59 	bl	8001016 <_write>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_write_r+0x1e>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_write_r+0x1e>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20006000 	.word	0x20006000

08009774 <__swsetup_r>:
 8009774:	4b32      	ldr	r3, [pc, #200]	; (8009840 <__swsetup_r+0xcc>)
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	681d      	ldr	r5, [r3, #0]
 800977a:	4606      	mov	r6, r0
 800977c:	460c      	mov	r4, r1
 800977e:	b125      	cbz	r5, 800978a <__swsetup_r+0x16>
 8009780:	69ab      	ldr	r3, [r5, #24]
 8009782:	b913      	cbnz	r3, 800978a <__swsetup_r+0x16>
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff fcdd 	bl	8009144 <__sinit>
 800978a:	4b2e      	ldr	r3, [pc, #184]	; (8009844 <__swsetup_r+0xd0>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d10f      	bne.n	80097b0 <__swsetup_r+0x3c>
 8009790:	686c      	ldr	r4, [r5, #4]
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009798:	0719      	lsls	r1, r3, #28
 800979a:	d42c      	bmi.n	80097f6 <__swsetup_r+0x82>
 800979c:	06dd      	lsls	r5, r3, #27
 800979e:	d411      	bmi.n	80097c4 <__swsetup_r+0x50>
 80097a0:	2309      	movs	r3, #9
 80097a2:	6033      	str	r3, [r6, #0]
 80097a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ae:	e03e      	b.n	800982e <__swsetup_r+0xba>
 80097b0:	4b25      	ldr	r3, [pc, #148]	; (8009848 <__swsetup_r+0xd4>)
 80097b2:	429c      	cmp	r4, r3
 80097b4:	d101      	bne.n	80097ba <__swsetup_r+0x46>
 80097b6:	68ac      	ldr	r4, [r5, #8]
 80097b8:	e7eb      	b.n	8009792 <__swsetup_r+0x1e>
 80097ba:	4b24      	ldr	r3, [pc, #144]	; (800984c <__swsetup_r+0xd8>)
 80097bc:	429c      	cmp	r4, r3
 80097be:	bf08      	it	eq
 80097c0:	68ec      	ldreq	r4, [r5, #12]
 80097c2:	e7e6      	b.n	8009792 <__swsetup_r+0x1e>
 80097c4:	0758      	lsls	r0, r3, #29
 80097c6:	d512      	bpl.n	80097ee <__swsetup_r+0x7a>
 80097c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ca:	b141      	cbz	r1, 80097de <__swsetup_r+0x6a>
 80097cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d0:	4299      	cmp	r1, r3
 80097d2:	d002      	beq.n	80097da <__swsetup_r+0x66>
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 f991 	bl	8009afc <_free_r>
 80097da:	2300      	movs	r3, #0
 80097dc:	6363      	str	r3, [r4, #52]	; 0x34
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	2300      	movs	r3, #0
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f043 0308 	orr.w	r3, r3, #8
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	b94b      	cbnz	r3, 800980e <__swsetup_r+0x9a>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009804:	d003      	beq.n	800980e <__swsetup_r+0x9a>
 8009806:	4621      	mov	r1, r4
 8009808:	4630      	mov	r0, r6
 800980a:	f000 f92b 	bl	8009a64 <__smakebuf_r>
 800980e:	89a0      	ldrh	r0, [r4, #12]
 8009810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009814:	f010 0301 	ands.w	r3, r0, #1
 8009818:	d00a      	beq.n	8009830 <__swsetup_r+0xbc>
 800981a:	2300      	movs	r3, #0
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	6963      	ldr	r3, [r4, #20]
 8009820:	425b      	negs	r3, r3
 8009822:	61a3      	str	r3, [r4, #24]
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	b943      	cbnz	r3, 800983a <__swsetup_r+0xc6>
 8009828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800982c:	d1ba      	bne.n	80097a4 <__swsetup_r+0x30>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	0781      	lsls	r1, r0, #30
 8009832:	bf58      	it	pl
 8009834:	6963      	ldrpl	r3, [r4, #20]
 8009836:	60a3      	str	r3, [r4, #8]
 8009838:	e7f4      	b.n	8009824 <__swsetup_r+0xb0>
 800983a:	2000      	movs	r0, #0
 800983c:	e7f7      	b.n	800982e <__swsetup_r+0xba>
 800983e:	bf00      	nop
 8009840:	20000010 	.word	0x20000010
 8009844:	08009de0 	.word	0x08009de0
 8009848:	08009e00 	.word	0x08009e00
 800984c:	08009dc0 	.word	0x08009dc0

08009850 <_close_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	; (800986c <_close_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7f7 fbf7 	bl	800104e <_close>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_close_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_close_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20006000 	.word	0x20006000

08009870 <__sflush_r>:
 8009870:	898a      	ldrh	r2, [r1, #12]
 8009872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	0710      	lsls	r0, r2, #28
 800987a:	460c      	mov	r4, r1
 800987c:	d458      	bmi.n	8009930 <__sflush_r+0xc0>
 800987e:	684b      	ldr	r3, [r1, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	dc05      	bgt.n	8009890 <__sflush_r+0x20>
 8009884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	dc02      	bgt.n	8009890 <__sflush_r+0x20>
 800988a:	2000      	movs	r0, #0
 800988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009892:	2e00      	cmp	r6, #0
 8009894:	d0f9      	beq.n	800988a <__sflush_r+0x1a>
 8009896:	2300      	movs	r3, #0
 8009898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800989c:	682f      	ldr	r7, [r5, #0]
 800989e:	602b      	str	r3, [r5, #0]
 80098a0:	d032      	beq.n	8009908 <__sflush_r+0x98>
 80098a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	075a      	lsls	r2, r3, #29
 80098a8:	d505      	bpl.n	80098b6 <__sflush_r+0x46>
 80098aa:	6863      	ldr	r3, [r4, #4]
 80098ac:	1ac0      	subs	r0, r0, r3
 80098ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b0:	b10b      	cbz	r3, 80098b6 <__sflush_r+0x46>
 80098b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098b4:	1ac0      	subs	r0, r0, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	4602      	mov	r2, r0
 80098ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	4628      	mov	r0, r5
 80098c0:	47b0      	blx	r6
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	d106      	bne.n	80098d6 <__sflush_r+0x66>
 80098c8:	6829      	ldr	r1, [r5, #0]
 80098ca:	291d      	cmp	r1, #29
 80098cc:	d82c      	bhi.n	8009928 <__sflush_r+0xb8>
 80098ce:	4a2a      	ldr	r2, [pc, #168]	; (8009978 <__sflush_r+0x108>)
 80098d0:	40ca      	lsrs	r2, r1
 80098d2:	07d6      	lsls	r6, r2, #31
 80098d4:	d528      	bpl.n	8009928 <__sflush_r+0xb8>
 80098d6:	2200      	movs	r2, #0
 80098d8:	6062      	str	r2, [r4, #4]
 80098da:	04d9      	lsls	r1, r3, #19
 80098dc:	6922      	ldr	r2, [r4, #16]
 80098de:	6022      	str	r2, [r4, #0]
 80098e0:	d504      	bpl.n	80098ec <__sflush_r+0x7c>
 80098e2:	1c42      	adds	r2, r0, #1
 80098e4:	d101      	bne.n	80098ea <__sflush_r+0x7a>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	b903      	cbnz	r3, 80098ec <__sflush_r+0x7c>
 80098ea:	6560      	str	r0, [r4, #84]	; 0x54
 80098ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ee:	602f      	str	r7, [r5, #0]
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d0ca      	beq.n	800988a <__sflush_r+0x1a>
 80098f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d002      	beq.n	8009902 <__sflush_r+0x92>
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 f8fd 	bl	8009afc <_free_r>
 8009902:	2000      	movs	r0, #0
 8009904:	6360      	str	r0, [r4, #52]	; 0x34
 8009906:	e7c1      	b.n	800988c <__sflush_r+0x1c>
 8009908:	6a21      	ldr	r1, [r4, #32]
 800990a:	2301      	movs	r3, #1
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	1c41      	adds	r1, r0, #1
 8009912:	d1c7      	bne.n	80098a4 <__sflush_r+0x34>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c4      	beq.n	80098a4 <__sflush_r+0x34>
 800991a:	2b1d      	cmp	r3, #29
 800991c:	d001      	beq.n	8009922 <__sflush_r+0xb2>
 800991e:	2b16      	cmp	r3, #22
 8009920:	d101      	bne.n	8009926 <__sflush_r+0xb6>
 8009922:	602f      	str	r7, [r5, #0]
 8009924:	e7b1      	b.n	800988a <__sflush_r+0x1a>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7ad      	b.n	800988c <__sflush_r+0x1c>
 8009930:	690f      	ldr	r7, [r1, #16]
 8009932:	2f00      	cmp	r7, #0
 8009934:	d0a9      	beq.n	800988a <__sflush_r+0x1a>
 8009936:	0793      	lsls	r3, r2, #30
 8009938:	680e      	ldr	r6, [r1, #0]
 800993a:	bf08      	it	eq
 800993c:	694b      	ldreq	r3, [r1, #20]
 800993e:	600f      	str	r7, [r1, #0]
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	eba6 0807 	sub.w	r8, r6, r7
 8009948:	608b      	str	r3, [r1, #8]
 800994a:	f1b8 0f00 	cmp.w	r8, #0
 800994e:	dd9c      	ble.n	800988a <__sflush_r+0x1a>
 8009950:	6a21      	ldr	r1, [r4, #32]
 8009952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009954:	4643      	mov	r3, r8
 8009956:	463a      	mov	r2, r7
 8009958:	4628      	mov	r0, r5
 800995a:	47b0      	blx	r6
 800995c:	2800      	cmp	r0, #0
 800995e:	dc06      	bgt.n	800996e <__sflush_r+0xfe>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800996c:	e78e      	b.n	800988c <__sflush_r+0x1c>
 800996e:	4407      	add	r7, r0
 8009970:	eba8 0800 	sub.w	r8, r8, r0
 8009974:	e7e9      	b.n	800994a <__sflush_r+0xda>
 8009976:	bf00      	nop
 8009978:	20400001 	.word	0x20400001

0800997c <_fflush_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	690b      	ldr	r3, [r1, #16]
 8009980:	4605      	mov	r5, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b913      	cbnz	r3, 800998c <_fflush_r+0x10>
 8009986:	2500      	movs	r5, #0
 8009988:	4628      	mov	r0, r5
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	b118      	cbz	r0, 8009996 <_fflush_r+0x1a>
 800998e:	6983      	ldr	r3, [r0, #24]
 8009990:	b90b      	cbnz	r3, 8009996 <_fflush_r+0x1a>
 8009992:	f7ff fbd7 	bl	8009144 <__sinit>
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <_fflush_r+0x6c>)
 8009998:	429c      	cmp	r4, r3
 800999a:	d11b      	bne.n	80099d4 <_fflush_r+0x58>
 800999c:	686c      	ldr	r4, [r5, #4]
 800999e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0ef      	beq.n	8009986 <_fflush_r+0xa>
 80099a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a8:	07d0      	lsls	r0, r2, #31
 80099aa:	d404      	bmi.n	80099b6 <_fflush_r+0x3a>
 80099ac:	0599      	lsls	r1, r3, #22
 80099ae:	d402      	bmi.n	80099b6 <_fflush_r+0x3a>
 80099b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b2:	f7ff fc8a 	bl	80092ca <__retarget_lock_acquire_recursive>
 80099b6:	4628      	mov	r0, r5
 80099b8:	4621      	mov	r1, r4
 80099ba:	f7ff ff59 	bl	8009870 <__sflush_r>
 80099be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c0:	07da      	lsls	r2, r3, #31
 80099c2:	4605      	mov	r5, r0
 80099c4:	d4e0      	bmi.n	8009988 <_fflush_r+0xc>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	059b      	lsls	r3, r3, #22
 80099ca:	d4dd      	bmi.n	8009988 <_fflush_r+0xc>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f7ff fc7d 	bl	80092cc <__retarget_lock_release_recursive>
 80099d2:	e7d9      	b.n	8009988 <_fflush_r+0xc>
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <_fflush_r+0x70>)
 80099d6:	429c      	cmp	r4, r3
 80099d8:	d101      	bne.n	80099de <_fflush_r+0x62>
 80099da:	68ac      	ldr	r4, [r5, #8]
 80099dc:	e7df      	b.n	800999e <_fflush_r+0x22>
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <_fflush_r+0x74>)
 80099e0:	429c      	cmp	r4, r3
 80099e2:	bf08      	it	eq
 80099e4:	68ec      	ldreq	r4, [r5, #12]
 80099e6:	e7da      	b.n	800999e <_fflush_r+0x22>
 80099e8:	08009de0 	.word	0x08009de0
 80099ec:	08009e00 	.word	0x08009e00
 80099f0:	08009dc0 	.word	0x08009dc0

080099f4 <_lseek_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_lseek_r+0x20>)
 80099f8:	4604      	mov	r4, r0
 80099fa:	4608      	mov	r0, r1
 80099fc:	4611      	mov	r1, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	602a      	str	r2, [r5, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	f7f7 fb4a 	bl	800109c <_lseek>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_lseek_r+0x1e>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_lseek_r+0x1e>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	20006000 	.word	0x20006000

08009a18 <__swhatbuf_r>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	460e      	mov	r6, r1
 8009a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a20:	2900      	cmp	r1, #0
 8009a22:	b096      	sub	sp, #88	; 0x58
 8009a24:	4614      	mov	r4, r2
 8009a26:	461d      	mov	r5, r3
 8009a28:	da08      	bge.n	8009a3c <__swhatbuf_r+0x24>
 8009a2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	602a      	str	r2, [r5, #0]
 8009a32:	061a      	lsls	r2, r3, #24
 8009a34:	d410      	bmi.n	8009a58 <__swhatbuf_r+0x40>
 8009a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a3a:	e00e      	b.n	8009a5a <__swhatbuf_r+0x42>
 8009a3c:	466a      	mov	r2, sp
 8009a3e:	f000 f8bb 	bl	8009bb8 <_fstat_r>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	dbf1      	blt.n	8009a2a <__swhatbuf_r+0x12>
 8009a46:	9a01      	ldr	r2, [sp, #4]
 8009a48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a50:	425a      	negs	r2, r3
 8009a52:	415a      	adcs	r2, r3
 8009a54:	602a      	str	r2, [r5, #0]
 8009a56:	e7ee      	b.n	8009a36 <__swhatbuf_r+0x1e>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	b016      	add	sp, #88	; 0x58
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a64 <__smakebuf_r>:
 8009a64:	898b      	ldrh	r3, [r1, #12]
 8009a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a68:	079d      	lsls	r5, r3, #30
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	d507      	bpl.n	8009a80 <__smakebuf_r+0x1c>
 8009a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	6123      	str	r3, [r4, #16]
 8009a78:	2301      	movs	r3, #1
 8009a7a:	6163      	str	r3, [r4, #20]
 8009a7c:	b002      	add	sp, #8
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	ab01      	add	r3, sp, #4
 8009a82:	466a      	mov	r2, sp
 8009a84:	f7ff ffc8 	bl	8009a18 <__swhatbuf_r>
 8009a88:	9900      	ldr	r1, [sp, #0]
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff fc65 	bl	800935c <_malloc_r>
 8009a92:	b948      	cbnz	r0, 8009aa8 <__smakebuf_r+0x44>
 8009a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a98:	059a      	lsls	r2, r3, #22
 8009a9a:	d4ef      	bmi.n	8009a7c <__smakebuf_r+0x18>
 8009a9c:	f023 0303 	bic.w	r3, r3, #3
 8009aa0:	f043 0302 	orr.w	r3, r3, #2
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	e7e3      	b.n	8009a70 <__smakebuf_r+0xc>
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <__smakebuf_r+0x7c>)
 8009aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	9b00      	ldr	r3, [sp, #0]
 8009ab8:	6163      	str	r3, [r4, #20]
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	6120      	str	r0, [r4, #16]
 8009abe:	b15b      	cbz	r3, 8009ad8 <__smakebuf_r+0x74>
 8009ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f889 	bl	8009bdc <_isatty_r>
 8009aca:	b128      	cbz	r0, 8009ad8 <__smakebuf_r+0x74>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	f043 0301 	orr.w	r3, r3, #1
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	89a0      	ldrh	r0, [r4, #12]
 8009ada:	4305      	orrs	r5, r0
 8009adc:	81a5      	strh	r5, [r4, #12]
 8009ade:	e7cd      	b.n	8009a7c <__smakebuf_r+0x18>
 8009ae0:	080090dd 	.word	0x080090dd

08009ae4 <__malloc_lock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	; (8009aec <__malloc_lock+0x8>)
 8009ae6:	f7ff bbf0 	b.w	80092ca <__retarget_lock_acquire_recursive>
 8009aea:	bf00      	nop
 8009aec:	20005ff3 	.word	0x20005ff3

08009af0 <__malloc_unlock>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__malloc_unlock+0x8>)
 8009af2:	f7ff bbeb 	b.w	80092cc <__retarget_lock_release_recursive>
 8009af6:	bf00      	nop
 8009af8:	20005ff3 	.word	0x20005ff3

08009afc <_free_r>:
 8009afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afe:	2900      	cmp	r1, #0
 8009b00:	d044      	beq.n	8009b8c <_free_r+0x90>
 8009b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b06:	9001      	str	r0, [sp, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b0e:	bfb8      	it	lt
 8009b10:	18e4      	addlt	r4, r4, r3
 8009b12:	f7ff ffe7 	bl	8009ae4 <__malloc_lock>
 8009b16:	4a1e      	ldr	r2, [pc, #120]	; (8009b90 <_free_r+0x94>)
 8009b18:	9801      	ldr	r0, [sp, #4]
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	b933      	cbnz	r3, 8009b2c <_free_r+0x30>
 8009b1e:	6063      	str	r3, [r4, #4]
 8009b20:	6014      	str	r4, [r2, #0]
 8009b22:	b003      	add	sp, #12
 8009b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b28:	f7ff bfe2 	b.w	8009af0 <__malloc_unlock>
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d908      	bls.n	8009b42 <_free_r+0x46>
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	1961      	adds	r1, r4, r5
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf01      	itttt	eq
 8009b38:	6819      	ldreq	r1, [r3, #0]
 8009b3a:	685b      	ldreq	r3, [r3, #4]
 8009b3c:	1949      	addeq	r1, r1, r5
 8009b3e:	6021      	streq	r1, [r4, #0]
 8009b40:	e7ed      	b.n	8009b1e <_free_r+0x22>
 8009b42:	461a      	mov	r2, r3
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	b10b      	cbz	r3, 8009b4c <_free_r+0x50>
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	d9fa      	bls.n	8009b42 <_free_r+0x46>
 8009b4c:	6811      	ldr	r1, [r2, #0]
 8009b4e:	1855      	adds	r5, r2, r1
 8009b50:	42a5      	cmp	r5, r4
 8009b52:	d10b      	bne.n	8009b6c <_free_r+0x70>
 8009b54:	6824      	ldr	r4, [r4, #0]
 8009b56:	4421      	add	r1, r4
 8009b58:	1854      	adds	r4, r2, r1
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6011      	str	r1, [r2, #0]
 8009b5e:	d1e0      	bne.n	8009b22 <_free_r+0x26>
 8009b60:	681c      	ldr	r4, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6053      	str	r3, [r2, #4]
 8009b66:	4421      	add	r1, r4
 8009b68:	6011      	str	r1, [r2, #0]
 8009b6a:	e7da      	b.n	8009b22 <_free_r+0x26>
 8009b6c:	d902      	bls.n	8009b74 <_free_r+0x78>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6003      	str	r3, [r0, #0]
 8009b72:	e7d6      	b.n	8009b22 <_free_r+0x26>
 8009b74:	6825      	ldr	r5, [r4, #0]
 8009b76:	1961      	adds	r1, r4, r5
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	bf04      	itt	eq
 8009b7c:	6819      	ldreq	r1, [r3, #0]
 8009b7e:	685b      	ldreq	r3, [r3, #4]
 8009b80:	6063      	str	r3, [r4, #4]
 8009b82:	bf04      	itt	eq
 8009b84:	1949      	addeq	r1, r1, r5
 8009b86:	6021      	streq	r1, [r4, #0]
 8009b88:	6054      	str	r4, [r2, #4]
 8009b8a:	e7ca      	b.n	8009b22 <_free_r+0x26>
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bd30      	pop	{r4, r5, pc}
 8009b90:	20005ff8 	.word	0x20005ff8

08009b94 <_read_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d07      	ldr	r5, [pc, #28]	; (8009bb4 <_read_r+0x20>)
 8009b98:	4604      	mov	r4, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f7 fa1a 	bl	8000fdc <_read>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_read_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_read_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20006000 	.word	0x20006000

08009bb8 <_fstat_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d07      	ldr	r5, [pc, #28]	; (8009bd8 <_fstat_r+0x20>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	f7f7 fa4e 	bl	8001066 <_fstat>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	d102      	bne.n	8009bd4 <_fstat_r+0x1c>
 8009bce:	682b      	ldr	r3, [r5, #0]
 8009bd0:	b103      	cbz	r3, 8009bd4 <_fstat_r+0x1c>
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20006000 	.word	0x20006000

08009bdc <_isatty_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_isatty_r+0x1c>)
 8009be0:	2300      	movs	r3, #0
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f7 fa4d 	bl	8001086 <_isatty>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_isatty_r+0x1a>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_isatty_r+0x1a>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	20006000 	.word	0x20006000

08009bfc <_init>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	bf00      	nop
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr

08009c08 <_fini>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr
