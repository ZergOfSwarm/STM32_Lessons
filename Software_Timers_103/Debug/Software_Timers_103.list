
Software_Timers_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005428  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005680  08005680  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005680  08005680  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005680  08005680  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c4  2000007c  08005704  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001740  08005704  00021740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148c0  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a4  00000000  00000000  00034965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  00037c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00038ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a48c  00000000  00000000  0003a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001301d  00000000  00000000  00054504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a82  00000000  00000000  00067521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbfa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  000fbff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005520 	.word	0x08005520

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005520 	.word	0x08005520

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000098 	.word	0x20000098
 800017c:	2000014c 	.word	0x2000014c

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000034c 	.word	0x2000034c
 80001b0:	20000400 	.word	0x20000400

080001b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001c4:	f003 0301 	and.w	r3, r3, #1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d013      	beq.n	80001f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d00b      	beq.n	80001f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001dc:	e000      	b.n	80001e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f9      	beq.n	80001de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	b2d2      	uxtb	r2, r2
 80001f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001f4:	687b      	ldr	r3, [r7, #4]
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <_write>:
void Callback_ON(void const * argument);
void Callback_OFF(void const * argument);
void Once_Callback(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	b29a      	uxth	r2, r3
 8000210:	2332      	movs	r3, #50	; 0x32
 8000212:	68b9      	ldr	r1, [r7, #8]
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <_write+0x48>)
 8000216:	f001 fd50 	bl	8001cba <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]
 800021e:	e009      	b.n	8000234 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	60ba      	str	r2, [r7, #8]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ffc3 	bl	80001b4 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	3301      	adds	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	697a      	ldr	r2, [r7, #20]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	429a      	cmp	r2, r3
 800023a:	dbf1      	blt.n	8000220 <_write+0x20>
	}
	return len;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000800 	.word	0x20000800

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b094      	sub	sp, #80	; 0x50
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fba3 	bl	800099c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f86f 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f8dd 	bl	8000418 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800025e:	f000 f8b1 	bl	80003c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("Hello world! \r\n");
 8000262:	482a      	ldr	r0, [pc, #168]	; (800030c <main+0xc0>)
 8000264:	f004 fdf6 	bl	8004e54 <puts>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer_ON */
  osTimerDef(myTimer_ON, Callback_ON);
 8000268:	4b29      	ldr	r3, [pc, #164]	; (8000310 <main+0xc4>)
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
 800026c:	2300      	movs	r3, #0
 800026e:	64fb      	str	r3, [r7, #76]	; 0x4c
  myTimer_ONHandle = osTimerCreate(osTimer(myTimer_ON), osTimerPeriodic, NULL);
 8000270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000274:	2200      	movs	r2, #0
 8000276:	2101      	movs	r1, #1
 8000278:	4618      	mov	r0, r3
 800027a:	f001 ff19 	bl	80020b0 <osTimerCreate>
 800027e:	4603      	mov	r3, r0
 8000280:	4a24      	ldr	r2, [pc, #144]	; (8000314 <main+0xc8>)
 8000282:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer_OFF */
  osTimerDef(myTimer_OFF, Callback_OFF);
 8000284:	4b24      	ldr	r3, [pc, #144]	; (8000318 <main+0xcc>)
 8000286:	643b      	str	r3, [r7, #64]	; 0x40
 8000288:	2300      	movs	r3, #0
 800028a:	647b      	str	r3, [r7, #68]	; 0x44
  myTimer_OFFHandle = osTimerCreate(osTimer(myTimer_OFF), osTimerPeriodic, NULL);
 800028c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000290:	2200      	movs	r2, #0
 8000292:	2101      	movs	r1, #1
 8000294:	4618      	mov	r0, r3
 8000296:	f001 ff0b 	bl	80020b0 <osTimerCreate>
 800029a:	4603      	mov	r3, r0
 800029c:	4a1f      	ldr	r2, [pc, #124]	; (800031c <main+0xd0>)
 800029e:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_Once_Timer */
  osTimerDef(my_Once_Timer, Once_Callback);
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <main+0xd4>)
 80002a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80002a4:	2300      	movs	r3, #0
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  my_Once_TimerHandle = osTimerCreate(osTimer(my_Once_Timer), osTimerOnce, NULL);
 80002a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ac:	2200      	movs	r2, #0
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fefd 	bl	80020b0 <osTimerCreate>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a1a      	ldr	r2, [pc, #104]	; (8000324 <main+0xd8>)
 80002ba:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <main+0xdc>)
 80002be:	f107 041c 	add.w	r4, r7, #28
 80002c2:	461d      	mov	r5, r3
 80002c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002d0:	f107 031c 	add.w	r3, r7, #28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fe89 	bl	8001fee <osThreadCreate>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <main+0xe0>)
 80002e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_LED_Task */
  osThreadDef(my_LED_Task, Start_LED_Task, osPriorityNormal, 0, 128);
 80002e2:	4b13      	ldr	r3, [pc, #76]	; (8000330 <main+0xe4>)
 80002e4:	463c      	mov	r4, r7
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_LED_TaskHandle = osThreadCreate(osThread(my_LED_Task), NULL);
 80002f4:	463b      	mov	r3, r7
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fe78 	bl	8001fee <osThreadCreate>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <main+0xe8>)
 8000302:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000304:	f001 fe6c 	bl	8001fe0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000308:	e7fe      	b.n	8000308 <main+0xbc>
 800030a:	bf00      	nop
 800030c:	08005550 	.word	0x08005550
 8000310:	0800056d 	.word	0x0800056d
 8000314:	2000084c 	.word	0x2000084c
 8000318:	08000591 	.word	0x08000591
 800031c:	20000850 	.word	0x20000850
 8000320:	080005b5 	.word	0x080005b5
 8000324:	20000854 	.word	0x20000854
 8000328:	08005560 	.word	0x08005560
 800032c:	20000844 	.word	0x20000844
 8000330:	0800557c 	.word	0x0800557c
 8000334:	20000848 	.word	0x20000848

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b090      	sub	sp, #64	; 0x40
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0318 	add.w	r3, r7, #24
 8000342:	2228      	movs	r2, #40	; 0x28
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f004 fc79 	bl	8004c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035a:	2301      	movs	r3, #1
 800035c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fdb9 	bl	8000ef8 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800038c:	f000 f92e 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	230f      	movs	r3, #15
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2302      	movs	r3, #2
 8000396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f826 	bl	80013fc <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b6:	f000 f919 	bl	80005ec <Error_Handler>
  }
}
 80003ba:	bf00      	nop
 80003bc:	3740      	adds	r7, #64	; 0x40
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART1_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART1_UART_Init+0x4c>)
 80003fc:	f001 fc10 	bl	8001c20 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f8f1 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000800 	.word	0x20000800
 8000414:	40013800 	.word	0x40013800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_GPIO_Init+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_GPIO_Init+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <MX_GPIO_Init+0x90>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <MX_GPIO_Init+0x94>)
 800047c:	f000 fd24 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048e:	2303      	movs	r3, #3
 8000490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_GPIO_Init+0x94>)
 800049a:	f000 fb91 	bl	8000bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40011000 	.word	0x40011000

080004b0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(myTimer_ONHandle, 2000);
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <StartDefaultTask+0x90>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 fe29 	bl	8002118 <osTimerStart>
	osTimerStart(myTimer_OFFHandle, 3000);
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <StartDefaultTask+0x94>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fe22 	bl	8002118 <osTimerStart>
	/* Infinite loop */
	for (;;) {
		if ((flag == 1) && (flag != oldflag)) {
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <StartDefaultTask+0x98>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d115      	bne.n	8000508 <StartDefaultTask+0x58>
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <StartDefaultTask+0x98>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <StartDefaultTask+0x9c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d00f      	beq.n	8000508 <StartDefaultTask+0x58>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, flag);
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <StartDefaultTask+0x98>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	4816      	ldr	r0, [pc, #88]	; (8000550 <StartDefaultTask+0xa0>)
 80004f6:	f000 fce7 	bl	8000ec8 <HAL_GPIO_WritePin>
			oldflag = flag;
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <StartDefaultTask+0x98>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a13      	ldr	r2, [pc, #76]	; (800054c <StartDefaultTask+0x9c>)
 8000500:	6013      	str	r3, [r2, #0]
			printf("flag Task = 1 \r\n");
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <StartDefaultTask+0xa4>)
 8000504:	f004 fca6 	bl	8004e54 <puts>
		}

		if ((flag == 0) && (flag != oldflag)) {
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <StartDefaultTask+0x98>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1e1      	bne.n	80004d4 <StartDefaultTask+0x24>
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <StartDefaultTask+0x98>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <StartDefaultTask+0x9c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d0db      	beq.n	80004d4 <StartDefaultTask+0x24>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, flag);
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <StartDefaultTask+0x98>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <StartDefaultTask+0xa0>)
 800052a:	f000 fccd 	bl	8000ec8 <HAL_GPIO_WritePin>
			oldflag = flag;
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <StartDefaultTask+0x98>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a06      	ldr	r2, [pc, #24]	; (800054c <StartDefaultTask+0x9c>)
 8000534:	6013      	str	r3, [r2, #0]
			printf("flag Task = 0 \r\n");
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <StartDefaultTask+0xa8>)
 8000538:	f004 fc8c 	bl	8004e54 <puts>
		if ((flag == 1) && (flag != oldflag)) {
 800053c:	e7ca      	b.n	80004d4 <StartDefaultTask+0x24>
 800053e:	bf00      	nop
 8000540:	2000084c 	.word	0x2000084c
 8000544:	20000850 	.word	0x20000850
 8000548:	20000000 	.word	0x20000000
 800054c:	20000004 	.word	0x20000004
 8000550:	40011000 	.word	0x40011000
 8000554:	08005598 	.word	0x08005598
 8000558:	080055a8 	.word	0x080055a8

0800055c <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void const * argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f001 fd8e 	bl	8002086 <osDelay>
 800056a:	e7fb      	b.n	8000564 <Start_LED_Task+0x8>

0800056c <Callback_ON>:
  /* USER CODE END Start_LED_Task */
}

/* Callback_ON function */
void Callback_ON(void const * argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_ON */
	flag = 1;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <Callback_ON+0x1c>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
	printf("CB flag = 1 \r\n");
 800057a:	4804      	ldr	r0, [pc, #16]	; (800058c <Callback_ON+0x20>)
 800057c:	f004 fc6a 	bl	8004e54 <puts>
  /* USER CODE END Callback_ON */
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	080055b8 	.word	0x080055b8

08000590 <Callback_OFF>:

/* Callback_OFF function */
void Callback_OFF(void const * argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_OFF */
	flag = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <Callback_OFF+0x1c>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
	printf("CB flag = 0 \r\n");
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <Callback_OFF+0x20>)
 80005a0:	f004 fc58 	bl	8004e54 <puts>
  /* USER CODE END Callback_OFF */
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	080055c8 	.word	0x080055c8

080005b4 <Once_Callback>:

/* Once_Callback function */
void Once_Callback(void const * argument)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Once_Callback */

  /* USER CODE END Once_Callback */
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d101      	bne.n	80005de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005da:	f000 f9f5 	bl	80009c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40000800 	.word	0x40000800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <HAL_MspInit+0x68>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <HAL_MspInit+0x68>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_MspInit+0x68>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_MspInit+0x68>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <HAL_MspInit+0x68>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_MspInit+0x68>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	210f      	movs	r1, #15
 8000632:	f06f 0001 	mvn.w	r0, #1
 8000636:	f000 fa98 	bl	8000b6a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_MspInit+0x6c>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_MspInit+0x6c>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	40010000 	.word	0x40010000

08000668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <HAL_UART_MspInit+0x8c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d131      	bne.n	80006ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <HAL_UART_MspInit+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <HAL_UART_MspInit+0x90>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_UART_MspInit+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <HAL_UART_MspInit+0x90>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_UART_MspInit+0x90>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <HAL_UART_MspInit+0x94>)
 80006ce:	f000 fa77 	bl	8000bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <HAL_UART_MspInit+0x94>)
 80006e8:	f000 fa6a 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40013800 	.word	0x40013800
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800

08000700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	; 0x38
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <HAL_InitTick+0xe8>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <HAL_InitTick+0xe8>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <HAL_InitTick+0xe8>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800072e:	f107 0210 	add.w	r2, r7, #16
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f000 ffd9 	bl	80016f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800073e:	6a3b      	ldr	r3, [r7, #32]
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000748:	f000 ffaa 	bl	80016a0 <HAL_RCC_GetPCLK1Freq>
 800074c:	6378      	str	r0, [r7, #52]	; 0x34
 800074e:	e004      	b.n	800075a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000750:	f000 ffa6 	bl	80016a0 <HAL_RCC_GetPCLK1Freq>
 8000754:	4603      	mov	r3, r0
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800075c:	4a23      	ldr	r2, [pc, #140]	; (80007ec <HAL_InitTick+0xec>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	0c9b      	lsrs	r3, r3, #18
 8000764:	3b01      	subs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <HAL_InitTick+0xf0>)
 800076a:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <HAL_InitTick+0xf4>)
 800076c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_InitTick+0xf0>)
 8000770:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000774:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <HAL_InitTick+0xf0>)
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_InitTick+0xf0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_InitTick+0xf0>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_InitTick+0xf0>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800078e:	4818      	ldr	r0, [pc, #96]	; (80007f0 <HAL_InitTick+0xf0>)
 8000790:	f000 fffc 	bl	800178c <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800079a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d11b      	bne.n	80007da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007a2:	4813      	ldr	r0, [pc, #76]	; (80007f0 <HAL_InitTick+0xf0>)
 80007a4:	f001 f84a 	bl	800183c <HAL_TIM_Base_Start_IT>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d111      	bne.n	80007da <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007b6:	201e      	movs	r0, #30
 80007b8:	f000 f9f3 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d808      	bhi.n	80007d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80007c2:	2200      	movs	r2, #0
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	201e      	movs	r0, #30
 80007c8:	f000 f9cf 	bl	8000b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <HAL_InitTick+0xf8>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e002      	b.n	80007da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3738      	adds	r7, #56	; 0x38
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	431bde83 	.word	0x431bde83
 80007f0:	20000858 	.word	0x20000858
 80007f4:	40000800 	.word	0x40000800
 80007f8:	2000000c 	.word	0x2000000c

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
	...

08000828 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <TIM4_IRQHandler+0x10>)
 800082e:	f001 f857 	bl	80018e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000858 	.word	0x20000858

0800083c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	e00a      	b.n	8000864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800084e:	f3af 8000 	nop.w
 8000852:	4601      	mov	r1, r0
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	60ba      	str	r2, [r7, #8]
 800085a:	b2ca      	uxtb	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbf0      	blt.n	800084e <_read+0x12>
  }

  return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089c:	605a      	str	r2, [r3, #4]
  return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <_isatty>:

int _isatty(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008be:	b480      	push	{r7}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
	...

080008d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <_sbrk+0x5c>)
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_sbrk+0x60>)
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_sbrk+0x64>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <_sbrk+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d207      	bcs.n	8000918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000908:	f004 f868 	bl	80049dc <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000916:	e009      	b.n	800092c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20005000 	.word	0x20005000
 8000938:	00000400 	.word	0x00000400
 800093c:	200008a0 	.word	0x200008a0
 8000940:	20001740 	.word	0x20001740

08000944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	; (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000976:	f7ff ffe5 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f004 f92b 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc65 	bl	800024c <main>
  bx lr
 8000982:	4770      	bx	lr
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800098c:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8000990:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000994:	20001740 	.word	0x20001740

08000998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_2_IRQHandler>
	...

0800099c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x28>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x28>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f8d1 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	200f      	movs	r0, #15
 80009b4:	f7ff fea4 	bl	8000700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fe1e 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40022000 	.word	0x40022000

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000010 	.word	0x20000010
 80009e8:	200008a4 	.word	0x200008a4

080009ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	200008a4 	.word	0x200008a4

08000a00 <__NVIC_SetPriorityGrouping>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_EnableIRQ>:
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0b      	blt.n	8000a8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 021f 	and.w	r2, r3, #31
 8000a7c:	4906      	ldr	r1, [pc, #24]	; (8000a98 <__NVIC_EnableIRQ+0x34>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	2001      	movs	r0, #1
 8000a86:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff4f 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff64 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ffb2 	bl	8000af0 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff81 	bl	8000a9c <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff57 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e169      	b.n	8000ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8158 	bne.w	8000ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4a9a      	ldr	r2, [pc, #616]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d05e      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000bfc:	4a98      	ldr	r2, [pc, #608]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d875      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c02:	4a98      	ldr	r2, [pc, #608]	; (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d058      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c08:	4a96      	ldr	r2, [pc, #600]	; (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d86f      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c0e:	4a96      	ldr	r2, [pc, #600]	; (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d052      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c14:	4a94      	ldr	r2, [pc, #592]	; (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d869      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c1a:	4a94      	ldr	r2, [pc, #592]	; (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d04c      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c20:	4a92      	ldr	r2, [pc, #584]	; (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d863      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c26:	4a92      	ldr	r2, [pc, #584]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d046      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
 8000c2c:	4a90      	ldr	r2, [pc, #576]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d85d      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d82a      	bhi.n	8000c8c <HAL_GPIO_Init+0xcc>
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d859      	bhi.n	8000cee <HAL_GPIO_Init+0x12e>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <HAL_GPIO_Init+0x80>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000c95 	.word	0x08000c95
 8000c48:	08000ca7 	.word	0x08000ca7
 8000c4c:	08000ce9 	.word	0x08000ce9
 8000c50:	08000cef 	.word	0x08000cef
 8000c54:	08000cef 	.word	0x08000cef
 8000c58:	08000cef 	.word	0x08000cef
 8000c5c:	08000cef 	.word	0x08000cef
 8000c60:	08000cef 	.word	0x08000cef
 8000c64:	08000cef 	.word	0x08000cef
 8000c68:	08000cef 	.word	0x08000cef
 8000c6c:	08000cef 	.word	0x08000cef
 8000c70:	08000cef 	.word	0x08000cef
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cef 	.word	0x08000cef
 8000c7c:	08000cef 	.word	0x08000cef
 8000c80:	08000cef 	.word	0x08000cef
 8000c84:	08000c9d 	.word	0x08000c9d
 8000c88:	08000cb1 	.word	0x08000cb1
 8000c8c:	4a79      	ldr	r2, [pc, #484]	; (8000e74 <HAL_GPIO_Init+0x2b4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d013      	beq.n	8000cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c92:	e02c      	b.n	8000cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	623b      	str	r3, [r7, #32]
          break;
 8000c9a:	e029      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	623b      	str	r3, [r7, #32]
          break;
 8000ca4:	e024      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	3308      	adds	r3, #8
 8000cac:	623b      	str	r3, [r7, #32]
          break;
 8000cae:	e01f      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	330c      	adds	r3, #12
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e01a      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e013      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d105      	bne.n	8000cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	611a      	str	r2, [r3, #16]
          break;
 8000cda:	e009      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	615a      	str	r2, [r3, #20]
          break;
 8000ce6:	e003      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x130>
          break;
 8000cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2bff      	cmp	r3, #255	; 0xff
 8000cf4:	d801      	bhi.n	8000cfa <HAL_GPIO_Init+0x13a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	e001      	b.n	8000cfe <HAL_GPIO_Init+0x13e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2bff      	cmp	r3, #255	; 0xff
 8000d04:	d802      	bhi.n	8000d0c <HAL_GPIO_Init+0x14c>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x152>
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	3b08      	subs	r3, #8
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	210f      	movs	r1, #15
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	401a      	ands	r2, r3
 8000d24:	6a39      	ldr	r1, [r7, #32]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 80b1 	beq.w	8000ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <HAL_GPIO_Init+0x2b8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d58:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	3302      	adds	r3, #2
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a40      	ldr	r2, [pc, #256]	; (8000e80 <HAL_GPIO_Init+0x2c0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d013      	beq.n	8000dac <HAL_GPIO_Init+0x1ec>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3f      	ldr	r2, [pc, #252]	; (8000e84 <HAL_GPIO_Init+0x2c4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d00d      	beq.n	8000da8 <HAL_GPIO_Init+0x1e8>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a3e      	ldr	r2, [pc, #248]	; (8000e88 <HAL_GPIO_Init+0x2c8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d007      	beq.n	8000da4 <HAL_GPIO_Init+0x1e4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <HAL_GPIO_Init+0x2cc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d101      	bne.n	8000da0 <HAL_GPIO_Init+0x1e0>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e004      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <HAL_GPIO_Init+0x1ee>
 8000dac:	2300      	movs	r3, #0
 8000dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db0:	f002 0203 	and.w	r2, r2, #3
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	4093      	lsls	r3, r2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dbe:	492f      	ldr	r1, [pc, #188]	; (8000e7c <HAL_GPIO_Init+0x2bc>)
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	492c      	ldr	r1, [pc, #176]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4928      	ldr	r1, [pc, #160]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4922      	ldr	r1, [pc, #136]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	491e      	ldr	r1, [pc, #120]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	4918      	ldr	r1, [pc, #96]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4914      	ldr	r1, [pc, #80]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d021      	beq.n	8000e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	490e      	ldr	r1, [pc, #56]	; (8000e90 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
 8000e5c:	e021      	b.n	8000ea2 <HAL_GPIO_Init+0x2e2>
 8000e5e:	bf00      	nop
 8000e60:	10320000 	.word	0x10320000
 8000e64:	10310000 	.word	0x10310000
 8000e68:	10220000 	.word	0x10220000
 8000e6c:	10210000 	.word	0x10210000
 8000e70:	10120000 	.word	0x10120000
 8000e74:	10110000 	.word	0x10110000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40011400 	.word	0x40011400
 8000e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	4909      	ldr	r1, [pc, #36]	; (8000ec4 <HAL_GPIO_Init+0x304>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f47f ae8e 	bne.w	8000bd4 <HAL_GPIO_Init+0x14>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	372c      	adds	r7, #44	; 0x2c
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40010400 	.word	0x40010400

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ee4:	e003      	b.n	8000eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	611a      	str	r2, [r3, #16]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e272      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f18:	4b92      	ldr	r3, [pc, #584]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f24:	4b8f      	ldr	r3, [pc, #572]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d112      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
 8000f30:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b89      	ldr	r3, [pc, #548]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d06c      	beq.n	8001024 <HAL_RCC_OscConfig+0x12c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d168      	bne.n	8001024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e24c      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x76>
 8000f60:	4b80      	ldr	r3, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e02e      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x98>
 8000f76:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a7a      	ldr	r2, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b78      	ldr	r3, [pc, #480]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xbc>
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b6f      	ldr	r3, [pc, #444]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a6e      	ldr	r2, [pc, #440]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xd4>
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b68      	ldr	r3, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a67      	ldr	r2, [pc, #412]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fd0a 	bl	80009ec <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fd06 	bl	80009ec <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e200      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe4>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fcf6 	bl	80009ec <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fcf2 	bl	80009ec <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e1ec      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x10c>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d063      	beq.n	80010fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d11c      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d116      	bne.n	8001084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e1c0      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4939      	ldr	r1, [pc, #228]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e03a      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fcab 	bl	80009ec <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109a:	f7ff fca7 	bl	80009ec <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e1a1      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4927      	ldr	r1, [pc, #156]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]
 80010cc:	e015      	b.n	80010fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_OscConfig+0x270>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc8a 	bl	80009ec <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc86 	bl	80009ec <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e180      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	2b00      	cmp	r3, #0
 8001104:	d03a      	beq.n	800117c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d019      	beq.n	8001142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001114:	f7ff fc6a 	bl	80009ec <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fc66 	bl	80009ec <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e160      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RCC_OscConfig+0x26c>)
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fb08 	bl	8001750 <RCC_Delay>
 8001140:	e01c      	b.n	800117c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_RCC_OscConfig+0x274>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fc50 	bl	80009ec <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114e:	e00f      	b.n	8001170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fc4c 	bl	80009ec <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d908      	bls.n	8001170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e146      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	42420000 	.word	0x42420000
 800116c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b92      	ldr	r3, [pc, #584]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e9      	bne.n	8001150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a6 	beq.w	80012d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a87      	ldr	r2, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b85      	ldr	r3, [pc, #532]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b2:	2301      	movs	r3, #1
 80011b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x4c8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d118      	bne.n	80011f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <HAL_RCC_OscConfig+0x4c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a7e      	ldr	r2, [pc, #504]	; (80013c0 <HAL_RCC_OscConfig+0x4c8>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fc0d 	bl	80009ec <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fc09 	bl	80009ec <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e103      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x4c8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x312>
 80011fc:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a6e      	ldr	r2, [pc, #440]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e02d      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x334>
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 0301 	bic.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x356>
 8001234:	4b61      	ldr	r3, [pc, #388]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a60      	ldr	r2, [pc, #384]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a5d      	ldr	r2, [pc, #372]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x36e>
 800124e:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a57      	ldr	r2, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbbd 	bl	80009ec <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fbb9 	bl	80009ec <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0b1      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x37e>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fba7 	bl	80009ec <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fba3 	bl	80009ec <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e09b      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a3b      	ldr	r2, [pc, #236]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8087 	beq.w	80013ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d061      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d146      	bne.n	8001382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <HAL_RCC_OscConfig+0x4cc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb77 	bl	80009ec <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb73 	bl	80009ec <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e06d      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d108      	bne.n	800133c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4921      	ldr	r1, [pc, #132]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a19      	ldr	r1, [r3, #32]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	430b      	orrs	r3, r1
 800134e:	491b      	ldr	r1, [pc, #108]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x4cc>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb47 	bl	80009ec <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb43 	bl	80009ec <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e03d      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x46a>
 8001380:	e035      	b.n	80013ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x4cc>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fb30 	bl	80009ec <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fb2c 	bl	80009ec <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e026      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x498>
 80013ae:	e01e      	b.n	80013ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e019      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40007000 	.word	0x40007000
 80013c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x500>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0d0      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d910      	bls.n	8001440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 0207 	bic.w	r2, r3, #7
 8001426:	4965      	ldr	r1, [pc, #404]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b8      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800147a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	494d      	ldr	r1, [pc, #308]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d040      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d115      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e07f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e073      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06b      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4936      	ldr	r1, [pc, #216]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fa7e 	bl	80009ec <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff fa7a 	bl	80009ec <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e053      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d210      	bcs.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4922      	ldr	r1, [pc, #136]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e032      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4916      	ldr	r1, [pc, #88]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158a:	f000 f821 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 800158e:	4602      	mov	r2, r0
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	490a      	ldr	r1, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	5ccb      	ldrb	r3, [r1, r3]
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1cc>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f8a8 	bl	8000700 <HAL_InitTick>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08005604 	.word	0x08005604
 80015c8:	20000008 	.word	0x20000008
 80015cc:	2000000c 	.word	0x2000000c

080015d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d0:	b490      	push	{r4, r7}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_RCC_GetSysClockFreq+0xac>)
 80015d8:	1d3c      	adds	r4, r7, #4
 80015da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015e0:	f240 2301 	movw	r3, #513	; 0x201
 80015e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x40>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x46>
 800160e:	e02b      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001612:	623b      	str	r3, [r7, #32]
      break;
 8001614:	e02b      	b.n	800166e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3328      	adds	r3, #40	; 0x28
 8001620:	443b      	add	r3, r7
 8001622:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001626:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d012      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	0c5b      	lsrs	r3, r3, #17
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	3328      	adds	r3, #40	; 0x28
 800163e:	443b      	add	r3, r7
 8001640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb4>)
 800164a:	fb03 f202 	mul.w	r2, r3, r2
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e004      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	623b      	str	r3, [r7, #32]
      break;
 8001666:	e002      	b.n	800166e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb4>)
 800166a:	623b      	str	r3, [r7, #32]
      break;
 800166c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166e:	6a3b      	ldr	r3, [r7, #32]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3728      	adds	r7, #40	; 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bc90      	pop	{r4, r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	080055d8 	.word	0x080055d8
 8001680:	40021000 	.word	0x40021000
 8001684:	007a1200 	.word	0x007a1200
 8001688:	003d0900 	.word	0x003d0900

0800168c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <HAL_RCC_GetHCLKFreq+0x10>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000008 	.word	0x20000008

080016a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a4:	f7ff fff2 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016a8:	4602      	mov	r2, r0
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4903      	ldr	r1, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b6:	5ccb      	ldrb	r3, [r1, r3]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	08005614 	.word	0x08005614

080016c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016cc:	f7ff ffde 	bl	800168c <HAL_RCC_GetHCLKFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0adb      	lsrs	r3, r3, #11
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4903      	ldr	r1, [pc, #12]	; (80016ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08005614 	.word	0x08005614

080016f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	220f      	movs	r2, #15
 80016fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_RCC_GetClockConfig+0x58>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_RCC_GetClockConfig+0x5c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0207 	and.w	r2, r3, #7
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40022000 	.word	0x40022000

08001750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <RCC_Delay+0x34>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <RCC_Delay+0x38>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0a5b      	lsrs	r3, r3, #9
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800176c:	bf00      	nop
  }
  while (Delay --);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	60fa      	str	r2, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <RCC_Delay+0x1c>
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000008 	.word	0x20000008
 8001788:	10624dd3 	.word	0x10624dd3

0800178c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e041      	b.n	8001822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f839 	bl	800182a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f000 f9b4 	bl	8001b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d001      	beq.n	8001854 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e03a      	b.n	80018ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <HAL_TIM_Base_Start_IT+0x98>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00e      	beq.n	8001894 <HAL_TIM_Base_Start_IT+0x58>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187e:	d009      	beq.n	8001894 <HAL_TIM_Base_Start_IT+0x58>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d004      	beq.n	8001894 <HAL_TIM_Base_Start_IT+0x58>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_TIM_Base_Start_IT+0xa0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d111      	bne.n	80018b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d010      	beq.n	80018c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018b6:	e007      	b.n	80018c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40000800 	.word	0x40000800

080018e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d122      	bne.n	800193c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b02      	cmp	r3, #2
 8001902:	d11b      	bne.n	800193c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0202 	mvn.w	r2, #2
 800190c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8ed 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 8001928:	e005      	b.n	8001936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f8e0 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f8ef 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b04      	cmp	r3, #4
 8001948:	d122      	bne.n	8001990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b04      	cmp	r3, #4
 8001956:	d11b      	bne.n	8001990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0204 	mvn.w	r2, #4
 8001960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2202      	movs	r2, #2
 8001966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f8c3 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 800197c:	e005      	b.n	800198a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8b6 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f8c5 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b08      	cmp	r3, #8
 800199c:	d122      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d11b      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0208 	mvn.w	r2, #8
 80019b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2204      	movs	r2, #4
 80019ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f899 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 80019d0:	e005      	b.n	80019de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f88c 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f89b 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d122      	bne.n	8001a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d11b      	bne.n	8001a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 0210 	mvn.w	r2, #16
 8001a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f86f 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 8001a24:	e005      	b.n	8001a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f862 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f871 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10e      	bne.n	8001a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0201 	mvn.w	r2, #1
 8001a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fdb2 	bl	80005c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b80      	cmp	r3, #128	; 0x80
 8001a70:	d10e      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b80      	cmp	r3, #128	; 0x80
 8001a7e:	d107      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8bf 	bl	8001c0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d10e      	bne.n	8001abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d107      	bne.n	8001abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f835 	bl	8001b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0220 	mvn.w	r2, #32
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f88a 	bl	8001bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <TIM_Base_SetConfig+0xb8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00b      	beq.n	8001b68 <TIM_Base_SetConfig+0x30>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b56:	d007      	beq.n	8001b68 <TIM_Base_SetConfig+0x30>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <TIM_Base_SetConfig+0xbc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d003      	beq.n	8001b68 <TIM_Base_SetConfig+0x30>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <TIM_Base_SetConfig+0xc0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d108      	bne.n	8001b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <TIM_Base_SetConfig+0xb8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00b      	beq.n	8001b9a <TIM_Base_SetConfig+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d007      	beq.n	8001b9a <TIM_Base_SetConfig+0x62>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <TIM_Base_SetConfig+0xbc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d003      	beq.n	8001b9a <TIM_Base_SetConfig+0x62>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <TIM_Base_SetConfig+0xc0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d108      	bne.n	8001bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <TIM_Base_SetConfig+0xb8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d103      	bne.n	8001be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	615a      	str	r2, [r3, #20]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40000800 	.word	0x40000800

08001bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e03f      	b.n	8001cb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fd0e 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f905 	bl	8001e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b08a      	sub	sp, #40	; 0x28
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d17c      	bne.n	8001dd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_UART_Transmit+0x2c>
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e075      	b.n	8001dd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_UART_Transmit+0x3e>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e06e      	b.n	8001dd6 <HAL_UART_Transmit+0x11c>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d0e:	f7fe fe6d 	bl	80009ec <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d28:	d108      	bne.n	8001d3c <HAL_UART_Transmit+0x82>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e003      	b.n	8001d44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d4c:	e02a      	b.n	8001da4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f840 	bl	8001dde <UART_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e036      	b.n	8001dd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	3302      	adds	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	e007      	b.n	8001d96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	3301      	adds	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1cf      	bne.n	8001d4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2200      	movs	r2, #0
 8001db6:	2140      	movs	r1, #64	; 0x40
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f810 	bl	8001dde <UART_WaitOnFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e006      	b.n	8001dd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dd4:	2302      	movs	r3, #2
  }
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dee:	e02c      	b.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df6:	d028      	beq.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <UART_WaitOnFlagUntilTimeout+0x30>
 8001dfe:	f7fe fdf5 	bl	80009ec <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d21d      	bcs.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e00f      	b.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4013      	ands	r3, r2
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d0c3      	beq.n	8001df0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001eae:	f023 030c 	bic.w	r3, r3, #12
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <UART_SetConfig+0x114>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d103      	bne.n	8001ee4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001edc:	f7ff fbf4 	bl	80016c8 <HAL_RCC_GetPCLK2Freq>
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	e002      	b.n	8001eea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ee4:	f7ff fbdc 	bl	80016a0 <HAL_RCC_GetPCLK1Freq>
 8001ee8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009a      	lsls	r2, r3, #2
 8001ef4:	441a      	add	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <UART_SetConfig+0x118>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	0119      	lsls	r1, r3, #4
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	009a      	lsls	r2, r3, #2
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <UART_SetConfig+0x118>)
 8001f22:	fba3 0302 	umull	r0, r3, r3, r2
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2064      	movs	r0, #100	; 0x64
 8001f2a:	fb00 f303 	mul.w	r3, r0, r3
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	3332      	adds	r3, #50	; 0x32
 8001f34:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <UART_SetConfig+0x118>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f40:	4419      	add	r1, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	009a      	lsls	r2, r3, #2
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <UART_SetConfig+0x118>)
 8001f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2064      	movs	r0, #100	; 0x64
 8001f62:	fb00 f303 	mul.w	r3, r0, r3
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	3332      	adds	r3, #50	; 0x32
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <UART_SetConfig+0x118>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	51eb851f 	.word	0x51eb851f

08001f90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa2:	2b84      	cmp	r3, #132	; 0x84
 8001fa4:	d005      	beq.n	8001fb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001fa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	3303      	adds	r3, #3
 8001fb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc4:	f3ef 8305 	mrs	r3, IPSR
 8001fc8:	607b      	str	r3, [r7, #4]
  return(result);
 8001fca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001fe4:	f001 f842 	bl	800306c <vTaskStartScheduler>
  
  return osOK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}

08001fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff0:	b089      	sub	sp, #36	; 0x24
 8001ff2:	af04      	add	r7, sp, #16
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <osThreadCreate+0x54>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01c      	beq.n	8002042 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685c      	ldr	r4, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681d      	ldr	r5, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691e      	ldr	r6, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ffb8 	bl	8001f90 <makeFreeRtosPriority>
 8002020:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800202a:	9202      	str	r2, [sp, #8]
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	9100      	str	r1, [sp, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4632      	mov	r2, r6
 8002034:	4629      	mov	r1, r5
 8002036:	4620      	mov	r0, r4
 8002038:	f000 fe42 	bl	8002cc0 <xTaskCreateStatic>
 800203c:	4603      	mov	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e01c      	b.n	800207c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685c      	ldr	r4, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800204e:	b29e      	uxth	r6, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff9a 	bl	8001f90 <makeFreeRtosPriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	9200      	str	r2, [sp, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4632      	mov	r2, r6
 800206a:	4629      	mov	r1, r5
 800206c:	4620      	mov	r0, r4
 800206e:	f000 fe83 	bl	8002d78 <xTaskCreate>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002086 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <osDelay+0x16>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	e000      	b.n	800209e <osDelay+0x18>
 800209c:	2301      	movs	r3, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 ffb0 	bl	8003004 <vTaskDelay>
  
  return osOK;
 80020a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	460b      	mov	r3, r1
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <osTimerCreate+0x20>
 80020cc:	2101      	movs	r1, #1
 80020ce:	e000      	b.n	80020d2 <osTimerCreate+0x22>
 80020d0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	460a      	mov	r2, r1
 80020e2:	2101      	movs	r1, #1
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <osTimerCreate+0x64>)
 80020e6:	f001 fd90 	bl	8003c0a <xTimerCreateStatic>
 80020ea:	4603      	mov	r3, r0
 80020ec:	e00e      	b.n	800210c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <osTimerCreate+0x48>
 80020f4:	2201      	movs	r2, #1
 80020f6:	e000      	b.n	80020fa <osTimerCreate+0x4a>
 80020f8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2101      	movs	r1, #1
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <osTimerCreate+0x64>)
 8002106:	f001 fd5f 	bl	8003bc8 <xTimerCreate>
 800210a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	080055e8 	.word	0x080055e8

08002118 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <osTimerStart+0x20>
    ticks = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002138:	f7ff ff41 	bl	8001fbe <inHandlerMode>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01a      	beq.n	8002178 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	2200      	movs	r2, #0
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	2109      	movs	r1, #9
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f001 fdca 	bl	8003ce8 <xTimerGenericCommand>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d002      	beq.n	8002160 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800215a:	23ff      	movs	r3, #255	; 0xff
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e018      	b.n	8002192 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d015      	beq.n	8002192 <osTimerStart+0x7a>
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <osTimerStart+0x84>)
 8002168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	e00c      	b.n	8002192 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	2104      	movs	r1, #4
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f001 fdb0 	bl	8003ce8 <xTimerGenericCommand>
 8002188:	4603      	mov	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	d001      	beq.n	8002192 <osTimerStart+0x7a>
      result = osErrorOS;
 800218e:	23ff      	movs	r3, #255	; 0xff
 8002190:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002192:	697b      	ldr	r3, [r7, #20]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	e000ed04 	.word	0xe000ed04

080021a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 0208 	add.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f103 0208 	add.w	r2, r3, #8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 0208 	add.w	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002252:	d103      	bne.n	800225c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e00c      	b.n	8002276 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3308      	adds	r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e002      	b.n	800226a <vListInsert+0x2e>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	d2f6      	bcs.n	8002264 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6892      	ldr	r2, [r2, #8]
 80022c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6852      	ldr	r2, [r2, #4]
 80022cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d103      	bne.n	80022e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
	...

08002300 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800232a:	f002 f87f 	bl	800442c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	441a      	add	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	3b01      	subs	r3, #1
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	441a      	add	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d114      	bne.n	80023aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01a      	beq.n	80023be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3310      	adds	r3, #16
 800238c:	4618      	mov	r0, r3
 800238e:	f001 f905 	bl	800359c <xTaskRemoveFromEventList>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <xQueueGenericReset+0xcc>)
 800239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	e009      	b.n	80023be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3310      	adds	r3, #16
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fef6 	bl	80021a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3324      	adds	r3, #36	; 0x24
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fef1 	bl	80021a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023be:	f002 f865 	bl	800448c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	e000ed04 	.word	0xe000ed04

080023d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08e      	sub	sp, #56	; 0x38
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002412:	bf00      	nop
 8002414:	e7fe      	b.n	8002414 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <xQueueGenericCreateStatic+0x52>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <xQueueGenericCreateStatic+0x56>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <xQueueGenericCreateStatic+0x58>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	623b      	str	r3, [r7, #32]
}
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <xQueueGenericCreateStatic+0x7e>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <xQueueGenericCreateStatic+0x82>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <xQueueGenericCreateStatic+0x84>
 8002452:	2300      	movs	r3, #0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10a      	bne.n	800246e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	61fb      	str	r3, [r7, #28]
}
 800246a:	bf00      	nop
 800246c:	e7fe      	b.n	800246c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800246e:	2348      	movs	r3, #72	; 0x48
 8002470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b48      	cmp	r3, #72	; 0x48
 8002476:	d00a      	beq.n	800248e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	61bb      	str	r3, [r7, #24]
}
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f805 	bl	80024be <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80024b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3730      	adds	r7, #48	; 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e002      	b.n	80024e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024ec:	2101      	movs	r1, #1
 80024ee:	69b8      	ldr	r0, [r7, #24]
 80024f0:	f7ff ff06 	bl	8002300 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08e      	sub	sp, #56	; 0x38
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xQueueGenericSend+0x32>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <xQueueGenericSend+0x40>
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <xQueueGenericSend+0x44>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <xQueueGenericSend+0x46>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <xQueueGenericSend+0x60>
	__asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d103      	bne.n	800256a <xQueueGenericSend+0x6e>
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <xQueueGenericSend+0x72>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <xQueueGenericSend+0x74>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <xQueueGenericSend+0x8e>
	__asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	623b      	str	r3, [r7, #32]
}
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800258a:	f001 f9cb 	bl	8003924 <xTaskGetSchedulerState>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <xQueueGenericSend+0x9e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <xQueueGenericSend+0xa2>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <xQueueGenericSend+0xa4>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericSend+0xbe>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	61fb      	str	r3, [r7, #28]
}
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025ba:	f001 ff37 	bl	800442c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d302      	bcc.n	80025d0 <xQueueGenericSend+0xd4>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d129      	bne.n	8002624 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d6:	f000 fa07 	bl	80029e8 <prvCopyDataToQueue>
 80025da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d010      	beq.n	8002606 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	3324      	adds	r3, #36	; 0x24
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 ffd7 	bl	800359c <xTaskRemoveFromEventList>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <xQueueGenericSend+0x1f8>)
 80025f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	e00a      	b.n	800261c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800260c:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <xQueueGenericSend+0x1f8>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800261c:	f001 ff36 	bl	800448c <vPortExitCritical>
				return pdPASS;
 8002620:	2301      	movs	r3, #1
 8002622:	e063      	b.n	80026ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800262a:	f001 ff2f 	bl	800448c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800262e:	2300      	movs	r3, #0
 8002630:	e05c      	b.n	80026ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f80f 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002642:	2301      	movs	r3, #1
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002646:	f001 ff21 	bl	800448c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800264a:	f000 fd7f 	bl	800314c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800264e:	f001 feed 	bl	800442c <vPortEnterCritical>
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002658:	b25b      	sxtb	r3, r3
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265e:	d103      	bne.n	8002668 <xQueueGenericSend+0x16c>
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800266e:	b25b      	sxtb	r3, r3
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002674:	d103      	bne.n	800267e <xQueueGenericSend+0x182>
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800267e:	f001 ff05 	bl	800448c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002682:	1d3a      	adds	r2, r7, #4
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fffe 	bl	800368c <xTaskCheckForTimeOut>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d124      	bne.n	80026e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002698:	f000 fa9e 	bl	8002bd8 <prvIsQueueFull>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	3310      	adds	r3, #16
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 ff26 	bl	80034fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026b2:	f000 fa29 	bl	8002b08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026b6:	f000 fd57 	bl	8003168 <xTaskResumeAll>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f47f af7c 	bne.w	80025ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <xQueueGenericSend+0x1f8>)
 80026c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	e772      	b.n	80025ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d6:	f000 fa17 	bl	8002b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026da:	f000 fd45 	bl	8003168 <xTaskResumeAll>
 80026de:	e76c      	b.n	80025ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e2:	f000 fa11 	bl	8002b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026e6:	f000 fd3f 	bl	8003168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026ea:	2300      	movs	r3, #0
		}
	}
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	e000ed04 	.word	0xe000ed04

080026f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	; 0x38
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <xQueueGenericSendFromISR+0x3c>
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <xQueueGenericSendFromISR+0x40>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <xQueueGenericSendFromISR+0x42>
 8002738:	2300      	movs	r3, #0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	623b      	str	r3, [r7, #32]
}
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d103      	bne.n	8002762 <xQueueGenericSendFromISR+0x6a>
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <xQueueGenericSendFromISR+0x6e>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <xQueueGenericSendFromISR+0x70>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	61fb      	str	r3, [r7, #28]
}
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002782:	f001 ff15 	bl	80045b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002786:	f3ef 8211 	mrs	r2, BASEPRI
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	61ba      	str	r2, [r7, #24]
 800279c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800279e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <xQueueGenericSendFromISR+0xbc>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d12c      	bne.n	800280e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c4:	f000 f910 	bl	80029e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d0:	d112      	bne.n	80027f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	3324      	adds	r3, #36	; 0x24
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fedc 	bl	800359c <xTaskRemoveFromEventList>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00e      	beq.n	8002808 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027fc:	3301      	adds	r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	b25a      	sxtb	r2, r3
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002808:	2301      	movs	r3, #1
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800280c:	e001      	b.n	8002812 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800281c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800281e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002820:	4618      	mov	r0, r3
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <xQueueReceive+0x30>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	623b      	str	r3, [r7, #32]
}
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <xQueueReceive+0x3e>
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <xQueueReceive+0x42>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <xQueueReceive+0x44>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <xQueueReceive+0x5e>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	61fb      	str	r3, [r7, #28]
}
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002886:	f001 f84d 	bl	8003924 <xTaskGetSchedulerState>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <xQueueReceive+0x6e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <xQueueReceive+0x72>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <xQueueReceive+0x74>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xQueueReceive+0x8e>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	61bb      	str	r3, [r7, #24]
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028b6:	f001 fdb9 	bl	800442c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01f      	beq.n	8002906 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ca:	f000 f8f7 	bl	8002abc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00f      	beq.n	80028fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	3310      	adds	r3, #16
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fe5a 	bl	800359c <xTaskRemoveFromEventList>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <xQueueReceive+0x1bc>)
 80028f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028fe:	f001 fdc5 	bl	800448c <vPortExitCritical>
				return pdPASS;
 8002902:	2301      	movs	r3, #1
 8002904:	e069      	b.n	80029da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800290c:	f001 fdbe 	bl	800448c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002910:	2300      	movs	r3, #0
 8002912:	e062      	b.n	80029da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fe9e 	bl	8003660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002924:	2301      	movs	r3, #1
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002928:	f001 fdb0 	bl	800448c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800292c:	f000 fc0e 	bl	800314c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002930:	f001 fd7c 	bl	800442c <vPortEnterCritical>
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293a:	b25b      	sxtb	r3, r3
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002940:	d103      	bne.n	800294a <xQueueReceive+0x122>
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002950:	b25b      	sxtb	r3, r3
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002956:	d103      	bne.n	8002960 <xQueueReceive+0x138>
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002960:	f001 fd94 	bl	800448c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002964:	1d3a      	adds	r2, r7, #4
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fe8d 	bl	800368c <xTaskCheckForTimeOut>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d123      	bne.n	80029c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297a:	f000 f917 	bl	8002bac <prvIsQueueEmpty>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	3324      	adds	r3, #36	; 0x24
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fdb5 	bl	80034fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002994:	f000 f8b8 	bl	8002b08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002998:	f000 fbe6 	bl	8003168 <xTaskResumeAll>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d189      	bne.n	80028b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <xQueueReceive+0x1bc>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	e780      	b.n	80028b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b6:	f000 f8a7 	bl	8002b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ba:	f000 fbd5 	bl	8003168 <xTaskResumeAll>
 80029be:	e77a      	b.n	80028b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c2:	f000 f8a1 	bl	8002b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029c6:	f000 fbcf 	bl	8003168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029cc:	f000 f8ee 	bl	8002bac <prvIsQueueEmpty>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f43f af6f 	beq.w	80028b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3730      	adds	r7, #48	; 0x30
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d14d      	bne.n	8002aaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 ffa4 	bl	8003960 <xTaskPriorityDisinherit>
 8002a18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	e043      	b.n	8002aaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d119      	bne.n	8002a5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6898      	ldr	r0, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	461a      	mov	r2, r3
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	f002 f8f5 	bl	8004c22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	441a      	add	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d32b      	bcc.n	8002aaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	e026      	b.n	8002aaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68d8      	ldr	r0, [r3, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	461a      	mov	r2, r3
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	f002 f8db 	bl	8004c22 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	425b      	negs	r3, r3
 8002a76:	441a      	add	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	425b      	negs	r3, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d105      	bne.n	8002aaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ab2:	697b      	ldr	r3, [r7, #20]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d018      	beq.n	8002b00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	441a      	add	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d303      	bcc.n	8002af0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68d9      	ldr	r1, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	461a      	mov	r2, r3
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	f002 f891 	bl	8004c22 <memcpy>
	}
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b10:	f001 fc8c 	bl	800442c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b1c:	e011      	b.n	8002b42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d012      	beq.n	8002b4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3324      	adds	r3, #36	; 0x24
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fd36 	bl	800359c <xTaskRemoveFromEventList>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b36:	f000 fe0b 	bl	8003750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	dce9      	bgt.n	8002b1e <prvUnlockQueue+0x16>
 8002b4a:	e000      	b.n	8002b4e <prvUnlockQueue+0x46>
					break;
 8002b4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b56:	f001 fc99 	bl	800448c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b5a:	f001 fc67 	bl	800442c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b66:	e011      	b.n	8002b8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d012      	beq.n	8002b96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3310      	adds	r3, #16
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fd11 	bl	800359c <xTaskRemoveFromEventList>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b80:	f000 fde6 	bl	8003750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	dce9      	bgt.n	8002b68 <prvUnlockQueue+0x60>
 8002b94:	e000      	b.n	8002b98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ba0:	f001 fc74 	bl	800448c <vPortExitCritical>
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bb4:	f001 fc3a 	bl	800442c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e001      	b.n	8002bca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bca:	f001 fc5f 	bl	800448c <vPortExitCritical>

	return xReturn;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002be0:	f001 fc24 	bl	800442c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d102      	bne.n	8002bf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e001      	b.n	8002bfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bfa:	f001 fc47 	bl	800448c <vPortExitCritical>

	return xReturn;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e014      	b.n	8002c42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <vQueueAddToRegistry+0x4c>)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c24:	490b      	ldr	r1, [pc, #44]	; (8002c54 <vQueueAddToRegistry+0x4c>)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <vQueueAddToRegistry+0x4c>)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c3a:	e006      	b.n	8002c4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b07      	cmp	r3, #7
 8002c46:	d9e7      	bls.n	8002c18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	200008a8 	.word	0x200008a8

08002c58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c68:	f001 fbe0 	bl	800442c <vPortEnterCritical>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c78:	d103      	bne.n	8002c82 <vQueueWaitForMessageRestricted+0x2a>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c8e:	d103      	bne.n	8002c98 <vQueueWaitForMessageRestricted+0x40>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	f001 fbf8 	bl	800448c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3324      	adds	r3, #36	; 0x24
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fc49 	bl	8003544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff28 	bl	8002b08 <prvUnlockQueue>
	}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af04      	add	r7, sp, #16
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	623b      	str	r3, [r7, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <xTaskCreateStatic+0x46>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61fb      	str	r3, [r7, #28]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d06:	23b4      	movs	r3, #180	; 0xb4
 8002d08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2bb4      	cmp	r3, #180	; 0xb4
 8002d0e:	d00a      	beq.n	8002d26 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	61bb      	str	r3, [r7, #24]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01e      	beq.n	8002d6a <xTaskCreateStatic+0xaa>
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01b      	beq.n	8002d6a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d44:	2300      	movs	r3, #0
 8002d46:	9303      	str	r3, [sp, #12]
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	9302      	str	r3, [sp, #8]
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f851 	bl	8002e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d64:	f000 f8e4 	bl	8002f30 <prvAddNewTaskToReadyList>
 8002d68:	e001      	b.n	8002d6e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d6e:	697b      	ldr	r3, [r7, #20]
	}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	; 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08c      	sub	sp, #48	; 0x30
 8002d7c:	af04      	add	r7, sp, #16
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fc4d 	bl	800462c <pvPortMalloc>
 8002d92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d9a:	20b4      	movs	r0, #180	; 0xb4
 8002d9c:	f001 fc46 	bl	800462c <pvPortMalloc>
 8002da0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
 8002dae:	e005      	b.n	8002dbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002db0:	6978      	ldr	r0, [r7, #20]
 8002db2:	f001 fcff 	bl	80047b4 <vPortFree>
 8002db6:	e001      	b.n	8002dbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d017      	beq.n	8002df2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9303      	str	r3, [sp, #12]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f80f 	bl	8002e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002de6:	69f8      	ldr	r0, [r7, #28]
 8002de8:	f000 f8a2 	bl	8002f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dec:	2301      	movs	r3, #1
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e002      	b.n	8002df8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002df8:	69bb      	ldr	r3, [r7, #24]
	}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f023 0307 	bic.w	r3, r3, #7
 8002e2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	617b      	str	r3, [r7, #20]
}
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	e012      	b.n	8002e78 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	7819      	ldrb	r1, [r3, #0]
 8002e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3334      	adds	r3, #52	; 0x34
 8002e62:	460a      	mov	r2, r1
 8002e64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	d9e9      	bls.n	8002e52 <prvInitialiseNewTask+0x4e>
 8002e7e:	e000      	b.n	8002e82 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002e80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d901      	bls.n	8002e94 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e90:	2306      	movs	r3, #6
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f997 	bl	80021de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	3318      	adds	r3, #24
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f992 	bl	80021de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	f1c3 0207 	rsb	r2, r3, #7
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	334c      	adds	r3, #76	; 0x4c
 8002ee4:	2260      	movs	r2, #96	; 0x60
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fea8 	bl	8004c3e <memset>
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <prvInitialiseNewTask+0x120>)
 8002ef2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <prvInitialiseNewTask+0x124>)
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <prvInitialiseNewTask+0x128>)
 8002efe:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	68f9      	ldr	r1, [r7, #12]
 8002f04:	69b8      	ldr	r0, [r7, #24]
 8002f06:	f001 f99f 	bl	8004248 <pxPortInitialiseStack>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f1c:	bf00      	nop
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800563c 	.word	0x0800563c
 8002f28:	0800565c 	.word	0x0800565c
 8002f2c:	0800561c 	.word	0x0800561c

08002f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f38:	f001 fa78 	bl	800442c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <prvAddNewTaskToReadyList+0xb8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <prvAddNewTaskToReadyList+0xb8>)
 8002f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f46:	4b29      	ldr	r3, [pc, #164]	; (8002fec <prvAddNewTaskToReadyList+0xbc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f4e:	4a27      	ldr	r2, [pc, #156]	; (8002fec <prvAddNewTaskToReadyList+0xbc>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <prvAddNewTaskToReadyList+0xb8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d110      	bne.n	8002f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f5c:	f000 fc1c 	bl	8003798 <prvInitialiseTaskLists>
 8002f60:	e00d      	b.n	8002f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <prvAddNewTaskToReadyList+0xc0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <prvAddNewTaskToReadyList+0xbc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d802      	bhi.n	8002f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f78:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <prvAddNewTaskToReadyList+0xbc>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <prvAddNewTaskToReadyList+0xc4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <prvAddNewTaskToReadyList+0xc4>)
 8002f86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <prvAddNewTaskToReadyList+0xc8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <prvAddNewTaskToReadyList+0xc8>)
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <prvAddNewTaskToReadyList+0xcc>)
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7ff f920 	bl	80021f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fb6:	f001 fa69 	bl	800448c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <prvAddNewTaskToReadyList+0xc0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <prvAddNewTaskToReadyList+0xbc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d207      	bcs.n	8002fe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <prvAddNewTaskToReadyList+0xd0>)
 8002fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200009e8 	.word	0x200009e8
 8002fec:	200008e8 	.word	0x200008e8
 8002ff0:	200009f4 	.word	0x200009f4
 8002ff4:	20000a04 	.word	0x20000a04
 8002ff8:	200009f0 	.word	0x200009f0
 8002ffc:	200008ec 	.word	0x200008ec
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d017      	beq.n	8003046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <vTaskDelay+0x60>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <vTaskDelay+0x30>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60bb      	str	r3, [r7, #8]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003034:	f000 f88a 	bl	800314c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fd16 	bl	8003a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003040:	f000 f892 	bl	8003168 <xTaskResumeAll>
 8003044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <vTaskDelay+0x64>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000a10 	.word	0x20000a10
 8003068:	e000ed04 	.word	0xe000ed04

0800306c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800307a:	463a      	mov	r2, r7
 800307c:	1d39      	adds	r1, r7, #4
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f864 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	9202      	str	r2, [sp, #8]
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2300      	movs	r3, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	460a      	mov	r2, r1
 800309a:	4924      	ldr	r1, [pc, #144]	; (800312c <vTaskStartScheduler+0xc0>)
 800309c:	4824      	ldr	r0, [pc, #144]	; (8003130 <vTaskStartScheduler+0xc4>)
 800309e:	f7ff fe0f 	bl	8002cc0 <xTaskCreateStatic>
 80030a2:	4603      	mov	r3, r0
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <vTaskStartScheduler+0xc8>)
 80030a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <vTaskStartScheduler+0xc8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	e001      	b.n	80030ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030c0:	f000 fd3a 	bl	8003b38 <xTimerCreateTimerTask>
 80030c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d11b      	bne.n	8003104 <vTaskStartScheduler+0x98>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	613b      	str	r3, [r7, #16]
}
 80030de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <vTaskStartScheduler+0xcc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	334c      	adds	r3, #76	; 0x4c
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <vTaskStartScheduler+0xd0>)
 80030e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <vTaskStartScheduler+0xd4>)
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <vTaskStartScheduler+0xd8>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <vTaskStartScheduler+0xdc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030fe:	f001 f923 	bl	8004348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003102:	e00e      	b.n	8003122 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310a:	d10a      	bne.n	8003122 <vTaskStartScheduler+0xb6>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	60fb      	str	r3, [r7, #12]
}
 800311e:	bf00      	nop
 8003120:	e7fe      	b.n	8003120 <vTaskStartScheduler+0xb4>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	080055ec 	.word	0x080055ec
 8003130:	08003769 	.word	0x08003769
 8003134:	20000a0c 	.word	0x20000a0c
 8003138:	200008e8 	.word	0x200008e8
 800313c:	20000018 	.word	0x20000018
 8003140:	20000a08 	.word	0x20000a08
 8003144:	200009f4 	.word	0x200009f4
 8003148:	200009ec 	.word	0x200009ec

0800314c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <vTaskSuspendAll+0x18>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <vTaskSuspendAll+0x18>)
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000a10 	.word	0x20000a10

08003168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <xTaskResumeAll+0x114>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <xTaskResumeAll+0x2c>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	603b      	str	r3, [r7, #0]
}
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003194:	f001 f94a 	bl	800442c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003198:	4b38      	ldr	r3, [pc, #224]	; (800327c <xTaskResumeAll+0x114>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	4a37      	ldr	r2, [pc, #220]	; (800327c <xTaskResumeAll+0x114>)
 80031a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <xTaskResumeAll+0x114>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d161      	bne.n	800326e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031aa:	4b35      	ldr	r3, [pc, #212]	; (8003280 <xTaskResumeAll+0x118>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d05d      	beq.n	800326e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b2:	e02e      	b.n	8003212 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <xTaskResumeAll+0x11c>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3318      	adds	r3, #24
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f873 	bl	80022ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f86e 	bl	80022ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <xTaskResumeAll+0x120>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <xTaskResumeAll+0x120>)
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a27      	ldr	r2, [pc, #156]	; (800328c <xTaskResumeAll+0x124>)
 80031f0:	441a      	add	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f7fe fffc 	bl	80021f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <xTaskResumeAll+0x128>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	429a      	cmp	r2, r3
 800320a:	d302      	bcc.n	8003212 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <xTaskResumeAll+0x12c>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <xTaskResumeAll+0x11c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1cc      	bne.n	80031b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003220:	f000 fb5c 	bl	80038dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <xTaskResumeAll+0x130>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003230:	f000 f844 	bl	80032bc <xTaskIncrementTick>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <xTaskResumeAll+0x12c>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f1      	bne.n	8003230 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <xTaskResumeAll+0x130>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <xTaskResumeAll+0x12c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800325a:	2301      	movs	r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <xTaskResumeAll+0x134>)
 8003260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800326e:	f001 f90d 	bl	800448c <vPortExitCritical>

	return xAlreadyYielded;
 8003272:	68bb      	ldr	r3, [r7, #8]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000a10 	.word	0x20000a10
 8003280:	200009e8 	.word	0x200009e8
 8003284:	200009a8 	.word	0x200009a8
 8003288:	200009f0 	.word	0x200009f0
 800328c:	200008ec 	.word	0x200008ec
 8003290:	200008e8 	.word	0x200008e8
 8003294:	200009fc 	.word	0x200009fc
 8003298:	200009f8 	.word	0x200009f8
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <xTaskGetTickCount+0x18>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	200009ec 	.word	0x200009ec

080032bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c6:	4b51      	ldr	r3, [pc, #324]	; (800340c <xTaskIncrementTick+0x150>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 808d 	bne.w	80033ea <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032d0:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <xTaskIncrementTick+0x154>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032d8:	4a4d      	ldr	r2, [pc, #308]	; (8003410 <xTaskIncrementTick+0x154>)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d120      	bne.n	8003326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032e4:	4b4b      	ldr	r3, [pc, #300]	; (8003414 <xTaskIncrementTick+0x158>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <xTaskIncrementTick+0x48>
	__asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	603b      	str	r3, [r7, #0]
}
 8003300:	bf00      	nop
 8003302:	e7fe      	b.n	8003302 <xTaskIncrementTick+0x46>
 8003304:	4b43      	ldr	r3, [pc, #268]	; (8003414 <xTaskIncrementTick+0x158>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <xTaskIncrementTick+0x15c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a41      	ldr	r2, [pc, #260]	; (8003414 <xTaskIncrementTick+0x158>)
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4a41      	ldr	r2, [pc, #260]	; (8003418 <xTaskIncrementTick+0x15c>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <xTaskIncrementTick+0x160>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	4a3f      	ldr	r2, [pc, #252]	; (800341c <xTaskIncrementTick+0x160>)
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	f000 fadb 	bl	80038dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003326:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <xTaskIncrementTick+0x164>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	429a      	cmp	r2, r3
 800332e:	d34d      	bcc.n	80033cc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <xTaskIncrementTick+0x158>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <xTaskIncrementTick+0x82>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <xTaskIncrementTick+0x84>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <xTaskIncrementTick+0x164>)
 8003346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800334a:	601a      	str	r2, [r3, #0]
					break;
 800334c:	e03e      	b.n	80033cc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800334e:	4b31      	ldr	r3, [pc, #196]	; (8003414 <xTaskIncrementTick+0x158>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d203      	bcs.n	800336e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003366:	4a2e      	ldr	r2, [pc, #184]	; (8003420 <xTaskIncrementTick+0x164>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6013      	str	r3, [r2, #0]
						break;
 800336c:	e02e      	b.n	80033cc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3304      	adds	r3, #4
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe ff9a 	bl	80022ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3318      	adds	r3, #24
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe ff91 	bl	80022ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	2201      	movs	r2, #1
 8003390:	409a      	lsls	r2, r3
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <xTaskIncrementTick+0x168>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <xTaskIncrementTick+0x168>)
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <xTaskIncrementTick+0x16c>)
 80033aa:	441a      	add	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f7fe ff1f 	bl	80021f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <xTaskIncrementTick+0x170>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d3b4      	bcc.n	8003330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ca:	e7b1      	b.n	8003330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <xTaskIncrementTick+0x170>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d2:	4915      	ldr	r1, [pc, #84]	; (8003428 <xTaskIncrementTick+0x16c>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d907      	bls.n	80033f4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e004      	b.n	80033f4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <xTaskIncrementTick+0x174>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <xTaskIncrementTick+0x174>)
 80033f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <xTaskIncrementTick+0x178>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003400:	697b      	ldr	r3, [r7, #20]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000a10 	.word	0x20000a10
 8003410:	200009ec 	.word	0x200009ec
 8003414:	200009a0 	.word	0x200009a0
 8003418:	200009a4 	.word	0x200009a4
 800341c:	20000a00 	.word	0x20000a00
 8003420:	20000a08 	.word	0x20000a08
 8003424:	200009f0 	.word	0x200009f0
 8003428:	200008ec 	.word	0x200008ec
 800342c:	200008e8 	.word	0x200008e8
 8003430:	200009f8 	.word	0x200009f8
 8003434:	200009fc 	.word	0x200009fc

08003438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <vTaskSwitchContext+0xac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <vTaskSwitchContext+0xb0>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800344c:	e044      	b.n	80034d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <vTaskSwitchContext+0xb0>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003454:	4b25      	ldr	r3, [pc, #148]	; (80034ec <vTaskSwitchContext+0xb4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	f1c3 031f 	rsb	r3, r3, #31
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	4921      	ldr	r1, [pc, #132]	; (80034f0 <vTaskSwitchContext+0xb8>)
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <vTaskSwitchContext+0x5c>
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
}
 8003490:	bf00      	nop
 8003492:	e7fe      	b.n	8003492 <vTaskSwitchContext+0x5a>
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <vTaskSwitchContext+0xb8>)
 80034a0:	4413      	add	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	3308      	adds	r3, #8
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d104      	bne.n	80034c4 <vTaskSwitchContext+0x8c>
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <vTaskSwitchContext+0xbc>)
 80034cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <vTaskSwitchContext+0xbc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	334c      	adds	r3, #76	; 0x4c
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <vTaskSwitchContext+0xc0>)
 80034d6:	6013      	str	r3, [r2, #0]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000a10 	.word	0x20000a10
 80034e8:	200009fc 	.word	0x200009fc
 80034ec:	200009f0 	.word	0x200009f0
 80034f0:	200008ec 	.word	0x200008ec
 80034f4:	200008e8 	.word	0x200008e8
 80034f8:	20000018 	.word	0x20000018

080034fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	60fb      	str	r3, [r7, #12]
}
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <vTaskPlaceOnEventList+0x44>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3318      	adds	r3, #24
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe fe86 	bl	800223c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003530:	2101      	movs	r1, #1
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f000 fa9a 	bl	8003a6c <prvAddCurrentTaskToDelayedList>
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200008e8 	.word	0x200008e8

08003544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	617b      	str	r3, [r7, #20]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <vTaskPlaceOnEventListRestricted+0x54>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3318      	adds	r3, #24
 8003572:	4619      	mov	r1, r3
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f7fe fe3e 	bl	80021f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003584:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	68b8      	ldr	r0, [r7, #8]
 800358a:	f000 fa6f 	bl	8003a6c <prvAddCurrentTaskToDelayedList>
	}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200008e8 	.word	0x200008e8

0800359c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60fb      	str	r3, [r7, #12]
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	3318      	adds	r3, #24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe fe6d 	bl	80022ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <xTaskRemoveFromEventList+0xac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11c      	bne.n	8003614 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	3304      	adds	r3, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fe64 	bl	80022ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2201      	movs	r2, #1
 80035ea:	409a      	lsls	r2, r3
 80035ec:	4b17      	ldr	r3, [pc, #92]	; (800364c <xTaskRemoveFromEventList+0xb0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <xTaskRemoveFromEventList+0xb0>)
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <xTaskRemoveFromEventList+0xb4>)
 8003604:	441a      	add	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fe fdf2 	bl	80021f6 <vListInsertEnd>
 8003612:	e005      	b.n	8003620 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3318      	adds	r3, #24
 8003618:	4619      	mov	r1, r3
 800361a:	480e      	ldr	r0, [pc, #56]	; (8003654 <xTaskRemoveFromEventList+0xb8>)
 800361c:	f7fe fdeb 	bl	80021f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <xTaskRemoveFromEventList+0xbc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	429a      	cmp	r2, r3
 800362c:	d905      	bls.n	800363a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <xTaskRemoveFromEventList+0xc0>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e001      	b.n	800363e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800363e:	697b      	ldr	r3, [r7, #20]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000a10 	.word	0x20000a10
 800364c:	200009f0 	.word	0x200009f0
 8003650:	200008ec 	.word	0x200008ec
 8003654:	200009a8 	.word	0x200009a8
 8003658:	200008e8 	.word	0x200008e8
 800365c:	200009fc 	.word	0x200009fc

08003660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <vTaskInternalSetTimeOutState+0x24>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <vTaskInternalSetTimeOutState+0x28>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	605a      	str	r2, [r3, #4]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000a00 	.word	0x20000a00
 8003688:	200009ec 	.word	0x200009ec

0800368c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	613b      	str	r3, [r7, #16]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60fb      	str	r3, [r7, #12]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80036ce:	f000 fead 	bl	800442c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <xTaskCheckForTimeOut+0xbc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ea:	d102      	bne.n	80036f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e023      	b.n	800373a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <xTaskCheckForTimeOut+0xc0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d007      	beq.n	800370e <xTaskCheckForTimeOut+0x82>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d302      	bcc.n	800370e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	e015      	b.n	800373a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d20b      	bcs.n	8003730 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff9b 	bl	8003660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e004      	b.n	800373a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800373a:	f000 fea7 	bl	800448c <vPortExitCritical>

	return xReturn;
 800373e:	69fb      	ldr	r3, [r7, #28]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200009ec 	.word	0x200009ec
 800374c:	20000a00 	.word	0x20000a00

08003750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <vTaskMissedYield+0x14>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	200009fc 	.word	0x200009fc

08003768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003770:	f000 f852 	bl	8003818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <prvIdleTask+0x28>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d9f9      	bls.n	8003770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <prvIdleTask+0x2c>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800378c:	e7f0      	b.n	8003770 <prvIdleTask+0x8>
 800378e:	bf00      	nop
 8003790:	200008ec 	.word	0x200008ec
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800379e:	2300      	movs	r3, #0
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	e00c      	b.n	80037be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <prvInitialiseTaskLists+0x60>)
 80037b0:	4413      	add	r3, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fcf4 	bl	80021a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3301      	adds	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d9ef      	bls.n	80037a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <prvInitialiseTaskLists+0x64>)
 80037c6:	f7fe fceb 	bl	80021a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037ca:	480d      	ldr	r0, [pc, #52]	; (8003800 <prvInitialiseTaskLists+0x68>)
 80037cc:	f7fe fce8 	bl	80021a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <prvInitialiseTaskLists+0x6c>)
 80037d2:	f7fe fce5 	bl	80021a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037d6:	480c      	ldr	r0, [pc, #48]	; (8003808 <prvInitialiseTaskLists+0x70>)
 80037d8:	f7fe fce2 	bl	80021a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037dc:	480b      	ldr	r0, [pc, #44]	; (800380c <prvInitialiseTaskLists+0x74>)
 80037de:	f7fe fcdf 	bl	80021a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <prvInitialiseTaskLists+0x78>)
 80037e4:	4a05      	ldr	r2, [pc, #20]	; (80037fc <prvInitialiseTaskLists+0x64>)
 80037e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <prvInitialiseTaskLists+0x7c>)
 80037ea:	4a05      	ldr	r2, [pc, #20]	; (8003800 <prvInitialiseTaskLists+0x68>)
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200008ec 	.word	0x200008ec
 80037fc:	20000978 	.word	0x20000978
 8003800:	2000098c 	.word	0x2000098c
 8003804:	200009a8 	.word	0x200009a8
 8003808:	200009bc 	.word	0x200009bc
 800380c:	200009d4 	.word	0x200009d4
 8003810:	200009a0 	.word	0x200009a0
 8003814:	200009a4 	.word	0x200009a4

08003818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381e:	e019      	b.n	8003854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003820:	f000 fe04 	bl	800442c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003824:	4b10      	ldr	r3, [pc, #64]	; (8003868 <prvCheckTasksWaitingTermination+0x50>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fd3b 	bl	80022ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <prvCheckTasksWaitingTermination+0x54>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b01      	subs	r3, #1
 800383c:	4a0b      	ldr	r2, [pc, #44]	; (800386c <prvCheckTasksWaitingTermination+0x54>)
 800383e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800384a:	f000 fe1f 	bl	800448c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f810 	bl	8003874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <prvCheckTasksWaitingTermination+0x58>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e1      	bne.n	8003820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200009bc 	.word	0x200009bc
 800386c:	200009e8 	.word	0x200009e8
 8003870:	200009d0 	.word	0x200009d0

08003874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	334c      	adds	r3, #76	; 0x4c
 8003880:	4618      	mov	r0, r3
 8003882:	f001 fafd 	bl	8004e80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d108      	bne.n	80038a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	4618      	mov	r0, r3
 8003896:	f000 ff8d 	bl	80047b4 <vPortFree>
				vPortFree( pxTCB );
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 ff8a 	bl	80047b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038a0:	e018      	b.n	80038d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d103      	bne.n	80038b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 ff81 	bl	80047b4 <vPortFree>
	}
 80038b2:	e00f      	b.n	80038d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d00a      	beq.n	80038d4 <prvDeleteTCB+0x60>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60fb      	str	r3, [r7, #12]
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <prvDeleteTCB+0x5e>
	}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <prvResetNextTaskUnblockTime+0x40>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <prvResetNextTaskUnblockTime+0x14>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <prvResetNextTaskUnblockTime+0x16>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <prvResetNextTaskUnblockTime+0x44>)
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038fe:	e008      	b.n	8003912 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <prvResetNextTaskUnblockTime+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a04      	ldr	r2, [pc, #16]	; (8003920 <prvResetNextTaskUnblockTime+0x44>)
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	200009a0 	.word	0x200009a0
 8003920:	20000a08 	.word	0x20000a08

08003924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <xTaskGetSchedulerState+0x34>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003932:	2301      	movs	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	e008      	b.n	800394a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <xTaskGetSchedulerState+0x38>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003940:	2302      	movs	r3, #2
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	e001      	b.n	800394a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003946:	2300      	movs	r3, #0
 8003948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800394a:	687b      	ldr	r3, [r7, #4]
	}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200009f4 	.word	0x200009f4
 800395c:	20000a10 	.word	0x20000a10

08003960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d06e      	beq.n	8003a54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003976:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <xTaskPriorityDisinherit+0x100>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	429a      	cmp	r2, r3
 800397e:	d00a      	beq.n	8003996 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	60fb      	str	r3, [r7, #12]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	60bb      	str	r3, [r7, #8]
}
 80039b0:	bf00      	nop
 80039b2:	e7fe      	b.n	80039b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	1e5a      	subs	r2, r3, #1
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d044      	beq.n	8003a54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d140      	bne.n	8003a54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fc68 	bl	80022ac <uxListRemove>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d115      	bne.n	8003a0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	491f      	ldr	r1, [pc, #124]	; (8003a64 <xTaskPriorityDisinherit+0x104>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <xTaskPriorityDisinherit+0xae>
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <xTaskPriorityDisinherit+0x108>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <xTaskPriorityDisinherit+0x108>)
 8003a0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f1c3 0207 	rsb	r2, r3, #7
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	2201      	movs	r2, #1
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <xTaskPriorityDisinherit+0x108>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <xTaskPriorityDisinherit+0x108>)
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <xTaskPriorityDisinherit+0x104>)
 8003a42:	441a      	add	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7fe fbd3 	bl	80021f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a54:	697b      	ldr	r3, [r7, #20]
	}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200008e8 	.word	0x200008e8
 8003a64:	200008ec 	.word	0x200008ec
 8003a68:	200009f0 	.word	0x200009f0

08003a6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a76:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fc12 	bl	80022ac <uxListRemove>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aa4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aac:	d10a      	bne.n	8003ac4 <prvAddCurrentTaskToDelayedList+0x58>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	481a      	ldr	r0, [pc, #104]	; (8003b28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003abe:	f7fe fb9a 	bl	80021f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ac2:	e026      	b.n	8003b12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003acc:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d209      	bcs.n	8003af0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fe fba7 	bl	800223c <vListInsert>
}
 8003aee:	e010      	b.n	8003b12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fe fb9d 	bl	800223c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d202      	bcs.n	8003b12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b0c:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6013      	str	r3, [r2, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200009ec 	.word	0x200009ec
 8003b20:	200008e8 	.word	0x200008e8
 8003b24:	200009f0 	.word	0x200009f0
 8003b28:	200009d4 	.word	0x200009d4
 8003b2c:	200009a4 	.word	0x200009a4
 8003b30:	200009a0 	.word	0x200009a0
 8003b34:	20000a08 	.word	0x20000a08

08003b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b42:	f000 fb41 	bl	80041c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <xTimerCreateTimerTask+0x80>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d021      	beq.n	8003b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b56:	1d3a      	adds	r2, r7, #4
 8003b58:	f107 0108 	add.w	r1, r7, #8
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fc fb0d 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	9202      	str	r2, [sp, #8]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2306      	movs	r3, #6
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	460a      	mov	r2, r1
 8003b78:	4910      	ldr	r1, [pc, #64]	; (8003bbc <xTimerCreateTimerTask+0x84>)
 8003b7a:	4811      	ldr	r0, [pc, #68]	; (8003bc0 <xTimerCreateTimerTask+0x88>)
 8003b7c:	f7ff f8a0 	bl	8002cc0 <xTaskCreateStatic>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4a10      	ldr	r2, [pc, #64]	; (8003bc4 <xTimerCreateTimerTask+0x8c>)
 8003b84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b86:	4b0f      	ldr	r3, [pc, #60]	; (8003bc4 <xTimerCreateTimerTask+0x8c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	613b      	str	r3, [r7, #16]
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003bae:	697b      	ldr	r3, [r7, #20]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000a44 	.word	0x20000a44
 8003bbc:	080055f4 	.word	0x080055f4
 8003bc0:	08003e05 	.word	0x08003e05
 8003bc4:	20000a48 	.word	0x20000a48

08003bc8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003bd6:	202c      	movs	r0, #44	; 0x2c
 8003bd8:	f000 fd28 	bl	800462c <pvPortMalloc>
 8003bdc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f846 	bl	8003c84 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003c00:	697b      	ldr	r3, [r7, #20]
	}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b08a      	sub	sp, #40	; 0x28
 8003c0e:	af02      	add	r7, sp, #8
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003c18:	232c      	movs	r3, #44	; 0x2c
 8003c1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b2c      	cmp	r3, #44	; 0x2c
 8003c20:	d00a      	beq.n	8003c38 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	61bb      	str	r3, [r7, #24]
}
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <xTimerCreateStatic+0x4a>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	617b      	str	r3, [r7, #20]
}
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f809 	bl	8003c84 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
	}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	617b      	str	r3, [r7, #20]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003cb4:	f000 fa88 	bl	80041c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fa7f 	bl	80021de <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003ce0:	bf00      	nop
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	623b      	str	r3, [r7, #32]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <xTimerGenericCommand+0x98>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02a      	beq.n	8003d74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	dc18      	bgt.n	8003d62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d30:	f7ff fdf8 	bl	8003924 <xTaskGetSchedulerState>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d109      	bne.n	8003d4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <xTimerGenericCommand+0x98>)
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f107 0114 	add.w	r1, r7, #20
 8003d42:	2300      	movs	r3, #0
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	f7fe fbd9 	bl	80024fc <xQueueGenericSend>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d4c:	e012      	b.n	8003d74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <xTimerGenericCommand+0x98>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f107 0114 	add.w	r1, r7, #20
 8003d56:	2300      	movs	r3, #0
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f7fe fbcf 	bl	80024fc <xQueueGenericSend>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8003d60:	e008      	b.n	8003d74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <xTimerGenericCommand+0x98>)
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	f107 0114 	add.w	r1, r7, #20
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	f7fe fcc3 	bl	80026f8 <xQueueGenericSendFromISR>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3728      	adds	r7, #40	; 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000a44 	.word	0x20000a44

08003d84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <prvProcessExpiredTimer+0x7c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fa85 	bl	80022ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d122      	bne.n	8003df0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	18d1      	adds	r1, r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f000 f8c8 	bl	8003f4c <prvInsertTimerInActiveList>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f7ff ff8b 	bl	8003ce8 <xTimerGenericCommand>
 8003dd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60fb      	str	r3, [r7, #12]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	6978      	ldr	r0, [r7, #20]
 8003df6:	4798      	blx	r3
}
 8003df8:	bf00      	nop
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000a3c 	.word	0x20000a3c

08003e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e0c:	f107 0308 	add.w	r3, r7, #8
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f857 	bl	8003ec4 <prvGetNextExpireTime>
 8003e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f803 	bl	8003e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e22:	f000 f8d5 	bl	8003fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e26:	e7f1      	b.n	8003e0c <prvTimerTask+0x8>

08003e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e32:	f7ff f98b 	bl	800314c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e36:	f107 0308 	add.w	r3, r7, #8
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f866 	bl	8003f0c <prvSampleTimeNow>
 8003e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d130      	bne.n	8003eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <prvProcessTimerOrBlockTask+0x3c>
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d806      	bhi.n	8003e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e56:	f7ff f987 	bl	8003168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff91 	bl	8003d84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e62:	e024      	b.n	8003eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <prvProcessTimerOrBlockTask+0x90>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <prvProcessTimerOrBlockTask+0x94>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7fe fee5 	bl	8002c58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e8e:	f7ff f96b 	bl	8003168 <xTaskResumeAll>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <prvProcessTimerOrBlockTask+0x98>)
 8003e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	f3bf 8f6f 	isb	sy
}
 8003ea8:	e001      	b.n	8003eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003eaa:	f7ff f95d 	bl	8003168 <xTaskResumeAll>
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000a40 	.word	0x20000a40
 8003ebc:	20000a44 	.word	0x20000a44
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <prvGetNextExpireTime+0x44>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <prvGetNextExpireTime+0x44>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e001      	b.n	8003efa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000a3c 	.word	0x20000a3c

08003f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f14:	f7ff f9c4 	bl	80032a0 <xTaskGetTickCount>
 8003f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <prvSampleTimeNow+0x3c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d205      	bcs.n	8003f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f24:	f000 f8ee 	bl	8004104 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e002      	b.n	8003f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f36:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <prvSampleTimeNow+0x3c>)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000a4c 	.word	0x20000a4c

08003f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d812      	bhi.n	8003f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e01b      	b.n	8003fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <prvInsertTimerInActiveList+0x7c>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fe f953 	bl	800223c <vListInsert>
 8003f96:	e012      	b.n	8003fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d206      	bcs.n	8003fae <prvInsertTimerInActiveList+0x62>
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e007      	b.n	8003fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <prvInsertTimerInActiveList+0x80>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fe f93f 	bl	800223c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003fbe:	697b      	ldr	r3, [r7, #20]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000a40 	.word	0x20000a40
 8003fcc:	20000a3c 	.word	0x20000a3c

08003fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	; 0x30
 8003fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd6:	e081      	b.n	80040dc <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	db7d      	blt.n	80040da <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	3304      	adds	r3, #4
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe f95c 	bl	80022ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff88 	bl	8003f0c <prvSampleTimeNow>
 8003ffc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b09      	cmp	r3, #9
 8004002:	d86b      	bhi.n	80040dc <prvProcessReceivedCommands+0x10c>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <prvProcessReceivedCommands+0x3c>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004035 	.word	0x08004035
 8004010:	08004035 	.word	0x08004035
 8004014:	08004035 	.word	0x08004035
 8004018:	080040dd 	.word	0x080040dd
 800401c:	08004091 	.word	0x08004091
 8004020:	080040c9 	.word	0x080040c9
 8004024:	08004035 	.word	0x08004035
 8004028:	08004035 	.word	0x08004035
 800402c:	080040dd 	.word	0x080040dd
 8004030:	08004091 	.word	0x08004091
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	18d1      	adds	r1, r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004042:	f7ff ff83 	bl	8003f4c <prvInsertTimerInActiveList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d047      	beq.n	80040dc <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004052:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d13f      	bne.n	80040dc <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	441a      	add	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	2100      	movs	r1, #0
 800406c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800406e:	f7ff fe3b 	bl	8003ce8 <xTimerGenericCommand>
 8004072:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d130      	bne.n	80040dc <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	61bb      	str	r3, [r7, #24]
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	617b      	str	r3, [r7, #20]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	18d1      	adds	r1, r2, r3
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040c2:	f7ff ff43 	bl	8003f4c <prvInsertTimerInActiveList>
					break;
 80040c6:	e009      	b.n	80040dc <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80040d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040d4:	f000 fb6e 	bl	80047b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040d8:	e000      	b.n	80040dc <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80040da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <prvProcessReceivedCommands+0x130>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f107 0108 	add.w	r1, r7, #8
 80040e4:	2200      	movs	r2, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fb9e 	bl	8002828 <xQueueReceive>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f47f af72 	bne.w	8003fd8 <prvProcessReceivedCommands+0x8>
	}
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3728      	adds	r7, #40	; 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000a44 	.word	0x20000a44

08004104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800410a:	e045      	b.n	8004198 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <prvSwitchTimerLists+0xbc>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <prvSwitchTimerLists+0xbc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe f8c1 	bl	80022ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d12e      	bne.n	8004198 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d90e      	bls.n	800416a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004158:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <prvSwitchTimerLists+0xbc>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f7fe f86a 	bl	800223c <vListInsert>
 8004168:	e016      	b.n	8004198 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800416a:	2300      	movs	r3, #0
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	2100      	movs	r1, #0
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff fdb7 	bl	8003ce8 <xTimerGenericCommand>
 800417a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	603b      	str	r3, [r7, #0]
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <prvSwitchTimerLists+0xbc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1b4      	bne.n	800410c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <prvSwitchTimerLists+0xbc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <prvSwitchTimerLists+0xbc>)
 80041ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <prvSwitchTimerLists+0xc0>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6013      	str	r3, [r2, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000a3c 	.word	0x20000a3c
 80041c4:	20000a40 	.word	0x20000a40

080041c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041ce:	f000 f92d 	bl	800442c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <prvCheckForValidListAndQueue+0x60>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d120      	bne.n	800421c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041da:	4814      	ldr	r0, [pc, #80]	; (800422c <prvCheckForValidListAndQueue+0x64>)
 80041dc:	f7fd ffe0 	bl	80021a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041e0:	4813      	ldr	r0, [pc, #76]	; (8004230 <prvCheckForValidListAndQueue+0x68>)
 80041e2:	f7fd ffdd 	bl	80021a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <prvCheckForValidListAndQueue+0x6c>)
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <prvCheckForValidListAndQueue+0x64>)
 80041ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <prvCheckForValidListAndQueue+0x70>)
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <prvCheckForValidListAndQueue+0x68>)
 80041f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041f2:	2300      	movs	r3, #0
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <prvCheckForValidListAndQueue+0x74>)
 80041f8:	4a11      	ldr	r2, [pc, #68]	; (8004240 <prvCheckForValidListAndQueue+0x78>)
 80041fa:	210c      	movs	r1, #12
 80041fc:	200a      	movs	r0, #10
 80041fe:	f7fe f8e7 	bl	80023d0 <xQueueGenericCreateStatic>
 8004202:	4603      	mov	r3, r0
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <prvCheckForValidListAndQueue+0x60>)
 8004206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <prvCheckForValidListAndQueue+0x60>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <prvCheckForValidListAndQueue+0x60>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	490b      	ldr	r1, [pc, #44]	; (8004244 <prvCheckForValidListAndQueue+0x7c>)
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fcf6 	bl	8002c08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800421c:	f000 f936 	bl	800448c <vPortExitCritical>
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000a44 	.word	0x20000a44
 800422c:	20000a14 	.word	0x20000a14
 8004230:	20000a28 	.word	0x20000a28
 8004234:	20000a3c 	.word	0x20000a3c
 8004238:	20000a40 	.word	0x20000a40
 800423c:	20000ac8 	.word	0x20000ac8
 8004240:	20000a50 	.word	0x20000a50
 8004244:	080055fc 	.word	0x080055fc

08004248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b04      	subs	r3, #4
 8004258:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b04      	subs	r3, #4
 8004266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0201 	bic.w	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b04      	subs	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004278:	4a08      	ldr	r2, [pc, #32]	; (800429c <pxPortInitialiseStack+0x54>)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b14      	subs	r3, #20
 8004282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b20      	subs	r3, #32
 800428e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	080042a1 	.word	0x080042a1

080042a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <prvTaskExitError+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b2:	d00a      	beq.n	80042ca <prvTaskExitError+0x2a>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	60fb      	str	r3, [r7, #12]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <prvTaskExitError+0x28>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
}
 80042dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042de:	bf00      	nop
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0fc      	beq.n	80042e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000014 	.word	0x20000014
	...

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	f04e 0e0d 	orr.w	lr, lr, #13
 800431e:	4770      	bx	lr

08004320 <pxCurrentTCBConst2>:
 8004320:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004328:	4806      	ldr	r0, [pc, #24]	; (8004344 <prvPortStartFirstTask+0x1c>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	b662      	cpsie	i
 8004334:	b661      	cpsie	f
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	df00      	svc	0
 8004340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004342:	bf00      	nop
 8004344:	e000ed08 	.word	0xe000ed08

08004348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <xPortStartScheduler+0xd0>)
 8004350:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <xPortStartScheduler+0xd4>)
 8004374:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <xPortStartScheduler+0xd8>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800437c:	e009      	b.n	8004392 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800437e:	4b28      	ldr	r3, [pc, #160]	; (8004420 <xPortStartScheduler+0xd8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3b01      	subs	r3, #1
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <xPortStartScheduler+0xd8>)
 8004386:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d0ef      	beq.n	800437e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <xPortStartScheduler+0xd8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d00a      	beq.n	80043c0 <xPortStartScheduler+0x78>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60bb      	str	r3, [r7, #8]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <xPortStartScheduler+0xd8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <xPortStartScheduler+0xd8>)
 80043c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <xPortStartScheduler+0xd8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <xPortStartScheduler+0xd8>)
 80043d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <xPortStartScheduler+0xdc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <xPortStartScheduler+0xdc>)
 80043e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <xPortStartScheduler+0xdc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <xPortStartScheduler+0xdc>)
 80043f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043f6:	f000 f8b9 	bl	800456c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <xPortStartScheduler+0xe0>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004400:	f7ff ff92 	bl	8004328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004404:	f7ff f818 	bl	8003438 <vTaskSwitchContext>
	prvTaskExitError();
 8004408:	f7ff ff4a 	bl	80042a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000e400 	.word	0xe000e400
 800441c:	20000b10 	.word	0x20000b10
 8004420:	20000b14 	.word	0x20000b14
 8004424:	e000ed20 	.word	0xe000ed20
 8004428:	20000014 	.word	0x20000014

0800442c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	607b      	str	r3, [r7, #4]
}
 8004444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <vPortEnterCritical+0x58>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	4a0d      	ldr	r2, [pc, #52]	; (8004484 <vPortEnterCritical+0x58>)
 800444e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <vPortEnterCritical+0x58>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d10f      	bne.n	8004478 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <vPortEnterCritical+0x5c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <vPortEnterCritical+0x4c>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	603b      	str	r3, [r7, #0]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <vPortEnterCritical+0x4a>
	}
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000014 	.word	0x20000014
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <vPortExitCritical+0x4c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <vPortExitCritical+0x24>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	607b      	str	r3, [r7, #4]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044b0:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <vPortExitCritical+0x4c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <vPortExitCritical+0x4c>)
 80044b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <vPortExitCritical+0x4c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <vPortExitCritical+0x42>
 80044c2:	2300      	movs	r3, #0
 80044c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f383 8811 	msr	BASEPRI, r3
}
 80044cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000014 	.word	0x20000014
 80044dc:	00000000 	.word	0x00000000

080044e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044f0:	6010      	str	r0, [r2, #0]
 80044f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044fa:	f380 8811 	msr	BASEPRI, r0
 80044fe:	f7fe ff9b 	bl	8003438 <vTaskSwitchContext>
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004516:	f380 8809 	msr	PSP, r0
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	4770      	bx	lr

08004520 <pxCurrentTCBConst>:
 8004520:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
}
 8004540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004542:	f7fe febb 	bl	80032bc <xTaskIncrementTick>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <SysTick_Handler+0x40>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f383 8811 	msr	BASEPRI, r3
}
 800455e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <vPortSetupTimerInterrupt+0x30>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <vPortSetupTimerInterrupt+0x38>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <vPortSetupTimerInterrupt+0x40>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b03      	ldr	r3, [pc, #12]	; (800459c <vPortSetupTimerInterrupt+0x30>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	e000e010 	.word	0xe000e010
 80045a0:	e000e018 	.word	0xe000e018
 80045a4:	20000008 	.word	0x20000008
 80045a8:	10624dd3 	.word	0x10624dd3
 80045ac:	e000e014 	.word	0xe000e014

080045b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045b6:	f3ef 8305 	mrs	r3, IPSR
 80045ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	d914      	bls.n	80045ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <vPortValidateInterruptPriority+0x6c>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <vPortValidateInterruptPriority+0x70>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	7afa      	ldrb	r2, [r7, #11]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d20a      	bcs.n	80045ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	607b      	str	r3, [r7, #4]
}
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <vPortValidateInterruptPriority+0x74>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <vPortValidateInterruptPriority+0x78>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d90a      	bls.n	8004612 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	603b      	str	r3, [r7, #0]
}
 800460e:	bf00      	nop
 8004610:	e7fe      	b.n	8004610 <vPortValidateInterruptPriority+0x60>
	}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	e000e3f0 	.word	0xe000e3f0
 8004620:	20000b10 	.word	0x20000b10
 8004624:	e000ed0c 	.word	0xe000ed0c
 8004628:	20000b14 	.word	0x20000b14

0800462c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004638:	f7fe fd88 	bl	800314c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800463c:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <pvPortMalloc+0x174>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004644:	f000 f910 	bl	8004868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004648:	4b56      	ldr	r3, [pc, #344]	; (80047a4 <pvPortMalloc+0x178>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 808e 	bne.w	8004772 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01d      	beq.n	8004698 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800465c:	2208      	movs	r2, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b00      	cmp	r3, #0
 800466c:	d014      	beq.n	8004698 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f023 0307 	bic.w	r3, r3, #7
 8004674:	3308      	adds	r3, #8
 8004676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <pvPortMalloc+0x6c>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	617b      	str	r3, [r7, #20]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d069      	beq.n	8004772 <pvPortMalloc+0x146>
 800469e:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <pvPortMalloc+0x17c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d864      	bhi.n	8004772 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046a8:	4b40      	ldr	r3, [pc, #256]	; (80047ac <pvPortMalloc+0x180>)
 80046aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046ac:	4b3f      	ldr	r3, [pc, #252]	; (80047ac <pvPortMalloc+0x180>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046b2:	e004      	b.n	80046be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d903      	bls.n	80046d0 <pvPortMalloc+0xa4>
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f1      	bne.n	80046b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046d0:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <pvPortMalloc+0x174>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d04b      	beq.n	8004772 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2208      	movs	r2, #8
 80046e0:	4413      	add	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	2308      	movs	r3, #8
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d91f      	bls.n	800473c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <pvPortMalloc+0xf8>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	613b      	str	r3, [r7, #16]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	1ad2      	subs	r2, r2, r3
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004736:	69b8      	ldr	r0, [r7, #24]
 8004738:	f000 f8f8 	bl	800492c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <pvPortMalloc+0x17c>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <pvPortMalloc+0x17c>)
 8004748:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <pvPortMalloc+0x17c>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <pvPortMalloc+0x184>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d203      	bcs.n	800475e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <pvPortMalloc+0x17c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <pvPortMalloc+0x184>)
 800475c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <pvPortMalloc+0x178>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	431a      	orrs	r2, r3
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004772:	f7fe fcf9 	bl	8003168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <pvPortMalloc+0x16a>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60fb      	str	r3, [r7, #12]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <pvPortMalloc+0x168>
	return pvReturn;
 8004796:	69fb      	ldr	r3, [r7, #28]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20001720 	.word	0x20001720
 80047a4:	2000172c 	.word	0x2000172c
 80047a8:	20001724 	.word	0x20001724
 80047ac:	20001718 	.word	0x20001718
 80047b0:	20001728 	.word	0x20001728

080047b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d048      	beq.n	8004858 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047c6:	2308      	movs	r3, #8
 80047c8:	425b      	negs	r3, r3
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4413      	add	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <vPortFree+0xac>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <vPortFree+0x44>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60fb      	str	r3, [r7, #12]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <vPortFree+0x62>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60bb      	str	r3, [r7, #8]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <vPortFree+0xac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d019      	beq.n	8004858 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d115      	bne.n	8004858 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortFree+0xac>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	43db      	mvns	r3, r3
 8004836:	401a      	ands	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800483c:	f7fe fc86 	bl	800314c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <vPortFree+0xb0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4413      	add	r3, r2
 800484a:	4a06      	ldr	r2, [pc, #24]	; (8004864 <vPortFree+0xb0>)
 800484c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f000 f86c 	bl	800492c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004854:	f7fe fc88 	bl	8003168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	2000172c 	.word	0x2000172c
 8004864:	20001724 	.word	0x20001724

08004868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800486e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <prvHeapInit+0xac>)
 8004876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3307      	adds	r3, #7
 8004886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <prvHeapInit+0xac>)
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <prvHeapInit+0xb0>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <prvHeapInit+0xb0>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4413      	add	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048b4:	2208      	movs	r2, #8
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <prvHeapInit+0xb4>)
 80048c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <prvHeapInit+0xb4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <prvHeapInit+0xb4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	1ad2      	subs	r2, r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <prvHeapInit+0xb4>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <prvHeapInit+0xb8>)
 80048f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a09      	ldr	r2, [pc, #36]	; (8004924 <prvHeapInit+0xbc>)
 80048fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <prvHeapInit+0xc0>)
 8004902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004906:	601a      	str	r2, [r3, #0]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000b18 	.word	0x20000b18
 8004918:	20001718 	.word	0x20001718
 800491c:	20001720 	.word	0x20001720
 8004920:	20001728 	.word	0x20001728
 8004924:	20001724 	.word	0x20001724
 8004928:	2000172c 	.word	0x2000172c

0800492c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <prvInsertBlockIntoFreeList+0xa8>)
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e002      	b.n	8004940 <prvInsertBlockIntoFreeList+0x14>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d8f7      	bhi.n	800493a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d108      	bne.n	800496e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	441a      	add	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	441a      	add	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d118      	bne.n	80049b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <prvInsertBlockIntoFreeList+0xac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d00d      	beq.n	80049aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e008      	b.n	80049bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <prvInsertBlockIntoFreeList+0xac>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e003      	b.n	80049bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d002      	beq.n	80049ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	20001718 	.word	0x20001718
 80049d8:	20001720 	.word	0x20001720

080049dc <__errno>:
 80049dc:	4b01      	ldr	r3, [pc, #4]	; (80049e4 <__errno+0x8>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000018 	.word	0x20000018

080049e8 <std>:
 80049e8:	2300      	movs	r3, #0
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
 80049ee:	e9c0 3300 	strd	r3, r3, [r0]
 80049f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049f6:	6083      	str	r3, [r0, #8]
 80049f8:	8181      	strh	r1, [r0, #12]
 80049fa:	6643      	str	r3, [r0, #100]	; 0x64
 80049fc:	81c2      	strh	r2, [r0, #14]
 80049fe:	6183      	str	r3, [r0, #24]
 8004a00:	4619      	mov	r1, r3
 8004a02:	2208      	movs	r2, #8
 8004a04:	305c      	adds	r0, #92	; 0x5c
 8004a06:	f000 f91a 	bl	8004c3e <memset>
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <std+0x38>)
 8004a0c:	6224      	str	r4, [r4, #32]
 8004a0e:	6263      	str	r3, [r4, #36]	; 0x24
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <std+0x3c>)
 8004a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <std+0x40>)
 8004a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <std+0x44>)
 8004a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	bf00      	nop
 8004a20:	08004f59 	.word	0x08004f59
 8004a24:	08004f7b 	.word	0x08004f7b
 8004a28:	08004fb3 	.word	0x08004fb3
 8004a2c:	08004fd7 	.word	0x08004fd7

08004a30 <_cleanup_r>:
 8004a30:	4901      	ldr	r1, [pc, #4]	; (8004a38 <_cleanup_r+0x8>)
 8004a32:	f000 b8af 	b.w	8004b94 <_fwalk_reent>
 8004a36:	bf00      	nop
 8004a38:	080052a9 	.word	0x080052a9

08004a3c <__sfmoreglue>:
 8004a3c:	2268      	movs	r2, #104	; 0x68
 8004a3e:	b570      	push	{r4, r5, r6, lr}
 8004a40:	1e4d      	subs	r5, r1, #1
 8004a42:	4355      	muls	r5, r2
 8004a44:	460e      	mov	r6, r1
 8004a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a4a:	f000 f921 	bl	8004c90 <_malloc_r>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	b140      	cbz	r0, 8004a64 <__sfmoreglue+0x28>
 8004a52:	2100      	movs	r1, #0
 8004a54:	e9c0 1600 	strd	r1, r6, [r0]
 8004a58:	300c      	adds	r0, #12
 8004a5a:	60a0      	str	r0, [r4, #8]
 8004a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a60:	f000 f8ed 	bl	8004c3e <memset>
 8004a64:	4620      	mov	r0, r4
 8004a66:	bd70      	pop	{r4, r5, r6, pc}

08004a68 <__sfp_lock_acquire>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__sfp_lock_acquire+0x8>)
 8004a6a:	f000 b8d8 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 8004a6e:	bf00      	nop
 8004a70:	20001731 	.word	0x20001731

08004a74 <__sfp_lock_release>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__sfp_lock_release+0x8>)
 8004a76:	f000 b8d3 	b.w	8004c20 <__retarget_lock_release_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	20001731 	.word	0x20001731

08004a80 <__sinit_lock_acquire>:
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <__sinit_lock_acquire+0x8>)
 8004a82:	f000 b8cc 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 8004a86:	bf00      	nop
 8004a88:	20001732 	.word	0x20001732

08004a8c <__sinit_lock_release>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__sinit_lock_release+0x8>)
 8004a8e:	f000 b8c7 	b.w	8004c20 <__retarget_lock_release_recursive>
 8004a92:	bf00      	nop
 8004a94:	20001732 	.word	0x20001732

08004a98 <__sinit>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	f7ff fff0 	bl	8004a80 <__sinit_lock_acquire>
 8004aa0:	69a3      	ldr	r3, [r4, #24]
 8004aa2:	b11b      	cbz	r3, 8004aac <__sinit+0x14>
 8004aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa8:	f7ff bff0 	b.w	8004a8c <__sinit_lock_release>
 8004aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ab2:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <__sinit+0x68>)
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <__sinit+0x6c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	bf08      	it	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	bf08      	it	eq
 8004ac4:	61a3      	streq	r3, [r4, #24]
 8004ac6:	f000 f81f 	bl	8004b08 <__sfp>
 8004aca:	6060      	str	r0, [r4, #4]
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 f81b 	bl	8004b08 <__sfp>
 8004ad2:	60a0      	str	r0, [r4, #8]
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f000 f817 	bl	8004b08 <__sfp>
 8004ada:	2200      	movs	r2, #0
 8004adc:	2104      	movs	r1, #4
 8004ade:	60e0      	str	r0, [r4, #12]
 8004ae0:	6860      	ldr	r0, [r4, #4]
 8004ae2:	f7ff ff81 	bl	80049e8 <std>
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	2109      	movs	r1, #9
 8004aea:	68a0      	ldr	r0, [r4, #8]
 8004aec:	f7ff ff7c 	bl	80049e8 <std>
 8004af0:	2202      	movs	r2, #2
 8004af2:	2112      	movs	r1, #18
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	f7ff ff77 	bl	80049e8 <std>
 8004afa:	2301      	movs	r3, #1
 8004afc:	61a3      	str	r3, [r4, #24]
 8004afe:	e7d1      	b.n	8004aa4 <__sinit+0xc>
 8004b00:	0800567c 	.word	0x0800567c
 8004b04:	08004a31 	.word	0x08004a31

08004b08 <__sfp>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	f7ff ffac 	bl	8004a68 <__sfp_lock_acquire>
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <__sfp+0x84>)
 8004b12:	681e      	ldr	r6, [r3, #0]
 8004b14:	69b3      	ldr	r3, [r6, #24]
 8004b16:	b913      	cbnz	r3, 8004b1e <__sfp+0x16>
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f7ff ffbd 	bl	8004a98 <__sinit>
 8004b1e:	3648      	adds	r6, #72	; 0x48
 8004b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	d503      	bpl.n	8004b30 <__sfp+0x28>
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	b30b      	cbz	r3, 8004b70 <__sfp+0x68>
 8004b2c:	6836      	ldr	r6, [r6, #0]
 8004b2e:	e7f7      	b.n	8004b20 <__sfp+0x18>
 8004b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b34:	b9d5      	cbnz	r5, 8004b6c <__sfp+0x64>
 8004b36:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <__sfp+0x88>)
 8004b38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b3c:	60e3      	str	r3, [r4, #12]
 8004b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004b40:	f000 f86c 	bl	8004c1c <__retarget_lock_init_recursive>
 8004b44:	f7ff ff96 	bl	8004a74 <__sfp_lock_release>
 8004b48:	2208      	movs	r2, #8
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b54:	6025      	str	r5, [r4, #0]
 8004b56:	61a5      	str	r5, [r4, #24]
 8004b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b5c:	f000 f86f 	bl	8004c3e <memset>
 8004b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b68:	4620      	mov	r0, r4
 8004b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b6c:	3468      	adds	r4, #104	; 0x68
 8004b6e:	e7d9      	b.n	8004b24 <__sfp+0x1c>
 8004b70:	2104      	movs	r1, #4
 8004b72:	4638      	mov	r0, r7
 8004b74:	f7ff ff62 	bl	8004a3c <__sfmoreglue>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	6030      	str	r0, [r6, #0]
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d1d5      	bne.n	8004b2c <__sfp+0x24>
 8004b80:	f7ff ff78 	bl	8004a74 <__sfp_lock_release>
 8004b84:	230c      	movs	r3, #12
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	e7ee      	b.n	8004b68 <__sfp+0x60>
 8004b8a:	bf00      	nop
 8004b8c:	0800567c 	.word	0x0800567c
 8004b90:	ffff0001 	.word	0xffff0001

08004b94 <_fwalk_reent>:
 8004b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b98:	4606      	mov	r6, r0
 8004b9a:	4688      	mov	r8, r1
 8004b9c:	2700      	movs	r7, #0
 8004b9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8004baa:	d505      	bpl.n	8004bb8 <_fwalk_reent+0x24>
 8004bac:	6824      	ldr	r4, [r4, #0]
 8004bae:	2c00      	cmp	r4, #0
 8004bb0:	d1f7      	bne.n	8004ba2 <_fwalk_reent+0xe>
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb8:	89ab      	ldrh	r3, [r5, #12]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d907      	bls.n	8004bce <_fwalk_reent+0x3a>
 8004bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	d003      	beq.n	8004bce <_fwalk_reent+0x3a>
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4630      	mov	r0, r6
 8004bca:	47c0      	blx	r8
 8004bcc:	4307      	orrs	r7, r0
 8004bce:	3568      	adds	r5, #104	; 0x68
 8004bd0:	e7e9      	b.n	8004ba6 <_fwalk_reent+0x12>
	...

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	4d0c      	ldr	r5, [pc, #48]	; (8004c0c <__libc_init_array+0x38>)
 8004bda:	4c0d      	ldr	r4, [pc, #52]	; (8004c10 <__libc_init_array+0x3c>)
 8004bdc:	1b64      	subs	r4, r4, r5
 8004bde:	10a4      	asrs	r4, r4, #2
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	f000 fc9c 	bl	8005520 <_init>
 8004be8:	2600      	movs	r6, #0
 8004bea:	4d0a      	ldr	r5, [pc, #40]	; (8004c14 <__libc_init_array+0x40>)
 8004bec:	4c0a      	ldr	r4, [pc, #40]	; (8004c18 <__libc_init_array+0x44>)
 8004bee:	1b64      	subs	r4, r4, r5
 8004bf0:	10a4      	asrs	r4, r4, #2
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08005680 	.word	0x08005680
 8004c10:	08005680 	.word	0x08005680
 8004c14:	08005680 	.word	0x08005680
 8004c18:	08005684 	.word	0x08005684

08004c1c <__retarget_lock_init_recursive>:
 8004c1c:	4770      	bx	lr

08004c1e <__retarget_lock_acquire_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_release_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <memcpy>:
 8004c22:	440a      	add	r2, r1
 8004c24:	4291      	cmp	r1, r2
 8004c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c2a:	d100      	bne.n	8004c2e <memcpy+0xc>
 8004c2c:	4770      	bx	lr
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c34:	4291      	cmp	r1, r2
 8004c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c3a:	d1f9      	bne.n	8004c30 <memcpy+0xe>
 8004c3c:	bd10      	pop	{r4, pc}

08004c3e <memset>:
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4402      	add	r2, r0
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d100      	bne.n	8004c48 <memset+0xa>
 8004c46:	4770      	bx	lr
 8004c48:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4c:	e7f9      	b.n	8004c42 <memset+0x4>
	...

08004c50 <sbrk_aligned>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4e0e      	ldr	r6, [pc, #56]	; (8004c8c <sbrk_aligned+0x3c>)
 8004c54:	460c      	mov	r4, r1
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b911      	cbnz	r1, 8004c62 <sbrk_aligned+0x12>
 8004c5c:	f000 f96c 	bl	8004f38 <_sbrk_r>
 8004c60:	6030      	str	r0, [r6, #0]
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f967 	bl	8004f38 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d00a      	beq.n	8004c84 <sbrk_aligned+0x34>
 8004c6e:	1cc4      	adds	r4, r0, #3
 8004c70:	f024 0403 	bic.w	r4, r4, #3
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d007      	beq.n	8004c88 <sbrk_aligned+0x38>
 8004c78:	1a21      	subs	r1, r4, r0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 f95c 	bl	8004f38 <_sbrk_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d101      	bne.n	8004c88 <sbrk_aligned+0x38>
 8004c84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c88:	4620      	mov	r0, r4
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	20001738 	.word	0x20001738

08004c90 <_malloc_r>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	1ccd      	adds	r5, r1, #3
 8004c96:	f025 0503 	bic.w	r5, r5, #3
 8004c9a:	3508      	adds	r5, #8
 8004c9c:	2d0c      	cmp	r5, #12
 8004c9e:	bf38      	it	cc
 8004ca0:	250c      	movcc	r5, #12
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	db01      	blt.n	8004cac <_malloc_r+0x1c>
 8004ca8:	42a9      	cmp	r1, r5
 8004caa:	d905      	bls.n	8004cb8 <_malloc_r+0x28>
 8004cac:	230c      	movs	r3, #12
 8004cae:	2600      	movs	r6, #0
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	4e2e      	ldr	r6, [pc, #184]	; (8004d74 <_malloc_r+0xe4>)
 8004cba:	f000 fba9 	bl	8005410 <__malloc_lock>
 8004cbe:	6833      	ldr	r3, [r6, #0]
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	bb34      	cbnz	r4, 8004d12 <_malloc_r+0x82>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f7ff ffc2 	bl	8004c50 <sbrk_aligned>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	4604      	mov	r4, r0
 8004cd0:	d14d      	bne.n	8004d6e <_malloc_r+0xde>
 8004cd2:	6834      	ldr	r4, [r6, #0]
 8004cd4:	4626      	mov	r6, r4
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d140      	bne.n	8004d5c <_malloc_r+0xcc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4638      	mov	r0, r7
 8004ce0:	eb04 0803 	add.w	r8, r4, r3
 8004ce4:	f000 f928 	bl	8004f38 <_sbrk_r>
 8004ce8:	4580      	cmp	r8, r0
 8004cea:	d13a      	bne.n	8004d62 <_malloc_r+0xd2>
 8004cec:	6821      	ldr	r1, [r4, #0]
 8004cee:	3503      	adds	r5, #3
 8004cf0:	1a6d      	subs	r5, r5, r1
 8004cf2:	f025 0503 	bic.w	r5, r5, #3
 8004cf6:	3508      	adds	r5, #8
 8004cf8:	2d0c      	cmp	r5, #12
 8004cfa:	bf38      	it	cc
 8004cfc:	250c      	movcc	r5, #12
 8004cfe:	4638      	mov	r0, r7
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7ff ffa5 	bl	8004c50 <sbrk_aligned>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d02b      	beq.n	8004d62 <_malloc_r+0xd2>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	442b      	add	r3, r5
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	e00e      	b.n	8004d30 <_malloc_r+0xa0>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	1b52      	subs	r2, r2, r5
 8004d16:	d41e      	bmi.n	8004d56 <_malloc_r+0xc6>
 8004d18:	2a0b      	cmp	r2, #11
 8004d1a:	d916      	bls.n	8004d4a <_malloc_r+0xba>
 8004d1c:	1961      	adds	r1, r4, r5
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	6025      	str	r5, [r4, #0]
 8004d22:	bf18      	it	ne
 8004d24:	6059      	strne	r1, [r3, #4]
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	bf08      	it	eq
 8004d2a:	6031      	streq	r1, [r6, #0]
 8004d2c:	5162      	str	r2, [r4, r5]
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	4638      	mov	r0, r7
 8004d32:	f104 060b 	add.w	r6, r4, #11
 8004d36:	f000 fb71 	bl	800541c <__malloc_unlock>
 8004d3a:	f026 0607 	bic.w	r6, r6, #7
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	1af2      	subs	r2, r6, r3
 8004d42:	d0b6      	beq.n	8004cb2 <_malloc_r+0x22>
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	50a3      	str	r3, [r4, r2]
 8004d48:	e7b3      	b.n	8004cb2 <_malloc_r+0x22>
 8004d4a:	6862      	ldr	r2, [r4, #4]
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	bf0c      	ite	eq
 8004d50:	6032      	streq	r2, [r6, #0]
 8004d52:	605a      	strne	r2, [r3, #4]
 8004d54:	e7ec      	b.n	8004d30 <_malloc_r+0xa0>
 8004d56:	4623      	mov	r3, r4
 8004d58:	6864      	ldr	r4, [r4, #4]
 8004d5a:	e7b2      	b.n	8004cc2 <_malloc_r+0x32>
 8004d5c:	4634      	mov	r4, r6
 8004d5e:	6876      	ldr	r6, [r6, #4]
 8004d60:	e7b9      	b.n	8004cd6 <_malloc_r+0x46>
 8004d62:	230c      	movs	r3, #12
 8004d64:	4638      	mov	r0, r7
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	f000 fb58 	bl	800541c <__malloc_unlock>
 8004d6c:	e7a1      	b.n	8004cb2 <_malloc_r+0x22>
 8004d6e:	6025      	str	r5, [r4, #0]
 8004d70:	e7de      	b.n	8004d30 <_malloc_r+0xa0>
 8004d72:	bf00      	nop
 8004d74:	20001734 	.word	0x20001734

08004d78 <_puts_r>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	460e      	mov	r6, r1
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	b118      	cbz	r0, 8004d88 <_puts_r+0x10>
 8004d80:	6983      	ldr	r3, [r0, #24]
 8004d82:	b90b      	cbnz	r3, 8004d88 <_puts_r+0x10>
 8004d84:	f7ff fe88 	bl	8004a98 <__sinit>
 8004d88:	69ab      	ldr	r3, [r5, #24]
 8004d8a:	68ac      	ldr	r4, [r5, #8]
 8004d8c:	b913      	cbnz	r3, 8004d94 <_puts_r+0x1c>
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f7ff fe82 	bl	8004a98 <__sinit>
 8004d94:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <_puts_r+0xd0>)
 8004d96:	429c      	cmp	r4, r3
 8004d98:	d120      	bne.n	8004ddc <_puts_r+0x64>
 8004d9a:	686c      	ldr	r4, [r5, #4]
 8004d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d405      	bmi.n	8004dae <_puts_r+0x36>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	0598      	lsls	r0, r3, #22
 8004da6:	d402      	bmi.n	8004dae <_puts_r+0x36>
 8004da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004daa:	f7ff ff38 	bl	8004c1e <__retarget_lock_acquire_recursive>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	0719      	lsls	r1, r3, #28
 8004db2:	d51d      	bpl.n	8004df0 <_puts_r+0x78>
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	b1db      	cbz	r3, 8004df0 <_puts_r+0x78>
 8004db8:	3e01      	subs	r6, #1
 8004dba:	68a3      	ldr	r3, [r4, #8]
 8004dbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	60a3      	str	r3, [r4, #8]
 8004dc4:	bb39      	cbnz	r1, 8004e16 <_puts_r+0x9e>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da38      	bge.n	8004e3c <_puts_r+0xc4>
 8004dca:	4622      	mov	r2, r4
 8004dcc:	210a      	movs	r1, #10
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f906 	bl	8004fe0 <__swbuf_r>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d011      	beq.n	8004dfc <_puts_r+0x84>
 8004dd8:	250a      	movs	r5, #10
 8004dda:	e011      	b.n	8004e00 <_puts_r+0x88>
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <_puts_r+0xd4>)
 8004dde:	429c      	cmp	r4, r3
 8004de0:	d101      	bne.n	8004de6 <_puts_r+0x6e>
 8004de2:	68ac      	ldr	r4, [r5, #8]
 8004de4:	e7da      	b.n	8004d9c <_puts_r+0x24>
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <_puts_r+0xd8>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	bf08      	it	eq
 8004dec:	68ec      	ldreq	r4, [r5, #12]
 8004dee:	e7d5      	b.n	8004d9c <_puts_r+0x24>
 8004df0:	4621      	mov	r1, r4
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 f958 	bl	80050a8 <__swsetup_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0dd      	beq.n	8004db8 <_puts_r+0x40>
 8004dfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e02:	07da      	lsls	r2, r3, #31
 8004e04:	d405      	bmi.n	8004e12 <_puts_r+0x9a>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	059b      	lsls	r3, r3, #22
 8004e0a:	d402      	bmi.n	8004e12 <_puts_r+0x9a>
 8004e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0e:	f7ff ff07 	bl	8004c20 <__retarget_lock_release_recursive>
 8004e12:	4628      	mov	r0, r5
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da04      	bge.n	8004e24 <_puts_r+0xac>
 8004e1a:	69a2      	ldr	r2, [r4, #24]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	dc06      	bgt.n	8004e2e <_puts_r+0xb6>
 8004e20:	290a      	cmp	r1, #10
 8004e22:	d004      	beq.n	8004e2e <_puts_r+0xb6>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	6022      	str	r2, [r4, #0]
 8004e2a:	7019      	strb	r1, [r3, #0]
 8004e2c:	e7c5      	b.n	8004dba <_puts_r+0x42>
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 f8d5 	bl	8004fe0 <__swbuf_r>
 8004e36:	3001      	adds	r0, #1
 8004e38:	d1bf      	bne.n	8004dba <_puts_r+0x42>
 8004e3a:	e7df      	b.n	8004dfc <_puts_r+0x84>
 8004e3c:	250a      	movs	r5, #10
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	701d      	strb	r5, [r3, #0]
 8004e46:	e7db      	b.n	8004e00 <_puts_r+0x88>
 8004e48:	0800563c 	.word	0x0800563c
 8004e4c:	0800565c 	.word	0x0800565c
 8004e50:	0800561c 	.word	0x0800561c

08004e54 <puts>:
 8004e54:	4b02      	ldr	r3, [pc, #8]	; (8004e60 <puts+0xc>)
 8004e56:	4601      	mov	r1, r0
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	f7ff bf8d 	b.w	8004d78 <_puts_r>
 8004e5e:	bf00      	nop
 8004e60:	20000018 	.word	0x20000018

08004e64 <cleanup_glue>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	460c      	mov	r4, r1
 8004e68:	6809      	ldr	r1, [r1, #0]
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	b109      	cbz	r1, 8004e72 <cleanup_glue+0xe>
 8004e6e:	f7ff fff9 	bl	8004e64 <cleanup_glue>
 8004e72:	4621      	mov	r1, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e7a:	f000 bad5 	b.w	8005428 <_free_r>
	...

08004e80 <_reclaim_reent>:
 8004e80:	4b2c      	ldr	r3, [pc, #176]	; (8004f34 <_reclaim_reent+0xb4>)
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4604      	mov	r4, r0
 8004e88:	4283      	cmp	r3, r0
 8004e8a:	d051      	beq.n	8004f30 <_reclaim_reent+0xb0>
 8004e8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e8e:	b143      	cbz	r3, 8004ea2 <_reclaim_reent+0x22>
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d14a      	bne.n	8004f2c <_reclaim_reent+0xac>
 8004e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	b111      	cbz	r1, 8004ea2 <_reclaim_reent+0x22>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 fac3 	bl	8005428 <_free_r>
 8004ea2:	6961      	ldr	r1, [r4, #20]
 8004ea4:	b111      	cbz	r1, 8004eac <_reclaim_reent+0x2c>
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 fabe 	bl	8005428 <_free_r>
 8004eac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004eae:	b111      	cbz	r1, 8004eb6 <_reclaim_reent+0x36>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fab9 	bl	8005428 <_free_r>
 8004eb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004eb8:	b111      	cbz	r1, 8004ec0 <_reclaim_reent+0x40>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 fab4 	bl	8005428 <_free_r>
 8004ec0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004ec2:	b111      	cbz	r1, 8004eca <_reclaim_reent+0x4a>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 faaf 	bl	8005428 <_free_r>
 8004eca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ecc:	b111      	cbz	r1, 8004ed4 <_reclaim_reent+0x54>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 faaa 	bl	8005428 <_free_r>
 8004ed4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ed6:	b111      	cbz	r1, 8004ede <_reclaim_reent+0x5e>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 faa5 	bl	8005428 <_free_r>
 8004ede:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ee0:	b111      	cbz	r1, 8004ee8 <_reclaim_reent+0x68>
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f000 faa0 	bl	8005428 <_free_r>
 8004ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eea:	b111      	cbz	r1, 8004ef2 <_reclaim_reent+0x72>
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 fa9b 	bl	8005428 <_free_r>
 8004ef2:	69a3      	ldr	r3, [r4, #24]
 8004ef4:	b1e3      	cbz	r3, 8004f30 <_reclaim_reent+0xb0>
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004efa:	4798      	blx	r3
 8004efc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004efe:	b1b9      	cbz	r1, 8004f30 <_reclaim_reent+0xb0>
 8004f00:	4620      	mov	r0, r4
 8004f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f06:	f7ff bfad 	b.w	8004e64 <cleanup_glue>
 8004f0a:	5949      	ldr	r1, [r1, r5]
 8004f0c:	b941      	cbnz	r1, 8004f20 <_reclaim_reent+0xa0>
 8004f0e:	3504      	adds	r5, #4
 8004f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f12:	2d80      	cmp	r5, #128	; 0x80
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	d1f8      	bne.n	8004f0a <_reclaim_reent+0x8a>
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 fa85 	bl	8005428 <_free_r>
 8004f1e:	e7ba      	b.n	8004e96 <_reclaim_reent+0x16>
 8004f20:	680e      	ldr	r6, [r1, #0]
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 fa80 	bl	8005428 <_free_r>
 8004f28:	4631      	mov	r1, r6
 8004f2a:	e7ef      	b.n	8004f0c <_reclaim_reent+0x8c>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	e7ef      	b.n	8004f10 <_reclaim_reent+0x90>
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	bf00      	nop
 8004f34:	20000018 	.word	0x20000018

08004f38 <_sbrk_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4d05      	ldr	r5, [pc, #20]	; (8004f54 <_sbrk_r+0x1c>)
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4608      	mov	r0, r1
 8004f42:	602b      	str	r3, [r5, #0]
 8004f44:	f7fb fcc8 	bl	80008d8 <_sbrk>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_sbrk_r+0x1a>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_sbrk_r+0x1a>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	2000173c 	.word	0x2000173c

08004f58 <__sread>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f60:	f000 faaa 	bl	80054b8 <_read_r>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	bfab      	itete	ge
 8004f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f6c:	181b      	addge	r3, r3, r0
 8004f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f72:	bfac      	ite	ge
 8004f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f76:	81a3      	strhlt	r3, [r4, #12]
 8004f78:	bd10      	pop	{r4, pc}

08004f7a <__swrite>:
 8004f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7e:	461f      	mov	r7, r3
 8004f80:	898b      	ldrh	r3, [r1, #12]
 8004f82:	4605      	mov	r5, r0
 8004f84:	05db      	lsls	r3, r3, #23
 8004f86:	460c      	mov	r4, r1
 8004f88:	4616      	mov	r6, r2
 8004f8a:	d505      	bpl.n	8004f98 <__swrite+0x1e>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	f000 f9c4 	bl	8005320 <_lseek_r>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	4632      	mov	r2, r6
 8004f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa0:	81a3      	strh	r3, [r4, #12]
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fae:	f000 b869 	b.w	8005084 <_write_r>

08004fb2 <__sseek>:
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 f9b1 	bl	8005320 <_lseek_r>
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	bf15      	itete	ne
 8004fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fce:	81a3      	strheq	r3, [r4, #12]
 8004fd0:	bf18      	it	ne
 8004fd2:	81a3      	strhne	r3, [r4, #12]
 8004fd4:	bd10      	pop	{r4, pc}

08004fd6 <__sclose>:
 8004fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fda:	f000 b8d3 	b.w	8005184 <_close_r>
	...

08004fe0 <__swbuf_r>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	460e      	mov	r6, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	b118      	cbz	r0, 8004ff2 <__swbuf_r+0x12>
 8004fea:	6983      	ldr	r3, [r0, #24]
 8004fec:	b90b      	cbnz	r3, 8004ff2 <__swbuf_r+0x12>
 8004fee:	f7ff fd53 	bl	8004a98 <__sinit>
 8004ff2:	4b21      	ldr	r3, [pc, #132]	; (8005078 <__swbuf_r+0x98>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	d12b      	bne.n	8005050 <__swbuf_r+0x70>
 8004ff8:	686c      	ldr	r4, [r5, #4]
 8004ffa:	69a3      	ldr	r3, [r4, #24]
 8004ffc:	60a3      	str	r3, [r4, #8]
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	071a      	lsls	r2, r3, #28
 8005002:	d52f      	bpl.n	8005064 <__swbuf_r+0x84>
 8005004:	6923      	ldr	r3, [r4, #16]
 8005006:	b36b      	cbz	r3, 8005064 <__swbuf_r+0x84>
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	b2f6      	uxtb	r6, r6
 800500e:	1ac0      	subs	r0, r0, r3
 8005010:	6963      	ldr	r3, [r4, #20]
 8005012:	4637      	mov	r7, r6
 8005014:	4283      	cmp	r3, r0
 8005016:	dc04      	bgt.n	8005022 <__swbuf_r+0x42>
 8005018:	4621      	mov	r1, r4
 800501a:	4628      	mov	r0, r5
 800501c:	f000 f944 	bl	80052a8 <_fflush_r>
 8005020:	bb30      	cbnz	r0, 8005070 <__swbuf_r+0x90>
 8005022:	68a3      	ldr	r3, [r4, #8]
 8005024:	3001      	adds	r0, #1
 8005026:	3b01      	subs	r3, #1
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	6022      	str	r2, [r4, #0]
 8005030:	701e      	strb	r6, [r3, #0]
 8005032:	6963      	ldr	r3, [r4, #20]
 8005034:	4283      	cmp	r3, r0
 8005036:	d004      	beq.n	8005042 <__swbuf_r+0x62>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	07db      	lsls	r3, r3, #31
 800503c:	d506      	bpl.n	800504c <__swbuf_r+0x6c>
 800503e:	2e0a      	cmp	r6, #10
 8005040:	d104      	bne.n	800504c <__swbuf_r+0x6c>
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	f000 f92f 	bl	80052a8 <_fflush_r>
 800504a:	b988      	cbnz	r0, 8005070 <__swbuf_r+0x90>
 800504c:	4638      	mov	r0, r7
 800504e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <__swbuf_r+0x9c>)
 8005052:	429c      	cmp	r4, r3
 8005054:	d101      	bne.n	800505a <__swbuf_r+0x7a>
 8005056:	68ac      	ldr	r4, [r5, #8]
 8005058:	e7cf      	b.n	8004ffa <__swbuf_r+0x1a>
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <__swbuf_r+0xa0>)
 800505c:	429c      	cmp	r4, r3
 800505e:	bf08      	it	eq
 8005060:	68ec      	ldreq	r4, [r5, #12]
 8005062:	e7ca      	b.n	8004ffa <__swbuf_r+0x1a>
 8005064:	4621      	mov	r1, r4
 8005066:	4628      	mov	r0, r5
 8005068:	f000 f81e 	bl	80050a8 <__swsetup_r>
 800506c:	2800      	cmp	r0, #0
 800506e:	d0cb      	beq.n	8005008 <__swbuf_r+0x28>
 8005070:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005074:	e7ea      	b.n	800504c <__swbuf_r+0x6c>
 8005076:	bf00      	nop
 8005078:	0800563c 	.word	0x0800563c
 800507c:	0800565c 	.word	0x0800565c
 8005080:	0800561c 	.word	0x0800561c

08005084 <_write_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	2200      	movs	r2, #0
 800508e:	4d05      	ldr	r5, [pc, #20]	; (80050a4 <_write_r+0x20>)
 8005090:	602a      	str	r2, [r5, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	f7fb f8b4 	bl	8000200 <_write>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_write_r+0x1e>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_write_r+0x1e>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	2000173c 	.word	0x2000173c

080050a8 <__swsetup_r>:
 80050a8:	4b32      	ldr	r3, [pc, #200]	; (8005174 <__swsetup_r+0xcc>)
 80050aa:	b570      	push	{r4, r5, r6, lr}
 80050ac:	681d      	ldr	r5, [r3, #0]
 80050ae:	4606      	mov	r6, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	b125      	cbz	r5, 80050be <__swsetup_r+0x16>
 80050b4:	69ab      	ldr	r3, [r5, #24]
 80050b6:	b913      	cbnz	r3, 80050be <__swsetup_r+0x16>
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7ff fced 	bl	8004a98 <__sinit>
 80050be:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <__swsetup_r+0xd0>)
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d10f      	bne.n	80050e4 <__swsetup_r+0x3c>
 80050c4:	686c      	ldr	r4, [r5, #4]
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050cc:	0719      	lsls	r1, r3, #28
 80050ce:	d42c      	bmi.n	800512a <__swsetup_r+0x82>
 80050d0:	06dd      	lsls	r5, r3, #27
 80050d2:	d411      	bmi.n	80050f8 <__swsetup_r+0x50>
 80050d4:	2309      	movs	r3, #9
 80050d6:	6033      	str	r3, [r6, #0]
 80050d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	e03e      	b.n	8005162 <__swsetup_r+0xba>
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <__swsetup_r+0xd4>)
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d101      	bne.n	80050ee <__swsetup_r+0x46>
 80050ea:	68ac      	ldr	r4, [r5, #8]
 80050ec:	e7eb      	b.n	80050c6 <__swsetup_r+0x1e>
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <__swsetup_r+0xd8>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	bf08      	it	eq
 80050f4:	68ec      	ldreq	r4, [r5, #12]
 80050f6:	e7e6      	b.n	80050c6 <__swsetup_r+0x1e>
 80050f8:	0758      	lsls	r0, r3, #29
 80050fa:	d512      	bpl.n	8005122 <__swsetup_r+0x7a>
 80050fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fe:	b141      	cbz	r1, 8005112 <__swsetup_r+0x6a>
 8005100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005104:	4299      	cmp	r1, r3
 8005106:	d002      	beq.n	800510e <__swsetup_r+0x66>
 8005108:	4630      	mov	r0, r6
 800510a:	f000 f98d 	bl	8005428 <_free_r>
 800510e:	2300      	movs	r3, #0
 8005110:	6363      	str	r3, [r4, #52]	; 0x34
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	2300      	movs	r3, #0
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	b94b      	cbnz	r3, 8005142 <__swsetup_r+0x9a>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005138:	d003      	beq.n	8005142 <__swsetup_r+0x9a>
 800513a:	4621      	mov	r1, r4
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f927 	bl	8005390 <__smakebuf_r>
 8005142:	89a0      	ldrh	r0, [r4, #12]
 8005144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005148:	f010 0301 	ands.w	r3, r0, #1
 800514c:	d00a      	beq.n	8005164 <__swsetup_r+0xbc>
 800514e:	2300      	movs	r3, #0
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	6963      	ldr	r3, [r4, #20]
 8005154:	425b      	negs	r3, r3
 8005156:	61a3      	str	r3, [r4, #24]
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	b943      	cbnz	r3, 800516e <__swsetup_r+0xc6>
 800515c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005160:	d1ba      	bne.n	80050d8 <__swsetup_r+0x30>
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	0781      	lsls	r1, r0, #30
 8005166:	bf58      	it	pl
 8005168:	6963      	ldrpl	r3, [r4, #20]
 800516a:	60a3      	str	r3, [r4, #8]
 800516c:	e7f4      	b.n	8005158 <__swsetup_r+0xb0>
 800516e:	2000      	movs	r0, #0
 8005170:	e7f7      	b.n	8005162 <__swsetup_r+0xba>
 8005172:	bf00      	nop
 8005174:	20000018 	.word	0x20000018
 8005178:	0800563c 	.word	0x0800563c
 800517c:	0800565c 	.word	0x0800565c
 8005180:	0800561c 	.word	0x0800561c

08005184 <_close_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	2300      	movs	r3, #0
 8005188:	4d05      	ldr	r5, [pc, #20]	; (80051a0 <_close_r+0x1c>)
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fb fb71 	bl	8000876 <_close>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_close_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_close_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	2000173c 	.word	0x2000173c

080051a4 <__sflush_r>:
 80051a4:	898a      	ldrh	r2, [r1, #12]
 80051a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a8:	4605      	mov	r5, r0
 80051aa:	0710      	lsls	r0, r2, #28
 80051ac:	460c      	mov	r4, r1
 80051ae:	d457      	bmi.n	8005260 <__sflush_r+0xbc>
 80051b0:	684b      	ldr	r3, [r1, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dc04      	bgt.n	80051c0 <__sflush_r+0x1c>
 80051b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dc01      	bgt.n	80051c0 <__sflush_r+0x1c>
 80051bc:	2000      	movs	r0, #0
 80051be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051c2:	2e00      	cmp	r6, #0
 80051c4:	d0fa      	beq.n	80051bc <__sflush_r+0x18>
 80051c6:	2300      	movs	r3, #0
 80051c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051cc:	682f      	ldr	r7, [r5, #0]
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	d032      	beq.n	8005238 <__sflush_r+0x94>
 80051d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	075a      	lsls	r2, r3, #29
 80051d8:	d505      	bpl.n	80051e6 <__sflush_r+0x42>
 80051da:	6863      	ldr	r3, [r4, #4]
 80051dc:	1ac0      	subs	r0, r0, r3
 80051de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051e0:	b10b      	cbz	r3, 80051e6 <__sflush_r+0x42>
 80051e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e4:	1ac0      	subs	r0, r0, r3
 80051e6:	2300      	movs	r3, #0
 80051e8:	4602      	mov	r2, r0
 80051ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051ec:	4628      	mov	r0, r5
 80051ee:	6a21      	ldr	r1, [r4, #32]
 80051f0:	47b0      	blx	r6
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	d106      	bne.n	8005206 <__sflush_r+0x62>
 80051f8:	6829      	ldr	r1, [r5, #0]
 80051fa:	291d      	cmp	r1, #29
 80051fc:	d82c      	bhi.n	8005258 <__sflush_r+0xb4>
 80051fe:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <__sflush_r+0x100>)
 8005200:	40ca      	lsrs	r2, r1
 8005202:	07d6      	lsls	r6, r2, #31
 8005204:	d528      	bpl.n	8005258 <__sflush_r+0xb4>
 8005206:	2200      	movs	r2, #0
 8005208:	6062      	str	r2, [r4, #4]
 800520a:	6922      	ldr	r2, [r4, #16]
 800520c:	04d9      	lsls	r1, r3, #19
 800520e:	6022      	str	r2, [r4, #0]
 8005210:	d504      	bpl.n	800521c <__sflush_r+0x78>
 8005212:	1c42      	adds	r2, r0, #1
 8005214:	d101      	bne.n	800521a <__sflush_r+0x76>
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	b903      	cbnz	r3, 800521c <__sflush_r+0x78>
 800521a:	6560      	str	r0, [r4, #84]	; 0x54
 800521c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521e:	602f      	str	r7, [r5, #0]
 8005220:	2900      	cmp	r1, #0
 8005222:	d0cb      	beq.n	80051bc <__sflush_r+0x18>
 8005224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005228:	4299      	cmp	r1, r3
 800522a:	d002      	beq.n	8005232 <__sflush_r+0x8e>
 800522c:	4628      	mov	r0, r5
 800522e:	f000 f8fb 	bl	8005428 <_free_r>
 8005232:	2000      	movs	r0, #0
 8005234:	6360      	str	r0, [r4, #52]	; 0x34
 8005236:	e7c2      	b.n	80051be <__sflush_r+0x1a>
 8005238:	6a21      	ldr	r1, [r4, #32]
 800523a:	2301      	movs	r3, #1
 800523c:	4628      	mov	r0, r5
 800523e:	47b0      	blx	r6
 8005240:	1c41      	adds	r1, r0, #1
 8005242:	d1c7      	bne.n	80051d4 <__sflush_r+0x30>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0c4      	beq.n	80051d4 <__sflush_r+0x30>
 800524a:	2b1d      	cmp	r3, #29
 800524c:	d001      	beq.n	8005252 <__sflush_r+0xae>
 800524e:	2b16      	cmp	r3, #22
 8005250:	d101      	bne.n	8005256 <__sflush_r+0xb2>
 8005252:	602f      	str	r7, [r5, #0]
 8005254:	e7b2      	b.n	80051bc <__sflush_r+0x18>
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	e7ae      	b.n	80051be <__sflush_r+0x1a>
 8005260:	690f      	ldr	r7, [r1, #16]
 8005262:	2f00      	cmp	r7, #0
 8005264:	d0aa      	beq.n	80051bc <__sflush_r+0x18>
 8005266:	0793      	lsls	r3, r2, #30
 8005268:	bf18      	it	ne
 800526a:	2300      	movne	r3, #0
 800526c:	680e      	ldr	r6, [r1, #0]
 800526e:	bf08      	it	eq
 8005270:	694b      	ldreq	r3, [r1, #20]
 8005272:	1bf6      	subs	r6, r6, r7
 8005274:	600f      	str	r7, [r1, #0]
 8005276:	608b      	str	r3, [r1, #8]
 8005278:	2e00      	cmp	r6, #0
 800527a:	dd9f      	ble.n	80051bc <__sflush_r+0x18>
 800527c:	4633      	mov	r3, r6
 800527e:	463a      	mov	r2, r7
 8005280:	4628      	mov	r0, r5
 8005282:	6a21      	ldr	r1, [r4, #32]
 8005284:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005288:	47e0      	blx	ip
 800528a:	2800      	cmp	r0, #0
 800528c:	dc06      	bgt.n	800529c <__sflush_r+0xf8>
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	e790      	b.n	80051be <__sflush_r+0x1a>
 800529c:	4407      	add	r7, r0
 800529e:	1a36      	subs	r6, r6, r0
 80052a0:	e7ea      	b.n	8005278 <__sflush_r+0xd4>
 80052a2:	bf00      	nop
 80052a4:	20400001 	.word	0x20400001

080052a8 <_fflush_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	4605      	mov	r5, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	b913      	cbnz	r3, 80052b8 <_fflush_r+0x10>
 80052b2:	2500      	movs	r5, #0
 80052b4:	4628      	mov	r0, r5
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	b118      	cbz	r0, 80052c2 <_fflush_r+0x1a>
 80052ba:	6983      	ldr	r3, [r0, #24]
 80052bc:	b90b      	cbnz	r3, 80052c2 <_fflush_r+0x1a>
 80052be:	f7ff fbeb 	bl	8004a98 <__sinit>
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <_fflush_r+0x6c>)
 80052c4:	429c      	cmp	r4, r3
 80052c6:	d11b      	bne.n	8005300 <_fflush_r+0x58>
 80052c8:	686c      	ldr	r4, [r5, #4]
 80052ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ef      	beq.n	80052b2 <_fflush_r+0xa>
 80052d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052d4:	07d0      	lsls	r0, r2, #31
 80052d6:	d404      	bmi.n	80052e2 <_fflush_r+0x3a>
 80052d8:	0599      	lsls	r1, r3, #22
 80052da:	d402      	bmi.n	80052e2 <_fflush_r+0x3a>
 80052dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052de:	f7ff fc9e 	bl	8004c1e <__retarget_lock_acquire_recursive>
 80052e2:	4628      	mov	r0, r5
 80052e4:	4621      	mov	r1, r4
 80052e6:	f7ff ff5d 	bl	80051a4 <__sflush_r>
 80052ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ec:	4605      	mov	r5, r0
 80052ee:	07da      	lsls	r2, r3, #31
 80052f0:	d4e0      	bmi.n	80052b4 <_fflush_r+0xc>
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	059b      	lsls	r3, r3, #22
 80052f6:	d4dd      	bmi.n	80052b4 <_fflush_r+0xc>
 80052f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fa:	f7ff fc91 	bl	8004c20 <__retarget_lock_release_recursive>
 80052fe:	e7d9      	b.n	80052b4 <_fflush_r+0xc>
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <_fflush_r+0x70>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d101      	bne.n	800530a <_fflush_r+0x62>
 8005306:	68ac      	ldr	r4, [r5, #8]
 8005308:	e7df      	b.n	80052ca <_fflush_r+0x22>
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <_fflush_r+0x74>)
 800530c:	429c      	cmp	r4, r3
 800530e:	bf08      	it	eq
 8005310:	68ec      	ldreq	r4, [r5, #12]
 8005312:	e7da      	b.n	80052ca <_fflush_r+0x22>
 8005314:	0800563c 	.word	0x0800563c
 8005318:	0800565c 	.word	0x0800565c
 800531c:	0800561c 	.word	0x0800561c

08005320 <_lseek_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	2200      	movs	r2, #0
 800532a:	4d05      	ldr	r5, [pc, #20]	; (8005340 <_lseek_r+0x20>)
 800532c:	602a      	str	r2, [r5, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	f7fb fac5 	bl	80008be <_lseek>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_lseek_r+0x1e>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_lseek_r+0x1e>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	2000173c 	.word	0x2000173c

08005344 <__swhatbuf_r>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	460e      	mov	r6, r1
 8005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534c:	4614      	mov	r4, r2
 800534e:	2900      	cmp	r1, #0
 8005350:	461d      	mov	r5, r3
 8005352:	b096      	sub	sp, #88	; 0x58
 8005354:	da08      	bge.n	8005368 <__swhatbuf_r+0x24>
 8005356:	2200      	movs	r2, #0
 8005358:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800535c:	602a      	str	r2, [r5, #0]
 800535e:	061a      	lsls	r2, r3, #24
 8005360:	d410      	bmi.n	8005384 <__swhatbuf_r+0x40>
 8005362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005366:	e00e      	b.n	8005386 <__swhatbuf_r+0x42>
 8005368:	466a      	mov	r2, sp
 800536a:	f000 f8b7 	bl	80054dc <_fstat_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	dbf1      	blt.n	8005356 <__swhatbuf_r+0x12>
 8005372:	9a01      	ldr	r2, [sp, #4]
 8005374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800537c:	425a      	negs	r2, r3
 800537e:	415a      	adcs	r2, r3
 8005380:	602a      	str	r2, [r5, #0]
 8005382:	e7ee      	b.n	8005362 <__swhatbuf_r+0x1e>
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	2000      	movs	r0, #0
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	b016      	add	sp, #88	; 0x58
 800538c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005390 <__smakebuf_r>:
 8005390:	898b      	ldrh	r3, [r1, #12]
 8005392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005394:	079d      	lsls	r5, r3, #30
 8005396:	4606      	mov	r6, r0
 8005398:	460c      	mov	r4, r1
 800539a:	d507      	bpl.n	80053ac <__smakebuf_r+0x1c>
 800539c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	2301      	movs	r3, #1
 80053a6:	6163      	str	r3, [r4, #20]
 80053a8:	b002      	add	sp, #8
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	466a      	mov	r2, sp
 80053ae:	ab01      	add	r3, sp, #4
 80053b0:	f7ff ffc8 	bl	8005344 <__swhatbuf_r>
 80053b4:	9900      	ldr	r1, [sp, #0]
 80053b6:	4605      	mov	r5, r0
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7ff fc69 	bl	8004c90 <_malloc_r>
 80053be:	b948      	cbnz	r0, 80053d4 <__smakebuf_r+0x44>
 80053c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c4:	059a      	lsls	r2, r3, #22
 80053c6:	d4ef      	bmi.n	80053a8 <__smakebuf_r+0x18>
 80053c8:	f023 0303 	bic.w	r3, r3, #3
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	e7e3      	b.n	800539c <__smakebuf_r+0xc>
 80053d4:	4b0d      	ldr	r3, [pc, #52]	; (800540c <__smakebuf_r+0x7c>)
 80053d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	6020      	str	r0, [r4, #0]
 80053dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	9b00      	ldr	r3, [sp, #0]
 80053e4:	6120      	str	r0, [r4, #16]
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	b15b      	cbz	r3, 8005404 <__smakebuf_r+0x74>
 80053ec:	4630      	mov	r0, r6
 80053ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f2:	f000 f885 	bl	8005500 <_isatty_r>
 80053f6:	b128      	cbz	r0, 8005404 <__smakebuf_r+0x74>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	89a0      	ldrh	r0, [r4, #12]
 8005406:	4305      	orrs	r5, r0
 8005408:	81a5      	strh	r5, [r4, #12]
 800540a:	e7cd      	b.n	80053a8 <__smakebuf_r+0x18>
 800540c:	08004a31 	.word	0x08004a31

08005410 <__malloc_lock>:
 8005410:	4801      	ldr	r0, [pc, #4]	; (8005418 <__malloc_lock+0x8>)
 8005412:	f7ff bc04 	b.w	8004c1e <__retarget_lock_acquire_recursive>
 8005416:	bf00      	nop
 8005418:	20001730 	.word	0x20001730

0800541c <__malloc_unlock>:
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <__malloc_unlock+0x8>)
 800541e:	f7ff bbff 	b.w	8004c20 <__retarget_lock_release_recursive>
 8005422:	bf00      	nop
 8005424:	20001730 	.word	0x20001730

08005428 <_free_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4605      	mov	r5, r0
 800542c:	2900      	cmp	r1, #0
 800542e:	d040      	beq.n	80054b2 <_free_r+0x8a>
 8005430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005434:	1f0c      	subs	r4, r1, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfb8      	it	lt
 800543a:	18e4      	addlt	r4, r4, r3
 800543c:	f7ff ffe8 	bl	8005410 <__malloc_lock>
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <_free_r+0x8c>)
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	b933      	cbnz	r3, 8005454 <_free_r+0x2c>
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6014      	str	r4, [r2, #0]
 800544a:	4628      	mov	r0, r5
 800544c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005450:	f7ff bfe4 	b.w	800541c <__malloc_unlock>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d908      	bls.n	800546a <_free_r+0x42>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	1821      	adds	r1, r4, r0
 800545c:	428b      	cmp	r3, r1
 800545e:	bf01      	itttt	eq
 8005460:	6819      	ldreq	r1, [r3, #0]
 8005462:	685b      	ldreq	r3, [r3, #4]
 8005464:	1809      	addeq	r1, r1, r0
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	e7ed      	b.n	8005446 <_free_r+0x1e>
 800546a:	461a      	mov	r2, r3
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b10b      	cbz	r3, 8005474 <_free_r+0x4c>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d9fa      	bls.n	800546a <_free_r+0x42>
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	1850      	adds	r0, r2, r1
 8005478:	42a0      	cmp	r0, r4
 800547a:	d10b      	bne.n	8005494 <_free_r+0x6c>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	4401      	add	r1, r0
 8005480:	1850      	adds	r0, r2, r1
 8005482:	4283      	cmp	r3, r0
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	d1e0      	bne.n	800544a <_free_r+0x22>
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	4401      	add	r1, r0
 800548e:	6011      	str	r1, [r2, #0]
 8005490:	6053      	str	r3, [r2, #4]
 8005492:	e7da      	b.n	800544a <_free_r+0x22>
 8005494:	d902      	bls.n	800549c <_free_r+0x74>
 8005496:	230c      	movs	r3, #12
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	e7d6      	b.n	800544a <_free_r+0x22>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf01      	itttt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	6063      	str	r3, [r4, #4]
 80054ae:	6054      	str	r4, [r2, #4]
 80054b0:	e7cb      	b.n	800544a <_free_r+0x22>
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	20001734 	.word	0x20001734

080054b8 <_read_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
 80054be:	4611      	mov	r1, r2
 80054c0:	2200      	movs	r2, #0
 80054c2:	4d05      	ldr	r5, [pc, #20]	; (80054d8 <_read_r+0x20>)
 80054c4:	602a      	str	r2, [r5, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f7fb f9b8 	bl	800083c <_read>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d102      	bne.n	80054d6 <_read_r+0x1e>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	b103      	cbz	r3, 80054d6 <_read_r+0x1e>
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	2000173c 	.word	0x2000173c

080054dc <_fstat_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	2300      	movs	r3, #0
 80054e0:	4d06      	ldr	r5, [pc, #24]	; (80054fc <_fstat_r+0x20>)
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	f7fb f9cf 	bl	800088c <_fstat>
 80054ee:	1c43      	adds	r3, r0, #1
 80054f0:	d102      	bne.n	80054f8 <_fstat_r+0x1c>
 80054f2:	682b      	ldr	r3, [r5, #0]
 80054f4:	b103      	cbz	r3, 80054f8 <_fstat_r+0x1c>
 80054f6:	6023      	str	r3, [r4, #0]
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	2000173c 	.word	0x2000173c

08005500 <_isatty_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	2300      	movs	r3, #0
 8005504:	4d05      	ldr	r5, [pc, #20]	; (800551c <_isatty_r+0x1c>)
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fb f9cd 	bl	80008aa <_isatty>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_isatty_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_isatty_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	2000173c 	.word	0x2000173c

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
