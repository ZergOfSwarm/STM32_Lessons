
Test_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b54  08006b54  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006b54  08006b54  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b54  08006b54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dcc  20000074  08006bd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e40  08006bd0  00021e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003359  00000000  00000000  00038f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003d630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000047b3  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010408  00000000  00000000  00042fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097bb4  00000000  00000000  000533c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaf77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  000eaff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080069d4 	.word	0x080069d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080069d4 	.word	0x080069d4

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e009      	b.n	80001c2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	60ba      	str	r2, [r7, #8]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffca 	bl	8000150 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697a      	ldr	r2, [r7, #20]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf1      	blt.n	80001ae <_write+0x12>
	}
	return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d8:	f000 fbe4 	bl	80009a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001dc:	f000 f836 	bl	800024c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e0:	f000 f942 	bl	8000468 <MX_GPIO_Init>
	MX_TIM2_Init();
 80001e4:	f000 f8cc 	bl	8000380 <MX_TIM2_Init>
	MX_ADC1_Init();
 80001e8:	f000 f88c 	bl	8000304 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Запускаем ШИМ на TIM2 на канале 2.
 80001ec:	2104      	movs	r1, #4
 80001ee:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x58>)
 80001f0:	f002 f9d4 	bl	800259c <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc1); // Запустили АЦП
 80001f4:	480e      	ldr	r0, [pc, #56]	; (8000230 <main+0x5c>)
 80001f6:	f000 fcdf 	bl	8000bb8 <HAL_ADC_Start>
	HAL_ADCEx_Calibration_Start(&hadc1); // Делаем калибровку ADC
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x5c>)
 80001fc:	f001 f840 	bl	8001280 <HAL_ADCEx_Calibration_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000200:	f003 f824 	bl	800324c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <main+0x60>)
 8000206:	2100      	movs	r1, #0
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <main+0x64>)
 800020a:	f003 f885 	bl	8003318 <osThreadNew>
 800020e:	4602      	mov	r2, r0
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <main+0x68>)
 8000212:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of my_PhotoResisto */
	my_PhotoResistoHandle = osThreadNew(Start_PhotoResistor_Task, NULL,
 8000214:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <main+0x6c>)
 8000216:	2100      	movs	r1, #0
 8000218:	480a      	ldr	r0, [pc, #40]	; (8000244 <main+0x70>)
 800021a:	f003 f87d 	bl	8003318 <osThreadNew>
 800021e:	4602      	mov	r2, r0
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <main+0x74>)
 8000222:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000224:	f003 f844 	bl	80032b0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000228:	e7fe      	b.n	8000228 <main+0x54>
 800022a:	bf00      	nop
 800022c:	20001d68 	.word	0x20001d68
 8000230:	200019b8 	.word	0x200019b8
 8000234:	08006a5c 	.word	0x08006a5c
 8000238:	080004c5 	.word	0x080004c5
 800023c:	200019a8 	.word	0x200019a8
 8000240:	08006a80 	.word	0x08006a80
 8000244:	080004d5 	.word	0x080004d5
 8000248:	200019e8 	.word	0x200019e8

0800024c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	; 0x50
 8000250:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f005 fcc3 	bl	8005be6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fac2 	bl	800182c <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
		Error_Handler();
 80002ae:	f000 f98d 	bl	80005cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fd2c 	bl	8001d2c <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
		Error_Handler();
 80002da:	f000 f977 	bl	80005cc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002de:	2302      	movs	r3, #2
 80002e0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 feea 	bl	80020c4 <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xae>
		Error_Handler();
 80002f6:	f000 f969 	bl	80005cc <Error_Handler>
	}
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	; 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_ADC1_Init+0x74>)
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <MX_ADC1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_ADC1_Init+0x74>)
 8000322:	2201      	movs	r2, #1
 8000324:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_ADC1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_ADC1_Init+0x74>)
 800032e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000332:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_ADC1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_ADC1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_ADC1_Init+0x74>)
 8000342:	f000 fb61 	bl	8000a08 <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800034c:	f000 f93e 	bl	80005cc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000354:	2301      	movs	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_ADC1_Init+0x74>)
 8000362:	f000 fe09 	bl	8000f78 <HAL_ADC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800036c:	f000 f92e 	bl	80005cc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200019b8 	.word	0x200019b8
 800037c:	40012400 	.word	0x40012400

08000380 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b08e      	sub	sp, #56	; 0x38
 8000384:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80003b0:	4b2c      	ldr	r3, [pc, #176]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b29      	ldr	r3, [pc, #164]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255;
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003c6:	22ff      	movs	r2, #255	; 0xff
 80003c8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80003d6:	4823      	ldr	r0, [pc, #140]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003d8:	f001 ffe6 	bl	80023a8 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x66>
		Error_Handler();
 80003e2:	f000 f8f3 	bl	80005cc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80003ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f0:	4619      	mov	r1, r3
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003f4:	f002 fb3a 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM2_Init+0x82>
		Error_Handler();
 80003fe:	f000 f8e5 	bl	80005cc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000404:	f002 f872 	bl	80024ec <HAL_TIM_PWM_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x92>
		Error_Handler();
 800040e:	f000 f8dd 	bl	80005cc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800041a:	f107 0320 	add.w	r3, r7, #32
 800041e:	4619      	mov	r1, r3
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000422:	f002 fea3 	bl	800316c <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800042c:	f000 f8ce 	bl	80005cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000430:	2360      	movs	r3, #96	; 0x60
 8000432:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2204      	movs	r2, #4
 8000444:	4619      	mov	r1, r3
 8000446:	4807      	ldr	r0, [pc, #28]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000448:	f002 fa52 	bl	80028f0 <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000452:	f000 f8bb 	bl	80005cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000458:	f000 f94c 	bl	80006f4 <HAL_TIM_MspPostInit>

}
 800045c:	bf00      	nop
 800045e:	3738      	adds	r7, #56	; 0x38
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20001d68 	.word	0x20001d68

08000468 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000474:	f043 0320 	orr.w	r3, r3, #32
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_GPIO_Init+0x58>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0320 	and.w	r3, r3, #32
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <MX_GPIO_Init+0x58>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_GPIO_Init+0x58>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <MX_GPIO_Init+0x58>)
 80004a4:	f043 0308 	orr.w	r3, r3, #8
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_GPIO_Init+0x58>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0308 	and.w	r3, r3, #8
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f002 ffcd 	bl	800346c <osDelay>
 80004d2:	e7fb      	b.n	80004cc <StartDefaultTask+0x8>

080004d4 <Start_PhotoResistor_Task>:
 * @brief Function implementing the my_PhotoResisto thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_PhotoResistor_Task */
void Start_PhotoResistor_Task(void *argument) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
		 }
		 }
		 }*/

		/*---------------------------------------*/
		HAL_ADC_Start(&hadc1); // Запускаем проеобразование сигнала с АЦП1
 80004dc:	482e      	ldr	r0, [pc, #184]	; (8000598 <Start_PhotoResistor_Task+0xc4>)
 80004de:	f000 fb6b 	bl	8000bb8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100); // Ожидание окончания преобразования! 100мс -это не означает что он будет ждать 100мс! Если преобразуется раньше то и ...
 80004e2:	2164      	movs	r1, #100	; 0x64
 80004e4:	482c      	ldr	r0, [pc, #176]	; (8000598 <Start_PhotoResistor_Task+0xc4>)
 80004e6:	f000 fc41 	bl	8000d6c <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1); // Читаем наше значение с АЦП1.
 80004ea:	482b      	ldr	r0, [pc, #172]	; (8000598 <Start_PhotoResistor_Task+0xc4>)
 80004ec:	f000 fd38 	bl	8000f60 <HAL_ADC_GetValue>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <Start_PhotoResistor_Task+0xc8>)
 80004f6:	801a      	strh	r2, [r3, #0]
		printf("adc_value - %d \n", adc_value);
 80004f8:	4b28      	ldr	r3, [pc, #160]	; (800059c <Start_PhotoResistor_Task+0xc8>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4828      	ldr	r0, [pc, #160]	; (80005a0 <Start_PhotoResistor_Task+0xcc>)
 8000500:	f005 fb7a 	bl	8005bf8 <iprintf>
		HAL_ADC_Stop(&hadc1); // Останавливаем проеобразование сигнала с АЦП1
 8000504:	4824      	ldr	r0, [pc, #144]	; (8000598 <Start_PhotoResistor_Task+0xc4>)
 8000506:	f000 fc05 	bl	8000d14 <HAL_ADC_Stop>
		int16_t in_max = 2000; // было 4095
 800050a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800050e:	81fb      	strh	r3, [r7, #14]
		int8_t in_min = 200;  // было 0
 8000510:	23c8      	movs	r3, #200	; 0xc8
 8000512:	737b      	strb	r3, [r7, #13]
		unsigned char out_max = 255;
 8000514:	23ff      	movs	r3, #255	; 0xff
 8000516:	733b      	strb	r3, [r7, #12]
		int8_t out_min = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	72fb      	strb	r3, [r7, #11]

		value = (adc_value - in_min) * (out_max - out_min) / (in_max - in_min)
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <Start_PhotoResistor_Task+0xc8>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	7b39      	ldrb	r1, [r7, #12]
 800052a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800052e:	1a8a      	subs	r2, r1, r2
 8000530:	fb02 f203 	mul.w	r2, r2, r3
 8000534:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000538:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800053c:	1acb      	subs	r3, r1, r3
 800053e:	fb92 f3f3 	sdiv	r3, r2, r3
				+ out_min; // Function map
 8000542:	b29a      	uxth	r2, r3
 8000544:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000548:	b29b      	uxth	r3, r3
 800054a:	4413      	add	r3, r2
 800054c:	b29b      	uxth	r3, r3
 800054e:	b21a      	sxth	r2, r3
		value = (adc_value - in_min) * (out_max - out_min) / (in_max - in_min)
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000552:	801a      	strh	r2, [r3, #0]
		if (value >= 255) {
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800055a:	2bfe      	cmp	r3, #254	; 0xfe
 800055c:	dd02      	ble.n	8000564 <Start_PhotoResistor_Task+0x90>
			value = 255;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000560:	22ff      	movs	r2, #255	; 0xff
 8000562:	801a      	strh	r2, [r3, #0]
		}
		if (value <= 0) {
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056a:	2b00      	cmp	r3, #0
 800056c:	dc02      	bgt.n	8000574 <Start_PhotoResistor_Task+0xa0>
			value = 0;
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000570:	2200      	movs	r2, #0
 8000572:	801a      	strh	r2, [r3, #0]
		}
		value = 255 - value; // Инвертируем значение.
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800057a:	b29b      	uxth	r3, r3
 800057c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000580:	b29b      	uxth	r3, r3
 8000582:	b21a      	sxth	r2, r3
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 8000586:	801a      	strh	r2, [r3, #0]
		TIM2->CCR2 = value; // analogWrite(PWM,value);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <Start_PhotoResistor_Task+0xd0>)
 800058a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800058e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000592:	639a      	str	r2, [r3, #56]	; 0x38
	for (;;) {
 8000594:	e7a2      	b.n	80004dc <Start_PhotoResistor_Task+0x8>
 8000596:	bf00      	nop
 8000598:	200019b8 	.word	0x200019b8
 800059c:	200019b4 	.word	0x200019b4
 80005a0:	08006a08 	.word	0x08006a08
 80005a4:	20000090 	.word	0x20000090

080005a8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80005ba:	f000 fa09 	bl	80009d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40000800 	.word	0x40000800

080005cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005d2:	e7fe      	b.n	80005d2 <Error_Handler+0x6>

080005d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_MspInit+0x68>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a17      	ldr	r2, [pc, #92]	; (800063c <HAL_MspInit+0x68>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_MspInit+0x68>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_MspInit+0x68>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <HAL_MspInit+0x68>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_MspInit+0x68>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	210f      	movs	r1, #15
 800060e:	f06f 0001 	mvn.w	r0, #1
 8000612:	f000 ff86 	bl	8001522 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_MspInit+0x6c>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_MspInit+0x6c>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	40010000 	.word	0x40010000

08000644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_ADC_MspInit+0x6c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d121      	bne.n	80006a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <HAL_ADC_MspInit+0x70>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <HAL_ADC_MspInit+0x70>)
 800066a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_ADC_MspInit+0x70>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_ADC_MspInit+0x70>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <HAL_ADC_MspInit+0x70>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_ADC_MspInit+0x70>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000698:	2303      	movs	r3, #3
 800069a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <HAL_ADC_MspInit+0x74>)
 80006a4:	f000 ff68 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40012400 	.word	0x40012400
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010800 	.word	0x40010800

080006bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006cc:	d10b      	bne.n	80006e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_TIM_Base_MspInit+0x34>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_TIM_Base_MspInit+0x34>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_TIM_Base_MspInit+0x34>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000712:	d117      	bne.n	8000744 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_TIM_MspPostInit+0x58>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <HAL_TIM_MspPostInit+0x58>)
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_TIM_MspPostInit+0x58>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <HAL_TIM_MspPostInit+0x5c>)
 8000740:	f000 ff1a 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	201e      	movs	r0, #30
 800076a:	f000 feda 	bl	8001522 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800076e:	201e      	movs	r0, #30
 8000770:	f000 fef3 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <HAL_InitTick+0xa0>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <HAL_InitTick+0xa0>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	61d3      	str	r3, [r2, #28]
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_InitTick+0xa0>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800078c:	f107 0210 	add.w	r2, r7, #16
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fc46 	bl	8002028 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800079c:	f001 fc1c 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 80007a0:	4603      	mov	r3, r0
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <HAL_InitTick+0xa4>)
 80007aa:	fba2 2303 	umull	r2, r3, r2, r3
 80007ae:	0c9b      	lsrs	r3, r3, #18
 80007b0:	3b01      	subs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <HAL_InitTick+0xa8>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <HAL_InitTick+0xac>)
 80007b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_InitTick+0xa8>)
 80007bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_InitTick+0xa8>)
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_InitTick+0xa8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_InitTick+0xa8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <HAL_InitTick+0xa8>)
 80007d6:	f001 fde7 	bl	80023a8 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d104      	bne.n	80007ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_InitTick+0xa8>)
 80007e2:	f001 fe31 	bl	8002448 <HAL_TIM_Base_Start_IT>
 80007e6:	4603      	mov	r3, r0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3730      	adds	r7, #48	; 0x30
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	431bde83 	.word	0x431bde83
 80007fc:	20001db0 	.word	0x20001db0
 8000800:	40000800 	.word	0x40000800

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
	...

08000830 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <TIM4_IRQHandler+0x10>)
 8000836:	f001 ff53 	bl	80026e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20001db0 	.word	0x20001db0

08000844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00a      	b.n	800086c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000856:	f3af 8000 	nop.w
 800085a:	4601      	mov	r1, r0
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf0      	blt.n	8000856 <_read+0x12>
	}

return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:
	}
	return len;
}

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a4:	605a      	str	r2, [r3, #4]
	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <_isatty>:

int _isatty(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
	return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f005 f934 	bl	8005b7c <__errno>
 8000914:	4602      	mov	r2, r0
 8000916:	230c      	movs	r3, #12
 8000918:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20005000 	.word	0x20005000
 8000940:	00000400 	.word	0x00000400
 8000944:	20000094 	.word	0x20000094
 8000948:	20001e40 	.word	0x20001e40

0800094c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000958:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800097e:	f7ff ffe5 	bl	800094c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000982:	f005 f901 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff fc25 	bl	80001d4 <main>
  bx lr
 800098a:	4770      	bx	lr
  ldr r3, =_sidata
 800098c:	08006b5c 	.word	0x08006b5c
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000994:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000998:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800099c:	20001e40 	.word	0x20001e40

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x28>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 fda9 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff feca 	bl	8000754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fe08 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_IncTick+0x20>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20001df8 	.word	0x20001df8

080009f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20001df8 	.word	0x20001df8

08000a08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e0be      	b.n	8000ba8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d109      	bne.n	8000a4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fdfc 	bl	8000644 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 fbdd 	bl	800120c <ADC_ConversionStop_Disable>
 8000a52:	4603      	mov	r3, r0
 8000a54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f040 8099 	bne.w	8000b96 <HAL_ADC_Init+0x18e>
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 8095 	bne.w	8000b96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a74:	f023 0302 	bic.w	r3, r3, #2
 8000a78:	f043 0202 	orr.w	r2, r3, #2
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7b1b      	ldrb	r3, [r3, #12]
 8000a8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa0:	d003      	beq.n	8000aaa <HAL_ADC_Init+0xa2>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d102      	bne.n	8000ab0 <HAL_ADC_Init+0xa8>
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	e000      	b.n	8000ab2 <HAL_ADC_Init+0xaa>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7d1b      	ldrb	r3, [r3, #20]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d119      	bne.n	8000af4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7b1b      	ldrb	r3, [r3, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d109      	bne.n	8000adc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	035a      	lsls	r2, r3, #13
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	e00b      	b.n	8000af4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae0:	f043 0220 	orr.w	r2, r3, #32
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	f043 0201 	orr.w	r2, r3, #1
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	430a      	orrs	r2, r1
 8000b06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <HAL_ADC_Init+0x1a8>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	68b9      	ldr	r1, [r7, #8]
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b24:	d003      	beq.n	8000b2e <HAL_ADC_Init+0x126>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d104      	bne.n	8000b38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	051b      	lsls	r3, r3, #20
 8000b36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_ADC_Init+0x1ac>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d10b      	bne.n	8000b74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b66:	f023 0303 	bic.w	r3, r3, #3
 8000b6a:	f043 0201 	orr.w	r2, r3, #1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b72:	e018      	b.n	8000ba6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b78:	f023 0312 	bic.w	r3, r3, #18
 8000b7c:	f043 0210 	orr.w	r2, r3, #16
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b88:	f043 0201 	orr.w	r2, r3, #1
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b94:	e007      	b.n	8000ba6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f043 0210 	orr.w	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	ffe1f7fd 	.word	0xffe1f7fd
 8000bb4:	ff1f0efe 	.word	0xff1f0efe

08000bb8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d101      	bne.n	8000bd2 <HAL_ADC_Start+0x1a>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e098      	b.n	8000d04 <HAL_ADC_Start+0x14c>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 fac4 	bl	8001168 <ADC_Enable>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8087 	bne.w	8000cfa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bf4:	f023 0301 	bic.w	r3, r3, #1
 8000bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <HAL_ADC_Start+0x154>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d105      	bne.n	8000c16 <HAL_ADC_Start+0x5e>
 8000c0a:	4b41      	ldr	r3, [pc, #260]	; (8000d10 <HAL_ADC_Start+0x158>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d115      	bne.n	8000c42 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d026      	beq.n	8000c7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c40:	e01d      	b.n	8000c7e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <HAL_ADC_Start+0x158>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d004      	beq.n	8000c62 <HAL_ADC_Start+0xaa>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <HAL_ADC_Start+0x154>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10d      	bne.n	8000c7e <HAL_ADC_Start+0xc6>
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_ADC_Start+0x158>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	f023 0206 	bic.w	r2, r3, #6
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c96:	e002      	b.n	8000c9e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f06f 0202 	mvn.w	r2, #2
 8000cae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cbe:	d113      	bne.n	8000ce8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <HAL_ADC_Start+0x154>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d105      	bne.n	8000cd6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_ADC_Start+0x158>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d108      	bne.n	8000ce8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	e00c      	b.n	8000d02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	e003      	b.n	8000d02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40012800 	.word	0x40012800
 8000d10:	40012400 	.word	0x40012400

08000d14 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <HAL_ADC_Stop+0x1a>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e01a      	b.n	8000d64 <HAL_ADC_Stop+0x50>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 fa68 	bl	800120c <ADC_ConversionStop_Disable>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d109      	bne.n	8000d5a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	f043 0201 	orr.w	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d82:	f7ff fe37 	bl	80009f4 <HAL_GetTick>
 8000d86:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00b      	beq.n	8000dae <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f043 0220 	orr.w	r2, r3, #32
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e0c8      	b.n	8000f40 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d12a      	bne.n	8000e12 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d123      	bne.n	8000e12 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dca:	e01a      	b.n	8000e02 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd2:	d016      	beq.n	8000e02 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <HAL_ADC_PollForConversion+0x7e>
 8000dda:	f7ff fe0b 	bl	80009f4 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d20b      	bcs.n	8000e02 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f043 0204 	orr.w	r2, r3, #4
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e09e      	b.n	8000f40 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0dd      	beq.n	8000dcc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e10:	e06c      	b.n	8000eec <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_ADC_PollForConversion+0x1dc>)
 8000e14:	681c      	ldr	r4, [r3, #0]
 8000e16:	2002      	movs	r0, #2
 8000e18:	f001 fa0a 	bl	8002230 <HAL_RCCEx_GetPeriphCLKFreq>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6919      	ldr	r1, [r3, #16]
 8000e28:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <HAL_ADC_PollForConversion+0x1e0>)
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d118      	bne.n	8000e62 <HAL_ADC_PollForConversion+0xf6>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68d9      	ldr	r1, [r3, #12]
 8000e36:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_ADC_PollForConversion+0x1e4>)
 8000e38:	400b      	ands	r3, r1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d111      	bne.n	8000e62 <HAL_ADC_PollForConversion+0xf6>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6919      	ldr	r1, [r3, #16]
 8000e44:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_ADC_PollForConversion+0x1e8>)
 8000e46:	400b      	ands	r3, r1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d108      	bne.n	8000e5e <HAL_ADC_PollForConversion+0xf2>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	68d9      	ldr	r1, [r3, #12]
 8000e52:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <HAL_ADC_PollForConversion+0x1ec>)
 8000e54:	400b      	ands	r3, r1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_PollForConversion+0xf2>
 8000e5a:	2314      	movs	r3, #20
 8000e5c:	e020      	b.n	8000ea0 <HAL_ADC_PollForConversion+0x134>
 8000e5e:	2329      	movs	r3, #41	; 0x29
 8000e60:	e01e      	b.n	8000ea0 <HAL_ADC_PollForConversion+0x134>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6919      	ldr	r1, [r3, #16]
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_ADC_PollForConversion+0x1e8>)
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d106      	bne.n	8000e7e <HAL_ADC_PollForConversion+0x112>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68d9      	ldr	r1, [r3, #12]
 8000e76:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_ADC_PollForConversion+0x1ec>)
 8000e78:	400b      	ands	r3, r1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00d      	beq.n	8000e9a <HAL_ADC_PollForConversion+0x12e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6919      	ldr	r1, [r3, #16]
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_ADC_PollForConversion+0x1f0>)
 8000e86:	400b      	ands	r3, r1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d108      	bne.n	8000e9e <HAL_ADC_PollForConversion+0x132>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68d9      	ldr	r1, [r3, #12]
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <HAL_ADC_PollForConversion+0x1f0>)
 8000e94:	400b      	ands	r3, r1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_ADC_PollForConversion+0x132>
 8000e9a:	2354      	movs	r3, #84	; 0x54
 8000e9c:	e000      	b.n	8000ea0 <HAL_ADC_PollForConversion+0x134>
 8000e9e:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ea6:	e01d      	b.n	8000ee4 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eae:	d016      	beq.n	8000ede <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <HAL_ADC_PollForConversion+0x15a>
 8000eb6:	f7ff fd9d 	bl	80009f4 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d20b      	bcs.n	8000ede <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f043 0204 	orr.w	r2, r3, #4
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e030      	b.n	8000f40 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8dd      	bhi.n	8000ea8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f06f 0212 	mvn.w	r2, #18
 8000ef4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f10:	d115      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d111      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	24924924 	.word	0x24924924
 8000f50:	00924924 	.word	0x00924924
 8000f54:	12492492 	.word	0x12492492
 8000f58:	00492492 	.word	0x00492492
 8000f5c:	00249249 	.word	0x00249249

08000f60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x20>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e0dc      	b.n	8001152 <HAL_ADC_ConfigChannel+0x1da>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d81c      	bhi.n	8000fe2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b05      	subs	r3, #5
 8000fba:	221f      	movs	r2, #31
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4019      	ands	r1, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b05      	subs	r3, #5
 8000fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe0:	e03c      	b.n	800105c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	d81c      	bhi.n	8001024 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3b23      	subs	r3, #35	; 0x23
 8000ffc:	221f      	movs	r2, #31
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	4019      	ands	r1, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	3b23      	subs	r3, #35	; 0x23
 8001016:	fa00 f203 	lsl.w	r2, r0, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	631a      	str	r2, [r3, #48]	; 0x30
 8001022:	e01b      	b.n	800105c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b41      	subs	r3, #65	; 0x41
 8001036:	221f      	movs	r2, #31
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	4019      	ands	r1, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	3b41      	subs	r3, #65	; 0x41
 8001050:	fa00 f203 	lsl.w	r2, r0, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b09      	cmp	r3, #9
 8001062:	d91c      	bls.n	800109e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68d9      	ldr	r1, [r3, #12]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	3b1e      	subs	r3, #30
 8001076:	2207      	movs	r2, #7
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	4019      	ands	r1, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6898      	ldr	r0, [r3, #8]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	3b1e      	subs	r3, #30
 8001090:	fa00 f203 	lsl.w	r2, r0, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	e019      	b.n	80010d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6919      	ldr	r1, [r3, #16]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	2207      	movs	r2, #7
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4019      	ands	r1, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6898      	ldr	r0, [r3, #8]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d003      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010de:	2b11      	cmp	r3, #17
 80010e0:	d132      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_ADC_ConfigChannel+0x1e4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d125      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d126      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001108:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b10      	cmp	r3, #16
 8001110:	d11a      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_ADC_ConfigChannel+0x1e8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <HAL_ADC_ConfigChannel+0x1ec>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9a      	lsrs	r2, r3, #18
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001128:	e002      	b.n	8001130 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3b01      	subs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <HAL_ADC_ConfigChannel+0x1b2>
 8001136:	e007      	b.n	8001148 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f043 0220 	orr.w	r2, r3, #32
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40012400 	.word	0x40012400
 8001160:	20000000 	.word	0x20000000
 8001164:	431bde83 	.word	0x431bde83

08001168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b01      	cmp	r3, #1
 8001184:	d039      	beq.n	80011fa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <ADC_Enable+0x9c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <ADC_Enable+0xa0>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9b      	lsrs	r3, r3, #18
 80011a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011a4:	e002      	b.n	80011ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f9      	bne.n	80011a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011b2:	f7ff fc1f 	bl	80009f4 <HAL_GetTick>
 80011b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011b8:	e018      	b.n	80011ec <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011ba:	f7ff fc1b 	bl	80009f4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d911      	bls.n	80011ec <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f043 0210 	orr.w	r2, r3, #16
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e007      	b.n	80011fc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d1df      	bne.n	80011ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b01      	cmp	r3, #1
 8001224:	d127      	bne.n	8001276 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001236:	f7ff fbdd 	bl	80009f4 <HAL_GetTick>
 800123a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800123c:	e014      	b.n	8001268 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800123e:	f7ff fbd9 	bl	80009f4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d90d      	bls.n	8001268 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f043 0210 	orr.w	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e007      	b.n	8001278 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d0e3      	beq.n	800123e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_ADCEx_Calibration_Start+0x1e>
 800129a:	2302      	movs	r3, #2
 800129c:	e086      	b.n	80013ac <HAL_ADCEx_Calibration_Start+0x12c>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffb0 	bl	800120c <ADC_ConversionStop_Disable>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d175      	bne.n	80013a2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012be:	f023 0302 	bic.w	r3, r3, #2
 80012c2:	f043 0202 	orr.w	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012ca:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_ADCEx_Calibration_Start+0x134>)
 80012cc:	681c      	ldr	r4, [r3, #0]
 80012ce:	2002      	movs	r0, #2
 80012d0:	f000 ffae 	bl	8002230 <HAL_RCCEx_GetPeriphCLKFreq>
 80012d4:	4603      	mov	r3, r0
 80012d6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80012da:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80012dc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80012de:	e002      	b.n	80012e6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f9      	bne.n	80012e0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff3b 	bl	8001168 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0208 	orr.w	r2, r2, #8
 8001300:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001302:	f7ff fb77 	bl	80009f4 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001308:	e014      	b.n	8001334 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800130a:	f7ff fb73 	bl	80009f4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b0a      	cmp	r3, #10
 8001316:	d90d      	bls.n	8001334 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	f023 0312 	bic.w	r3, r3, #18
 8001320:	f043 0210 	orr.w	r2, r3, #16
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e03b      	b.n	80013ac <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e3      	bne.n	800130a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0204 	orr.w	r2, r2, #4
 8001350:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001352:	f7ff fb4f 	bl	80009f4 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001358:	e014      	b.n	8001384 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800135a:	f7ff fb4b 	bl	80009f4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b0a      	cmp	r3, #10
 8001366:	d90d      	bls.n	8001384 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	f023 0312 	bic.w	r3, r3, #18
 8001370:	f043 0210 	orr.w	r2, r3, #16
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e013      	b.n	80013ac <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1e3      	bne.n	800135a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	20000000 	.word	0x20000000

080013b8 <__NVIC_SetPriorityGrouping>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4906      	ldr	r1, [pc, #24]	; (8001450 <__NVIC_EnableIRQ+0x34>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff4f 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff64 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ffb2 	bl	80014a8 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff81 	bl	8001454 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff57 	bl	800141c <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e127      	b.n	80017dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800158c:	2201      	movs	r2, #1
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 8116 	bne.w	80017d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d034      	beq.n	800161c <HAL_GPIO_Init+0xa4>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d80d      	bhi.n	80015d2 <HAL_GPIO_Init+0x5a>
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d02b      	beq.n	8001612 <HAL_GPIO_Init+0x9a>
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d804      	bhi.n	80015c8 <HAL_GPIO_Init+0x50>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d031      	beq.n	8001626 <HAL_GPIO_Init+0xae>
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d01c      	beq.n	8001600 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c6:	e048      	b.n	800165a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d043      	beq.n	8001654 <HAL_GPIO_Init+0xdc>
 80015cc:	2b11      	cmp	r3, #17
 80015ce:	d01b      	beq.n	8001608 <HAL_GPIO_Init+0x90>
          break;
 80015d0:	e043      	b.n	800165a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d2:	4a89      	ldr	r2, [pc, #548]	; (80017f8 <HAL_GPIO_Init+0x280>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d026      	beq.n	8001626 <HAL_GPIO_Init+0xae>
 80015d8:	4a87      	ldr	r2, [pc, #540]	; (80017f8 <HAL_GPIO_Init+0x280>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d806      	bhi.n	80015ec <HAL_GPIO_Init+0x74>
 80015de:	4a87      	ldr	r2, [pc, #540]	; (80017fc <HAL_GPIO_Init+0x284>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d020      	beq.n	8001626 <HAL_GPIO_Init+0xae>
 80015e4:	4a86      	ldr	r2, [pc, #536]	; (8001800 <HAL_GPIO_Init+0x288>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01d      	beq.n	8001626 <HAL_GPIO_Init+0xae>
          break;
 80015ea:	e036      	b.n	800165a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015ec:	4a85      	ldr	r2, [pc, #532]	; (8001804 <HAL_GPIO_Init+0x28c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d019      	beq.n	8001626 <HAL_GPIO_Init+0xae>
 80015f2:	4a85      	ldr	r2, [pc, #532]	; (8001808 <HAL_GPIO_Init+0x290>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d016      	beq.n	8001626 <HAL_GPIO_Init+0xae>
 80015f8:	4a84      	ldr	r2, [pc, #528]	; (800180c <HAL_GPIO_Init+0x294>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0xae>
          break;
 80015fe:	e02c      	b.n	800165a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	623b      	str	r3, [r7, #32]
          break;
 8001606:	e028      	b.n	800165a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	3304      	adds	r3, #4
 800160e:	623b      	str	r3, [r7, #32]
          break;
 8001610:	e023      	b.n	800165a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	3308      	adds	r3, #8
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e01e      	b.n	800165a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	330c      	adds	r3, #12
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e019      	b.n	800165a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162e:	2304      	movs	r3, #4
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e012      	b.n	800165a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	611a      	str	r2, [r3, #16]
          break;
 8001646:	e008      	b.n	800165a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001648:	2308      	movs	r3, #8
 800164a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	615a      	str	r2, [r3, #20]
          break;
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2bff      	cmp	r3, #255	; 0xff
 800165e:	d801      	bhi.n	8001664 <HAL_GPIO_Init+0xec>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	e001      	b.n	8001668 <HAL_GPIO_Init+0xf0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3304      	adds	r3, #4
 8001668:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2bff      	cmp	r3, #255	; 0xff
 800166e:	d802      	bhi.n	8001676 <HAL_GPIO_Init+0xfe>
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x104>
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3b08      	subs	r3, #8
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	210f      	movs	r1, #15
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	401a      	ands	r2, r3
 800168e:	6a39      	ldr	r1, [r7, #32]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 8096 	beq.w	80017d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_GPIO_Init+0x298>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_GPIO_Init+0x298>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_GPIO_Init+0x298>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c2:	4a54      	ldr	r2, [pc, #336]	; (8001814 <HAL_GPIO_Init+0x29c>)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4b      	ldr	r2, [pc, #300]	; (8001818 <HAL_GPIO_Init+0x2a0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x19e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4a      	ldr	r2, [pc, #296]	; (800181c <HAL_GPIO_Init+0x2a4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00d      	beq.n	8001712 <HAL_GPIO_Init+0x19a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a49      	ldr	r2, [pc, #292]	; (8001820 <HAL_GPIO_Init+0x2a8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d007      	beq.n	800170e <HAL_GPIO_Init+0x196>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a48      	ldr	r2, [pc, #288]	; (8001824 <HAL_GPIO_Init+0x2ac>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_GPIO_Init+0x192>
 8001706:	2303      	movs	r3, #3
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x1a0>
 800170a:	2304      	movs	r3, #4
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x1a0>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x1a0>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x1a0>
 8001716:	2300      	movs	r3, #0
 8001718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001728:	493a      	ldr	r1, [pc, #232]	; (8001814 <HAL_GPIO_Init+0x29c>)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4938      	ldr	r1, [pc, #224]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	43db      	mvns	r3, r3
 8001758:	4933      	ldr	r1, [pc, #204]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 800175a:	4013      	ands	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	492e      	ldr	r1, [pc, #184]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
 8001776:	e006      	b.n	8001786 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	43db      	mvns	r3, r3
 8001780:	4929      	ldr	r1, [pc, #164]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001782:	4013      	ands	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	4924      	ldr	r1, [pc, #144]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	491f      	ldr	r1, [pc, #124]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	491a      	ldr	r1, [pc, #104]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4915      	ldr	r1, [pc, #84]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f47f aed0 	bne.w	800158c <HAL_GPIO_Init+0x14>
  }
}
 80017ec:	bf00      	nop
 80017ee:	372c      	adds	r7, #44	; 0x2c
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	10210000 	.word	0x10210000
 80017fc:	10110000 	.word	0x10110000
 8001800:	10120000 	.word	0x10120000
 8001804:	10310000 	.word	0x10310000
 8001808:	10320000 	.word	0x10320000
 800180c:	10220000 	.word	0x10220000
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	40010800 	.word	0x40010800
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000
 8001824:	40011400 	.word	0x40011400
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e26c      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00c      	beq.n	8001872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001858:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d112      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
 8001864:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06c      	beq.n	8001958 <HAL_RCC_OscConfig+0x12c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d168      	bne.n	8001958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e246      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x76>
 8001894:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a7f      	ldr	r2, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7a      	ldr	r2, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xbc>
 80018ce:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f874 	bl	80009f4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f870 	bl	80009f4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1fa      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xe4>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f860 	bl	80009f4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff f85c 	bl	80009f4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1e6      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x10c>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x18c>
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x176>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1ba      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4939      	ldr	r1, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff f815 	bl	80009f4 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff f811 	bl	80009f4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e19b      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4927      	ldr	r1, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe fff4 	bl	80009f4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7fe fff0 	bl	80009f4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e17a      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03a      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7fe ffd4 	bl	80009f4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7fe ffd0 	bl	80009f4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e15a      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 fb0a 	bl	8002088 <RCC_Delay>
 8001a74:	e01c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7fe ffba 	bl	80009f4 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a82:	e00f      	b.n	8001aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7fe ffb6 	bl	80009f4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e140      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	42420000 	.word	0x42420000
 8001aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b9e      	ldr	r3, [pc, #632]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e9      	bne.n	8001a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a6 	beq.w	8001c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b97      	ldr	r3, [pc, #604]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b94      	ldr	r3, [pc, #592]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a93      	ldr	r2, [pc, #588]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b91      	ldr	r3, [pc, #580]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b8e      	ldr	r3, [pc, #568]	; (8001d24 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4b8b      	ldr	r3, [pc, #556]	; (8001d24 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a8a      	ldr	r2, [pc, #552]	; (8001d24 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7fe ff77 	bl	80009f4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7fe ff73 	bl	80009f4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	; 0x64
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0fd      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x312>
 8001b30:	4b7b      	ldr	r3, [pc, #492]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a7a      	ldr	r2, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	e02d      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x334>
 8001b46:	4b76      	ldr	r3, [pc, #472]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a75      	ldr	r2, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	e01c      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x356>
 8001b68:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a6c      	ldr	r2, [pc, #432]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a69      	ldr	r2, [pc, #420]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a66      	ldr	r2, [pc, #408]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b64      	ldr	r3, [pc, #400]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a63      	ldr	r2, [pc, #396]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d015      	beq.n	8001bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7fe ff27 	bl	80009f4 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe ff23 	bl	80009f4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0ab      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ee      	beq.n	8001baa <HAL_RCC_OscConfig+0x37e>
 8001bcc:	e014      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe ff11 	bl	80009f4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe ff0d 	bl	80009f4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e095      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ee      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a47      	ldr	r2, [pc, #284]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8081 	beq.w	8001d16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d061      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d146      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <HAL_RCC_OscConfig+0x4fc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7fe fee1 	bl	80009f4 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7fe fedd 	bl	80009f4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e067      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5e:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	492d      	ldr	r1, [pc, #180]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a19      	ldr	r1, [r3, #32]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	430b      	orrs	r3, r1
 8001c82:	4927      	ldr	r1, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_OscConfig+0x4fc>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe feb1 	bl	80009f4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe fead 	bl	80009f4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e037      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46a>
 8001cb4:	e02f      	b.n	8001d16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_RCC_OscConfig+0x4fc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fe9a 	bl	80009f4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe fe96 	bl	80009f4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e020      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x498>
 8001ce2:	e018      	b.n	8001d16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e013      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
 8001d28:	42420060 	.word	0x42420060

08001d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0d0      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b67      	ldr	r3, [pc, #412]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0207 	bic.w	r2, r3, #7
 8001d56:	4965      	ldr	r1, [pc, #404]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0b8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da0:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001daa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	494d      	ldr	r1, [pc, #308]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d040      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d115      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07f      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e073      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e06b      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4936      	ldr	r1, [pc, #216]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe fdea 	bl	80009f4 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7fe fde6 	bl	80009f4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e053      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d210      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4922      	ldr	r1, [pc, #136]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e032      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4916      	ldr	r1, [pc, #88]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eba:	f000 f821 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	5cd3      	ldrb	r3, [r2, r3]
 8001ece:	fa21 f303 	lsr.w	r3, r1, r3
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1d0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fc3a 	bl	8000754 <HAL_InitTick>

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08006aa4 	.word	0x08006aa4
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b490      	push	{r4, r7}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f08:	1d3c      	adds	r4, r7, #4
 8001f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x40>
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x46>
 8001f3e:	e02d      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f42:	623b      	str	r3, [r7, #32]
      break;
 8001f44:	e02d      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	0c9b      	lsrs	r3, r3, #18
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f52:	4413      	add	r3, r2
 8001f54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	0c5b      	lsrs	r3, r3, #17
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f72:	4413      	add	r3, r2
 8001f74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f7e:	fb02 f203 	mul.w	r2, r2, r3
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	e004      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	623b      	str	r3, [r7, #32]
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f9e:	623b      	str	r3, [r7, #32]
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc90      	pop	{r4, r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	08006a1c 	.word	0x08006a1c
 8001fb4:	08006a2c 	.word	0x08006a2c
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	007a1200 	.word	0x007a1200
 8001fc0:	003d0900 	.word	0x003d0900

08001fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fdc:	f7ff fff2 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08006ab4 	.word	0x08006ab4

08002000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8002008:	4601      	mov	r1, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0adb      	lsrs	r3, r3, #11
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4a03      	ldr	r2, [pc, #12]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	08006ab4 	.word	0x08006ab4

08002028 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	220f      	movs	r2, #15
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_RCC_GetClockConfig+0x58>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0203 	and.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_RCC_GetClockConfig+0x58>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_GetClockConfig+0x58>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_RCC_GetClockConfig+0x58>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0207 	and.w	r2, r3, #7
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	40022000 	.word	0x40022000

08002088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_Delay+0x34>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <RCC_Delay+0x38>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0a5b      	lsrs	r3, r3, #9
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a4:	bf00      	nop
  }
  while (Delay --);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	60fa      	str	r2, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <RCC_Delay+0x1c>
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d07d      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	61d3      	str	r3, [r2, #28]
 80020fc:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002108:	2301      	movs	r3, #1
 800210a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b46      	ldr	r3, [pc, #280]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d118      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002118:	4b43      	ldr	r3, [pc, #268]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a42      	ldr	r2, [pc, #264]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002124:	f7fe fc66 	bl	80009f4 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	e008      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7fe fc62 	bl	80009f4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e06d      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d02e      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d027      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002170:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002178:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800217e:	4a29      	ldr	r2, [pc, #164]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d014      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe fc31 	bl	80009f4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7fe fc2d 	bl	80009f4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e036      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ee      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4917      	ldr	r1, [pc, #92]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	490b      	ldr	r1, [pc, #44]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
 800222c:	42420440 	.word	0x42420440

08002230 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b08d      	sub	sp, #52	; 0x34
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002238:	4b55      	ldr	r3, [pc, #340]	; (8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800223a:	f107 040c 	add.w	r4, r7, #12
 800223e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	2300      	movs	r3, #0
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d07f      	beq.n	8002364 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002264:	2b10      	cmp	r3, #16
 8002266:	d002      	beq.n	800226e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002268:	2b01      	cmp	r3, #1
 800226a:	d048      	beq.n	80022fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800226c:	e08b      	b.n	8002386 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002274:	4b48      	ldr	r3, [pc, #288]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d07f      	beq.n	8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800228c:	4413      	add	r3, r2
 800228e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002292:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d018      	beq.n	80022d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229e:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0c5b      	lsrs	r3, r3, #17
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022ac:	4413      	add	r3, r2
 80022ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022be:	4a37      	ldr	r2, [pc, #220]	; (800239c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ce:	e004      	b.n	80022da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	4a33      	ldr	r2, [pc, #204]	; (80023a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022da:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e6:	d102      	bne.n	80022ee <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022ec:	e048      	b.n	8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022fc:	e040      	b.n	8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230e:	d108      	bne.n	8002322 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800231a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	e01f      	b.n	8002362 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	d109      	bne.n	8002342 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800233a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002340:	e00f      	b.n	8002362 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800234c:	d11a      	bne.n	8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d014      	beq.n	8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800235a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002360:	e010      	b.n	8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002362:	e00f      	b.n	8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002364:	f7ff fe4c 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0b9b      	lsrs	r3, r3, #14
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	3301      	adds	r3, #1
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002384:	bf00      	nop
    }
  }
  return (frequency);
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002388:	4618      	mov	r0, r3
 800238a:	3734      	adds	r7, #52	; 0x34
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	08006a30 	.word	0x08006a30
 8002394:	08006a40 	.word	0x08006a40
 8002398:	40021000 	.word	0x40021000
 800239c:	007a1200 	.word	0x007a1200
 80023a0:	003d0900 	.word	0x003d0900
 80023a4:	aaaaaaab 	.word	0xaaaaaaab

080023a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e041      	b.n	800243e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe f974 	bl	80006bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4610      	mov	r0, r2
 80023e8:	f000 fc1c 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e03a      	b.n	80024d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <HAL_TIM_Base_Start_IT+0x98>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00e      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0x58>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248a:	d009      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0x58>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0x58>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d111      	bne.n	80024c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d010      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	e007      	b.n	80024d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800

080024ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f839 	bl	800258a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 fb7a 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_TIM_PWM_Start+0x24>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e022      	b.n	8002606 <HAL_TIM_PWM_Start+0x6a>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d109      	bne.n	80025da <HAL_TIM_PWM_Start+0x3e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e015      	b.n	8002606 <HAL_TIM_PWM_Start+0x6a>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d109      	bne.n	80025f4 <HAL_TIM_PWM_Start+0x58>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e008      	b.n	8002606 <HAL_TIM_PWM_Start+0x6a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e05e      	b.n	80026cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0x82>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	e013      	b.n	8002646 <HAL_TIM_PWM_Start+0xaa>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0x92>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800262c:	e00b      	b.n	8002646 <HAL_TIM_PWM_Start+0xaa>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0xa2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	e003      	b.n	8002646 <HAL_TIM_PWM_Start+0xaa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fd68 	bl	8003124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_TIM_PWM_Start+0x138>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d107      	bne.n	800266e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_TIM_PWM_Start+0x138>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00e      	beq.n	8002696 <HAL_TIM_PWM_Start+0xfa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d009      	beq.n	8002696 <HAL_TIM_PWM_Start+0xfa>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_TIM_PWM_Start+0x13c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_TIM_PWM_Start+0xfa>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_TIM_PWM_Start+0x140>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d010      	beq.n	80026ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b8:	e007      	b.n	80026ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800

080026e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d122      	bne.n	800273c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d11b      	bne.n	800273c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0202 	mvn.w	r2, #2
 800270c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fa62 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa55 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fa64 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b04      	cmp	r3, #4
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0204 	mvn.w	r2, #4
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa38 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa2b 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fa3a 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b08      	cmp	r3, #8
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0208 	mvn.w	r2, #8
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2204      	movs	r2, #4
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa0e 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa01 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fa10 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0210 	mvn.w	r2, #16
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2208      	movs	r2, #8
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9e4 	bl	8002bec <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9d7 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f9e6 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0201 	mvn.w	r2, #1
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fd fea2 	bl	80005a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d107      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fcd5 	bl	800323a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f9aa 	bl	8002c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0220 	mvn.w	r2, #32
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fca0 	bl	8003228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002906:	2302      	movs	r3, #2
 8002908:	e0ac      	b.n	8002a64 <HAL_TIM_PWM_ConfigChannel+0x174>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	f200 809f 	bhi.w	8002a58 <HAL_TIM_PWM_ConfigChannel+0x168>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002955 	.word	0x08002955
 8002924:	08002a59 	.word	0x08002a59
 8002928:	08002a59 	.word	0x08002a59
 800292c:	08002a59 	.word	0x08002a59
 8002930:	08002995 	.word	0x08002995
 8002934:	08002a59 	.word	0x08002a59
 8002938:	08002a59 	.word	0x08002a59
 800293c:	08002a59 	.word	0x08002a59
 8002940:	080029d7 	.word	0x080029d7
 8002944:	08002a59 	.word	0x08002a59
 8002948:	08002a59 	.word	0x08002a59
 800294c:	08002a59 	.word	0x08002a59
 8002950:	08002a17 	.word	0x08002a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f9c4 	bl	8002ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0204 	bic.w	r2, r2, #4
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	619a      	str	r2, [r3, #24]
      break;
 8002992:	e062      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa0a 	bl	8002db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6999      	ldr	r1, [r3, #24]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	021a      	lsls	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]
      break;
 80029d4:	e041      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa53 	bl	8002e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0208 	orr.w	r2, r2, #8
 80029f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0204 	bic.w	r2, r2, #4
 8002a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
      break;
 8002a14:	e021      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa9d 	bl	8002f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69d9      	ldr	r1, [r3, #28]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	61da      	str	r2, [r3, #28]
      break;
 8002a56:	e000      	b.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_ConfigClockSource+0x18>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0a6      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x166>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d067      	beq.n	8002b8c <HAL_TIM_ConfigClockSource+0x120>
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d80b      	bhi.n	8002ad8 <HAL_TIM_ConfigClockSource+0x6c>
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d073      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0x140>
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d802      	bhi.n	8002ace <HAL_TIM_ConfigClockSource+0x62>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d06f      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002acc:	e078      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d06c      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0x140>
 8002ad2:	2b30      	cmp	r3, #48	; 0x30
 8002ad4:	d06a      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ad6:	e073      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d00d      	beq.n	8002af8 <HAL_TIM_ConfigClockSource+0x8c>
 8002adc:	2b70      	cmp	r3, #112	; 0x70
 8002ade:	d804      	bhi.n	8002aea <HAL_TIM_ConfigClockSource+0x7e>
 8002ae0:	2b50      	cmp	r3, #80	; 0x50
 8002ae2:	d033      	beq.n	8002b4c <HAL_TIM_ConfigClockSource+0xe0>
 8002ae4:	2b60      	cmp	r3, #96	; 0x60
 8002ae6:	d041      	beq.n	8002b6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ae8:	e06a      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aee:	d066      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x152>
 8002af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af4:	d017      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002af6:	e063      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f000 faed 	bl	80030e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]
      break;
 8002b24:	e04c      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f000 fad6 	bl	80030e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b48:	609a      	str	r2, [r3, #8]
      break;
 8002b4a:	e039      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f000 fa4d 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2150      	movs	r1, #80	; 0x50
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 faa4 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002b6a:	e029      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f000 fa6b 	bl	8003054 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2160      	movs	r1, #96	; 0x60
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa94 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002b8a:	e019      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f000 fa2d 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fa84 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 8002baa:	e009      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 fa7b 	bl	80030b2 <TIM_ITRx_SetConfig>
        break;
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
	...

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <TIM_Base_SetConfig+0xb8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00b      	beq.n	8002c54 <TIM_Base_SetConfig+0x30>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d007      	beq.n	8002c54 <TIM_Base_SetConfig+0x30>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <TIM_Base_SetConfig+0xbc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0x30>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a25      	ldr	r2, [pc, #148]	; (8002ce4 <TIM_Base_SetConfig+0xc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <TIM_Base_SetConfig+0xb8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d007      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <TIM_Base_SetConfig+0xbc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_Base_SetConfig+0x62>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <TIM_Base_SetConfig+0xc0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <TIM_Base_SetConfig+0xb8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d103      	bne.n	8002ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	615a      	str	r2, [r3, #20]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800

08002ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0303 	bic.w	r3, r3, #3
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f023 0302 	bic.w	r3, r3, #2
 8002d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <TIM_OC1_SetConfig+0xc8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10c      	bne.n	8002d5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0308 	bic.w	r3, r3, #8
 8002d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <TIM_OC1_SetConfig+0xc8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d111      	bne.n	8002d8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40012c00 	.word	0x40012c00

08002db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0210 	bic.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0320 	bic.w	r3, r3, #32
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <TIM_OC2_SetConfig+0xd0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10d      	bne.n	8002e30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <TIM_OC2_SetConfig+0xd0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d113      	bne.n	8002e60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	40012c00 	.word	0x40012c00

08002e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_OC3_SetConfig+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10d      	bne.n	8002f02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <TIM_OC3_SetConfig+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d113      	bne.n	8002f32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	621a      	str	r2, [r3, #32]
}
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40012c00 	.word	0x40012c00

08002f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	031b      	lsls	r3, r3, #12
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <TIM_OC4_SetConfig+0x98>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d109      	bne.n	8002fd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00

08002ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0201 	bic.w	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 030a 	bic.w	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f023 0210 	bic.w	r2, r3, #16
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	031b      	lsls	r3, r3, #12
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003090:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f043 0307 	orr.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b087      	sub	sp, #28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003100:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	431a      	orrs	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4313      	orrs	r3, r2
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	609a      	str	r2, [r3, #8]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	43db      	mvns	r3, r3
 8003146:	401a      	ands	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003180:	2302      	movs	r3, #2
 8003182:	e046      	b.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d009      	beq.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10c      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800

08003228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003252:	f3ef 8305 	mrs	r3, IPSR
 8003256:	60bb      	str	r3, [r7, #8]
  return(result);
 8003258:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325e:	f3ef 8310 	mrs	r3, PRIMASK
 8003262:	607b      	str	r3, [r7, #4]
  return(result);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <osKernelInitialize+0x32>
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <osKernelInitialize+0x60>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d109      	bne.n	8003286 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003272:	f3ef 8311 	mrs	r3, BASEPRI
 8003276:	603b      	str	r3, [r7, #0]
  return(result);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800327e:	f06f 0305 	mvn.w	r3, #5
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e00c      	b.n	80032a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <osKernelInitialize+0x60>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <osKernelInitialize+0x60>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e002      	b.n	80032a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800329e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032a0:	68fb      	ldr	r3, [r7, #12]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	20000098 	.word	0x20000098

080032b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b6:	f3ef 8305 	mrs	r3, IPSR
 80032ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80032bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c2:	f3ef 8310 	mrs	r3, PRIMASK
 80032c6:	607b      	str	r3, [r7, #4]
  return(result);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <osKernelStart+0x32>
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <osKernelStart+0x64>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d109      	bne.n	80032ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032d6:	f3ef 8311 	mrs	r3, BASEPRI
 80032da:	603b      	str	r3, [r7, #0]
  return(result);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80032e2:	f06f 0305 	mvn.w	r3, #5
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e00e      	b.n	8003308 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <osKernelStart+0x64>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <osKernelStart+0x64>)
 80032f4:	2202      	movs	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032f8:	f001 f864 	bl	80043c4 <vTaskStartScheduler>
      stat = osOK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e002      	b.n	8003308 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003306:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000098 	.word	0x20000098

08003318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b092      	sub	sp, #72	; 0x48
 800331c:	af04      	add	r7, sp, #16
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003328:	f3ef 8305 	mrs	r3, IPSR
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 8094 	bne.w	800345e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003336:	f3ef 8310 	mrs	r3, PRIMASK
 800333a:	623b      	str	r3, [r7, #32]
  return(result);
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 808d 	bne.w	800345e <osThreadNew+0x146>
 8003344:	4b48      	ldr	r3, [pc, #288]	; (8003468 <osThreadNew+0x150>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d106      	bne.n	800335a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800334c:	f3ef 8311 	mrs	r3, BASEPRI
 8003350:	61fb      	str	r3, [r7, #28]
  return(result);
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 8082 	bne.w	800345e <osThreadNew+0x146>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d07e      	beq.n	800345e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003364:	2318      	movs	r3, #24
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003368:	2300      	movs	r3, #0
 800336a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800336c:	f107 031b 	add.w	r3, r7, #27
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d045      	beq.n	800340a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <osThreadNew+0x74>
        name = attr->name;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <osThreadNew+0x9a>
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b38      	cmp	r3, #56	; 0x38
 80033a4:	d805      	bhi.n	80033b2 <osThreadNew+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <osThreadNew+0x9e>
        return (NULL);
 80033b2:	2300      	movs	r3, #0
 80033b4:	e054      	b.n	8003460 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <osThreadNew+0xd4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b5b      	cmp	r3, #91	; 0x5b
 80033d4:	d90a      	bls.n	80033ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osThreadNew+0xd4>
        mem = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ea:	e010      	b.n	800340e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10c      	bne.n	800340e <osThreadNew+0xf6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d108      	bne.n	800340e <osThreadNew+0xf6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <osThreadNew+0xf6>
          mem = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
 8003408:	e001      	b.n	800340e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	2b01      	cmp	r3, #1
 8003412:	d110      	bne.n	8003436 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800341c:	9202      	str	r2, [sp, #8]
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fe02 	bl	8004034 <xTaskCreateStatic>
 8003430:	4603      	mov	r3, r0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e013      	b.n	800345e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	b29a      	uxth	r2, r3
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fe49 	bl	80040e6 <xTaskCreate>
 8003454:	4603      	mov	r3, r0
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <osThreadNew+0x146>
          hTask = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800345e:	697b      	ldr	r3, [r7, #20]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3738      	adds	r7, #56	; 0x38
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000098 	.word	0x20000098

0800346c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003474:	f3ef 8305 	mrs	r3, IPSR
 8003478:	613b      	str	r3, [r7, #16]
  return(result);
 800347a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	60fb      	str	r3, [r7, #12]
  return(result);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <osDelay+0x34>
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <osDelay+0x58>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d109      	bne.n	80034a8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003494:	f3ef 8311 	mrs	r3, BASEPRI
 8003498:	60bb      	str	r3, [r7, #8]
  return(result);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <osDelay+0x3c>
    stat = osErrorISR;
 80034a0:	f06f 0305 	mvn.w	r3, #5
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e007      	b.n	80034b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ff52 	bl	800435c <vTaskDelay>
    }
  }

  return (stat);
 80034b8:	697b      	ldr	r3, [r7, #20]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000098 	.word	0x20000098

080034c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <vApplicationGetIdleTaskMemory+0x28>)
 80034d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80034de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	2000009c 	.word	0x2000009c
 80034f4:	200000f8 	.word	0x200000f8

080034f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <vApplicationGetTimerTaskMemory+0x2c>)
 8003508:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a06      	ldr	r2, [pc, #24]	; (8003528 <vApplicationGetTimerTaskMemory+0x30>)
 800350e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003516:	601a      	str	r2, [r3, #0]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	200002f8 	.word	0x200002f8
 8003528:	20000354 	.word	0x20000354

0800352c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f103 0208 	add.w	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003544:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f103 0208 	add.w	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f103 0208 	add.w	r2, r3, #8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035de:	d103      	bne.n	80035e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e00c      	b.n	8003602 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3308      	adds	r3, #8
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e002      	b.n	80035f6 <vListInsert+0x2e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d2f6      	bcs.n	80035f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6892      	ldr	r2, [r2, #8]
 800364e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6852      	ldr	r2, [r2, #4]
 8003658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d103      	bne.n	800366c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
	...

0800368c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	e7fe      	b.n	80036b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80036b4:	f001 ff98 	bl	80055e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	3b01      	subs	r3, #1
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	22ff      	movs	r2, #255	; 0xff
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d114      	bne.n	8003734 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01a      	beq.n	8003748 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3310      	adds	r3, #16
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f8d8 	bl	80048cc <xTaskRemoveFromEventList>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <xQueueGenericReset+0xcc>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	e009      	b.n	8003748 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3310      	adds	r3, #16
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fef7 	bl	800352c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3324      	adds	r3, #36	; 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fef2 	bl	800352c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003748:	f001 ff7c 	bl	8005644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800374c:	2301      	movs	r3, #1
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08e      	sub	sp, #56	; 0x38
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <xQueueGenericCreateStatic+0x28>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
 8003782:	e7fe      	b.n	8003782 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <xQueueGenericCreateStatic+0x42>
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	e7fe      	b.n	800379c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <xQueueGenericCreateStatic+0x4e>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <xQueueGenericCreateStatic+0x52>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueGenericCreateStatic+0x54>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <xQueueGenericCreateStatic+0x6c>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	e7fe      	b.n	80037c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <xQueueGenericCreateStatic+0x78>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <xQueueGenericCreateStatic+0x7c>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <xQueueGenericCreateStatic+0x7e>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <xQueueGenericCreateStatic+0x96>
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037f2:	2350      	movs	r3, #80	; 0x50
 80037f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b50      	cmp	r3, #80	; 0x50
 80037fa:	d009      	beq.n	8003810 <xQueueGenericCreateStatic+0xb4>
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e7fe      	b.n	800380e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003822:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4613      	mov	r3, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f805 	bl	8003840 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003838:	4618      	mov	r0, r3
 800383a:	3730      	adds	r7, #48	; 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e002      	b.n	8003862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800386e:	2101      	movs	r1, #1
 8003870:	69b8      	ldr	r0, [r7, #24]
 8003872:	f7ff ff0b 	bl	800368c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08e      	sub	sp, #56	; 0x38
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003896:	2300      	movs	r3, #0
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <xQueueGenericSend+0x30>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b6:	e7fe      	b.n	80038b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <xQueueGenericSend+0x3e>
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xQueueGenericSend+0x42>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueGenericSend+0x44>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <xQueueGenericSend+0x5c>
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	e7fe      	b.n	80038e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSend+0x6a>
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <xQueueGenericSend+0x6e>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <xQueueGenericSend+0x70>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <xQueueGenericSend+0x88>
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	623b      	str	r3, [r7, #32]
 800390e:	e7fe      	b.n	800390e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003910:	f001 f996 	bl	8004c40 <xTaskGetSchedulerState>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <xQueueGenericSend+0x98>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <xQueueGenericSend+0x9c>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <xQueueGenericSend+0x9e>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <xQueueGenericSend+0xb6>
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e7fe      	b.n	800393c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800393e:	f001 fe53 	bl	80055e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <xQueueGenericSend+0xcc>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d129      	bne.n	80039a8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395a:	f000 f9ff 	bl	8003d5c <prvCopyDataToQueue>
 800395e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	4618      	mov	r0, r3
 800396e:	f000 ffad 	bl	80048cc <xTaskRemoveFromEventList>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <xQueueGenericSend+0x1f0>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	e00a      	b.n	80039a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <xQueueGenericSend+0x1f0>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039a0:	f001 fe50 	bl	8005644 <vPortExitCritical>
				return pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e063      	b.n	8003a70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ae:	f001 fe49 	bl	8005644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e05c      	b.n	8003a70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ffe5 	bl	8004990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ca:	f001 fe3b 	bl	8005644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ce:	f000 fd5d 	bl	800448c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039d2:	f001 fe09 	bl	80055e8 <vPortEnterCritical>
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e2:	d103      	bne.n	80039ec <xQueueGenericSend+0x164>
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f8:	d103      	bne.n	8003a02 <xQueueGenericSend+0x17a>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a02:	f001 fe1f 	bl	8005644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a06:	1d3a      	adds	r2, r7, #4
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 ffd4 	bl	80049bc <xTaskCheckForTimeOut>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d124      	bne.n	8003a64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1c:	f000 fa96 	bl	8003f4c <prvIsQueueFull>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	3310      	adds	r3, #16
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fefe 	bl	8004830 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a36:	f000 fa21 	bl	8003e7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f000 fd35 	bl	80044a8 <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f af7c 	bne.w	800393e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <xQueueGenericSend+0x1f0>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	e772      	b.n	800393e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5a:	f000 fa0f 	bl	8003e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5e:	f000 fd23 	bl	80044a8 <xTaskResumeAll>
 8003a62:	e76c      	b.n	800393e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a66:	f000 fa09 	bl	8003e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a6a:	f000 fd1d 	bl	80044a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a6e:	2300      	movs	r3, #0
		}
	}
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3738      	adds	r7, #56	; 0x38
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08e      	sub	sp, #56	; 0x38
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <xQueueGenericSendFromISR+0x2c>
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <xQueueGenericSendFromISR+0x3a>
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <xQueueGenericSendFromISR+0x3e>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <xQueueGenericSendFromISR+0x40>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <xQueueGenericSendFromISR+0x58>
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e7fe      	b.n	8003ad2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d103      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x66>
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <xQueueGenericSendFromISR+0x6a>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <xQueueGenericSendFromISR+0x6c>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <xQueueGenericSendFromISR+0x84>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e7fe      	b.n	8003afe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b00:	f001 fe2c 	bl	800575c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b04:	f3ef 8211 	mrs	r2, BASEPRI
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	61ba      	str	r2, [r7, #24]
 8003b1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <xQueueGenericSendFromISR+0xb6>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d12c      	bne.n	8003b8c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b42:	f000 f90b 	bl	8003d5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4e:	d112      	bne.n	8003b76 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d016      	beq.n	8003b86 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 feb5 	bl	80048cc <xTaskRemoveFromEventList>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e007      	b.n	8003b86 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	b25a      	sxtb	r2, r3
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b86:	2301      	movs	r3, #1
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b8a:	e001      	b.n	8003b90 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3738      	adds	r7, #56	; 0x38
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08c      	sub	sp, #48	; 0x30
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <xQueueReceive+0x2e>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	e7fe      	b.n	8003bd0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <xQueueReceive+0x3c>
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <xQueueReceive+0x40>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <xQueueReceive+0x42>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <xQueueReceive+0x5a>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	e7fe      	b.n	8003bfc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bfe:	f001 f81f 	bl	8004c40 <xTaskGetSchedulerState>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <xQueueReceive+0x6a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <xQueueReceive+0x6e>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueReceive+0x70>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xQueueReceive+0x88>
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e7fe      	b.n	8003c2a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2c:	f001 fcdc 	bl	80055e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c40:	f000 f8f6 	bl	8003e30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	1e5a      	subs	r2, r3, #1
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00f      	beq.n	8003c74 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	3310      	adds	r3, #16
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fe37 	bl	80048cc <xTaskRemoveFromEventList>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c64:	4b3c      	ldr	r3, [pc, #240]	; (8003d58 <xQueueReceive+0x1b4>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c74:	f001 fce6 	bl	8005644 <vPortExitCritical>
				return pdPASS;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e069      	b.n	8003d50 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c82:	f001 fcdf 	bl	8005644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e062      	b.n	8003d50 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fe7b 	bl	8004990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c9e:	f001 fcd1 	bl	8005644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ca2:	f000 fbf3 	bl	800448c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ca6:	f001 fc9f 	bl	80055e8 <vPortEnterCritical>
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb6:	d103      	bne.n	8003cc0 <xQueueReceive+0x11c>
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ccc:	d103      	bne.n	8003cd6 <xQueueReceive+0x132>
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd6:	f001 fcb5 	bl	8005644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cda:	1d3a      	adds	r2, r7, #4
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fe6a 	bl	80049bc <xTaskCheckForTimeOut>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d123      	bne.n	8003d36 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf0:	f000 f916 	bl	8003f20 <prvIsQueueEmpty>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d017      	beq.n	8003d2a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd94 	bl	8004830 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0a:	f000 f8b7 	bl	8003e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d0e:	f000 fbcb 	bl	80044a8 <xTaskResumeAll>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d189      	bne.n	8003c2c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <xQueueReceive+0x1b4>)
 8003d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	e780      	b.n	8003c2c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2c:	f000 f8a6 	bl	8003e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d30:	f000 fbba 	bl	80044a8 <xTaskResumeAll>
 8003d34:	e77a      	b.n	8003c2c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d38:	f000 f8a0 	bl	8003e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d3c:	f000 fbb4 	bl	80044a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d42:	f000 f8ed 	bl	8003f20 <prvIsQueueEmpty>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f43f af6f 	beq.w	8003c2c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3730      	adds	r7, #48	; 0x30
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d14d      	bne.n	8003e1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 ff78 	bl	8004c7c <xTaskPriorityDisinherit>
 8003d8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	e043      	b.n	8003e1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d119      	bne.n	8003dd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6898      	ldr	r0, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	461a      	mov	r2, r3
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	f001 ff12 	bl	8005bd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	441a      	add	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d32b      	bcc.n	8003e1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	e026      	b.n	8003e1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68d8      	ldr	r0, [r3, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	f001 fef8 	bl	8005bd0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	425b      	negs	r3, r3
 8003dea:	441a      	add	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d207      	bcs.n	8003e0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	425b      	negs	r3, r3
 8003e06:	441a      	add	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d105      	bne.n	8003e1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e26:	697b      	ldr	r3, [r7, #20]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d018      	beq.n	8003e74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	441a      	add	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d303      	bcc.n	8003e64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68d9      	ldr	r1, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6838      	ldr	r0, [r7, #0]
 8003e70:	f001 feae 	bl	8005bd0 <memcpy>
	}
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e84:	f001 fbb0 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e90:	e011      	b.n	8003eb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3324      	adds	r3, #36	; 0x24
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd14 	bl	80048cc <xTaskRemoveFromEventList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eaa:	f000 fde7 	bl	8004a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dce9      	bgt.n	8003e92 <prvUnlockQueue+0x16>
 8003ebe:	e000      	b.n	8003ec2 <prvUnlockQueue+0x46>
					break;
 8003ec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	22ff      	movs	r2, #255	; 0xff
 8003ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003eca:	f001 fbbb 	bl	8005644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ece:	f001 fb8b 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eda:	e011      	b.n	8003f00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3310      	adds	r3, #16
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fcef 	bl	80048cc <xTaskRemoveFromEventList>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef4:	f000 fdc2 	bl	8004a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dce9      	bgt.n	8003edc <prvUnlockQueue+0x60>
 8003f08:	e000      	b.n	8003f0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f14:	f001 fb96 	bl	8005644 <vPortExitCritical>
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f28:	f001 fb5e 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e001      	b.n	8003f3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f3e:	f001 fb81 	bl	8005644 <vPortExitCritical>

	return xReturn;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f54:	f001 fb48 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d102      	bne.n	8003f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e001      	b.n	8003f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f001 fb69 	bl	8005644 <vPortExitCritical>

	return xReturn;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e014      	b.n	8003fb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f8c:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <vQueueAddToRegistry+0x4c>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f98:	490b      	ldr	r1, [pc, #44]	; (8003fc8 <vQueueAddToRegistry+0x4c>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <vQueueAddToRegistry+0x4c>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fae:	e005      	b.n	8003fbc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	d9e7      	bls.n	8003f8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20001dfc 	.word	0x20001dfc

08003fcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fdc:	f001 fb04 	bl	80055e8 <vPortEnterCritical>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fec:	d103      	bne.n	8003ff6 <vQueueWaitForMessageRestricted+0x2a>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004002:	d103      	bne.n	800400c <vQueueWaitForMessageRestricted+0x40>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800400c:	f001 fb1a 	bl	8005644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fc29 	bl	8004878 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f7ff ff28 	bl	8003e7c <prvUnlockQueue>
	}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08e      	sub	sp, #56	; 0x38
 8004038:	af04      	add	r7, sp, #16
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <xTaskCreateStatic+0x28>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	e7fe      	b.n	800405a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <xTaskCreateStatic+0x42>
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	e7fe      	b.n	8004074 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004076:	235c      	movs	r3, #92	; 0x5c
 8004078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b5c      	cmp	r3, #92	; 0x5c
 800407e:	d009      	beq.n	8004094 <xTaskCreateStatic+0x60>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	e7fe      	b.n	8004092 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01e      	beq.n	80040d8 <xTaskCreateStatic+0xa4>
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01b      	beq.n	80040d8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040b2:	2300      	movs	r3, #0
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	9302      	str	r3, [sp, #8]
 80040ba:	f107 0314 	add.w	r3, r7, #20
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f850 	bl	8004170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040d2:	f000 f8d3 	bl	800427c <prvAddNewTaskToReadyList>
 80040d6:	e001      	b.n	80040dc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040dc:	697b      	ldr	r3, [r7, #20]
	}
 80040de:	4618      	mov	r0, r3
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b08c      	sub	sp, #48	; 0x30
 80040ea:	af04      	add	r7, sp, #16
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 fb6a 	bl	80057d4 <pvPortMalloc>
 8004100:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004108:	205c      	movs	r0, #92	; 0x5c
 800410a:	f001 fb63 	bl	80057d4 <pvPortMalloc>
 800410e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
 800411c:	e005      	b.n	800412a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f001 fc1a 	bl	8005958 <vPortFree>
 8004124:	e001      	b.n	800412a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d017      	beq.n	8004160 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	2300      	movs	r3, #0
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f80e 	bl	8004170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004154:	69f8      	ldr	r0, [r7, #28]
 8004156:	f000 f891 	bl	800427c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800415a:	2301      	movs	r3, #1
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e002      	b.n	8004166 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004166:	69bb      	ldr	r3, [r7, #24]
	}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	461a      	mov	r2, r3
 8004188:	21a5      	movs	r1, #165	; 0xa5
 800418a:	f001 fd2c 	bl	8005be6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004198:	3b01      	subs	r3, #1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <prvInitialiseNewTask+0x56>
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e7fe      	b.n	80041c4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e012      	b.n	80041f2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	7819      	ldrb	r1, [r3, #0]
 80041d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	3334      	adds	r3, #52	; 0x34
 80041dc:	460a      	mov	r2, r1
 80041de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d9e9      	bls.n	80041cc <prvInitialiseNewTask+0x5c>
 80041f8:	e000      	b.n	80041fc <prvInitialiseNewTask+0x8c>
		{
			break;
 80041fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2b37      	cmp	r3, #55	; 0x37
 8004208:	d901      	bls.n	800420e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800420a:	2337      	movs	r3, #55	; 0x37
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004218:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff f9a0 	bl	800356a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	3318      	adds	r3, #24
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f99b 	bl	800356a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004238:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004248:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	2200      	movs	r2, #0
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	69b8      	ldr	r0, [r7, #24]
 800425e:	f001 f8d7 	bl	8005410 <pxPortInitialiseStack>
 8004262:	4602      	mov	r2, r0
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004274:	bf00      	nop
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004284:	f001 f9b0 	bl	80055e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004288:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <prvAddNewTaskToReadyList+0xc4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <prvAddNewTaskToReadyList+0xc4>)
 8004290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004292:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <prvAddNewTaskToReadyList+0xc4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d110      	bne.n	80042ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042a8:	f000 fc0c 	bl	8004ac4 <prvInitialiseTaskLists>
 80042ac:	e00d      	b.n	80042ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <prvAddNewTaskToReadyList+0xcc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042b6:	4b23      	ldr	r3, [pc, #140]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d802      	bhi.n	80042ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042c4:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <prvAddNewTaskToReadyList+0xd0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <prvAddNewTaskToReadyList+0xd0>)
 80042d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <prvAddNewTaskToReadyList+0xd0>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <prvAddNewTaskToReadyList+0xd4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d903      	bls.n	80042f0 <prvAddNewTaskToReadyList+0x74>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a18      	ldr	r2, [pc, #96]	; (8004350 <prvAddNewTaskToReadyList+0xd4>)
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <prvAddNewTaskToReadyList+0xd8>)
 80042fe:	441a      	add	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7ff f93b 	bl	8003582 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800430c:	f001 f99a 	bl	8005644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <prvAddNewTaskToReadyList+0xcc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00e      	beq.n	8004336 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <prvAddNewTaskToReadyList+0xc8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	429a      	cmp	r2, r3
 8004324:	d207      	bcs.n	8004336 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <prvAddNewTaskToReadyList+0xdc>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000c28 	.word	0x20000c28
 8004344:	20000754 	.word	0x20000754
 8004348:	20000c34 	.word	0x20000c34
 800434c:	20000c44 	.word	0x20000c44
 8004350:	20000c30 	.word	0x20000c30
 8004354:	20000758 	.word	0x20000758
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <vTaskDelay+0x60>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <vTaskDelay+0x2e>
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	e7fe      	b.n	8004388 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800438a:	f000 f87f 	bl	800448c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800438e:	2100      	movs	r1, #0
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fcdf 	bl	8004d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004396:	f000 f887 	bl	80044a8 <xTaskResumeAll>
 800439a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <vTaskDelay+0x64>)
 80043a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000c50 	.word	0x20000c50
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043d2:	463a      	mov	r2, r7
 80043d4:	1d39      	adds	r1, r7, #4
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f874 	bl	80034c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	9202      	str	r2, [sp, #8]
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	460a      	mov	r2, r1
 80043f2:	4920      	ldr	r1, [pc, #128]	; (8004474 <vTaskStartScheduler+0xb0>)
 80043f4:	4820      	ldr	r0, [pc, #128]	; (8004478 <vTaskStartScheduler+0xb4>)
 80043f6:	f7ff fe1d 	bl	8004034 <xTaskCreateStatic>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b1f      	ldr	r3, [pc, #124]	; (800447c <vTaskStartScheduler+0xb8>)
 80043fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <vTaskStartScheduler+0xb8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004408:	2301      	movs	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e001      	b.n	8004412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004418:	f000 fcf0 	bl	8004dfc <xTimerCreateTimerTask>
 800441c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d115      	bne.n	8004450 <vTaskStartScheduler+0x8c>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <vTaskStartScheduler+0xbc>)
 8004438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800443c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <vTaskStartScheduler+0xc0>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <vTaskStartScheduler+0xc4>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800444a:	f001 f85d 	bl	8005508 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800444e:	e00d      	b.n	800446c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004456:	d109      	bne.n	800446c <vTaskStartScheduler+0xa8>
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e7fe      	b.n	800446a <vTaskStartScheduler+0xa6>
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08006a44 	.word	0x08006a44
 8004478:	08004a95 	.word	0x08004a95
 800447c:	20000c4c 	.word	0x20000c4c
 8004480:	20000c48 	.word	0x20000c48
 8004484:	20000c34 	.word	0x20000c34
 8004488:	20000c2c 	.word	0x20000c2c

0800448c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <vTaskSuspendAll+0x18>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <vTaskSuspendAll+0x18>)
 8004498:	6013      	str	r3, [r2, #0]
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000c50 	.word	0x20000c50

080044a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044b6:	4b41      	ldr	r3, [pc, #260]	; (80045bc <xTaskResumeAll+0x114>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <xTaskResumeAll+0x2a>
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	e7fe      	b.n	80044d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044d2:	f001 f889 	bl	80055e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <xTaskResumeAll+0x114>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3b01      	subs	r3, #1
 80044dc:	4a37      	ldr	r2, [pc, #220]	; (80045bc <xTaskResumeAll+0x114>)
 80044de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <xTaskResumeAll+0x114>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d162      	bne.n	80045ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044e8:	4b35      	ldr	r3, [pc, #212]	; (80045c0 <xTaskResumeAll+0x118>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05e      	beq.n	80045ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f0:	e02f      	b.n	8004552 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044f2:	4b34      	ldr	r3, [pc, #208]	; (80045c4 <xTaskResumeAll+0x11c>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3318      	adds	r3, #24
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff f89a 	bl	8003638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3304      	adds	r3, #4
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f895 	bl	8003638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <xTaskResumeAll+0x120>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <xTaskResumeAll+0x7a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <xTaskResumeAll+0x120>)
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4a27      	ldr	r2, [pc, #156]	; (80045cc <xTaskResumeAll+0x124>)
 8004530:	441a      	add	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3304      	adds	r3, #4
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f7ff f822 	bl	8003582 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <xTaskResumeAll+0x128>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800454c:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <xTaskResumeAll+0x12c>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <xTaskResumeAll+0x11c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1cb      	bne.n	80044f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004560:	f000 fb4a 	bl	8004bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004564:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <xTaskResumeAll+0x130>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004570:	f000 f844 	bl	80045fc <xTaskIncrementTick>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <xTaskResumeAll+0x12c>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f1      	bne.n	8004570 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <xTaskResumeAll+0x130>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <xTaskResumeAll+0x12c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <xTaskResumeAll+0x134>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f001 f849 	bl	8005644 <vPortExitCritical>

	return xAlreadyYielded;
 80045b2:	68bb      	ldr	r3, [r7, #8]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000c50 	.word	0x20000c50
 80045c0:	20000c28 	.word	0x20000c28
 80045c4:	20000be8 	.word	0x20000be8
 80045c8:	20000c30 	.word	0x20000c30
 80045cc:	20000758 	.word	0x20000758
 80045d0:	20000754 	.word	0x20000754
 80045d4:	20000c3c 	.word	0x20000c3c
 80045d8:	20000c38 	.word	0x20000c38
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <xTaskGetTickCount+0x18>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045ec:	687b      	ldr	r3, [r7, #4]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	20000c2c 	.word	0x20000c2c

080045fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004606:	4b51      	ldr	r3, [pc, #324]	; (800474c <xTaskIncrementTick+0x150>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 808d 	bne.w	800472a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004610:	4b4f      	ldr	r3, [pc, #316]	; (8004750 <xTaskIncrementTick+0x154>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004618:	4a4d      	ldr	r2, [pc, #308]	; (8004750 <xTaskIncrementTick+0x154>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11f      	bne.n	8004664 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004624:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <xTaskIncrementTick+0x158>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <xTaskIncrementTick+0x46>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	e7fe      	b.n	8004640 <xTaskIncrementTick+0x44>
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <xTaskIncrementTick+0x158>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <xTaskIncrementTick+0x15c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a41      	ldr	r2, [pc, #260]	; (8004754 <xTaskIncrementTick+0x158>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4a41      	ldr	r2, [pc, #260]	; (8004758 <xTaskIncrementTick+0x15c>)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b41      	ldr	r3, [pc, #260]	; (800475c <xTaskIncrementTick+0x160>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	4a3f      	ldr	r2, [pc, #252]	; (800475c <xTaskIncrementTick+0x160>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	f000 faca 	bl	8004bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <xTaskIncrementTick+0x164>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d34e      	bcc.n	800470c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800466e:	4b39      	ldr	r3, [pc, #228]	; (8004754 <xTaskIncrementTick+0x158>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <xTaskIncrementTick+0x80>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <xTaskIncrementTick+0x82>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <xTaskIncrementTick+0x164>)
 8004684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004688:	601a      	str	r2, [r3, #0]
					break;
 800468a:	e03f      	b.n	800470c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <xTaskIncrementTick+0x158>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d203      	bcs.n	80046ac <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046a4:	4a2e      	ldr	r2, [pc, #184]	; (8004760 <xTaskIncrementTick+0x164>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6013      	str	r3, [r2, #0]
						break;
 80046aa:	e02f      	b.n	800470c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe ffc1 	bl	8003638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3318      	adds	r3, #24
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe ffb8 	bl	8003638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <xTaskIncrementTick+0x168>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d903      	bls.n	80046dc <xTaskIncrementTick+0xe0>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	4a22      	ldr	r2, [pc, #136]	; (8004764 <xTaskIncrementTick+0x168>)
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <xTaskIncrementTick+0x16c>)
 80046ea:	441a      	add	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fe ff45 	bl	8003582 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <xTaskIncrementTick+0x170>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	429a      	cmp	r2, r3
 8004704:	d3b3      	bcc.n	800466e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004706:	2301      	movs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800470a:	e7b0      	b.n	800466e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <xTaskIncrementTick+0x170>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	4915      	ldr	r1, [pc, #84]	; (8004768 <xTaskIncrementTick+0x16c>)
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d907      	bls.n	8004734 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e004      	b.n	8004734 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <xTaskIncrementTick+0x174>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <xTaskIncrementTick+0x174>)
 8004732:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <xTaskIncrementTick+0x178>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004740:	697b      	ldr	r3, [r7, #20]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000c50 	.word	0x20000c50
 8004750:	20000c2c 	.word	0x20000c2c
 8004754:	20000be0 	.word	0x20000be0
 8004758:	20000be4 	.word	0x20000be4
 800475c:	20000c40 	.word	0x20000c40
 8004760:	20000c48 	.word	0x20000c48
 8004764:	20000c30 	.word	0x20000c30
 8004768:	20000758 	.word	0x20000758
 800476c:	20000754 	.word	0x20000754
 8004770:	20000c38 	.word	0x20000c38
 8004774:	20000c3c 	.word	0x20000c3c

08004778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <vTaskSwitchContext+0xa4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004786:	4b26      	ldr	r3, [pc, #152]	; (8004820 <vTaskSwitchContext+0xa8>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800478c:	e040      	b.n	8004810 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <vTaskSwitchContext+0xa8>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <vTaskSwitchContext+0xac>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e00f      	b.n	80047bc <vTaskSwitchContext+0x44>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <vTaskSwitchContext+0x3e>
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	e7fe      	b.n	80047b4 <vTaskSwitchContext+0x3c>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	491a      	ldr	r1, [pc, #104]	; (8004828 <vTaskSwitchContext+0xb0>)
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0e5      	beq.n	800479c <vTaskSwitchContext+0x24>
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4a13      	ldr	r2, [pc, #76]	; (8004828 <vTaskSwitchContext+0xb0>)
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3308      	adds	r3, #8
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d104      	bne.n	8004800 <vTaskSwitchContext+0x88>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <vTaskSwitchContext+0xb4>)
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4a06      	ldr	r2, [pc, #24]	; (8004824 <vTaskSwitchContext+0xac>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6013      	str	r3, [r2, #0]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000c50 	.word	0x20000c50
 8004820:	20000c3c 	.word	0x20000c3c
 8004824:	20000c30 	.word	0x20000c30
 8004828:	20000758 	.word	0x20000758
 800482c:	20000754 	.word	0x20000754

08004830 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <vTaskPlaceOnEventList+0x24>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e7fe      	b.n	8004852 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <vTaskPlaceOnEventList+0x44>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3318      	adds	r3, #24
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fe feb3 	bl	80035c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004862:	2101      	movs	r1, #1
 8004864:	6838      	ldr	r0, [r7, #0]
 8004866:	f000 fa75 	bl	8004d54 <prvAddCurrentTaskToDelayedList>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000754 	.word	0x20000754

08004878 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <vTaskPlaceOnEventListRestricted+0x26>
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e7fe      	b.n	800489c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3318      	adds	r3, #24
 80048a4:	4619      	mov	r1, r3
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7fe fe6b 	bl	8003582 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	68b8      	ldr	r0, [r7, #8]
 80048bc:	f000 fa4a 	bl	8004d54 <prvAddCurrentTaskToDelayedList>
	}
 80048c0:	bf00      	nop
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000754 	.word	0x20000754

080048cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <xTaskRemoveFromEventList+0x2a>
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e7fe      	b.n	80048f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3318      	adds	r3, #24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fe9c 	bl	8003638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <xTaskRemoveFromEventList+0xac>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11d      	bne.n	8004944 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	3304      	adds	r3, #4
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fe93 	bl	8003638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <xTaskRemoveFromEventList+0xb0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d903      	bls.n	8004926 <xTaskRemoveFromEventList+0x5a>
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <xTaskRemoveFromEventList+0xb0>)
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <xTaskRemoveFromEventList+0xb4>)
 8004934:	441a      	add	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe fe20 	bl	8003582 <vListInsertEnd>
 8004942:	e005      	b.n	8004950 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	3318      	adds	r3, #24
 8004948:	4619      	mov	r1, r3
 800494a:	480e      	ldr	r0, [pc, #56]	; (8004984 <xTaskRemoveFromEventList+0xb8>)
 800494c:	f7fe fe19 	bl	8003582 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <xTaskRemoveFromEventList+0xbc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	429a      	cmp	r2, r3
 800495c:	d905      	bls.n	800496a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <xTaskRemoveFromEventList+0xc0>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e001      	b.n	800496e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800496e:	697b      	ldr	r3, [r7, #20]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000c50 	.word	0x20000c50
 800497c:	20000c30 	.word	0x20000c30
 8004980:	20000758 	.word	0x20000758
 8004984:	20000be8 	.word	0x20000be8
 8004988:	20000754 	.word	0x20000754
 800498c:	20000c3c 	.word	0x20000c3c

08004990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <vTaskInternalSetTimeOutState+0x24>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <vTaskInternalSetTimeOutState+0x28>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	605a      	str	r2, [r3, #4]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000c40 	.word	0x20000c40
 80049b8:	20000c2c 	.word	0x20000c2c

080049bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xTaskCheckForTimeOut+0x24>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e7fe      	b.n	80049de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <xTaskCheckForTimeOut+0x3e>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e7fe      	b.n	80049f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80049fa:	f000 fdf5 	bl	80055e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <xTaskCheckForTimeOut+0xb8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a16:	d102      	bne.n	8004a1e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e023      	b.n	8004a66 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <xTaskCheckForTimeOut+0xbc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d007      	beq.n	8004a3a <xTaskCheckForTimeOut+0x7e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e015      	b.n	8004a66 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d20b      	bcs.n	8004a5c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ff9d 	bl	8004990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e004      	b.n	8004a66 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a66:	f000 fded 	bl	8005644 <vPortExitCritical>

	return xReturn;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000c2c 	.word	0x20000c2c
 8004a78:	20000c40 	.word	0x20000c40

08004a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <vTaskMissedYield+0x14>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000c3c 	.word	0x20000c3c

08004a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a9c:	f000 f852 	bl	8004b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <prvIdleTask+0x28>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d9f9      	bls.n	8004a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <prvIdleTask+0x2c>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ab8:	e7f0      	b.n	8004a9c <prvIdleTask+0x8>
 8004aba:	bf00      	nop
 8004abc:	20000758 	.word	0x20000758
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	e00c      	b.n	8004aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <prvInitialiseTaskLists+0x60>)
 8004adc:	4413      	add	r3, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fd24 	bl	800352c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b37      	cmp	r3, #55	; 0x37
 8004aee:	d9ef      	bls.n	8004ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004af0:	480d      	ldr	r0, [pc, #52]	; (8004b28 <prvInitialiseTaskLists+0x64>)
 8004af2:	f7fe fd1b 	bl	800352c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004af6:	480d      	ldr	r0, [pc, #52]	; (8004b2c <prvInitialiseTaskLists+0x68>)
 8004af8:	f7fe fd18 	bl	800352c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004afc:	480c      	ldr	r0, [pc, #48]	; (8004b30 <prvInitialiseTaskLists+0x6c>)
 8004afe:	f7fe fd15 	bl	800352c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b02:	480c      	ldr	r0, [pc, #48]	; (8004b34 <prvInitialiseTaskLists+0x70>)
 8004b04:	f7fe fd12 	bl	800352c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b08:	480b      	ldr	r0, [pc, #44]	; (8004b38 <prvInitialiseTaskLists+0x74>)
 8004b0a:	f7fe fd0f 	bl	800352c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <prvInitialiseTaskLists+0x78>)
 8004b10:	4a05      	ldr	r2, [pc, #20]	; (8004b28 <prvInitialiseTaskLists+0x64>)
 8004b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <prvInitialiseTaskLists+0x7c>)
 8004b16:	4a05      	ldr	r2, [pc, #20]	; (8004b2c <prvInitialiseTaskLists+0x68>)
 8004b18:	601a      	str	r2, [r3, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000758 	.word	0x20000758
 8004b28:	20000bb8 	.word	0x20000bb8
 8004b2c:	20000bcc 	.word	0x20000bcc
 8004b30:	20000be8 	.word	0x20000be8
 8004b34:	20000bfc 	.word	0x20000bfc
 8004b38:	20000c14 	.word	0x20000c14
 8004b3c:	20000be0 	.word	0x20000be0
 8004b40:	20000be4 	.word	0x20000be4

08004b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b4a:	e019      	b.n	8004b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b4c:	f000 fd4c 	bl	80055e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <prvCheckTasksWaitingTermination+0x4c>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe fd6b 	bl	8003638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <prvCheckTasksWaitingTermination+0x50>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <prvCheckTasksWaitingTermination+0x50>)
 8004b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvCheckTasksWaitingTermination+0x54>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <prvCheckTasksWaitingTermination+0x54>)
 8004b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b76:	f000 fd65 	bl	8005644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f80e 	bl	8004b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <prvCheckTasksWaitingTermination+0x54>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e1      	bne.n	8004b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000bfc 	.word	0x20000bfc
 8004b94:	20000c28 	.word	0x20000c28
 8004b98:	20000c10 	.word	0x20000c10

08004b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d108      	bne.n	8004bc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fed0 	bl	8005958 <vPortFree>
				vPortFree( pxTCB );
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fecd 	bl	8005958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bbe:	e017      	b.n	8004bf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d103      	bne.n	8004bd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fec4 	bl	8005958 <vPortFree>
	}
 8004bd0:	e00e      	b.n	8004bf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d009      	beq.n	8004bf0 <prvDeleteTCB+0x54>
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e7fe      	b.n	8004bee <prvDeleteTCB+0x52>
	}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <prvResetNextTaskUnblockTime+0x40>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <prvResetNextTaskUnblockTime+0x14>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <prvResetNextTaskUnblockTime+0x16>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvResetNextTaskUnblockTime+0x44>)
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c1a:	e008      	b.n	8004c2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <prvResetNextTaskUnblockTime+0x40>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <prvResetNextTaskUnblockTime+0x44>)
 8004c2c:	6013      	str	r3, [r2, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	20000be0 	.word	0x20000be0
 8004c3c:	20000c48 	.word	0x20000c48

08004c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <xTaskGetSchedulerState+0x34>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	e008      	b.n	8004c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <xTaskGetSchedulerState+0x38>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	607b      	str	r3, [r7, #4]
 8004c60:	e001      	b.n	8004c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c62:	2300      	movs	r3, #0
 8004c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c66:	687b      	ldr	r3, [r7, #4]
	}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000c34 	.word	0x20000c34
 8004c78:	20000c50 	.word	0x20000c50

08004c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d054      	beq.n	8004d3c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <xTaskPriorityDisinherit+0xcc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d009      	beq.n	8004cb0 <xTaskPriorityDisinherit+0x34>
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e7fe      	b.n	8004cae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <xTaskPriorityDisinherit+0x50>
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	e7fe      	b.n	8004cca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd0:	1e5a      	subs	r2, r3, #1
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d02c      	beq.n	8004d3c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d128      	bne.n	8004d3c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fca2 	bl	8003638 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <xTaskPriorityDisinherit+0xd0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d903      	bls.n	8004d1c <xTaskPriorityDisinherit+0xa0>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <xTaskPriorityDisinherit+0xd0>)
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <xTaskPriorityDisinherit+0xd4>)
 8004d2a:	441a      	add	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f7fe fc25 	bl	8003582 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d3c:	697b      	ldr	r3, [r7, #20]
	}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000754 	.word	0x20000754
 8004d4c:	20000c30 	.word	0x20000c30
 8004d50:	20000758 	.word	0x20000758

08004d54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fc64 	bl	8003638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d76:	d10a      	bne.n	8004d8e <prvAddCurrentTaskToDelayedList+0x3a>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4819      	ldr	r0, [pc, #100]	; (8004dec <prvAddCurrentTaskToDelayedList+0x98>)
 8004d88:	f7fe fbfb 	bl	8003582 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d8c:	e026      	b.n	8004ddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d209      	bcs.n	8004dba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7fe fc08 	bl	80035c8 <vListInsert>
}
 8004db8:	e010      	b.n	8004ddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7fe fbfe 	bl	80035c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d202      	bcs.n	8004ddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6013      	str	r3, [r2, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000c2c 	.word	0x20000c2c
 8004de8:	20000754 	.word	0x20000754
 8004dec:	20000c14 	.word	0x20000c14
 8004df0:	20000be4 	.word	0x20000be4
 8004df4:	20000be0 	.word	0x20000be0
 8004df8:	20000c48 	.word	0x20000c48

08004dfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e06:	f000 fac3 	bl	8005390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e0a:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <xTimerCreateTimerTask+0x80>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d021      	beq.n	8004e56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e1a:	1d3a      	adds	r2, r7, #4
 8004e1c:	f107 0108 	add.w	r1, r7, #8
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe fb67 	bl	80034f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	9202      	str	r2, [sp, #8]
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	2302      	movs	r3, #2
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	4910      	ldr	r1, [pc, #64]	; (8004e80 <xTimerCreateTimerTask+0x84>)
 8004e3e:	4811      	ldr	r0, [pc, #68]	; (8004e84 <xTimerCreateTimerTask+0x88>)
 8004e40:	f7ff f8f8 	bl	8004034 <xTaskCreateStatic>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <xTimerCreateTimerTask+0x8c>)
 8004e48:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <xTimerCreateTimerTask+0x8c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e52:	2301      	movs	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <xTimerCreateTimerTask+0x74>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	e7fe      	b.n	8004e6e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000c84 	.word	0x20000c84
 8004e80:	08006a4c 	.word	0x08006a4c
 8004e84:	08004fa5 	.word	0x08004fa5
 8004e88:	20000c88 	.word	0x20000c88

08004e8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <xTimerGenericCommand+0x2c>
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
 8004eb6:	e7fe      	b.n	8004eb6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004eb8:	4b19      	ldr	r3, [pc, #100]	; (8004f20 <xTimerGenericCommand+0x94>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02a      	beq.n	8004f16 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	dc18      	bgt.n	8004f04 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ed2:	f7ff feb5 	bl	8004c40 <xTaskGetSchedulerState>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d109      	bne.n	8004ef0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <xTimerGenericCommand+0x94>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f107 0110 	add.w	r1, r7, #16
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee8:	f7fe fcce 	bl	8003888 <xQueueGenericSend>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24
 8004eee:	e012      	b.n	8004f16 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <xTimerGenericCommand+0x94>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	f107 0110 	add.w	r1, r7, #16
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2200      	movs	r2, #0
 8004efc:	f7fe fcc4 	bl	8003888 <xQueueGenericSend>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24
 8004f02:	e008      	b.n	8004f16 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <xTimerGenericCommand+0x94>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f107 0110 	add.w	r1, r7, #16
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	f7fe fdb4 	bl	8003a7c <xQueueGenericSendFromISR>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	; 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000c84 	.word	0x20000c84

08004f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <prvProcessExpiredTimer+0x7c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe fb7b 	bl	8003638 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d121      	bne.n	8004f8e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	18d1      	adds	r1, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	6978      	ldr	r0, [r7, #20]
 8004f58:	f000 f8c8 	bl	80050ec <prvInsertTimerInActiveList>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d015      	beq.n	8004f8e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f62:	2300      	movs	r3, #0
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2300      	movs	r3, #0
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f7ff ff8d 	bl	8004e8c <xTimerGenericCommand>
 8004f72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <prvProcessExpiredTimer+0x6a>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e7fe      	b.n	8004f8c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	6978      	ldr	r0, [r7, #20]
 8004f94:	4798      	blx	r3
}
 8004f96:	bf00      	nop
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000c7c 	.word	0x20000c7c

08004fa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f857 	bl	8005064 <prvGetNextExpireTime>
 8004fb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f803 	bl	8004fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fc2:	f000 f8d5 	bl	8005170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fc6:	e7f1      	b.n	8004fac <prvTimerTask+0x8>

08004fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fd2:	f7ff fa5b 	bl	800448c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f866 	bl	80050ac <prvSampleTimeNow>
 8004fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d130      	bne.n	800504a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <prvProcessTimerOrBlockTask+0x3c>
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d806      	bhi.n	8005004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ff6:	f7ff fa57 	bl	80044a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff91 	bl	8004f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005002:	e024      	b.n	800504e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <prvProcessTimerOrBlockTask+0x90>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <prvProcessTimerOrBlockTask+0x94>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	4619      	mov	r1, r3
 800502a:	f7fe ffcf 	bl	8003fcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800502e:	f7ff fa3b 	bl	80044a8 <xTaskResumeAll>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <prvProcessTimerOrBlockTask+0x98>)
 800503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	f3bf 8f6f 	isb	sy
}
 8005048:	e001      	b.n	800504e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800504a:	f7ff fa2d 	bl	80044a8 <xTaskResumeAll>
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000c80 	.word	0x20000c80
 800505c:	20000c84 	.word	0x20000c84
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <prvGetNextExpireTime+0x44>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d105      	bne.n	8005096 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <prvGetNextExpireTime+0x44>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e001      	b.n	800509a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000c7c 	.word	0x20000c7c

080050ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050b4:	f7ff fa94 	bl	80045e0 <xTaskGetTickCount>
 80050b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <prvSampleTimeNow+0x3c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d205      	bcs.n	80050d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050c4:	f000 f904 	bl	80052d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050d6:	4a04      	ldr	r2, [pc, #16]	; (80050e8 <prvSampleTimeNow+0x3c>)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050dc:	68fb      	ldr	r3, [r7, #12]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000c8c 	.word	0x20000c8c

080050ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	429a      	cmp	r2, r3
 8005110:	d812      	bhi.n	8005138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e01b      	b.n	800515e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <prvInsertTimerInActiveList+0x7c>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fe fa49 	bl	80035c8 <vListInsert>
 8005136:	e012      	b.n	800515e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d206      	bcs.n	800514e <prvInsertTimerInActiveList+0x62>
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e007      	b.n	800515e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <prvInsertTimerInActiveList+0x80>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7fe fa35 	bl	80035c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000c80 	.word	0x20000c80
 800516c:	20000c7c 	.word	0x20000c7c

08005170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08e      	sub	sp, #56	; 0x38
 8005174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005176:	e099      	b.n	80052ac <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da17      	bge.n	80051ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	3304      	adds	r3, #4
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <prvProcessReceivedCommands+0x2e>
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	e7fe      	b.n	800519c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a4:	6850      	ldr	r0, [r2, #4]
 80051a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a8:	6892      	ldr	r2, [r2, #8]
 80051aa:	4611      	mov	r1, r2
 80051ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db7a      	blt.n	80052aa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fe fa37 	bl	8003638 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051ca:	463b      	mov	r3, r7
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff ff6d 	bl	80050ac <prvSampleTimeNow>
 80051d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	d868      	bhi.n	80052ac <prvProcessReceivedCommands+0x13c>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <prvProcessReceivedCommands+0x70>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005209 	.word	0x08005209
 80051ec:	080052ad 	.word	0x080052ad
 80051f0:	08005263 	.word	0x08005263
 80051f4:	08005299 	.word	0x08005299
 80051f8:	08005209 	.word	0x08005209
 80051fc:	08005209 	.word	0x08005209
 8005200:	080052ad 	.word	0x080052ad
 8005204:	08005263 	.word	0x08005263
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	18d1      	adds	r1, r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f7ff ff69 	bl	80050ec <prvInsertTimerInActiveList>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d045      	beq.n	80052ac <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005226:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d13d      	bne.n	80052ac <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	441a      	add	r2, r3
 8005238:	2300      	movs	r3, #0
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	2100      	movs	r1, #0
 8005240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005242:	f7ff fe23 	bl	8004e8c <xTimerGenericCommand>
 8005246:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d12e      	bne.n	80052ac <prvProcessReceivedCommands+0x13c>
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	e7fe      	b.n	8005260 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <prvProcessReceivedCommands+0x114>
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e7fe      	b.n	8005282 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	18d1      	adds	r1, r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005292:	f7ff ff2b 	bl	80050ec <prvInsertTimerInActiveList>
					break;
 8005296:	e009      	b.n	80052ac <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80052a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a4:	f000 fb58 	bl	8005958 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052a8:	e000      	b.n	80052ac <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80052aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <prvProcessReceivedCommands+0x15c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1d39      	adds	r1, r7, #4
 80052b2:	2200      	movs	r2, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fc75 	bl	8003ba4 <xQueueReceive>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f47f af5b 	bne.w	8005178 <prvProcessReceivedCommands+0x8>
	}
}
 80052c2:	bf00      	nop
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000c84 	.word	0x20000c84

080052d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052d6:	e044      	b.n	8005362 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <prvSwitchTimerLists+0xb8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052e2:	4b29      	ldr	r3, [pc, #164]	; (8005388 <prvSwitchTimerLists+0xb8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe f9a1 	bl	8003638 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d12d      	bne.n	8005362 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4413      	add	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	429a      	cmp	r2, r3
 8005316:	d90e      	bls.n	8005336 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005324:	4b18      	ldr	r3, [pc, #96]	; (8005388 <prvSwitchTimerLists+0xb8>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fe f94a 	bl	80035c8 <vListInsert>
 8005334:	e015      	b.n	8005362 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005336:	2300      	movs	r3, #0
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	2100      	movs	r1, #0
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff fda3 	bl	8004e8c <xTimerGenericCommand>
 8005346:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <prvSwitchTimerLists+0x92>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	e7fe      	b.n	8005360 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <prvSwitchTimerLists+0xb8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1b5      	bne.n	80052d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <prvSwitchTimerLists+0xb8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <prvSwitchTimerLists+0xbc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <prvSwitchTimerLists+0xb8>)
 8005378:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800537a:	4a04      	ldr	r2, [pc, #16]	; (800538c <prvSwitchTimerLists+0xbc>)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000c7c 	.word	0x20000c7c
 800538c:	20000c80 	.word	0x20000c80

08005390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005396:	f000 f927 	bl	80055e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <prvCheckForValidListAndQueue+0x60>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d120      	bne.n	80053e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053a2:	4814      	ldr	r0, [pc, #80]	; (80053f4 <prvCheckForValidListAndQueue+0x64>)
 80053a4:	f7fe f8c2 	bl	800352c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053a8:	4813      	ldr	r0, [pc, #76]	; (80053f8 <prvCheckForValidListAndQueue+0x68>)
 80053aa:	f7fe f8bf 	bl	800352c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <prvCheckForValidListAndQueue+0x6c>)
 80053b0:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <prvCheckForValidListAndQueue+0x64>)
 80053b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053b4:	4b12      	ldr	r3, [pc, #72]	; (8005400 <prvCheckForValidListAndQueue+0x70>)
 80053b6:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <prvCheckForValidListAndQueue+0x68>)
 80053b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053ba:	2300      	movs	r3, #0
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <prvCheckForValidListAndQueue+0x74>)
 80053c0:	4a11      	ldr	r2, [pc, #68]	; (8005408 <prvCheckForValidListAndQueue+0x78>)
 80053c2:	2110      	movs	r1, #16
 80053c4:	200a      	movs	r0, #10
 80053c6:	f7fe f9c9 	bl	800375c <xQueueGenericCreateStatic>
 80053ca:	4602      	mov	r2, r0
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <prvCheckForValidListAndQueue+0x60>)
 80053ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <prvCheckForValidListAndQueue+0x60>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <prvCheckForValidListAndQueue+0x60>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	490b      	ldr	r1, [pc, #44]	; (800540c <prvCheckForValidListAndQueue+0x7c>)
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe fdcc 	bl	8003f7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053e4:	f000 f92e 	bl	8005644 <vPortExitCritical>
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000c84 	.word	0x20000c84
 80053f4:	20000c54 	.word	0x20000c54
 80053f8:	20000c68 	.word	0x20000c68
 80053fc:	20000c7c 	.word	0x20000c7c
 8005400:	20000c80 	.word	0x20000c80
 8005404:	20000d30 	.word	0x20000d30
 8005408:	20000c90 	.word	0x20000c90
 800540c:	08006a54 	.word	0x08006a54

08005410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3b04      	subs	r3, #4
 8005420:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b04      	subs	r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3b04      	subs	r3, #4
 800543e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <pxPortInitialiseStack+0x54>)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3b14      	subs	r3, #20
 800544a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b20      	subs	r3, #32
 8005456:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	08005469 	.word	0x08005469

08005468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <prvTaskExitError+0x4c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800547a:	d009      	beq.n	8005490 <prvTaskExitError+0x28>
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e7fe      	b.n	800548e <prvTaskExitError+0x26>
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054a2:	bf00      	nop
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0fc      	beq.n	80054a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	2000000c 	.word	0x2000000c
	...

080054c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <pxCurrentTCBConst2>)
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	6808      	ldr	r0, [r1, #0]
 80054c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054ca:	f380 8809 	msr	PSP, r0
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f04f 0000 	mov.w	r0, #0
 80054d6:	f380 8811 	msr	BASEPRI, r0
 80054da:	f04e 0e0d 	orr.w	lr, lr, #13
 80054de:	4770      	bx	lr

080054e0 <pxCurrentTCBConst2>:
 80054e0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop

080054e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054e8:	4806      	ldr	r0, [pc, #24]	; (8005504 <prvPortStartFirstTask+0x1c>)
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	6800      	ldr	r0, [r0, #0]
 80054ee:	f380 8808 	msr	MSP, r0
 80054f2:	b662      	cpsie	i
 80054f4:	b661      	cpsie	f
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	df00      	svc	0
 8005500:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005502:	bf00      	nop
 8005504:	e000ed08 	.word	0xe000ed08

08005508 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <xPortStartScheduler+0xcc>)
 8005510:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	22ff      	movs	r2, #255	; 0xff
 800551e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005530:	b2da      	uxtb	r2, r3
 8005532:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <xPortStartScheduler+0xd0>)
 8005534:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <xPortStartScheduler+0xd4>)
 8005538:	2207      	movs	r2, #7
 800553a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800553c:	e009      	b.n	8005552 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <xPortStartScheduler+0xd4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3b01      	subs	r3, #1
 8005544:	4a25      	ldr	r2, [pc, #148]	; (80055dc <xPortStartScheduler+0xd4>)
 8005546:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	b2db      	uxtb	r3, r3
 8005550:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b80      	cmp	r3, #128	; 0x80
 800555c:	d0ef      	beq.n	800553e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <xPortStartScheduler+0xd4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1c3 0307 	rsb	r3, r3, #7
 8005566:	2b04      	cmp	r3, #4
 8005568:	d009      	beq.n	800557e <xPortStartScheduler+0x76>
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	e7fe      	b.n	800557c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800557e:	4b17      	ldr	r3, [pc, #92]	; (80055dc <xPortStartScheduler+0xd4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	4a15      	ldr	r2, [pc, #84]	; (80055dc <xPortStartScheduler+0xd4>)
 8005586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005588:	4b14      	ldr	r3, [pc, #80]	; (80055dc <xPortStartScheduler+0xd4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005590:	4a12      	ldr	r2, [pc, #72]	; (80055dc <xPortStartScheduler+0xd4>)
 8005592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <xPortStartScheduler+0xd8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <xPortStartScheduler+0xd8>)
 80055a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055a8:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <xPortStartScheduler+0xd8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <xPortStartScheduler+0xd8>)
 80055ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055b4:	f000 f8b0 	bl	8005718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <xPortStartScheduler+0xdc>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055be:	f7ff ff93 	bl	80054e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055c2:	f7ff f8d9 	bl	8004778 <vTaskSwitchContext>
	prvTaskExitError();
 80055c6:	f7ff ff4f 	bl	8005468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	e000e400 	.word	0xe000e400
 80055d8:	20000d80 	.word	0x20000d80
 80055dc:	20000d84 	.word	0x20000d84
 80055e0:	e000ed20 	.word	0xe000ed20
 80055e4:	2000000c 	.word	0x2000000c

080055e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <vPortEnterCritical+0x54>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	4a0d      	ldr	r2, [pc, #52]	; (800563c <vPortEnterCritical+0x54>)
 8005608:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <vPortEnterCritical+0x54>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10e      	bne.n	8005630 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <vPortEnterCritical+0x58>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <vPortEnterCritical+0x48>
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	e7fe      	b.n	800562e <vPortEnterCritical+0x46>
	}
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000000c 	.word	0x2000000c
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800564a:	4b10      	ldr	r3, [pc, #64]	; (800568c <vPortExitCritical+0x48>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <vPortExitCritical+0x22>
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	e7fe      	b.n	8005664 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <vPortExitCritical+0x48>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3b01      	subs	r3, #1
 800566c:	4a07      	ldr	r2, [pc, #28]	; (800568c <vPortExitCritical+0x48>)
 800566e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <vPortExitCritical+0x48>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <vPortExitCritical+0x3e>
 8005678:	2300      	movs	r3, #0
 800567a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c

08005690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005690:	f3ef 8009 	mrs	r0, PSP
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <pxCurrentTCBConst>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056a0:	6010      	str	r0, [r2, #0]
 80056a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056aa:	f380 8811 	msr	BASEPRI, r0
 80056ae:	f7ff f863 	bl	8004778 <vTaskSwitchContext>
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056c6:	f380 8809 	msr	PSP, r0
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	4770      	bx	lr

080056d0 <pxCurrentTCBConst>:
 80056d0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop

080056d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056f0:	f7fe ff84 	bl	80045fc <xTaskIncrementTick>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <SysTick_Handler+0x3c>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <vPortSetupTimerInterrupt+0x30>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <vPortSetupTimerInterrupt+0x34>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005728:	4b09      	ldr	r3, [pc, #36]	; (8005750 <vPortSetupTimerInterrupt+0x38>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a09      	ldr	r2, [pc, #36]	; (8005754 <vPortSetupTimerInterrupt+0x3c>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	099b      	lsrs	r3, r3, #6
 8005734:	4a08      	ldr	r2, [pc, #32]	; (8005758 <vPortSetupTimerInterrupt+0x40>)
 8005736:	3b01      	subs	r3, #1
 8005738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800573a:	4b03      	ldr	r3, [pc, #12]	; (8005748 <vPortSetupTimerInterrupt+0x30>)
 800573c:	2207      	movs	r2, #7
 800573e:	601a      	str	r2, [r3, #0]
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	e000e010 	.word	0xe000e010
 800574c:	e000e018 	.word	0xe000e018
 8005750:	20000000 	.word	0x20000000
 8005754:	10624dd3 	.word	0x10624dd3
 8005758:	e000e014 	.word	0xe000e014

0800575c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005762:	f3ef 8305 	mrs	r3, IPSR
 8005766:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d913      	bls.n	8005796 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800576e:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <vPortValidateInterruptPriority+0x68>)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <vPortValidateInterruptPriority+0x6c>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	7afa      	ldrb	r2, [r7, #11]
 800577e:	429a      	cmp	r2, r3
 8005780:	d209      	bcs.n	8005796 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	e7fe      	b.n	8005794 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005796:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <vPortValidateInterruptPriority+0x70>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <vPortValidateInterruptPriority+0x74>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d909      	bls.n	80057ba <vPortValidateInterruptPriority+0x5e>
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	e7fe      	b.n	80057b8 <vPortValidateInterruptPriority+0x5c>
	}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	e000e3f0 	.word	0xe000e3f0
 80057c8:	20000d80 	.word	0x20000d80
 80057cc:	e000ed0c 	.word	0xe000ed0c
 80057d0:	20000d84 	.word	0x20000d84

080057d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057e0:	f7fe fe54 	bl	800448c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057e4:	4b57      	ldr	r3, [pc, #348]	; (8005944 <pvPortMalloc+0x170>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057ec:	f000 f90c 	bl	8005a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057f0:	4b55      	ldr	r3, [pc, #340]	; (8005948 <pvPortMalloc+0x174>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f040 808c 	bne.w	8005916 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01c      	beq.n	800583e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005804:	2208      	movs	r2, #8
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4413      	add	r3, r2
 800580a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b00      	cmp	r3, #0
 8005814:	d013      	beq.n	800583e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	3308      	adds	r3, #8
 800581e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <pvPortMalloc+0x6a>
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e7fe      	b.n	800583c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d068      	beq.n	8005916 <pvPortMalloc+0x142>
 8005844:	4b41      	ldr	r3, [pc, #260]	; (800594c <pvPortMalloc+0x178>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	d863      	bhi.n	8005916 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800584e:	4b40      	ldr	r3, [pc, #256]	; (8005950 <pvPortMalloc+0x17c>)
 8005850:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005852:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <pvPortMalloc+0x17c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005858:	e004      	b.n	8005864 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d903      	bls.n	8005876 <pvPortMalloc+0xa2>
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f1      	bne.n	800585a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <pvPortMalloc+0x170>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587c:	429a      	cmp	r2, r3
 800587e:	d04a      	beq.n	8005916 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2208      	movs	r2, #8
 8005886:	4413      	add	r3, r2
 8005888:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	1ad2      	subs	r2, r2, r3
 800589a:	2308      	movs	r3, #8
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	429a      	cmp	r2, r3
 80058a0:	d91e      	bls.n	80058e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <pvPortMalloc+0xf4>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e7fe      	b.n	80058c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058da:	69b8      	ldr	r0, [r7, #24]
 80058dc:	f000 f8f6 	bl	8005acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e0:	4b1a      	ldr	r3, [pc, #104]	; (800594c <pvPortMalloc+0x178>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	4a18      	ldr	r2, [pc, #96]	; (800594c <pvPortMalloc+0x178>)
 80058ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ee:	4b17      	ldr	r3, [pc, #92]	; (800594c <pvPortMalloc+0x178>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b18      	ldr	r3, [pc, #96]	; (8005954 <pvPortMalloc+0x180>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d203      	bcs.n	8005902 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058fa:	4b14      	ldr	r3, [pc, #80]	; (800594c <pvPortMalloc+0x178>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <pvPortMalloc+0x180>)
 8005900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <pvPortMalloc+0x174>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	431a      	orrs	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005916:	f7fe fdc7 	bl	80044a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <pvPortMalloc+0x164>
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e7fe      	b.n	8005936 <pvPortMalloc+0x162>
	return pvReturn;
 8005938:	69fb      	ldr	r3, [r7, #28]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3728      	adds	r7, #40	; 0x28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20001990 	.word	0x20001990
 8005948:	2000199c 	.word	0x2000199c
 800594c:	20001994 	.word	0x20001994
 8005950:	20001988 	.word	0x20001988
 8005954:	20001998 	.word	0x20001998

08005958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d046      	beq.n	80059f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800596a:	2308      	movs	r3, #8
 800596c:	425b      	negs	r3, r3
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4413      	add	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <vPortFree+0xa8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4013      	ands	r3, r2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <vPortFree+0x42>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e7fe      	b.n	8005998 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <vPortFree+0x5e>
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	e7fe      	b.n	80059b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <vPortFree+0xa8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d019      	beq.n	80059f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d115      	bne.n	80059f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortFree+0xa8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	401a      	ands	r2, r3
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059dc:	f7fe fd56 	bl	800448c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	4b07      	ldr	r3, [pc, #28]	; (8005a04 <vPortFree+0xac>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4413      	add	r3, r2
 80059ea:	4a06      	ldr	r2, [pc, #24]	; (8005a04 <vPortFree+0xac>)
 80059ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ee:	6938      	ldr	r0, [r7, #16]
 80059f0:	f000 f86c 	bl	8005acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059f4:	f7fe fd58 	bl	80044a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059f8:	bf00      	nop
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	2000199c 	.word	0x2000199c
 8005a04:	20001994 	.word	0x20001994

08005a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <prvHeapInit+0xac>)
 8005a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3307      	adds	r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0307 	bic.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <prvHeapInit+0xac>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a40:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <prvHeapInit+0xb0>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a46:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <prvHeapInit+0xb0>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a54:	2208      	movs	r2, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0307 	bic.w	r3, r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a15      	ldr	r2, [pc, #84]	; (8005abc <prvHeapInit+0xb4>)
 8005a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <prvHeapInit+0xb4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <prvHeapInit+0xb4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	1ad2      	subs	r2, r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <prvHeapInit+0xb4>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <prvHeapInit+0xb8>)
 8005a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <prvHeapInit+0xbc>)
 8005a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aa0:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <prvHeapInit+0xc0>)
 8005aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005aa6:	601a      	str	r2, [r3, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000d88 	.word	0x20000d88
 8005ab8:	20001988 	.word	0x20001988
 8005abc:	20001990 	.word	0x20001990
 8005ac0:	20001998 	.word	0x20001998
 8005ac4:	20001994 	.word	0x20001994
 8005ac8:	2000199c 	.word	0x2000199c

08005acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ad4:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <prvInsertBlockIntoFreeList+0xa8>)
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	e002      	b.n	8005ae0 <prvInsertBlockIntoFreeList+0x14>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d8f7      	bhi.n	8005ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	4413      	add	r3, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d108      	bne.n	8005b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	441a      	add	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	441a      	add	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d118      	bne.n	8005b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <prvInsertBlockIntoFreeList+0xac>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d00d      	beq.n	8005b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	e008      	b.n	8005b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <prvInsertBlockIntoFreeList+0xac>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e003      	b.n	8005b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d002      	beq.n	8005b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	20001988 	.word	0x20001988
 8005b78:	20001990 	.word	0x20001990

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	; (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000010 	.word	0x20000010

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	4e0c      	ldr	r6, [pc, #48]	; (8005bc0 <__libc_init_array+0x38>)
 8005b8e:	4c0d      	ldr	r4, [pc, #52]	; (8005bc4 <__libc_init_array+0x3c>)
 8005b90:	1ba4      	subs	r4, r4, r6
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	42a5      	cmp	r5, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	f000 ff1c 	bl	80069d4 <_init>
 8005b9c:	2500      	movs	r5, #0
 8005b9e:	4e0a      	ldr	r6, [pc, #40]	; (8005bc8 <__libc_init_array+0x40>)
 8005ba0:	4c0a      	ldr	r4, [pc, #40]	; (8005bcc <__libc_init_array+0x44>)
 8005ba2:	1ba4      	subs	r4, r4, r6
 8005ba4:	10a4      	asrs	r4, r4, #2
 8005ba6:	42a5      	cmp	r5, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bb0:	4798      	blx	r3
 8005bb2:	3501      	adds	r5, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bba:	4798      	blx	r3
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	08006b54 	.word	0x08006b54
 8005bc4:	08006b54 	.word	0x08006b54
 8005bc8:	08006b54 	.word	0x08006b54
 8005bcc:	08006b58 	.word	0x08006b58

08005bd0 <memcpy>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	1e43      	subs	r3, r0, #1
 8005bd4:	440a      	add	r2, r1
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	d100      	bne.n	8005bdc <memcpy+0xc>
 8005bda:	bd10      	pop	{r4, pc}
 8005bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be4:	e7f7      	b.n	8005bd6 <memcpy+0x6>

08005be6 <memset>:
 8005be6:	4603      	mov	r3, r0
 8005be8:	4402      	add	r2, r0
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d100      	bne.n	8005bf0 <memset+0xa>
 8005bee:	4770      	bx	lr
 8005bf0:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf4:	e7f9      	b.n	8005bea <memset+0x4>
	...

08005bf8 <iprintf>:
 8005bf8:	b40f      	push	{r0, r1, r2, r3}
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <iprintf+0x2c>)
 8005bfc:	b513      	push	{r0, r1, r4, lr}
 8005bfe:	681c      	ldr	r4, [r3, #0]
 8005c00:	b124      	cbz	r4, 8005c0c <iprintf+0x14>
 8005c02:	69a3      	ldr	r3, [r4, #24]
 8005c04:	b913      	cbnz	r3, 8005c0c <iprintf+0x14>
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 f84e 	bl	8005ca8 <__sinit>
 8005c0c:	ab05      	add	r3, sp, #20
 8005c0e:	9a04      	ldr	r2, [sp, #16]
 8005c10:	68a1      	ldr	r1, [r4, #8]
 8005c12:	4620      	mov	r0, r4
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	f000 f953 	bl	8005ec0 <_vfiprintf_r>
 8005c1a:	b002      	add	sp, #8
 8005c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c20:	b004      	add	sp, #16
 8005c22:	4770      	bx	lr
 8005c24:	20000010 	.word	0x20000010

08005c28 <std>:
 8005c28:	2300      	movs	r3, #0
 8005c2a:	b510      	push	{r4, lr}
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c32:	6083      	str	r3, [r0, #8]
 8005c34:	8181      	strh	r1, [r0, #12]
 8005c36:	6643      	str	r3, [r0, #100]	; 0x64
 8005c38:	81c2      	strh	r2, [r0, #14]
 8005c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c3e:	6183      	str	r3, [r0, #24]
 8005c40:	4619      	mov	r1, r3
 8005c42:	2208      	movs	r2, #8
 8005c44:	305c      	adds	r0, #92	; 0x5c
 8005c46:	f7ff ffce 	bl	8005be6 <memset>
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <std+0x38>)
 8005c4c:	6224      	str	r4, [r4, #32]
 8005c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8005c50:	4b04      	ldr	r3, [pc, #16]	; (8005c64 <std+0x3c>)
 8005c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c54:	4b04      	ldr	r3, [pc, #16]	; (8005c68 <std+0x40>)
 8005c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <std+0x44>)
 8005c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c5c:	bd10      	pop	{r4, pc}
 8005c5e:	bf00      	nop
 8005c60:	0800641d 	.word	0x0800641d
 8005c64:	0800643f 	.word	0x0800643f
 8005c68:	08006477 	.word	0x08006477
 8005c6c:	0800649b 	.word	0x0800649b

08005c70 <_cleanup_r>:
 8005c70:	4901      	ldr	r1, [pc, #4]	; (8005c78 <_cleanup_r+0x8>)
 8005c72:	f000 b885 	b.w	8005d80 <_fwalk_reent>
 8005c76:	bf00      	nop
 8005c78:	08006775 	.word	0x08006775

08005c7c <__sfmoreglue>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	2568      	movs	r5, #104	; 0x68
 8005c80:	1e4a      	subs	r2, r1, #1
 8005c82:	4355      	muls	r5, r2
 8005c84:	460e      	mov	r6, r1
 8005c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c8a:	f000 f897 	bl	8005dbc <_malloc_r>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	b140      	cbz	r0, 8005ca4 <__sfmoreglue+0x28>
 8005c92:	2100      	movs	r1, #0
 8005c94:	e9c0 1600 	strd	r1, r6, [r0]
 8005c98:	300c      	adds	r0, #12
 8005c9a:	60a0      	str	r0, [r4, #8]
 8005c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ca0:	f7ff ffa1 	bl	8005be6 <memset>
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}

08005ca8 <__sinit>:
 8005ca8:	6983      	ldr	r3, [r0, #24]
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	bb33      	cbnz	r3, 8005cfe <__sinit+0x56>
 8005cb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005cb4:	6503      	str	r3, [r0, #80]	; 0x50
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <__sinit+0x58>)
 8005cb8:	4a12      	ldr	r2, [pc, #72]	; (8005d04 <__sinit+0x5c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6282      	str	r2, [r0, #40]	; 0x28
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	bf04      	itt	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	6183      	streq	r3, [r0, #24]
 8005cc6:	f000 f81f 	bl	8005d08 <__sfp>
 8005cca:	6060      	str	r0, [r4, #4]
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f81b 	bl	8005d08 <__sfp>
 8005cd2:	60a0      	str	r0, [r4, #8]
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 f817 	bl	8005d08 <__sfp>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60e0      	str	r0, [r4, #12]
 8005cde:	2104      	movs	r1, #4
 8005ce0:	6860      	ldr	r0, [r4, #4]
 8005ce2:	f7ff ffa1 	bl	8005c28 <std>
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2109      	movs	r1, #9
 8005cea:	68a0      	ldr	r0, [r4, #8]
 8005cec:	f7ff ff9c 	bl	8005c28 <std>
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	2112      	movs	r1, #18
 8005cf4:	68e0      	ldr	r0, [r4, #12]
 8005cf6:	f7ff ff97 	bl	8005c28 <std>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	61a3      	str	r3, [r4, #24]
 8005cfe:	bd10      	pop	{r4, pc}
 8005d00:	08006abc 	.word	0x08006abc
 8005d04:	08005c71 	.word	0x08005c71

08005d08 <__sfp>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <__sfp+0x70>)
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	681e      	ldr	r6, [r3, #0]
 8005d10:	69b3      	ldr	r3, [r6, #24]
 8005d12:	b913      	cbnz	r3, 8005d1a <__sfp+0x12>
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff ffc7 	bl	8005ca8 <__sinit>
 8005d1a:	3648      	adds	r6, #72	; 0x48
 8005d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	d503      	bpl.n	8005d2c <__sfp+0x24>
 8005d24:	6833      	ldr	r3, [r6, #0]
 8005d26:	b133      	cbz	r3, 8005d36 <__sfp+0x2e>
 8005d28:	6836      	ldr	r6, [r6, #0]
 8005d2a:	e7f7      	b.n	8005d1c <__sfp+0x14>
 8005d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d30:	b16d      	cbz	r5, 8005d4e <__sfp+0x46>
 8005d32:	3468      	adds	r4, #104	; 0x68
 8005d34:	e7f4      	b.n	8005d20 <__sfp+0x18>
 8005d36:	2104      	movs	r1, #4
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ff9f 	bl	8005c7c <__sfmoreglue>
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1f1      	bne.n	8005d28 <__sfp+0x20>
 8005d44:	230c      	movs	r3, #12
 8005d46:	4604      	mov	r4, r0
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <__sfp+0x74>)
 8005d50:	6665      	str	r5, [r4, #100]	; 0x64
 8005d52:	e9c4 5500 	strd	r5, r5, [r4]
 8005d56:	60a5      	str	r5, [r4, #8]
 8005d58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d60:	2208      	movs	r2, #8
 8005d62:	4629      	mov	r1, r5
 8005d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d68:	f7ff ff3d 	bl	8005be6 <memset>
 8005d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d74:	e7e9      	b.n	8005d4a <__sfp+0x42>
 8005d76:	bf00      	nop
 8005d78:	08006abc 	.word	0x08006abc
 8005d7c:	ffff0001 	.word	0xffff0001

08005d80 <_fwalk_reent>:
 8005d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d84:	4680      	mov	r8, r0
 8005d86:	4689      	mov	r9, r1
 8005d88:	2600      	movs	r6, #0
 8005d8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d8e:	b914      	cbnz	r4, 8005d96 <_fwalk_reent+0x16>
 8005d90:	4630      	mov	r0, r6
 8005d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d9a:	3f01      	subs	r7, #1
 8005d9c:	d501      	bpl.n	8005da2 <_fwalk_reent+0x22>
 8005d9e:	6824      	ldr	r4, [r4, #0]
 8005da0:	e7f5      	b.n	8005d8e <_fwalk_reent+0xe>
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d907      	bls.n	8005db8 <_fwalk_reent+0x38>
 8005da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dac:	3301      	adds	r3, #1
 8005dae:	d003      	beq.n	8005db8 <_fwalk_reent+0x38>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4640      	mov	r0, r8
 8005db4:	47c8      	blx	r9
 8005db6:	4306      	orrs	r6, r0
 8005db8:	3568      	adds	r5, #104	; 0x68
 8005dba:	e7ee      	b.n	8005d9a <_fwalk_reent+0x1a>

08005dbc <_malloc_r>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	1ccd      	adds	r5, r1, #3
 8005dc0:	f025 0503 	bic.w	r5, r5, #3
 8005dc4:	3508      	adds	r5, #8
 8005dc6:	2d0c      	cmp	r5, #12
 8005dc8:	bf38      	it	cc
 8005dca:	250c      	movcc	r5, #12
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	4606      	mov	r6, r0
 8005dd0:	db01      	blt.n	8005dd6 <_malloc_r+0x1a>
 8005dd2:	42a9      	cmp	r1, r5
 8005dd4:	d903      	bls.n	8005dde <_malloc_r+0x22>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	6033      	str	r3, [r6, #0]
 8005dda:	2000      	movs	r0, #0
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
 8005dde:	f000 fd77 	bl	80068d0 <__malloc_lock>
 8005de2:	4a21      	ldr	r2, [pc, #132]	; (8005e68 <_malloc_r+0xac>)
 8005de4:	6814      	ldr	r4, [r2, #0]
 8005de6:	4621      	mov	r1, r4
 8005de8:	b991      	cbnz	r1, 8005e10 <_malloc_r+0x54>
 8005dea:	4c20      	ldr	r4, [pc, #128]	; (8005e6c <_malloc_r+0xb0>)
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	b91b      	cbnz	r3, 8005df8 <_malloc_r+0x3c>
 8005df0:	4630      	mov	r0, r6
 8005df2:	f000 fb03 	bl	80063fc <_sbrk_r>
 8005df6:	6020      	str	r0, [r4, #0]
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f000 fafe 	bl	80063fc <_sbrk_r>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d124      	bne.n	8005e4e <_malloc_r+0x92>
 8005e04:	230c      	movs	r3, #12
 8005e06:	4630      	mov	r0, r6
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	f000 fd62 	bl	80068d2 <__malloc_unlock>
 8005e0e:	e7e4      	b.n	8005dda <_malloc_r+0x1e>
 8005e10:	680b      	ldr	r3, [r1, #0]
 8005e12:	1b5b      	subs	r3, r3, r5
 8005e14:	d418      	bmi.n	8005e48 <_malloc_r+0x8c>
 8005e16:	2b0b      	cmp	r3, #11
 8005e18:	d90f      	bls.n	8005e3a <_malloc_r+0x7e>
 8005e1a:	600b      	str	r3, [r1, #0]
 8005e1c:	18cc      	adds	r4, r1, r3
 8005e1e:	50cd      	str	r5, [r1, r3]
 8005e20:	4630      	mov	r0, r6
 8005e22:	f000 fd56 	bl	80068d2 <__malloc_unlock>
 8005e26:	f104 000b 	add.w	r0, r4, #11
 8005e2a:	1d23      	adds	r3, r4, #4
 8005e2c:	f020 0007 	bic.w	r0, r0, #7
 8005e30:	1ac3      	subs	r3, r0, r3
 8005e32:	d0d3      	beq.n	8005ddc <_malloc_r+0x20>
 8005e34:	425a      	negs	r2, r3
 8005e36:	50e2      	str	r2, [r4, r3]
 8005e38:	e7d0      	b.n	8005ddc <_malloc_r+0x20>
 8005e3a:	684b      	ldr	r3, [r1, #4]
 8005e3c:	428c      	cmp	r4, r1
 8005e3e:	bf16      	itet	ne
 8005e40:	6063      	strne	r3, [r4, #4]
 8005e42:	6013      	streq	r3, [r2, #0]
 8005e44:	460c      	movne	r4, r1
 8005e46:	e7eb      	b.n	8005e20 <_malloc_r+0x64>
 8005e48:	460c      	mov	r4, r1
 8005e4a:	6849      	ldr	r1, [r1, #4]
 8005e4c:	e7cc      	b.n	8005de8 <_malloc_r+0x2c>
 8005e4e:	1cc4      	adds	r4, r0, #3
 8005e50:	f024 0403 	bic.w	r4, r4, #3
 8005e54:	42a0      	cmp	r0, r4
 8005e56:	d005      	beq.n	8005e64 <_malloc_r+0xa8>
 8005e58:	1a21      	subs	r1, r4, r0
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f000 face 	bl	80063fc <_sbrk_r>
 8005e60:	3001      	adds	r0, #1
 8005e62:	d0cf      	beq.n	8005e04 <_malloc_r+0x48>
 8005e64:	6025      	str	r5, [r4, #0]
 8005e66:	e7db      	b.n	8005e20 <_malloc_r+0x64>
 8005e68:	200019a0 	.word	0x200019a0
 8005e6c:	200019a4 	.word	0x200019a4

08005e70 <__sfputc_r>:
 8005e70:	6893      	ldr	r3, [r2, #8]
 8005e72:	b410      	push	{r4}
 8005e74:	3b01      	subs	r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	6093      	str	r3, [r2, #8]
 8005e7a:	da07      	bge.n	8005e8c <__sfputc_r+0x1c>
 8005e7c:	6994      	ldr	r4, [r2, #24]
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	db01      	blt.n	8005e86 <__sfputc_r+0x16>
 8005e82:	290a      	cmp	r1, #10
 8005e84:	d102      	bne.n	8005e8c <__sfputc_r+0x1c>
 8005e86:	bc10      	pop	{r4}
 8005e88:	f000 bb0c 	b.w	80064a4 <__swbuf_r>
 8005e8c:	6813      	ldr	r3, [r2, #0]
 8005e8e:	1c58      	adds	r0, r3, #1
 8005e90:	6010      	str	r0, [r2, #0]
 8005e92:	7019      	strb	r1, [r3, #0]
 8005e94:	4608      	mov	r0, r1
 8005e96:	bc10      	pop	{r4}
 8005e98:	4770      	bx	lr

08005e9a <__sfputs_r>:
 8005e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	18d5      	adds	r5, r2, r3
 8005ea4:	42ac      	cmp	r4, r5
 8005ea6:	d101      	bne.n	8005eac <__sfputs_r+0x12>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e007      	b.n	8005ebc <__sfputs_r+0x22>
 8005eac:	463a      	mov	r2, r7
 8005eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff ffdc 	bl	8005e70 <__sfputc_r>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d1f3      	bne.n	8005ea4 <__sfputs_r+0xa>
 8005ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ec0 <_vfiprintf_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	b09d      	sub	sp, #116	; 0x74
 8005ec8:	4617      	mov	r7, r2
 8005eca:	461d      	mov	r5, r3
 8005ecc:	4606      	mov	r6, r0
 8005ece:	b118      	cbz	r0, 8005ed8 <_vfiprintf_r+0x18>
 8005ed0:	6983      	ldr	r3, [r0, #24]
 8005ed2:	b90b      	cbnz	r3, 8005ed8 <_vfiprintf_r+0x18>
 8005ed4:	f7ff fee8 	bl	8005ca8 <__sinit>
 8005ed8:	4b7c      	ldr	r3, [pc, #496]	; (80060cc <_vfiprintf_r+0x20c>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	d158      	bne.n	8005f90 <_vfiprintf_r+0xd0>
 8005ede:	6874      	ldr	r4, [r6, #4]
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	0718      	lsls	r0, r3, #28
 8005ee4:	d55e      	bpl.n	8005fa4 <_vfiprintf_r+0xe4>
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05b      	beq.n	8005fa4 <_vfiprintf_r+0xe4>
 8005eec:	2300      	movs	r3, #0
 8005eee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ef6:	2330      	movs	r3, #48	; 0x30
 8005ef8:	f04f 0b01 	mov.w	fp, #1
 8005efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f00:	9503      	str	r5, [sp, #12]
 8005f02:	46b8      	mov	r8, r7
 8005f04:	4645      	mov	r5, r8
 8005f06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f0a:	b10b      	cbz	r3, 8005f10 <_vfiprintf_r+0x50>
 8005f0c:	2b25      	cmp	r3, #37	; 0x25
 8005f0e:	d154      	bne.n	8005fba <_vfiprintf_r+0xfa>
 8005f10:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f14:	d00b      	beq.n	8005f2e <_vfiprintf_r+0x6e>
 8005f16:	4653      	mov	r3, sl
 8005f18:	463a      	mov	r2, r7
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff ffbc 	bl	8005e9a <__sfputs_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	f000 80c2 	beq.w	80060ac <_vfiprintf_r+0x1ec>
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	4453      	add	r3, sl
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	f898 3000 	ldrb.w	r3, [r8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80ba 	beq.w	80060ac <_vfiprintf_r+0x1ec>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	9307      	str	r3, [sp, #28]
 8005f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f4c:	46a8      	mov	r8, r5
 8005f4e:	2205      	movs	r2, #5
 8005f50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005f54:	485e      	ldr	r0, [pc, #376]	; (80060d0 <_vfiprintf_r+0x210>)
 8005f56:	f000 fcad 	bl	80068b4 <memchr>
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	bb78      	cbnz	r0, 8005fbe <_vfiprintf_r+0xfe>
 8005f5e:	06d9      	lsls	r1, r3, #27
 8005f60:	bf44      	itt	mi
 8005f62:	2220      	movmi	r2, #32
 8005f64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f68:	071a      	lsls	r2, r3, #28
 8005f6a:	bf44      	itt	mi
 8005f6c:	222b      	movmi	r2, #43	; 0x2b
 8005f6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f72:	782a      	ldrb	r2, [r5, #0]
 8005f74:	2a2a      	cmp	r2, #42	; 0x2a
 8005f76:	d02a      	beq.n	8005fce <_vfiprintf_r+0x10e>
 8005f78:	46a8      	mov	r8, r5
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	250a      	movs	r5, #10
 8005f7e:	9a07      	ldr	r2, [sp, #28]
 8005f80:	4641      	mov	r1, r8
 8005f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f86:	3b30      	subs	r3, #48	; 0x30
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d969      	bls.n	8006060 <_vfiprintf_r+0x1a0>
 8005f8c:	b360      	cbz	r0, 8005fe8 <_vfiprintf_r+0x128>
 8005f8e:	e024      	b.n	8005fda <_vfiprintf_r+0x11a>
 8005f90:	4b50      	ldr	r3, [pc, #320]	; (80060d4 <_vfiprintf_r+0x214>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d101      	bne.n	8005f9a <_vfiprintf_r+0xda>
 8005f96:	68b4      	ldr	r4, [r6, #8]
 8005f98:	e7a2      	b.n	8005ee0 <_vfiprintf_r+0x20>
 8005f9a:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <_vfiprintf_r+0x218>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	bf08      	it	eq
 8005fa0:	68f4      	ldreq	r4, [r6, #12]
 8005fa2:	e79d      	b.n	8005ee0 <_vfiprintf_r+0x20>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 fae0 	bl	800656c <__swsetup_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d09d      	beq.n	8005eec <_vfiprintf_r+0x2c>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb4:	b01d      	add	sp, #116	; 0x74
 8005fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fba:	46a8      	mov	r8, r5
 8005fbc:	e7a2      	b.n	8005f04 <_vfiprintf_r+0x44>
 8005fbe:	4a44      	ldr	r2, [pc, #272]	; (80060d0 <_vfiprintf_r+0x210>)
 8005fc0:	4645      	mov	r5, r8
 8005fc2:	1a80      	subs	r0, r0, r2
 8005fc4:	fa0b f000 	lsl.w	r0, fp, r0
 8005fc8:	4318      	orrs	r0, r3
 8005fca:	9004      	str	r0, [sp, #16]
 8005fcc:	e7be      	b.n	8005f4c <_vfiprintf_r+0x8c>
 8005fce:	9a03      	ldr	r2, [sp, #12]
 8005fd0:	1d11      	adds	r1, r2, #4
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	9103      	str	r1, [sp, #12]
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	db01      	blt.n	8005fde <_vfiprintf_r+0x11e>
 8005fda:	9207      	str	r2, [sp, #28]
 8005fdc:	e004      	b.n	8005fe8 <_vfiprintf_r+0x128>
 8005fde:	4252      	negs	r2, r2
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	9207      	str	r2, [sp, #28]
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	f898 3000 	ldrb.w	r3, [r8]
 8005fec:	2b2e      	cmp	r3, #46	; 0x2e
 8005fee:	d10e      	bne.n	800600e <_vfiprintf_r+0x14e>
 8005ff0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff6:	d138      	bne.n	800606a <_vfiprintf_r+0x1aa>
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	f108 0802 	add.w	r8, r8, #2
 8005ffe:	1d1a      	adds	r2, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	9203      	str	r2, [sp, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfb8      	it	lt
 8006008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	4d33      	ldr	r5, [pc, #204]	; (80060dc <_vfiprintf_r+0x21c>)
 8006010:	2203      	movs	r2, #3
 8006012:	f898 1000 	ldrb.w	r1, [r8]
 8006016:	4628      	mov	r0, r5
 8006018:	f000 fc4c 	bl	80068b4 <memchr>
 800601c:	b140      	cbz	r0, 8006030 <_vfiprintf_r+0x170>
 800601e:	2340      	movs	r3, #64	; 0x40
 8006020:	1b40      	subs	r0, r0, r5
 8006022:	fa03 f000 	lsl.w	r0, r3, r0
 8006026:	9b04      	ldr	r3, [sp, #16]
 8006028:	f108 0801 	add.w	r8, r8, #1
 800602c:	4303      	orrs	r3, r0
 800602e:	9304      	str	r3, [sp, #16]
 8006030:	f898 1000 	ldrb.w	r1, [r8]
 8006034:	2206      	movs	r2, #6
 8006036:	482a      	ldr	r0, [pc, #168]	; (80060e0 <_vfiprintf_r+0x220>)
 8006038:	f108 0701 	add.w	r7, r8, #1
 800603c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006040:	f000 fc38 	bl	80068b4 <memchr>
 8006044:	2800      	cmp	r0, #0
 8006046:	d037      	beq.n	80060b8 <_vfiprintf_r+0x1f8>
 8006048:	4b26      	ldr	r3, [pc, #152]	; (80060e4 <_vfiprintf_r+0x224>)
 800604a:	bb1b      	cbnz	r3, 8006094 <_vfiprintf_r+0x1d4>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	3307      	adds	r3, #7
 8006050:	f023 0307 	bic.w	r3, r3, #7
 8006054:	3308      	adds	r3, #8
 8006056:	9303      	str	r3, [sp, #12]
 8006058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605a:	444b      	add	r3, r9
 800605c:	9309      	str	r3, [sp, #36]	; 0x24
 800605e:	e750      	b.n	8005f02 <_vfiprintf_r+0x42>
 8006060:	fb05 3202 	mla	r2, r5, r2, r3
 8006064:	2001      	movs	r0, #1
 8006066:	4688      	mov	r8, r1
 8006068:	e78a      	b.n	8005f80 <_vfiprintf_r+0xc0>
 800606a:	2300      	movs	r3, #0
 800606c:	250a      	movs	r5, #10
 800606e:	4619      	mov	r1, r3
 8006070:	f108 0801 	add.w	r8, r8, #1
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	4640      	mov	r0, r8
 8006078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800607c:	3a30      	subs	r2, #48	; 0x30
 800607e:	2a09      	cmp	r2, #9
 8006080:	d903      	bls.n	800608a <_vfiprintf_r+0x1ca>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0c3      	beq.n	800600e <_vfiprintf_r+0x14e>
 8006086:	9105      	str	r1, [sp, #20]
 8006088:	e7c1      	b.n	800600e <_vfiprintf_r+0x14e>
 800608a:	fb05 2101 	mla	r1, r5, r1, r2
 800608e:	2301      	movs	r3, #1
 8006090:	4680      	mov	r8, r0
 8006092:	e7f0      	b.n	8006076 <_vfiprintf_r+0x1b6>
 8006094:	ab03      	add	r3, sp, #12
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	4622      	mov	r2, r4
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <_vfiprintf_r+0x228>)
 800609c:	a904      	add	r1, sp, #16
 800609e:	4630      	mov	r0, r6
 80060a0:	f3af 8000 	nop.w
 80060a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80060a8:	4681      	mov	r9, r0
 80060aa:	d1d5      	bne.n	8006058 <_vfiprintf_r+0x198>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	065b      	lsls	r3, r3, #25
 80060b0:	f53f af7e 	bmi.w	8005fb0 <_vfiprintf_r+0xf0>
 80060b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060b6:	e77d      	b.n	8005fb4 <_vfiprintf_r+0xf4>
 80060b8:	ab03      	add	r3, sp, #12
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	4622      	mov	r2, r4
 80060be:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <_vfiprintf_r+0x228>)
 80060c0:	a904      	add	r1, sp, #16
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 f888 	bl	80061d8 <_printf_i>
 80060c8:	e7ec      	b.n	80060a4 <_vfiprintf_r+0x1e4>
 80060ca:	bf00      	nop
 80060cc:	08006ae0 	.word	0x08006ae0
 80060d0:	08006b20 	.word	0x08006b20
 80060d4:	08006b00 	.word	0x08006b00
 80060d8:	08006ac0 	.word	0x08006ac0
 80060dc:	08006b26 	.word	0x08006b26
 80060e0:	08006b2a 	.word	0x08006b2a
 80060e4:	00000000 	.word	0x00000000
 80060e8:	08005e9b 	.word	0x08005e9b

080060ec <_printf_common>:
 80060ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f0:	4691      	mov	r9, r2
 80060f2:	461f      	mov	r7, r3
 80060f4:	688a      	ldr	r2, [r1, #8]
 80060f6:	690b      	ldr	r3, [r1, #16]
 80060f8:	4606      	mov	r6, r0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bfb8      	it	lt
 80060fe:	4613      	movlt	r3, r2
 8006100:	f8c9 3000 	str.w	r3, [r9]
 8006104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006108:	460c      	mov	r4, r1
 800610a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800610e:	b112      	cbz	r2, 8006116 <_printf_common+0x2a>
 8006110:	3301      	adds	r3, #1
 8006112:	f8c9 3000 	str.w	r3, [r9]
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	0699      	lsls	r1, r3, #26
 800611a:	bf42      	ittt	mi
 800611c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006120:	3302      	addmi	r3, #2
 8006122:	f8c9 3000 	strmi.w	r3, [r9]
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	f015 0506 	ands.w	r5, r5, #6
 800612c:	d107      	bne.n	800613e <_printf_common+0x52>
 800612e:	f104 0a19 	add.w	sl, r4, #25
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	f8d9 2000 	ldr.w	r2, [r9]
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	42ab      	cmp	r3, r5
 800613c:	dc29      	bgt.n	8006192 <_printf_common+0xa6>
 800613e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	3300      	adds	r3, #0
 8006146:	bf18      	it	ne
 8006148:	2301      	movne	r3, #1
 800614a:	0692      	lsls	r2, r2, #26
 800614c:	d42e      	bmi.n	80061ac <_printf_common+0xc0>
 800614e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006152:	4639      	mov	r1, r7
 8006154:	4630      	mov	r0, r6
 8006156:	47c0      	blx	r8
 8006158:	3001      	adds	r0, #1
 800615a:	d021      	beq.n	80061a0 <_printf_common+0xb4>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	68e5      	ldr	r5, [r4, #12]
 8006160:	f003 0306 	and.w	r3, r3, #6
 8006164:	2b04      	cmp	r3, #4
 8006166:	bf18      	it	ne
 8006168:	2500      	movne	r5, #0
 800616a:	f8d9 2000 	ldr.w	r2, [r9]
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	bf08      	it	eq
 8006174:	1aad      	subeq	r5, r5, r2
 8006176:	68a3      	ldr	r3, [r4, #8]
 8006178:	6922      	ldr	r2, [r4, #16]
 800617a:	bf08      	it	eq
 800617c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006180:	4293      	cmp	r3, r2
 8006182:	bfc4      	itt	gt
 8006184:	1a9b      	subgt	r3, r3, r2
 8006186:	18ed      	addgt	r5, r5, r3
 8006188:	341a      	adds	r4, #26
 800618a:	454d      	cmp	r5, r9
 800618c:	d11a      	bne.n	80061c4 <_printf_common+0xd8>
 800618e:	2000      	movs	r0, #0
 8006190:	e008      	b.n	80061a4 <_printf_common+0xb8>
 8006192:	2301      	movs	r3, #1
 8006194:	4652      	mov	r2, sl
 8006196:	4639      	mov	r1, r7
 8006198:	4630      	mov	r0, r6
 800619a:	47c0      	blx	r8
 800619c:	3001      	adds	r0, #1
 800619e:	d103      	bne.n	80061a8 <_printf_common+0xbc>
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a8:	3501      	adds	r5, #1
 80061aa:	e7c2      	b.n	8006132 <_printf_common+0x46>
 80061ac:	2030      	movs	r0, #48	; 0x30
 80061ae:	18e1      	adds	r1, r4, r3
 80061b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061ba:	4422      	add	r2, r4
 80061bc:	3302      	adds	r3, #2
 80061be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c2:	e7c4      	b.n	800614e <_printf_common+0x62>
 80061c4:	2301      	movs	r3, #1
 80061c6:	4622      	mov	r2, r4
 80061c8:	4639      	mov	r1, r7
 80061ca:	4630      	mov	r0, r6
 80061cc:	47c0      	blx	r8
 80061ce:	3001      	adds	r0, #1
 80061d0:	d0e6      	beq.n	80061a0 <_printf_common+0xb4>
 80061d2:	f109 0901 	add.w	r9, r9, #1
 80061d6:	e7d8      	b.n	800618a <_printf_common+0x9e>

080061d8 <_printf_i>:
 80061d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061e0:	460c      	mov	r4, r1
 80061e2:	7e09      	ldrb	r1, [r1, #24]
 80061e4:	b085      	sub	sp, #20
 80061e6:	296e      	cmp	r1, #110	; 0x6e
 80061e8:	4617      	mov	r7, r2
 80061ea:	4606      	mov	r6, r0
 80061ec:	4698      	mov	r8, r3
 80061ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f0:	f000 80b3 	beq.w	800635a <_printf_i+0x182>
 80061f4:	d822      	bhi.n	800623c <_printf_i+0x64>
 80061f6:	2963      	cmp	r1, #99	; 0x63
 80061f8:	d036      	beq.n	8006268 <_printf_i+0x90>
 80061fa:	d80a      	bhi.n	8006212 <_printf_i+0x3a>
 80061fc:	2900      	cmp	r1, #0
 80061fe:	f000 80b9 	beq.w	8006374 <_printf_i+0x19c>
 8006202:	2958      	cmp	r1, #88	; 0x58
 8006204:	f000 8083 	beq.w	800630e <_printf_i+0x136>
 8006208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800620c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006210:	e032      	b.n	8006278 <_printf_i+0xa0>
 8006212:	2964      	cmp	r1, #100	; 0x64
 8006214:	d001      	beq.n	800621a <_printf_i+0x42>
 8006216:	2969      	cmp	r1, #105	; 0x69
 8006218:	d1f6      	bne.n	8006208 <_printf_i+0x30>
 800621a:	6820      	ldr	r0, [r4, #0]
 800621c:	6813      	ldr	r3, [r2, #0]
 800621e:	0605      	lsls	r5, r0, #24
 8006220:	f103 0104 	add.w	r1, r3, #4
 8006224:	d52a      	bpl.n	800627c <_printf_i+0xa4>
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	da03      	bge.n	8006236 <_printf_i+0x5e>
 800622e:	222d      	movs	r2, #45	; 0x2d
 8006230:	425b      	negs	r3, r3
 8006232:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006236:	486f      	ldr	r0, [pc, #444]	; (80063f4 <_printf_i+0x21c>)
 8006238:	220a      	movs	r2, #10
 800623a:	e039      	b.n	80062b0 <_printf_i+0xd8>
 800623c:	2973      	cmp	r1, #115	; 0x73
 800623e:	f000 809d 	beq.w	800637c <_printf_i+0x1a4>
 8006242:	d808      	bhi.n	8006256 <_printf_i+0x7e>
 8006244:	296f      	cmp	r1, #111	; 0x6f
 8006246:	d020      	beq.n	800628a <_printf_i+0xb2>
 8006248:	2970      	cmp	r1, #112	; 0x70
 800624a:	d1dd      	bne.n	8006208 <_printf_i+0x30>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	f043 0320 	orr.w	r3, r3, #32
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	e003      	b.n	800625e <_printf_i+0x86>
 8006256:	2975      	cmp	r1, #117	; 0x75
 8006258:	d017      	beq.n	800628a <_printf_i+0xb2>
 800625a:	2978      	cmp	r1, #120	; 0x78
 800625c:	d1d4      	bne.n	8006208 <_printf_i+0x30>
 800625e:	2378      	movs	r3, #120	; 0x78
 8006260:	4865      	ldr	r0, [pc, #404]	; (80063f8 <_printf_i+0x220>)
 8006262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006266:	e055      	b.n	8006314 <_printf_i+0x13c>
 8006268:	6813      	ldr	r3, [r2, #0]
 800626a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800626e:	1d19      	adds	r1, r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6011      	str	r1, [r2, #0]
 8006274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006278:	2301      	movs	r3, #1
 800627a:	e08c      	b.n	8006396 <_printf_i+0x1be>
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006282:	6011      	str	r1, [r2, #0]
 8006284:	bf18      	it	ne
 8006286:	b21b      	sxthne	r3, r3
 8006288:	e7cf      	b.n	800622a <_printf_i+0x52>
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	6825      	ldr	r5, [r4, #0]
 800628e:	1d18      	adds	r0, r3, #4
 8006290:	6010      	str	r0, [r2, #0]
 8006292:	0628      	lsls	r0, r5, #24
 8006294:	d501      	bpl.n	800629a <_printf_i+0xc2>
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	e002      	b.n	80062a0 <_printf_i+0xc8>
 800629a:	0668      	lsls	r0, r5, #25
 800629c:	d5fb      	bpl.n	8006296 <_printf_i+0xbe>
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	296f      	cmp	r1, #111	; 0x6f
 80062a2:	bf14      	ite	ne
 80062a4:	220a      	movne	r2, #10
 80062a6:	2208      	moveq	r2, #8
 80062a8:	4852      	ldr	r0, [pc, #328]	; (80063f4 <_printf_i+0x21c>)
 80062aa:	2100      	movs	r1, #0
 80062ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062b0:	6865      	ldr	r5, [r4, #4]
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	60a5      	str	r5, [r4, #8]
 80062b6:	f2c0 8095 	blt.w	80063e4 <_printf_i+0x20c>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	f021 0104 	bic.w	r1, r1, #4
 80062c0:	6021      	str	r1, [r4, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d13d      	bne.n	8006342 <_printf_i+0x16a>
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	f040 808e 	bne.w	80063e8 <_printf_i+0x210>
 80062cc:	4665      	mov	r5, ip
 80062ce:	2a08      	cmp	r2, #8
 80062d0:	d10b      	bne.n	80062ea <_printf_i+0x112>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	07db      	lsls	r3, r3, #31
 80062d6:	d508      	bpl.n	80062ea <_printf_i+0x112>
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	429a      	cmp	r2, r3
 80062de:	bfde      	ittt	le
 80062e0:	2330      	movle	r3, #48	; 0x30
 80062e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062ea:	ebac 0305 	sub.w	r3, ip, r5
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	f8cd 8000 	str.w	r8, [sp]
 80062f4:	463b      	mov	r3, r7
 80062f6:	aa03      	add	r2, sp, #12
 80062f8:	4621      	mov	r1, r4
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff fef6 	bl	80060ec <_printf_common>
 8006300:	3001      	adds	r0, #1
 8006302:	d14d      	bne.n	80063a0 <_printf_i+0x1c8>
 8006304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006308:	b005      	add	sp, #20
 800630a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800630e:	4839      	ldr	r0, [pc, #228]	; (80063f4 <_printf_i+0x21c>)
 8006310:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006314:	6813      	ldr	r3, [r2, #0]
 8006316:	6821      	ldr	r1, [r4, #0]
 8006318:	1d1d      	adds	r5, r3, #4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6015      	str	r5, [r2, #0]
 800631e:	060a      	lsls	r2, r1, #24
 8006320:	d50b      	bpl.n	800633a <_printf_i+0x162>
 8006322:	07ca      	lsls	r2, r1, #31
 8006324:	bf44      	itt	mi
 8006326:	f041 0120 	orrmi.w	r1, r1, #32
 800632a:	6021      	strmi	r1, [r4, #0]
 800632c:	b91b      	cbnz	r3, 8006336 <_printf_i+0x15e>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	f022 0220 	bic.w	r2, r2, #32
 8006334:	6022      	str	r2, [r4, #0]
 8006336:	2210      	movs	r2, #16
 8006338:	e7b7      	b.n	80062aa <_printf_i+0xd2>
 800633a:	064d      	lsls	r5, r1, #25
 800633c:	bf48      	it	mi
 800633e:	b29b      	uxthmi	r3, r3
 8006340:	e7ef      	b.n	8006322 <_printf_i+0x14a>
 8006342:	4665      	mov	r5, ip
 8006344:	fbb3 f1f2 	udiv	r1, r3, r2
 8006348:	fb02 3311 	mls	r3, r2, r1, r3
 800634c:	5cc3      	ldrb	r3, [r0, r3]
 800634e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006352:	460b      	mov	r3, r1
 8006354:	2900      	cmp	r1, #0
 8006356:	d1f5      	bne.n	8006344 <_printf_i+0x16c>
 8006358:	e7b9      	b.n	80062ce <_printf_i+0xf6>
 800635a:	6813      	ldr	r3, [r2, #0]
 800635c:	6825      	ldr	r5, [r4, #0]
 800635e:	1d18      	adds	r0, r3, #4
 8006360:	6961      	ldr	r1, [r4, #20]
 8006362:	6010      	str	r0, [r2, #0]
 8006364:	0628      	lsls	r0, r5, #24
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	d501      	bpl.n	800636e <_printf_i+0x196>
 800636a:	6019      	str	r1, [r3, #0]
 800636c:	e002      	b.n	8006374 <_printf_i+0x19c>
 800636e:	066a      	lsls	r2, r5, #25
 8006370:	d5fb      	bpl.n	800636a <_printf_i+0x192>
 8006372:	8019      	strh	r1, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	4665      	mov	r5, ip
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	e7b9      	b.n	80062f0 <_printf_i+0x118>
 800637c:	6813      	ldr	r3, [r2, #0]
 800637e:	1d19      	adds	r1, r3, #4
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	681d      	ldr	r5, [r3, #0]
 8006384:	6862      	ldr	r2, [r4, #4]
 8006386:	2100      	movs	r1, #0
 8006388:	4628      	mov	r0, r5
 800638a:	f000 fa93 	bl	80068b4 <memchr>
 800638e:	b108      	cbz	r0, 8006394 <_printf_i+0x1bc>
 8006390:	1b40      	subs	r0, r0, r5
 8006392:	6060      	str	r0, [r4, #4]
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	6123      	str	r3, [r4, #16]
 8006398:	2300      	movs	r3, #0
 800639a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800639e:	e7a7      	b.n	80062f0 <_printf_i+0x118>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	462a      	mov	r2, r5
 80063a4:	4639      	mov	r1, r7
 80063a6:	4630      	mov	r0, r6
 80063a8:	47c0      	blx	r8
 80063aa:	3001      	adds	r0, #1
 80063ac:	d0aa      	beq.n	8006304 <_printf_i+0x12c>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	079b      	lsls	r3, r3, #30
 80063b2:	d413      	bmi.n	80063dc <_printf_i+0x204>
 80063b4:	68e0      	ldr	r0, [r4, #12]
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	4298      	cmp	r0, r3
 80063ba:	bfb8      	it	lt
 80063bc:	4618      	movlt	r0, r3
 80063be:	e7a3      	b.n	8006308 <_printf_i+0x130>
 80063c0:	2301      	movs	r3, #1
 80063c2:	464a      	mov	r2, r9
 80063c4:	4639      	mov	r1, r7
 80063c6:	4630      	mov	r0, r6
 80063c8:	47c0      	blx	r8
 80063ca:	3001      	adds	r0, #1
 80063cc:	d09a      	beq.n	8006304 <_printf_i+0x12c>
 80063ce:	3501      	adds	r5, #1
 80063d0:	68e3      	ldr	r3, [r4, #12]
 80063d2:	9a03      	ldr	r2, [sp, #12]
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	42ab      	cmp	r3, r5
 80063d8:	dcf2      	bgt.n	80063c0 <_printf_i+0x1e8>
 80063da:	e7eb      	b.n	80063b4 <_printf_i+0x1dc>
 80063dc:	2500      	movs	r5, #0
 80063de:	f104 0919 	add.w	r9, r4, #25
 80063e2:	e7f5      	b.n	80063d0 <_printf_i+0x1f8>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1ac      	bne.n	8006342 <_printf_i+0x16a>
 80063e8:	7803      	ldrb	r3, [r0, #0]
 80063ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f2:	e76c      	b.n	80062ce <_printf_i+0xf6>
 80063f4:	08006b31 	.word	0x08006b31
 80063f8:	08006b42 	.word	0x08006b42

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	2300      	movs	r3, #0
 8006400:	4c05      	ldr	r4, [pc, #20]	; (8006418 <_sbrk_r+0x1c>)
 8006402:	4605      	mov	r5, r0
 8006404:	4608      	mov	r0, r1
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f7fa fa6a 	bl	80008e0 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20001e3c 	.word	0x20001e3c

0800641c <__sread>:
 800641c:	b510      	push	{r4, lr}
 800641e:	460c      	mov	r4, r1
 8006420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006424:	f000 faa2 	bl	800696c <_read_r>
 8006428:	2800      	cmp	r0, #0
 800642a:	bfab      	itete	ge
 800642c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800642e:	89a3      	ldrhlt	r3, [r4, #12]
 8006430:	181b      	addge	r3, r3, r0
 8006432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006436:	bfac      	ite	ge
 8006438:	6563      	strge	r3, [r4, #84]	; 0x54
 800643a:	81a3      	strhlt	r3, [r4, #12]
 800643c:	bd10      	pop	{r4, pc}

0800643e <__swrite>:
 800643e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006442:	461f      	mov	r7, r3
 8006444:	898b      	ldrh	r3, [r1, #12]
 8006446:	4605      	mov	r5, r0
 8006448:	05db      	lsls	r3, r3, #23
 800644a:	460c      	mov	r4, r1
 800644c:	4616      	mov	r6, r2
 800644e:	d505      	bpl.n	800645c <__swrite+0x1e>
 8006450:	2302      	movs	r3, #2
 8006452:	2200      	movs	r2, #0
 8006454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006458:	f000 f9b6 	bl	80067c8 <_lseek_r>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	4632      	mov	r2, r6
 8006460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800646a:	463b      	mov	r3, r7
 800646c:	4628      	mov	r0, r5
 800646e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006472:	f000 b869 	b.w	8006548 <_write_r>

08006476 <__sseek>:
 8006476:	b510      	push	{r4, lr}
 8006478:	460c      	mov	r4, r1
 800647a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647e:	f000 f9a3 	bl	80067c8 <_lseek_r>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	bf15      	itete	ne
 8006488:	6560      	strne	r0, [r4, #84]	; 0x54
 800648a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800648e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006492:	81a3      	strheq	r3, [r4, #12]
 8006494:	bf18      	it	ne
 8006496:	81a3      	strhne	r3, [r4, #12]
 8006498:	bd10      	pop	{r4, pc}

0800649a <__sclose>:
 800649a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649e:	f000 b8d3 	b.w	8006648 <_close_r>
	...

080064a4 <__swbuf_r>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	460e      	mov	r6, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	4605      	mov	r5, r0
 80064ac:	b118      	cbz	r0, 80064b6 <__swbuf_r+0x12>
 80064ae:	6983      	ldr	r3, [r0, #24]
 80064b0:	b90b      	cbnz	r3, 80064b6 <__swbuf_r+0x12>
 80064b2:	f7ff fbf9 	bl	8005ca8 <__sinit>
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <__swbuf_r+0x98>)
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d12a      	bne.n	8006512 <__swbuf_r+0x6e>
 80064bc:	686c      	ldr	r4, [r5, #4]
 80064be:	69a3      	ldr	r3, [r4, #24]
 80064c0:	60a3      	str	r3, [r4, #8]
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	071a      	lsls	r2, r3, #28
 80064c6:	d52e      	bpl.n	8006526 <__swbuf_r+0x82>
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	b363      	cbz	r3, 8006526 <__swbuf_r+0x82>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	6820      	ldr	r0, [r4, #0]
 80064d0:	b2f6      	uxtb	r6, r6
 80064d2:	1ac0      	subs	r0, r0, r3
 80064d4:	6963      	ldr	r3, [r4, #20]
 80064d6:	4637      	mov	r7, r6
 80064d8:	4283      	cmp	r3, r0
 80064da:	dc04      	bgt.n	80064e6 <__swbuf_r+0x42>
 80064dc:	4621      	mov	r1, r4
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f948 	bl	8006774 <_fflush_r>
 80064e4:	bb28      	cbnz	r0, 8006532 <__swbuf_r+0x8e>
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	3001      	adds	r0, #1
 80064ea:	3b01      	subs	r3, #1
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	701e      	strb	r6, [r3, #0]
 80064f6:	6963      	ldr	r3, [r4, #20]
 80064f8:	4283      	cmp	r3, r0
 80064fa:	d004      	beq.n	8006506 <__swbuf_r+0x62>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	07db      	lsls	r3, r3, #31
 8006500:	d519      	bpl.n	8006536 <__swbuf_r+0x92>
 8006502:	2e0a      	cmp	r6, #10
 8006504:	d117      	bne.n	8006536 <__swbuf_r+0x92>
 8006506:	4621      	mov	r1, r4
 8006508:	4628      	mov	r0, r5
 800650a:	f000 f933 	bl	8006774 <_fflush_r>
 800650e:	b190      	cbz	r0, 8006536 <__swbuf_r+0x92>
 8006510:	e00f      	b.n	8006532 <__swbuf_r+0x8e>
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <__swbuf_r+0x9c>)
 8006514:	429c      	cmp	r4, r3
 8006516:	d101      	bne.n	800651c <__swbuf_r+0x78>
 8006518:	68ac      	ldr	r4, [r5, #8]
 800651a:	e7d0      	b.n	80064be <__swbuf_r+0x1a>
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <__swbuf_r+0xa0>)
 800651e:	429c      	cmp	r4, r3
 8006520:	bf08      	it	eq
 8006522:	68ec      	ldreq	r4, [r5, #12]
 8006524:	e7cb      	b.n	80064be <__swbuf_r+0x1a>
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f000 f81f 	bl	800656c <__swsetup_r>
 800652e:	2800      	cmp	r0, #0
 8006530:	d0cc      	beq.n	80064cc <__swbuf_r+0x28>
 8006532:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006536:	4638      	mov	r0, r7
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653a:	bf00      	nop
 800653c:	08006ae0 	.word	0x08006ae0
 8006540:	08006b00 	.word	0x08006b00
 8006544:	08006ac0 	.word	0x08006ac0

08006548 <_write_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4605      	mov	r5, r0
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	2200      	movs	r2, #0
 8006552:	4c05      	ldr	r4, [pc, #20]	; (8006568 <_write_r+0x20>)
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	f7f9 fe20 	bl	800019c <_write>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_write_r+0x1e>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	b103      	cbz	r3, 8006566 <_write_r+0x1e>
 8006564:	602b      	str	r3, [r5, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	20001e3c 	.word	0x20001e3c

0800656c <__swsetup_r>:
 800656c:	4b32      	ldr	r3, [pc, #200]	; (8006638 <__swsetup_r+0xcc>)
 800656e:	b570      	push	{r4, r5, r6, lr}
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	4606      	mov	r6, r0
 8006574:	460c      	mov	r4, r1
 8006576:	b125      	cbz	r5, 8006582 <__swsetup_r+0x16>
 8006578:	69ab      	ldr	r3, [r5, #24]
 800657a:	b913      	cbnz	r3, 8006582 <__swsetup_r+0x16>
 800657c:	4628      	mov	r0, r5
 800657e:	f7ff fb93 	bl	8005ca8 <__sinit>
 8006582:	4b2e      	ldr	r3, [pc, #184]	; (800663c <__swsetup_r+0xd0>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d10f      	bne.n	80065a8 <__swsetup_r+0x3c>
 8006588:	686c      	ldr	r4, [r5, #4]
 800658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800658e:	b29a      	uxth	r2, r3
 8006590:	0715      	lsls	r5, r2, #28
 8006592:	d42c      	bmi.n	80065ee <__swsetup_r+0x82>
 8006594:	06d0      	lsls	r0, r2, #27
 8006596:	d411      	bmi.n	80065bc <__swsetup_r+0x50>
 8006598:	2209      	movs	r2, #9
 800659a:	6032      	str	r2, [r6, #0]
 800659c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a6:	e03e      	b.n	8006626 <__swsetup_r+0xba>
 80065a8:	4b25      	ldr	r3, [pc, #148]	; (8006640 <__swsetup_r+0xd4>)
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d101      	bne.n	80065b2 <__swsetup_r+0x46>
 80065ae:	68ac      	ldr	r4, [r5, #8]
 80065b0:	e7eb      	b.n	800658a <__swsetup_r+0x1e>
 80065b2:	4b24      	ldr	r3, [pc, #144]	; (8006644 <__swsetup_r+0xd8>)
 80065b4:	429c      	cmp	r4, r3
 80065b6:	bf08      	it	eq
 80065b8:	68ec      	ldreq	r4, [r5, #12]
 80065ba:	e7e6      	b.n	800658a <__swsetup_r+0x1e>
 80065bc:	0751      	lsls	r1, r2, #29
 80065be:	d512      	bpl.n	80065e6 <__swsetup_r+0x7a>
 80065c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065c2:	b141      	cbz	r1, 80065d6 <__swsetup_r+0x6a>
 80065c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d002      	beq.n	80065d2 <__swsetup_r+0x66>
 80065cc:	4630      	mov	r0, r6
 80065ce:	f000 f981 	bl	80068d4 <_free_r>
 80065d2:	2300      	movs	r3, #0
 80065d4:	6363      	str	r3, [r4, #52]	; 0x34
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	2300      	movs	r3, #0
 80065e0:	6063      	str	r3, [r4, #4]
 80065e2:	6923      	ldr	r3, [r4, #16]
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f043 0308 	orr.w	r3, r3, #8
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	b94b      	cbnz	r3, 8006606 <__swsetup_r+0x9a>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d003      	beq.n	8006606 <__swsetup_r+0x9a>
 80065fe:	4621      	mov	r1, r4
 8006600:	4630      	mov	r0, r6
 8006602:	f000 f917 	bl	8006834 <__smakebuf_r>
 8006606:	89a2      	ldrh	r2, [r4, #12]
 8006608:	f012 0301 	ands.w	r3, r2, #1
 800660c:	d00c      	beq.n	8006628 <__swsetup_r+0xbc>
 800660e:	2300      	movs	r3, #0
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	6963      	ldr	r3, [r4, #20]
 8006614:	425b      	negs	r3, r3
 8006616:	61a3      	str	r3, [r4, #24]
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	b953      	cbnz	r3, 8006632 <__swsetup_r+0xc6>
 800661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006620:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006624:	d1ba      	bne.n	800659c <__swsetup_r+0x30>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	0792      	lsls	r2, r2, #30
 800662a:	bf58      	it	pl
 800662c:	6963      	ldrpl	r3, [r4, #20]
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	e7f2      	b.n	8006618 <__swsetup_r+0xac>
 8006632:	2000      	movs	r0, #0
 8006634:	e7f7      	b.n	8006626 <__swsetup_r+0xba>
 8006636:	bf00      	nop
 8006638:	20000010 	.word	0x20000010
 800663c:	08006ae0 	.word	0x08006ae0
 8006640:	08006b00 	.word	0x08006b00
 8006644:	08006ac0 	.word	0x08006ac0

08006648 <_close_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	2300      	movs	r3, #0
 800664c:	4c05      	ldr	r4, [pc, #20]	; (8006664 <_close_r+0x1c>)
 800664e:	4605      	mov	r5, r0
 8006650:	4608      	mov	r0, r1
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	f7fa f913 	bl	800087e <_close>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_close_r+0x1a>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	b103      	cbz	r3, 8006662 <_close_r+0x1a>
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	20001e3c 	.word	0x20001e3c

08006668 <__sflush_r>:
 8006668:	898a      	ldrh	r2, [r1, #12]
 800666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666e:	4605      	mov	r5, r0
 8006670:	0710      	lsls	r0, r2, #28
 8006672:	460c      	mov	r4, r1
 8006674:	d458      	bmi.n	8006728 <__sflush_r+0xc0>
 8006676:	684b      	ldr	r3, [r1, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	dc05      	bgt.n	8006688 <__sflush_r+0x20>
 800667c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	dc02      	bgt.n	8006688 <__sflush_r+0x20>
 8006682:	2000      	movs	r0, #0
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800668a:	2e00      	cmp	r6, #0
 800668c:	d0f9      	beq.n	8006682 <__sflush_r+0x1a>
 800668e:	2300      	movs	r3, #0
 8006690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006694:	682f      	ldr	r7, [r5, #0]
 8006696:	6a21      	ldr	r1, [r4, #32]
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	d032      	beq.n	8006702 <__sflush_r+0x9a>
 800669c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	075a      	lsls	r2, r3, #29
 80066a2:	d505      	bpl.n	80066b0 <__sflush_r+0x48>
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	1ac0      	subs	r0, r0, r3
 80066a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066aa:	b10b      	cbz	r3, 80066b0 <__sflush_r+0x48>
 80066ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ae:	1ac0      	subs	r0, r0, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	4602      	mov	r2, r0
 80066b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066b6:	6a21      	ldr	r1, [r4, #32]
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b0      	blx	r6
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	d106      	bne.n	80066d0 <__sflush_r+0x68>
 80066c2:	6829      	ldr	r1, [r5, #0]
 80066c4:	291d      	cmp	r1, #29
 80066c6:	d848      	bhi.n	800675a <__sflush_r+0xf2>
 80066c8:	4a29      	ldr	r2, [pc, #164]	; (8006770 <__sflush_r+0x108>)
 80066ca:	40ca      	lsrs	r2, r1
 80066cc:	07d6      	lsls	r6, r2, #31
 80066ce:	d544      	bpl.n	800675a <__sflush_r+0xf2>
 80066d0:	2200      	movs	r2, #0
 80066d2:	6062      	str	r2, [r4, #4]
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	04d9      	lsls	r1, r3, #19
 80066d8:	6022      	str	r2, [r4, #0]
 80066da:	d504      	bpl.n	80066e6 <__sflush_r+0x7e>
 80066dc:	1c42      	adds	r2, r0, #1
 80066de:	d101      	bne.n	80066e4 <__sflush_r+0x7c>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b903      	cbnz	r3, 80066e6 <__sflush_r+0x7e>
 80066e4:	6560      	str	r0, [r4, #84]	; 0x54
 80066e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e8:	602f      	str	r7, [r5, #0]
 80066ea:	2900      	cmp	r1, #0
 80066ec:	d0c9      	beq.n	8006682 <__sflush_r+0x1a>
 80066ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f2:	4299      	cmp	r1, r3
 80066f4:	d002      	beq.n	80066fc <__sflush_r+0x94>
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f8ec 	bl	80068d4 <_free_r>
 80066fc:	2000      	movs	r0, #0
 80066fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006700:	e7c0      	b.n	8006684 <__sflush_r+0x1c>
 8006702:	2301      	movs	r3, #1
 8006704:	4628      	mov	r0, r5
 8006706:	47b0      	blx	r6
 8006708:	1c41      	adds	r1, r0, #1
 800670a:	d1c8      	bne.n	800669e <__sflush_r+0x36>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0c5      	beq.n	800669e <__sflush_r+0x36>
 8006712:	2b1d      	cmp	r3, #29
 8006714:	d001      	beq.n	800671a <__sflush_r+0xb2>
 8006716:	2b16      	cmp	r3, #22
 8006718:	d101      	bne.n	800671e <__sflush_r+0xb6>
 800671a:	602f      	str	r7, [r5, #0]
 800671c:	e7b1      	b.n	8006682 <__sflush_r+0x1a>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	e7ad      	b.n	8006684 <__sflush_r+0x1c>
 8006728:	690f      	ldr	r7, [r1, #16]
 800672a:	2f00      	cmp	r7, #0
 800672c:	d0a9      	beq.n	8006682 <__sflush_r+0x1a>
 800672e:	0793      	lsls	r3, r2, #30
 8006730:	bf18      	it	ne
 8006732:	2300      	movne	r3, #0
 8006734:	680e      	ldr	r6, [r1, #0]
 8006736:	bf08      	it	eq
 8006738:	694b      	ldreq	r3, [r1, #20]
 800673a:	eba6 0807 	sub.w	r8, r6, r7
 800673e:	600f      	str	r7, [r1, #0]
 8006740:	608b      	str	r3, [r1, #8]
 8006742:	f1b8 0f00 	cmp.w	r8, #0
 8006746:	dd9c      	ble.n	8006682 <__sflush_r+0x1a>
 8006748:	4643      	mov	r3, r8
 800674a:	463a      	mov	r2, r7
 800674c:	6a21      	ldr	r1, [r4, #32]
 800674e:	4628      	mov	r0, r5
 8006750:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006752:	47b0      	blx	r6
 8006754:	2800      	cmp	r0, #0
 8006756:	dc06      	bgt.n	8006766 <__sflush_r+0xfe>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006764:	e78e      	b.n	8006684 <__sflush_r+0x1c>
 8006766:	4407      	add	r7, r0
 8006768:	eba8 0800 	sub.w	r8, r8, r0
 800676c:	e7e9      	b.n	8006742 <__sflush_r+0xda>
 800676e:	bf00      	nop
 8006770:	20400001 	.word	0x20400001

08006774 <_fflush_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	690b      	ldr	r3, [r1, #16]
 8006778:	4605      	mov	r5, r0
 800677a:	460c      	mov	r4, r1
 800677c:	b1db      	cbz	r3, 80067b6 <_fflush_r+0x42>
 800677e:	b118      	cbz	r0, 8006788 <_fflush_r+0x14>
 8006780:	6983      	ldr	r3, [r0, #24]
 8006782:	b90b      	cbnz	r3, 8006788 <_fflush_r+0x14>
 8006784:	f7ff fa90 	bl	8005ca8 <__sinit>
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <_fflush_r+0x48>)
 800678a:	429c      	cmp	r4, r3
 800678c:	d109      	bne.n	80067a2 <_fflush_r+0x2e>
 800678e:	686c      	ldr	r4, [r5, #4]
 8006790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006794:	b17b      	cbz	r3, 80067b6 <_fflush_r+0x42>
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679e:	f7ff bf63 	b.w	8006668 <__sflush_r>
 80067a2:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <_fflush_r+0x4c>)
 80067a4:	429c      	cmp	r4, r3
 80067a6:	d101      	bne.n	80067ac <_fflush_r+0x38>
 80067a8:	68ac      	ldr	r4, [r5, #8]
 80067aa:	e7f1      	b.n	8006790 <_fflush_r+0x1c>
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <_fflush_r+0x50>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	bf08      	it	eq
 80067b2:	68ec      	ldreq	r4, [r5, #12]
 80067b4:	e7ec      	b.n	8006790 <_fflush_r+0x1c>
 80067b6:	2000      	movs	r0, #0
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
 80067ba:	bf00      	nop
 80067bc:	08006ae0 	.word	0x08006ae0
 80067c0:	08006b00 	.word	0x08006b00
 80067c4:	08006ac0 	.word	0x08006ac0

080067c8 <_lseek_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4605      	mov	r5, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	2200      	movs	r2, #0
 80067d2:	4c05      	ldr	r4, [pc, #20]	; (80067e8 <_lseek_r+0x20>)
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f7fa f875 	bl	80008c6 <_lseek>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_lseek_r+0x1e>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_lseek_r+0x1e>
 80067e4:	602b      	str	r3, [r5, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	20001e3c 	.word	0x20001e3c

080067ec <__swhatbuf_r>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	460e      	mov	r6, r1
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	b096      	sub	sp, #88	; 0x58
 80067f6:	2900      	cmp	r1, #0
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	da07      	bge.n	800680e <__swhatbuf_r+0x22>
 80067fe:	2300      	movs	r3, #0
 8006800:	602b      	str	r3, [r5, #0]
 8006802:	89b3      	ldrh	r3, [r6, #12]
 8006804:	061a      	lsls	r2, r3, #24
 8006806:	d410      	bmi.n	800682a <__swhatbuf_r+0x3e>
 8006808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680c:	e00e      	b.n	800682c <__swhatbuf_r+0x40>
 800680e:	466a      	mov	r2, sp
 8006810:	f000 f8be 	bl	8006990 <_fstat_r>
 8006814:	2800      	cmp	r0, #0
 8006816:	dbf2      	blt.n	80067fe <__swhatbuf_r+0x12>
 8006818:	9a01      	ldr	r2, [sp, #4]
 800681a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800681e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006822:	425a      	negs	r2, r3
 8006824:	415a      	adcs	r2, r3
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	e7ee      	b.n	8006808 <__swhatbuf_r+0x1c>
 800682a:	2340      	movs	r3, #64	; 0x40
 800682c:	2000      	movs	r0, #0
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	b016      	add	sp, #88	; 0x58
 8006832:	bd70      	pop	{r4, r5, r6, pc}

08006834 <__smakebuf_r>:
 8006834:	898b      	ldrh	r3, [r1, #12]
 8006836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006838:	079d      	lsls	r5, r3, #30
 800683a:	4606      	mov	r6, r0
 800683c:	460c      	mov	r4, r1
 800683e:	d507      	bpl.n	8006850 <__smakebuf_r+0x1c>
 8006840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	2301      	movs	r3, #1
 800684a:	6163      	str	r3, [r4, #20]
 800684c:	b002      	add	sp, #8
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	ab01      	add	r3, sp, #4
 8006852:	466a      	mov	r2, sp
 8006854:	f7ff ffca 	bl	80067ec <__swhatbuf_r>
 8006858:	9900      	ldr	r1, [sp, #0]
 800685a:	4605      	mov	r5, r0
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff faad 	bl	8005dbc <_malloc_r>
 8006862:	b948      	cbnz	r0, 8006878 <__smakebuf_r+0x44>
 8006864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006868:	059a      	lsls	r2, r3, #22
 800686a:	d4ef      	bmi.n	800684c <__smakebuf_r+0x18>
 800686c:	f023 0303 	bic.w	r3, r3, #3
 8006870:	f043 0302 	orr.w	r3, r3, #2
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	e7e3      	b.n	8006840 <__smakebuf_r+0xc>
 8006878:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <__smakebuf_r+0x7c>)
 800687a:	62b3      	str	r3, [r6, #40]	; 0x28
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	6020      	str	r0, [r4, #0]
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	9b00      	ldr	r3, [sp, #0]
 8006888:	6120      	str	r0, [r4, #16]
 800688a:	6163      	str	r3, [r4, #20]
 800688c:	9b01      	ldr	r3, [sp, #4]
 800688e:	b15b      	cbz	r3, 80068a8 <__smakebuf_r+0x74>
 8006890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006894:	4630      	mov	r0, r6
 8006896:	f000 f88d 	bl	80069b4 <_isatty_r>
 800689a:	b128      	cbz	r0, 80068a8 <__smakebuf_r+0x74>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	431d      	orrs	r5, r3
 80068ac:	81a5      	strh	r5, [r4, #12]
 80068ae:	e7cd      	b.n	800684c <__smakebuf_r+0x18>
 80068b0:	08005c71 	.word	0x08005c71

080068b4 <memchr>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	b2c9      	uxtb	r1, r1
 80068b8:	4402      	add	r2, r0
 80068ba:	4290      	cmp	r0, r2
 80068bc:	4603      	mov	r3, r0
 80068be:	d101      	bne.n	80068c4 <memchr+0x10>
 80068c0:	2300      	movs	r3, #0
 80068c2:	e003      	b.n	80068cc <memchr+0x18>
 80068c4:	781c      	ldrb	r4, [r3, #0]
 80068c6:	3001      	adds	r0, #1
 80068c8:	428c      	cmp	r4, r1
 80068ca:	d1f6      	bne.n	80068ba <memchr+0x6>
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd10      	pop	{r4, pc}

080068d0 <__malloc_lock>:
 80068d0:	4770      	bx	lr

080068d2 <__malloc_unlock>:
 80068d2:	4770      	bx	lr

080068d4 <_free_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4605      	mov	r5, r0
 80068d8:	2900      	cmp	r1, #0
 80068da:	d043      	beq.n	8006964 <_free_r+0x90>
 80068dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e0:	1f0c      	subs	r4, r1, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfb8      	it	lt
 80068e6:	18e4      	addlt	r4, r4, r3
 80068e8:	f7ff fff2 	bl	80068d0 <__malloc_lock>
 80068ec:	4a1e      	ldr	r2, [pc, #120]	; (8006968 <_free_r+0x94>)
 80068ee:	6813      	ldr	r3, [r2, #0]
 80068f0:	4610      	mov	r0, r2
 80068f2:	b933      	cbnz	r3, 8006902 <_free_r+0x2e>
 80068f4:	6063      	str	r3, [r4, #4]
 80068f6:	6014      	str	r4, [r2, #0]
 80068f8:	4628      	mov	r0, r5
 80068fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068fe:	f7ff bfe8 	b.w	80068d2 <__malloc_unlock>
 8006902:	42a3      	cmp	r3, r4
 8006904:	d90b      	bls.n	800691e <_free_r+0x4a>
 8006906:	6821      	ldr	r1, [r4, #0]
 8006908:	1862      	adds	r2, r4, r1
 800690a:	4293      	cmp	r3, r2
 800690c:	bf01      	itttt	eq
 800690e:	681a      	ldreq	r2, [r3, #0]
 8006910:	685b      	ldreq	r3, [r3, #4]
 8006912:	1852      	addeq	r2, r2, r1
 8006914:	6022      	streq	r2, [r4, #0]
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	6004      	str	r4, [r0, #0]
 800691a:	e7ed      	b.n	80068f8 <_free_r+0x24>
 800691c:	4613      	mov	r3, r2
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	b10a      	cbz	r2, 8006926 <_free_r+0x52>
 8006922:	42a2      	cmp	r2, r4
 8006924:	d9fa      	bls.n	800691c <_free_r+0x48>
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	1858      	adds	r0, r3, r1
 800692a:	42a0      	cmp	r0, r4
 800692c:	d10b      	bne.n	8006946 <_free_r+0x72>
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	4401      	add	r1, r0
 8006932:	1858      	adds	r0, r3, r1
 8006934:	4282      	cmp	r2, r0
 8006936:	6019      	str	r1, [r3, #0]
 8006938:	d1de      	bne.n	80068f8 <_free_r+0x24>
 800693a:	6810      	ldr	r0, [r2, #0]
 800693c:	6852      	ldr	r2, [r2, #4]
 800693e:	4401      	add	r1, r0
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	605a      	str	r2, [r3, #4]
 8006944:	e7d8      	b.n	80068f8 <_free_r+0x24>
 8006946:	d902      	bls.n	800694e <_free_r+0x7a>
 8006948:	230c      	movs	r3, #12
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	e7d4      	b.n	80068f8 <_free_r+0x24>
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	1821      	adds	r1, r4, r0
 8006952:	428a      	cmp	r2, r1
 8006954:	bf01      	itttt	eq
 8006956:	6811      	ldreq	r1, [r2, #0]
 8006958:	6852      	ldreq	r2, [r2, #4]
 800695a:	1809      	addeq	r1, r1, r0
 800695c:	6021      	streq	r1, [r4, #0]
 800695e:	6062      	str	r2, [r4, #4]
 8006960:	605c      	str	r4, [r3, #4]
 8006962:	e7c9      	b.n	80068f8 <_free_r+0x24>
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	bf00      	nop
 8006968:	200019a0 	.word	0x200019a0

0800696c <_read_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4605      	mov	r5, r0
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	2200      	movs	r2, #0
 8006976:	4c05      	ldr	r4, [pc, #20]	; (800698c <_read_r+0x20>)
 8006978:	6022      	str	r2, [r4, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	f7f9 ff62 	bl	8000844 <_read>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_read_r+0x1e>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	b103      	cbz	r3, 800698a <_read_r+0x1e>
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	20001e3c 	.word	0x20001e3c

08006990 <_fstat_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	2300      	movs	r3, #0
 8006994:	4c06      	ldr	r4, [pc, #24]	; (80069b0 <_fstat_r+0x20>)
 8006996:	4605      	mov	r5, r0
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	f7f9 ff79 	bl	8000894 <_fstat>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	d102      	bne.n	80069ac <_fstat_r+0x1c>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	b103      	cbz	r3, 80069ac <_fstat_r+0x1c>
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	bd38      	pop	{r3, r4, r5, pc}
 80069ae:	bf00      	nop
 80069b0:	20001e3c 	.word	0x20001e3c

080069b4 <_isatty_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	2300      	movs	r3, #0
 80069b8:	4c05      	ldr	r4, [pc, #20]	; (80069d0 <_isatty_r+0x1c>)
 80069ba:	4605      	mov	r5, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	f7f9 ff77 	bl	80008b2 <_isatty>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_isatty_r+0x1a>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_isatty_r+0x1a>
 80069cc:	602b      	str	r3, [r5, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20001e3c 	.word	0x20001e3c

080069d4 <_init>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr

080069e0 <_fini>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr
