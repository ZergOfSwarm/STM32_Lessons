
Test_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006b44  08006b44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b44  08006b44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dcc  20000074  08006bc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e40  08006bc0  00021e40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003359  00000000  00000000  00038f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001350  00000000  00000000  0003c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003d630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000047b3  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010407  00000000  00000000  00042fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097bb4  00000000  00000000  000533c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eaf76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  000eaff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080069c4 	.word	0x080069c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080069c4 	.word	0x080069c4

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e009      	b.n	80001c2 <_write+0x26>
		ITM_SendChar(*ptr++);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	60ba      	str	r2, [r7, #8]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffca 	bl	8000150 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697a      	ldr	r2, [r7, #20]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf1      	blt.n	80001ae <_write+0x12>
	}
	return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d8:	f000 fbda 	bl	8000990 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001dc:	f000 f836 	bl	800024c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001e0:	f000 f942 	bl	8000468 <MX_GPIO_Init>
	MX_TIM2_Init();
 80001e4:	f000 f8cc 	bl	8000380 <MX_TIM2_Init>
	MX_ADC1_Init();
 80001e8:	f000 f88c 	bl	8000304 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Запускаем ШИМ на TIM2 на канале 2.
 80001ec:	2104      	movs	r1, #4
 80001ee:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x58>)
 80001f0:	f002 f9ca 	bl	8002588 <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc1); // Запустили АЦП
 80001f4:	480e      	ldr	r0, [pc, #56]	; (8000230 <main+0x5c>)
 80001f6:	f000 fcd5 	bl	8000ba4 <HAL_ADC_Start>
	HAL_ADCEx_Calibration_Start(&hadc1); // Делаем калибровку ADC
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <main+0x5c>)
 80001fc:	f001 f836 	bl	800126c <HAL_ADCEx_Calibration_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000200:	f003 f81a 	bl	8003238 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <main+0x60>)
 8000206:	2100      	movs	r1, #0
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <main+0x64>)
 800020a:	f003 f87b 	bl	8003304 <osThreadNew>
 800020e:	4602      	mov	r2, r0
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <main+0x68>)
 8000212:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of my_PhotoResisto */
	my_PhotoResistoHandle = osThreadNew(Start_PhotoResistor_Task, NULL,
 8000214:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <main+0x6c>)
 8000216:	2100      	movs	r1, #0
 8000218:	480a      	ldr	r0, [pc, #40]	; (8000244 <main+0x70>)
 800021a:	f003 f873 	bl	8003304 <osThreadNew>
 800021e:	4602      	mov	r2, r0
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <main+0x74>)
 8000222:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000224:	f003 f83a 	bl	800329c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000228:	e7fe      	b.n	8000228 <main+0x54>
 800022a:	bf00      	nop
 800022c:	20001d68 	.word	0x20001d68
 8000230:	200019b8 	.word	0x200019b8
 8000234:	08006a4c 	.word	0x08006a4c
 8000238:	080004c5 	.word	0x080004c5
 800023c:	200019a8 	.word	0x200019a8
 8000240:	08006a70 	.word	0x08006a70
 8000244:	080004d5 	.word	0x080004d5
 8000248:	200019e8 	.word	0x200019e8

0800024c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	; 0x50
 8000250:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f005 fcbb 	bl	8005bd6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fab8 	bl	8001818 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
		Error_Handler();
 80002ae:	f000 f983 	bl	80005b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fd22 	bl	8001d18 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
		Error_Handler();
 80002da:	f000 f96d 	bl	80005b8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002de:	2302      	movs	r3, #2
 80002e0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fee0 	bl	80020b0 <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xae>
		Error_Handler();
 80002f6:	f000 f95f 	bl	80005b8 <Error_Handler>
	}
}
 80002fa:	bf00      	nop
 80002fc:	3750      	adds	r7, #80	; 0x50
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_ADC1_Init+0x74>)
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <MX_ADC1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <MX_ADC1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_ADC1_Init+0x74>)
 8000322:	2201      	movs	r2, #1
 8000324:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <MX_ADC1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_ADC1_Init+0x74>)
 800032e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000332:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_ADC1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_ADC1_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_ADC1_Init+0x74>)
 8000342:	f000 fb57 	bl	80009f4 <HAL_ADC_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800034c:	f000 f934 	bl	80005b8 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000354:	2301      	movs	r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_ADC1_Init+0x74>)
 8000362:	f000 fdff 	bl	8000f64 <HAL_ADC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800036c:	f000 f924 	bl	80005b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200019b8 	.word	0x200019b8
 800037c:	40012400 	.word	0x40012400

08000380 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b08e      	sub	sp, #56	; 0x38
 8000384:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80003b0:	4b2c      	ldr	r3, [pc, #176]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b29      	ldr	r3, [pc, #164]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255;
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003c6:	22ff      	movs	r2, #255	; 0xff
 80003c8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b26      	ldr	r3, [pc, #152]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b24      	ldr	r3, [pc, #144]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80003d6:	4823      	ldr	r0, [pc, #140]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003d8:	f001 ffdc 	bl	8002394 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x66>
		Error_Handler();
 80003e2:	f000 f8e9 	bl	80005b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80003ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f0:	4619      	mov	r1, r3
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <MX_TIM2_Init+0xe4>)
 80003f4:	f002 fb30 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM2_Init+0x82>
		Error_Handler();
 80003fe:	f000 f8db 	bl	80005b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000404:	f002 f868 	bl	80024d8 <HAL_TIM_PWM_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x92>
		Error_Handler();
 800040e:	f000 f8d3 	bl	80005b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800041a:	f107 0320 	add.w	r3, r7, #32
 800041e:	4619      	mov	r1, r3
 8000420:	4810      	ldr	r0, [pc, #64]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000422:	f002 fe99 	bl	8003158 <HAL_TIMEx_MasterConfigSynchronization>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800042c:	f000 f8c4 	bl	80005b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000430:	2360      	movs	r3, #96	; 0x60
 8000432:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2204      	movs	r2, #4
 8000444:	4619      	mov	r1, r3
 8000446:	4807      	ldr	r0, [pc, #28]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000448:	f002 fa48 	bl	80028dc <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000452:	f000 f8b1 	bl	80005b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <MX_TIM2_Init+0xe4>)
 8000458:	f000 f942 	bl	80006e0 <HAL_TIM_MspPostInit>

}
 800045c:	bf00      	nop
 800045e:	3738      	adds	r7, #56	; 0x38
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20001d68 	.word	0x20001d68

08000468 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000474:	f043 0320 	orr.w	r3, r3, #32
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_GPIO_Init+0x58>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0320 	and.w	r3, r3, #32
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <MX_GPIO_Init+0x58>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <MX_GPIO_Init+0x58>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <MX_GPIO_Init+0x58>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <MX_GPIO_Init+0x58>)
 80004a4:	f043 0308 	orr.w	r3, r3, #8
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <MX_GPIO_Init+0x58>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0308 	and.w	r3, r3, #8
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f002 ffc3 	bl	8003458 <osDelay>
 80004d2:	e7fb      	b.n	80004cc <StartDefaultTask+0x8>

080004d4 <Start_PhotoResistor_Task>:
 * @brief Function implementing the my_PhotoResisto thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_PhotoResistor_Task */
void Start_PhotoResistor_Task(void *argument) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
		 }
		 }
		 }*/

		/*---------------------------------------*/
		HAL_ADC_Start(&hadc1); // Запускаем проеобразование сигнала с АЦП1
 80004dc:	4829      	ldr	r0, [pc, #164]	; (8000584 <Start_PhotoResistor_Task+0xb0>)
 80004de:	f000 fb61 	bl	8000ba4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100); // Ожидание окончания преобразования! 100мс -это не означает что он будет ждать 100мс! Если преобразуется раньше то и ...
 80004e2:	2164      	movs	r1, #100	; 0x64
 80004e4:	4827      	ldr	r0, [pc, #156]	; (8000584 <Start_PhotoResistor_Task+0xb0>)
 80004e6:	f000 fc37 	bl	8000d58 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1); // Читаем наше значение с АЦП1.
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <Start_PhotoResistor_Task+0xb0>)
 80004ec:	f000 fd2e 	bl	8000f4c <HAL_ADC_GetValue>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <Start_PhotoResistor_Task+0xb4>)
 80004f6:	801a      	strh	r2, [r3, #0]
		printf("adc_value - %d \n", adc_value);
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <Start_PhotoResistor_Task+0xb4>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4823      	ldr	r0, [pc, #140]	; (800058c <Start_PhotoResistor_Task+0xb8>)
 8000500:	f005 fb72 	bl	8005be8 <iprintf>
		HAL_ADC_Stop(&hadc1); // Останавливаем проеобразование сигнала с АЦП1
 8000504:	481f      	ldr	r0, [pc, #124]	; (8000584 <Start_PhotoResistor_Task+0xb0>)
 8000506:	f000 fbfb 	bl	8000d00 <HAL_ADC_Stop>
		int16_t in_max = 2000; // было 4095
 800050a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800050e:	81fb      	strh	r3, [r7, #14]
		int8_t in_min = 200;  // было 0
 8000510:	23c8      	movs	r3, #200	; 0xc8
 8000512:	737b      	strb	r3, [r7, #13]
		unsigned char out_max = 255;
 8000514:	23ff      	movs	r3, #255	; 0xff
 8000516:	733b      	strb	r3, [r7, #12]
		int8_t out_min = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	72fb      	strb	r3, [r7, #11]

		value = (adc_value - in_min) * (out_max - out_min) / (in_max - in_min)
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <Start_PhotoResistor_Task+0xb4>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	7b39      	ldrb	r1, [r7, #12]
 800052a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800052e:	1a8a      	subs	r2, r1, r2
 8000530:	fb02 f203 	mul.w	r2, r2, r3
 8000534:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000538:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800053c:	1acb      	subs	r3, r1, r3
 800053e:	fb92 f3f3 	sdiv	r3, r2, r3
				+ out_min; // Function map
 8000542:	b29a      	uxth	r2, r3
 8000544:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000548:	b29b      	uxth	r3, r3
 800054a:	4413      	add	r3, r2
 800054c:	b29b      	uxth	r3, r3
 800054e:	b21a      	sxth	r2, r3
		value = (adc_value - in_min) * (out_max - out_min) / (in_max - in_min)
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <Start_PhotoResistor_Task+0xbc>)
 8000552:	801a      	strh	r2, [r3, #0]
		if (value >= 255) {
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <Start_PhotoResistor_Task+0xbc>)
 8000556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800055a:	2bfe      	cmp	r3, #254	; 0xfe
 800055c:	dd02      	ble.n	8000564 <Start_PhotoResistor_Task+0x90>
			value = 255;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <Start_PhotoResistor_Task+0xbc>)
 8000560:	22ff      	movs	r2, #255	; 0xff
 8000562:	801a      	strh	r2, [r3, #0]
		}
		if (value <= 0) {
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <Start_PhotoResistor_Task+0xbc>)
 8000566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056a:	2b00      	cmp	r3, #0
 800056c:	dc02      	bgt.n	8000574 <Start_PhotoResistor_Task+0xa0>
			value = 0;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <Start_PhotoResistor_Task+0xbc>)
 8000570:	2200      	movs	r2, #0
 8000572:	801a      	strh	r2, [r3, #0]
		}
		TIM2->CCR2 = value; // analogWrite(PWM,value);
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <Start_PhotoResistor_Task+0xbc>)
 8000576:	f9b3 2000 	ldrsh.w	r2, [r3]
 800057a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
	for (;;) {
 8000580:	e7ac      	b.n	80004dc <Start_PhotoResistor_Task+0x8>
 8000582:	bf00      	nop
 8000584:	200019b8 	.word	0x200019b8
 8000588:	200019b4 	.word	0x200019b4
 800058c:	080069f8 	.word	0x080069f8
 8000590:	20000090 	.word	0x20000090

08000594 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80005a6:	f000 fa09 	bl	80009bc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40000800 	.word	0x40000800

080005b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005be:	e7fe      	b.n	80005be <Error_Handler+0x6>

080005c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_MspInit+0x68>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_MspInit+0x68>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_MspInit+0x68>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_MspInit+0x68>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <HAL_MspInit+0x68>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_MspInit+0x68>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	210f      	movs	r1, #15
 80005fa:	f06f 0001 	mvn.w	r0, #1
 80005fe:	f000 ff86 	bl	800150e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_MspInit+0x6c>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_MspInit+0x6c>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000
 800062c:	40010000 	.word	0x40010000

08000630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_ADC_MspInit+0x6c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d121      	bne.n	8000694 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 8000656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_ADC_MspInit+0x70>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000684:	2303      	movs	r3, #3
 8000686:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_ADC_MspInit+0x74>)
 8000690:	f000 ff68 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40012400 	.word	0x40012400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800

080006a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b8:	d10b      	bne.n	80006d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_TIM_Base_MspInit+0x34>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_TIM_Base_MspInit+0x34>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_TIM_Base_MspInit+0x34>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fe:	d117      	bne.n	8000730 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <HAL_TIM_MspPostInit+0x58>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <HAL_TIM_MspPostInit+0x58>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_TIM_MspPostInit+0x58>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <HAL_TIM_MspPostInit+0x5c>)
 800072c:	f000 ff1a 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	40010800 	.word	0x40010800

08000740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	201e      	movs	r0, #30
 8000756:	f000 feda 	bl	800150e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800075a:	201e      	movs	r0, #30
 800075c:	f000 fef3 	bl	8001546 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <HAL_InitTick+0xa0>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <HAL_InitTick+0xa0>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	61d3      	str	r3, [r2, #28]
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <HAL_InitTick+0xa0>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000778:	f107 0210 	add.w	r2, r7, #16
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fc46 	bl	8002014 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000788:	f001 fc1c 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 800078c:	4603      	mov	r3, r0
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <HAL_InitTick+0xa4>)
 8000796:	fba2 2303 	umull	r2, r3, r2, r3
 800079a:	0c9b      	lsrs	r3, r3, #18
 800079c:	3b01      	subs	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <HAL_InitTick+0xa8>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <HAL_InitTick+0xac>)
 80007a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_InitTick+0xa8>)
 80007a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_InitTick+0xa8>)
 80007b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_InitTick+0xa8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <HAL_InitTick+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <HAL_InitTick+0xa8>)
 80007c2:	f001 fde7 	bl	8002394 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <HAL_InitTick+0xa8>)
 80007ce:	f001 fe31 	bl	8002434 <HAL_TIM_Base_Start_IT>
 80007d2:	4603      	mov	r3, r0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3730      	adds	r7, #48	; 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	431bde83 	.word	0x431bde83
 80007e8:	20001db0 	.word	0x20001db0
 80007ec:	40000800 	.word	0x40000800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
	...

0800081c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <TIM4_IRQHandler+0x10>)
 8000822:	f001 ff53 	bl	80026cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20001db0 	.word	0x20001db0

08000830 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e00a      	b.n	8000858 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000842:	f3af 8000 	nop.w
 8000846:	4601      	mov	r1, r0
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	b2ca      	uxtb	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <_read+0x12>
	}

return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <_close>:
	}
	return len;
}

int _close(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000890:	605a      	str	r2, [r3, #4]
	return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <_isatty>:

int _isatty(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
	return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f005 f936 	bl	8005b6c <__errno>
 8000900:	4602      	mov	r2, r0
 8000902:	230c      	movs	r3, #12
 8000904:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20005000 	.word	0x20005000
 800092c:	00000400 	.word	0x00000400
 8000930:	20000094 	.word	0x20000094
 8000934:	20001e40 	.word	0x20001e40

08000938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000944:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000946:	e003      	b.n	8000950 <LoopCopyDataInit>

08000948 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800094a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800094c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800094e:	3104      	adds	r1, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000954:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000956:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000958:	d3f6      	bcc.n	8000948 <CopyDataInit>
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800095c:	e002      	b.n	8000964 <LoopFillZerobss>

0800095e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000960:	f842 3b04 	str.w	r3, [r2], #4

08000964 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000966:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000968:	d3f9      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096a:	f7ff ffe5 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f005 f903 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fc2f 	bl	80001d4 <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r3, =_sidata
 8000978:	08006b4c 	.word	0x08006b4c
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000980:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000984:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000988:	20001e40 	.word	0x20001e40

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 fda9 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff feca 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fe08 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20001df8 	.word	0x20001df8

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20001df8 	.word	0x20001df8

080009f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e0be      	b.n	8000b94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d109      	bne.n	8000a38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fdfc 	bl	8000630 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 fbdd 	bl	80011f8 <ADC_ConversionStop_Disable>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f040 8099 	bne.w	8000b82 <HAL_ADC_Init+0x18e>
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f040 8095 	bne.w	8000b82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a60:	f023 0302 	bic.w	r3, r3, #2
 8000a64:	f043 0202 	orr.w	r2, r3, #2
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7b1b      	ldrb	r3, [r3, #12]
 8000a7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a8c:	d003      	beq.n	8000a96 <HAL_ADC_Init+0xa2>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d102      	bne.n	8000a9c <HAL_ADC_Init+0xa8>
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	e000      	b.n	8000a9e <HAL_ADC_Init+0xaa>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7d1b      	ldrb	r3, [r3, #20]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d119      	bne.n	8000ae0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7b1b      	ldrb	r3, [r3, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d109      	bne.n	8000ac8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	035a      	lsls	r2, r3, #13
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	e00b      	b.n	8000ae0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	f043 0220 	orr.w	r2, r3, #32
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_ADC_Init+0x1a8>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b10:	d003      	beq.n	8000b1a <HAL_ADC_Init+0x126>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d104      	bne.n	8000b24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	051b      	lsls	r3, r3, #20
 8000b22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_ADC_Init+0x1ac>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d10b      	bne.n	8000b60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	f023 0303 	bic.w	r3, r3, #3
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b5e:	e018      	b.n	8000b92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	f023 0312 	bic.w	r3, r3, #18
 8000b68:	f043 0210 	orr.w	r2, r3, #16
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	f043 0201 	orr.w	r2, r3, #1
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b80:	e007      	b.n	8000b92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f043 0210 	orr.w	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000ba0:	ff1f0efe 	.word	0xff1f0efe

08000ba4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d101      	bne.n	8000bbe <HAL_ADC_Start+0x1a>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e098      	b.n	8000cf0 <HAL_ADC_Start+0x14c>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 fac4 	bl	8001154 <ADC_Enable>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8087 	bne.w	8000ce6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a41      	ldr	r2, [pc, #260]	; (8000cf8 <HAL_ADC_Start+0x154>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d105      	bne.n	8000c02 <HAL_ADC_Start+0x5e>
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <HAL_ADC_Start+0x158>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d115      	bne.n	8000c2e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d026      	beq.n	8000c6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c2c:	e01d      	b.n	8000c6a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <HAL_ADC_Start+0x158>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d004      	beq.n	8000c4e <HAL_ADC_Start+0xaa>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a2b      	ldr	r2, [pc, #172]	; (8000cf8 <HAL_ADC_Start+0x154>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10d      	bne.n	8000c6a <HAL_ADC_Start+0xc6>
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <HAL_ADC_Start+0x158>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d007      	beq.n	8000c6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	f023 0206 	bic.w	r2, r3, #6
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c82:	e002      	b.n	8000c8a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f06f 0202 	mvn.w	r2, #2
 8000c9a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ca6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000caa:	d113      	bne.n	8000cd4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cb0:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <HAL_ADC_Start+0x154>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d105      	bne.n	8000cc2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_ADC_Start+0x158>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d108      	bne.n	8000cd4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	e00c      	b.n	8000cee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	e003      	b.n	8000cee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40012800 	.word	0x40012800
 8000cfc:	40012400 	.word	0x40012400

08000d00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Stop+0x1a>
 8000d16:	2302      	movs	r3, #2
 8000d18:	e01a      	b.n	8000d50 <HAL_ADC_Stop+0x50>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 fa68 	bl	80011f8 <ADC_ConversionStop_Disable>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d109      	bne.n	8000d46 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	f043 0201 	orr.w	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d6e:	f7ff fe37 	bl	80009e0 <HAL_GetTick>
 8000d72:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f043 0220 	orr.w	r2, r3, #32
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0c8      	b.n	8000f2c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d12a      	bne.n	8000dfe <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d123      	bne.n	8000dfe <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000db6:	e01a      	b.n	8000dee <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dbe:	d016      	beq.n	8000dee <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <HAL_ADC_PollForConversion+0x7e>
 8000dc6:	f7ff fe0b 	bl	80009e0 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d20b      	bcs.n	8000dee <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dda:	f043 0204 	orr.w	r2, r3, #4
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e09e      	b.n	8000f2c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0dd      	beq.n	8000db8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dfc:	e06c      	b.n	8000ed8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000dfe:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <HAL_ADC_PollForConversion+0x1dc>)
 8000e00:	681c      	ldr	r4, [r3, #0]
 8000e02:	2002      	movs	r0, #2
 8000e04:	f001 fa0a 	bl	800221c <HAL_RCCEx_GetPeriphCLKFreq>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6919      	ldr	r1, [r3, #16]
 8000e14:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <HAL_ADC_PollForConversion+0x1e0>)
 8000e16:	400b      	ands	r3, r1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d118      	bne.n	8000e4e <HAL_ADC_PollForConversion+0xf6>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68d9      	ldr	r1, [r3, #12]
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HAL_ADC_PollForConversion+0x1e4>)
 8000e24:	400b      	ands	r3, r1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d111      	bne.n	8000e4e <HAL_ADC_PollForConversion+0xf6>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6919      	ldr	r1, [r3, #16]
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_ADC_PollForConversion+0x1e8>)
 8000e32:	400b      	ands	r3, r1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d108      	bne.n	8000e4a <HAL_ADC_PollForConversion+0xf2>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68d9      	ldr	r1, [r3, #12]
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <HAL_ADC_PollForConversion+0x1ec>)
 8000e40:	400b      	ands	r3, r1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_PollForConversion+0xf2>
 8000e46:	2314      	movs	r3, #20
 8000e48:	e020      	b.n	8000e8c <HAL_ADC_PollForConversion+0x134>
 8000e4a:	2329      	movs	r3, #41	; 0x29
 8000e4c:	e01e      	b.n	8000e8c <HAL_ADC_PollForConversion+0x134>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6919      	ldr	r1, [r3, #16]
 8000e54:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <HAL_ADC_PollForConversion+0x1e8>)
 8000e56:	400b      	ands	r3, r1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d106      	bne.n	8000e6a <HAL_ADC_PollForConversion+0x112>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68d9      	ldr	r1, [r3, #12]
 8000e62:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <HAL_ADC_PollForConversion+0x1ec>)
 8000e64:	400b      	ands	r3, r1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00d      	beq.n	8000e86 <HAL_ADC_PollForConversion+0x12e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6919      	ldr	r1, [r3, #16]
 8000e70:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <HAL_ADC_PollForConversion+0x1f0>)
 8000e72:	400b      	ands	r3, r1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d108      	bne.n	8000e8a <HAL_ADC_PollForConversion+0x132>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68d9      	ldr	r1, [r3, #12]
 8000e7e:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <HAL_ADC_PollForConversion+0x1f0>)
 8000e80:	400b      	ands	r3, r1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_PollForConversion+0x132>
 8000e86:	2354      	movs	r3, #84	; 0x54
 8000e88:	e000      	b.n	8000e8c <HAL_ADC_PollForConversion+0x134>
 8000e8a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e92:	e01d      	b.n	8000ed0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e9a:	d016      	beq.n	8000eca <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d007      	beq.n	8000eb2 <HAL_ADC_PollForConversion+0x15a>
 8000ea2:	f7ff fd9d 	bl	80009e0 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d20b      	bcs.n	8000eca <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f043 0204 	orr.w	r2, r3, #4
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e030      	b.n	8000f2c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8dd      	bhi.n	8000e94 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f06f 0212 	mvn.w	r2, #18
 8000ee0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ef8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000efc:	d115      	bne.n	8000f2a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d111      	bne.n	8000f2a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	24924924 	.word	0x24924924
 8000f3c:	00924924 	.word	0x00924924
 8000f40:	12492492 	.word	0x12492492
 8000f44:	00492492 	.word	0x00492492
 8000f48:	00249249 	.word	0x00249249

08000f4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x20>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e0dc      	b.n	800113e <HAL_ADC_ConfigChannel+0x1da>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d81c      	bhi.n	8000fce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3b05      	subs	r3, #5
 8000fa6:	221f      	movs	r2, #31
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4019      	ands	r1, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3b05      	subs	r3, #5
 8000fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	635a      	str	r2, [r3, #52]	; 0x34
 8000fcc:	e03c      	b.n	8001048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b0c      	cmp	r3, #12
 8000fd4:	d81c      	bhi.n	8001010 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b23      	subs	r3, #35	; 0x23
 8000fe8:	221f      	movs	r2, #31
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	4019      	ands	r1, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	3b23      	subs	r3, #35	; 0x23
 8001002:	fa00 f203 	lsl.w	r2, r0, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
 800100e:	e01b      	b.n	8001048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	3b41      	subs	r3, #65	; 0x41
 8001022:	221f      	movs	r2, #31
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b41      	subs	r3, #65	; 0x41
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b09      	cmp	r3, #9
 800104e:	d91c      	bls.n	800108a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68d9      	ldr	r1, [r3, #12]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	3b1e      	subs	r3, #30
 8001062:	2207      	movs	r2, #7
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	4019      	ands	r1, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6898      	ldr	r0, [r3, #8]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	3b1e      	subs	r3, #30
 800107c:	fa00 f203 	lsl.w	r2, r0, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	e019      	b.n	80010be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6919      	ldr	r1, [r3, #16]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	2207      	movs	r2, #7
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6898      	ldr	r0, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d003      	beq.n	80010ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ca:	2b11      	cmp	r3, #17
 80010cc:	d132      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_ADC_ConfigChannel+0x1e4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d125      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d126      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010f4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d11a      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_ConfigChannel+0x1e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_ADC_ConfigChannel+0x1ec>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	0c9a      	lsrs	r2, r3, #18
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001114:	e002      	b.n	800111c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3b01      	subs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x1b2>
 8001122:	e007      	b.n	8001134 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	f043 0220 	orr.w	r2, r3, #32
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40012400 	.word	0x40012400
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83

08001154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b01      	cmp	r3, #1
 8001170:	d039      	beq.n	80011e6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <ADC_Enable+0x9c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <ADC_Enable+0xa0>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0c9b      	lsrs	r3, r3, #18
 800118e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001190:	e002      	b.n	8001198 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	3b01      	subs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f9      	bne.n	8001192 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800119e:	f7ff fc1f 	bl	80009e0 <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011a4:	e018      	b.n	80011d8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011a6:	f7ff fc1b 	bl	80009e0 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d911      	bls.n	80011d8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f043 0210 	orr.w	r2, r3, #16
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e007      	b.n	80011e8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d1df      	bne.n	80011a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	431bde83 	.word	0x431bde83

080011f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b01      	cmp	r3, #1
 8001210:	d127      	bne.n	8001262 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0201 	bic.w	r2, r2, #1
 8001220:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001222:	f7ff fbdd 	bl	80009e0 <HAL_GetTick>
 8001226:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001228:	e014      	b.n	8001254 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800122a:	f7ff fbd9 	bl	80009e0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d90d      	bls.n	8001254 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f043 0210 	orr.w	r2, r3, #16
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e007      	b.n	8001264 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b01      	cmp	r3, #1
 8001260:	d0e3      	beq.n	800122a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_ADCEx_Calibration_Start+0x1e>
 8001286:	2302      	movs	r3, #2
 8001288:	e086      	b.n	8001398 <HAL_ADCEx_Calibration_Start+0x12c>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffb0 	bl	80011f8 <ADC_ConversionStop_Disable>
 8001298:	4603      	mov	r3, r0
 800129a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d175      	bne.n	800138e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012aa:	f023 0302 	bic.w	r3, r3, #2
 80012ae:	f043 0202 	orr.w	r2, r3, #2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_ADCEx_Calibration_Start+0x134>)
 80012b8:	681c      	ldr	r4, [r3, #0]
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 ffae 	bl	800221c <HAL_RCCEx_GetPeriphCLKFreq>
 80012c0:	4603      	mov	r3, r0
 80012c2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80012c6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80012c8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80012ca:	e002      	b.n	80012d2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f9      	bne.n	80012cc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff3b 	bl	8001154 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0208 	orr.w	r2, r2, #8
 80012ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012ee:	f7ff fb77 	bl	80009e0 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012f4:	e014      	b.n	8001320 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012f6:	f7ff fb73 	bl	80009e0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b0a      	cmp	r3, #10
 8001302:	d90d      	bls.n	8001320 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f023 0312 	bic.w	r3, r3, #18
 800130c:	f043 0210 	orr.w	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e03b      	b.n	8001398 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e3      	bne.n	80012f6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0204 	orr.w	r2, r2, #4
 800133c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800133e:	f7ff fb4f 	bl	80009e0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001344:	e014      	b.n	8001370 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001346:	f7ff fb4b 	bl	80009e0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b0a      	cmp	r3, #10
 8001352:	d90d      	bls.n	8001370 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f023 0312 	bic.w	r3, r3, #18
 800135c:	f043 0210 	orr.w	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e013      	b.n	8001398 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e3      	bne.n	8001346 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	20000000 	.word	0x20000000

080013a4 <__NVIC_SetPriorityGrouping>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4906      	ldr	r1, [pc, #24]	; (800143c <__NVIC_EnableIRQ+0x34>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff4f 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff64 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ffb2 	bl	8001494 <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff81 	bl	8001440 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff57 	bl	8001408 <__NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b08b      	sub	sp, #44	; 0x2c
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001576:	e127      	b.n	80017c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001578:	2201      	movs	r2, #1
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	429a      	cmp	r2, r3
 8001592:	f040 8116 	bne.w	80017c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b12      	cmp	r3, #18
 800159c:	d034      	beq.n	8001608 <HAL_GPIO_Init+0xa4>
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d80d      	bhi.n	80015be <HAL_GPIO_Init+0x5a>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d02b      	beq.n	80015fe <HAL_GPIO_Init+0x9a>
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d804      	bhi.n	80015b4 <HAL_GPIO_Init+0x50>
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d031      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d01c      	beq.n	80015ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e048      	b.n	8001646 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d043      	beq.n	8001640 <HAL_GPIO_Init+0xdc>
 80015b8:	2b11      	cmp	r3, #17
 80015ba:	d01b      	beq.n	80015f4 <HAL_GPIO_Init+0x90>
          break;
 80015bc:	e043      	b.n	8001646 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015be:	4a89      	ldr	r2, [pc, #548]	; (80017e4 <HAL_GPIO_Init+0x280>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d026      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015c4:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <HAL_GPIO_Init+0x280>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d806      	bhi.n	80015d8 <HAL_GPIO_Init+0x74>
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <HAL_GPIO_Init+0x284>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d020      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015d0:	4a86      	ldr	r2, [pc, #536]	; (80017ec <HAL_GPIO_Init+0x288>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01d      	beq.n	8001612 <HAL_GPIO_Init+0xae>
          break;
 80015d6:	e036      	b.n	8001646 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d8:	4a85      	ldr	r2, [pc, #532]	; (80017f0 <HAL_GPIO_Init+0x28c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015de:	4a85      	ldr	r2, [pc, #532]	; (80017f4 <HAL_GPIO_Init+0x290>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d016      	beq.n	8001612 <HAL_GPIO_Init+0xae>
 80015e4:	4a84      	ldr	r2, [pc, #528]	; (80017f8 <HAL_GPIO_Init+0x294>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0xae>
          break;
 80015ea:	e02c      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e028      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	3304      	adds	r3, #4
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e023      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	3308      	adds	r3, #8
 8001604:	623b      	str	r3, [r7, #32]
          break;
 8001606:	e01e      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	330c      	adds	r3, #12
 800160e:	623b      	str	r3, [r7, #32]
          break;
 8001610:	e019      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800161a:	2304      	movs	r3, #4
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e012      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001628:	2308      	movs	r3, #8
 800162a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	611a      	str	r2, [r3, #16]
          break;
 8001632:	e008      	b.n	8001646 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001634:	2308      	movs	r3, #8
 8001636:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	615a      	str	r2, [r3, #20]
          break;
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d801      	bhi.n	8001650 <HAL_GPIO_Init+0xec>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e001      	b.n	8001654 <HAL_GPIO_Init+0xf0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3304      	adds	r3, #4
 8001654:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d802      	bhi.n	8001662 <HAL_GPIO_Init+0xfe>
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x104>
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	3b08      	subs	r3, #8
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	210f      	movs	r1, #15
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	401a      	ands	r2, r3
 800167a:	6a39      	ldr	r1, [r7, #32]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8096 	beq.w	80017c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001696:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_GPIO_Init+0x298>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_GPIO_Init+0x298>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_GPIO_Init+0x298>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ae:	4a54      	ldr	r2, [pc, #336]	; (8001800 <HAL_GPIO_Init+0x29c>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_GPIO_Init+0x2a0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x19e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <HAL_GPIO_Init+0x2a4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x19a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a49      	ldr	r2, [pc, #292]	; (800180c <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x196>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_GPIO_Init+0x2ac>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x192>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x1a0>
 8001702:	2300      	movs	r3, #0
 8001704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001714:	493a      	ldr	r1, [pc, #232]	; (8001800 <HAL_GPIO_Init+0x29c>)
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172e:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4938      	ldr	r1, [pc, #224]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	43db      	mvns	r3, r3
 8001744:	4933      	ldr	r1, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001746:	4013      	ands	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	492e      	ldr	r1, [pc, #184]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	43db      	mvns	r3, r3
 800176c:	4929      	ldr	r1, [pc, #164]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800176e:	4013      	ands	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4924      	ldr	r1, [pc, #144]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	491f      	ldr	r1, [pc, #124]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 8001796:	4013      	ands	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	491a      	ldr	r1, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4915      	ldr	r1, [pc, #84]	; (8001814 <HAL_GPIO_Init+0x2b0>)
 80017be:	4013      	ands	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f aed0 	bne.w	8001578 <HAL_GPIO_Init+0x14>
  }
}
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	10210000 	.word	0x10210000
 80017e8:	10110000 	.word	0x10110000
 80017ec:	10120000 	.word	0x10120000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10320000 	.word	0x10320000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	40010800 	.word	0x40010800
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40011000 	.word	0x40011000
 8001810:	40011400 	.word	0x40011400
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e26c      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8087 	beq.w	8001946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00c      	beq.n	800185e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001844:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d112      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d10b      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d06c      	beq.n	8001944 <HAL_RCC_OscConfig+0x12c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d168      	bne.n	8001944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e246      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x76>
 8001880:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e02e      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x98>
 8001896:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a77      	ldr	r2, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0xbc>
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a71      	ldr	r2, [pc, #452]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6e      	ldr	r2, [pc, #440]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018d4:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a67      	ldr	r2, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f874 	bl	80009e0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f870 	bl	80009e0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1fa      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xe4>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff f860 	bl	80009e0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff f85c 	bl	80009e0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1e6      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x10c>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
 800196a:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1ba      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4939      	ldr	r1, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f815 	bl	80009e0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff f811 	bl	80009e0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e19b      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4927      	ldr	r1, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7fe fff4 	bl	80009e0 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fc:	f7fe fff0 	bl	80009e0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e17a      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03a      	beq.n	8001a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d019      	beq.n	8001a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7fe ffd4 	bl	80009e0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7fe ffd0 	bl	80009e0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e15a      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 fb0a 	bl	8002074 <RCC_Delay>
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7fe ffba 	bl	80009e0 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7fe ffb6 	bl	80009e0 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e140      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	42420000 	.word	0x42420000
 8001a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b9e      	ldr	r3, [pc, #632]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e9      	bne.n	8001a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a6 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b97      	ldr	r3, [pc, #604]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b94      	ldr	r3, [pc, #592]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a93      	ldr	r2, [pc, #588]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a8a      	ldr	r2, [pc, #552]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7fe ff77 	bl	80009e0 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7fe ff73 	bl	80009e0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0fd      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b81      	ldr	r3, [pc, #516]	; (8001d10 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x312>
 8001b1c:	4b7b      	ldr	r3, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a7a      	ldr	r2, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x334>
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a72      	ldr	r2, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	e01c      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x356>
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a6c      	ldr	r2, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a69      	ldr	r2, [pc, #420]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a66      	ldr	r2, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b64      	ldr	r3, [pc, #400]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a63      	ldr	r2, [pc, #396]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe ff27 	bl	80009e0 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe ff23 	bl	80009e0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0ab      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ee      	beq.n	8001b96 <HAL_RCC_OscConfig+0x37e>
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7fe ff11 	bl	80009e0 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7fe ff0d 	bl	80009e0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e095      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a47      	ldr	r2, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8081 	beq.w	8001d02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d061      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d146      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_RCC_OscConfig+0x4fc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fee1 	bl	80009e0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe fedd 	bl	80009e0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e067      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	492d      	ldr	r1, [pc, #180]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a19      	ldr	r1, [r3, #32]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	4927      	ldr	r1, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_OscConfig+0x4fc>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe feb1 	bl	80009e0 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe fead 	bl	80009e0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e037      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x46a>
 8001ca0:	e02f      	b.n	8001d02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_RCC_OscConfig+0x4fc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fe9a 	bl	80009e0 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7fe fe96 	bl	80009e0 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e020      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x498>
 8001cce:	e018      	b.n	8001d02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e013      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40007000 	.word	0x40007000
 8001d14:	42420060 	.word	0x42420060

08001d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0d0      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b67      	ldr	r3, [pc, #412]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4965      	ldr	r1, [pc, #404]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a58      	ldr	r2, [pc, #352]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	494d      	ldr	r1, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d040      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b47      	ldr	r3, [pc, #284]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d115      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e07f      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e073      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06b      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4936      	ldr	r1, [pc, #216]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7fe fdea 	bl	80009e0 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe fde6 	bl	80009e0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e053      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d210      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0207 	bic.w	r2, r3, #7
 8001e4e:	4922      	ldr	r1, [pc, #136]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e032      	b.n	8001ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4916      	ldr	r1, [pc, #88]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	490e      	ldr	r1, [pc, #56]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea6:	f000 f821 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001eaa:	4601      	mov	r1, r0
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	fa21 f303 	lsr.w	r3, r1, r3
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fc3a 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08006a94 	.word	0x08006a94
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b490      	push	{r4, r7}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef4:	1d3c      	adds	r4, r7, #4
 8001ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x40>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x46>
 8001f2a:	e02d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f3e:	4413      	add	r3, r2
 8001f40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	0c5b      	lsrs	r3, r3, #17
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f5e:	4413      	add	r3, r2
 8001f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6a:	fb02 f203 	mul.w	r2, r2, r3
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	e004      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	623b      	str	r3, [r7, #32]
      break;
 8001f86:	e002      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f8a:	623b      	str	r3, [r7, #32]
      break;
 8001f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc90      	pop	{r4, r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	08006a0c 	.word	0x08006a0c
 8001fa0:	08006a1c 	.word	0x08006a1c
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	003d0900 	.word	0x003d0900

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc8:	f7ff fff2 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08006aa4 	.word	0x08006aa4

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0adb      	lsrs	r3, r3, #11
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08006aa4 	.word	0x08006aa4

08002014 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	220f      	movs	r2, #15
 8002022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_RCC_GetClockConfig+0x58>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_RCC_GetClockConfig+0x58>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_GetClockConfig+0x58>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_GetClockConfig+0x58>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	08db      	lsrs	r3, r3, #3
 800204e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_GetClockConfig+0x5c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0207 	and.w	r2, r3, #7
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	40022000 	.word	0x40022000

08002074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <RCC_Delay+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <RCC_Delay+0x38>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a5b      	lsrs	r3, r3, #9
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002090:	bf00      	nop
  }
  while (Delay --);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <RCC_Delay+0x1c>
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d07d      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10d      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	61d3      	str	r3, [r2, #28]
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d118      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002104:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a42      	ldr	r2, [pc, #264]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002110:	f7fe fc66 	bl	80009e0 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	e008      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002118:	f7fe fc62 	bl	80009e0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e06d      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002136:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02e      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d027      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800216a:	4a29      	ldr	r2, [pc, #164]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d014      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fc31 	bl	80009e0 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe fc2d 	bl	80009e0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e036      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ee      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4917      	ldr	r1, [pc, #92]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	490b      	ldr	r1, [pc, #44]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4904      	ldr	r1, [pc, #16]	; (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40007000 	.word	0x40007000
 8002218:	42420440 	.word	0x42420440

0800221c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b08d      	sub	sp, #52	; 0x34
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002226:	f107 040c 	add.w	r4, r7, #12
 800222a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	2300      	movs	r3, #0
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d07f      	beq.n	8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002250:	2b10      	cmp	r3, #16
 8002252:	d002      	beq.n	800225a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d048      	beq.n	80022ea <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002258:	e08b      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d07f      	beq.n	800236c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	0c9b      	lsrs	r3, r3, #18
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002278:	4413      	add	r3, r2
 800227a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800227e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d018      	beq.n	80022bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c5b      	lsrs	r3, r3, #17
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002298:	4413      	add	r3, r2
 800229a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022aa:	4a37      	ldr	r2, [pc, #220]	; (8002388 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	e004      	b.n	80022c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	4a33      	ldr	r2, [pc, #204]	; (800238c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d102      	bne.n	80022da <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022d8:	e048      	b.n	800236c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022e8:	e040      	b.n	800236c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d108      	bne.n	800230e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
 800230c:	e01f      	b.n	800234e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002318:	d109      	bne.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002326:	f649 4340 	movw	r3, #40000	; 0x9c40
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	e00f      	b.n	800234e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002338:	d11a      	bne.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002346:	f24f 4324 	movw	r3, #62500	; 0xf424
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800234c:	e010      	b.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800234e:	e00f      	b.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002350:	f7ff fe4c 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0b9b      	lsrs	r3, r3, #14
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	3301      	adds	r3, #1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800236c:	bf00      	nop
 800236e:	e000      	b.n	8002372 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002370:	bf00      	nop
    }
  }
  return (frequency);
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002374:	4618      	mov	r0, r3
 8002376:	3734      	adds	r7, #52	; 0x34
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	08006a20 	.word	0x08006a20
 8002380:	08006a30 	.word	0x08006a30
 8002384:	40021000 	.word	0x40021000
 8002388:	007a1200 	.word	0x007a1200
 800238c:	003d0900 	.word	0x003d0900
 8002390:	aaaaaaab 	.word	0xaaaaaaab

08002394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e041      	b.n	800242a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe f974 	bl	80006a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 fc1c 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e03a      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_Base_Start_IT+0x98>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d010      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800

080024d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e041      	b.n	800256e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f839 	bl	8002576 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 fb7a 	bl	8002c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_TIM_PWM_Start+0x24>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e022      	b.n	80025f2 <HAL_TIM_PWM_Start+0x6a>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d109      	bne.n	80025c6 <HAL_TIM_PWM_Start+0x3e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e015      	b.n	80025f2 <HAL_TIM_PWM_Start+0x6a>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d109      	bne.n	80025e0 <HAL_TIM_PWM_Start+0x58>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e008      	b.n	80025f2 <HAL_TIM_PWM_Start+0x6a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e05e      	b.n	80026b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <HAL_TIM_PWM_Start+0x82>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002608:	e013      	b.n	8002632 <HAL_TIM_PWM_Start+0xaa>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d104      	bne.n	800261a <HAL_TIM_PWM_Start+0x92>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002618:	e00b      	b.n	8002632 <HAL_TIM_PWM_Start+0xaa>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d104      	bne.n	800262a <HAL_TIM_PWM_Start+0xa2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	e003      	b.n	8002632 <HAL_TIM_PWM_Start+0xaa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fd68 	bl	8003110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_TIM_PWM_Start+0x138>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d107      	bne.n	800265a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_TIM_PWM_Start+0x138>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00e      	beq.n	8002682 <HAL_TIM_PWM_Start+0xfa>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d009      	beq.n	8002682 <HAL_TIM_PWM_Start+0xfa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_TIM_PWM_Start+0x13c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIM_PWM_Start+0xfa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_TIM_PWM_Start+0x140>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b06      	cmp	r3, #6
 8002692:	d010      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	e007      	b.n	80026b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800

080026cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0202 	mvn.w	r2, #2
 80026f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa62 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa55 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa64 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b04      	cmp	r3, #4
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0204 	mvn.w	r2, #4
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa38 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa2b 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fa3a 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b08      	cmp	r3, #8
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0208 	mvn.w	r2, #8
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2204      	movs	r2, #4
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa0e 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa01 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fa10 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0210 	mvn.w	r2, #16
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2208      	movs	r2, #8
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9e4 	bl	8002bd8 <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f9d7 	bl	8002bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f9e6 	bl	8002bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0201 	mvn.w	r2, #1
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fd fea2 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d10e      	bne.n	800287c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d107      	bne.n	800287c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fcd5 	bl	8003226 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d10e      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d107      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9aa 	bl	8002bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d10e      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d107      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0220 	mvn.w	r2, #32
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fca0 	bl	8003214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0ac      	b.n	8002a50 <HAL_TIM_PWM_ConfigChannel+0x174>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	f200 809f 	bhi.w	8002a44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002906:	a201      	add	r2, pc, #4	; (adr r2, 800290c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002941 	.word	0x08002941
 8002910:	08002a45 	.word	0x08002a45
 8002914:	08002a45 	.word	0x08002a45
 8002918:	08002a45 	.word	0x08002a45
 800291c:	08002981 	.word	0x08002981
 8002920:	08002a45 	.word	0x08002a45
 8002924:	08002a45 	.word	0x08002a45
 8002928:	08002a45 	.word	0x08002a45
 800292c:	080029c3 	.word	0x080029c3
 8002930:	08002a45 	.word	0x08002a45
 8002934:	08002a45 	.word	0x08002a45
 8002938:	08002a45 	.word	0x08002a45
 800293c:	08002a03 	.word	0x08002a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f9c4 	bl	8002cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0204 	bic.w	r2, r2, #4
 800296a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6999      	ldr	r1, [r3, #24]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	619a      	str	r2, [r3, #24]
      break;
 800297e:	e062      	b.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fa0a 	bl	8002da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800299a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6999      	ldr	r1, [r3, #24]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	619a      	str	r2, [r3, #24]
      break;
 80029c0:	e041      	b.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa53 	bl	8002e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0208 	orr.w	r2, r2, #8
 80029dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0204 	bic.w	r2, r2, #4
 80029ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69d9      	ldr	r1, [r3, #28]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]
      break;
 8002a00:	e021      	b.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fa9d 	bl	8002f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69d9      	ldr	r1, [r3, #28]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	021a      	lsls	r2, r3, #8
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	61da      	str	r2, [r3, #28]
      break;
 8002a42:	e000      	b.n	8002a46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_ConfigClockSource+0x18>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0a6      	b.n	8002bbe <HAL_TIM_ConfigClockSource+0x166>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d067      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0x120>
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d80b      	bhi.n	8002ac4 <HAL_TIM_ConfigClockSource+0x6c>
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d073      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d802      	bhi.n	8002aba <HAL_TIM_ConfigClockSource+0x62>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d06f      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ab8:	e078      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d06c      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
 8002abe:	2b30      	cmp	r3, #48	; 0x30
 8002ac0:	d06a      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ac2:	e073      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ac4:	2b70      	cmp	r3, #112	; 0x70
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0x8c>
 8002ac8:	2b70      	cmp	r3, #112	; 0x70
 8002aca:	d804      	bhi.n	8002ad6 <HAL_TIM_ConfigClockSource+0x7e>
 8002acc:	2b50      	cmp	r3, #80	; 0x50
 8002ace:	d033      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0xe0>
 8002ad0:	2b60      	cmp	r3, #96	; 0x60
 8002ad2:	d041      	beq.n	8002b58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ad4:	e06a      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ada:	d066      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x152>
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae0:	d017      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002ae2:	e063      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6899      	ldr	r1, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f000 faed 	bl	80030d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
      break;
 8002b10:	e04c      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f000 fad6 	bl	80030d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b34:	609a      	str	r2, [r3, #8]
      break;
 8002b36:	e039      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f000 fa4d 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2150      	movs	r1, #80	; 0x50
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 faa4 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002b56:	e029      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f000 fa6b 	bl	8003040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2160      	movs	r1, #96	; 0x60
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fa94 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002b76:	e019      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f000 fa2d 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2140      	movs	r1, #64	; 0x40
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa84 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002b96:	e009      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 fa7b 	bl	800309e <TIM_ITRx_SetConfig>
        break;
 8002ba8:	e000      	b.n	8002bac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
	...

08002c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <TIM_Base_SetConfig+0xb8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_Base_SetConfig+0x30>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d007      	beq.n	8002c40 <TIM_Base_SetConfig+0x30>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <TIM_Base_SetConfig+0xbc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_Base_SetConfig+0x30>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <TIM_Base_SetConfig+0xc0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <TIM_Base_SetConfig+0xb8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <TIM_Base_SetConfig+0x62>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d007      	beq.n	8002c72 <TIM_Base_SetConfig+0x62>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <TIM_Base_SetConfig+0xbc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_Base_SetConfig+0x62>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <TIM_Base_SetConfig+0xc0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d108      	bne.n	8002c84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <TIM_Base_SetConfig+0xb8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d103      	bne.n	8002cb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	615a      	str	r2, [r3, #20]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40000400 	.word	0x40000400
 8002cd0:	40000800 	.word	0x40000800

08002cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f023 0201 	bic.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 0302 	bic.w	r3, r3, #2
 8002d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <TIM_OC1_SetConfig+0xc8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10c      	bne.n	8002d4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0308 	bic.w	r3, r3, #8
 8002d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <TIM_OC1_SetConfig+0xc8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d111      	bne.n	8002d76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00

08002da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f023 0210 	bic.w	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0320 	bic.w	r3, r3, #32
 8002dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <TIM_OC2_SetConfig+0xd0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10d      	bne.n	8002e1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <TIM_OC2_SetConfig+0xd0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d113      	bne.n	8002e4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00

08002e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0303 	bic.w	r3, r3, #3
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <TIM_OC3_SetConfig+0xd0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <TIM_OC3_SetConfig+0xd0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d113      	bne.n	8002f1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	621a      	str	r2, [r3, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00

08002f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	031b      	lsls	r3, r3, #12
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <TIM_OC4_SetConfig+0x98>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d109      	bne.n	8002fbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00

08002fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f023 0201 	bic.w	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 0210 	bic.w	r2, r3, #16
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800306a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	031b      	lsls	r3, r3, #12
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800307c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f043 0307 	orr.w	r3, r3, #7
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	021a      	lsls	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	609a      	str	r2, [r3, #8]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2201      	movs	r2, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	43db      	mvns	r3, r3
 8003132:	401a      	ands	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800316c:	2302      	movs	r3, #2
 800316e:	e046      	b.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d009      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10c      	bne.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800

08003214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323e:	f3ef 8305 	mrs	r3, IPSR
 8003242:	60bb      	str	r3, [r7, #8]
  return(result);
 8003244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	607b      	str	r3, [r7, #4]
  return(result);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <osKernelInitialize+0x32>
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <osKernelInitialize+0x60>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d109      	bne.n	8003272 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800325e:	f3ef 8311 	mrs	r3, BASEPRI
 8003262:	603b      	str	r3, [r7, #0]
  return(result);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800326a:	f06f 0305 	mvn.w	r3, #5
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e00c      	b.n	800328c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <osKernelInitialize+0x60>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <osKernelInitialize+0x60>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e002      	b.n	800328c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800328a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20000098 	.word	0x20000098

0800329c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032a2:	f3ef 8305 	mrs	r3, IPSR
 80032a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80032a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	607b      	str	r3, [r7, #4]
  return(result);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <osKernelStart+0x32>
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <osKernelStart+0x64>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d109      	bne.n	80032d6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032c2:	f3ef 8311 	mrs	r3, BASEPRI
 80032c6:	603b      	str	r3, [r7, #0]
  return(result);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80032ce:	f06f 0305 	mvn.w	r3, #5
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e00e      	b.n	80032f4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <osKernelStart+0x64>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <osKernelStart+0x64>)
 80032e0:	2202      	movs	r2, #2
 80032e2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80032e4:	f001 f864 	bl	80043b0 <vTaskStartScheduler>
      stat = osOK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e002      	b.n	80032f4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000098 	.word	0x20000098

08003304 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b092      	sub	sp, #72	; 0x48
 8003308:	af04      	add	r7, sp, #16
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003314:	f3ef 8305 	mrs	r3, IPSR
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 8094 	bne.w	800344a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003322:	f3ef 8310 	mrs	r3, PRIMASK
 8003326:	623b      	str	r3, [r7, #32]
  return(result);
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 808d 	bne.w	800344a <osThreadNew+0x146>
 8003330:	4b48      	ldr	r3, [pc, #288]	; (8003454 <osThreadNew+0x150>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d106      	bne.n	8003346 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003338:	f3ef 8311 	mrs	r3, BASEPRI
 800333c:	61fb      	str	r3, [r7, #28]
  return(result);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 8082 	bne.w	800344a <osThreadNew+0x146>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07e      	beq.n	800344a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003350:	2318      	movs	r3, #24
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003354:	2300      	movs	r3, #0
 8003356:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003358:	f107 031b 	add.w	r3, r7, #27
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d045      	beq.n	80033f6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <osThreadNew+0x74>
        name = attr->name;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <osThreadNew+0x9a>
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	2b38      	cmp	r3, #56	; 0x38
 8003390:	d805      	bhi.n	800339e <osThreadNew+0x9a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <osThreadNew+0x9e>
        return (NULL);
 800339e:	2300      	movs	r3, #0
 80033a0:	e054      	b.n	800344c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <osThreadNew+0xd4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b5b      	cmp	r3, #91	; 0x5b
 80033c0:	d90a      	bls.n	80033d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <osThreadNew+0xd4>
        mem = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d6:	e010      	b.n	80033fa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10c      	bne.n	80033fa <osThreadNew+0xf6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <osThreadNew+0xf6>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <osThreadNew+0xf6>
          mem = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f4:	e001      	b.n	80033fa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d110      	bne.n	8003422 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003408:	9202      	str	r2, [sp, #8]
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fe02 	bl	8004020 <xTaskCreateStatic>
 800341c:	4603      	mov	r3, r0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e013      	b.n	800344a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d110      	bne.n	800344a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	b29a      	uxth	r2, r3
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fe49 	bl	80040d2 <xTaskCreate>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <osThreadNew+0x146>
          hTask = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800344a:	697b      	ldr	r3, [r7, #20]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3738      	adds	r7, #56	; 0x38
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000098 	.word	0x20000098

08003458 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003460:	f3ef 8305 	mrs	r3, IPSR
 8003464:	613b      	str	r3, [r7, #16]
  return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346c:	f3ef 8310 	mrs	r3, PRIMASK
 8003470:	60fb      	str	r3, [r7, #12]
  return(result);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <osDelay+0x34>
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <osDelay+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d109      	bne.n	8003494 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003480:	f3ef 8311 	mrs	r3, BASEPRI
 8003484:	60bb      	str	r3, [r7, #8]
  return(result);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <osDelay+0x3c>
    stat = osErrorISR;
 800348c:	f06f 0305 	mvn.w	r3, #5
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e007      	b.n	80034a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 ff52 	bl	8004348 <vTaskDelay>
    }
  }

  return (stat);
 80034a4:	697b      	ldr	r3, [r7, #20]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000098 	.word	0x20000098

080034b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a06      	ldr	r2, [pc, #24]	; (80034dc <vApplicationGetIdleTaskMemory+0x28>)
 80034c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	2000009c 	.word	0x2000009c
 80034e0:	200000f8 	.word	0x200000f8

080034e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <vApplicationGetTimerTaskMemory+0x2c>)
 80034f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4a06      	ldr	r2, [pc, #24]	; (8003514 <vApplicationGetTimerTaskMemory+0x30>)
 80034fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	200002f8 	.word	0x200002f8
 8003514:	20000354 	.word	0x20000354

08003518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f103 0208 	add.w	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f103 0208 	add.w	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f103 0208 	add.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ca:	d103      	bne.n	80035d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e00c      	b.n	80035ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3308      	adds	r3, #8
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	e002      	b.n	80035e2 <vListInsert+0x2e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d2f6      	bcs.n	80035dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d103      	bne.n	8003658 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1e5a      	subs	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
	...

08003678 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	e7fe      	b.n	800369e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80036a0:	f001 ff9a 	bl	80055d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	441a      	add	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	22ff      	movs	r2, #255	; 0xff
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d114      	bne.n	8003720 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01a      	beq.n	8003734 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3310      	adds	r3, #16
 8003702:	4618      	mov	r0, r3
 8003704:	f001 f8d8 	bl	80048b8 <xTaskRemoveFromEventList>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <xQueueGenericReset+0xcc>)
 8003710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	e009      	b.n	8003734 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3310      	adds	r3, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fef7 	bl	8003518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3324      	adds	r3, #36	; 0x24
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff fef2 	bl	8003518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003734:	f001 ff7e 	bl	8005634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003738:	2301      	movs	r3, #1
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08e      	sub	sp, #56	; 0x38
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <xQueueGenericCreateStatic+0x28>
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
 800376e:	e7fe      	b.n	800376e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <xQueueGenericCreateStatic+0x42>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	e7fe      	b.n	8003788 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <xQueueGenericCreateStatic+0x4e>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <xQueueGenericCreateStatic+0x52>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <xQueueGenericCreateStatic+0x54>
 800379a:	2300      	movs	r3, #0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <xQueueGenericCreateStatic+0x6c>
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	e7fe      	b.n	80037b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <xQueueGenericCreateStatic+0x78>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <xQueueGenericCreateStatic+0x7c>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <xQueueGenericCreateStatic+0x7e>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <xQueueGenericCreateStatic+0x96>
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037de:	2350      	movs	r3, #80	; 0x50
 80037e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d009      	beq.n	80037fc <xQueueGenericCreateStatic+0xb4>
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e7fe      	b.n	80037fa <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800380e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f805 	bl	800382c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003824:	4618      	mov	r0, r3
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e002      	b.n	800384e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385a:	2101      	movs	r1, #1
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f7ff ff0b 	bl	8003678 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <xQueueGenericSend+0x30>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSend+0x3e>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSend+0x42>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSend+0x44>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <xQueueGenericSend+0x5c>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d103      	bne.n	80038de <xQueueGenericSend+0x6a>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <xQueueGenericSend+0x6e>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueGenericSend+0x70>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <xQueueGenericSend+0x88>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	e7fe      	b.n	80038fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038fc:	f001 f996 	bl	8004c2c <xTaskGetSchedulerState>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <xQueueGenericSend+0x98>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <xQueueGenericSend+0x9c>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <xQueueGenericSend+0x9e>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <xQueueGenericSend+0xb6>
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	e7fe      	b.n	8003928 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800392a:	f001 fe55 	bl	80055d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <xQueueGenericSend+0xcc>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d129      	bne.n	8003994 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 f9ff 	bl	8003d48 <prvCopyDataToQueue>
 800394a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ffad 	bl	80048b8 <xTaskRemoveFromEventList>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <xQueueGenericSend+0x1f0>)
 8003966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	e00a      	b.n	800398c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <xQueueGenericSend+0x1f0>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800398c:	f001 fe52 	bl	8005634 <vPortExitCritical>
				return pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	e063      	b.n	8003a5c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800399a:	f001 fe4b 	bl	8005634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	e05c      	b.n	8003a5c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 ffe5 	bl	800497c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b2:	2301      	movs	r3, #1
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039b6:	f001 fe3d 	bl	8005634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ba:	f000 fd5d 	bl	8004478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039be:	f001 fe0b 	bl	80055d8 <vPortEnterCritical>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ce:	d103      	bne.n	80039d8 <xQueueGenericSend+0x164>
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039de:	b25b      	sxtb	r3, r3
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e4:	d103      	bne.n	80039ee <xQueueGenericSend+0x17a>
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ee:	f001 fe21 	bl	8005634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f2:	1d3a      	adds	r2, r7, #4
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 ffd4 	bl	80049a8 <xTaskCheckForTimeOut>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d124      	bne.n	8003a50 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a08:	f000 fa96 	bl	8003f38 <prvIsQueueFull>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	3310      	adds	r3, #16
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fefe 	bl	800481c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a22:	f000 fa21 	bl	8003e68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a26:	f000 fd35 	bl	8004494 <xTaskResumeAll>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f af7c 	bne.w	800392a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <xQueueGenericSend+0x1f0>)
 8003a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	e772      	b.n	800392a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a46:	f000 fa0f 	bl	8003e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a4a:	f000 fd23 	bl	8004494 <xTaskResumeAll>
 8003a4e:	e76c      	b.n	800392a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a52:	f000 fa09 	bl	8003e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a56:	f000 fd1d 	bl	8004494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a5a:	2300      	movs	r3, #0
		}
	}
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3738      	adds	r7, #56	; 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <xQueueGenericSendFromISR+0x2c>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e7fe      	b.n	8003a92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x3a>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x3e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSendFromISR+0x40>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <xQueueGenericSendFromISR+0x58>
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d103      	bne.n	8003ace <xQueueGenericSendFromISR+0x66>
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericSendFromISR+0x6a>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericSendFromISR+0x6c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <xQueueGenericSendFromISR+0x84>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e7fe      	b.n	8003aea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aec:	f001 fe2e 	bl	800574c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003af0:	f3ef 8211 	mrs	r2, BASEPRI
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61ba      	str	r2, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <xQueueGenericSendFromISR+0xb6>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d12c      	bne.n	8003b78 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b2e:	f000 f90b 	bl	8003d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3a:	d112      	bne.n	8003b62 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d016      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 feb5 	bl	80048b8 <xTaskRemoveFromEventList>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	b25a      	sxtb	r2, r3
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b72:	2301      	movs	r3, #1
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b76:	e001      	b.n	8003b7c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3738      	adds	r7, #56	; 0x38
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	; 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <xQueueReceive+0x2e>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	e7fe      	b.n	8003bbc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <xQueueReceive+0x3c>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <xQueueReceive+0x40>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <xQueueReceive+0x42>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <xQueueReceive+0x5a>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e7fe      	b.n	8003be8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bea:	f001 f81f 	bl	8004c2c <xTaskGetSchedulerState>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <xQueueReceive+0x6a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <xQueueReceive+0x6e>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <xQueueReceive+0x70>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <xQueueReceive+0x88>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e7fe      	b.n	8003c16 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c18:	f001 fcde 	bl	80055d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01f      	beq.n	8003c68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c2c:	f000 f8f6 	bl	8003e1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00f      	beq.n	8003c60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fe37 	bl	80048b8 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c50:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <xQueueReceive+0x1b4>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c60:	f001 fce8 	bl	8005634 <vPortExitCritical>
				return pdPASS;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e069      	b.n	8003d3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c6e:	f001 fce1 	bl	8005634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e062      	b.n	8003d3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe7b 	bl	800497c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c86:	2301      	movs	r3, #1
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c8a:	f001 fcd3 	bl	8005634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c8e:	f000 fbf3 	bl	8004478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c92:	f001 fca1 	bl	80055d8 <vPortEnterCritical>
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c9c:	b25b      	sxtb	r3, r3
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d103      	bne.n	8003cac <xQueueReceive+0x11c>
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x132>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc2:	f001 fcb7 	bl	8005634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cc6:	1d3a      	adds	r2, r7, #4
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fe6a 	bl	80049a8 <xTaskCheckForTimeOut>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d123      	bne.n	8003d22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cdc:	f000 f916 	bl	8003f0c <prvIsQueueEmpty>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d017      	beq.n	8003d16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fd94 	bl	800481c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf6:	f000 f8b7 	bl	8003e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cfa:	f000 fbcb 	bl	8004494 <xTaskResumeAll>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d189      	bne.n	8003c18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <xQueueReceive+0x1b4>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	e780      	b.n	8003c18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f8a6 	bl	8003e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d1c:	f000 fbba 	bl	8004494 <xTaskResumeAll>
 8003d20:	e77a      	b.n	8003c18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d24:	f000 f8a0 	bl	8003e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d28:	f000 fbb4 	bl	8004494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f000 f8ed 	bl	8003f0c <prvIsQueueEmpty>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f43f af6f 	beq.w	8003c18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d14d      	bne.n	8003e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ff78 	bl	8004c68 <xTaskPriorityDisinherit>
 8003d78:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	e043      	b.n	8003e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d119      	bne.n	8003dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6898      	ldr	r0, [r3, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	461a      	mov	r2, r3
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	f001 ff14 	bl	8005bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	441a      	add	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d32b      	bcc.n	8003e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e026      	b.n	8003e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68d8      	ldr	r0, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	f001 fefa 	bl	8005bc0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	425b      	negs	r3, r3
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d207      	bcs.n	8003df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	425b      	negs	r3, r3
 8003df2:	441a      	add	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d105      	bne.n	8003e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e12:	697b      	ldr	r3, [r7, #20]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	441a      	add	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d303      	bcc.n	8003e50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f001 feb0 	bl	8005bc0 <memcpy>
	}
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e70:	f001 fbb2 	bl	80055d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e7c:	e011      	b.n	8003ea2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d012      	beq.n	8003eac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3324      	adds	r3, #36	; 0x24
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fd14 	bl	80048b8 <xTaskRemoveFromEventList>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e96:	f000 fde7 	bl	8004a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	dce9      	bgt.n	8003e7e <prvUnlockQueue+0x16>
 8003eaa:	e000      	b.n	8003eae <prvUnlockQueue+0x46>
					break;
 8003eac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	22ff      	movs	r2, #255	; 0xff
 8003eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003eb6:	f001 fbbd 	bl	8005634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003eba:	f001 fb8d 	bl	80055d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ec6:	e011      	b.n	8003eec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fcef 	bl	80048b8 <xTaskRemoveFromEventList>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ee0:	f000 fdc2 	bl	8004a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dce9      	bgt.n	8003ec8 <prvUnlockQueue+0x60>
 8003ef4:	e000      	b.n	8003ef8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ef6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f00:	f001 fb98 	bl	8005634 <vPortExitCritical>
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f14:	f001 fb60 	bl	80055d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e001      	b.n	8003f2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f2a:	f001 fb83 	bl	8005634 <vPortExitCritical>

	return xReturn;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f40:	f001 fb4a 	bl	80055d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d102      	bne.n	8003f56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e001      	b.n	8003f5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f5a:	f001 fb6b 	bl	8005634 <vPortExitCritical>

	return xReturn;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e014      	b.n	8003fa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <vQueueAddToRegistry+0x4c>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f84:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <vQueueAddToRegistry+0x4c>)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <vQueueAddToRegistry+0x4c>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f9a:	e005      	b.n	8003fa8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b07      	cmp	r3, #7
 8003fa6:	d9e7      	bls.n	8003f78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20001dfc 	.word	0x20001dfc

08003fb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fc8:	f001 fb06 	bl	80055d8 <vPortEnterCritical>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd8:	d103      	bne.n	8003fe2 <vQueueWaitForMessageRestricted+0x2a>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fee:	d103      	bne.n	8003ff8 <vQueueWaitForMessageRestricted+0x40>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ff8:	f001 fb1c 	bl	8005634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d106      	bne.n	8004012 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fc29 	bl	8004864 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff28 	bl	8003e68 <prvUnlockQueue>
	}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af04      	add	r7, sp, #16
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <xTaskCreateStatic+0x28>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	e7fe      	b.n	8004046 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <xTaskCreateStatic+0x42>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e7fe      	b.n	8004060 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004062:	235c      	movs	r3, #92	; 0x5c
 8004064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b5c      	cmp	r3, #92	; 0x5c
 800406a:	d009      	beq.n	8004080 <xTaskCreateStatic+0x60>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e7fe      	b.n	800407e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01e      	beq.n	80040c4 <xTaskCreateStatic+0xa4>
 8004086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004094:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800409e:	2300      	movs	r3, #0
 80040a0:	9303      	str	r3, [sp, #12]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	9302      	str	r3, [sp, #8]
 80040a6:	f107 0314 	add.w	r3, r7, #20
 80040aa:	9301      	str	r3, [sp, #4]
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f850 	bl	800415c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040be:	f000 f8d3 	bl	8004268 <prvAddNewTaskToReadyList>
 80040c2:	e001      	b.n	80040c8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040c8:	697b      	ldr	r3, [r7, #20]
	}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3728      	adds	r7, #40	; 0x28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b08c      	sub	sp, #48	; 0x30
 80040d6:	af04      	add	r7, sp, #16
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fb6c 	bl	80057c4 <pvPortMalloc>
 80040ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80040f4:	205c      	movs	r0, #92	; 0x5c
 80040f6:	f001 fb65 	bl	80057c4 <pvPortMalloc>
 80040fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
 8004108:	e005      	b.n	8004116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800410a:	6978      	ldr	r0, [r7, #20]
 800410c:	f001 fc1c 	bl	8005948 <vPortFree>
 8004110:	e001      	b.n	8004116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d017      	beq.n	800414c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	2300      	movs	r3, #0
 8004128:	9303      	str	r3, [sp, #12]
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	9302      	str	r3, [sp, #8]
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f80e 	bl	800415c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004140:	69f8      	ldr	r0, [r7, #28]
 8004142:	f000 f891 	bl	8004268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004146:	2301      	movs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	e002      	b.n	8004152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004152:	69bb      	ldr	r3, [r7, #24]
	}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	21a5      	movs	r1, #165	; 0xa5
 8004176:	f001 fd2e 	bl	8005bd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004184:	3b01      	subs	r3, #1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f023 0307 	bic.w	r3, r3, #7
 8004192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <prvInitialiseNewTask+0x56>
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e7fe      	b.n	80041b0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e012      	b.n	80041de <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	7819      	ldrb	r1, [r3, #0]
 80041c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	3334      	adds	r3, #52	; 0x34
 80041c8:	460a      	mov	r2, r1
 80041ca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d9e9      	bls.n	80041b8 <prvInitialiseNewTask+0x5c>
 80041e4:	e000      	b.n	80041e8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80041e6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	2b37      	cmp	r3, #55	; 0x37
 80041f4:	d901      	bls.n	80041fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041f6:	2337      	movs	r3, #55	; 0x37
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004204:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	2200      	movs	r2, #0
 800420a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	3304      	adds	r3, #4
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff f9a0 	bl	8003556 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004218:	3318      	adds	r3, #24
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f99b 	bl	8003556 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004224:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2200      	movs	r2, #0
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	69b8      	ldr	r0, [r7, #24]
 800424a:	f001 f8d7 	bl	80053fc <pxPortInitialiseStack>
 800424e:	4602      	mov	r2, r0
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004260:	bf00      	nop
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004270:	f001 f9b2 	bl	80055d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004274:	4b2d      	ldr	r3, [pc, #180]	; (800432c <prvAddNewTaskToReadyList+0xc4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a2c      	ldr	r2, [pc, #176]	; (800432c <prvAddNewTaskToReadyList+0xc4>)
 800427c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800427e:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <prvAddNewTaskToReadyList+0xc8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004286:	4a2a      	ldr	r2, [pc, #168]	; (8004330 <prvAddNewTaskToReadyList+0xc8>)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800428c:	4b27      	ldr	r3, [pc, #156]	; (800432c <prvAddNewTaskToReadyList+0xc4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d110      	bne.n	80042b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004294:	f000 fc0c 	bl	8004ab0 <prvInitialiseTaskLists>
 8004298:	e00d      	b.n	80042b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <prvAddNewTaskToReadyList+0xcc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042a2:	4b23      	ldr	r3, [pc, #140]	; (8004330 <prvAddNewTaskToReadyList+0xc8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d802      	bhi.n	80042b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042b0:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <prvAddNewTaskToReadyList+0xc8>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042b6:	4b20      	ldr	r3, [pc, #128]	; (8004338 <prvAddNewTaskToReadyList+0xd0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3301      	adds	r3, #1
 80042bc:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <prvAddNewTaskToReadyList+0xd0>)
 80042be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <prvAddNewTaskToReadyList+0xd0>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <prvAddNewTaskToReadyList+0xd4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d903      	bls.n	80042dc <prvAddNewTaskToReadyList+0x74>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <prvAddNewTaskToReadyList+0xd4>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4a15      	ldr	r2, [pc, #84]	; (8004340 <prvAddNewTaskToReadyList+0xd8>)
 80042ea:	441a      	add	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f7ff f93b 	bl	800356e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042f8:	f001 f99c 	bl	8005634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <prvAddNewTaskToReadyList+0xcc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00e      	beq.n	8004322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <prvAddNewTaskToReadyList+0xc8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	429a      	cmp	r2, r3
 8004310:	d207      	bcs.n	8004322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <prvAddNewTaskToReadyList+0xdc>)
 8004314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000c28 	.word	0x20000c28
 8004330:	20000754 	.word	0x20000754
 8004334:	20000c34 	.word	0x20000c34
 8004338:	20000c44 	.word	0x20000c44
 800433c:	20000c30 	.word	0x20000c30
 8004340:	20000758 	.word	0x20000758
 8004344:	e000ed04 	.word	0xe000ed04

08004348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <vTaskDelay+0x60>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <vTaskDelay+0x2e>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	e7fe      	b.n	8004374 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004376:	f000 f87f 	bl	8004478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800437a:	2100      	movs	r1, #0
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fcdf 	bl	8004d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004382:	f000 f887 	bl	8004494 <xTaskResumeAll>
 8004386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d107      	bne.n	800439e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <vTaskDelay+0x64>)
 8004390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000c50 	.word	0x20000c50
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043be:	463a      	mov	r2, r7
 80043c0:	1d39      	adds	r1, r7, #4
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f874 	bl	80034b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	9202      	str	r2, [sp, #8]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	460a      	mov	r2, r1
 80043de:	4920      	ldr	r1, [pc, #128]	; (8004460 <vTaskStartScheduler+0xb0>)
 80043e0:	4820      	ldr	r0, [pc, #128]	; (8004464 <vTaskStartScheduler+0xb4>)
 80043e2:	f7ff fe1d 	bl	8004020 <xTaskCreateStatic>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <vTaskStartScheduler+0xb8>)
 80043ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <vTaskStartScheduler+0xb8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043f4:	2301      	movs	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e001      	b.n	80043fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004404:	f000 fcf0 	bl	8004de8 <xTimerCreateTimerTask>
 8004408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <vTaskStartScheduler+0x8c>
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <vTaskStartScheduler+0xbc>)
 8004424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <vTaskStartScheduler+0xc0>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <vTaskStartScheduler+0xc4>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004436:	f001 f85f 	bl	80054f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800443a:	e00d      	b.n	8004458 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004442:	d109      	bne.n	8004458 <vTaskStartScheduler+0xa8>
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e7fe      	b.n	8004456 <vTaskStartScheduler+0xa6>
}
 8004458:	bf00      	nop
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	08006a34 	.word	0x08006a34
 8004464:	08004a81 	.word	0x08004a81
 8004468:	20000c4c 	.word	0x20000c4c
 800446c:	20000c48 	.word	0x20000c48
 8004470:	20000c34 	.word	0x20000c34
 8004474:	20000c2c 	.word	0x20000c2c

08004478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <vTaskSuspendAll+0x18>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3301      	adds	r3, #1
 8004482:	4a03      	ldr	r2, [pc, #12]	; (8004490 <vTaskSuspendAll+0x18>)
 8004484:	6013      	str	r3, [r2, #0]
}
 8004486:	bf00      	nop
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000c50 	.word	0x20000c50

08004494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <xTaskResumeAll+0x114>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <xTaskResumeAll+0x2a>
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	e7fe      	b.n	80044bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044be:	f001 f88b 	bl	80055d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044c2:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <xTaskResumeAll+0x114>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	4a37      	ldr	r2, [pc, #220]	; (80045a8 <xTaskResumeAll+0x114>)
 80044ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044cc:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <xTaskResumeAll+0x114>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d162      	bne.n	800459a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <xTaskResumeAll+0x118>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d05e      	beq.n	800459a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044dc:	e02f      	b.n	800453e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044de:	4b34      	ldr	r3, [pc, #208]	; (80045b0 <xTaskResumeAll+0x11c>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3318      	adds	r3, #24
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f89a 	bl	8003624 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff f895 	bl	8003624 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fe:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <xTaskResumeAll+0x120>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d903      	bls.n	800450e <xTaskResumeAll+0x7a>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <xTaskResumeAll+0x120>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a27      	ldr	r2, [pc, #156]	; (80045b8 <xTaskResumeAll+0x124>)
 800451c:	441a      	add	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7ff f822 	bl	800356e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <xTaskResumeAll+0x128>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004538:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <xTaskResumeAll+0x12c>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <xTaskResumeAll+0x11c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1cb      	bne.n	80044de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800454c:	f000 fb4a 	bl	8004be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004550:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <xTaskResumeAll+0x130>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800455c:	f000 f844 	bl	80045e8 <xTaskIncrementTick>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <xTaskResumeAll+0x12c>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3b01      	subs	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f1      	bne.n	800455c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <xTaskResumeAll+0x130>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <xTaskResumeAll+0x12c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004586:	2301      	movs	r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800458a:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <xTaskResumeAll+0x134>)
 800458c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800459a:	f001 f84b 	bl	8005634 <vPortExitCritical>

	return xAlreadyYielded;
 800459e:	68bb      	ldr	r3, [r7, #8]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000c50 	.word	0x20000c50
 80045ac:	20000c28 	.word	0x20000c28
 80045b0:	20000be8 	.word	0x20000be8
 80045b4:	20000c30 	.word	0x20000c30
 80045b8:	20000758 	.word	0x20000758
 80045bc:	20000754 	.word	0x20000754
 80045c0:	20000c3c 	.word	0x20000c3c
 80045c4:	20000c38 	.word	0x20000c38
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <xTaskGetTickCount+0x18>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045d8:	687b      	ldr	r3, [r7, #4]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	20000c2c 	.word	0x20000c2c

080045e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f2:	4b51      	ldr	r3, [pc, #324]	; (8004738 <xTaskIncrementTick+0x150>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f040 808d 	bne.w	8004716 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045fc:	4b4f      	ldr	r3, [pc, #316]	; (800473c <xTaskIncrementTick+0x154>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3301      	adds	r3, #1
 8004602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004604:	4a4d      	ldr	r2, [pc, #308]	; (800473c <xTaskIncrementTick+0x154>)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d11f      	bne.n	8004650 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004610:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <xTaskIncrementTick+0x158>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <xTaskIncrementTick+0x46>
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	e7fe      	b.n	800462c <xTaskIncrementTick+0x44>
 800462e:	4b44      	ldr	r3, [pc, #272]	; (8004740 <xTaskIncrementTick+0x158>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <xTaskIncrementTick+0x15c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a41      	ldr	r2, [pc, #260]	; (8004740 <xTaskIncrementTick+0x158>)
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4a41      	ldr	r2, [pc, #260]	; (8004744 <xTaskIncrementTick+0x15c>)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <xTaskIncrementTick+0x160>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3301      	adds	r3, #1
 8004648:	4a3f      	ldr	r2, [pc, #252]	; (8004748 <xTaskIncrementTick+0x160>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	f000 faca 	bl	8004be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004650:	4b3e      	ldr	r3, [pc, #248]	; (800474c <xTaskIncrementTick+0x164>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d34e      	bcc.n	80046f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <xTaskIncrementTick+0x158>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <xTaskIncrementTick+0x80>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <xTaskIncrementTick+0x82>
 8004668:	2300      	movs	r3, #0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	4b37      	ldr	r3, [pc, #220]	; (800474c <xTaskIncrementTick+0x164>)
 8004670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004674:	601a      	str	r2, [r3, #0]
					break;
 8004676:	e03f      	b.n	80046f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004678:	4b31      	ldr	r3, [pc, #196]	; (8004740 <xTaskIncrementTick+0x158>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d203      	bcs.n	8004698 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004690:	4a2e      	ldr	r2, [pc, #184]	; (800474c <xTaskIncrementTick+0x164>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6013      	str	r3, [r2, #0]
						break;
 8004696:	e02f      	b.n	80046f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe ffc1 	bl	8003624 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3318      	adds	r3, #24
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe ffb8 	bl	8003624 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <xTaskIncrementTick+0x168>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d903      	bls.n	80046c8 <xTaskIncrementTick+0xe0>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4a22      	ldr	r2, [pc, #136]	; (8004750 <xTaskIncrementTick+0x168>)
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <xTaskIncrementTick+0x16c>)
 80046d6:	441a      	add	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	3304      	adds	r3, #4
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f7fe ff45 	bl	800356e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <xTaskIncrementTick+0x170>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3b3      	bcc.n	800465a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046f6:	e7b0      	b.n	800465a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046f8:	4b17      	ldr	r3, [pc, #92]	; (8004758 <xTaskIncrementTick+0x170>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	4915      	ldr	r1, [pc, #84]	; (8004754 <xTaskIncrementTick+0x16c>)
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d907      	bls.n	8004720 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e004      	b.n	8004720 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <xTaskIncrementTick+0x174>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a0f      	ldr	r2, [pc, #60]	; (800475c <xTaskIncrementTick+0x174>)
 800471e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004720:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <xTaskIncrementTick+0x178>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800472c:	697b      	ldr	r3, [r7, #20]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000c50 	.word	0x20000c50
 800473c:	20000c2c 	.word	0x20000c2c
 8004740:	20000be0 	.word	0x20000be0
 8004744:	20000be4 	.word	0x20000be4
 8004748:	20000c40 	.word	0x20000c40
 800474c:	20000c48 	.word	0x20000c48
 8004750:	20000c30 	.word	0x20000c30
 8004754:	20000758 	.word	0x20000758
 8004758:	20000754 	.word	0x20000754
 800475c:	20000c38 	.word	0x20000c38
 8004760:	20000c3c 	.word	0x20000c3c

08004764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <vTaskSwitchContext+0xa4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004772:	4b26      	ldr	r3, [pc, #152]	; (800480c <vTaskSwitchContext+0xa8>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004778:	e040      	b.n	80047fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <vTaskSwitchContext+0xa8>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <vTaskSwitchContext+0xac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e00f      	b.n	80047a8 <vTaskSwitchContext+0x44>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <vTaskSwitchContext+0x3e>
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	e7fe      	b.n	80047a0 <vTaskSwitchContext+0x3c>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	491a      	ldr	r1, [pc, #104]	; (8004814 <vTaskSwitchContext+0xb0>)
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0e5      	beq.n	8004788 <vTaskSwitchContext+0x24>
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <vTaskSwitchContext+0xb0>)
 80047c8:	4413      	add	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3308      	adds	r3, #8
 80047de:	429a      	cmp	r2, r3
 80047e0:	d104      	bne.n	80047ec <vTaskSwitchContext+0x88>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <vTaskSwitchContext+0xb4>)
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <vTaskSwitchContext+0xac>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000c50 	.word	0x20000c50
 800480c:	20000c3c 	.word	0x20000c3c
 8004810:	20000c30 	.word	0x20000c30
 8004814:	20000758 	.word	0x20000758
 8004818:	20000754 	.word	0x20000754

0800481c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <vTaskPlaceOnEventList+0x24>
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e7fe      	b.n	800483e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <vTaskPlaceOnEventList+0x44>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3318      	adds	r3, #24
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fe feb3 	bl	80035b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800484e:	2101      	movs	r1, #1
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	f000 fa75 	bl	8004d40 <prvAddCurrentTaskToDelayedList>
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000754 	.word	0x20000754

08004864 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <vTaskPlaceOnEventListRestricted+0x26>
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e7fe      	b.n	8004888 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <vTaskPlaceOnEventListRestricted+0x50>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3318      	adds	r3, #24
 8004890:	4619      	mov	r1, r3
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7fe fe6b 	bl	800356e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	68b8      	ldr	r0, [r7, #8]
 80048a8:	f000 fa4a 	bl	8004d40 <prvAddCurrentTaskToDelayedList>
	}
 80048ac:	bf00      	nop
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000754 	.word	0x20000754

080048b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <xTaskRemoveFromEventList+0x2a>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e7fe      	b.n	80048e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3318      	adds	r3, #24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fe9c 	bl	8003624 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <xTaskRemoveFromEventList+0xac>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11d      	bne.n	8004930 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fe93 	bl	8003624 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004902:	4b19      	ldr	r3, [pc, #100]	; (8004968 <xTaskRemoveFromEventList+0xb0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d903      	bls.n	8004912 <xTaskRemoveFromEventList+0x5a>
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	4a16      	ldr	r2, [pc, #88]	; (8004968 <xTaskRemoveFromEventList+0xb0>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <xTaskRemoveFromEventList+0xb4>)
 8004920:	441a      	add	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fe fe20 	bl	800356e <vListInsertEnd>
 800492e:	e005      	b.n	800493c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3318      	adds	r3, #24
 8004934:	4619      	mov	r1, r3
 8004936:	480e      	ldr	r0, [pc, #56]	; (8004970 <xTaskRemoveFromEventList+0xb8>)
 8004938:	f7fe fe19 	bl	800356e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <xTaskRemoveFromEventList+0xbc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	429a      	cmp	r2, r3
 8004948:	d905      	bls.n	8004956 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <xTaskRemoveFromEventList+0xc0>)
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e001      	b.n	800495a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800495a:	697b      	ldr	r3, [r7, #20]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000c50 	.word	0x20000c50
 8004968:	20000c30 	.word	0x20000c30
 800496c:	20000758 	.word	0x20000758
 8004970:	20000be8 	.word	0x20000be8
 8004974:	20000754 	.word	0x20000754
 8004978:	20000c3c 	.word	0x20000c3c

0800497c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <vTaskInternalSetTimeOutState+0x24>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <vTaskInternalSetTimeOutState+0x28>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	605a      	str	r2, [r3, #4]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000c40 	.word	0x20000c40
 80049a4:	20000c2c 	.word	0x20000c2c

080049a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <xTaskCheckForTimeOut+0x24>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e7fe      	b.n	80049ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <xTaskCheckForTimeOut+0x3e>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e7fe      	b.n	80049e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80049e6:	f000 fdf7 	bl	80055d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <xTaskCheckForTimeOut+0xb8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a02:	d102      	bne.n	8004a0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e023      	b.n	8004a52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <xTaskCheckForTimeOut+0xbc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d007      	beq.n	8004a26 <xTaskCheckForTimeOut+0x7e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e015      	b.n	8004a52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d20b      	bcs.n	8004a48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff ff9d 	bl	800497c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	e004      	b.n	8004a52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a52:	f000 fdef 	bl	8005634 <vPortExitCritical>

	return xReturn;
 8004a56:	69fb      	ldr	r3, [r7, #28]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000c2c 	.word	0x20000c2c
 8004a64:	20000c40 	.word	0x20000c40

08004a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <vTaskMissedYield+0x14>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
}
 8004a72:	bf00      	nop
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000c3c 	.word	0x20000c3c

08004a80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a88:	f000 f852 	bl	8004b30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <prvIdleTask+0x28>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d9f9      	bls.n	8004a88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <prvIdleTask+0x2c>)
 8004a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004aa4:	e7f0      	b.n	8004a88 <prvIdleTask+0x8>
 8004aa6:	bf00      	nop
 8004aa8:	20000758 	.word	0x20000758
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	607b      	str	r3, [r7, #4]
 8004aba:	e00c      	b.n	8004ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <prvInitialiseTaskLists+0x60>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fd24 	bl	8003518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b37      	cmp	r3, #55	; 0x37
 8004ada:	d9ef      	bls.n	8004abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004adc:	480d      	ldr	r0, [pc, #52]	; (8004b14 <prvInitialiseTaskLists+0x64>)
 8004ade:	f7fe fd1b 	bl	8003518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ae2:	480d      	ldr	r0, [pc, #52]	; (8004b18 <prvInitialiseTaskLists+0x68>)
 8004ae4:	f7fe fd18 	bl	8003518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ae8:	480c      	ldr	r0, [pc, #48]	; (8004b1c <prvInitialiseTaskLists+0x6c>)
 8004aea:	f7fe fd15 	bl	8003518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aee:	480c      	ldr	r0, [pc, #48]	; (8004b20 <prvInitialiseTaskLists+0x70>)
 8004af0:	f7fe fd12 	bl	8003518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004af4:	480b      	ldr	r0, [pc, #44]	; (8004b24 <prvInitialiseTaskLists+0x74>)
 8004af6:	f7fe fd0f 	bl	8003518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <prvInitialiseTaskLists+0x78>)
 8004afc:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <prvInitialiseTaskLists+0x64>)
 8004afe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <prvInitialiseTaskLists+0x7c>)
 8004b02:	4a05      	ldr	r2, [pc, #20]	; (8004b18 <prvInitialiseTaskLists+0x68>)
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000758 	.word	0x20000758
 8004b14:	20000bb8 	.word	0x20000bb8
 8004b18:	20000bcc 	.word	0x20000bcc
 8004b1c:	20000be8 	.word	0x20000be8
 8004b20:	20000bfc 	.word	0x20000bfc
 8004b24:	20000c14 	.word	0x20000c14
 8004b28:	20000be0 	.word	0x20000be0
 8004b2c:	20000be4 	.word	0x20000be4

08004b30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b36:	e019      	b.n	8004b6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b38:	f000 fd4e 	bl	80055d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <prvCheckTasksWaitingTermination+0x4c>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe fd6b 	bl	8003624 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <prvCheckTasksWaitingTermination+0x50>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <prvCheckTasksWaitingTermination+0x50>)
 8004b56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <prvCheckTasksWaitingTermination+0x54>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <prvCheckTasksWaitingTermination+0x54>)
 8004b60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b62:	f000 fd67 	bl	8005634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f80e 	bl	8004b88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <prvCheckTasksWaitingTermination+0x54>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e1      	bne.n	8004b38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000bfc 	.word	0x20000bfc
 8004b80:	20000c28 	.word	0x20000c28
 8004b84:	20000c10 	.word	0x20000c10

08004b88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fed2 	bl	8005948 <vPortFree>
				vPortFree( pxTCB );
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fecf 	bl	8005948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004baa:	e017      	b.n	8004bdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d103      	bne.n	8004bbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fec6 	bl	8005948 <vPortFree>
	}
 8004bbc:	e00e      	b.n	8004bdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d009      	beq.n	8004bdc <prvDeleteTCB+0x54>
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e7fe      	b.n	8004bda <prvDeleteTCB+0x52>
	}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <prvResetNextTaskUnblockTime+0x40>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <prvResetNextTaskUnblockTime+0x14>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <prvResetNextTaskUnblockTime+0x16>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <prvResetNextTaskUnblockTime+0x44>)
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c04:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c06:	e008      	b.n	8004c1a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <prvResetNextTaskUnblockTime+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <prvResetNextTaskUnblockTime+0x44>)
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	20000be0 	.word	0x20000be0
 8004c28:	20000c48 	.word	0x20000c48

08004c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <xTaskGetSchedulerState+0x34>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	e008      	b.n	8004c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <xTaskGetSchedulerState+0x38>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	e001      	b.n	8004c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c52:	687b      	ldr	r3, [r7, #4]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000c34 	.word	0x20000c34
 8004c64:	20000c50 	.word	0x20000c50

08004c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d054      	beq.n	8004d28 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <xTaskPriorityDisinherit+0xcc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d009      	beq.n	8004c9c <xTaskPriorityDisinherit+0x34>
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e7fe      	b.n	8004c9a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <xTaskPriorityDisinherit+0x50>
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	e7fe      	b.n	8004cb6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	1e5a      	subs	r2, r3, #1
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d02c      	beq.n	8004d28 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d128      	bne.n	8004d28 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fca2 	bl	8003624 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <xTaskPriorityDisinherit+0xd0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d903      	bls.n	8004d08 <xTaskPriorityDisinherit+0xa0>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <xTaskPriorityDisinherit+0xd0>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <xTaskPriorityDisinherit+0xd4>)
 8004d16:	441a      	add	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f7fe fc25 	bl	800356e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d28:	697b      	ldr	r3, [r7, #20]
	}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000754 	.word	0x20000754
 8004d38:	20000c30 	.word	0x20000c30
 8004d3c:	20000758 	.word	0x20000758

08004d40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d4a:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d50:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fc64 	bl	8003624 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d62:	d10a      	bne.n	8004d7a <prvAddCurrentTaskToDelayedList+0x3a>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4819      	ldr	r0, [pc, #100]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d74:	f7fe fbfb 	bl	800356e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d78:	e026      	b.n	8004dc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d209      	bcs.n	8004da6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7fe fc08 	bl	80035b4 <vListInsert>
}
 8004da4:	e010      	b.n	8004dc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da6:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7fe fbfe 	bl	80035b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d202      	bcs.n	8004dc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dc2:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000c2c 	.word	0x20000c2c
 8004dd4:	20000754 	.word	0x20000754
 8004dd8:	20000c14 	.word	0x20000c14
 8004ddc:	20000be4 	.word	0x20000be4
 8004de0:	20000be0 	.word	0x20000be0
 8004de4:	20000c48 	.word	0x20000c48

08004de8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004df2:	f000 fac3 	bl	800537c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004df6:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <xTimerCreateTimerTask+0x80>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d021      	beq.n	8004e42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e06:	1d3a      	adds	r2, r7, #4
 8004e08:	f107 0108 	add.w	r1, r7, #8
 8004e0c:	f107 030c 	add.w	r3, r7, #12
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fb67 	bl	80034e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	9202      	str	r2, [sp, #8]
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	2302      	movs	r3, #2
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	460a      	mov	r2, r1
 8004e28:	4910      	ldr	r1, [pc, #64]	; (8004e6c <xTimerCreateTimerTask+0x84>)
 8004e2a:	4811      	ldr	r0, [pc, #68]	; (8004e70 <xTimerCreateTimerTask+0x88>)
 8004e2c:	f7ff f8f8 	bl	8004020 <xTaskCreateStatic>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <xTimerCreateTimerTask+0x8c>)
 8004e34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <xTimerCreateTimerTask+0x8c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <xTimerCreateTimerTask+0x74>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e7fe      	b.n	8004e5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004e5c:	697b      	ldr	r3, [r7, #20]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000c84 	.word	0x20000c84
 8004e6c:	08006a3c 	.word	0x08006a3c
 8004e70:	08004f91 	.word	0x08004f91
 8004e74:	20000c88 	.word	0x20000c88

08004e78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <xTimerGenericCommand+0x2c>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e7fe      	b.n	8004ea2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ea4:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <xTimerGenericCommand+0x94>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d02a      	beq.n	8004f02 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	dc18      	bgt.n	8004ef0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ebe:	f7ff feb5 	bl	8004c2c <xTaskGetSchedulerState>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d109      	bne.n	8004edc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ec8:	4b10      	ldr	r3, [pc, #64]	; (8004f0c <xTimerGenericCommand+0x94>)
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	f107 0110 	add.w	r1, r7, #16
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed4:	f7fe fcce 	bl	8003874 <xQueueGenericSend>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24
 8004eda:	e012      	b.n	8004f02 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <xTimerGenericCommand+0x94>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f107 0110 	add.w	r1, r7, #16
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f7fe fcc4 	bl	8003874 <xQueueGenericSend>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24
 8004eee:	e008      	b.n	8004f02 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <xTimerGenericCommand+0x94>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	f107 0110 	add.w	r1, r7, #16
 8004ef8:	2300      	movs	r3, #0
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	f7fe fdb4 	bl	8003a68 <xQueueGenericSendFromISR>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3728      	adds	r7, #40	; 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000c84 	.word	0x20000c84

08004f10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f1a:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <prvProcessExpiredTimer+0x7c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe fb7b 	bl	8003624 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d121      	bne.n	8004f7a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	18d1      	adds	r1, r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f000 f8c8 	bl	80050d8 <prvInsertTimerInActiveList>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d015      	beq.n	8004f7a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2300      	movs	r3, #0
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	2100      	movs	r1, #0
 8004f58:	6978      	ldr	r0, [r7, #20]
 8004f5a:	f7ff ff8d 	bl	8004e78 <xTimerGenericCommand>
 8004f5e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <prvProcessExpiredTimer+0x6a>
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e7fe      	b.n	8004f78 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	6978      	ldr	r0, [r7, #20]
 8004f80:	4798      	blx	r3
}
 8004f82:	bf00      	nop
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000c7c 	.word	0x20000c7c

08004f90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f857 	bl	8005050 <prvGetNextExpireTime>
 8004fa2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f803 	bl	8004fb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004fae:	f000 f8d5 	bl	800515c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004fb2:	e7f1      	b.n	8004f98 <prvTimerTask+0x8>

08004fb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fbe:	f7ff fa5b 	bl	8004478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fc2:	f107 0308 	add.w	r3, r7, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f866 	bl	8005098 <prvSampleTimeNow>
 8004fcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d130      	bne.n	8005036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <prvProcessTimerOrBlockTask+0x3c>
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d806      	bhi.n	8004ff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fe2:	f7ff fa57 	bl	8004494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff91 	bl	8004f10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fee:	e024      	b.n	800503a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <prvProcessTimerOrBlockTask+0x90>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <prvProcessTimerOrBlockTask+0x94>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	f7fe ffcf 	bl	8003fb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800501a:	f7ff fa3b 	bl	8004494 <xTaskResumeAll>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <prvProcessTimerOrBlockTask+0x98>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
}
 8005034:	e001      	b.n	800503a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005036:	f7ff fa2d 	bl	8004494 <xTaskResumeAll>
}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000c80 	.word	0x20000c80
 8005048:	20000c84 	.word	0x20000c84
 800504c:	e000ed04 	.word	0xe000ed04

08005050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005058:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <prvGetNextExpireTime+0x44>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d105      	bne.n	8005082 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <prvGetNextExpireTime+0x44>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e001      	b.n	8005086 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000c7c 	.word	0x20000c7c

08005098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80050a0:	f7ff fa94 	bl	80045cc <xTaskGetTickCount>
 80050a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <prvSampleTimeNow+0x3c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d205      	bcs.n	80050bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050b0:	f000 f904 	bl	80052bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e002      	b.n	80050c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <prvSampleTimeNow+0x3c>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050c8:	68fb      	ldr	r3, [r7, #12]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000c8c 	.word	0x20000c8c

080050d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d812      	bhi.n	8005124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1ad2      	subs	r2, r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e01b      	b.n	800514a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005112:	4b10      	ldr	r3, [pc, #64]	; (8005154 <prvInsertTimerInActiveList+0x7c>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fe fa49 	bl	80035b4 <vListInsert>
 8005122:	e012      	b.n	800514a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d206      	bcs.n	800513a <prvInsertTimerInActiveList+0x62>
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e007      	b.n	800514a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <prvInsertTimerInActiveList+0x80>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7fe fa35 	bl	80035b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800514a:	697b      	ldr	r3, [r7, #20]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000c80 	.word	0x20000c80
 8005158:	20000c7c 	.word	0x20000c7c

0800515c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08e      	sub	sp, #56	; 0x38
 8005160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005162:	e099      	b.n	8005298 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	da17      	bge.n	800519a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	3304      	adds	r3, #4
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <prvProcessReceivedCommands+0x2e>
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	e7fe      	b.n	8005188 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005190:	6850      	ldr	r0, [r2, #4]
 8005192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005194:	6892      	ldr	r2, [r2, #8]
 8005196:	4611      	mov	r1, r2
 8005198:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db7a      	blt.n	8005296 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	3304      	adds	r3, #4
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fa37 	bl	8003624 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051b6:	463b      	mov	r3, r7
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff ff6d 	bl	8005098 <prvSampleTimeNow>
 80051be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	d868      	bhi.n	8005298 <prvProcessReceivedCommands+0x13c>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <prvProcessReceivedCommands+0x70>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051f5 	.word	0x080051f5
 80051d8:	08005299 	.word	0x08005299
 80051dc:	0800524f 	.word	0x0800524f
 80051e0:	08005285 	.word	0x08005285
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	080051f5 	.word	0x080051f5
 80051ec:	08005299 	.word	0x08005299
 80051f0:	0800524f 	.word	0x0800524f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	18d1      	adds	r1, r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005202:	f7ff ff69 	bl	80050d8 <prvInsertTimerInActiveList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d045      	beq.n	8005298 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005212:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d13d      	bne.n	8005298 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	441a      	add	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2300      	movs	r3, #0
 800522a:	2100      	movs	r1, #0
 800522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522e:	f7ff fe23 	bl	8004e78 <xTimerGenericCommand>
 8005232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d12e      	bne.n	8005298 <prvProcessReceivedCommands+0x13c>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e7fe      	b.n	800524c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <prvProcessReceivedCommands+0x114>
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e7fe      	b.n	800526e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	18d1      	adds	r1, r2, r3
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527e:	f7ff ff2b 	bl	80050d8 <prvInsertTimerInActiveList>
					break;
 8005282:	e009      	b.n	8005298 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800528e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005290:	f000 fb5a 	bl	8005948 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005294:	e000      	b.n	8005298 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005296:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <prvProcessReceivedCommands+0x15c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	1d39      	adds	r1, r7, #4
 800529e:	2200      	movs	r2, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe fc75 	bl	8003b90 <xQueueReceive>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f af5b 	bne.w	8005164 <prvProcessReceivedCommands+0x8>
	}
}
 80052ae:	bf00      	nop
 80052b0:	3730      	adds	r7, #48	; 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000c84 	.word	0x20000c84

080052bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052c2:	e044      	b.n	800534e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <prvSwitchTimerLists+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052ce:	4b29      	ldr	r3, [pc, #164]	; (8005374 <prvSwitchTimerLists+0xb8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3304      	adds	r3, #4
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe f9a1 	bl	8003624 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d12d      	bne.n	800534e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d90e      	bls.n	8005322 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005310:	4b18      	ldr	r3, [pc, #96]	; (8005374 <prvSwitchTimerLists+0xb8>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7fe f94a 	bl	80035b4 <vListInsert>
 8005320:	e015      	b.n	800534e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005322:	2300      	movs	r3, #0
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	2100      	movs	r1, #0
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff fda3 	bl	8004e78 <xTimerGenericCommand>
 8005332:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <prvSwitchTimerLists+0x92>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	e7fe      	b.n	800534c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <prvSwitchTimerLists+0xb8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1b5      	bne.n	80052c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <prvSwitchTimerLists+0xb8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <prvSwitchTimerLists+0xbc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a04      	ldr	r2, [pc, #16]	; (8005374 <prvSwitchTimerLists+0xb8>)
 8005364:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005366:	4a04      	ldr	r2, [pc, #16]	; (8005378 <prvSwitchTimerLists+0xbc>)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000c7c 	.word	0x20000c7c
 8005378:	20000c80 	.word	0x20000c80

0800537c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005382:	f000 f929 	bl	80055d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <prvCheckForValidListAndQueue+0x60>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d120      	bne.n	80053d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800538e:	4814      	ldr	r0, [pc, #80]	; (80053e0 <prvCheckForValidListAndQueue+0x64>)
 8005390:	f7fe f8c2 	bl	8003518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005394:	4813      	ldr	r0, [pc, #76]	; (80053e4 <prvCheckForValidListAndQueue+0x68>)
 8005396:	f7fe f8bf 	bl	8003518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <prvCheckForValidListAndQueue+0x6c>)
 800539c:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <prvCheckForValidListAndQueue+0x64>)
 800539e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <prvCheckForValidListAndQueue+0x70>)
 80053a2:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <prvCheckForValidListAndQueue+0x68>)
 80053a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <prvCheckForValidListAndQueue+0x74>)
 80053ac:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <prvCheckForValidListAndQueue+0x78>)
 80053ae:	2110      	movs	r1, #16
 80053b0:	200a      	movs	r0, #10
 80053b2:	f7fe f9c9 	bl	8003748 <xQueueGenericCreateStatic>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <prvCheckForValidListAndQueue+0x60>)
 80053ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053bc:	4b07      	ldr	r3, [pc, #28]	; (80053dc <prvCheckForValidListAndQueue+0x60>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <prvCheckForValidListAndQueue+0x60>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	490b      	ldr	r1, [pc, #44]	; (80053f8 <prvCheckForValidListAndQueue+0x7c>)
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe fdcc 	bl	8003f68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d0:	f000 f930 	bl	8005634 <vPortExitCritical>
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000c84 	.word	0x20000c84
 80053e0:	20000c54 	.word	0x20000c54
 80053e4:	20000c68 	.word	0x20000c68
 80053e8:	20000c7c 	.word	0x20000c7c
 80053ec:	20000c80 	.word	0x20000c80
 80053f0:	20000d30 	.word	0x20000d30
 80053f4:	20000c90 	.word	0x20000c90
 80053f8:	08006a44 	.word	0x08006a44

080053fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b04      	subs	r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b04      	subs	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b04      	subs	r3, #4
 800542a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800542c:	4a08      	ldr	r2, [pc, #32]	; (8005450 <pxPortInitialiseStack+0x54>)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3b14      	subs	r3, #20
 8005436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3b20      	subs	r3, #32
 8005442:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005444:	68fb      	ldr	r3, [r7, #12]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	08005455 	.word	0x08005455

08005454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <prvTaskExitError+0x4c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005466:	d009      	beq.n	800547c <prvTaskExitError+0x28>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e7fe      	b.n	800547a <prvTaskExitError+0x26>
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800548e:	bf00      	nop
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0fc      	beq.n	8005490 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	2000000c 	.word	0x2000000c
	...

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80054ce:	4770      	bx	lr

080054d0 <pxCurrentTCBConst2>:
 80054d0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054d8:	4806      	ldr	r0, [pc, #24]	; (80054f4 <prvPortStartFirstTask+0x1c>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	b662      	cpsie	i
 80054e4:	b661      	cpsie	f
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	df00      	svc	0
 80054f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054f2:	bf00      	nop
 80054f4:	e000ed08 	.word	0xe000ed08

080054f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <xPortStartScheduler+0xcc>)
 8005500:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <xPortStartScheduler+0xd0>)
 8005524:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005526:	4b29      	ldr	r3, [pc, #164]	; (80055cc <xPortStartScheduler+0xd4>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552c:	e009      	b.n	8005542 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800552e:	4b27      	ldr	r3, [pc, #156]	; (80055cc <xPortStartScheduler+0xd4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	4a25      	ldr	r2, [pc, #148]	; (80055cc <xPortStartScheduler+0xd4>)
 8005536:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d0ef      	beq.n	800552e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800554e:	4b1f      	ldr	r3, [pc, #124]	; (80055cc <xPortStartScheduler+0xd4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1c3 0307 	rsb	r3, r3, #7
 8005556:	2b04      	cmp	r3, #4
 8005558:	d009      	beq.n	800556e <xPortStartScheduler+0x76>
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	e7fe      	b.n	800556c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <xPortStartScheduler+0xd4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	4a15      	ldr	r2, [pc, #84]	; (80055cc <xPortStartScheduler+0xd4>)
 8005576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005578:	4b14      	ldr	r3, [pc, #80]	; (80055cc <xPortStartScheduler+0xd4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005580:	4a12      	ldr	r2, [pc, #72]	; (80055cc <xPortStartScheduler+0xd4>)
 8005582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <xPortStartScheduler+0xd8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0f      	ldr	r2, [pc, #60]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <xPortStartScheduler+0xd8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0c      	ldr	r2, [pc, #48]	; (80055d0 <xPortStartScheduler+0xd8>)
 800559e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055a4:	f000 f8b0 	bl	8005708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <xPortStartScheduler+0xdc>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ae:	f7ff ff93 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b2:	f7ff f8d7 	bl	8004764 <vTaskSwitchContext>
	prvTaskExitError();
 80055b6:	f7ff ff4d 	bl	8005454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000e400 	.word	0xe000e400
 80055c8:	20000d80 	.word	0x20000d80
 80055cc:	20000d84 	.word	0x20000d84
 80055d0:	e000ed20 	.word	0xe000ed20
 80055d4:	2000000c 	.word	0x2000000c

080055d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055f0:	4b0e      	ldr	r3, [pc, #56]	; (800562c <vPortEnterCritical+0x54>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3301      	adds	r3, #1
 80055f6:	4a0d      	ldr	r2, [pc, #52]	; (800562c <vPortEnterCritical+0x54>)
 80055f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <vPortEnterCritical+0x54>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10e      	bne.n	8005620 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <vPortEnterCritical+0x58>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d009      	beq.n	8005620 <vPortEnterCritical+0x48>
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	e7fe      	b.n	800561e <vPortEnterCritical+0x46>
	}
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000000c 	.word	0x2000000c
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <vPortExitCritical+0x48>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <vPortExitCritical+0x22>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	e7fe      	b.n	8005654 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <vPortExitCritical+0x48>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	4a07      	ldr	r2, [pc, #28]	; (800567c <vPortExitCritical+0x48>)
 800565e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <vPortExitCritical+0x48>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <vPortExitCritical+0x3e>
 8005668:	2300      	movs	r3, #0
 800566a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	2000000c 	.word	0x2000000c

08005680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005680:	f3ef 8009 	mrs	r0, PSP
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <pxCurrentTCBConst>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005690:	6010      	str	r0, [r2, #0]
 8005692:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005696:	f04f 0050 	mov.w	r0, #80	; 0x50
 800569a:	f380 8811 	msr	BASEPRI, r0
 800569e:	f7ff f861 	bl	8004764 <vTaskSwitchContext>
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	6808      	ldr	r0, [r1, #0]
 80056b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056b6:	f380 8809 	msr	PSP, r0
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	4770      	bx	lr

080056c0 <pxCurrentTCBConst>:
 80056c0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop

080056c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056e0:	f7fe ff82 	bl	80045e8 <xTaskIncrementTick>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <SysTick_Handler+0x3c>)
 80056ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	2300      	movs	r3, #0
 80056f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	e000ed04 	.word	0xe000ed04

08005708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vPortSetupTimerInterrupt+0x30>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <vPortSetupTimerInterrupt+0x34>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005718:	4b09      	ldr	r3, [pc, #36]	; (8005740 <vPortSetupTimerInterrupt+0x38>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <vPortSetupTimerInterrupt+0x3c>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <vPortSetupTimerInterrupt+0x40>)
 8005726:	3b01      	subs	r3, #1
 8005728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800572a:	4b03      	ldr	r3, [pc, #12]	; (8005738 <vPortSetupTimerInterrupt+0x30>)
 800572c:	2207      	movs	r2, #7
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	e000e010 	.word	0xe000e010
 800573c:	e000e018 	.word	0xe000e018
 8005740:	20000000 	.word	0x20000000
 8005744:	10624dd3 	.word	0x10624dd3
 8005748:	e000e014 	.word	0xe000e014

0800574c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005752:	f3ef 8305 	mrs	r3, IPSR
 8005756:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b0f      	cmp	r3, #15
 800575c:	d913      	bls.n	8005786 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <vPortValidateInterruptPriority+0x68>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <vPortValidateInterruptPriority+0x6c>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	7afa      	ldrb	r2, [r7, #11]
 800576e:	429a      	cmp	r2, r3
 8005770:	d209      	bcs.n	8005786 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e7fe      	b.n	8005784 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <vPortValidateInterruptPriority+0x70>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <vPortValidateInterruptPriority+0x74>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d909      	bls.n	80057aa <vPortValidateInterruptPriority+0x5e>
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	e7fe      	b.n	80057a8 <vPortValidateInterruptPriority+0x5c>
	}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	e000e3f0 	.word	0xe000e3f0
 80057b8:	20000d80 	.word	0x20000d80
 80057bc:	e000ed0c 	.word	0xe000ed0c
 80057c0:	20000d84 	.word	0x20000d84

080057c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057d0:	f7fe fe52 	bl	8004478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057d4:	4b57      	ldr	r3, [pc, #348]	; (8005934 <pvPortMalloc+0x170>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057dc:	f000 f90c 	bl	80059f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057e0:	4b55      	ldr	r3, [pc, #340]	; (8005938 <pvPortMalloc+0x174>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 808c 	bne.w	8005906 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01c      	beq.n	800582e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80057f4:	2208      	movs	r2, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f023 0307 	bic.w	r3, r3, #7
 800580c:	3308      	adds	r3, #8
 800580e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <pvPortMalloc+0x6a>
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e7fe      	b.n	800582c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d068      	beq.n	8005906 <pvPortMalloc+0x142>
 8005834:	4b41      	ldr	r3, [pc, #260]	; (800593c <pvPortMalloc+0x178>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d863      	bhi.n	8005906 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <pvPortMalloc+0x17c>)
 8005840:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005842:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <pvPortMalloc+0x17c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005848:	e004      	b.n	8005854 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d903      	bls.n	8005866 <pvPortMalloc+0xa2>
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f1      	bne.n	800584a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005866:	4b33      	ldr	r3, [pc, #204]	; (8005934 <pvPortMalloc+0x170>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586c:	429a      	cmp	r2, r3
 800586e:	d04a      	beq.n	8005906 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2208      	movs	r2, #8
 8005876:	4413      	add	r3, r2
 8005878:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	1ad2      	subs	r2, r2, r3
 800588a:	2308      	movs	r3, #8
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	429a      	cmp	r2, r3
 8005890:	d91e      	bls.n	80058d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <pvPortMalloc+0xf4>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e7fe      	b.n	80058b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	f000 f8f6 	bl	8005abc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058d0:	4b1a      	ldr	r3, [pc, #104]	; (800593c <pvPortMalloc+0x178>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <pvPortMalloc+0x178>)
 80058dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <pvPortMalloc+0x178>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b18      	ldr	r3, [pc, #96]	; (8005944 <pvPortMalloc+0x180>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d203      	bcs.n	80058f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <pvPortMalloc+0x178>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a15      	ldr	r2, [pc, #84]	; (8005944 <pvPortMalloc+0x180>)
 80058f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <pvPortMalloc+0x174>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005906:	f7fe fdc5 	bl	8004494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <pvPortMalloc+0x164>
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e7fe      	b.n	8005926 <pvPortMalloc+0x162>
	return pvReturn;
 8005928:	69fb      	ldr	r3, [r7, #28]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3728      	adds	r7, #40	; 0x28
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20001990 	.word	0x20001990
 8005938:	2000199c 	.word	0x2000199c
 800593c:	20001994 	.word	0x20001994
 8005940:	20001988 	.word	0x20001988
 8005944:	20001998 	.word	0x20001998

08005948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d046      	beq.n	80059e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800595a:	2308      	movs	r3, #8
 800595c:	425b      	negs	r3, r3
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	4b20      	ldr	r3, [pc, #128]	; (80059f0 <vPortFree+0xa8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <vPortFree+0x42>
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e7fe      	b.n	8005988 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <vPortFree+0x5e>
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	e7fe      	b.n	80059a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <vPortFree+0xa8>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d019      	beq.n	80059e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d115      	bne.n	80059e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <vPortFree+0xa8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	43db      	mvns	r3, r3
 80059c6:	401a      	ands	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059cc:	f7fe fd54 	bl	8004478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <vPortFree+0xac>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4413      	add	r3, r2
 80059da:	4a06      	ldr	r2, [pc, #24]	; (80059f4 <vPortFree+0xac>)
 80059dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059de:	6938      	ldr	r0, [r7, #16]
 80059e0:	f000 f86c 	bl	8005abc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059e4:	f7fe fd56 	bl	8004494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000199c 	.word	0x2000199c
 80059f4:	20001994 	.word	0x20001994

080059f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a04:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <prvHeapInit+0xac>)
 8005a06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0307 	and.w	r3, r3, #7
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00c      	beq.n	8005a2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3307      	adds	r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <prvHeapInit+0xac>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a30:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <prvHeapInit+0xb0>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a36:	4b1c      	ldr	r3, [pc, #112]	; (8005aa8 <prvHeapInit+0xb0>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a44:	2208      	movs	r2, #8
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0307 	bic.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <prvHeapInit+0xb4>)
 8005a58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <prvHeapInit+0xb4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <prvHeapInit+0xb4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <prvHeapInit+0xb4>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <prvHeapInit+0xb8>)
 8005a86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <prvHeapInit+0xbc>)
 8005a8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <prvHeapInit+0xc0>)
 8005a92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a96:	601a      	str	r2, [r3, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000d88 	.word	0x20000d88
 8005aa8:	20001988 	.word	0x20001988
 8005aac:	20001990 	.word	0x20001990
 8005ab0:	20001998 	.word	0x20001998
 8005ab4:	20001994 	.word	0x20001994
 8005ab8:	2000199c 	.word	0x2000199c

08005abc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <prvInsertBlockIntoFreeList+0xa8>)
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e002      	b.n	8005ad0 <prvInsertBlockIntoFreeList+0x14>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d8f7      	bhi.n	8005aca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d108      	bne.n	8005afe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	441a      	add	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	441a      	add	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d118      	bne.n	8005b44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <prvInsertBlockIntoFreeList+0xac>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d00d      	beq.n	8005b3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e008      	b.n	8005b4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <prvInsertBlockIntoFreeList+0xac>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e003      	b.n	8005b4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d002      	beq.n	8005b5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	20001988 	.word	0x20001988
 8005b68:	20001990 	.word	0x20001990

08005b6c <__errno>:
 8005b6c:	4b01      	ldr	r3, [pc, #4]	; (8005b74 <__errno+0x8>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000010 	.word	0x20000010

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	2500      	movs	r5, #0
 8005b7c:	4e0c      	ldr	r6, [pc, #48]	; (8005bb0 <__libc_init_array+0x38>)
 8005b7e:	4c0d      	ldr	r4, [pc, #52]	; (8005bb4 <__libc_init_array+0x3c>)
 8005b80:	1ba4      	subs	r4, r4, r6
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	42a5      	cmp	r5, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	f000 ff1c 	bl	80069c4 <_init>
 8005b8c:	2500      	movs	r5, #0
 8005b8e:	4e0a      	ldr	r6, [pc, #40]	; (8005bb8 <__libc_init_array+0x40>)
 8005b90:	4c0a      	ldr	r4, [pc, #40]	; (8005bbc <__libc_init_array+0x44>)
 8005b92:	1ba4      	subs	r4, r4, r6
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	42a5      	cmp	r5, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ba0:	4798      	blx	r3
 8005ba2:	3501      	adds	r5, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005baa:	4798      	blx	r3
 8005bac:	3501      	adds	r5, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08006b44 	.word	0x08006b44
 8005bb4:	08006b44 	.word	0x08006b44
 8005bb8:	08006b44 	.word	0x08006b44
 8005bbc:	08006b48 	.word	0x08006b48

08005bc0 <memcpy>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	1e43      	subs	r3, r0, #1
 8005bc4:	440a      	add	r2, r1
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	d100      	bne.n	8005bcc <memcpy+0xc>
 8005bca:	bd10      	pop	{r4, pc}
 8005bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd4:	e7f7      	b.n	8005bc6 <memcpy+0x6>

08005bd6 <memset>:
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4402      	add	r2, r0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d100      	bne.n	8005be0 <memset+0xa>
 8005bde:	4770      	bx	lr
 8005be0:	f803 1b01 	strb.w	r1, [r3], #1
 8005be4:	e7f9      	b.n	8005bda <memset+0x4>
	...

08005be8 <iprintf>:
 8005be8:	b40f      	push	{r0, r1, r2, r3}
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <iprintf+0x2c>)
 8005bec:	b513      	push	{r0, r1, r4, lr}
 8005bee:	681c      	ldr	r4, [r3, #0]
 8005bf0:	b124      	cbz	r4, 8005bfc <iprintf+0x14>
 8005bf2:	69a3      	ldr	r3, [r4, #24]
 8005bf4:	b913      	cbnz	r3, 8005bfc <iprintf+0x14>
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f000 f84e 	bl	8005c98 <__sinit>
 8005bfc:	ab05      	add	r3, sp, #20
 8005bfe:	9a04      	ldr	r2, [sp, #16]
 8005c00:	68a1      	ldr	r1, [r4, #8]
 8005c02:	4620      	mov	r0, r4
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f000 f953 	bl	8005eb0 <_vfiprintf_r>
 8005c0a:	b002      	add	sp, #8
 8005c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c10:	b004      	add	sp, #16
 8005c12:	4770      	bx	lr
 8005c14:	20000010 	.word	0x20000010

08005c18 <std>:
 8005c18:	2300      	movs	r3, #0
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c22:	6083      	str	r3, [r0, #8]
 8005c24:	8181      	strh	r1, [r0, #12]
 8005c26:	6643      	str	r3, [r0, #100]	; 0x64
 8005c28:	81c2      	strh	r2, [r0, #14]
 8005c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c2e:	6183      	str	r3, [r0, #24]
 8005c30:	4619      	mov	r1, r3
 8005c32:	2208      	movs	r2, #8
 8005c34:	305c      	adds	r0, #92	; 0x5c
 8005c36:	f7ff ffce 	bl	8005bd6 <memset>
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <std+0x38>)
 8005c3c:	6224      	str	r4, [r4, #32]
 8005c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <std+0x3c>)
 8005c42:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <std+0x40>)
 8005c46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <std+0x44>)
 8005c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	0800640d 	.word	0x0800640d
 8005c54:	0800642f 	.word	0x0800642f
 8005c58:	08006467 	.word	0x08006467
 8005c5c:	0800648b 	.word	0x0800648b

08005c60 <_cleanup_r>:
 8005c60:	4901      	ldr	r1, [pc, #4]	; (8005c68 <_cleanup_r+0x8>)
 8005c62:	f000 b885 	b.w	8005d70 <_fwalk_reent>
 8005c66:	bf00      	nop
 8005c68:	08006765 	.word	0x08006765

08005c6c <__sfmoreglue>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	2568      	movs	r5, #104	; 0x68
 8005c70:	1e4a      	subs	r2, r1, #1
 8005c72:	4355      	muls	r5, r2
 8005c74:	460e      	mov	r6, r1
 8005c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c7a:	f000 f897 	bl	8005dac <_malloc_r>
 8005c7e:	4604      	mov	r4, r0
 8005c80:	b140      	cbz	r0, 8005c94 <__sfmoreglue+0x28>
 8005c82:	2100      	movs	r1, #0
 8005c84:	e9c0 1600 	strd	r1, r6, [r0]
 8005c88:	300c      	adds	r0, #12
 8005c8a:	60a0      	str	r0, [r4, #8]
 8005c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c90:	f7ff ffa1 	bl	8005bd6 <memset>
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}

08005c98 <__sinit>:
 8005c98:	6983      	ldr	r3, [r0, #24]
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	bb33      	cbnz	r3, 8005cee <__sinit+0x56>
 8005ca0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ca4:	6503      	str	r3, [r0, #80]	; 0x50
 8005ca6:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <__sinit+0x58>)
 8005ca8:	4a12      	ldr	r2, [pc, #72]	; (8005cf4 <__sinit+0x5c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6282      	str	r2, [r0, #40]	; 0x28
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	bf04      	itt	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	6183      	streq	r3, [r0, #24]
 8005cb6:	f000 f81f 	bl	8005cf8 <__sfp>
 8005cba:	6060      	str	r0, [r4, #4]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 f81b 	bl	8005cf8 <__sfp>
 8005cc2:	60a0      	str	r0, [r4, #8]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 f817 	bl	8005cf8 <__sfp>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	60e0      	str	r0, [r4, #12]
 8005cce:	2104      	movs	r1, #4
 8005cd0:	6860      	ldr	r0, [r4, #4]
 8005cd2:	f7ff ffa1 	bl	8005c18 <std>
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	2109      	movs	r1, #9
 8005cda:	68a0      	ldr	r0, [r4, #8]
 8005cdc:	f7ff ff9c 	bl	8005c18 <std>
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	2112      	movs	r1, #18
 8005ce4:	68e0      	ldr	r0, [r4, #12]
 8005ce6:	f7ff ff97 	bl	8005c18 <std>
 8005cea:	2301      	movs	r3, #1
 8005cec:	61a3      	str	r3, [r4, #24]
 8005cee:	bd10      	pop	{r4, pc}
 8005cf0:	08006aac 	.word	0x08006aac
 8005cf4:	08005c61 	.word	0x08005c61

08005cf8 <__sfp>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <__sfp+0x70>)
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	681e      	ldr	r6, [r3, #0]
 8005d00:	69b3      	ldr	r3, [r6, #24]
 8005d02:	b913      	cbnz	r3, 8005d0a <__sfp+0x12>
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff ffc7 	bl	8005c98 <__sinit>
 8005d0a:	3648      	adds	r6, #72	; 0x48
 8005d0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	d503      	bpl.n	8005d1c <__sfp+0x24>
 8005d14:	6833      	ldr	r3, [r6, #0]
 8005d16:	b133      	cbz	r3, 8005d26 <__sfp+0x2e>
 8005d18:	6836      	ldr	r6, [r6, #0]
 8005d1a:	e7f7      	b.n	8005d0c <__sfp+0x14>
 8005d1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d20:	b16d      	cbz	r5, 8005d3e <__sfp+0x46>
 8005d22:	3468      	adds	r4, #104	; 0x68
 8005d24:	e7f4      	b.n	8005d10 <__sfp+0x18>
 8005d26:	2104      	movs	r1, #4
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f7ff ff9f 	bl	8005c6c <__sfmoreglue>
 8005d2e:	6030      	str	r0, [r6, #0]
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d1f1      	bne.n	8005d18 <__sfp+0x20>
 8005d34:	230c      	movs	r3, #12
 8005d36:	4604      	mov	r4, r0
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d3e:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <__sfp+0x74>)
 8005d40:	6665      	str	r5, [r4, #100]	; 0x64
 8005d42:	e9c4 5500 	strd	r5, r5, [r4]
 8005d46:	60a5      	str	r5, [r4, #8]
 8005d48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d50:	2208      	movs	r2, #8
 8005d52:	4629      	mov	r1, r5
 8005d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d58:	f7ff ff3d 	bl	8005bd6 <memset>
 8005d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d64:	e7e9      	b.n	8005d3a <__sfp+0x42>
 8005d66:	bf00      	nop
 8005d68:	08006aac 	.word	0x08006aac
 8005d6c:	ffff0001 	.word	0xffff0001

08005d70 <_fwalk_reent>:
 8005d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d74:	4680      	mov	r8, r0
 8005d76:	4689      	mov	r9, r1
 8005d78:	2600      	movs	r6, #0
 8005d7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d7e:	b914      	cbnz	r4, 8005d86 <_fwalk_reent+0x16>
 8005d80:	4630      	mov	r0, r6
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d8a:	3f01      	subs	r7, #1
 8005d8c:	d501      	bpl.n	8005d92 <_fwalk_reent+0x22>
 8005d8e:	6824      	ldr	r4, [r4, #0]
 8005d90:	e7f5      	b.n	8005d7e <_fwalk_reent+0xe>
 8005d92:	89ab      	ldrh	r3, [r5, #12]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d907      	bls.n	8005da8 <_fwalk_reent+0x38>
 8005d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	d003      	beq.n	8005da8 <_fwalk_reent+0x38>
 8005da0:	4629      	mov	r1, r5
 8005da2:	4640      	mov	r0, r8
 8005da4:	47c8      	blx	r9
 8005da6:	4306      	orrs	r6, r0
 8005da8:	3568      	adds	r5, #104	; 0x68
 8005daa:	e7ee      	b.n	8005d8a <_fwalk_reent+0x1a>

08005dac <_malloc_r>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	1ccd      	adds	r5, r1, #3
 8005db0:	f025 0503 	bic.w	r5, r5, #3
 8005db4:	3508      	adds	r5, #8
 8005db6:	2d0c      	cmp	r5, #12
 8005db8:	bf38      	it	cc
 8005dba:	250c      	movcc	r5, #12
 8005dbc:	2d00      	cmp	r5, #0
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	db01      	blt.n	8005dc6 <_malloc_r+0x1a>
 8005dc2:	42a9      	cmp	r1, r5
 8005dc4:	d903      	bls.n	8005dce <_malloc_r+0x22>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	2000      	movs	r0, #0
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
 8005dce:	f000 fd77 	bl	80068c0 <__malloc_lock>
 8005dd2:	4a21      	ldr	r2, [pc, #132]	; (8005e58 <_malloc_r+0xac>)
 8005dd4:	6814      	ldr	r4, [r2, #0]
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	b991      	cbnz	r1, 8005e00 <_malloc_r+0x54>
 8005dda:	4c20      	ldr	r4, [pc, #128]	; (8005e5c <_malloc_r+0xb0>)
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	b91b      	cbnz	r3, 8005de8 <_malloc_r+0x3c>
 8005de0:	4630      	mov	r0, r6
 8005de2:	f000 fb03 	bl	80063ec <_sbrk_r>
 8005de6:	6020      	str	r0, [r4, #0]
 8005de8:	4629      	mov	r1, r5
 8005dea:	4630      	mov	r0, r6
 8005dec:	f000 fafe 	bl	80063ec <_sbrk_r>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d124      	bne.n	8005e3e <_malloc_r+0x92>
 8005df4:	230c      	movs	r3, #12
 8005df6:	4630      	mov	r0, r6
 8005df8:	6033      	str	r3, [r6, #0]
 8005dfa:	f000 fd62 	bl	80068c2 <__malloc_unlock>
 8005dfe:	e7e4      	b.n	8005dca <_malloc_r+0x1e>
 8005e00:	680b      	ldr	r3, [r1, #0]
 8005e02:	1b5b      	subs	r3, r3, r5
 8005e04:	d418      	bmi.n	8005e38 <_malloc_r+0x8c>
 8005e06:	2b0b      	cmp	r3, #11
 8005e08:	d90f      	bls.n	8005e2a <_malloc_r+0x7e>
 8005e0a:	600b      	str	r3, [r1, #0]
 8005e0c:	18cc      	adds	r4, r1, r3
 8005e0e:	50cd      	str	r5, [r1, r3]
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 fd56 	bl	80068c2 <__malloc_unlock>
 8005e16:	f104 000b 	add.w	r0, r4, #11
 8005e1a:	1d23      	adds	r3, r4, #4
 8005e1c:	f020 0007 	bic.w	r0, r0, #7
 8005e20:	1ac3      	subs	r3, r0, r3
 8005e22:	d0d3      	beq.n	8005dcc <_malloc_r+0x20>
 8005e24:	425a      	negs	r2, r3
 8005e26:	50e2      	str	r2, [r4, r3]
 8005e28:	e7d0      	b.n	8005dcc <_malloc_r+0x20>
 8005e2a:	684b      	ldr	r3, [r1, #4]
 8005e2c:	428c      	cmp	r4, r1
 8005e2e:	bf16      	itet	ne
 8005e30:	6063      	strne	r3, [r4, #4]
 8005e32:	6013      	streq	r3, [r2, #0]
 8005e34:	460c      	movne	r4, r1
 8005e36:	e7eb      	b.n	8005e10 <_malloc_r+0x64>
 8005e38:	460c      	mov	r4, r1
 8005e3a:	6849      	ldr	r1, [r1, #4]
 8005e3c:	e7cc      	b.n	8005dd8 <_malloc_r+0x2c>
 8005e3e:	1cc4      	adds	r4, r0, #3
 8005e40:	f024 0403 	bic.w	r4, r4, #3
 8005e44:	42a0      	cmp	r0, r4
 8005e46:	d005      	beq.n	8005e54 <_malloc_r+0xa8>
 8005e48:	1a21      	subs	r1, r4, r0
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 face 	bl	80063ec <_sbrk_r>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d0cf      	beq.n	8005df4 <_malloc_r+0x48>
 8005e54:	6025      	str	r5, [r4, #0]
 8005e56:	e7db      	b.n	8005e10 <_malloc_r+0x64>
 8005e58:	200019a0 	.word	0x200019a0
 8005e5c:	200019a4 	.word	0x200019a4

08005e60 <__sfputc_r>:
 8005e60:	6893      	ldr	r3, [r2, #8]
 8005e62:	b410      	push	{r4}
 8005e64:	3b01      	subs	r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	6093      	str	r3, [r2, #8]
 8005e6a:	da07      	bge.n	8005e7c <__sfputc_r+0x1c>
 8005e6c:	6994      	ldr	r4, [r2, #24]
 8005e6e:	42a3      	cmp	r3, r4
 8005e70:	db01      	blt.n	8005e76 <__sfputc_r+0x16>
 8005e72:	290a      	cmp	r1, #10
 8005e74:	d102      	bne.n	8005e7c <__sfputc_r+0x1c>
 8005e76:	bc10      	pop	{r4}
 8005e78:	f000 bb0c 	b.w	8006494 <__swbuf_r>
 8005e7c:	6813      	ldr	r3, [r2, #0]
 8005e7e:	1c58      	adds	r0, r3, #1
 8005e80:	6010      	str	r0, [r2, #0]
 8005e82:	7019      	strb	r1, [r3, #0]
 8005e84:	4608      	mov	r0, r1
 8005e86:	bc10      	pop	{r4}
 8005e88:	4770      	bx	lr

08005e8a <__sfputs_r>:
 8005e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	18d5      	adds	r5, r2, r3
 8005e94:	42ac      	cmp	r4, r5
 8005e96:	d101      	bne.n	8005e9c <__sfputs_r+0x12>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e007      	b.n	8005eac <__sfputs_r+0x22>
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f7ff ffdc 	bl	8005e60 <__sfputc_r>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d1f3      	bne.n	8005e94 <__sfputs_r+0xa>
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005eb0 <_vfiprintf_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	b09d      	sub	sp, #116	; 0x74
 8005eb8:	4617      	mov	r7, r2
 8005eba:	461d      	mov	r5, r3
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	b118      	cbz	r0, 8005ec8 <_vfiprintf_r+0x18>
 8005ec0:	6983      	ldr	r3, [r0, #24]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_vfiprintf_r+0x18>
 8005ec4:	f7ff fee8 	bl	8005c98 <__sinit>
 8005ec8:	4b7c      	ldr	r3, [pc, #496]	; (80060bc <_vfiprintf_r+0x20c>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d158      	bne.n	8005f80 <_vfiprintf_r+0xd0>
 8005ece:	6874      	ldr	r4, [r6, #4]
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	0718      	lsls	r0, r3, #28
 8005ed4:	d55e      	bpl.n	8005f94 <_vfiprintf_r+0xe4>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d05b      	beq.n	8005f94 <_vfiprintf_r+0xe4>
 8005edc:	2300      	movs	r3, #0
 8005ede:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ee6:	2330      	movs	r3, #48	; 0x30
 8005ee8:	f04f 0b01 	mov.w	fp, #1
 8005eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ef0:	9503      	str	r5, [sp, #12]
 8005ef2:	46b8      	mov	r8, r7
 8005ef4:	4645      	mov	r5, r8
 8005ef6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005efa:	b10b      	cbz	r3, 8005f00 <_vfiprintf_r+0x50>
 8005efc:	2b25      	cmp	r3, #37	; 0x25
 8005efe:	d154      	bne.n	8005faa <_vfiprintf_r+0xfa>
 8005f00:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f04:	d00b      	beq.n	8005f1e <_vfiprintf_r+0x6e>
 8005f06:	4653      	mov	r3, sl
 8005f08:	463a      	mov	r2, r7
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff ffbc 	bl	8005e8a <__sfputs_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	f000 80c2 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1a:	4453      	add	r3, sl
 8005f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1e:	f898 3000 	ldrb.w	r3, [r8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80ba 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9307      	str	r3, [sp, #28]
 8005f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f3c:	46a8      	mov	r8, r5
 8005f3e:	2205      	movs	r2, #5
 8005f40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005f44:	485e      	ldr	r0, [pc, #376]	; (80060c0 <_vfiprintf_r+0x210>)
 8005f46:	f000 fcad 	bl	80068a4 <memchr>
 8005f4a:	9b04      	ldr	r3, [sp, #16]
 8005f4c:	bb78      	cbnz	r0, 8005fae <_vfiprintf_r+0xfe>
 8005f4e:	06d9      	lsls	r1, r3, #27
 8005f50:	bf44      	itt	mi
 8005f52:	2220      	movmi	r2, #32
 8005f54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f58:	071a      	lsls	r2, r3, #28
 8005f5a:	bf44      	itt	mi
 8005f5c:	222b      	movmi	r2, #43	; 0x2b
 8005f5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005f62:	782a      	ldrb	r2, [r5, #0]
 8005f64:	2a2a      	cmp	r2, #42	; 0x2a
 8005f66:	d02a      	beq.n	8005fbe <_vfiprintf_r+0x10e>
 8005f68:	46a8      	mov	r8, r5
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	250a      	movs	r5, #10
 8005f6e:	9a07      	ldr	r2, [sp, #28]
 8005f70:	4641      	mov	r1, r8
 8005f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f76:	3b30      	subs	r3, #48	; 0x30
 8005f78:	2b09      	cmp	r3, #9
 8005f7a:	d969      	bls.n	8006050 <_vfiprintf_r+0x1a0>
 8005f7c:	b360      	cbz	r0, 8005fd8 <_vfiprintf_r+0x128>
 8005f7e:	e024      	b.n	8005fca <_vfiprintf_r+0x11a>
 8005f80:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <_vfiprintf_r+0x214>)
 8005f82:	429c      	cmp	r4, r3
 8005f84:	d101      	bne.n	8005f8a <_vfiprintf_r+0xda>
 8005f86:	68b4      	ldr	r4, [r6, #8]
 8005f88:	e7a2      	b.n	8005ed0 <_vfiprintf_r+0x20>
 8005f8a:	4b4f      	ldr	r3, [pc, #316]	; (80060c8 <_vfiprintf_r+0x218>)
 8005f8c:	429c      	cmp	r4, r3
 8005f8e:	bf08      	it	eq
 8005f90:	68f4      	ldreq	r4, [r6, #12]
 8005f92:	e79d      	b.n	8005ed0 <_vfiprintf_r+0x20>
 8005f94:	4621      	mov	r1, r4
 8005f96:	4630      	mov	r0, r6
 8005f98:	f000 fae0 	bl	800655c <__swsetup_r>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d09d      	beq.n	8005edc <_vfiprintf_r+0x2c>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa4:	b01d      	add	sp, #116	; 0x74
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	46a8      	mov	r8, r5
 8005fac:	e7a2      	b.n	8005ef4 <_vfiprintf_r+0x44>
 8005fae:	4a44      	ldr	r2, [pc, #272]	; (80060c0 <_vfiprintf_r+0x210>)
 8005fb0:	4645      	mov	r5, r8
 8005fb2:	1a80      	subs	r0, r0, r2
 8005fb4:	fa0b f000 	lsl.w	r0, fp, r0
 8005fb8:	4318      	orrs	r0, r3
 8005fba:	9004      	str	r0, [sp, #16]
 8005fbc:	e7be      	b.n	8005f3c <_vfiprintf_r+0x8c>
 8005fbe:	9a03      	ldr	r2, [sp, #12]
 8005fc0:	1d11      	adds	r1, r2, #4
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	9103      	str	r1, [sp, #12]
 8005fc6:	2a00      	cmp	r2, #0
 8005fc8:	db01      	blt.n	8005fce <_vfiprintf_r+0x11e>
 8005fca:	9207      	str	r2, [sp, #28]
 8005fcc:	e004      	b.n	8005fd8 <_vfiprintf_r+0x128>
 8005fce:	4252      	negs	r2, r2
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	9207      	str	r2, [sp, #28]
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	f898 3000 	ldrb.w	r3, [r8]
 8005fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fde:	d10e      	bne.n	8005ffe <_vfiprintf_r+0x14e>
 8005fe0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fe6:	d138      	bne.n	800605a <_vfiprintf_r+0x1aa>
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	f108 0802 	add.w	r8, r8, #2
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	9203      	str	r2, [sp, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bfb8      	it	lt
 8005ff8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	4d33      	ldr	r5, [pc, #204]	; (80060cc <_vfiprintf_r+0x21c>)
 8006000:	2203      	movs	r2, #3
 8006002:	f898 1000 	ldrb.w	r1, [r8]
 8006006:	4628      	mov	r0, r5
 8006008:	f000 fc4c 	bl	80068a4 <memchr>
 800600c:	b140      	cbz	r0, 8006020 <_vfiprintf_r+0x170>
 800600e:	2340      	movs	r3, #64	; 0x40
 8006010:	1b40      	subs	r0, r0, r5
 8006012:	fa03 f000 	lsl.w	r0, r3, r0
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	f108 0801 	add.w	r8, r8, #1
 800601c:	4303      	orrs	r3, r0
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	f898 1000 	ldrb.w	r1, [r8]
 8006024:	2206      	movs	r2, #6
 8006026:	482a      	ldr	r0, [pc, #168]	; (80060d0 <_vfiprintf_r+0x220>)
 8006028:	f108 0701 	add.w	r7, r8, #1
 800602c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006030:	f000 fc38 	bl	80068a4 <memchr>
 8006034:	2800      	cmp	r0, #0
 8006036:	d037      	beq.n	80060a8 <_vfiprintf_r+0x1f8>
 8006038:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <_vfiprintf_r+0x224>)
 800603a:	bb1b      	cbnz	r3, 8006084 <_vfiprintf_r+0x1d4>
 800603c:	9b03      	ldr	r3, [sp, #12]
 800603e:	3307      	adds	r3, #7
 8006040:	f023 0307 	bic.w	r3, r3, #7
 8006044:	3308      	adds	r3, #8
 8006046:	9303      	str	r3, [sp, #12]
 8006048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604a:	444b      	add	r3, r9
 800604c:	9309      	str	r3, [sp, #36]	; 0x24
 800604e:	e750      	b.n	8005ef2 <_vfiprintf_r+0x42>
 8006050:	fb05 3202 	mla	r2, r5, r2, r3
 8006054:	2001      	movs	r0, #1
 8006056:	4688      	mov	r8, r1
 8006058:	e78a      	b.n	8005f70 <_vfiprintf_r+0xc0>
 800605a:	2300      	movs	r3, #0
 800605c:	250a      	movs	r5, #10
 800605e:	4619      	mov	r1, r3
 8006060:	f108 0801 	add.w	r8, r8, #1
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	4640      	mov	r0, r8
 8006068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606c:	3a30      	subs	r2, #48	; 0x30
 800606e:	2a09      	cmp	r2, #9
 8006070:	d903      	bls.n	800607a <_vfiprintf_r+0x1ca>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0c3      	beq.n	8005ffe <_vfiprintf_r+0x14e>
 8006076:	9105      	str	r1, [sp, #20]
 8006078:	e7c1      	b.n	8005ffe <_vfiprintf_r+0x14e>
 800607a:	fb05 2101 	mla	r1, r5, r1, r2
 800607e:	2301      	movs	r3, #1
 8006080:	4680      	mov	r8, r0
 8006082:	e7f0      	b.n	8006066 <_vfiprintf_r+0x1b6>
 8006084:	ab03      	add	r3, sp, #12
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4622      	mov	r2, r4
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <_vfiprintf_r+0x228>)
 800608c:	a904      	add	r1, sp, #16
 800608e:	4630      	mov	r0, r6
 8006090:	f3af 8000 	nop.w
 8006094:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006098:	4681      	mov	r9, r0
 800609a:	d1d5      	bne.n	8006048 <_vfiprintf_r+0x198>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	065b      	lsls	r3, r3, #25
 80060a0:	f53f af7e 	bmi.w	8005fa0 <_vfiprintf_r+0xf0>
 80060a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060a6:	e77d      	b.n	8005fa4 <_vfiprintf_r+0xf4>
 80060a8:	ab03      	add	r3, sp, #12
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4622      	mov	r2, r4
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <_vfiprintf_r+0x228>)
 80060b0:	a904      	add	r1, sp, #16
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f888 	bl	80061c8 <_printf_i>
 80060b8:	e7ec      	b.n	8006094 <_vfiprintf_r+0x1e4>
 80060ba:	bf00      	nop
 80060bc:	08006ad0 	.word	0x08006ad0
 80060c0:	08006b10 	.word	0x08006b10
 80060c4:	08006af0 	.word	0x08006af0
 80060c8:	08006ab0 	.word	0x08006ab0
 80060cc:	08006b16 	.word	0x08006b16
 80060d0:	08006b1a 	.word	0x08006b1a
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e8b 	.word	0x08005e8b

080060dc <_printf_common>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	4691      	mov	r9, r2
 80060e2:	461f      	mov	r7, r3
 80060e4:	688a      	ldr	r2, [r1, #8]
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	4606      	mov	r6, r0
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bfb8      	it	lt
 80060ee:	4613      	movlt	r3, r2
 80060f0:	f8c9 3000 	str.w	r3, [r9]
 80060f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f8:	460c      	mov	r4, r1
 80060fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060fe:	b112      	cbz	r2, 8006106 <_printf_common+0x2a>
 8006100:	3301      	adds	r3, #1
 8006102:	f8c9 3000 	str.w	r3, [r9]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006110:	3302      	addmi	r3, #2
 8006112:	f8c9 3000 	strmi.w	r3, [r9]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	f015 0506 	ands.w	r5, r5, #6
 800611c:	d107      	bne.n	800612e <_printf_common+0x52>
 800611e:	f104 0a19 	add.w	sl, r4, #25
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	f8d9 2000 	ldr.w	r2, [r9]
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	42ab      	cmp	r3, r5
 800612c:	dc29      	bgt.n	8006182 <_printf_common+0xa6>
 800612e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006132:	6822      	ldr	r2, [r4, #0]
 8006134:	3300      	adds	r3, #0
 8006136:	bf18      	it	ne
 8006138:	2301      	movne	r3, #1
 800613a:	0692      	lsls	r2, r2, #26
 800613c:	d42e      	bmi.n	800619c <_printf_common+0xc0>
 800613e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006142:	4639      	mov	r1, r7
 8006144:	4630      	mov	r0, r6
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d021      	beq.n	8006190 <_printf_common+0xb4>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	68e5      	ldr	r5, [r4, #12]
 8006150:	f003 0306 	and.w	r3, r3, #6
 8006154:	2b04      	cmp	r3, #4
 8006156:	bf18      	it	ne
 8006158:	2500      	movne	r5, #0
 800615a:	f8d9 2000 	ldr.w	r2, [r9]
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	bf08      	it	eq
 8006164:	1aad      	subeq	r5, r5, r2
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	6922      	ldr	r2, [r4, #16]
 800616a:	bf08      	it	eq
 800616c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006170:	4293      	cmp	r3, r2
 8006172:	bfc4      	itt	gt
 8006174:	1a9b      	subgt	r3, r3, r2
 8006176:	18ed      	addgt	r5, r5, r3
 8006178:	341a      	adds	r4, #26
 800617a:	454d      	cmp	r5, r9
 800617c:	d11a      	bne.n	80061b4 <_printf_common+0xd8>
 800617e:	2000      	movs	r0, #0
 8006180:	e008      	b.n	8006194 <_printf_common+0xb8>
 8006182:	2301      	movs	r3, #1
 8006184:	4652      	mov	r2, sl
 8006186:	4639      	mov	r1, r7
 8006188:	4630      	mov	r0, r6
 800618a:	47c0      	blx	r8
 800618c:	3001      	adds	r0, #1
 800618e:	d103      	bne.n	8006198 <_printf_common+0xbc>
 8006190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006198:	3501      	adds	r5, #1
 800619a:	e7c2      	b.n	8006122 <_printf_common+0x46>
 800619c:	2030      	movs	r0, #48	; 0x30
 800619e:	18e1      	adds	r1, r4, r3
 80061a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061aa:	4422      	add	r2, r4
 80061ac:	3302      	adds	r3, #2
 80061ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061b2:	e7c4      	b.n	800613e <_printf_common+0x62>
 80061b4:	2301      	movs	r3, #1
 80061b6:	4622      	mov	r2, r4
 80061b8:	4639      	mov	r1, r7
 80061ba:	4630      	mov	r0, r6
 80061bc:	47c0      	blx	r8
 80061be:	3001      	adds	r0, #1
 80061c0:	d0e6      	beq.n	8006190 <_printf_common+0xb4>
 80061c2:	f109 0901 	add.w	r9, r9, #1
 80061c6:	e7d8      	b.n	800617a <_printf_common+0x9e>

080061c8 <_printf_i>:
 80061c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80061d0:	460c      	mov	r4, r1
 80061d2:	7e09      	ldrb	r1, [r1, #24]
 80061d4:	b085      	sub	sp, #20
 80061d6:	296e      	cmp	r1, #110	; 0x6e
 80061d8:	4617      	mov	r7, r2
 80061da:	4606      	mov	r6, r0
 80061dc:	4698      	mov	r8, r3
 80061de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061e0:	f000 80b3 	beq.w	800634a <_printf_i+0x182>
 80061e4:	d822      	bhi.n	800622c <_printf_i+0x64>
 80061e6:	2963      	cmp	r1, #99	; 0x63
 80061e8:	d036      	beq.n	8006258 <_printf_i+0x90>
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x3a>
 80061ec:	2900      	cmp	r1, #0
 80061ee:	f000 80b9 	beq.w	8006364 <_printf_i+0x19c>
 80061f2:	2958      	cmp	r1, #88	; 0x58
 80061f4:	f000 8083 	beq.w	80062fe <_printf_i+0x136>
 80061f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006200:	e032      	b.n	8006268 <_printf_i+0xa0>
 8006202:	2964      	cmp	r1, #100	; 0x64
 8006204:	d001      	beq.n	800620a <_printf_i+0x42>
 8006206:	2969      	cmp	r1, #105	; 0x69
 8006208:	d1f6      	bne.n	80061f8 <_printf_i+0x30>
 800620a:	6820      	ldr	r0, [r4, #0]
 800620c:	6813      	ldr	r3, [r2, #0]
 800620e:	0605      	lsls	r5, r0, #24
 8006210:	f103 0104 	add.w	r1, r3, #4
 8006214:	d52a      	bpl.n	800626c <_printf_i+0xa4>
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6011      	str	r1, [r2, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	da03      	bge.n	8006226 <_printf_i+0x5e>
 800621e:	222d      	movs	r2, #45	; 0x2d
 8006220:	425b      	negs	r3, r3
 8006222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006226:	486f      	ldr	r0, [pc, #444]	; (80063e4 <_printf_i+0x21c>)
 8006228:	220a      	movs	r2, #10
 800622a:	e039      	b.n	80062a0 <_printf_i+0xd8>
 800622c:	2973      	cmp	r1, #115	; 0x73
 800622e:	f000 809d 	beq.w	800636c <_printf_i+0x1a4>
 8006232:	d808      	bhi.n	8006246 <_printf_i+0x7e>
 8006234:	296f      	cmp	r1, #111	; 0x6f
 8006236:	d020      	beq.n	800627a <_printf_i+0xb2>
 8006238:	2970      	cmp	r1, #112	; 0x70
 800623a:	d1dd      	bne.n	80061f8 <_printf_i+0x30>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	f043 0320 	orr.w	r3, r3, #32
 8006242:	6023      	str	r3, [r4, #0]
 8006244:	e003      	b.n	800624e <_printf_i+0x86>
 8006246:	2975      	cmp	r1, #117	; 0x75
 8006248:	d017      	beq.n	800627a <_printf_i+0xb2>
 800624a:	2978      	cmp	r1, #120	; 0x78
 800624c:	d1d4      	bne.n	80061f8 <_printf_i+0x30>
 800624e:	2378      	movs	r3, #120	; 0x78
 8006250:	4865      	ldr	r0, [pc, #404]	; (80063e8 <_printf_i+0x220>)
 8006252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006256:	e055      	b.n	8006304 <_printf_i+0x13c>
 8006258:	6813      	ldr	r3, [r2, #0]
 800625a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625e:	1d19      	adds	r1, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6011      	str	r1, [r2, #0]
 8006264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006268:	2301      	movs	r3, #1
 800626a:	e08c      	b.n	8006386 <_printf_i+0x1be>
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006272:	6011      	str	r1, [r2, #0]
 8006274:	bf18      	it	ne
 8006276:	b21b      	sxthne	r3, r3
 8006278:	e7cf      	b.n	800621a <_printf_i+0x52>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	1d18      	adds	r0, r3, #4
 8006280:	6010      	str	r0, [r2, #0]
 8006282:	0628      	lsls	r0, r5, #24
 8006284:	d501      	bpl.n	800628a <_printf_i+0xc2>
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	e002      	b.n	8006290 <_printf_i+0xc8>
 800628a:	0668      	lsls	r0, r5, #25
 800628c:	d5fb      	bpl.n	8006286 <_printf_i+0xbe>
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	296f      	cmp	r1, #111	; 0x6f
 8006292:	bf14      	ite	ne
 8006294:	220a      	movne	r2, #10
 8006296:	2208      	moveq	r2, #8
 8006298:	4852      	ldr	r0, [pc, #328]	; (80063e4 <_printf_i+0x21c>)
 800629a:	2100      	movs	r1, #0
 800629c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062a0:	6865      	ldr	r5, [r4, #4]
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	60a5      	str	r5, [r4, #8]
 80062a6:	f2c0 8095 	blt.w	80063d4 <_printf_i+0x20c>
 80062aa:	6821      	ldr	r1, [r4, #0]
 80062ac:	f021 0104 	bic.w	r1, r1, #4
 80062b0:	6021      	str	r1, [r4, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d13d      	bne.n	8006332 <_printf_i+0x16a>
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	f040 808e 	bne.w	80063d8 <_printf_i+0x210>
 80062bc:	4665      	mov	r5, ip
 80062be:	2a08      	cmp	r2, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x112>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07db      	lsls	r3, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x112>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	; 0x30
 80062d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062da:	ebac 0305 	sub.w	r3, ip, r5
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	f8cd 8000 	str.w	r8, [sp]
 80062e4:	463b      	mov	r3, r7
 80062e6:	aa03      	add	r2, sp, #12
 80062e8:	4621      	mov	r1, r4
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff fef6 	bl	80060dc <_printf_common>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d14d      	bne.n	8006390 <_printf_i+0x1c8>
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f8:	b005      	add	sp, #20
 80062fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062fe:	4839      	ldr	r0, [pc, #228]	; (80063e4 <_printf_i+0x21c>)
 8006300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	6821      	ldr	r1, [r4, #0]
 8006308:	1d1d      	adds	r5, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6015      	str	r5, [r2, #0]
 800630e:	060a      	lsls	r2, r1, #24
 8006310:	d50b      	bpl.n	800632a <_printf_i+0x162>
 8006312:	07ca      	lsls	r2, r1, #31
 8006314:	bf44      	itt	mi
 8006316:	f041 0120 	orrmi.w	r1, r1, #32
 800631a:	6021      	strmi	r1, [r4, #0]
 800631c:	b91b      	cbnz	r3, 8006326 <_printf_i+0x15e>
 800631e:	6822      	ldr	r2, [r4, #0]
 8006320:	f022 0220 	bic.w	r2, r2, #32
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	2210      	movs	r2, #16
 8006328:	e7b7      	b.n	800629a <_printf_i+0xd2>
 800632a:	064d      	lsls	r5, r1, #25
 800632c:	bf48      	it	mi
 800632e:	b29b      	uxthmi	r3, r3
 8006330:	e7ef      	b.n	8006312 <_printf_i+0x14a>
 8006332:	4665      	mov	r5, ip
 8006334:	fbb3 f1f2 	udiv	r1, r3, r2
 8006338:	fb02 3311 	mls	r3, r2, r1, r3
 800633c:	5cc3      	ldrb	r3, [r0, r3]
 800633e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006342:	460b      	mov	r3, r1
 8006344:	2900      	cmp	r1, #0
 8006346:	d1f5      	bne.n	8006334 <_printf_i+0x16c>
 8006348:	e7b9      	b.n	80062be <_printf_i+0xf6>
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	6825      	ldr	r5, [r4, #0]
 800634e:	1d18      	adds	r0, r3, #4
 8006350:	6961      	ldr	r1, [r4, #20]
 8006352:	6010      	str	r0, [r2, #0]
 8006354:	0628      	lsls	r0, r5, #24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	d501      	bpl.n	800635e <_printf_i+0x196>
 800635a:	6019      	str	r1, [r3, #0]
 800635c:	e002      	b.n	8006364 <_printf_i+0x19c>
 800635e:	066a      	lsls	r2, r5, #25
 8006360:	d5fb      	bpl.n	800635a <_printf_i+0x192>
 8006362:	8019      	strh	r1, [r3, #0]
 8006364:	2300      	movs	r3, #0
 8006366:	4665      	mov	r5, ip
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	e7b9      	b.n	80062e0 <_printf_i+0x118>
 800636c:	6813      	ldr	r3, [r2, #0]
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	681d      	ldr	r5, [r3, #0]
 8006374:	6862      	ldr	r2, [r4, #4]
 8006376:	2100      	movs	r1, #0
 8006378:	4628      	mov	r0, r5
 800637a:	f000 fa93 	bl	80068a4 <memchr>
 800637e:	b108      	cbz	r0, 8006384 <_printf_i+0x1bc>
 8006380:	1b40      	subs	r0, r0, r5
 8006382:	6060      	str	r0, [r4, #4]
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	2300      	movs	r3, #0
 800638a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638e:	e7a7      	b.n	80062e0 <_printf_i+0x118>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	462a      	mov	r2, r5
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d0aa      	beq.n	80062f4 <_printf_i+0x12c>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	079b      	lsls	r3, r3, #30
 80063a2:	d413      	bmi.n	80063cc <_printf_i+0x204>
 80063a4:	68e0      	ldr	r0, [r4, #12]
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	4298      	cmp	r0, r3
 80063aa:	bfb8      	it	lt
 80063ac:	4618      	movlt	r0, r3
 80063ae:	e7a3      	b.n	80062f8 <_printf_i+0x130>
 80063b0:	2301      	movs	r3, #1
 80063b2:	464a      	mov	r2, r9
 80063b4:	4639      	mov	r1, r7
 80063b6:	4630      	mov	r0, r6
 80063b8:	47c0      	blx	r8
 80063ba:	3001      	adds	r0, #1
 80063bc:	d09a      	beq.n	80062f4 <_printf_i+0x12c>
 80063be:	3501      	adds	r5, #1
 80063c0:	68e3      	ldr	r3, [r4, #12]
 80063c2:	9a03      	ldr	r2, [sp, #12]
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	42ab      	cmp	r3, r5
 80063c8:	dcf2      	bgt.n	80063b0 <_printf_i+0x1e8>
 80063ca:	e7eb      	b.n	80063a4 <_printf_i+0x1dc>
 80063cc:	2500      	movs	r5, #0
 80063ce:	f104 0919 	add.w	r9, r4, #25
 80063d2:	e7f5      	b.n	80063c0 <_printf_i+0x1f8>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ac      	bne.n	8006332 <_printf_i+0x16a>
 80063d8:	7803      	ldrb	r3, [r0, #0]
 80063da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063e2:	e76c      	b.n	80062be <_printf_i+0xf6>
 80063e4:	08006b21 	.word	0x08006b21
 80063e8:	08006b32 	.word	0x08006b32

080063ec <_sbrk_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	2300      	movs	r3, #0
 80063f0:	4c05      	ldr	r4, [pc, #20]	; (8006408 <_sbrk_r+0x1c>)
 80063f2:	4605      	mov	r5, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	f7fa fa68 	bl	80008cc <_sbrk>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_sbrk_r+0x1a>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b103      	cbz	r3, 8006406 <_sbrk_r+0x1a>
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20001e3c 	.word	0x20001e3c

0800640c <__sread>:
 800640c:	b510      	push	{r4, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	f000 faa2 	bl	800695c <_read_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	bfab      	itete	ge
 800641c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800641e:	89a3      	ldrhlt	r3, [r4, #12]
 8006420:	181b      	addge	r3, r3, r0
 8006422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006426:	bfac      	ite	ge
 8006428:	6563      	strge	r3, [r4, #84]	; 0x54
 800642a:	81a3      	strhlt	r3, [r4, #12]
 800642c:	bd10      	pop	{r4, pc}

0800642e <__swrite>:
 800642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	461f      	mov	r7, r3
 8006434:	898b      	ldrh	r3, [r1, #12]
 8006436:	4605      	mov	r5, r0
 8006438:	05db      	lsls	r3, r3, #23
 800643a:	460c      	mov	r4, r1
 800643c:	4616      	mov	r6, r2
 800643e:	d505      	bpl.n	800644c <__swrite+0x1e>
 8006440:	2302      	movs	r3, #2
 8006442:	2200      	movs	r2, #0
 8006444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006448:	f000 f9b6 	bl	80067b8 <_lseek_r>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	4632      	mov	r2, r6
 8006450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800645a:	463b      	mov	r3, r7
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	f000 b869 	b.w	8006538 <_write_r>

08006466 <__sseek>:
 8006466:	b510      	push	{r4, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646e:	f000 f9a3 	bl	80067b8 <_lseek_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	bf15      	itete	ne
 8006478:	6560      	strne	r0, [r4, #84]	; 0x54
 800647a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800647e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006482:	81a3      	strheq	r3, [r4, #12]
 8006484:	bf18      	it	ne
 8006486:	81a3      	strhne	r3, [r4, #12]
 8006488:	bd10      	pop	{r4, pc}

0800648a <__sclose>:
 800648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648e:	f000 b8d3 	b.w	8006638 <_close_r>
	...

08006494 <__swbuf_r>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	460e      	mov	r6, r1
 8006498:	4614      	mov	r4, r2
 800649a:	4605      	mov	r5, r0
 800649c:	b118      	cbz	r0, 80064a6 <__swbuf_r+0x12>
 800649e:	6983      	ldr	r3, [r0, #24]
 80064a0:	b90b      	cbnz	r3, 80064a6 <__swbuf_r+0x12>
 80064a2:	f7ff fbf9 	bl	8005c98 <__sinit>
 80064a6:	4b21      	ldr	r3, [pc, #132]	; (800652c <__swbuf_r+0x98>)
 80064a8:	429c      	cmp	r4, r3
 80064aa:	d12a      	bne.n	8006502 <__swbuf_r+0x6e>
 80064ac:	686c      	ldr	r4, [r5, #4]
 80064ae:	69a3      	ldr	r3, [r4, #24]
 80064b0:	60a3      	str	r3, [r4, #8]
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	071a      	lsls	r2, r3, #28
 80064b6:	d52e      	bpl.n	8006516 <__swbuf_r+0x82>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	b363      	cbz	r3, 8006516 <__swbuf_r+0x82>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	b2f6      	uxtb	r6, r6
 80064c2:	1ac0      	subs	r0, r0, r3
 80064c4:	6963      	ldr	r3, [r4, #20]
 80064c6:	4637      	mov	r7, r6
 80064c8:	4283      	cmp	r3, r0
 80064ca:	dc04      	bgt.n	80064d6 <__swbuf_r+0x42>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 f948 	bl	8006764 <_fflush_r>
 80064d4:	bb28      	cbnz	r0, 8006522 <__swbuf_r+0x8e>
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	3001      	adds	r0, #1
 80064da:	3b01      	subs	r3, #1
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	6022      	str	r2, [r4, #0]
 80064e4:	701e      	strb	r6, [r3, #0]
 80064e6:	6963      	ldr	r3, [r4, #20]
 80064e8:	4283      	cmp	r3, r0
 80064ea:	d004      	beq.n	80064f6 <__swbuf_r+0x62>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	07db      	lsls	r3, r3, #31
 80064f0:	d519      	bpl.n	8006526 <__swbuf_r+0x92>
 80064f2:	2e0a      	cmp	r6, #10
 80064f4:	d117      	bne.n	8006526 <__swbuf_r+0x92>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 f933 	bl	8006764 <_fflush_r>
 80064fe:	b190      	cbz	r0, 8006526 <__swbuf_r+0x92>
 8006500:	e00f      	b.n	8006522 <__swbuf_r+0x8e>
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <__swbuf_r+0x9c>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d101      	bne.n	800650c <__swbuf_r+0x78>
 8006508:	68ac      	ldr	r4, [r5, #8]
 800650a:	e7d0      	b.n	80064ae <__swbuf_r+0x1a>
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <__swbuf_r+0xa0>)
 800650e:	429c      	cmp	r4, r3
 8006510:	bf08      	it	eq
 8006512:	68ec      	ldreq	r4, [r5, #12]
 8006514:	e7cb      	b.n	80064ae <__swbuf_r+0x1a>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f81f 	bl	800655c <__swsetup_r>
 800651e:	2800      	cmp	r0, #0
 8006520:	d0cc      	beq.n	80064bc <__swbuf_r+0x28>
 8006522:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006526:	4638      	mov	r0, r7
 8006528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652a:	bf00      	nop
 800652c:	08006ad0 	.word	0x08006ad0
 8006530:	08006af0 	.word	0x08006af0
 8006534:	08006ab0 	.word	0x08006ab0

08006538 <_write_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4605      	mov	r5, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	2200      	movs	r2, #0
 8006542:	4c05      	ldr	r4, [pc, #20]	; (8006558 <_write_r+0x20>)
 8006544:	6022      	str	r2, [r4, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7f9 fe28 	bl	800019c <_write>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_write_r+0x1e>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	b103      	cbz	r3, 8006556 <_write_r+0x1e>
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20001e3c 	.word	0x20001e3c

0800655c <__swsetup_r>:
 800655c:	4b32      	ldr	r3, [pc, #200]	; (8006628 <__swsetup_r+0xcc>)
 800655e:	b570      	push	{r4, r5, r6, lr}
 8006560:	681d      	ldr	r5, [r3, #0]
 8006562:	4606      	mov	r6, r0
 8006564:	460c      	mov	r4, r1
 8006566:	b125      	cbz	r5, 8006572 <__swsetup_r+0x16>
 8006568:	69ab      	ldr	r3, [r5, #24]
 800656a:	b913      	cbnz	r3, 8006572 <__swsetup_r+0x16>
 800656c:	4628      	mov	r0, r5
 800656e:	f7ff fb93 	bl	8005c98 <__sinit>
 8006572:	4b2e      	ldr	r3, [pc, #184]	; (800662c <__swsetup_r+0xd0>)
 8006574:	429c      	cmp	r4, r3
 8006576:	d10f      	bne.n	8006598 <__swsetup_r+0x3c>
 8006578:	686c      	ldr	r4, [r5, #4]
 800657a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657e:	b29a      	uxth	r2, r3
 8006580:	0715      	lsls	r5, r2, #28
 8006582:	d42c      	bmi.n	80065de <__swsetup_r+0x82>
 8006584:	06d0      	lsls	r0, r2, #27
 8006586:	d411      	bmi.n	80065ac <__swsetup_r+0x50>
 8006588:	2209      	movs	r2, #9
 800658a:	6032      	str	r2, [r6, #0]
 800658c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006590:	81a3      	strh	r3, [r4, #12]
 8006592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006596:	e03e      	b.n	8006616 <__swsetup_r+0xba>
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <__swsetup_r+0xd4>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d101      	bne.n	80065a2 <__swsetup_r+0x46>
 800659e:	68ac      	ldr	r4, [r5, #8]
 80065a0:	e7eb      	b.n	800657a <__swsetup_r+0x1e>
 80065a2:	4b24      	ldr	r3, [pc, #144]	; (8006634 <__swsetup_r+0xd8>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	bf08      	it	eq
 80065a8:	68ec      	ldreq	r4, [r5, #12]
 80065aa:	e7e6      	b.n	800657a <__swsetup_r+0x1e>
 80065ac:	0751      	lsls	r1, r2, #29
 80065ae:	d512      	bpl.n	80065d6 <__swsetup_r+0x7a>
 80065b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b2:	b141      	cbz	r1, 80065c6 <__swsetup_r+0x6a>
 80065b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065b8:	4299      	cmp	r1, r3
 80065ba:	d002      	beq.n	80065c2 <__swsetup_r+0x66>
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f981 	bl	80068c4 <_free_r>
 80065c2:	2300      	movs	r3, #0
 80065c4:	6363      	str	r3, [r4, #52]	; 0x34
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065cc:	81a3      	strh	r3, [r4, #12]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6063      	str	r3, [r4, #4]
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f043 0308 	orr.w	r3, r3, #8
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	b94b      	cbnz	r3, 80065f6 <__swsetup_r+0x9a>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d003      	beq.n	80065f6 <__swsetup_r+0x9a>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f917 	bl	8006824 <__smakebuf_r>
 80065f6:	89a2      	ldrh	r2, [r4, #12]
 80065f8:	f012 0301 	ands.w	r3, r2, #1
 80065fc:	d00c      	beq.n	8006618 <__swsetup_r+0xbc>
 80065fe:	2300      	movs	r3, #0
 8006600:	60a3      	str	r3, [r4, #8]
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	425b      	negs	r3, r3
 8006606:	61a3      	str	r3, [r4, #24]
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	b953      	cbnz	r3, 8006622 <__swsetup_r+0xc6>
 800660c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006610:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006614:	d1ba      	bne.n	800658c <__swsetup_r+0x30>
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	0792      	lsls	r2, r2, #30
 800661a:	bf58      	it	pl
 800661c:	6963      	ldrpl	r3, [r4, #20]
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	e7f2      	b.n	8006608 <__swsetup_r+0xac>
 8006622:	2000      	movs	r0, #0
 8006624:	e7f7      	b.n	8006616 <__swsetup_r+0xba>
 8006626:	bf00      	nop
 8006628:	20000010 	.word	0x20000010
 800662c:	08006ad0 	.word	0x08006ad0
 8006630:	08006af0 	.word	0x08006af0
 8006634:	08006ab0 	.word	0x08006ab0

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	2300      	movs	r3, #0
 800663c:	4c05      	ldr	r4, [pc, #20]	; (8006654 <_close_r+0x1c>)
 800663e:	4605      	mov	r5, r0
 8006640:	4608      	mov	r0, r1
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f7fa f911 	bl	800086a <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20001e3c 	.word	0x20001e3c

08006658 <__sflush_r>:
 8006658:	898a      	ldrh	r2, [r1, #12]
 800665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	4605      	mov	r5, r0
 8006660:	0710      	lsls	r0, r2, #28
 8006662:	460c      	mov	r4, r1
 8006664:	d458      	bmi.n	8006718 <__sflush_r+0xc0>
 8006666:	684b      	ldr	r3, [r1, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc05      	bgt.n	8006678 <__sflush_r+0x20>
 800666c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	dc02      	bgt.n	8006678 <__sflush_r+0x20>
 8006672:	2000      	movs	r0, #0
 8006674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800667a:	2e00      	cmp	r6, #0
 800667c:	d0f9      	beq.n	8006672 <__sflush_r+0x1a>
 800667e:	2300      	movs	r3, #0
 8006680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006684:	682f      	ldr	r7, [r5, #0]
 8006686:	6a21      	ldr	r1, [r4, #32]
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	d032      	beq.n	80066f2 <__sflush_r+0x9a>
 800668c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	075a      	lsls	r2, r3, #29
 8006692:	d505      	bpl.n	80066a0 <__sflush_r+0x48>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	1ac0      	subs	r0, r0, r3
 8006698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800669a:	b10b      	cbz	r3, 80066a0 <__sflush_r+0x48>
 800669c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800669e:	1ac0      	subs	r0, r0, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	4602      	mov	r2, r0
 80066a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066a6:	6a21      	ldr	r1, [r4, #32]
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	d106      	bne.n	80066c0 <__sflush_r+0x68>
 80066b2:	6829      	ldr	r1, [r5, #0]
 80066b4:	291d      	cmp	r1, #29
 80066b6:	d848      	bhi.n	800674a <__sflush_r+0xf2>
 80066b8:	4a29      	ldr	r2, [pc, #164]	; (8006760 <__sflush_r+0x108>)
 80066ba:	40ca      	lsrs	r2, r1
 80066bc:	07d6      	lsls	r6, r2, #31
 80066be:	d544      	bpl.n	800674a <__sflush_r+0xf2>
 80066c0:	2200      	movs	r2, #0
 80066c2:	6062      	str	r2, [r4, #4]
 80066c4:	6922      	ldr	r2, [r4, #16]
 80066c6:	04d9      	lsls	r1, r3, #19
 80066c8:	6022      	str	r2, [r4, #0]
 80066ca:	d504      	bpl.n	80066d6 <__sflush_r+0x7e>
 80066cc:	1c42      	adds	r2, r0, #1
 80066ce:	d101      	bne.n	80066d4 <__sflush_r+0x7c>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b903      	cbnz	r3, 80066d6 <__sflush_r+0x7e>
 80066d4:	6560      	str	r0, [r4, #84]	; 0x54
 80066d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066d8:	602f      	str	r7, [r5, #0]
 80066da:	2900      	cmp	r1, #0
 80066dc:	d0c9      	beq.n	8006672 <__sflush_r+0x1a>
 80066de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e2:	4299      	cmp	r1, r3
 80066e4:	d002      	beq.n	80066ec <__sflush_r+0x94>
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 f8ec 	bl	80068c4 <_free_r>
 80066ec:	2000      	movs	r0, #0
 80066ee:	6360      	str	r0, [r4, #52]	; 0x34
 80066f0:	e7c0      	b.n	8006674 <__sflush_r+0x1c>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b0      	blx	r6
 80066f8:	1c41      	adds	r1, r0, #1
 80066fa:	d1c8      	bne.n	800668e <__sflush_r+0x36>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0c5      	beq.n	800668e <__sflush_r+0x36>
 8006702:	2b1d      	cmp	r3, #29
 8006704:	d001      	beq.n	800670a <__sflush_r+0xb2>
 8006706:	2b16      	cmp	r3, #22
 8006708:	d101      	bne.n	800670e <__sflush_r+0xb6>
 800670a:	602f      	str	r7, [r5, #0]
 800670c:	e7b1      	b.n	8006672 <__sflush_r+0x1a>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006714:	81a3      	strh	r3, [r4, #12]
 8006716:	e7ad      	b.n	8006674 <__sflush_r+0x1c>
 8006718:	690f      	ldr	r7, [r1, #16]
 800671a:	2f00      	cmp	r7, #0
 800671c:	d0a9      	beq.n	8006672 <__sflush_r+0x1a>
 800671e:	0793      	lsls	r3, r2, #30
 8006720:	bf18      	it	ne
 8006722:	2300      	movne	r3, #0
 8006724:	680e      	ldr	r6, [r1, #0]
 8006726:	bf08      	it	eq
 8006728:	694b      	ldreq	r3, [r1, #20]
 800672a:	eba6 0807 	sub.w	r8, r6, r7
 800672e:	600f      	str	r7, [r1, #0]
 8006730:	608b      	str	r3, [r1, #8]
 8006732:	f1b8 0f00 	cmp.w	r8, #0
 8006736:	dd9c      	ble.n	8006672 <__sflush_r+0x1a>
 8006738:	4643      	mov	r3, r8
 800673a:	463a      	mov	r2, r7
 800673c:	6a21      	ldr	r1, [r4, #32]
 800673e:	4628      	mov	r0, r5
 8006740:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006742:	47b0      	blx	r6
 8006744:	2800      	cmp	r0, #0
 8006746:	dc06      	bgt.n	8006756 <__sflush_r+0xfe>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006754:	e78e      	b.n	8006674 <__sflush_r+0x1c>
 8006756:	4407      	add	r7, r0
 8006758:	eba8 0800 	sub.w	r8, r8, r0
 800675c:	e7e9      	b.n	8006732 <__sflush_r+0xda>
 800675e:	bf00      	nop
 8006760:	20400001 	.word	0x20400001

08006764 <_fflush_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	690b      	ldr	r3, [r1, #16]
 8006768:	4605      	mov	r5, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b1db      	cbz	r3, 80067a6 <_fflush_r+0x42>
 800676e:	b118      	cbz	r0, 8006778 <_fflush_r+0x14>
 8006770:	6983      	ldr	r3, [r0, #24]
 8006772:	b90b      	cbnz	r3, 8006778 <_fflush_r+0x14>
 8006774:	f7ff fa90 	bl	8005c98 <__sinit>
 8006778:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <_fflush_r+0x48>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d109      	bne.n	8006792 <_fflush_r+0x2e>
 800677e:	686c      	ldr	r4, [r5, #4]
 8006780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006784:	b17b      	cbz	r3, 80067a6 <_fflush_r+0x42>
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678e:	f7ff bf63 	b.w	8006658 <__sflush_r>
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <_fflush_r+0x4c>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d101      	bne.n	800679c <_fflush_r+0x38>
 8006798:	68ac      	ldr	r4, [r5, #8]
 800679a:	e7f1      	b.n	8006780 <_fflush_r+0x1c>
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <_fflush_r+0x50>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	bf08      	it	eq
 80067a2:	68ec      	ldreq	r4, [r5, #12]
 80067a4:	e7ec      	b.n	8006780 <_fflush_r+0x1c>
 80067a6:	2000      	movs	r0, #0
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	08006ad0 	.word	0x08006ad0
 80067b0:	08006af0 	.word	0x08006af0
 80067b4:	08006ab0 	.word	0x08006ab0

080067b8 <_lseek_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	4c05      	ldr	r4, [pc, #20]	; (80067d8 <_lseek_r+0x20>)
 80067c4:	6022      	str	r2, [r4, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fa f873 	bl	80008b2 <_lseek>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_lseek_r+0x1e>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_lseek_r+0x1e>
 80067d4:	602b      	str	r3, [r5, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20001e3c 	.word	0x20001e3c

080067dc <__swhatbuf_r>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	460e      	mov	r6, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	b096      	sub	sp, #88	; 0x58
 80067e6:	2900      	cmp	r1, #0
 80067e8:	4614      	mov	r4, r2
 80067ea:	461d      	mov	r5, r3
 80067ec:	da07      	bge.n	80067fe <__swhatbuf_r+0x22>
 80067ee:	2300      	movs	r3, #0
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	89b3      	ldrh	r3, [r6, #12]
 80067f4:	061a      	lsls	r2, r3, #24
 80067f6:	d410      	bmi.n	800681a <__swhatbuf_r+0x3e>
 80067f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067fc:	e00e      	b.n	800681c <__swhatbuf_r+0x40>
 80067fe:	466a      	mov	r2, sp
 8006800:	f000 f8be 	bl	8006980 <_fstat_r>
 8006804:	2800      	cmp	r0, #0
 8006806:	dbf2      	blt.n	80067ee <__swhatbuf_r+0x12>
 8006808:	9a01      	ldr	r2, [sp, #4]
 800680a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800680e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006812:	425a      	negs	r2, r3
 8006814:	415a      	adcs	r2, r3
 8006816:	602a      	str	r2, [r5, #0]
 8006818:	e7ee      	b.n	80067f8 <__swhatbuf_r+0x1c>
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	2000      	movs	r0, #0
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	b016      	add	sp, #88	; 0x58
 8006822:	bd70      	pop	{r4, r5, r6, pc}

08006824 <__smakebuf_r>:
 8006824:	898b      	ldrh	r3, [r1, #12]
 8006826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006828:	079d      	lsls	r5, r3, #30
 800682a:	4606      	mov	r6, r0
 800682c:	460c      	mov	r4, r1
 800682e:	d507      	bpl.n	8006840 <__smakebuf_r+0x1c>
 8006830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	6123      	str	r3, [r4, #16]
 8006838:	2301      	movs	r3, #1
 800683a:	6163      	str	r3, [r4, #20]
 800683c:	b002      	add	sp, #8
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	ab01      	add	r3, sp, #4
 8006842:	466a      	mov	r2, sp
 8006844:	f7ff ffca 	bl	80067dc <__swhatbuf_r>
 8006848:	9900      	ldr	r1, [sp, #0]
 800684a:	4605      	mov	r5, r0
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff faad 	bl	8005dac <_malloc_r>
 8006852:	b948      	cbnz	r0, 8006868 <__smakebuf_r+0x44>
 8006854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006858:	059a      	lsls	r2, r3, #22
 800685a:	d4ef      	bmi.n	800683c <__smakebuf_r+0x18>
 800685c:	f023 0303 	bic.w	r3, r3, #3
 8006860:	f043 0302 	orr.w	r3, r3, #2
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	e7e3      	b.n	8006830 <__smakebuf_r+0xc>
 8006868:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <__smakebuf_r+0x7c>)
 800686a:	62b3      	str	r3, [r6, #40]	; 0x28
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	6020      	str	r0, [r4, #0]
 8006870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	9b00      	ldr	r3, [sp, #0]
 8006878:	6120      	str	r0, [r4, #16]
 800687a:	6163      	str	r3, [r4, #20]
 800687c:	9b01      	ldr	r3, [sp, #4]
 800687e:	b15b      	cbz	r3, 8006898 <__smakebuf_r+0x74>
 8006880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006884:	4630      	mov	r0, r6
 8006886:	f000 f88d 	bl	80069a4 <_isatty_r>
 800688a:	b128      	cbz	r0, 8006898 <__smakebuf_r+0x74>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	431d      	orrs	r5, r3
 800689c:	81a5      	strh	r5, [r4, #12]
 800689e:	e7cd      	b.n	800683c <__smakebuf_r+0x18>
 80068a0:	08005c61 	.word	0x08005c61

080068a4 <memchr>:
 80068a4:	b510      	push	{r4, lr}
 80068a6:	b2c9      	uxtb	r1, r1
 80068a8:	4402      	add	r2, r0
 80068aa:	4290      	cmp	r0, r2
 80068ac:	4603      	mov	r3, r0
 80068ae:	d101      	bne.n	80068b4 <memchr+0x10>
 80068b0:	2300      	movs	r3, #0
 80068b2:	e003      	b.n	80068bc <memchr+0x18>
 80068b4:	781c      	ldrb	r4, [r3, #0]
 80068b6:	3001      	adds	r0, #1
 80068b8:	428c      	cmp	r4, r1
 80068ba:	d1f6      	bne.n	80068aa <memchr+0x6>
 80068bc:	4618      	mov	r0, r3
 80068be:	bd10      	pop	{r4, pc}

080068c0 <__malloc_lock>:
 80068c0:	4770      	bx	lr

080068c2 <__malloc_unlock>:
 80068c2:	4770      	bx	lr

080068c4 <_free_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4605      	mov	r5, r0
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d043      	beq.n	8006954 <_free_r+0x90>
 80068cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d0:	1f0c      	subs	r4, r1, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bfb8      	it	lt
 80068d6:	18e4      	addlt	r4, r4, r3
 80068d8:	f7ff fff2 	bl	80068c0 <__malloc_lock>
 80068dc:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <_free_r+0x94>)
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	4610      	mov	r0, r2
 80068e2:	b933      	cbnz	r3, 80068f2 <_free_r+0x2e>
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	6014      	str	r4, [r2, #0]
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ee:	f7ff bfe8 	b.w	80068c2 <__malloc_unlock>
 80068f2:	42a3      	cmp	r3, r4
 80068f4:	d90b      	bls.n	800690e <_free_r+0x4a>
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	1862      	adds	r2, r4, r1
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bf01      	itttt	eq
 80068fe:	681a      	ldreq	r2, [r3, #0]
 8006900:	685b      	ldreq	r3, [r3, #4]
 8006902:	1852      	addeq	r2, r2, r1
 8006904:	6022      	streq	r2, [r4, #0]
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	6004      	str	r4, [r0, #0]
 800690a:	e7ed      	b.n	80068e8 <_free_r+0x24>
 800690c:	4613      	mov	r3, r2
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	b10a      	cbz	r2, 8006916 <_free_r+0x52>
 8006912:	42a2      	cmp	r2, r4
 8006914:	d9fa      	bls.n	800690c <_free_r+0x48>
 8006916:	6819      	ldr	r1, [r3, #0]
 8006918:	1858      	adds	r0, r3, r1
 800691a:	42a0      	cmp	r0, r4
 800691c:	d10b      	bne.n	8006936 <_free_r+0x72>
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	4401      	add	r1, r0
 8006922:	1858      	adds	r0, r3, r1
 8006924:	4282      	cmp	r2, r0
 8006926:	6019      	str	r1, [r3, #0]
 8006928:	d1de      	bne.n	80068e8 <_free_r+0x24>
 800692a:	6810      	ldr	r0, [r2, #0]
 800692c:	6852      	ldr	r2, [r2, #4]
 800692e:	4401      	add	r1, r0
 8006930:	6019      	str	r1, [r3, #0]
 8006932:	605a      	str	r2, [r3, #4]
 8006934:	e7d8      	b.n	80068e8 <_free_r+0x24>
 8006936:	d902      	bls.n	800693e <_free_r+0x7a>
 8006938:	230c      	movs	r3, #12
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	e7d4      	b.n	80068e8 <_free_r+0x24>
 800693e:	6820      	ldr	r0, [r4, #0]
 8006940:	1821      	adds	r1, r4, r0
 8006942:	428a      	cmp	r2, r1
 8006944:	bf01      	itttt	eq
 8006946:	6811      	ldreq	r1, [r2, #0]
 8006948:	6852      	ldreq	r2, [r2, #4]
 800694a:	1809      	addeq	r1, r1, r0
 800694c:	6021      	streq	r1, [r4, #0]
 800694e:	6062      	str	r2, [r4, #4]
 8006950:	605c      	str	r4, [r3, #4]
 8006952:	e7c9      	b.n	80068e8 <_free_r+0x24>
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	200019a0 	.word	0x200019a0

0800695c <_read_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4605      	mov	r5, r0
 8006960:	4608      	mov	r0, r1
 8006962:	4611      	mov	r1, r2
 8006964:	2200      	movs	r2, #0
 8006966:	4c05      	ldr	r4, [pc, #20]	; (800697c <_read_r+0x20>)
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	f7f9 ff60 	bl	8000830 <_read>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_read_r+0x1e>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	b103      	cbz	r3, 800697a <_read_r+0x1e>
 8006978:	602b      	str	r3, [r5, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	20001e3c 	.word	0x20001e3c

08006980 <_fstat_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	2300      	movs	r3, #0
 8006984:	4c06      	ldr	r4, [pc, #24]	; (80069a0 <_fstat_r+0x20>)
 8006986:	4605      	mov	r5, r0
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	f7f9 ff77 	bl	8000880 <_fstat>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d102      	bne.n	800699c <_fstat_r+0x1c>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	b103      	cbz	r3, 800699c <_fstat_r+0x1c>
 800699a:	602b      	str	r3, [r5, #0]
 800699c:	bd38      	pop	{r3, r4, r5, pc}
 800699e:	bf00      	nop
 80069a0:	20001e3c 	.word	0x20001e3c

080069a4 <_isatty_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	2300      	movs	r3, #0
 80069a8:	4c05      	ldr	r4, [pc, #20]	; (80069c0 <_isatty_r+0x1c>)
 80069aa:	4605      	mov	r5, r0
 80069ac:	4608      	mov	r0, r1
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	f7f9 ff75 	bl	800089e <_isatty>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_isatty_r+0x1a>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	b103      	cbz	r3, 80069be <_isatty_r+0x1a>
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	20001e3c 	.word	0x20001e3c

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
