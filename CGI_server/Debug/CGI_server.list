
CGI_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003fb8  08010964  08010964  00020964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801491c  0801491c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  0801491c  0801491c  0002491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014924  08014924  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014924  08014924  00024924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014928  08014928  00024928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801492c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00008e7c  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008f04  20008f04  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c2de  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005797  00000000  00000000  0005c396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00061b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  00062c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0c5  00000000  00000000  00063cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021109  00000000  00000000  00090d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da224  00000000  00000000  000b1e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018c0b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dec  00000000  00000000  0018c108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801094c 	.word	0x0801094c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801094c 	.word	0x0801094c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"x", "y", "z"};
char const** TAGS=TAGCHAR;

uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	switch (iIndex) {
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d02d      	beq.n	8000606 <ssi_handler+0x6e>
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	dc3c      	bgt.n	800062a <ssi_handler+0x92>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <ssi_handler+0x26>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d012      	beq.n	80005e2 <ssi_handler+0x4a>
			indx+=1;
			sprintf(pcInsert, "%d", indx);
			return strlen(pcInsert);
			break;
		default :
			break;
 80005bc:	e035      	b.n	800062a <ssi_handler+0x92>
			indx+=1;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <ssi_handler+0xa0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <ssi_handler+0xa0>)
 80005c6:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <ssi_handler+0xa0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <ssi_handler+0xa4>)
 80005d0:	68b8      	ldr	r0, [r7, #8]
 80005d2:	f00f f819 	bl	800f608 <siprintf>
			return strlen(pcInsert);
 80005d6:	68b8      	ldr	r0, [r7, #8]
 80005d8:	f7ff fe04 	bl	80001e4 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29b      	uxth	r3, r3
 80005e0:	e025      	b.n	800062e <ssi_handler+0x96>
			indx+=1;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <ssi_handler+0xa0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <ssi_handler+0xa0>)
 80005ea:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <ssi_handler+0xa0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <ssi_handler+0xa4>)
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f00f f807 	bl	800f608 <siprintf>
			return strlen(pcInsert);
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f7ff fdf2 	bl	80001e4 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29b      	uxth	r3, r3
 8000604:	e013      	b.n	800062e <ssi_handler+0x96>
			indx+=1;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ssi_handler+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <ssi_handler+0xa0>)
 800060e:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <ssi_handler+0xa0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4909      	ldr	r1, [pc, #36]	; (800063c <ssi_handler+0xa4>)
 8000618:	68b8      	ldr	r0, [r7, #8]
 800061a:	f00e fff5 	bl	800f608 <siprintf>
			return strlen(pcInsert);
 800061e:	68b8      	ldr	r0, [r7, #8]
 8000620:	f7ff fde0 	bl	80001e4 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29b      	uxth	r3, r3
 8000628:	e001      	b.n	800062e <ssi_handler+0x96>
			break;
 800062a:	bf00      	nop
	}

	return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000a4 	.word	0x200000a4
 800063c:	08010970 	.word	0x08010970

08000640 <CGIForm_Handler>:

//tCGI CGI_TAB[2]; // 3. For LED создадим массив для LED CGI


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
	if (iIndex == 0)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d145      	bne.n	80006e0 <CGIForm_Handler+0xa0>
	{
		for (int i=0; i<iNumParams; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e03e      	b.n	80006d8 <CGIForm_Handler+0x98>
		{
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4921      	ldr	r1, [pc, #132]	; (80006ec <CGIForm_Handler+0xac>)
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdb2 	bl	80001d0 <strcmp>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d10e      	bne.n	8000690 <CGIForm_Handler+0x50>
			{
				memset(name, '\0', 30);
 8000672:	221e      	movs	r2, #30
 8000674:	2100      	movs	r1, #0
 8000676:	481e      	ldr	r0, [pc, #120]	; (80006f0 <CGIForm_Handler+0xb0>)
 8000678:	f00e ff66 	bl	800f548 <memset>
				strcpy(name, pcValue[i]);
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	4819      	ldr	r0, [pc, #100]	; (80006f0 <CGIForm_Handler+0xb0>)
 800068a:	f00e fff9 	bl	800f680 <strcpy>
 800068e:	e020      	b.n	80006d2 <CGIForm_Handler+0x92>
			}

			else if (strcmp(pcParam[i], "lname") == 0)  // if the fname string is found
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4916      	ldr	r1, [pc, #88]	; (80006f4 <CGIForm_Handler+0xb4>)
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fd97 	bl	80001d0 <strcmp>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d114      	bne.n	80006d2 <CGIForm_Handler+0x92>
			{
				strcat(name, " ");
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <CGIForm_Handler+0xb0>)
 80006aa:	f7ff fd9b 	bl	80001e4 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <CGIForm_Handler+0xb0>)
 80006b4:	4413      	add	r3, r2
 80006b6:	4910      	ldr	r1, [pc, #64]	; (80006f8 <CGIForm_Handler+0xb8>)
 80006b8:	461a      	mov	r2, r3
 80006ba:	460b      	mov	r3, r1
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]);
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <CGIForm_Handler+0xb0>)
 80006ce:	f00e ffbb 	bl	800f648 <strcat>
		for (int i=0; i<iNumParams; i++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbbc      	blt.n	800065a <CGIForm_Handler+0x1a>
			}
		}
	}

	return "/cgiform.html";
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <CGIForm_Handler+0xbc>)
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	08010980 	.word	0x08010980
 80006f0:	2000067c 	.word	0x2000067c
 80006f4:	08010988 	.word	0x08010988
 80006f8:	08010990 	.word	0x08010990
 80006fc:	08010994 	.word	0x08010994

08000700 <http_server_init>:

	return "/cgiled.html";
}

void http_server_init (void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	httpd_init();
 8000704:	f004 fa6e 	bl	8004be4 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <http_server_init+0x24>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2203      	movs	r2, #3
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <http_server_init+0x28>)
 8000712:	f004 fa87 	bl	8004c24 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//CGI_TAB[1] = LED_CGI;  // в массив

	http_set_cgi_handlers (&FORM_CGI, 1);
 8000716:	2101      	movs	r1, #1
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <http_server_init+0x2c>)
 800071a:	f004 fac5 	bl	8004ca8 <http_set_cgi_handlers>
//	http_set_cgi_handlers (CGI_TAB, 2); // 5. И теперь мы передадим структуру массива в CGI_handle!
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000000c 	.word	0x2000000c
 8000728:	08000599 	.word	0x08000599
 800072c:	080136ac 	.word	0x080136ac

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fa1c 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f80e 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f876 	bl	800082c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000740:	f002 faa0 	bl	8002c84 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8000744:	f7ff ffdc 	bl	8000700 <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <main+0x24>)
 800074a:	f002 fe73 	bl	8003434 <ethernetif_input>
	  sys_check_timeouts();
 800074e:	f00c f9e5 	bl	800cb1c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000752:	e7f9      	b.n	8000748 <main+0x18>
 8000754:	200006a4 	.word	0x200006a4

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f00e feee 	bl	800f548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a27      	ldr	r2, [pc, #156]	; (8000824 <SystemClock_Config+0xcc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd0>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007cc:	23a8      	movs	r3, #168	; 0xa8
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fe05 	bl	80023ec <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e8:	f000 f864 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2105      	movs	r1, #5
 800080a:	4618      	mov	r0, r3
 800080c:	f002 f866 	bl	80028dc <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000816:	f000 f84d 	bl	80008b4 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <MX_GPIO_Init+0x84>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_GPIO_Init+0x84>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x84>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_GPIO_Init+0x84>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f95a 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <_kill>:

int _kill(int pid, int sig)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <_kill+0x20>)
 8000980:	2216      	movs	r2, #22
 8000982:	601a      	str	r2, [r3, #0]
	return -1;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20008ef4 	.word	0x20008ef4

08000998 <_exit>:

void _exit (int status)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ffe5 	bl	8000974 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009aa:	e7fe      	b.n	80009aa <_exit+0x12>

080009ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e00a      	b.n	80009d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009be:	f3af 8000 	nop.w
 80009c2:	4601      	mov	r1, r0
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	b2ca      	uxtb	r2, r1
 80009cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf0      	blt.n	80009be <_read+0x12>
	}

return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e009      	b.n	8000a0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf1      	blt.n	80009f8 <_write+0x12>
	}
	return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_close>:

int _close(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	return -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a46:	605a      	str	r2, [r3, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_isatty>:

int _isatty(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d205      	bcs.n	8000ac4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <_sbrk+0x6c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	371c      	adds	r7, #28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20020000 	.word	0x20020000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	200000a8 	.word	0x200000a8
 8000af0:	20008f08 	.word	0x20008f08
 8000af4:	20008ef4 	.word	0x20008ef4

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ffd7 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f00e fca3 	bl	800f494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fdef 	bl	8000730 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b60:	0801492c 	.word	0x0801492c
  ldr r2, =_sbss
 8000b64:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b68:	20008f04 	.word	0x20008f04

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f931 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe8c 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f93b 	bl	8000e4e <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 f911 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000010 	.word	0x20000010
 8000c0c:	20000018 	.word	0x20000018
 8000c10:	20000014 	.word	0x20000014

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000018 	.word	0x20000018
 8000c38:	2000069c 	.word	0x2000069c

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000069c 	.word	0x2000069c

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000018 	.word	0x20000018

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff5c 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffb0 	bl	8000dbc <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e78:	4baa      	ldr	r3, [pc, #680]	; (8001124 <HAL_ETH_Init+0x2bc>)
 8000e7a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e183      	b.n	8001196 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f002 f820 	bl	8002ee8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b9e      	ldr	r3, [pc, #632]	; (8001128 <HAL_ETH_Init+0x2c0>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	4a9d      	ldr	r2, [pc, #628]	; (8001128 <HAL_ETH_Init+0x2c0>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb8:	4b9b      	ldr	r3, [pc, #620]	; (8001128 <HAL_ETH_Init+0x2c0>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ec4:	4b99      	ldr	r3, [pc, #612]	; (800112c <HAL_ETH_Init+0x2c4>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	4a98      	ldr	r2, [pc, #608]	; (800112c <HAL_ETH_Init+0x2c4>)
 8000eca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ece:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ed0:	4b96      	ldr	r3, [pc, #600]	; (800112c <HAL_ETH_Init+0x2c4>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4994      	ldr	r1, [pc, #592]	; (800112c <HAL_ETH_Init+0x2c4>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0201 	orr.w	r2, r2, #1
 8000ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ef4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef6:	f7ff fea1 	bl	8000c3c <HAL_GetTick>
 8000efa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000efc:	e011      	b.n	8000f22 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000efe:	f7ff fe9d 	bl	8000c3c <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f0c:	d909      	bls.n	8000f22 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2203      	movs	r2, #3
 8000f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e139      	b.n	8001196 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e4      	bne.n	8000efe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f023 031c 	bic.w	r3, r3, #28
 8000f42:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f44:	f001 fe92 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 8000f48:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4a78      	ldr	r2, [pc, #480]	; (8001130 <HAL_ETH_Init+0x2c8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d908      	bls.n	8000f64 <HAL_ETH_Init+0xfc>
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_ETH_Init+0x2cc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d804      	bhi.n	8000f64 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e027      	b.n	8000fb4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4a73      	ldr	r2, [pc, #460]	; (8001134 <HAL_ETH_Init+0x2cc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d908      	bls.n	8000f7e <HAL_ETH_Init+0x116>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4a6d      	ldr	r2, [pc, #436]	; (8001124 <HAL_ETH_Init+0x2bc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d204      	bcs.n	8000f7e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f043 030c 	orr.w	r3, r3, #12
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	e01a      	b.n	8000fb4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4a68      	ldr	r2, [pc, #416]	; (8001124 <HAL_ETH_Init+0x2bc>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d303      	bcc.n	8000f8e <HAL_ETH_Init+0x126>
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4a6b      	ldr	r2, [pc, #428]	; (8001138 <HAL_ETH_Init+0x2d0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d911      	bls.n	8000fb2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4a69      	ldr	r2, [pc, #420]	; (8001138 <HAL_ETH_Init+0x2d0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d908      	bls.n	8000fa8 <HAL_ETH_Init+0x140>
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4a68      	ldr	r2, [pc, #416]	; (800113c <HAL_ETH_Init+0x2d4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d804      	bhi.n	8000fa8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e005      	b.n	8000fb4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	e000      	b.n	8000fb4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000fb2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000fbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fb98 	bl	80016f8 <HAL_ETH_WritePHYRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fd4d 	bl	8001a74 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e0d7      	b.n	8001196 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000fe6:	20ff      	movs	r0, #255	; 0xff
 8000fe8:	f7ff fe34 	bl	8000c54 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a5 	beq.w	8001140 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fe21 	bl	8000c3c <HAL_GetTick>
 8000ffa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	461a      	mov	r2, r3
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fb0f 	bl	8001628 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800100a:	f7ff fe17 	bl	8000c3c <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	; 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d90f      	bls.n	800103c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fd26 	bl	8001a74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e0ac      	b.n	8001196 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0da      	beq.n	8000ffc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800104a:	2100      	movs	r1, #0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fb53 	bl	80016f8 <HAL_ETH_WritePHYRegister>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fd08 	bl	8001a74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800106c:	2301      	movs	r3, #1
 800106e:	e092      	b.n	8001196 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001070:	f7ff fde4 	bl	8000c3c <HAL_GetTick>
 8001074:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	461a      	mov	r2, r3
 800107c:	2101      	movs	r1, #1
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fad2 	bl	8001628 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001084:	f7ff fdda 	bl	8000c3c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001092:	4293      	cmp	r3, r2
 8001094:	d90f      	bls.n	80010b6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fce9 	bl	8001a74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e06f      	b.n	8001196 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0da      	beq.n	8001076 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	461a      	mov	r2, r3
 80010c6:	2110      	movs	r1, #16
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 faad 	bl	8001628 <HAL_ETH_ReadPHYRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fcca 	bl	8001a74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80010e8:	2301      	movs	r3, #1
 80010ea:	e054      	b.n	8001196 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	e002      	b.n	8001106 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	e035      	b.n	8001184 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	e030      	b.n	8001184 <HAL_ETH_Init+0x31c>
 8001122:	bf00      	nop
 8001124:	03938700 	.word	0x03938700
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	01312cff 	.word	0x01312cff
 8001134:	02160ebf 	.word	0x02160ebf
 8001138:	05f5e0ff 	.word	0x05f5e0ff
 800113c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	085b      	lsrs	r3, r3, #1
 800114e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001150:	4313      	orrs	r3, r2
 8001152:	b29b      	uxth	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 facd 	bl	80016f8 <HAL_ETH_WritePHYRegister>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00b      	beq.n	800117c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fc82 	bl	8001a74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e00c      	b.n	8001196 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800117c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001180:	f7ff fd68 	bl	8000c54 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fc74 	bl	8001a74 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop

080011a0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_ETH_DMATxDescListInit+0x20>
 80011bc:	2302      	movs	r3, #2
 80011be:	e052      	b.n	8001266 <HAL_ETH_DMATxDescListInit+0xc6>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e030      	b.n	800123e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	015b      	lsls	r3, r3, #5
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	4413      	add	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011ec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	d208      	bcs.n	8001232 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	4413      	add	r3, r2
 800122a:	461a      	mov	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	e002      	b.n	8001238 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d3ca      	bcc.n	80011dc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001250:	3310      	adds	r3, #16
 8001252:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001272:	b480      	push	{r7}
 8001274:	b087      	sub	sp, #28
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ETH_DMARxDescListInit+0x20>
 800128e:	2302      	movs	r3, #2
 8001290:	e056      	b.n	8001340 <HAL_ETH_DMARxDescListInit+0xce>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2202      	movs	r2, #2
 800129e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e034      	b.n	8001318 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80012be:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80012c6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	461a      	mov	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d208      	bcs.n	800130c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	015b      	lsls	r3, r3, #5
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	4413      	add	r3, r2
 8001304:	461a      	mov	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	e002      	b.n	8001312 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d3c6      	bcc.n	80012ae <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132a:	330c      	adds	r3, #12
 800132c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_ETH_TransmitFrame+0x24>
 800136c:	2302      	movs	r3, #2
 800136e:	e0cd      	b.n	800150c <HAL_ETH_TransmitFrame+0x1c0>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001396:	2301      	movs	r3, #1
 8001398:	e0b8      	b.n	800150c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	da09      	bge.n	80013b8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2212      	movs	r2, #18
 80013a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0a9      	b.n	800150c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013be:	4293      	cmp	r3, r2
 80013c0:	d915      	bls.n	80013ee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	4a54      	ldr	r2, [pc, #336]	; (8001518 <HAL_ETH_TransmitFrame+0x1cc>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0a9b      	lsrs	r3, r3, #10
 80013cc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_ETH_TransmitFrame+0x1cc>)
 80013d2:	fba3 1302 	umull	r1, r3, r3, r2
 80013d6:	0a9b      	lsrs	r3, r3, #10
 80013d8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80013dc:	fb01 f303 	mul.w	r3, r1, r3
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e001      	b.n	80013f2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d11c      	bne.n	8001432 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001406:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001412:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001422:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001430:	e04b      	b.n	80014ca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	e044      	b.n	80014c2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001446:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d107      	bne.n	800145e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800145c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001466:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3b01      	subs	r3, #1
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	429a      	cmp	r2, r3
 8001470:	d116      	bne.n	80014a0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001480:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_ETH_TransmitFrame+0x1d0>)
 8001486:	fb02 f203 	mul.w	r2, r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001492:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800149e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	3301      	adds	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3b6      	bcc.n	8001438 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	3314      	adds	r3, #20
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	3314      	adds	r3, #20
 80014e8:	2204      	movs	r2, #4
 80014ea:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f4:	3304      	adds	r3, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	ac02b00b 	.word	0xac02b00b
 800151c:	fffffa0c 	.word	0xfffffa0c

08001520 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ETH_GetReceivedFrame+0x1a>
 8001536:	2302      	movs	r3, #2
 8001538:	e070      	b.n	800161c <HAL_ETH_GetReceivedFrame+0xfc>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db5a      	blt.n	800160a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001570:	2b01      	cmp	r3, #1
 8001572:	d103      	bne.n	800157c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0c1b      	lsrs	r3, r3, #16
 800158c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001590:	3b04      	subs	r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e02b      	b.n	800161c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
 80015f2:	e00a      	b.n	800160a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	460b      	mov	r3, r1
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b82      	cmp	r3, #130	; 0x82
 8001648:	d101      	bne.n	800164e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800164a:	2302      	movs	r3, #2
 800164c:	e050      	b.n	80016f0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2282      	movs	r2, #130	; 0x82
 8001652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 031c 	and.w	r3, r3, #28
 8001664:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8a1b      	ldrh	r3, [r3, #16]
 800166a:	02db      	lsls	r3, r3, #11
 800166c:	b29b      	uxth	r3, r3
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001674:	897b      	ldrh	r3, [r7, #10]
 8001676:	019b      	lsls	r3, r3, #6
 8001678:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f023 0302 	bic.w	r3, r3, #2
 8001688:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800169a:	f7ff facf 	bl	8000c3c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016a0:	e015      	b.n	80016ce <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80016a2:	f7ff facb 	bl	8000c3c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d309      	bcc.n	80016c6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e014      	b.n	80016f0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e4      	bne.n	80016a2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	460b      	mov	r3, r1
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b42      	cmp	r3, #66	; 0x42
 8001718:	d101      	bne.n	800171e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800171a:	2302      	movs	r3, #2
 800171c:	e04e      	b.n	80017bc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2242      	movs	r2, #66	; 0x42
 8001722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 031c 	and.w	r3, r3, #28
 8001734:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8a1b      	ldrh	r3, [r3, #16]
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	b29b      	uxth	r3, r3
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4313      	orrs	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001744:	897b      	ldrh	r3, [r7, #10]
 8001746:	019b      	lsls	r3, r3, #6
 8001748:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff fa62 	bl	8000c3c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800177a:	e015      	b.n	80017a8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800177c:	f7ff fa5e 	bl	8000c3c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178a:	d309      	bcc.n	80017a0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e00d      	b.n	80017bc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e4      	bne.n	800177c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ETH_Start+0x16>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e01f      	b.n	800181a <HAL_ETH_Start+0x56>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2202      	movs	r2, #2
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fb44 	bl	8001e78 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fb7b 	bl	8001eec <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fc12 	bl	8002020 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fbaf 	bl	8001f60 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fbdc 	bl	8001fc0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_ETH_Stop+0x16>
 8001834:	2302      	movs	r3, #2
 8001836:	e01f      	b.n	8001878 <HAL_ETH_Stop+0x56>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fba1 	bl	8001f90 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fbce 	bl	8001ff0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 fb66 	bl	8001f26 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fbe0 	bl	8002020 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fb26 	bl	8001eb2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ETH_ConfigMAC+0x1c>
 8001898:	2302      	movs	r3, #2
 800189a:	e0e4      	b.n	8001a66 <HAL_ETH_ConfigMAC+0x1e6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80b1 	beq.w	8001a16 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_ETH_ConfigMAC+0x1f0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80018cc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80018d2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80018d8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80018de:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80018e4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80018ea:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80018f0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80018f6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80018fc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001902:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001908:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800190e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff f994 	bl	8000c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800193c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001942:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001948:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800194e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001954:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800195a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001966:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001968:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff f96e 	bl	8000c54 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001988:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001992:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019a2:	4013      	ands	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80019b0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80019b6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80019bc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80019c2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80019c8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff f937 	bl	8000c54 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff f924 	bl	8000c54 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	61da      	str	r2, [r3, #28]
 8001a14:	e01e      	b.n	8001a54 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a24:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff f904 	bl	8000c54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	ff20810f 	.word	0xff20810f

08001a74 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0b0      	sub	sp, #192	; 0xc0
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a90:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a98:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	663b      	str	r3, [r7, #96]	; 0x60
 8001ac0:	e001      	b.n	8001ac6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aca:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b4c:	4bac      	ldr	r3, [pc, #688]	; (8001e00 <ETH_MACDMAConfig+0x38c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b58:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b5c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b60:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b66:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b6a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001b6e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001b74:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001b78:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001b7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001b7c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001b80:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001b84:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001b88:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b9c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff f853 	bl	8000c54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bbc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001bc0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bc6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001bcc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001bd2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001bd8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001bdc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001be4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001be6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff f82e 	bl	8000c54 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c00:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c0a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c14:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c24:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c28:	4013      	ands	r3, r2
 8001c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c32:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c38:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c3e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c44:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c4a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c50:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c64:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7fe ffef 	bl	8000c54 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c7e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001c84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7fe ffda 	bl	8000c54 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cbc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfe:	3318      	adds	r3, #24
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <ETH_MACDMAConfig+0x390>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d12:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d14:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d16:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d18:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d1a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d1c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d1e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d20:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d22:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d24:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d26:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d28:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d2a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d2e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d32:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	3318      	adds	r3, #24
 8001d48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	3318      	adds	r3, #24
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7fe ff78 	bl	8000c54 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d72:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d78:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001d7c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d80:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001d84:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d88:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001d8a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001d8e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7fe ff51 	bl	8000c54 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dbe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10f      	bne.n	8001de8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	331c      	adds	r3, #28
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	331c      	adds	r3, #28
 8001de6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	461a      	mov	r2, r3
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f809 	bl	8001e08 <ETH_MACAddressConfig>
}
 8001df6:	bf00      	nop
 8001df8:	37c0      	adds	r7, #192	; 0xc0
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	ff20810f 	.word	0xff20810f
 8001e04:	f8de3f23 	.word	0xf8de3f23

08001e08 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3305      	adds	r3, #5
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	3204      	adds	r2, #4
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <ETH_MACAddressConfig+0x68>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3303      	adds	r3, #3
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	061a      	lsls	r2, r3, #24
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <ETH_MACAddressConfig+0x6c>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	6013      	str	r3, [r2, #0]
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40028040 	.word	0x40028040
 8001e74:	40028044 	.word	0x40028044

08001e78 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f000 f8e9 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b084      	sub	sp, #16
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0208 	bic.w	r2, r2, #8
 8001ecc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f000 f8cc 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0204 	orr.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f000 f8af 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0204 	bic.w	r2, r2, #4
 8001f40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f000 f892 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f70:	3318      	adds	r3, #24
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f80:	3318      	adds	r3, #24
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	3318      	adds	r3, #24
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	601a      	str	r2, [r3, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0202 	orr.w	r2, r2, #2
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe0:	3318      	adds	r3, #24
 8001fe2:	601a      	str	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002000:	3318      	adds	r3, #24
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0202 	bic.w	r2, r2, #2
 800200c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002010:	3318      	adds	r3, #24
 8002012:	601a      	str	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002034:	3318      	adds	r3, #24
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002044:	3318      	adds	r3, #24
 8002046:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	3318      	adds	r3, #24
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 f80c 	bl	8002074 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002066:	3318      	adds	r3, #24
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <ETH_Delay+0x38>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <ETH_Delay+0x3c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a5b      	lsrs	r3, r3, #9
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002090:	bf00      	nop
  } 
  while (Delay --);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <ETH_Delay+0x1c>
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000010 	.word	0x20000010
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e16b      	b.n	80023a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 815a 	bne.w	80023a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	2b02      	cmp	r3, #2
 8002104:	d130      	bne.n	8002168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d017      	beq.n	80021a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d123      	bne.n	80021f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0203 	and.w	r2, r3, #3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80b4 	beq.w	80023a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b60      	ldr	r3, [pc, #384]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a5f      	ldr	r2, [pc, #380]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_GPIO_Init+0x30c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002256:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_GPIO_Init+0x310>)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	3302      	adds	r3, #2
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_GPIO_Init+0x314>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02b      	beq.n	80022da <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a51      	ldr	r2, [pc, #324]	; (80023cc <HAL_GPIO_Init+0x318>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d025      	beq.n	80022d6 <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_GPIO_Init+0x31c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4f      	ldr	r2, [pc, #316]	; (80023d4 <HAL_GPIO_Init+0x320>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x21a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4e      	ldr	r2, [pc, #312]	; (80023d8 <HAL_GPIO_Init+0x324>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x216>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4d      	ldr	r2, [pc, #308]	; (80023dc <HAL_GPIO_Init+0x328>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x212>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <HAL_GPIO_Init+0x32c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x20e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <HAL_GPIO_Init+0x330>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x20a>
 80022ba:	2307      	movs	r3, #7
 80022bc:	e00e      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022be:	2308      	movs	r3, #8
 80022c0:	e00c      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00a      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022c6:	2305      	movs	r3, #5
 80022c8:	e008      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022ca:	2304      	movs	r3, #4
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022ce:	2303      	movs	r3, #3
 80022d0:	e004      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x228>
 80022da:	2300      	movs	r3, #0
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	0092      	lsls	r2, r2, #2
 80022e4:	4093      	lsls	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ec:	4935      	ldr	r1, [pc, #212]	; (80023c4 <HAL_GPIO_Init+0x310>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_GPIO_Init+0x334>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231e:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_GPIO_Init+0x334>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002324:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_GPIO_Init+0x334>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_GPIO_Init+0x334>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_GPIO_Init+0x334>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_GPIO_Init+0x334>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_GPIO_Init+0x334>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_GPIO_Init+0x334>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	f67f ae90 	bls.w	80020d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020c00 	.word	0x40020c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40021400 	.word	0x40021400
 80023e0:	40021800 	.word	0x40021800
 80023e4:	40021c00 	.word	0x40021c00
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e264      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d075      	beq.n	80024f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240a:	4ba3      	ldr	r3, [pc, #652]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d00c      	beq.n	8002430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002416:	4ba0      	ldr	r3, [pc, #640]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d112      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b9d      	ldr	r3, [pc, #628]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b99      	ldr	r3, [pc, #612]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05b      	beq.n	80024f4 <HAL_RCC_OscConfig+0x108>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d157      	bne.n	80024f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e23f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x74>
 8002452:	4b91      	ldr	r3, [pc, #580]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a90      	ldr	r2, [pc, #576]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e01d      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x98>
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0xb0>
 8002484:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a83      	ldr	r2, [pc, #524]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a80      	ldr	r2, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fbca 	bl	8000c3c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7fe fbc6 	bl	8000c3c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e204      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0xc0>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe fbb6 	bl	8000c3c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe fbb2 	bl	8000c3c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1f0      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	4b6c      	ldr	r3, [pc, #432]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0xe8>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002516:	2b08      	cmp	r3, #8
 8002518:	d11c      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1c4      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4952      	ldr	r1, [pc, #328]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b4f      	ldr	r3, [pc, #316]	; (800269c <HAL_RCC_OscConfig+0x2b0>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fb6b 	bl	8000c3c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fb67 	bl	8000c3c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1a5      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4940      	ldr	r1, [pc, #256]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e015      	b.n	80025ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_OscConfig+0x2b0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fb4a 	bl	8000c3c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe fb46 	bl	8000c3c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e184      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d030      	beq.n	8002638 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d016      	beq.n	800260c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_OscConfig+0x2b4>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fb2a 	bl	8000c3c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fb26 	bl	8000c3c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e164      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x200>
 800260a:	e015      	b.n	8002638 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x2b4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002612:	f7fe fb13 	bl	8000c3c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261a:	f7fe fb0f 	bl	8000c3c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e14d      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a0 	beq.w	8002786 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d121      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_RCC_OscConfig+0x2b8>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800268e:	f7fe fad5 	bl	8000c3c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	e011      	b.n	80026ba <HAL_RCC_OscConfig+0x2ce>
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
 80026a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7fe fac8 	bl	8000c3c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e106      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCC_OscConfig+0x4e4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x2f0>
 80026ce:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a80      	ldr	r2, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e01c      	b.n	8002716 <HAL_RCC_OscConfig+0x32a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x312>
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	e00b      	b.n	8002716 <HAL_RCC_OscConfig+0x32a>
 80026fe:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a74      	ldr	r2, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d015      	beq.n	800274a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7fe fa8d 	bl	8000c3c <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe fa89 	bl	8000c3c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0c5      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ee      	beq.n	8002726 <HAL_RCC_OscConfig+0x33a>
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7fe fa77 	bl	8000c3c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe fa73 	bl	8000c3c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0af      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ee      	bne.n	8002752 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d105      	bne.n	8002786 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a55      	ldr	r2, [pc, #340]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 809b 	beq.w	80028c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d05c      	beq.n	8002856 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d141      	bne.n	8002828 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe fa47 	bl	8000c3c <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fe fa43 	bl	8000c3c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e081      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	019b      	lsls	r3, r3, #6
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	4937      	ldr	r1, [pc, #220]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fa1c 	bl	8000c3c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fa18 	bl	8000c3c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e056      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x41c>
 8002826:	e04e      	b.n	80028c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_OscConfig+0x4ec>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fa05 	bl	8000c3c <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fa01 	bl	8000c3c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e03f      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x44a>
 8002854:	e037      	b.n	80028c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e032      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_RCC_OscConfig+0x4e8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d028      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d11a      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002898:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289a:	4293      	cmp	r3, r2
 800289c:	d111      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40007000 	.word	0x40007000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	42470060 	.word	0x42470060

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe f936 	bl	8000c3c <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe f932 	bl	8000c3c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f896 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080136b4 	.word	0x080136b4
 8002aa0:	20000010 	.word	0x20000010
 8002aa4:	20000014 	.word	0x20000014

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac0:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	f200 80bd 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ada:	e0b7      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ade:	60bb      	str	r3, [r7, #8]
       break;
 8002ae0:	e0b7      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae2:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ae4:	60bb      	str	r3, [r7, #8]
      break;
 8002ae6:	e0b4      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04d      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	461a      	mov	r2, r3
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b0e:	f04f 0100 	mov.w	r1, #0
 8002b12:	ea02 0800 	and.w	r8, r2, r0
 8002b16:	ea03 0901 	and.w	r9, r3, r1
 8002b1a:	4640      	mov	r0, r8
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	014b      	lsls	r3, r1, #5
 8002b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b2c:	0142      	lsls	r2, r0, #5
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	ebb0 0008 	subs.w	r0, r0, r8
 8002b36:	eb61 0109 	sbc.w	r1, r1, r9
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b48:	0182      	lsls	r2, r0, #6
 8002b4a:	1a12      	subs	r2, r2, r0
 8002b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	00d9      	lsls	r1, r3, #3
 8002b5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b5e:	00d0      	lsls	r0, r2, #3
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	eb12 0208 	adds.w	r2, r2, r8
 8002b68:	eb43 0309 	adc.w	r3, r3, r9
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0259      	lsls	r1, r3, #9
 8002b76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b7a:	0250      	lsls	r0, r2, #9
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f7fd fb88 	bl	80002a0 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e04a      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	ea02 0400 	and.w	r4, r2, r0
 8002bb2:	ea03 0501 	and.w	r5, r3, r1
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	4629      	mov	r1, r5
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	014b      	lsls	r3, r1, #5
 8002bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bc8:	0142      	lsls	r2, r0, #5
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	1b00      	subs	r0, r0, r4
 8002bd0:	eb61 0105 	sbc.w	r1, r1, r5
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	018b      	lsls	r3, r1, #6
 8002bde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002be2:	0182      	lsls	r2, r0, #6
 8002be4:	1a12      	subs	r2, r2, r0
 8002be6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf8:	00d0      	lsls	r0, r2, #3
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	1912      	adds	r2, r2, r4
 8002c00:	eb45 0303 	adc.w	r3, r5, r3
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	0299      	lsls	r1, r3, #10
 8002c0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c12:	0290      	lsls	r0, r2, #10
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	f7fd fb3c 	bl	80002a0 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	60bb      	str	r3, [r7, #8]
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c4e:	60bb      	str	r3, [r7, #8]
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	68bb      	ldr	r3, [r7, #8]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	007a1200 	.word	0x007a1200

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000010 	.word	0x20000010

08002c84 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002c8a:	4b8d      	ldr	r3, [pc, #564]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002c8c:	22c0      	movs	r2, #192	; 0xc0
 8002c8e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002c90:	4b8b      	ldr	r3, [pc, #556]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002c92:	22a8      	movs	r2, #168	; 0xa8
 8002c94:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8002c96:	4b8a      	ldr	r3, [pc, #552]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002c98:	2212      	movs	r2, #18
 8002c9a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 112;
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002c9e:	2270      	movs	r2, #112	; 0x70
 8002ca0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002ca2:	4b88      	ldr	r3, [pc, #544]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002ca8:	4b86      	ldr	r3, [pc, #536]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002cb4:	4b83      	ldr	r3, [pc, #524]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002cba:	4b83      	ldr	r3, [pc, #524]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002cbc:	22c0      	movs	r2, #192	; 0xc0
 8002cbe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002cc0:	4b81      	ldr	r3, [pc, #516]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002cc2:	22a8      	movs	r2, #168	; 0xa8
 8002cc4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8002cc6:	4b80      	ldr	r3, [pc, #512]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002cc8:	2212      	movs	r2, #18
 8002cca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002ccc:	4b7e      	ldr	r3, [pc, #504]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002cd2:	f002 f8b1 	bl	8004e38 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	061a      	lsls	r2, r3, #24
 8002cdc:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	4313      	orrs	r3, r2
 8002cec:	4a74      	ldr	r2, [pc, #464]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002cee:	78d2      	ldrb	r2, [r2, #3]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	061a      	lsls	r2, r3, #24
 8002cf4:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	0619      	lsls	r1, r3, #24
 8002cfa:	4b71      	ldr	r3, [pc, #452]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	4319      	orrs	r1, r3
 8002d02:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d04:	789b      	ldrb	r3, [r3, #2]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	496d      	ldr	r1, [pc, #436]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d0c:	78c9      	ldrb	r1, [r1, #3]
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d16:	431a      	orrs	r2, r3
 8002d18:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	0619      	lsls	r1, r3, #24
 8002d1e:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	4319      	orrs	r1, r3
 8002d26:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d28:	789b      	ldrb	r3, [r3, #2]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	4964      	ldr	r1, [pc, #400]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d30:	78c9      	ldrb	r1, [r1, #3]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	4b60      	ldr	r3, [pc, #384]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	0619      	lsls	r1, r3, #24
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	4319      	orrs	r1, r3
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	430b      	orrs	r3, r1
 8002d52:	495b      	ldr	r1, [pc, #364]	; (8002ec0 <MX_LWIP_Init+0x23c>)
 8002d54:	78c9      	ldrb	r1, [r1, #3]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <MX_LWIP_Init+0x248>)
 8002d5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002d60:	4b58      	ldr	r3, [pc, #352]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	061a      	lsls	r2, r3, #24
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d70:	789b      	ldrb	r3, [r3, #2]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	4a53      	ldr	r2, [pc, #332]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d78:	78d2      	ldrb	r2, [r2, #3]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	061a      	lsls	r2, r3, #24
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	0619      	lsls	r1, r3, #24
 8002d84:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	4319      	orrs	r1, r3
 8002d8c:	4b4d      	ldr	r3, [pc, #308]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d8e:	789b      	ldrb	r3, [r3, #2]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	430b      	orrs	r3, r1
 8002d94:	494b      	ldr	r1, [pc, #300]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002d96:	78c9      	ldrb	r1, [r1, #3]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002da0:	431a      	orrs	r2, r3
 8002da2:	4b48      	ldr	r3, [pc, #288]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	0619      	lsls	r1, r3, #24
 8002da8:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	4319      	orrs	r1, r3
 8002db0:	4b44      	ldr	r3, [pc, #272]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002db2:	789b      	ldrb	r3, [r3, #2]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	430b      	orrs	r3, r1
 8002db8:	4942      	ldr	r1, [pc, #264]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002dba:	78c9      	ldrb	r1, [r1, #3]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	0619      	lsls	r1, r3, #24
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002dce:	785b      	ldrb	r3, [r3, #1]
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	4319      	orrs	r1, r3
 8002dd4:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	4939      	ldr	r1, [pc, #228]	; (8002ec4 <MX_LWIP_Init+0x240>)
 8002dde:	78c9      	ldrb	r1, [r1, #3]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	0e1b      	lsrs	r3, r3, #24
 8002de4:	4313      	orrs	r3, r2
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <MX_LWIP_Init+0x24c>)
 8002de8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	061a      	lsls	r2, r3, #24
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	431a      	orrs	r2, r3
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e02:	78d2      	ldrb	r2, [r2, #3]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	061a      	lsls	r2, r3, #24
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	0619      	lsls	r1, r3, #24
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	4319      	orrs	r1, r3
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e18:	789b      	ldrb	r3, [r3, #2]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	492a      	ldr	r1, [pc, #168]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e20:	78c9      	ldrb	r1, [r1, #3]
 8002e22:	430b      	orrs	r3, r1
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	0619      	lsls	r1, r3, #24
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	4319      	orrs	r1, r3
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e3c:	789b      	ldrb	r3, [r3, #2]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	430b      	orrs	r3, r1
 8002e42:	4921      	ldr	r1, [pc, #132]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e44:	78c9      	ldrb	r1, [r1, #3]
 8002e46:	430b      	orrs	r3, r1
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	0619      	lsls	r1, r3, #24
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	4319      	orrs	r1, r3
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e60:	789b      	ldrb	r3, [r3, #2]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	430b      	orrs	r3, r1
 8002e66:	4918      	ldr	r1, [pc, #96]	; (8002ec8 <MX_LWIP_Init+0x244>)
 8002e68:	78c9      	ldrb	r1, [r1, #3]
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <MX_LWIP_Init+0x250>)
 8002e72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <MX_LWIP_Init+0x254>)
 8002e76:	9302      	str	r3, [sp, #8]
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <MX_LWIP_Init+0x258>)
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_LWIP_Init+0x250>)
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <MX_LWIP_Init+0x24c>)
 8002e84:	4911      	ldr	r1, [pc, #68]	; (8002ecc <MX_LWIP_Init+0x248>)
 8002e86:	4816      	ldr	r0, [pc, #88]	; (8002ee0 <MX_LWIP_Init+0x25c>)
 8002e88:	f002 fc7c 	bl	8005784 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002e8c:	4814      	ldr	r0, [pc, #80]	; (8002ee0 <MX_LWIP_Init+0x25c>)
 8002e8e:	f002 fe2b 	bl	8005ae8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <MX_LWIP_Init+0x25c>)
 8002e94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002ea4:	480e      	ldr	r0, [pc, #56]	; (8002ee0 <MX_LWIP_Init+0x25c>)
 8002ea6:	f002 fe2f 	bl	8005b08 <netif_set_up>
 8002eaa:	e002      	b.n	8002eb2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <MX_LWIP_Init+0x25c>)
 8002eae:	f002 fe97 	bl	8005be0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002eb2:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <MX_LWIP_Init+0x260>)
 8002eb4:	480a      	ldr	r0, [pc, #40]	; (8002ee0 <MX_LWIP_Init+0x25c>)
 8002eb6:	f002 fec5 	bl	8005c44 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200006e0 	.word	0x200006e0
 8002ec4:	200006dc 	.word	0x200006dc
 8002ec8:	200006a0 	.word	0x200006a0
 8002ecc:	200006d8 	.word	0x200006d8
 8002ed0:	200006e4 	.word	0x200006e4
 8002ed4:	200006e8 	.word	0x200006e8
 8002ed8:	0800f2e9 	.word	0x0800f2e9
 8002edc:	08003475 	.word	0x08003475
 8002ee0:	200006a4 	.word	0x200006a4
 8002ee4:	080034e1 	.word	0x080034e1

08002ee8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a46      	ldr	r2, [pc, #280]	; (8003020 <HAL_ETH_MspInit+0x138>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f040 8085 	bne.w	8003016 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	4b44      	ldr	r3, [pc, #272]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1c:	4b41      	ldr	r3, [pc, #260]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	4a3c      	ldr	r2, [pc, #240]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f36:	6313      	str	r3, [r2, #48]	; 0x30
 8002f38:	4b3a      	ldr	r3, [pc, #232]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	4a35      	ldr	r2, [pc, #212]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f52:	6313      	str	r3, [r2, #48]	; 0x30
 8002f54:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f70:	4b2c      	ldr	r3, [pc, #176]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	4a27      	ldr	r2, [pc, #156]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002fa2:	f043 0302 	orr.w	r3, r3, #2
 8002fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <HAL_ETH_MspInit+0x13c>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002fb4:	2332      	movs	r3, #50	; 0x32
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fc4:	230b      	movs	r3, #11
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4816      	ldr	r0, [pc, #88]	; (8003028 <HAL_ETH_MspInit+0x140>)
 8002fd0:	f7ff f870 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002fd4:	2386      	movs	r3, #134	; 0x86
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fe4:	230b      	movs	r3, #11
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fec:	4619      	mov	r1, r3
 8002fee:	480f      	ldr	r0, [pc, #60]	; (800302c <HAL_ETH_MspInit+0x144>)
 8002ff0:	f7ff f860 	bl	80020b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002ff4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003006:	230b      	movs	r3, #11
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800300e:	4619      	mov	r1, r3
 8003010:	4807      	ldr	r0, [pc, #28]	; (8003030 <HAL_ETH_MspInit+0x148>)
 8003012:	f7ff f84f 	bl	80020b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003016:	bf00      	nop
 8003018:	3738      	adds	r7, #56	; 0x38
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40028000 	.word	0x40028000
 8003024:	40023800 	.word	0x40023800
 8003028:	40020800 	.word	0x40020800
 800302c:	40020000 	.word	0x40020000
 8003030:	40020400 	.word	0x40020400

08003034 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003040:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <low_level_init+0x144>)
 8003042:	4a4e      	ldr	r2, [pc, #312]	; (800317c <low_level_init+0x148>)
 8003044:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <low_level_init+0x144>)
 8003048:	2201      	movs	r2, #1
 800304a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800304c:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <low_level_init+0x144>)
 800304e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003052:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003054:	4b48      	ldr	r3, [pc, #288]	; (8003178 <low_level_init+0x144>)
 8003056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800305a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <low_level_init+0x144>)
 800305e:	2201      	movs	r2, #1
 8003060:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800306a:	23e1      	movs	r3, #225	; 0xe1
 800306c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800306e:	2300      	movs	r3, #0
 8003070:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003072:	2300      	movs	r3, #0
 8003074:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003076:	2300      	movs	r3, #0
 8003078:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800307a:	4a3f      	ldr	r2, [pc, #252]	; (8003178 <low_level_init+0x144>)
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <low_level_init+0x144>)
 8003084:	2200      	movs	r2, #0
 8003086:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <low_level_init+0x144>)
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800308e:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <low_level_init+0x144>)
 8003090:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003094:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003096:	4838      	ldr	r0, [pc, #224]	; (8003178 <low_level_init+0x144>)
 8003098:	f7fd fee6 	bl	8000e68 <HAL_ETH_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80030b8:	2304      	movs	r3, #4
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <low_level_init+0x14c>)
 80030bc:	4931      	ldr	r1, [pc, #196]	; (8003184 <low_level_init+0x150>)
 80030be:	482e      	ldr	r0, [pc, #184]	; (8003178 <low_level_init+0x144>)
 80030c0:	f7fe f86e 	bl	80011a0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80030c4:	2304      	movs	r3, #4
 80030c6:	4a30      	ldr	r2, [pc, #192]	; (8003188 <low_level_init+0x154>)
 80030c8:	4930      	ldr	r1, [pc, #192]	; (800318c <low_level_init+0x158>)
 80030ca:	482b      	ldr	r0, [pc, #172]	; (8003178 <low_level_init+0x144>)
 80030cc:	f7fe f8d1 	bl	8001272 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2206      	movs	r2, #6
 80030d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <low_level_init+0x144>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80030e4:	4b24      	ldr	r3, [pc, #144]	; (8003178 <low_level_init+0x144>)
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	785a      	ldrb	r2, [r3, #1]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <low_level_init+0x144>)
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	789a      	ldrb	r2, [r3, #2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <low_level_init+0x144>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	78da      	ldrb	r2, [r3, #3]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003108:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <low_level_init+0x144>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	791a      	ldrb	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <low_level_init+0x144>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	795a      	ldrb	r2, [r3, #5]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003126:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800312e:	f043 030a 	orr.w	r3, r3, #10
 8003132:	b2da      	uxtb	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800313a:	480f      	ldr	r0, [pc, #60]	; (8003178 <low_level_init+0x144>)
 800313c:	f7fe fb42 	bl	80017c4 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	461a      	mov	r2, r3
 8003146:	211d      	movs	r1, #29
 8003148:	480b      	ldr	r0, [pc, #44]	; (8003178 <low_level_init+0x144>)
 800314a:	f7fe fa6d 	bl	8001628 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f043 030b 	orr.w	r3, r3, #11
 8003154:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	461a      	mov	r2, r3
 800315a:	211d      	movs	r1, #29
 800315c:	4806      	ldr	r0, [pc, #24]	; (8003178 <low_level_init+0x144>)
 800315e:	f7fe facb 	bl	80016f8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	461a      	mov	r2, r3
 8003168:	211d      	movs	r1, #29
 800316a:	4803      	ldr	r0, [pc, #12]	; (8003178 <low_level_init+0x144>)
 800316c:	f7fe fa5c 	bl	8001628 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003170:	bf00      	nop
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20001fbc 	.word	0x20001fbc
 800317c:	40028000 	.word	0x40028000
 8003180:	20002004 	.word	0x20002004
 8003184:	200006ec 	.word	0x200006ec
 8003188:	2000076c 	.word	0x2000076c
 800318c:	20001f3c 	.word	0x20001f3c

08003190 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800319a:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <low_level_output+0x138>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <low_level_output+0x138>)
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	e05a      	b.n	8003278 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da03      	bge.n	80031d2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80031ca:	23f8      	movs	r3, #248	; 0xf8
 80031cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80031d0:	e05c      	b.n	800328c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	895b      	ldrh	r3, [r3, #10]
 80031d6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80031dc:	e02f      	b.n	800323e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	18d0      	adds	r0, r2, r3
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	18d1      	adds	r1, r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80031f2:	3304      	adds	r3, #4
 80031f4:	461a      	mov	r2, r3
 80031f6:	f00c f97f 	bl	800f4f8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da03      	bge.n	8003210 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003208:	23f8      	movs	r3, #248	; 0xf8
 800320a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800320e:	e03d      	b.n	800328c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003220:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800322c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003238:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003248:	4293      	cmp	r3, r2
 800324a:	d8c8      	bhi.n	80031de <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	18d0      	adds	r0, r2, r3
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4619      	mov	r1, r3
 800325e:	f00c f94b 	bl	800f4f8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1a1      	bne.n	80031c2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	4811      	ldr	r0, [pc, #68]	; (80032c8 <low_level_output+0x138>)
 8003282:	f7fe f863 	bl	800134c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <low_level_output+0x138>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003294:	3314      	adds	r3, #20
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80032a0:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <low_level_output+0x138>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a8:	3314      	adds	r3, #20
 80032aa:	2220      	movs	r2, #32
 80032ac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <low_level_output+0x138>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b6:	3304      	adds	r3, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80032bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3728      	adds	r7, #40	; 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20001fbc 	.word	0x20001fbc

080032cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08c      	sub	sp, #48	; 0x30
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80032f0:	484f      	ldr	r0, [pc, #316]	; (8003430 <low_level_input+0x164>)
 80032f2:	f7fe f915 	bl	8001520 <HAL_ETH_GetReceivedFrame>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <low_level_input+0x34>

    return NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e092      	b.n	8003426 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <low_level_input+0x164>)
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <low_level_input+0x164>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003318:	4619      	mov	r1, r3
 800331a:	2000      	movs	r0, #0
 800331c:	f002 fd2e 	bl	8005d7c <pbuf_alloc>
 8003320:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04b      	beq.n	80033c0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003328:	4b41      	ldr	r3, [pc, #260]	; (8003430 <low_level_input+0x164>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
 8003336:	e040      	b.n	80033ba <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	895b      	ldrh	r3, [r3, #10]
 800333c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003342:	e021      	b.n	8003388 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	18d0      	adds	r0, r2, r3
 800334c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	18d1      	adds	r1, r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003358:	3304      	adds	r3, #4
 800335a:	461a      	mov	r2, r3
 800335c:	f00c f8cc 	bl	800f4f8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	4413      	add	r3, r2
 8003372:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003376:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003382:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003392:	4293      	cmp	r3, r2
 8003394:	d8d6      	bhi.n	8003344 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	18d0      	adds	r0, r2, r3
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4619      	mov	r1, r3
 80033a8:	f00c f8a6 	bl	800f4f8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4413      	add	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1bb      	bne.n	8003338 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <low_level_input+0x164>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	e00b      	b.n	80033e4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	3301      	adds	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <low_level_input+0x164>)
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d3ee      	bcc.n	80033cc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <low_level_input+0x164>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <low_level_input+0x164>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fc:	3314      	adds	r3, #20
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <low_level_input+0x164>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003410:	3314      	adds	r3, #20
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <low_level_input+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800341e:	3308      	adds	r3, #8
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003426:	4618      	mov	r0, r3
 8003428:	3730      	adds	r7, #48	; 0x30
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20001fbc 	.word	0x20001fbc

08003434 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff45 	bl	80032cc <low_level_input>
 8003442:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	4798      	blx	r3
 8003454:	4603      	mov	r3, r0
 8003456:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003458:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f002 ff6f 	bl	8006344 <pbuf_free>
    p = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e000      	b.n	800346e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800346c:	bf00      	nop
  }
}
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <ethernetif_init+0x1c>
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <ethernetif_init+0x48>)
 8003484:	f44f 7202 	mov.w	r2, #520	; 0x208
 8003488:	490d      	ldr	r1, [pc, #52]	; (80034c0 <ethernetif_init+0x4c>)
 800348a:	480e      	ldr	r0, [pc, #56]	; (80034c4 <ethernetif_init+0x50>)
 800348c:	f00c f864 	bl	800f558 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2273      	movs	r2, #115	; 0x73
 8003494:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2274      	movs	r2, #116	; 0x74
 800349c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <ethernetif_init+0x54>)
 80034a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a08      	ldr	r2, [pc, #32]	; (80034cc <ethernetif_init+0x58>)
 80034aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fdc1 	bl	8003034 <low_level_init>

  return ERR_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	080109b4 	.word	0x080109b4
 80034c0:	080109d0 	.word	0x080109d0
 80034c4:	080109e0 	.word	0x080109e0
 80034c8:	0800d7ad 	.word	0x0800d7ad
 80034cc:	08003191 	.word	0x08003191

080034d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80034d4:	f7fd fbb2 	bl	8000c3c <HAL_GetTick>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d05d      	beq.n	80035be <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03f      	beq.n	800358a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800350a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800350e:	2100      	movs	r1, #0
 8003510:	4830      	ldr	r0, [pc, #192]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003512:	f7fe f8f1 	bl	80016f8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003516:	f7fd fb91 	bl	8000c3c <HAL_GetTick>
 800351a:	4603      	mov	r3, r0
 800351c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	461a      	mov	r2, r3
 8003524:	2101      	movs	r1, #1
 8003526:	482b      	ldr	r0, [pc, #172]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003528:	f7fe f87e 	bl	8001628 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800352c:	f7fd fb86 	bl	8000c3c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353a:	d828      	bhi.n	800358e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0eb      	beq.n	800351e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	461a      	mov	r2, r3
 800354c:	2110      	movs	r1, #16
 800354e:	4821      	ldr	r0, [pc, #132]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003550:	f7fe f86a 	bl	8001628 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	e002      	b.n	800356e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <ethernetif_update_config+0xf4>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <ethernetif_update_config+0xf4>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	e016      	b.n	80035ae <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	e011      	b.n	80035ae <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <ethernetif_update_config+0xb0>
          goto error;
 800358e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <ethernetif_update_config+0xf4>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	08db      	lsrs	r3, r3, #3
 8003596:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <ethernetif_update_config+0xf4>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80035a0:	4313      	orrs	r3, r2
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	480a      	ldr	r0, [pc, #40]	; (80035d4 <ethernetif_update_config+0xf4>)
 80035aa:	f7fe f8a5 	bl	80016f8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80035ae:	2100      	movs	r1, #0
 80035b0:	4808      	ldr	r0, [pc, #32]	; (80035d4 <ethernetif_update_config+0xf4>)
 80035b2:	f7fe f965 	bl	8001880 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80035b6:	4807      	ldr	r0, [pc, #28]	; (80035d4 <ethernetif_update_config+0xf4>)
 80035b8:	f7fe f904 	bl	80017c4 <HAL_ETH_Start>
 80035bc:	e002      	b.n	80035c4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <ethernetif_update_config+0xf4>)
 80035c0:	f7fe f92f 	bl	8001822 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f807 	bl	80035d8 <ethernetif_notify_conn_changed>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20001fbc 	.word	0x20001fbc

080035d8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <fs_open+0x16>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <fs_open+0x1c>
    return ERR_ARG;
 8003602:	f06f 030f 	mvn.w	r3, #15
 8003606:	e028      	b.n	800365a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <fs_open+0x78>)
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e020      	b.n	8003650 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4619      	mov	r1, r3
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f7fc fddb 	bl	80001d0 <strcmp>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d114      	bne.n	800364a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	7c1a      	ldrb	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e007      	b.n	800365a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1db      	bne.n	800360e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003656:	f06f 0305 	mvn.w	r3, #5
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	0801468c 	.word	0x0801468c

08003668 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	1ad3      	subs	r3, r2, r3
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80036a0:	20e0      	movs	r0, #224	; 0xe0
 80036a2:	f001 fe83 	bl	80053ac <mem_malloc>
 80036a6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80036ae:	22e0      	movs	r2, #224	; 0xe0
 80036b0:	2100      	movs	r1, #0
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f00b ff48 	bl	800f548 <memset>
  }
  return ret;
 80036b8:	687b      	ldr	r3, [r7, #4]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 fd05 	bl	80050e0 <mem_free>
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80036e6:	22b0      	movs	r2, #176	; 0xb0
 80036e8:	2100      	movs	r1, #0
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f00b ff2c 	bl	800f548 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80036fe:	20b0      	movs	r0, #176	; 0xb0
 8003700:	f001 fe54 	bl	80053ac <mem_malloc>
 8003704:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <http_state_alloc+0x1a>
    http_state_init(ret);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ffe6 	bl	80036de <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003712:	687b      	ldr	r3, [r7, #4]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff99 	bl	8003668 <fs_close>
    hs->handle = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ffba 	bl	80036c2 <http_ssi_state_free>
    hs->ssi = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <http_state_eof+0x50>
    pbuf_free(hs->req);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f002 fdef 	bl	8006344 <pbuf_free>
    hs->req = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <http_state_free+0x1a>
    http_state_eof(hs);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffca 	bl	800371c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f001 fca9 	bl	80050e0 <mem_free>
  }
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <http_write+0x22>
 80037ac:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <http_write+0xc8>)
 80037ae:	f240 2219 	movw	r2, #537	; 0x219
 80037b2:	492c      	ldr	r1, [pc, #176]	; (8003864 <http_write+0xcc>)
 80037b4:	482c      	ldr	r0, [pc, #176]	; (8003868 <http_write+0xd0>)
 80037b6:	f00b fecf 	bl	800f558 <iprintf>
  len = *length;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80037c0:	8afb      	ldrh	r3, [r7, #22]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <http_write+0x32>
    return ERR_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e045      	b.n	8003856 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80037d0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80037d2:	8aba      	ldrh	r2, [r7, #20]
 80037d4:	8afb      	ldrh	r3, [r7, #22]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d201      	bcs.n	80037de <http_write+0x46>
    len = max_len;
 80037da:	8abb      	ldrh	r3, [r7, #20]
 80037dc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80037e6:	8afa      	ldrh	r2, [r7, #22]
 80037e8:	8abb      	ldrh	r3, [r7, #20]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d901      	bls.n	80037f2 <http_write+0x5a>
    len = max_len;
 80037ee:	8abb      	ldrh	r3, [r7, #20]
 80037f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	8afa      	ldrh	r2, [r7, #22]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f007 fb27 	bl	800ae4c <tcp_write>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003802:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380a:	d10f      	bne.n	800382c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800381c:	2b08      	cmp	r3, #8
 800381e:	d902      	bls.n	8003826 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003820:	2301      	movs	r3, #1
 8003822:	82fb      	strh	r3, [r7, #22]
 8003824:	e002      	b.n	800382c <http_write+0x94>
      } else {
        len /= 2;
 8003826:	8afb      	ldrh	r3, [r7, #22]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800382c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003834:	d102      	bne.n	800383c <http_write+0xa4>
 8003836:	8afb      	ldrh	r3, [r7, #22]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d8da      	bhi.n	80037f2 <http_write+0x5a>

  if (err == ERR_OK) {
 800383c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8afa      	ldrh	r2, [r7, #22]
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	e002      	b.n	8003852 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003852:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	08010a84 	.word	0x08010a84
 8003864:	08010abc 	.word	0x08010abc
 8003868:	08010acc 	.word	0x08010acc

0800386c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800387a:	2100      	movs	r1, #0
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f004 fba7 	bl	8007fd0 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003882:	2100      	movs	r1, #0
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f004 fbb5 	bl	8007ff4 <tcp_recv>
  altcp_err(pcb, NULL);
 800388a:	2100      	movs	r1, #0
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f004 fbf5 	bl	800807c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f004 fc2a 	bl	80080f0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800389c:	2100      	movs	r1, #0
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f004 fbca 	bl	8008038 <tcp_sent>
  if (hs != NULL) {
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80038aa:	68b8      	ldr	r0, [r7, #8]
 80038ac:	f7ff ff62 	bl	8003774 <http_state_free>
  }

  if (abort_conn) {
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f003 facc 	bl	8006e54 <tcp_abort>
    return ERR_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e00f      	b.n	80038e0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f003 f9dd 	bl	8006c80 <tcp_close>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80038ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80038d2:	2204      	movs	r2, #4
 80038d4:	4904      	ldr	r1, [pc, #16]	; (80038e8 <http_close_or_abort_conn+0x7c>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f004 fc0a 	bl	80080f0 <tcp_poll>
  }
  return err;
 80038dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	08004957 	.word	0x08004957

080038ec <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffb6 	bl	800386c <http_close_or_abort_conn>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ffe8 	bl	80038ec <http_close_conn>
  }
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <extract_uri_parameters+0x18>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <extract_uri_parameters+0x1c>
    return (0);
 800393c:	2300      	movs	r3, #0
 800393e:	e04b      	b.n	80039d8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e03f      	b.n	80039ca <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	320c      	adds	r2, #12
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800395a:	2126      	movs	r1, #38	; 0x26
 800395c:	6978      	ldr	r0, [r7, #20]
 800395e:	f00b fe82 	bl	800f666 <strchr>
 8003962:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <extract_uri_parameters+0x54>
      *pair = '\0';
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
      pair++;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e00c      	b.n	8003992 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003978:	2120      	movs	r1, #32
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f00b fe73 	bl	800f666 <strchr>
 8003980:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <extract_uri_parameters+0x6a>
        *pair = '\0';
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003992:	213d      	movs	r1, #61	; 0x3d
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f00b fe66 	bl	800f666 <strchr>
 800399a:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <extract_uri_parameters+0x94>
      *equals = '\0';
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1c59      	adds	r1, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	321c      	adds	r2, #28
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80039b6:	e005      	b.n	80039c4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	321c      	adds	r2, #28
 80039be:	2100      	movs	r1, #0
 80039c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3301      	adds	r3, #1
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b0f      	cmp	r3, #15
 80039ce:	dc02      	bgt.n	80039d6 <extract_uri_parameters+0xb2>
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1b9      	bne.n	800394a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80039d6:	693b      	ldr	r3, [r7, #16]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <get_tag_insert+0x1c>
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <get_tag_insert+0x154>)
 80039f0:	f44f 7241 	mov.w	r2, #772	; 0x304
 80039f4:	4950      	ldr	r1, [pc, #320]	; (8003b38 <get_tag_insert+0x158>)
 80039f6:	4851      	ldr	r0, [pc, #324]	; (8003b3c <get_tag_insert+0x15c>)
 80039f8:	f00b fdae 	bl	800f558 <iprintf>
  ssi = hs->ssi;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <get_tag_insert+0x36>
 8003a08:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <get_tag_insert+0x154>)
 8003a0a:	f240 3206 	movw	r2, #774	; 0x306
 8003a0e:	494c      	ldr	r1, [pc, #304]	; (8003b40 <get_tag_insert+0x160>)
 8003a10:	484a      	ldr	r0, [pc, #296]	; (8003b3c <get_tag_insert+0x15c>)
 8003a12:	f00b fda1 	bl	800f558 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8003a16:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <get_tag_insert+0x164>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02e      	beq.n	8003a7c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <get_tag_insert+0x168>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02a      	beq.n	8003a7c <get_tag_insert+0x9c>
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <get_tag_insert+0x16c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d026      	beq.n	8003a7c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e01e      	b.n	8003a72 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f103 0012 	add.w	r0, r3, #18
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <get_tag_insert+0x168>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4619      	mov	r1, r3
 8003a48:	f7fc fbc2 	bl	80001d0 <strcmp>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003a52:	4b3c      	ldr	r3, [pc, #240]	; (8003b44 <get_tag_insert+0x164>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	f102 011b 	add.w	r1, r2, #27
 8003a5c:	22c0      	movs	r2, #192	; 0xc0
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	4798      	blx	r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8003a6a:	e060      	b.n	8003b2e <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <get_tag_insert+0x16c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	dbdb      	blt.n	8003a34 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	3312      	adds	r3, #18
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fbaf 	bl	80001e4 <strlen>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2ba6      	cmp	r3, #166	; 0xa6
 8003a8a:	d818      	bhi.n	8003abe <get_tag_insert+0xde>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3312      	adds	r3, #18
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fc fba7 	bl	80001e4 <strlen>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	d810      	bhi.n	8003abe <get_tag_insert+0xde>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3312      	adds	r3, #18
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fc fb9f 	bl	80001e4 <strlen>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2ba6      	cmp	r3, #166	; 0xa6
 8003aaa:	d806      	bhi.n	8003aba <get_tag_insert+0xda>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3312      	adds	r3, #18
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fc fb97 	bl	80001e4 <strlen>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	e002      	b.n	8003ac0 <get_tag_insert+0xe0>
 8003aba:	23a7      	movs	r3, #167	; 0xa7
 8003abc:	e000      	b.n	8003ac0 <get_tag_insert+0xe0>
 8003abe:	2309      	movs	r3, #9
 8003ac0:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	331b      	adds	r3, #27
 8003ac6:	2212      	movs	r2, #18
 8003ac8:	4921      	ldr	r1, [pc, #132]	; (8003b50 <get_tag_insert+0x170>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f00b fd14 	bl	800f4f8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	3312      	adds	r3, #18
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4619      	mov	r1, r3
 8003ade:	f00b fd0b 	bl	800f4f8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3312      	adds	r3, #18
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	3303      	adds	r3, #3
 8003aee:	2207      	movs	r2, #7
 8003af0:	4918      	ldr	r1, [pc, #96]	; (8003b54 <get_tag_insert+0x174>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00b fd00 	bl	800f4f8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3319      	adds	r3, #25
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	2200      	movs	r2, #0
 8003b02:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	331b      	adds	r3, #27
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fc fb6b 	bl	80001e4 <strlen>
 8003b0e:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d306      	bcc.n	8003b26 <get_tag_insert+0x146>
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <get_tag_insert+0x154>)
 8003b1a:	f240 323f 	movw	r2, #831	; 0x33f
 8003b1e:	490e      	ldr	r1, [pc, #56]	; (8003b58 <get_tag_insert+0x178>)
 8003b20:	4806      	ldr	r0, [pc, #24]	; (8003b3c <get_tag_insert+0x15c>)
 8003b22:	f00b fd19 	bl	800f558 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	81da      	strh	r2, [r3, #14]
}
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	08010a84 	.word	0x08010a84
 8003b38:	08010af4 	.word	0x08010af4
 8003b3c:	08010acc 	.word	0x08010acc
 8003b40:	08010b00 	.word	0x08010b00
 8003b44:	200004ec 	.word	0x200004ec
 8003b48:	200004f4 	.word	0x200004f4
 8003b4c:	200004f0 	.word	0x200004f0
 8003b50:	08010b0c 	.word	0x08010b0c
 8003b54:	08010b20 	.word	0x08010b20
 8003b58:	08010b28 	.word	0x08010b28

08003b5c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff feca 	bl	800390a <http_eof>
    return 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e016      	b.n	8003ba8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd7c 	bl	800367c <fs_bytes_left>
 8003b84:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	dc05      	bgt.n	8003b98 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff febb 	bl	800390a <http_eof>
    return 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e007      	b.n	8003ba8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <http_check_eof+0x54>)
 8003b9a:	f240 429d 	movw	r2, #1181	; 0x49d
 8003b9e:	4905      	ldr	r1, [pc, #20]	; (8003bb4 <http_check_eof+0x58>)
 8003ba0:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <http_check_eof+0x5c>)
 8003ba2:	f00b fcd9 	bl	800f558 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003ba6:	2301      	movs	r3, #1
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08010a84 	.word	0x08010a84
 8003bb4:	08010b38 	.word	0x08010b38
 8003bb8:	08010acc 	.word	0x08010acc

08003bbc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d803      	bhi.n	8003bde <http_send_data_nonssi+0x22>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	e001      	b.n	8003be2 <http_send_data_nonssi+0x26>
 8003bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003be2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6999      	ldr	r1, [r3, #24]
 8003be8:	f107 020c 	add.w	r2, r7, #12
 8003bec:	2300      	movs	r3, #0
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fdd2 	bl	8003798 <http_write>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	89ba      	ldrh	r2, [r7, #12]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	89ba      	ldrh	r2, [r7, #12]
 8003c16:	1a9a      	subs	r2, r3, r2
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <http_send_data_ssi+0x2c>
 8003c46:	4b9d      	ldr	r3, [pc, #628]	; (8003ebc <http_send_data_ssi+0x294>)
 8003c48:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8003c4c:	499c      	ldr	r1, [pc, #624]	; (8003ec0 <http_send_data_ssi+0x298>)
 8003c4e:	489d      	ldr	r0, [pc, #628]	; (8003ec4 <http_send_data_ssi+0x29c>)
 8003c50:	f00b fc82 	bl	800f558 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c5a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	f240 826a 	bls.w	800413e <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	dc06      	bgt.n	8003c8a <http_send_data_ssi+0x62>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	e001      	b.n	8003c8e <http_send_data_ssi+0x66>
 8003c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c8e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6999      	ldr	r1, [r3, #24]
 8003c94:	f107 020e 	add.w	r2, r7, #14
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fd7c 	bl	8003798 <http_write>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8003ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	89fa      	ldrh	r2, [r7, #14]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	89fa      	ldrh	r2, [r7, #14]
 8003cc2:	1a9a      	subs	r2, r3, r2
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 8235 	bne.w	800413e <http_send_data_ssi+0x516>
      return data_to_send;
 8003cd4:	7dbb      	ldrb	r3, [r7, #22]
 8003cd6:	e27b      	b.n	80041d0 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <http_send_data_ssi+0xba>
      return data_to_send;
 8003cde:	7dbb      	ldrb	r3, [r7, #22]
 8003ce0:	e276      	b.n	80041d0 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	f200 8227 	bhi.w	800413c <http_send_data_ssi+0x514>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <http_send_data_ssi+0xcc>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d5b 	.word	0x08003d5b
 8003cfc:	08003dcd 	.word	0x08003dcd
 8003d00:	08003f1b 	.word	0x08003f1b
 8003d04:	08004063 	.word	0x08004063
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8003d08:	2300      	movs	r3, #0
 8003d0a:	757b      	strb	r3, [r7, #21]
 8003d0c:	e017      	b.n	8003d3e <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	7d7b      	ldrb	r3, [r7, #21]
 8003d16:	496c      	ldr	r1, [pc, #432]	; (8003ec8 <http_send_data_ssi+0x2a0>)
 8003d18:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d10a      	bne.n	8003d38 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	7d7a      	ldrb	r2, [r7, #21]
 8003d26:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2201      	movs	r2, #1
 8003d34:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8003d36:	e005      	b.n	8003d44 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8003d38:	7d7b      	ldrb	r3, [r7, #21]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	757b      	strb	r3, [r7, #21]
 8003d3e:	7d7b      	ldrb	r3, [r7, #21]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d9e4      	bls.n	8003d0e <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	1e5a      	subs	r2, r3, #1
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	601a      	str	r2, [r3, #0]
        break;
 8003d58:	e1f1      	b.n	800413e <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	7c1b      	ldrb	r3, [r3, #16]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <http_send_data_ssi+0x2a0>)
 8003d62:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	8992      	ldrh	r2, [r2, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2200      	movs	r2, #0
 8003d76:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8003d80:	e1dd      	b.n	800413e <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	7c1b      	ldrb	r3, [r3, #16]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4b4e      	ldr	r3, [pc, #312]	; (8003ec8 <http_send_data_ssi+0x2a0>)
 8003d90:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8003d94:	6939      	ldr	r1, [r7, #16]
 8003d96:	8989      	ldrh	r1, [r1, #12]
 8003d98:	440b      	add	r3, r1
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d106      	bne.n	8003dae <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	899b      	ldrh	r3, [r3, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	819a      	strh	r2, [r3, #12]
 8003dac:	e003      	b.n	8003db6 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	1e5a      	subs	r2, r3, #1
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	601a      	str	r2, [r3, #0]
        }
        break;
 8003dca:	e1b8      	b.n	800413e <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	899b      	ldrh	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11e      	bne.n	8003e12 <http_send_data_ssi+0x1ea>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d00e      	beq.n	8003dfc <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d009      	beq.n	8003dfc <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b0a      	cmp	r3, #10
 8003df0:	d004      	beq.n	8003dfc <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003df8:	2b0d      	cmp	r3, #13
 8003dfa:	d10a      	bne.n	8003e12 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	601a      	str	r2, [r3, #0]
          break;
 8003e10:	e195      	b.n	800413e <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	7c1b      	ldrb	r3, [r3, #16]
 8003e1c:	492a      	ldr	r1, [pc, #168]	; (8003ec8 <http_send_data_ssi+0x2a0>)
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d013      	beq.n	8003e52 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d00e      	beq.n	8003e52 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b09      	cmp	r3, #9
 8003e3c:	d009      	beq.n	8003e52 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003e44:	2b0a      	cmp	r3, #10
 8003e46:	d004      	beq.n	8003e52 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b0d      	cmp	r3, #13
 8003e50:	d142      	bne.n	8003ed8 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	899b      	ldrh	r3, [r3, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 8003e62:	e04f      	b.n	8003f04 <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2203      	movs	r2, #3
 8003e68:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	899b      	ldrh	r3, [r3, #12]
 8003e70:	2bff      	cmp	r3, #255	; 0xff
 8003e72:	d906      	bls.n	8003e82 <http_send_data_ssi+0x25a>
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <http_send_data_ssi+0x294>)
 8003e76:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e7a:	4914      	ldr	r1, [pc, #80]	; (8003ecc <http_send_data_ssi+0x2a4>)
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <http_send_data_ssi+0x29c>)
 8003e7e:	f00b fb6b 	bl	800f558 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	899b      	ldrh	r3, [r3, #12]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	899b      	ldrh	r3, [r3, #12]
 8003e90:	461a      	mov	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	7c1b      	ldrb	r3, [r3, #16]
 8003ea4:	4908      	ldr	r1, [pc, #32]	; (8003ec8 <http_send_data_ssi+0x2a0>)
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	440b      	add	r3, r1
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10e      	bne.n	8003ed0 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8003eb8:	e024      	b.n	8003f04 <http_send_data_ssi+0x2dc>
 8003eba:	bf00      	nop
 8003ebc:	08010a84 	.word	0x08010a84
 8003ec0:	08010b00 	.word	0x08010b00
 8003ec4:	08010acc 	.word	0x08010acc
 8003ec8:	080146dc 	.word	0x080146dc
 8003ecc:	08010b70 	.word	0x08010b70
            } else {
              ssi->tag_index = 0;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8003ed6:	e015      	b.n	8003f04 <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	899b      	ldrh	r3, [r3, #12]
 8003edc:	2b07      	cmp	r3, #7
 8003ede:	d80d      	bhi.n	8003efc <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	899b      	ldrh	r3, [r3, #12]
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	b288      	uxth	r0, r1
 8003eec:	6939      	ldr	r1, [r7, #16]
 8003eee:	8188      	strh	r0, [r1, #12]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	440b      	add	r3, r1
 8003ef8:	749a      	strb	r2, [r3, #18]
 8003efa:	e003      	b.n	8003f04 <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	601a      	str	r2, [r3, #0]

        break;
 8003f18:	e111      	b.n	800413e <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	899b      	ldrh	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d11e      	bne.n	8003f60 <http_send_data_ssi+0x338>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d00e      	beq.n	8003f4a <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003f32:	2b09      	cmp	r3, #9
 8003f34:	d009      	beq.n	8003f4a <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b0a      	cmp	r3, #10
 8003f3e:	d004      	beq.n	8003f4a <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003f46:	2b0d      	cmp	r3, #13
 8003f48:	d10a      	bne.n	8003f60 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	1e5a      	subs	r2, r3, #1
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	601a      	str	r2, [r3, #0]
          break;
 8003f5e:	e0ee      	b.n	800413e <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	7c1b      	ldrb	r3, [r3, #16]
 8003f6a:	499b      	ldr	r1, [pc, #620]	; (80041d8 <http_send_data_ssi+0x5b0>)
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	8989      	ldrh	r1, [r1, #12]
 8003f76:	440b      	add	r3, r1
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d162      	bne.n	8004044 <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	1e5a      	subs	r2, r3, #1
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	899b      	ldrh	r3, [r3, #12]
 8003f96:	3301      	adds	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	7c1b      	ldrb	r3, [r3, #16]
 8003fa2:	4a8d      	ldr	r2, [pc, #564]	; (80041d8 <http_send_data_ssi+0x5b0>)
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	8992      	ldrh	r2, [r2, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 80c3 	bne.w	800413e <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8003fb8:	6838      	ldr	r0, [r7, #0]
 8003fba:	f7ff fd11 	bl	80039e0 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	f240 80ae 	bls.w	800413e <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	dc06      	bgt.n	8004002 <http_send_data_ssi+0x3da>
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	e001      	b.n	8004006 <http_send_data_ssi+0x3de>
 8004002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004006:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6999      	ldr	r1, [r3, #24]
 800400c:	f107 020e 	add.w	r2, r7, #14
 8004010:	2300      	movs	r3, #0
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fbc0 	bl	8003798 <http_write>
 8004018:	4603      	mov	r3, r0
 800401a:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800401c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 808c 	bne.w	800413e <http_send_data_ssi+0x516>
                data_to_send = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	89fa      	ldrh	r2, [r7, #14]
 8004030:	441a      	add	r2, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	89fa      	ldrh	r2, [r7, #14]
 800403c:	1a9a      	subs	r2, r3, r2
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
 8004042:	e07c      	b.n	800413e <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8004060:	e06d      	b.n	800413e <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	429a      	cmp	r2, r3
 800406c:	d935      	bls.n	80040da <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800407c:	4293      	cmp	r3, r2
 800407e:	dc06      	bgt.n	800408e <http_send_data_ssi+0x466>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	e001      	b.n	8004092 <http_send_data_ssi+0x46a>
 800408e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004092:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	f107 020e 	add.w	r2, r7, #14
 80040a2:	2300      	movs	r3, #0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fb77 	bl	8003798 <http_write>
 80040aa:	4603      	mov	r3, r0
 80040ac:	75fb      	strb	r3, [r7, #23]
 80040ae:	e001      	b.n	80040b4 <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80040b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d140      	bne.n	800413e <http_send_data_ssi+0x516>
            data_to_send = 1;
 80040bc:	2301      	movs	r3, #1
 80040be:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	89fa      	ldrh	r2, [r7, #14]
 80040c6:	441a      	add	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	89fa      	ldrh	r2, [r7, #14]
 80040d2:	1a9a      	subs	r2, r3, r2
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
 80040d8:	e031      	b.n	800413e <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	899a      	ldrh	r2, [r3, #12]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	89db      	ldrh	r3, [r3, #14]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d222      	bcs.n	800412c <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	89da      	ldrh	r2, [r3, #14]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	899b      	ldrh	r3, [r3, #12]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	899b      	ldrh	r3, [r3, #12]
 80040f8:	3318      	adds	r3, #24
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	1cd9      	adds	r1, r3, #3
 8004100:	f107 020e 	add.w	r2, r7, #14
 8004104:	2301      	movs	r3, #1
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fb46 	bl	8003798 <http_write>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8004110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d112      	bne.n	800413e <http_send_data_ssi+0x516>
              data_to_send = 1;
 8004118:	2301      	movs	r3, #1
 800411a:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	899a      	ldrh	r2, [r3, #12]
 8004120:	89fb      	ldrh	r3, [r7, #14]
 8004122:	4413      	add	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	819a      	strh	r2, [r3, #12]
 800412a:	e008      	b.n	800413e <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2200      	movs	r2, #0
 8004130:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800413a:	e000      	b.n	800413e <http_send_data_ssi+0x516>
        default:
          break;
 800413c:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004144:	2b04      	cmp	r3, #4
 8004146:	d003      	beq.n	8004150 <http_send_data_ssi+0x528>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <http_send_data_ssi+0x532>
 8004150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f43f adbf 	beq.w	8003cd8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004160:	2b04      	cmp	r3, #4
 8004162:	d034      	beq.n	80041ce <http_send_data_ssi+0x5a6>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d92e      	bls.n	80041ce <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800417e:	4293      	cmp	r3, r2
 8004180:	dc06      	bgt.n	8004190 <http_send_data_ssi+0x568>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	e001      	b.n	8004194 <http_send_data_ssi+0x56c>
 8004190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004194:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6999      	ldr	r1, [r3, #24]
 800419a:	f107 020e 	add.w	r2, r7, #14
 800419e:	2300      	movs	r3, #0
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff faf9 	bl	8003798 <http_write>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80041aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10d      	bne.n	80041ce <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	89fa      	ldrh	r2, [r7, #14]
 80041bc:	441a      	add	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	89fa      	ldrh	r2, [r7, #14]
 80041c8:	1a9a      	subs	r2, r3, r2
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80041ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	080146dc 	.word	0x080146dc

080041dc <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <http_send+0x18>
    return 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e030      	b.n	8004256 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fcac 	bl	8003b5c <http_check_eof>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <http_send+0x32>
      return 0;
 800420a:	2300      	movs	r3, #0
 800420c:	e023      	b.n	8004256 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8004216:	6839      	ldr	r1, [r7, #0]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fd05 	bl	8003c28 <http_send_data_ssi>
 800421e:	4603      	mov	r3, r0
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e005      	b.n	8004230 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fcc8 	bl	8003bbc <http_send_data_nonssi>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <http_send+0x78>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fa1d 	bl	800367c <fs_bytes_left>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	dc05      	bgt.n	8004254 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fb5d 	bl	800390a <http_eof>
    return 0;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <http_get_404_file+0x80>)
 800426e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7ff f9b7 	bl	80035ec <fs_open>
 800427e:	4603      	mov	r3, r0
 8004280:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8004282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d024      	beq.n	80042d4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <http_get_404_file+0x84>)
 800428e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7ff f9a7 	bl	80035ec <fs_open>
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <http_get_404_file+0x88>)
 80042ae:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7ff f997 	bl	80035ec <fs_open>
 80042be:	4603      	mov	r3, r0
 80042c0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
        return NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80042d4:	687b      	ldr	r3, [r7, #4]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	08010b88 	.word	0x08010b88
 80042e4:	08010b94 	.word	0x08010b94
 80042e8:	08010ba0 	.word	0x08010ba0

080042ec <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	; 0x38
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <http_parse_request+0x24>
 8004302:	4b65      	ldr	r3, [pc, #404]	; (8004498 <http_parse_request+0x1ac>)
 8004304:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8004308:	4964      	ldr	r1, [pc, #400]	; (800449c <http_parse_request+0x1b0>)
 800430a:	4865      	ldr	r0, [pc, #404]	; (80044a0 <http_parse_request+0x1b4>)
 800430c:	f00b f924 	bl	800f558 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <http_parse_request+0x38>
 8004316:	4b60      	ldr	r3, [pc, #384]	; (8004498 <http_parse_request+0x1ac>)
 8004318:	f240 72af 	movw	r2, #1967	; 0x7af
 800431c:	4961      	ldr	r1, [pc, #388]	; (80044a4 <http_parse_request+0x1b8>)
 800431e:	4860      	ldr	r0, [pc, #384]	; (80044a0 <http_parse_request+0x1b4>)
 8004320:	f00b f91a 	bl	800f558 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <http_parse_request+0x48>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8004334:	f06f 0307 	mvn.w	r3, #7
 8004338:	e0a9      	b.n	800448e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	621a      	str	r2, [r3, #32]
 8004348:	e005      	b.n	8004356 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004350:	4618      	mov	r0, r3
 8004352:	f002 f8b9 	bl	80064c8 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8004356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004358:	f002 f894 	bl	8006484 <pbuf_ref>

  if (hs->req->next != NULL) {
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	891b      	ldrh	r3, [r3, #8]
 800436c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004370:	4293      	cmp	r3, r2
 8004372:	bf28      	it	cs
 8004374:	4613      	movcs	r3, r2
 8004376:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6a18      	ldr	r0, [r3, #32]
 800437c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800437e:	2300      	movs	r3, #0
 8004380:	4949      	ldr	r1, [pc, #292]	; (80044a8 <http_parse_request+0x1bc>)
 8004382:	f002 f9c9 	bl	8006718 <pbuf_copy_partial>
    data = httpd_req_buf;
 8004386:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <http_parse_request+0x1bc>)
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
 800438a:	e005      	b.n	8004398 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	895b      	ldrh	r3, [r3, #10]
 8004396:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8004398:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800439a:	2b06      	cmp	r3, #6
 800439c:	d962      	bls.n	8004464 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800439e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80043a0:	461a      	mov	r2, r3
 80043a2:	4942      	ldr	r1, [pc, #264]	; (80044ac <http_parse_request+0x1c0>)
 80043a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043a6:	f000 fcdd 	bl	8004d64 <lwip_strnstr>
 80043aa:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d058      	beq.n	8004464 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80043b6:	2204      	movs	r2, #4
 80043b8:	493d      	ldr	r1, [pc, #244]	; (80044b0 <http_parse_request+0x1c4>)
 80043ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043bc:	f00b f968 	bl	800f690 <strncmp>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <http_parse_request+0x108>
        sp1 = data + 3;
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	3303      	adds	r3, #3
 80043ca:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3301      	adds	r3, #1
 80043e0:	8b7a      	ldrh	r2, [r7, #26]
 80043e2:	4934      	ldr	r1, [pc, #208]	; (80044b4 <http_parse_request+0x1c8>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fcbd 	bl	8004d64 <lwip_strnstr>
 80043ea:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d111      	bne.n	8004416 <http_parse_request+0x12a>
 80043f2:	e006      	b.n	8004402 <http_parse_request+0x116>
        data[4] = 0;
 80043f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f6:	3304      	adds	r3, #4
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80043fc:	f06f 030f 	mvn.w	r3, #15
 8004400:	e045      	b.n	800448e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	8b7a      	ldrh	r2, [r7, #26]
 8004408:	4928      	ldr	r1, [pc, #160]	; (80044ac <http_parse_request+0x1c0>)
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fcaa 	bl	8004d64 <lwip_strnstr>
 8004410:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01e      	beq.n	8004464 <http_parse_request+0x178>
 8004426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	429a      	cmp	r2, r3
 800442c:	d91a      	bls.n	8004464 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800442e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004430:	461a      	mov	r2, r3
 8004432:	4921      	ldr	r1, [pc, #132]	; (80044b8 <http_parse_request+0x1cc>)
 8004434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004436:	f000 fc95 	bl	8004d64 <lwip_strnstr>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d011      	beq.n	8004464 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	3301      	adds	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800444c:	8b3b      	ldrh	r3, [r7, #24]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8004456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004458:	6979      	ldr	r1, [r7, #20]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f000 f880 	bl	8004560 <http_find_file>
 8004460:	4603      	mov	r3, r0
 8004462:	e014      	b.n	800448e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4618      	mov	r0, r3
 800446a:	f001 fff3 	bl	8006454 <pbuf_clen>
 800446e:	4603      	mov	r3, r0
 8004470:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	891b      	ldrh	r3, [r3, #8]
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d205      	bcs.n	800448a <http_parse_request+0x19e>
 800447e:	8a7b      	ldrh	r3, [r7, #18]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d802      	bhi.n	800448a <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8004484:	f06f 0304 	mvn.w	r3, #4
 8004488:	e001      	b.n	800448e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800448a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	3738      	adds	r7, #56	; 0x38
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	08010a84 	.word	0x08010a84
 800449c:	08010bac 	.word	0x08010bac
 80044a0:	08010acc 	.word	0x08010acc
 80044a4:	08010af4 	.word	0x08010af4
 80044a8:	200000ac 	.word	0x200000ac
 80044ac:	08010bb8 	.word	0x08010bb8
 80044b0:	08010bbc 	.word	0x08010bbc
 80044b4:	08010bc4 	.word	0x08010bc4
 80044b8:	08010bc8 	.word	0x08010bc8

080044bc <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d040      	beq.n	8004552 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80044d4:	213f      	movs	r1, #63	; 0x3f
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f00b f8c5 	bl	800f666 <strchr>
 80044dc:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	613b      	str	r3, [r7, #16]
    ext = uri;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80044f2:	212e      	movs	r1, #46	; 0x2e
 80044f4:	6938      	ldr	r0, [r7, #16]
 80044f6:	f00b f8b6 	bl	800f666 <strchr>
 80044fa:	6138      	str	r0, [r7, #16]
 80044fc:	e009      	b.n	8004512 <http_uri_is_ssi+0x56>
      ext = sub;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	617b      	str	r3, [r7, #20]
      sub++;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3301      	adds	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8004508:	212e      	movs	r1, #46	; 0x2e
 800450a:	6938      	ldr	r0, [r7, #16]
 800450c:	f00b f8ab 	bl	800f666 <strchr>
 8004510:	6138      	str	r0, [r7, #16]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f2      	bne.n	80044fe <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e010      	b.n	8004540 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800451e:	4a0f      	ldr	r2, [pc, #60]	; (800455c <http_uri_is_ssi+0xa0>)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	4619      	mov	r1, r3
 8004528:	6978      	ldr	r0, [r7, #20]
 800452a:	f000 fc51 	bl	8004dd0 <lwip_stricmp>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8004534:	2301      	movs	r3, #1
 8004536:	76fb      	strb	r3, [r7, #27]
        break;
 8004538:	e005      	b.n	8004546 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d9eb      	bls.n	800451e <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <http_uri_is_ssi+0x96>
      *param = '?';
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	223f      	movs	r2, #63	; 0x3f
 8004550:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8004552:	7efb      	ldrb	r3, [r7, #27]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	080146a0 	.word	0x080146a0

08004560 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b093      	sub	sp, #76	; 0x4c
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb fe31 	bl	80001e4 <strlen>
 8004582:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d072      	beq.n	8004670 <http_find_file+0x110>
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	3b01      	subs	r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b2f      	cmp	r3, #47	; 0x2f
 8004596:	d16b      	bne.n	8004670 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004598:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800459a:	4a80      	ldr	r2, [pc, #512]	; (800479c <http_find_file+0x23c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d102      	bne.n	80045a6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d164      	bne.n	8004670 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	3b01      	subs	r3, #1
 80045aa:	2b3f      	cmp	r3, #63	; 0x3f
 80045ac:	bf28      	it	cs
 80045ae:	233f      	movcs	r3, #63	; 0x3f
 80045b0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6a3a      	ldr	r2, [r7, #32]
 80045bc:	4619      	mov	r1, r3
 80045be:	4877      	ldr	r0, [pc, #476]	; (800479c <http_find_file+0x23c>)
 80045c0:	f00a ff9a 	bl	800f4f8 <memcpy>
      http_uri_buf[copy_len] = 0;
 80045c4:	4a75      	ldr	r2, [pc, #468]	; (800479c <http_find_file+0x23c>)
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	4413      	add	r3, r2
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d2:	e04a      	b.n	800466a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d028      	beq.n	800462c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80045e0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01e      	beq.n	8004626 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80045e8:	4a6d      	ldr	r2, [pc, #436]	; (80047a0 <http_find_file+0x240>)
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fb fdf7 	bl	80001e4 <strlen>
 80045f6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bf28      	it	cs
 8004600:	4613      	movcs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	4a65      	ldr	r2, [pc, #404]	; (800479c <http_find_file+0x23c>)
 8004608:	1898      	adds	r0, r3, r2
 800460a:	4a65      	ldr	r2, [pc, #404]	; (80047a0 <http_find_file+0x240>)
 800460c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4619      	mov	r1, r3
 8004616:	f00a ff6f 	bl	800f4f8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800461a:	6a3a      	ldr	r2, [r7, #32]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	4a5e      	ldr	r2, [pc, #376]	; (800479c <http_find_file+0x23c>)
 8004622:	2100      	movs	r1, #0
 8004624:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <http_find_file+0x23c>)
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 800462a:	e004      	b.n	8004636 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800462c:	4a5c      	ldr	r2, [pc, #368]	; (80047a0 <http_find_file+0x240>)
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe ffd6 	bl	80035ec <fs_open>
 8004640:	4603      	mov	r3, r0
 8004642:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8004644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <http_find_file+0x104>
        uri = file_name;
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8004654:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <http_find_file+0x240>)
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	791b      	ldrb	r3, [r3, #4]
 800465e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8004662:	e005      	b.n	8004670 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	3301      	adds	r3, #1
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b04      	cmp	r3, #4
 800466e:	d9b1      	bls.n	80045d4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	d176      	bne.n	8004764 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	213f      	movs	r1, #63	; 0x3f
 800467a:	4618      	mov	r0, r3
 800467c:	f00a fff3 	bl	800f666 <strchr>
 8004680:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
      params++;
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	3301      	adds	r3, #1
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004694:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <http_find_file+0x244>)
 8004696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800469a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <http_find_file+0x248>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d034      	beq.n	800470e <http_find_file+0x1ae>
 80046a4:	4b41      	ldr	r3, [pc, #260]	; (80047ac <http_find_file+0x24c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d030      	beq.n	800470e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 80046ac:	2300      	movs	r3, #0
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
 80046b0:	e028      	b.n	8004704 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80046b2:	68b8      	ldr	r0, [r7, #8]
 80046b4:	4b3d      	ldr	r3, [pc, #244]	; (80047ac <http_find_file+0x24c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4619      	mov	r1, r3
 80046c2:	f7fb fd85 	bl	80001d0 <strcmp>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d118      	bne.n	80046fe <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80046cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff f928 	bl	8003924 <extract_uri_parameters>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a33      	ldr	r2, [pc, #204]	; (80047a4 <http_find_file+0x244>)
 80046d8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <http_find_file+0x24c>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	685c      	ldr	r4, [r3, #4]
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <http_find_file+0x244>)
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80046f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f6:	47a0      	blx	r4
 80046f8:	4603      	mov	r3, r0
 80046fa:	60bb      	str	r3, [r7, #8]
          break;
 80046fc:	e007      	b.n	800470e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	3301      	adds	r3, #1
 8004702:	633b      	str	r3, [r7, #48]	; 0x30
 8004704:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <http_find_file+0x248>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	429a      	cmp	r2, r3
 800470c:	dbd1      	blt.n	80046b2 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe ff69 	bl	80035ec <fs_open>
 800471a:	4603      	mov	r3, r0
 800471c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800471e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <http_find_file+0x1cc>
      file = &hs->file_handle;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
 800472a:	e006      	b.n	800473a <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800472c:	f107 0308 	add.w	r3, r7, #8
 8004730:	4619      	mov	r1, r3
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fd94 	bl	8004260 <http_get_404_file>
 8004738:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	2b00      	cmp	r3, #0
 800473e:	d011      	beq.n	8004764 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	7c1b      	ldrb	r3, [r3, #16]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <http_find_file+0x1f4>
        tag_check = 1;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004752:	e007      	b.n	8004764 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4619      	mov	r1, r3
 8004758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800475a:	f7ff feaf 	bl	80044bc <http_uri_is_ssi>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	4619      	mov	r1, r3
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fd75 	bl	8004260 <http_get_404_file>
 8004776:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f810 	bl	80047b0 <http_init_file>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3744      	adds	r7, #68	; 0x44
 8004796:	46bd      	mov	sp, r7
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	bf00      	nop
 800479c:	200004ac 	.word	0x200004ac
 80047a0:	080146b4 	.word	0x080146b4
 80047a4:	20000500 	.word	0x20000500
 80047a8:	200004fc 	.word	0x200004fc
 80047ac:	200004f8 	.word	0x200004f8

080047b0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d07d      	beq.n	80048c0 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <http_init_file+0x2a>
 80047cc:	4b45      	ldr	r3, [pc, #276]	; (80048e4 <http_init_file+0x134>)
 80047ce:	f640 120b 	movw	r2, #2315	; 0x90b
 80047d2:	4945      	ldr	r1, [pc, #276]	; (80048e8 <http_init_file+0x138>)
 80047d4:	4845      	ldr	r0, [pc, #276]	; (80048ec <http_init_file+0x13c>)
 80047d6:	f00a febf 	bl	800f558 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80047da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01c      	beq.n	800481c <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80047e2:	f7fe ff5a 	bl	800369a <http_ssi_state_alloc>
 80047e6:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <http_init_file+0x6c>
        ssi->tag_index = 0;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2200      	movs	r2, #0
 80047f2:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	461a      	mov	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	da06      	bge.n	8004840 <http_init_file+0x90>
 8004832:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <http_init_file+0x134>)
 8004834:	f640 1234 	movw	r2, #2356	; 0x934
 8004838:	492d      	ldr	r1, [pc, #180]	; (80048f0 <http_init_file+0x140>)
 800483a:	482c      	ldr	r0, [pc, #176]	; (80048ec <http_init_file+0x13c>)
 800483c:	f00a fe8c 	bl	800f558 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	461a      	mov	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	7c1b      	ldrb	r3, [r3, #16]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <http_init_file+0xbe>
 8004860:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <http_init_file+0x134>)
 8004862:	f640 1243 	movw	r2, #2371	; 0x943
 8004866:	4923      	ldr	r1, [pc, #140]	; (80048f4 <http_init_file+0x144>)
 8004868:	4820      	ldr	r0, [pc, #128]	; (80048ec <http_init_file+0x13c>)
 800486a:	f00a fe75 	bl	800f558 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d032      	beq.n	80048da <http_init_file+0x12a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	7c1b      	ldrb	r3, [r3, #16]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02b      	beq.n	80048da <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6998      	ldr	r0, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	461a      	mov	r2, r3
 800488c:	491a      	ldr	r1, [pc, #104]	; (80048f8 <http_init_file+0x148>)
 800488e:	f000 fa69 	bl	8004d64 <lwip_strnstr>
 8004892:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01f      	beq.n	80048da <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1d1a      	adds	r2, r3, #4
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	441a      	add	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1ad2      	subs	r2, r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24
 80048be:	e00c      	b.n	80048da <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	08010a84 	.word	0x08010a84
 80048e8:	08010bd0 	.word	0x08010bd0
 80048ec:	08010acc 	.word	0x08010acc
 80048f0:	08010be4 	.word	0x08010be4
 80048f4:	08010c04 	.word	0x08010c04
 80048f8:	08010bc8 	.word	0x08010bc8

080048fc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <http_err+0x1c>
    http_state_free(hs);
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7fe ff2e 	bl	8003774 <http_state_free>
  }
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <http_sent+0x1c>
    return ERR_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e008      	b.n	800494e <http_sent+0x2e>
  }

  hs->retries = 0;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004944:	6979      	ldr	r1, [r7, #20]
 8004946:	68b8      	ldr	r0, [r7, #8]
 8004948:	f7ff fc48 	bl	80041dc <http_send>

  return ERR_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800496a:	2100      	movs	r1, #0
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f7fe ffbd 	bl	80038ec <http_close_conn>
 8004972:	4603      	mov	r3, r0
 8004974:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e021      	b.n	80049be <http_poll+0x68>
  } else {
    hs->retries++;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004980:	3301      	adds	r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004990:	2b04      	cmp	r3, #4
 8004992:	d105      	bne.n	80049a0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f7fe ffa8 	bl	80038ec <http_close_conn>
      return ERR_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e00e      	b.n	80049be <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80049a8:	68f9      	ldr	r1, [r7, #12]
 80049aa:	6838      	ldr	r0, [r7, #0]
 80049ac:	f7ff fc16 	bl	80041dc <http_send>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80049b6:	6838      	ldr	r0, [r7, #0]
 80049b8:	f007 f832 	bl	800ba20 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80049da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <http_recv+0x26>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <http_recv+0x26>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d111      	bne.n	8004a12 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	891b      	ldrh	r3, [r3, #8]
 80049f8:	4619      	mov	r1, r3
 80049fa:	68b8      	ldr	r0, [r7, #8]
 80049fc:	f002 fc04 	bl	8007208 <tcp_recved>
      pbuf_free(p);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 fc9f 	bl	8006344 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004a06:	6979      	ldr	r1, [r7, #20]
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f7fe ff6f 	bl	80038ec <http_close_conn>
    return ERR_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e055      	b.n	8004abe <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	891b      	ldrh	r3, [r3, #8]
 8004a16:	4619      	mov	r1, r3
 8004a18:	68b8      	ldr	r0, [r7, #8]
 8004a1a:	f002 fbf5 	bl	8007208 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d147      	bne.n	8004ab6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	6979      	ldr	r1, [r7, #20]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fc5e 	bl	80042ec <http_parse_request>
 8004a30:	4603      	mov	r3, r0
 8004a32:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d015      	beq.n	8004a68 <http_recv+0xa0>
 8004a3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a40:	f113 0f05 	cmn.w	r3, #5
 8004a44:	d010      	beq.n	8004a68 <http_recv+0xa0>
 8004a46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a4a:	f113 0f10 	cmn.w	r3, #16
 8004a4e:	d00b      	beq.n	8004a68 <http_recv+0xa0>
 8004a50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a54:	f113 0f08 	cmn.w	r3, #8
 8004a58:	d006      	beq.n	8004a68 <http_recv+0xa0>
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <http_recv+0x100>)
 8004a5c:	f640 2204 	movw	r2, #2564	; 0xa04
 8004a60:	491a      	ldr	r1, [pc, #104]	; (8004acc <http_recv+0x104>)
 8004a62:	481b      	ldr	r0, [pc, #108]	; (8004ad0 <http_recv+0x108>)
 8004a64:	f00a fd78 	bl	800f558 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a6c:	f113 0f05 	cmn.w	r3, #5
 8004a70:	d00b      	beq.n	8004a8a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <http_recv+0xc2>
          pbuf_free(hs->req);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 fc60 	bl	8006344 <pbuf_free>
          hs->req = NULL;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2200      	movs	r2, #0
 8004a88:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 fc5a 	bl	8006344 <pbuf_free>
      if (parsed == ERR_OK) {
 8004a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004a98:	6979      	ldr	r1, [r7, #20]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f7ff fb9e 	bl	80041dc <http_send>
 8004aa0:	e00c      	b.n	8004abc <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004aa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004aa6:	f113 0f10 	cmn.w	r3, #16
 8004aaa:	d107      	bne.n	8004abc <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8004aac:	6979      	ldr	r1, [r7, #20]
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f7fe ff1c 	bl	80038ec <http_close_conn>
 8004ab4:	e002      	b.n	8004abc <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f001 fc44 	bl	8006344 <pbuf_free>
    }
  }
  return ERR_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08010a84 	.word	0x08010a84
 8004acc:	08010c30 	.word	0x08010c30
 8004ad0:	08010acc 	.word	0x08010acc

08004ad4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <http_accept+0x1c>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <http_accept+0x22>
    return ERR_VAL;
 8004af0:	f06f 0305 	mvn.w	r3, #5
 8004af4:	e025      	b.n	8004b42 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004af6:	2101      	movs	r1, #1
 8004af8:	68b8      	ldr	r0, [r7, #8]
 8004afa:	f003 f869 	bl	8007bd0 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8004afe:	f7fe fdfb 	bl	80036f8 <http_state_alloc>
 8004b02:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0e:	e018      	b.n	8004b42 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004b16:	6979      	ldr	r1, [r7, #20]
 8004b18:	68b8      	ldr	r0, [r7, #8]
 8004b1a:	f003 fa59 	bl	8007fd0 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004b1e:	490b      	ldr	r1, [pc, #44]	; (8004b4c <http_accept+0x78>)
 8004b20:	68b8      	ldr	r0, [r7, #8]
 8004b22:	f003 fa67 	bl	8007ff4 <tcp_recv>
  altcp_err(pcb, http_err);
 8004b26:	490a      	ldr	r1, [pc, #40]	; (8004b50 <http_accept+0x7c>)
 8004b28:	68b8      	ldr	r0, [r7, #8]
 8004b2a:	f003 faa7 	bl	800807c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004b2e:	2204      	movs	r2, #4
 8004b30:	4908      	ldr	r1, [pc, #32]	; (8004b54 <http_accept+0x80>)
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f003 fadc 	bl	80080f0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8004b38:	4907      	ldr	r1, [pc, #28]	; (8004b58 <http_accept+0x84>)
 8004b3a:	68b8      	ldr	r0, [r7, #8]
 8004b3c:	f003 fa7c 	bl	8008038 <tcp_sent>

  return ERR_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	080049c9 	.word	0x080049c9
 8004b50:	080048fd 	.word	0x080048fd
 8004b54:	08004957 	.word	0x08004957
 8004b58:	08004921 	.word	0x08004921

08004b5c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d029      	beq.n	8004bc2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004b6e:	2101      	movs	r1, #1
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f003 f82d 	bl	8007bd0 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004b76:	887b      	ldrh	r3, [r7, #2]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4914      	ldr	r1, [pc, #80]	; (8004bcc <httpd_init_pcb+0x70>)
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f002 f975 	bl	8006e6c <tcp_bind>
 8004b82:	4603      	mov	r3, r0
 8004b84:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d006      	beq.n	8004b9c <httpd_init_pcb+0x40>
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <httpd_init_pcb+0x74>)
 8004b90:	f640 2257 	movw	r2, #2647	; 0xa57
 8004b94:	490f      	ldr	r1, [pc, #60]	; (8004bd4 <httpd_init_pcb+0x78>)
 8004b96:	4810      	ldr	r0, [pc, #64]	; (8004bd8 <httpd_init_pcb+0x7c>)
 8004b98:	f00a fcde 	bl	800f558 <iprintf>
    pcb = altcp_listen(pcb);
 8004b9c:	21ff      	movs	r1, #255	; 0xff
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f002 fa1c 	bl	8006fdc <tcp_listen_with_backlog>
 8004ba4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <httpd_init_pcb+0x5e>
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <httpd_init_pcb+0x74>)
 8004bae:	f640 2259 	movw	r2, #2649	; 0xa59
 8004bb2:	490a      	ldr	r1, [pc, #40]	; (8004bdc <httpd_init_pcb+0x80>)
 8004bb4:	4808      	ldr	r0, [pc, #32]	; (8004bd8 <httpd_init_pcb+0x7c>)
 8004bb6:	f00a fccf 	bl	800f558 <iprintf>
    altcp_accept(pcb, http_accept);
 8004bba:	4909      	ldr	r1, [pc, #36]	; (8004be0 <httpd_init_pcb+0x84>)
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f003 fa7f 	bl	80080c0 <tcp_accept>
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	080147bc 	.word	0x080147bc
 8004bd0:	08010a84 	.word	0x08010a84
 8004bd4:	08010c5c 	.word	0x08010c5c
 8004bd8:	08010acc 	.word	0x08010acc
 8004bdc:	08010c78 	.word	0x08010c78
 8004be0:	08004ad5 	.word	0x08004ad5

08004be4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8004bea:	202e      	movs	r0, #46	; 0x2e
 8004bec:	f003 f9e2 	bl	8007fb4 <tcp_new_ip_type>
 8004bf0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <httpd_init+0x22>
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <httpd_init+0x34>)
 8004bfa:	f640 2272 	movw	r2, #2674	; 0xa72
 8004bfe:	4907      	ldr	r1, [pc, #28]	; (8004c1c <httpd_init+0x38>)
 8004c00:	4807      	ldr	r0, [pc, #28]	; (8004c20 <httpd_init+0x3c>)
 8004c02:	f00a fca9 	bl	800f558 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8004c06:	2150      	movs	r1, #80	; 0x50
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ffa7 	bl	8004b5c <httpd_init_pcb>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	08010a84 	.word	0x08010a84
 8004c1c:	08010c98 	.word	0x08010c98
 8004c20:	08010acc 	.word	0x08010acc

08004c24 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <http_set_ssi_handler+0x20>
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <http_set_ssi_handler+0x64>)
 8004c38:	f640 2297 	movw	r2, #2711	; 0xa97
 8004c3c:	4913      	ldr	r1, [pc, #76]	; (8004c8c <http_set_ssi_handler+0x68>)
 8004c3e:	4814      	ldr	r0, [pc, #80]	; (8004c90 <http_set_ssi_handler+0x6c>)
 8004c40:	f00a fc8a 	bl	800f558 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8004c44:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <http_set_ssi_handler+0x70>)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <http_set_ssi_handler+0x3a>
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <http_set_ssi_handler+0x64>)
 8004c52:	f640 229e 	movw	r2, #2718	; 0xa9e
 8004c56:	4910      	ldr	r1, [pc, #64]	; (8004c98 <http_set_ssi_handler+0x74>)
 8004c58:	480d      	ldr	r0, [pc, #52]	; (8004c90 <http_set_ssi_handler+0x6c>)
 8004c5a:	f00a fc7d 	bl	800f558 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	dc06      	bgt.n	8004c72 <http_set_ssi_handler+0x4e>
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <http_set_ssi_handler+0x64>)
 8004c66:	f640 229f 	movw	r2, #2719	; 0xa9f
 8004c6a:	490c      	ldr	r1, [pc, #48]	; (8004c9c <http_set_ssi_handler+0x78>)
 8004c6c:	4808      	ldr	r0, [pc, #32]	; (8004c90 <http_set_ssi_handler+0x6c>)
 8004c6e:	f00a fc73 	bl	800f558 <iprintf>

  httpd_tags = tags;
 8004c72:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <http_set_ssi_handler+0x7c>)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8004c78:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <http_set_ssi_handler+0x80>)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	08010a84 	.word	0x08010a84
 8004c8c:	08010cb4 	.word	0x08010cb4
 8004c90:	08010acc 	.word	0x08010acc
 8004c94:	200004ec 	.word	0x200004ec
 8004c98:	08010ccc 	.word	0x08010ccc
 8004c9c:	08010cdc 	.word	0x08010cdc
 8004ca0:	200004f4 	.word	0x200004f4
 8004ca4:	200004f0 	.word	0x200004f0

08004ca8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <http_set_cgi_handlers+0x1e>
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <http_set_cgi_handlers+0x48>)
 8004cba:	f640 22b2 	movw	r2, #2738	; 0xab2
 8004cbe:	490d      	ldr	r1, [pc, #52]	; (8004cf4 <http_set_cgi_handlers+0x4c>)
 8004cc0:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <http_set_cgi_handlers+0x50>)
 8004cc2:	f00a fc49 	bl	800f558 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc06      	bgt.n	8004cda <http_set_cgi_handlers+0x32>
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <http_set_cgi_handlers+0x48>)
 8004cce:	f640 22b3 	movw	r2, #2739	; 0xab3
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <http_set_cgi_handlers+0x54>)
 8004cd4:	4808      	ldr	r0, [pc, #32]	; (8004cf8 <http_set_cgi_handlers+0x50>)
 8004cd6:	f00a fc3f 	bl	800f558 <iprintf>

  httpd_cgis = cgis;
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <http_set_cgi_handlers+0x58>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8004ce0:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <http_set_cgi_handlers+0x5c>)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	08010a84 	.word	0x08010a84
 8004cf4:	08010cf4 	.word	0x08010cf4
 8004cf8:	08010acc 	.word	0x08010acc
 8004cfc:	08010d04 	.word	0x08010d04
 8004d00:	200004f8 	.word	0x200004f8
 8004d04:	200004fc 	.word	0x200004fc

08004d08 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	b21a      	sxth	r2, r3
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	4313      	orrs	r3, r2
 8004d22:	b21b      	sxth	r3, r3
 8004d24:	b29b      	uxth	r3, r3
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	061a      	lsls	r2, r3, #24
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	4313      	orrs	r3, r2
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8004d70:	68b8      	ldr	r0, [r7, #8]
 8004d72:	f7fb fa37 	bl	80001e4 <strlen>
 8004d76:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	e022      	b.n	8004dc8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e012      	b.n	8004dae <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d109      	bne.n	8004da8 <lwip_strnstr+0x44>
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f00a fc79 	bl	800f690 <strncmp>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	e00f      	b.n	8004dc8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3301      	adds	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <lwip_strnstr+0x62>
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	441a      	add	r2, r3
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	440b      	add	r3, r1
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d9e0      	bls.n	8004d88 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	603a      	str	r2, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8004dee:	7bfa      	ldrb	r2, [r7, #15]
 8004df0:	7bbb      	ldrb	r3, [r7, #14]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d016      	beq.n	8004e24 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	f043 0320 	orr.w	r3, r3, #32
 8004dfc:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004dfe:	7b7b      	ldrb	r3, [r7, #13]
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d90c      	bls.n	8004e1e <lwip_stricmp+0x4e>
 8004e04:	7b7b      	ldrb	r3, [r7, #13]
 8004e06:	2b7a      	cmp	r3, #122	; 0x7a
 8004e08:	d809      	bhi.n	8004e1e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8004e0a:	7bbb      	ldrb	r3, [r7, #14]
 8004e0c:	f043 0320 	orr.w	r3, r3, #32
 8004e10:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8004e12:	7b7a      	ldrb	r2, [r7, #13]
 8004e14:	7b3b      	ldrb	r3, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d003      	beq.n	8004e22 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e006      	b.n	8004e2c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e004      	b.n	8004e2c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004e22:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1d7      	bne.n	8004dda <lwip_stricmp+0xa>
  return 0;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004e42:	f000 f8d5 	bl	8004ff0 <mem_init>
  memp_init();
 8004e46:	f000 fbdb 	bl	8005600 <memp_init>
  pbuf_init();
  netif_init();
 8004e4a:	f000 fc93 	bl	8005774 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004e4e:	f007 fea7 	bl	800cba0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004e52:	f001 fd05 	bl	8006860 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004e56:	f007 fe19 	bl	800ca8c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <ptr_to_mem+0x20>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	4413      	add	r3, r2
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000504 	.word	0x20000504

08004e88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004e90:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <mem_to_ptr+0x20>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	b29b      	uxth	r3, r3
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000504 	.word	0x20000504

08004eac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004eb4:	4b45      	ldr	r3, [pc, #276]	; (8004fcc <plug_holes+0x120>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d206      	bcs.n	8004ecc <plug_holes+0x20>
 8004ebe:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <plug_holes+0x124>)
 8004ec0:	f240 12df 	movw	r2, #479	; 0x1df
 8004ec4:	4943      	ldr	r1, [pc, #268]	; (8004fd4 <plug_holes+0x128>)
 8004ec6:	4844      	ldr	r0, [pc, #272]	; (8004fd8 <plug_holes+0x12c>)
 8004ec8:	f00a fb46 	bl	800f558 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ecc:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <plug_holes+0x130>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d306      	bcc.n	8004ee4 <plug_holes+0x38>
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <plug_holes+0x124>)
 8004ed8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004edc:	4940      	ldr	r1, [pc, #256]	; (8004fe0 <plug_holes+0x134>)
 8004ede:	483e      	ldr	r0, [pc, #248]	; (8004fd8 <plug_holes+0x12c>)
 8004ee0:	f00a fb3a 	bl	800f558 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	791b      	ldrb	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <plug_holes+0x4e>
 8004eec:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <plug_holes+0x124>)
 8004eee:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004ef2:	493c      	ldr	r1, [pc, #240]	; (8004fe4 <plug_holes+0x138>)
 8004ef4:	4838      	ldr	r0, [pc, #224]	; (8004fd8 <plug_holes+0x12c>)
 8004ef6:	f00a fb2f 	bl	800f558 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f02:	d906      	bls.n	8004f12 <plug_holes+0x66>
 8004f04:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <plug_holes+0x124>)
 8004f06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004f0a:	4937      	ldr	r1, [pc, #220]	; (8004fe8 <plug_holes+0x13c>)
 8004f0c:	4832      	ldr	r0, [pc, #200]	; (8004fd8 <plug_holes+0x12c>)
 8004f0e:	f00a fb23 	bl	800f558 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff ffa4 	bl	8004e64 <ptr_to_mem>
 8004f1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d024      	beq.n	8004f70 <plug_holes+0xc4>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	791b      	ldrb	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d120      	bne.n	8004f70 <plug_holes+0xc4>
 8004f2e:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <plug_holes+0x130>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d01b      	beq.n	8004f70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <plug_holes+0x140>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d102      	bne.n	8004f48 <plug_holes+0x9c>
      lfree = mem;
 8004f42:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <plug_holes+0x140>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f58:	d00a      	beq.n	8004f70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff80 	bl	8004e64 <ptr_to_mem>
 8004f64:	4604      	mov	r4, r0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ff8e 	bl	8004e88 <mem_to_ptr>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	885b      	ldrh	r3, [r3, #2]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff ff75 	bl	8004e64 <ptr_to_mem>
 8004f7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d01f      	beq.n	8004fc4 <plug_holes+0x118>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	791b      	ldrb	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d11b      	bne.n	8004fc4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <plug_holes+0x140>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d102      	bne.n	8004f9c <plug_holes+0xf0>
      lfree = pmem;
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <plug_holes+0x140>)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	881a      	ldrh	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004fac:	d00a      	beq.n	8004fc4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff56 	bl	8004e64 <ptr_to_mem>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	68b8      	ldr	r0, [r7, #8]
 8004fbc:	f7ff ff64 	bl	8004e88 <mem_to_ptr>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd90      	pop	{r4, r7, pc}
 8004fcc:	20000504 	.word	0x20000504
 8004fd0:	08010d20 	.word	0x08010d20
 8004fd4:	08010d50 	.word	0x08010d50
 8004fd8:	08010d68 	.word	0x08010d68
 8004fdc:	20000508 	.word	0x20000508
 8004fe0:	08010d90 	.word	0x08010d90
 8004fe4:	08010dac 	.word	0x08010dac
 8004fe8:	08010dc8 	.word	0x08010dc8
 8004fec:	2000050c 	.word	0x2000050c

08004ff0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <mem_init+0x68>)
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b16      	ldr	r3, [pc, #88]	; (800505c <mem_init+0x6c>)
 8005002:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <mem_init+0x6c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005010:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800501e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8005022:	f7ff ff1f 	bl	8004e64 <ptr_to_mem>
 8005026:	4603      	mov	r3, r0
 8005028:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <mem_init+0x70>)
 800502a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <mem_init+0x70>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2201      	movs	r2, #1
 8005032:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <mem_init+0x70>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800503c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <mem_init+0x70>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005046:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <mem_init+0x6c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a05      	ldr	r2, [pc, #20]	; (8005064 <mem_init+0x74>)
 800504e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	200037ec 	.word	0x200037ec
 800505c:	20000504 	.word	0x20000504
 8005060:	20000508 	.word	0x20000508
 8005064:	2000050c 	.word	0x2000050c

08005068 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff09 	bl	8004e88 <mem_to_ptr>
 8005076:	4603      	mov	r3, r0
 8005078:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fef0 	bl	8004e64 <ptr_to_mem>
 8005084:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	885b      	ldrh	r3, [r3, #2]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff feea 	bl	8004e64 <ptr_to_mem>
 8005090:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800509a:	d818      	bhi.n	80050ce <mem_link_valid+0x66>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	885b      	ldrh	r3, [r3, #2]
 80050a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050a4:	d813      	bhi.n	80050ce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80050aa:	8afa      	ldrh	r2, [r7, #22]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d004      	beq.n	80050ba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	8afa      	ldrh	r2, [r7, #22]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d109      	bne.n	80050ce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <mem_link_valid+0x74>)
 80050bc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d006      	beq.n	80050d2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	885b      	ldrh	r3, [r3, #2]
 80050c8:	8afa      	ldrh	r2, [r7, #22]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d001      	beq.n	80050d2 <mem_link_valid+0x6a>
    return 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <mem_link_valid+0x6c>
  }
  return 1;
 80050d2:	2301      	movs	r3, #1
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000508 	.word	0x20000508

080050e0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d04c      	beq.n	8005188 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80050f8:	4b25      	ldr	r3, [pc, #148]	; (8005190 <mem_free+0xb0>)
 80050fa:	f240 2273 	movw	r2, #627	; 0x273
 80050fe:	4925      	ldr	r1, [pc, #148]	; (8005194 <mem_free+0xb4>)
 8005100:	4825      	ldr	r0, [pc, #148]	; (8005198 <mem_free+0xb8>)
 8005102:	f00a fa29 	bl	800f558 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005106:	e040      	b.n	800518a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3b08      	subs	r3, #8
 800510c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800510e:	4b23      	ldr	r3, [pc, #140]	; (800519c <mem_free+0xbc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	429a      	cmp	r2, r3
 8005116:	d306      	bcc.n	8005126 <mem_free+0x46>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 020c 	add.w	r2, r3, #12
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <mem_free+0xc0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d907      	bls.n	8005136 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005126:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <mem_free+0xb0>)
 8005128:	f240 227f 	movw	r2, #639	; 0x27f
 800512c:	491d      	ldr	r1, [pc, #116]	; (80051a4 <mem_free+0xc4>)
 800512e:	481a      	ldr	r0, [pc, #104]	; (8005198 <mem_free+0xb8>)
 8005130:	f00a fa12 	bl	800f558 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005134:	e029      	b.n	800518a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	791b      	ldrb	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800513e:	4b14      	ldr	r3, [pc, #80]	; (8005190 <mem_free+0xb0>)
 8005140:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005144:	4918      	ldr	r1, [pc, #96]	; (80051a8 <mem_free+0xc8>)
 8005146:	4814      	ldr	r0, [pc, #80]	; (8005198 <mem_free+0xb8>)
 8005148:	f00a fa06 	bl	800f558 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800514c:	e01d      	b.n	800518a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ff8a 	bl	8005068 <mem_link_valid>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d107      	bne.n	800516a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <mem_free+0xb0>)
 800515c:	f240 2295 	movw	r2, #661	; 0x295
 8005160:	4912      	ldr	r1, [pc, #72]	; (80051ac <mem_free+0xcc>)
 8005162:	480d      	ldr	r0, [pc, #52]	; (8005198 <mem_free+0xb8>)
 8005164:	f00a f9f8 	bl	800f558 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005168:	e00f      	b.n	800518a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <mem_free+0xd0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	429a      	cmp	r2, r3
 8005178:	d202      	bcs.n	8005180 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800517a:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <mem_free+0xd0>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fe93 	bl	8004eac <plug_holes>
 8005186:	e000      	b.n	800518a <mem_free+0xaa>
    return;
 8005188:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	08010d20 	.word	0x08010d20
 8005194:	08010df4 	.word	0x08010df4
 8005198:	08010d68 	.word	0x08010d68
 800519c:	20000504 	.word	0x20000504
 80051a0:	20000508 	.word	0x20000508
 80051a4:	08010e18 	.word	0x08010e18
 80051a8:	08010e34 	.word	0x08010e34
 80051ac:	08010e5c 	.word	0x08010e5c
 80051b0:	2000050c 	.word	0x2000050c

080051b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	3303      	adds	r3, #3
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80051cc:	8bfb      	ldrh	r3, [r7, #30]
 80051ce:	2b0b      	cmp	r3, #11
 80051d0:	d801      	bhi.n	80051d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80051d2:	230c      	movs	r3, #12
 80051d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80051d6:	8bfb      	ldrh	r3, [r7, #30]
 80051d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80051dc:	d803      	bhi.n	80051e6 <mem_trim+0x32>
 80051de:	8bfa      	ldrh	r2, [r7, #30]
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d201      	bcs.n	80051ea <mem_trim+0x36>
    return NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e0cc      	b.n	8005384 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80051ea:	4b68      	ldr	r3, [pc, #416]	; (800538c <mem_trim+0x1d8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d304      	bcc.n	80051fe <mem_trim+0x4a>
 80051f4:	4b66      	ldr	r3, [pc, #408]	; (8005390 <mem_trim+0x1dc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d306      	bcc.n	800520c <mem_trim+0x58>
 80051fe:	4b65      	ldr	r3, [pc, #404]	; (8005394 <mem_trim+0x1e0>)
 8005200:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005204:	4964      	ldr	r1, [pc, #400]	; (8005398 <mem_trim+0x1e4>)
 8005206:	4865      	ldr	r0, [pc, #404]	; (800539c <mem_trim+0x1e8>)
 8005208:	f00a f9a6 	bl	800f558 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800520c:	4b5f      	ldr	r3, [pc, #380]	; (800538c <mem_trim+0x1d8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d304      	bcc.n	8005220 <mem_trim+0x6c>
 8005216:	4b5e      	ldr	r3, [pc, #376]	; (8005390 <mem_trim+0x1dc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d301      	bcc.n	8005224 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	e0af      	b.n	8005384 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b08      	subs	r3, #8
 8005228:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	f7ff fe2c 	bl	8004e88 <mem_to_ptr>
 8005230:	4603      	mov	r3, r0
 8005232:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	8afb      	ldrh	r3, [r7, #22]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b08      	subs	r3, #8
 8005240:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005242:	8bfa      	ldrh	r2, [r7, #30]
 8005244:	8abb      	ldrh	r3, [r7, #20]
 8005246:	429a      	cmp	r2, r3
 8005248:	d906      	bls.n	8005258 <mem_trim+0xa4>
 800524a:	4b52      	ldr	r3, [pc, #328]	; (8005394 <mem_trim+0x1e0>)
 800524c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005250:	4953      	ldr	r1, [pc, #332]	; (80053a0 <mem_trim+0x1ec>)
 8005252:	4852      	ldr	r0, [pc, #328]	; (800539c <mem_trim+0x1e8>)
 8005254:	f00a f980 	bl	800f558 <iprintf>
  if (newsize > size) {
 8005258:	8bfa      	ldrh	r2, [r7, #30]
 800525a:	8abb      	ldrh	r3, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	d901      	bls.n	8005264 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	e08f      	b.n	8005384 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005264:	8bfa      	ldrh	r2, [r7, #30]
 8005266:	8abb      	ldrh	r3, [r7, #20]
 8005268:	429a      	cmp	r2, r3
 800526a:	d101      	bne.n	8005270 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	e089      	b.n	8005384 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fdf5 	bl	8004e64 <ptr_to_mem>
 800527a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d13f      	bne.n	8005304 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800528c:	d106      	bne.n	800529c <mem_trim+0xe8>
 800528e:	4b41      	ldr	r3, [pc, #260]	; (8005394 <mem_trim+0x1e0>)
 8005290:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005294:	4943      	ldr	r1, [pc, #268]	; (80053a4 <mem_trim+0x1f0>)
 8005296:	4841      	ldr	r0, [pc, #260]	; (800539c <mem_trim+0x1e8>)
 8005298:	f00a f95e 	bl	800f558 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80052a2:	8afa      	ldrh	r2, [r7, #22]
 80052a4:	8bfb      	ldrh	r3, [r7, #30]
 80052a6:	4413      	add	r3, r2
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3308      	adds	r3, #8
 80052ac:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80052ae:	4b3e      	ldr	r3, [pc, #248]	; (80053a8 <mem_trim+0x1f4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d106      	bne.n	80052c6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80052b8:	89fb      	ldrh	r3, [r7, #14]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fdd2 	bl	8004e64 <ptr_to_mem>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a39      	ldr	r2, [pc, #228]	; (80053a8 <mem_trim+0x1f4>)
 80052c4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80052c6:	89fb      	ldrh	r3, [r7, #14]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fdcb 	bl	8004e64 <ptr_to_mem>
 80052ce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2200      	movs	r2, #0
 80052d4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	89ba      	ldrh	r2, [r7, #12]
 80052da:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	8afa      	ldrh	r2, [r7, #22]
 80052e0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	89fa      	ldrh	r2, [r7, #14]
 80052e6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80052f0:	d047      	beq.n	8005382 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fdb4 	bl	8004e64 <ptr_to_mem>
 80052fc:	4602      	mov	r2, r0
 80052fe:	89fb      	ldrh	r3, [r7, #14]
 8005300:	8053      	strh	r3, [r2, #2]
 8005302:	e03e      	b.n	8005382 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005304:	8bfb      	ldrh	r3, [r7, #30]
 8005306:	f103 0214 	add.w	r2, r3, #20
 800530a:	8abb      	ldrh	r3, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d838      	bhi.n	8005382 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005310:	8afa      	ldrh	r2, [r7, #22]
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	4413      	add	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	3308      	adds	r3, #8
 800531a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005324:	d106      	bne.n	8005334 <mem_trim+0x180>
 8005326:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <mem_trim+0x1e0>)
 8005328:	f240 3216 	movw	r2, #790	; 0x316
 800532c:	491d      	ldr	r1, [pc, #116]	; (80053a4 <mem_trim+0x1f0>)
 800532e:	481b      	ldr	r0, [pc, #108]	; (800539c <mem_trim+0x1e8>)
 8005330:	f00a f912 	bl	800f558 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005334:	89fb      	ldrh	r3, [r7, #14]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fd94 	bl	8004e64 <ptr_to_mem>
 800533c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <mem_trim+0x1f4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d202      	bcs.n	800534e <mem_trim+0x19a>
      lfree = mem2;
 8005348:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <mem_trim+0x1f4>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2200      	movs	r2, #0
 8005352:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	8afa      	ldrh	r2, [r7, #22]
 8005360:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	89fa      	ldrh	r2, [r7, #14]
 8005366:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005370:	d007      	beq.n	8005382 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fd74 	bl	8004e64 <ptr_to_mem>
 800537c:	4602      	mov	r2, r0
 800537e:	89fb      	ldrh	r3, [r7, #14]
 8005380:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005382:	687b      	ldr	r3, [r7, #4]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000504 	.word	0x20000504
 8005390:	20000508 	.word	0x20000508
 8005394:	08010d20 	.word	0x08010d20
 8005398:	08010e90 	.word	0x08010e90
 800539c:	08010d68 	.word	0x08010d68
 80053a0:	08010ea8 	.word	0x08010ea8
 80053a4:	08010ec8 	.word	0x08010ec8
 80053a8:	2000050c 	.word	0x2000050c

080053ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <mem_malloc+0x14>
    return NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	e0d9      	b.n	8005574 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	3303      	adds	r3, #3
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80053cc:	8bbb      	ldrh	r3, [r7, #28]
 80053ce:	2b0b      	cmp	r3, #11
 80053d0:	d801      	bhi.n	80053d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80053d2:	230c      	movs	r3, #12
 80053d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80053d6:	8bbb      	ldrh	r3, [r7, #28]
 80053d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80053dc:	d803      	bhi.n	80053e6 <mem_malloc+0x3a>
 80053de:	8bba      	ldrh	r2, [r7, #28]
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d201      	bcs.n	80053ea <mem_malloc+0x3e>
    return NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e0c4      	b.n	8005574 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80053ea:	4b64      	ldr	r3, [pc, #400]	; (800557c <mem_malloc+0x1d0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fd4a 	bl	8004e88 <mem_to_ptr>
 80053f4:	4603      	mov	r3, r0
 80053f6:	83fb      	strh	r3, [r7, #30]
 80053f8:	e0b4      	b.n	8005564 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80053fa:	8bfb      	ldrh	r3, [r7, #30]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fd31 	bl	8004e64 <ptr_to_mem>
 8005402:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	791b      	ldrb	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 80a4 	bne.w	8005556 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	8bfb      	ldrh	r3, [r7, #30]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f1a3 0208 	sub.w	r2, r3, #8
 800541c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800541e:	429a      	cmp	r2, r3
 8005420:	f0c0 8099 	bcc.w	8005556 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	8bfb      	ldrh	r3, [r7, #30]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f1a3 0208 	sub.w	r2, r3, #8
 8005432:	8bbb      	ldrh	r3, [r7, #28]
 8005434:	3314      	adds	r3, #20
 8005436:	429a      	cmp	r2, r3
 8005438:	d333      	bcc.n	80054a2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800543a:	8bfa      	ldrh	r2, [r7, #30]
 800543c:	8bbb      	ldrh	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	3308      	adds	r3, #8
 8005444:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005446:	8a7b      	ldrh	r3, [r7, #18]
 8005448:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800544c:	d106      	bne.n	800545c <mem_malloc+0xb0>
 800544e:	4b4c      	ldr	r3, [pc, #304]	; (8005580 <mem_malloc+0x1d4>)
 8005450:	f240 3287 	movw	r2, #903	; 0x387
 8005454:	494b      	ldr	r1, [pc, #300]	; (8005584 <mem_malloc+0x1d8>)
 8005456:	484c      	ldr	r0, [pc, #304]	; (8005588 <mem_malloc+0x1dc>)
 8005458:	f00a f87e 	bl	800f558 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800545c:	8a7b      	ldrh	r3, [r7, #18]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fd00 	bl	8004e64 <ptr_to_mem>
 8005464:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	881a      	ldrh	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8bfa      	ldrh	r2, [r7, #30]
 8005478:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	8a7a      	ldrh	r2, [r7, #18]
 800547e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2201      	movs	r2, #1
 8005484:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800548e:	d00b      	beq.n	80054a8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fce5 	bl	8004e64 <ptr_to_mem>
 800549a:	4602      	mov	r2, r0
 800549c:	8a7b      	ldrh	r3, [r7, #18]
 800549e:	8053      	strh	r3, [r2, #2]
 80054a0:	e002      	b.n	80054a8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2201      	movs	r2, #1
 80054a6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80054a8:	4b34      	ldr	r3, [pc, #208]	; (800557c <mem_malloc+0x1d0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d127      	bne.n	8005502 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80054b2:	4b32      	ldr	r3, [pc, #200]	; (800557c <mem_malloc+0x1d0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80054b8:	e005      	b.n	80054c6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fcd0 	bl	8004e64 <ptr_to_mem>
 80054c4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	791b      	ldrb	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <mem_malloc+0x12c>
 80054ce:	4b2f      	ldr	r3, [pc, #188]	; (800558c <mem_malloc+0x1e0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d1f0      	bne.n	80054ba <mem_malloc+0x10e>
          }
          lfree = cur;
 80054d8:	4a28      	ldr	r2, [pc, #160]	; (800557c <mem_malloc+0x1d0>)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80054de:	4b27      	ldr	r3, [pc, #156]	; (800557c <mem_malloc+0x1d0>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b2a      	ldr	r3, [pc, #168]	; (800558c <mem_malloc+0x1e0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d00b      	beq.n	8005502 <mem_malloc+0x156>
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <mem_malloc+0x1d0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	791b      	ldrb	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d006      	beq.n	8005502 <mem_malloc+0x156>
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <mem_malloc+0x1d4>)
 80054f6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80054fa:	4925      	ldr	r1, [pc, #148]	; (8005590 <mem_malloc+0x1e4>)
 80054fc:	4822      	ldr	r0, [pc, #136]	; (8005588 <mem_malloc+0x1dc>)
 80054fe:	f00a f82b 	bl	800f558 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005502:	8bba      	ldrh	r2, [r7, #28]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	3308      	adds	r3, #8
 800550a:	4a20      	ldr	r2, [pc, #128]	; (800558c <mem_malloc+0x1e0>)
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	4293      	cmp	r3, r2
 8005510:	d906      	bls.n	8005520 <mem_malloc+0x174>
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <mem_malloc+0x1d4>)
 8005514:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005518:	491e      	ldr	r1, [pc, #120]	; (8005594 <mem_malloc+0x1e8>)
 800551a:	481b      	ldr	r0, [pc, #108]	; (8005588 <mem_malloc+0x1dc>)
 800551c:	f00a f81c 	bl	800f558 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <mem_malloc+0x18c>
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <mem_malloc+0x1d4>)
 800552c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005530:	4919      	ldr	r1, [pc, #100]	; (8005598 <mem_malloc+0x1ec>)
 8005532:	4815      	ldr	r0, [pc, #84]	; (8005588 <mem_malloc+0x1dc>)
 8005534:	f00a f810 	bl	800f558 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d006      	beq.n	8005550 <mem_malloc+0x1a4>
 8005542:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <mem_malloc+0x1d4>)
 8005544:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005548:	4914      	ldr	r1, [pc, #80]	; (800559c <mem_malloc+0x1f0>)
 800554a:	480f      	ldr	r0, [pc, #60]	; (8005588 <mem_malloc+0x1dc>)
 800554c:	f00a f804 	bl	800f558 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	3308      	adds	r3, #8
 8005554:	e00e      	b.n	8005574 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005556:	8bfb      	ldrh	r3, [r7, #30]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fc83 	bl	8004e64 <ptr_to_mem>
 800555e:	4603      	mov	r3, r0
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005564:	8bfa      	ldrh	r2, [r7, #30]
 8005566:	8bbb      	ldrh	r3, [r7, #28]
 8005568:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800556c:	429a      	cmp	r2, r3
 800556e:	f4ff af44 	bcc.w	80053fa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	2000050c 	.word	0x2000050c
 8005580:	08010d20 	.word	0x08010d20
 8005584:	08010ec8 	.word	0x08010ec8
 8005588:	08010d68 	.word	0x08010d68
 800558c:	20000508 	.word	0x20000508
 8005590:	08010edc 	.word	0x08010edc
 8005594:	08010ef8 	.word	0x08010ef8
 8005598:	08010f28 	.word	0x08010f28
 800559c:	08010f58 	.word	0x08010f58

080055a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	3303      	adds	r3, #3
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e011      	b.n	80055e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	885b      	ldrh	r3, [r3, #2]
 80055ea:	461a      	mov	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	dbe7      	blt.n	80055c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005606:	2300      	movs	r3, #0
 8005608:	80fb      	strh	r3, [r7, #6]
 800560a:	e009      	b.n	8005620 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	4a08      	ldr	r2, [pc, #32]	; (8005630 <memp_init+0x30>)
 8005610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff ffc3 	bl	80055a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	3301      	adds	r3, #1
 800561e:	80fb      	strh	r3, [r7, #6]
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d9f2      	bls.n	800560c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08014758 	.word	0x08014758

08005634 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d012      	beq.n	8005670 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d006      	beq.n	800566c <do_memp_malloc_pool+0x38>
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <do_memp_malloc_pool+0x48>)
 8005660:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005664:	4906      	ldr	r1, [pc, #24]	; (8005680 <do_memp_malloc_pool+0x4c>)
 8005666:	4807      	ldr	r0, [pc, #28]	; (8005684 <do_memp_malloc_pool+0x50>)
 8005668:	f009 ff76 	bl	800f558 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e000      	b.n	8005672 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	08010f7c 	.word	0x08010f7c
 8005680:	08010fac 	.word	0x08010fac
 8005684:	08010fd0 	.word	0x08010fd0

08005688 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d908      	bls.n	80056aa <memp_malloc+0x22>
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <memp_malloc+0x3c>)
 800569a:	f240 1257 	movw	r2, #343	; 0x157
 800569e:	490a      	ldr	r1, [pc, #40]	; (80056c8 <memp_malloc+0x40>)
 80056a0:	480a      	ldr	r0, [pc, #40]	; (80056cc <memp_malloc+0x44>)
 80056a2:	f009 ff59 	bl	800f558 <iprintf>
 80056a6:	2300      	movs	r3, #0
 80056a8:	e008      	b.n	80056bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <memp_malloc+0x48>)
 80056ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ffbe 	bl	8005634 <do_memp_malloc_pool>
 80056b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	08010f7c 	.word	0x08010f7c
 80056c8:	0801100c 	.word	0x0801100c
 80056cc:	08010fd0 	.word	0x08010fd0
 80056d0:	08014758 	.word	0x08014758

080056d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d006      	beq.n	80056f6 <do_memp_free_pool+0x22>
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <do_memp_free_pool+0x40>)
 80056ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <do_memp_free_pool+0x44>)
 80056f0:	480a      	ldr	r0, [pc, #40]	; (800571c <do_memp_free_pool+0x48>)
 80056f2:	f009 ff31 	bl	800f558 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	08010f7c 	.word	0x08010f7c
 8005718:	0801102c 	.word	0x0801102c
 800571c:	08010fd0 	.word	0x08010fd0

08005720 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	2b08      	cmp	r3, #8
 8005730:	d907      	bls.n	8005742 <memp_free+0x22>
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <memp_free+0x44>)
 8005734:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005738:	490b      	ldr	r1, [pc, #44]	; (8005768 <memp_free+0x48>)
 800573a:	480c      	ldr	r0, [pc, #48]	; (800576c <memp_free+0x4c>)
 800573c:	f009 ff0c 	bl	800f558 <iprintf>
 8005740:	e00c      	b.n	800575c <memp_free+0x3c>

  if (mem == NULL) {
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	4a09      	ldr	r2, [pc, #36]	; (8005770 <memp_free+0x50>)
 800574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ffbe 	bl	80056d4 <do_memp_free_pool>
 8005758:	e000      	b.n	800575c <memp_free+0x3c>
    return;
 800575a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08010f7c 	.word	0x08010f7c
 8005768:	0801104c 	.word	0x0801104c
 800576c:	08010fd0 	.word	0x08010fd0
 8005770:	08014758 	.word	0x08014758

08005774 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <netif_add+0x26>
 8005798:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <netif_add+0x174>)
 800579a:	f240 1227 	movw	r2, #295	; 0x127
 800579e:	4957      	ldr	r1, [pc, #348]	; (80058fc <netif_add+0x178>)
 80057a0:	4857      	ldr	r0, [pc, #348]	; (8005900 <netif_add+0x17c>)
 80057a2:	f009 fed9 	bl	800f558 <iprintf>
 80057a6:	2300      	movs	r3, #0
 80057a8:	e0a2      	b.n	80058f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d108      	bne.n	80057c2 <netif_add+0x3e>
 80057b0:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <netif_add+0x174>)
 80057b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80057b6:	4953      	ldr	r1, [pc, #332]	; (8005904 <netif_add+0x180>)
 80057b8:	4851      	ldr	r0, [pc, #324]	; (8005900 <netif_add+0x17c>)
 80057ba:	f009 fecd 	bl	800f558 <iprintf>
 80057be:	2300      	movs	r3, #0
 80057c0:	e096      	b.n	80058f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80057c8:	4b4f      	ldr	r3, [pc, #316]	; (8005908 <netif_add+0x184>)
 80057ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80057d2:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <netif_add+0x184>)
 80057d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80057dc:	4b4a      	ldr	r3, [pc, #296]	; (8005908 <netif_add+0x184>)
 80057de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a45      	ldr	r2, [pc, #276]	; (800590c <netif_add+0x188>)
 80057f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a3a      	ldr	r2, [r7, #32]
 8005810:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005812:	4b3f      	ldr	r3, [pc, #252]	; (8005910 <netif_add+0x18c>)
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005820:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f913 	bl	8005a54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	4798      	blx	r3
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <netif_add+0xba>
    return NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	e058      	b.n	80058f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005844:	2bff      	cmp	r3, #255	; 0xff
 8005846:	d103      	bne.n	8005850 <netif_add+0xcc>
        netif->num = 0;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005854:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <netif_add+0x190>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e02b      	b.n	80058b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	429a      	cmp	r2, r3
 8005862:	d106      	bne.n	8005872 <netif_add+0xee>
 8005864:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <netif_add+0x174>)
 8005866:	f240 128b 	movw	r2, #395	; 0x18b
 800586a:	492b      	ldr	r1, [pc, #172]	; (8005918 <netif_add+0x194>)
 800586c:	4824      	ldr	r0, [pc, #144]	; (8005900 <netif_add+0x17c>)
 800586e:	f009 fe73 	bl	800f558 <iprintf>
        num_netifs++;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2bff      	cmp	r3, #255	; 0xff
 800587c:	dd06      	ble.n	800588c <netif_add+0x108>
 800587e:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <netif_add+0x174>)
 8005880:	f240 128d 	movw	r2, #397	; 0x18d
 8005884:	4925      	ldr	r1, [pc, #148]	; (800591c <netif_add+0x198>)
 8005886:	481e      	ldr	r0, [pc, #120]	; (8005900 <netif_add+0x17c>)
 8005888:	f009 fe66 	bl	800f558 <iprintf>
        if (netif2->num == netif->num) {
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005898:	429a      	cmp	r2, r3
 800589a:	d108      	bne.n	80058ae <netif_add+0x12a>
          netif->num++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058a2:	3301      	adds	r3, #1
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80058ac:	e005      	b.n	80058ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1d0      	bne.n	800585c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1be      	bne.n	800583e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058c6:	2bfe      	cmp	r3, #254	; 0xfe
 80058c8:	d103      	bne.n	80058d2 <netif_add+0x14e>
    netif_num = 0;
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <netif_add+0x18c>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e006      	b.n	80058e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058d8:	3301      	adds	r3, #1
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <netif_add+0x18c>)
 80058de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <netif_add+0x190>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80058e8:	4a0a      	ldr	r2, [pc, #40]	; (8005914 <netif_add+0x190>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	08011068 	.word	0x08011068
 80058fc:	080110fc 	.word	0x080110fc
 8005900:	080110b8 	.word	0x080110b8
 8005904:	08011118 	.word	0x08011118
 8005908:	080147bc 	.word	0x080147bc
 800590c:	08005c67 	.word	0x08005c67
 8005910:	20000534 	.word	0x20000534
 8005914:	20008ec8 	.word	0x20008ec8
 8005918:	0801113c 	.word	0x0801113c
 800591c:	08011150 	.word	0x08011150

08005920 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f002 fd85 	bl	800843c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f007 fabd 	bl	800ceb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <netif_do_set_ipaddr+0x20>
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <netif_do_set_ipaddr+0x88>)
 8005958:	f240 12cb 	movw	r2, #459	; 0x1cb
 800595c:	491c      	ldr	r1, [pc, #112]	; (80059d0 <netif_do_set_ipaddr+0x8c>)
 800595e:	481d      	ldr	r0, [pc, #116]	; (80059d4 <netif_do_set_ipaddr+0x90>)
 8005960:	f009 fdfa 	bl	800f558 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <netif_do_set_ipaddr+0x34>
 800596a:	4b18      	ldr	r3, [pc, #96]	; (80059cc <netif_do_set_ipaddr+0x88>)
 800596c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005970:	4917      	ldr	r1, [pc, #92]	; (80059d0 <netif_do_set_ipaddr+0x8c>)
 8005972:	4818      	ldr	r0, [pc, #96]	; (80059d4 <netif_do_set_ipaddr+0x90>)
 8005974:	f009 fdf0 	bl	800f558 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3304      	adds	r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d01c      	beq.n	80059c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3304      	adds	r3, #4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ffbf 	bl	8005920 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <netif_do_set_ipaddr+0x6a>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	e000      	b.n	80059b0 <netif_do_set_ipaddr+0x6c>
 80059ae:	2300      	movs	r3, #0
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80059b4:	2101      	movs	r1, #1
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f8d2 	bl	8005b60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	08011068 	.word	0x08011068
 80059d0:	08011180 	.word	0x08011180
 80059d4:	080110b8 	.word	0x080110b8

080059d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3308      	adds	r3, #8
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d00a      	beq.n	8005a08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <netif_do_set_netmask+0x26>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	e000      	b.n	8005a00 <netif_do_set_netmask+0x28>
 80059fe:	2300      	movs	r3, #0
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d00a      	beq.n	8005a46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <netif_do_set_gw+0x26>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	e000      	b.n	8005a3e <netif_do_set_gw+0x28>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <netif_set_addr+0x90>)
 8005a72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005a7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <netif_set_addr+0x90>)
 8005a7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005a84:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <netif_set_addr+0x90>)
 8005a86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <netif_set_addr+0x42>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <netif_set_addr+0x46>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <netif_set_addr+0x48>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d006      	beq.n	8005ab2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ff49 	bl	8005944 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff ff8e 	bl	80059d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff ffa8 	bl	8005a16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff35 	bl	8005944 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005ada:	bf00      	nop
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	080147bc 	.word	0x080147bc

08005ae8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <netif_set_default+0x1c>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20008ecc 	.word	0x20008ecc

08005b08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d107      	bne.n	8005b26 <netif_set_up+0x1e>
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <netif_set_up+0x4c>)
 8005b18:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005b1c:	490e      	ldr	r1, [pc, #56]	; (8005b58 <netif_set_up+0x50>)
 8005b1e:	480f      	ldr	r0, [pc, #60]	; (8005b5c <netif_set_up+0x54>)
 8005b20:	f009 fd1a 	bl	800f558 <iprintf>
 8005b24:	e013      	b.n	8005b4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10c      	bne.n	8005b4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005b46:	2103      	movs	r1, #3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f809 	bl	8005b60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	08011068 	.word	0x08011068
 8005b58:	080111f0 	.word	0x080111f0
 8005b5c:	080110b8 	.word	0x080110b8

08005b60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <netif_issue_reports+0x20>
 8005b72:	4b18      	ldr	r3, [pc, #96]	; (8005bd4 <netif_issue_reports+0x74>)
 8005b74:	f240 326d 	movw	r2, #877	; 0x36d
 8005b78:	4917      	ldr	r1, [pc, #92]	; (8005bd8 <netif_issue_reports+0x78>)
 8005b7a:	4818      	ldr	r0, [pc, #96]	; (8005bdc <netif_issue_reports+0x7c>)
 8005b7c:	f009 fcec 	bl	800f558 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01e      	beq.n	8005bcc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d017      	beq.n	8005bcc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d013      	beq.n	8005bce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f008 f8df 	bl	800dd88 <etharp_request>
 8005bca:	e000      	b.n	8005bce <netif_issue_reports+0x6e>
    return;
 8005bcc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	08011068 	.word	0x08011068
 8005bd8:	0801120c 	.word	0x0801120c
 8005bdc:	080110b8 	.word	0x080110b8

08005be0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <netif_set_down+0x1e>
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <netif_set_down+0x58>)
 8005bf0:	f240 329b 	movw	r2, #923	; 0x39b
 8005bf4:	4911      	ldr	r1, [pc, #68]	; (8005c3c <netif_set_down+0x5c>)
 8005bf6:	4812      	ldr	r0, [pc, #72]	; (8005c40 <netif_set_down+0x60>)
 8005bf8:	f009 fcae 	bl	800f558 <iprintf>
 8005bfc:	e019      	b.n	8005c32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d012      	beq.n	8005c32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f007 fc69 	bl	800d504 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	08011068 	.word	0x08011068
 8005c3c:	08011230 	.word	0x08011230
 8005c40:	080110b8 	.word	0x080110b8

08005c44 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	61da      	str	r2, [r3, #28]
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005c72:	f06f 030b 	mvn.w	r3, #11
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <netif_get_by_index+0x48>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	e00c      	b.n	8005cb6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	79fa      	ldrb	r2, [r7, #7]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d101      	bne.n	8005cb0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	e006      	b.n	8005cbe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ef      	bne.n	8005c9c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20008ec8 	.word	0x20008ec8

08005cd0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <pbuf_free_ooseq+0x38>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <pbuf_free_ooseq+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	e00a      	b.n	8005cfa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f002 fbe3 	bl	80084b8 <tcp_free_ooseq>
      return;
 8005cf2:	e005      	b.n	8005d00 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f1      	bne.n	8005ce4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20008ed0 	.word	0x20008ed0
 8005d0c:	20008ed8 	.word	0x20008ed8

08005d10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005d14:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <pbuf_pool_is_empty+0x14>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	20008ed0 	.word	0x20008ed0

08005d28 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4611      	mov	r1, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	460b      	mov	r3, r1
 8005d38:	80fb      	strh	r3, [r7, #6]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88ba      	ldrh	r2, [r7, #4]
 8005d54:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005d56:	8b3b      	ldrh	r3, [r7, #24]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	7f3a      	ldrb	r2, [r7, #28]
 8005d62:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	73da      	strb	r2, [r3, #15]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	; 0x30
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	4603      	mov	r3, r0
 8005d84:	71fb      	strb	r3, [r7, #7]
 8005d86:	460b      	mov	r3, r1
 8005d88:	80bb      	strh	r3, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005d92:	887b      	ldrh	r3, [r7, #2]
 8005d94:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d98:	d07f      	beq.n	8005e9a <pbuf_alloc+0x11e>
 8005d9a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005d9e:	f300 80c8 	bgt.w	8005f32 <pbuf_alloc+0x1b6>
 8005da2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005da6:	d010      	beq.n	8005dca <pbuf_alloc+0x4e>
 8005da8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005dac:	f300 80c1 	bgt.w	8005f32 <pbuf_alloc+0x1b6>
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <pbuf_alloc+0x3e>
 8005db4:	2b41      	cmp	r3, #65	; 0x41
 8005db6:	f040 80bc 	bne.w	8005f32 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005dba:	887a      	ldrh	r2, [r7, #2]
 8005dbc:	88bb      	ldrh	r3, [r7, #4]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f000 f8d1 	bl	8005f68 <pbuf_alloc_reference>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005dc8:	e0bd      	b.n	8005f46 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005dd2:	88bb      	ldrh	r3, [r7, #4]
 8005dd4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005dd6:	2008      	movs	r0, #8
 8005dd8:	f7ff fc56 	bl	8005688 <memp_malloc>
 8005ddc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005de4:	f7ff ff94 	bl	8005d10 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005df0:	f000 faa8 	bl	8006344 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e0a7      	b.n	8005f48 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dfa:	3303      	adds	r3, #3
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8b7a      	ldrh	r2, [r7, #26]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bf28      	it	cs
 8005e10:	4613      	movcs	r3, r2
 8005e12:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005e14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e16:	3310      	adds	r3, #16
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	4618      	mov	r0, r3
 8005e24:	89f9      	ldrh	r1, [r7, #14]
 8005e26:	8b7a      	ldrh	r2, [r7, #26]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	887b      	ldrh	r3, [r7, #2]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	4601      	mov	r1, r0
 8005e34:	6938      	ldr	r0, [r7, #16]
 8005e36:	f7ff ff77 	bl	8005d28 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d006      	beq.n	8005e54 <pbuf_alloc+0xd8>
 8005e46:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4c:	4941      	ldr	r1, [pc, #260]	; (8005f54 <pbuf_alloc+0x1d8>)
 8005e4e:	4842      	ldr	r0, [pc, #264]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005e50:	f009 fb82 	bl	800f558 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e56:	3303      	adds	r3, #3
 8005e58:	f023 0303 	bic.w	r3, r3, #3
 8005e5c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005e60:	d106      	bne.n	8005e70 <pbuf_alloc+0xf4>
 8005e62:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005e64:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005e68:	493c      	ldr	r1, [pc, #240]	; (8005f5c <pbuf_alloc+0x1e0>)
 8005e6a:	483b      	ldr	r0, [pc, #236]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005e6c:	f009 fb74 	bl	800f558 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d102      	bne.n	8005e7c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	e002      	b.n	8005e82 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005e86:	8b7a      	ldrh	r2, [r7, #26]
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005e92:	8b7b      	ldrh	r3, [r7, #26]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d19e      	bne.n	8005dd6 <pbuf_alloc+0x5a>
      break;
 8005e98:	e055      	b.n	8005f46 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005e9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e9c:	3303      	adds	r3, #3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f023 0303 	bic.w	r3, r3, #3
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	88bb      	ldrh	r3, [r7, #4]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005eb6:	8b3b      	ldrh	r3, [r7, #24]
 8005eb8:	3310      	adds	r3, #16
 8005eba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ebc:	8b3a      	ldrh	r2, [r7, #24]
 8005ebe:	88bb      	ldrh	r3, [r7, #4]
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d306      	bcc.n	8005ed8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005eca:	8afa      	ldrh	r2, [r7, #22]
 8005ecc:	88bb      	ldrh	r3, [r7, #4]
 8005ece:	3303      	adds	r3, #3
 8005ed0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d201      	bcs.n	8005edc <pbuf_alloc+0x160>
        return NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e035      	b.n	8005f48 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fa64 	bl	80053ac <mem_malloc>
 8005ee4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <pbuf_alloc+0x174>
        return NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e02b      	b.n	8005f48 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3303      	adds	r3, #3
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	4618      	mov	r0, r3
 8005f00:	88b9      	ldrh	r1, [r7, #4]
 8005f02:	88ba      	ldrh	r2, [r7, #4]
 8005f04:	2300      	movs	r3, #0
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f12:	f7ff ff09 	bl	8005d28 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d010      	beq.n	8005f44 <pbuf_alloc+0x1c8>
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005f24:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005f28:	490d      	ldr	r1, [pc, #52]	; (8005f60 <pbuf_alloc+0x1e4>)
 8005f2a:	480b      	ldr	r0, [pc, #44]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005f2c:	f009 fb14 	bl	800f558 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005f30:	e008      	b.n	8005f44 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <pbuf_alloc+0x1d4>)
 8005f34:	f240 1227 	movw	r2, #295	; 0x127
 8005f38:	490a      	ldr	r1, [pc, #40]	; (8005f64 <pbuf_alloc+0x1e8>)
 8005f3a:	4807      	ldr	r0, [pc, #28]	; (8005f58 <pbuf_alloc+0x1dc>)
 8005f3c:	f009 fb0c 	bl	800f558 <iprintf>
      return NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e001      	b.n	8005f48 <pbuf_alloc+0x1cc>
      break;
 8005f44:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3728      	adds	r7, #40	; 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	08011298 	.word	0x08011298
 8005f54:	080112c8 	.word	0x080112c8
 8005f58:	080112f8 	.word	0x080112f8
 8005f5c:	08011320 	.word	0x08011320
 8005f60:	08011354 	.word	0x08011354
 8005f64:	08011380 	.word	0x08011380

08005f68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
 8005f74:	4613      	mov	r3, r2
 8005f76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005f78:	883b      	ldrh	r3, [r7, #0]
 8005f7a:	2b41      	cmp	r3, #65	; 0x41
 8005f7c:	d009      	beq.n	8005f92 <pbuf_alloc_reference+0x2a>
 8005f7e:	883b      	ldrh	r3, [r7, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d006      	beq.n	8005f92 <pbuf_alloc_reference+0x2a>
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <pbuf_alloc_reference+0x5c>)
 8005f86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005f8a:	490f      	ldr	r1, [pc, #60]	; (8005fc8 <pbuf_alloc_reference+0x60>)
 8005f8c:	480f      	ldr	r0, [pc, #60]	; (8005fcc <pbuf_alloc_reference+0x64>)
 8005f8e:	f009 fae3 	bl	800f558 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005f92:	2007      	movs	r0, #7
 8005f94:	f7ff fb78 	bl	8005688 <memp_malloc>
 8005f98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e00b      	b.n	8005fbc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005fa4:	8879      	ldrh	r1, [r7, #2]
 8005fa6:	887a      	ldrh	r2, [r7, #2]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	883b      	ldrh	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff feb7 	bl	8005d28 <pbuf_init_alloced_pbuf>
  return p;
 8005fba:	68fb      	ldr	r3, [r7, #12]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08011298 	.word	0x08011298
 8005fc8:	0801139c 	.word	0x0801139c
 8005fcc:	080112f8 	.word	0x080112f8

08005fd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	81bb      	strh	r3, [r7, #12]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005fe8:	8a7b      	ldrh	r3, [r7, #18]
 8005fea:	3303      	adds	r3, #3
 8005fec:	f023 0203 	bic.w	r2, r3, #3
 8005ff0:	89bb      	ldrh	r3, [r7, #12]
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d901      	bls.n	8005ffe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e018      	b.n	8006030 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006004:	8a7b      	ldrh	r3, [r7, #18]
 8006006:	3303      	adds	r3, #3
 8006008:	f023 0303 	bic.w	r3, r3, #3
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	4413      	add	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e001      	b.n	8006018 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	89b9      	ldrh	r1, [r7, #12]
 800601c:	89ba      	ldrh	r2, [r7, #12]
 800601e:	2302      	movs	r3, #2
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	460b      	mov	r3, r1
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	f7ff fe7d 	bl	8005d28 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800602e:	687b      	ldr	r3, [r7, #4]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <pbuf_realloc+0x20>
 800604a:	4b3a      	ldr	r3, [pc, #232]	; (8006134 <pbuf_realloc+0xfc>)
 800604c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006050:	4939      	ldr	r1, [pc, #228]	; (8006138 <pbuf_realloc+0x100>)
 8006052:	483a      	ldr	r0, [pc, #232]	; (800613c <pbuf_realloc+0x104>)
 8006054:	f009 fa80 	bl	800f558 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	891b      	ldrh	r3, [r3, #8]
 800605c:	887a      	ldrh	r2, [r7, #2]
 800605e:	429a      	cmp	r2, r3
 8006060:	d263      	bcs.n	800612a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	891a      	ldrh	r2, [r3, #8]
 8006066:	887b      	ldrh	r3, [r7, #2]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800606c:	887b      	ldrh	r3, [r7, #2]
 800606e:	817b      	strh	r3, [r7, #10]
  q = p;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006074:	e018      	b.n	80060a8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	895b      	ldrh	r3, [r3, #10]
 800607a:	897a      	ldrh	r2, [r7, #10]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	891a      	ldrh	r2, [r3, #8]
 8006084:	893b      	ldrh	r3, [r7, #8]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <pbuf_realloc+0x70>
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <pbuf_realloc+0xfc>)
 800609c:	f240 12af 	movw	r2, #431	; 0x1af
 80060a0:	4927      	ldr	r1, [pc, #156]	; (8006140 <pbuf_realloc+0x108>)
 80060a2:	4826      	ldr	r0, [pc, #152]	; (800613c <pbuf_realloc+0x104>)
 80060a4:	f009 fa58 	bl	800f558 <iprintf>
  while (rem_len > q->len) {
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	895b      	ldrh	r3, [r3, #10]
 80060ac:	897a      	ldrh	r2, [r7, #10]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d8e1      	bhi.n	8006076 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d121      	bne.n	8006102 <pbuf_realloc+0xca>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	895b      	ldrh	r3, [r3, #10]
 80060c2:	897a      	ldrh	r2, [r7, #10]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d01c      	beq.n	8006102 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	7b5b      	ldrb	r3, [r3, #13]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d116      	bne.n	8006102 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	897b      	ldrh	r3, [r7, #10]
 80060e0:	4413      	add	r3, r2
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff f864 	bl	80051b4 <mem_trim>
 80060ec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <pbuf_realloc+0xca>
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <pbuf_realloc+0xfc>)
 80060f6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80060fa:	4912      	ldr	r1, [pc, #72]	; (8006144 <pbuf_realloc+0x10c>)
 80060fc:	480f      	ldr	r0, [pc, #60]	; (800613c <pbuf_realloc+0x104>)
 80060fe:	f009 fa2b 	bl	800f558 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	897a      	ldrh	r2, [r7, #10]
 8006106:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	895a      	ldrh	r2, [r3, #10]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f911 	bl	8006344 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	e000      	b.n	800612c <pbuf_realloc+0xf4>
    return;
 800612a:	bf00      	nop

}
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	08011298 	.word	0x08011298
 8006138:	080113b0 	.word	0x080113b0
 800613c:	080112f8 	.word	0x080112f8
 8006140:	080113c8 	.word	0x080113c8
 8006144:	080113e0 	.word	0x080113e0

08006148 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d106      	bne.n	800616a <pbuf_add_header_impl+0x22>
 800615c:	4b2b      	ldr	r3, [pc, #172]	; (800620c <pbuf_add_header_impl+0xc4>)
 800615e:	f240 12df 	movw	r2, #479	; 0x1df
 8006162:	492b      	ldr	r1, [pc, #172]	; (8006210 <pbuf_add_header_impl+0xc8>)
 8006164:	482b      	ldr	r0, [pc, #172]	; (8006214 <pbuf_add_header_impl+0xcc>)
 8006166:	f009 f9f7 	bl	800f558 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <pbuf_add_header_impl+0x30>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006176:	d301      	bcc.n	800617c <pbuf_add_header_impl+0x34>
    return 1;
 8006178:	2301      	movs	r3, #1
 800617a:	e043      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <pbuf_add_header_impl+0x3e>
    return 0;
 8006182:	2300      	movs	r3, #0
 8006184:	e03e      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	891a      	ldrh	r2, [r3, #8]
 800618e:	8a7b      	ldrh	r3, [r7, #18]
 8006190:	4413      	add	r3, r2
 8006192:	b29b      	uxth	r3, r3
 8006194:	8a7a      	ldrh	r2, [r7, #18]
 8006196:	429a      	cmp	r2, r3
 8006198:	d901      	bls.n	800619e <pbuf_add_header_impl+0x56>
    return 1;
 800619a:	2301      	movs	r3, #1
 800619c:	e032      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	7b1b      	ldrb	r3, [r3, #12]
 80061a2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80061a4:	8a3b      	ldrh	r3, [r7, #16]
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	425b      	negs	r3, r3
 80061b6:	4413      	add	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3310      	adds	r3, #16
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d20d      	bcs.n	80061e0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e01d      	b.n	8006204 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	425b      	negs	r3, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	e001      	b.n	80061e0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	e011      	b.n	8006204 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	895a      	ldrh	r2, [r3, #10]
 80061ea:	8a7b      	ldrh	r3, [r7, #18]
 80061ec:	4413      	add	r3, r2
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	891a      	ldrh	r2, [r3, #8]
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	4413      	add	r3, r2
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	811a      	strh	r2, [r3, #8]


  return 0;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	08011298 	.word	0x08011298
 8006210:	080113fc 	.word	0x080113fc
 8006214:	080112f8 	.word	0x080112f8

08006218 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006222:	2200      	movs	r2, #0
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ff8e 	bl	8006148 <pbuf_add_header_impl>
 800622c:	4603      	mov	r3, r0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <pbuf_remove_header+0x1e>
 8006248:	4b20      	ldr	r3, [pc, #128]	; (80062cc <pbuf_remove_header+0x94>)
 800624a:	f240 224b 	movw	r2, #587	; 0x24b
 800624e:	4920      	ldr	r1, [pc, #128]	; (80062d0 <pbuf_remove_header+0x98>)
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <pbuf_remove_header+0x9c>)
 8006252:	f009 f981 	bl	800f558 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <pbuf_remove_header+0x2c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006262:	d301      	bcc.n	8006268 <pbuf_remove_header+0x30>
    return 1;
 8006264:	2301      	movs	r3, #1
 8006266:	e02c      	b.n	80062c2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <pbuf_remove_header+0x3a>
    return 0;
 800626e:	2300      	movs	r3, #0
 8006270:	e027      	b.n	80062c2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	895b      	ldrh	r3, [r3, #10]
 800627a:	89fa      	ldrh	r2, [r7, #14]
 800627c:	429a      	cmp	r2, r3
 800627e:	d908      	bls.n	8006292 <pbuf_remove_header+0x5a>
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <pbuf_remove_header+0x94>)
 8006282:	f240 2255 	movw	r2, #597	; 0x255
 8006286:	4914      	ldr	r1, [pc, #80]	; (80062d8 <pbuf_remove_header+0xa0>)
 8006288:	4812      	ldr	r0, [pc, #72]	; (80062d4 <pbuf_remove_header+0x9c>)
 800628a:	f009 f965 	bl	800f558 <iprintf>
 800628e:	2301      	movs	r3, #1
 8006290:	e017      	b.n	80062c2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	895a      	ldrh	r2, [r3, #10]
 80062a8:	89fb      	ldrh	r3, [r7, #14]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	891a      	ldrh	r2, [r3, #8]
 80062b6:	89fb      	ldrh	r3, [r7, #14]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	08011298 	.word	0x08011298
 80062d0:	080113fc 	.word	0x080113fc
 80062d4:	080112f8 	.word	0x080112f8
 80062d8:	08011408 	.word	0x08011408

080062dc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
 80062e8:	4613      	mov	r3, r2
 80062ea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80062ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da08      	bge.n	8006306 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80062f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062f8:	425b      	negs	r3, r3
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff9b 	bl	8006238 <pbuf_remove_header>
 8006302:	4603      	mov	r3, r0
 8006304:	e007      	b.n	8006316 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800630a:	787a      	ldrb	r2, [r7, #1]
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7ff ff1a 	bl	8006148 <pbuf_add_header_impl>
 8006314:	4603      	mov	r3, r0
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800632a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800632e:	2201      	movs	r2, #1
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff ffd2 	bl	80062dc <pbuf_header_impl>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <pbuf_free+0x22>
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <pbuf_free+0xf8>)
 800635a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800635e:	4938      	ldr	r1, [pc, #224]	; (8006440 <pbuf_free+0xfc>)
 8006360:	4838      	ldr	r0, [pc, #224]	; (8006444 <pbuf_free+0x100>)
 8006362:	f009 f8f9 	bl	800f558 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006366:	2300      	movs	r3, #0
 8006368:	e063      	b.n	8006432 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800636e:	e05c      	b.n	800642a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7b9b      	ldrb	r3, [r3, #14]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <pbuf_free+0x42>
 8006378:	4b30      	ldr	r3, [pc, #192]	; (800643c <pbuf_free+0xf8>)
 800637a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800637e:	4932      	ldr	r1, [pc, #200]	; (8006448 <pbuf_free+0x104>)
 8006380:	4830      	ldr	r0, [pc, #192]	; (8006444 <pbuf_free+0x100>)
 8006382:	f009 f8e9 	bl	800f558 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7b9b      	ldrb	r3, [r3, #14]
 800638a:	3b01      	subs	r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	739a      	strb	r2, [r3, #14]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7b9b      	ldrb	r3, [r3, #14]
 8006396:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006398:	7dbb      	ldrb	r3, [r7, #22]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d143      	bne.n	8006426 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	7b1b      	ldrb	r3, [r3, #12]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7b5b      	ldrb	r3, [r3, #13]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d011      	beq.n	80063de <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <pbuf_free+0x90>
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <pbuf_free+0xf8>)
 80063c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80063cc:	491f      	ldr	r1, [pc, #124]	; (800644c <pbuf_free+0x108>)
 80063ce:	481d      	ldr	r0, [pc, #116]	; (8006444 <pbuf_free+0x100>)
 80063d0:	f009 f8c2 	bl	800f558 <iprintf>
        pc->custom_free_function(p);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
 80063dc:	e01d      	b.n	800641a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d104      	bne.n	80063ee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	2008      	movs	r0, #8
 80063e8:	f7ff f99a 	bl	8005720 <memp_free>
 80063ec:	e015      	b.n	800641a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d104      	bne.n	80063fe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	2007      	movs	r0, #7
 80063f8:	f7ff f992 	bl	8005720 <memp_free>
 80063fc:	e00d      	b.n	800641a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <pbuf_free+0xc8>
          mem_free(p);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fe fe6b 	bl	80050e0 <mem_free>
 800640a:	e006      	b.n	800641a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800640c:	4b0b      	ldr	r3, [pc, #44]	; (800643c <pbuf_free+0xf8>)
 800640e:	f240 320f 	movw	r2, #783	; 0x30f
 8006412:	490f      	ldr	r1, [pc, #60]	; (8006450 <pbuf_free+0x10c>)
 8006414:	480b      	ldr	r0, [pc, #44]	; (8006444 <pbuf_free+0x100>)
 8006416:	f009 f89f 	bl	800f558 <iprintf>
        }
      }
      count++;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	3301      	adds	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	e001      	b.n	800642a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d19f      	bne.n	8006370 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	08011298 	.word	0x08011298
 8006440:	080113fc 	.word	0x080113fc
 8006444:	080112f8 	.word	0x080112f8
 8006448:	08011428 	.word	0x08011428
 800644c:	08011440 	.word	0x08011440
 8006450:	08011464 	.word	0x08011464

08006454 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006460:	e005      	b.n	800646e <pbuf_clen+0x1a>
    ++len;
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	3301      	adds	r3, #1
 8006466:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1f6      	bne.n	8006462 <pbuf_clen+0xe>
  }
  return len;
 8006474:	89fb      	ldrh	r3, [r7, #14]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7b9b      	ldrb	r3, [r3, #14]
 8006496:	3301      	adds	r3, #1
 8006498:	b2da      	uxtb	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7b9b      	ldrb	r3, [r3, #14]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <pbuf_ref+0x30>
 80064a6:	4b05      	ldr	r3, [pc, #20]	; (80064bc <pbuf_ref+0x38>)
 80064a8:	f240 3242 	movw	r2, #834	; 0x342
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <pbuf_ref+0x3c>)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <pbuf_ref+0x40>)
 80064b0:	f009 f852 	bl	800f558 <iprintf>
  }
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	08011298 	.word	0x08011298
 80064c0:	08011478 	.word	0x08011478
 80064c4:	080112f8 	.word	0x080112f8

080064c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <pbuf_cat+0x16>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d107      	bne.n	80064ee <pbuf_cat+0x26>
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <pbuf_cat+0x98>)
 80064e0:	f240 3259 	movw	r2, #857	; 0x359
 80064e4:	491f      	ldr	r1, [pc, #124]	; (8006564 <pbuf_cat+0x9c>)
 80064e6:	4820      	ldr	r0, [pc, #128]	; (8006568 <pbuf_cat+0xa0>)
 80064e8:	f009 f836 	bl	800f558 <iprintf>
 80064ec:	e034      	b.n	8006558 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e00a      	b.n	800650a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	891a      	ldrh	r2, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	891b      	ldrh	r3, [r3, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	891a      	ldrh	r2, [r3, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	895b      	ldrh	r3, [r3, #10]
 800651a:	429a      	cmp	r2, r3
 800651c:	d006      	beq.n	800652c <pbuf_cat+0x64>
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <pbuf_cat+0x98>)
 8006520:	f240 3262 	movw	r2, #866	; 0x362
 8006524:	4911      	ldr	r1, [pc, #68]	; (800656c <pbuf_cat+0xa4>)
 8006526:	4810      	ldr	r0, [pc, #64]	; (8006568 <pbuf_cat+0xa0>)
 8006528:	f009 f816 	bl	800f558 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <pbuf_cat+0x7a>
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <pbuf_cat+0x98>)
 8006536:	f240 3263 	movw	r2, #867	; 0x363
 800653a:	490d      	ldr	r1, [pc, #52]	; (8006570 <pbuf_cat+0xa8>)
 800653c:	480a      	ldr	r0, [pc, #40]	; (8006568 <pbuf_cat+0xa0>)
 800653e:	f009 f80b 	bl	800f558 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	891a      	ldrh	r2, [r3, #8]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	891b      	ldrh	r3, [r3, #8]
 800654a:	4413      	add	r3, r2
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	08011298 	.word	0x08011298
 8006564:	0801148c 	.word	0x0801148c
 8006568:	080112f8 	.word	0x080112f8
 800656c:	080114c4 	.word	0x080114c4
 8006570:	080114f4 	.word	0x080114f4

08006574 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <pbuf_copy+0x2a>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <pbuf_copy+0x2a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	891a      	ldrh	r2, [r3, #8]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	891b      	ldrh	r3, [r3, #8]
 800659a:	429a      	cmp	r2, r3
 800659c:	d209      	bcs.n	80065b2 <pbuf_copy+0x3e>
 800659e:	4b57      	ldr	r3, [pc, #348]	; (80066fc <pbuf_copy+0x188>)
 80065a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80065a4:	4956      	ldr	r1, [pc, #344]	; (8006700 <pbuf_copy+0x18c>)
 80065a6:	4857      	ldr	r0, [pc, #348]	; (8006704 <pbuf_copy+0x190>)
 80065a8:	f008 ffd6 	bl	800f558 <iprintf>
 80065ac:	f06f 030f 	mvn.w	r3, #15
 80065b0:	e09f      	b.n	80066f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	895b      	ldrh	r3, [r3, #10]
 80065b6:	461a      	mov	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	895b      	ldrh	r3, [r3, #10]
 80065c0:	4619      	mov	r1, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1acb      	subs	r3, r1, r3
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d306      	bcc.n	80065d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	895b      	ldrh	r3, [r3, #10]
 80065ce:	461a      	mov	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e005      	b.n	80065e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	895b      	ldrh	r3, [r3, #10]
 80065dc:	461a      	mov	r2, r3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	18d0      	adds	r0, r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4619      	mov	r1, r3
 80065f8:	f008 ff7e 	bl	800f4f8 <memcpy>
    offset_to += len;
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	895b      	ldrh	r3, [r3, #10]
 8006610:	461a      	mov	r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4293      	cmp	r3, r2
 8006616:	d906      	bls.n	8006626 <pbuf_copy+0xb2>
 8006618:	4b38      	ldr	r3, [pc, #224]	; (80066fc <pbuf_copy+0x188>)
 800661a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800661e:	493a      	ldr	r1, [pc, #232]	; (8006708 <pbuf_copy+0x194>)
 8006620:	4838      	ldr	r0, [pc, #224]	; (8006704 <pbuf_copy+0x190>)
 8006622:	f008 ff99 	bl	800f558 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	895b      	ldrh	r3, [r3, #10]
 800662a:	461a      	mov	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	4293      	cmp	r3, r2
 8006630:	d906      	bls.n	8006640 <pbuf_copy+0xcc>
 8006632:	4b32      	ldr	r3, [pc, #200]	; (80066fc <pbuf_copy+0x188>)
 8006634:	f240 32da 	movw	r2, #986	; 0x3da
 8006638:	4934      	ldr	r1, [pc, #208]	; (800670c <pbuf_copy+0x198>)
 800663a:	4832      	ldr	r0, [pc, #200]	; (8006704 <pbuf_copy+0x190>)
 800663c:	f008 ff8c 	bl	800f558 <iprintf>
    if (offset_from >= p_from->len) {
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	895b      	ldrh	r3, [r3, #10]
 8006644:	461a      	mov	r2, r3
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4293      	cmp	r3, r2
 800664a:	d304      	bcc.n	8006656 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	895b      	ldrh	r3, [r3, #10]
 800665a:	461a      	mov	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	4293      	cmp	r3, r2
 8006660:	d114      	bne.n	800668c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <pbuf_copy+0x118>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <pbuf_copy+0x118>
 8006678:	4b20      	ldr	r3, [pc, #128]	; (80066fc <pbuf_copy+0x188>)
 800667a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800667e:	4924      	ldr	r1, [pc, #144]	; (8006710 <pbuf_copy+0x19c>)
 8006680:	4820      	ldr	r0, [pc, #128]	; (8006704 <pbuf_copy+0x190>)
 8006682:	f008 ff69 	bl	800f558 <iprintf>
 8006686:	f06f 030f 	mvn.w	r3, #15
 800668a:	e032      	b.n	80066f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d013      	beq.n	80066ba <pbuf_copy+0x146>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	895a      	ldrh	r2, [r3, #10]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	891b      	ldrh	r3, [r3, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d10d      	bne.n	80066ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d009      	beq.n	80066ba <pbuf_copy+0x146>
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <pbuf_copy+0x188>)
 80066a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80066ac:	4919      	ldr	r1, [pc, #100]	; (8006714 <pbuf_copy+0x1a0>)
 80066ae:	4815      	ldr	r0, [pc, #84]	; (8006704 <pbuf_copy+0x190>)
 80066b0:	f008 ff52 	bl	800f558 <iprintf>
 80066b4:	f06f 0305 	mvn.w	r3, #5
 80066b8:	e01b      	b.n	80066f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d013      	beq.n	80066e8 <pbuf_copy+0x174>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	895a      	ldrh	r2, [r3, #10]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	891b      	ldrh	r3, [r3, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d10d      	bne.n	80066e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <pbuf_copy+0x174>
 80066d4:	4b09      	ldr	r3, [pc, #36]	; (80066fc <pbuf_copy+0x188>)
 80066d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80066da:	490e      	ldr	r1, [pc, #56]	; (8006714 <pbuf_copy+0x1a0>)
 80066dc:	4809      	ldr	r0, [pc, #36]	; (8006704 <pbuf_copy+0x190>)
 80066de:	f008 ff3b 	bl	800f558 <iprintf>
 80066e2:	f06f 0305 	mvn.w	r3, #5
 80066e6:	e004      	b.n	80066f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f47f af61 	bne.w	80065b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	08011298 	.word	0x08011298
 8006700:	08011540 	.word	0x08011540
 8006704:	080112f8 	.word	0x080112f8
 8006708:	08011570 	.word	0x08011570
 800670c:	08011588 	.word	0x08011588
 8006710:	080115a4 	.word	0x080115a4
 8006714:	080115b4 	.word	0x080115b4

08006718 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	460b      	mov	r3, r1
 8006728:	80fb      	strh	r3, [r7, #6]
 800672a:	4613      	mov	r3, r2
 800672c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d108      	bne.n	800674e <pbuf_copy_partial+0x36>
 800673c:	4b2b      	ldr	r3, [pc, #172]	; (80067ec <pbuf_copy_partial+0xd4>)
 800673e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006742:	492b      	ldr	r1, [pc, #172]	; (80067f0 <pbuf_copy_partial+0xd8>)
 8006744:	482b      	ldr	r0, [pc, #172]	; (80067f4 <pbuf_copy_partial+0xdc>)
 8006746:	f008 ff07 	bl	800f558 <iprintf>
 800674a:	2300      	movs	r3, #0
 800674c:	e04a      	b.n	80067e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <pbuf_copy_partial+0x4e>
 8006754:	4b25      	ldr	r3, [pc, #148]	; (80067ec <pbuf_copy_partial+0xd4>)
 8006756:	f240 420b 	movw	r2, #1035	; 0x40b
 800675a:	4927      	ldr	r1, [pc, #156]	; (80067f8 <pbuf_copy_partial+0xe0>)
 800675c:	4825      	ldr	r0, [pc, #148]	; (80067f4 <pbuf_copy_partial+0xdc>)
 800675e:	f008 fefb 	bl	800f558 <iprintf>
 8006762:	2300      	movs	r3, #0
 8006764:	e03e      	b.n	80067e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	e034      	b.n	80067d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800676c:	88bb      	ldrh	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <pbuf_copy_partial+0x70>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	895b      	ldrh	r3, [r3, #10]
 8006776:	88ba      	ldrh	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d305      	bcc.n	8006788 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	895b      	ldrh	r3, [r3, #10]
 8006780:	88ba      	ldrh	r2, [r7, #4]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	80bb      	strh	r3, [r7, #4]
 8006786:	e023      	b.n	80067d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	895a      	ldrh	r2, [r3, #10]
 800678c:	88bb      	ldrh	r3, [r7, #4]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006792:	8b3a      	ldrh	r2, [r7, #24]
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	429a      	cmp	r2, r3
 8006798:	d901      	bls.n	800679e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800679e:	8b7b      	ldrh	r3, [r7, #26]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	18d0      	adds	r0, r2, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	88bb      	ldrh	r3, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	8b3a      	ldrh	r2, [r7, #24]
 80067ae:	4619      	mov	r1, r3
 80067b0:	f008 fea2 	bl	800f4f8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80067b4:	8afa      	ldrh	r2, [r7, #22]
 80067b6:	8b3b      	ldrh	r3, [r7, #24]
 80067b8:	4413      	add	r3, r2
 80067ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80067bc:	8b7a      	ldrh	r2, [r7, #26]
 80067be:	8b3b      	ldrh	r3, [r7, #24]
 80067c0:	4413      	add	r3, r2
 80067c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80067c4:	88fa      	ldrh	r2, [r7, #6]
 80067c6:	8b3b      	ldrh	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <pbuf_copy_partial+0xca>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1c4      	bne.n	800676c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80067e2:	8afb      	ldrh	r3, [r7, #22]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	08011298 	.word	0x08011298
 80067f0:	080115e0 	.word	0x080115e0
 80067f4:	080112f8 	.word	0x080112f8
 80067f8:	08011600 	.word	0x08011600

080067fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	603a      	str	r2, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
 8006808:	460b      	mov	r3, r1
 800680a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	8919      	ldrh	r1, [r3, #8]
 8006810:	88ba      	ldrh	r2, [r7, #4]
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff fab1 	bl	8005d7c <pbuf_alloc>
 800681a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <pbuf_clone+0x2a>
    return NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	e011      	b.n	800684a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fea3 	bl	8006574 <pbuf_copy>
 800682e:	4603      	mov	r3, r0
 8006830:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006832:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d006      	beq.n	8006848 <pbuf_clone+0x4c>
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <pbuf_clone+0x58>)
 800683c:	f240 5224 	movw	r2, #1316	; 0x524
 8006840:	4905      	ldr	r1, [pc, #20]	; (8006858 <pbuf_clone+0x5c>)
 8006842:	4806      	ldr	r0, [pc, #24]	; (800685c <pbuf_clone+0x60>)
 8006844:	f008 fe88 	bl	800f558 <iprintf>
  return q;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	08011298 	.word	0x08011298
 8006858:	0801170c 	.word	0x0801170c
 800685c:	080112f8 	.word	0x080112f8

08006860 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006864:	f008 fe90 	bl	800f588 <rand>
 8006868:	4603      	mov	r3, r0
 800686a:	b29b      	uxth	r3, r3
 800686c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006870:	b29b      	uxth	r3, r3
 8006872:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006876:	b29a      	uxth	r2, r3
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <tcp_init+0x20>)
 800687a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800687c:	bf00      	nop
 800687e:	bd80      	pop	{r7, pc}
 8006880:	2000001a 	.word	0x2000001a

08006884 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7d1b      	ldrb	r3, [r3, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d105      	bne.n	80068a0 <tcp_free+0x1c>
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <tcp_free+0x2c>)
 8006896:	22d4      	movs	r2, #212	; 0xd4
 8006898:	4906      	ldr	r1, [pc, #24]	; (80068b4 <tcp_free+0x30>)
 800689a:	4807      	ldr	r0, [pc, #28]	; (80068b8 <tcp_free+0x34>)
 800689c:	f008 fe5c 	bl	800f558 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	2001      	movs	r0, #1
 80068a4:	f7fe ff3c 	bl	8005720 <memp_free>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08011798 	.word	0x08011798
 80068b4:	080117c8 	.word	0x080117c8
 80068b8:	080117dc 	.word	0x080117dc

080068bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d105      	bne.n	80068d8 <tcp_free_listen+0x1c>
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <tcp_free_listen+0x2c>)
 80068ce:	22df      	movs	r2, #223	; 0xdf
 80068d0:	4906      	ldr	r1, [pc, #24]	; (80068ec <tcp_free_listen+0x30>)
 80068d2:	4807      	ldr	r0, [pc, #28]	; (80068f0 <tcp_free_listen+0x34>)
 80068d4:	f008 fe40 	bl	800f558 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	2002      	movs	r0, #2
 80068dc:	f7fe ff20 	bl	8005720 <memp_free>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	08011798 	.word	0x08011798
 80068ec:	08011804 	.word	0x08011804
 80068f0:	080117dc 	.word	0x080117dc

080068f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80068f8:	f001 f85c 	bl	80079b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <tcp_tmr+0x28>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	b2da      	uxtb	r2, r3
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <tcp_tmr+0x28>)
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	4b04      	ldr	r3, [pc, #16]	; (800691c <tcp_tmr+0x28>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006914:	f000 fd0e 	bl	8007334 <tcp_slowtmr>
  }
}
 8006918:	bf00      	nop
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000535 	.word	0x20000535

08006920 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d105      	bne.n	800693c <tcp_remove_listener+0x1c>
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <tcp_remove_listener+0x48>)
 8006932:	22ff      	movs	r2, #255	; 0xff
 8006934:	490d      	ldr	r1, [pc, #52]	; (800696c <tcp_remove_listener+0x4c>)
 8006936:	480e      	ldr	r0, [pc, #56]	; (8006970 <tcp_remove_listener+0x50>)
 8006938:	f008 fe0e 	bl	800f558 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e00a      	b.n	8006958 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d102      	bne.n	8006952 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f1      	bne.n	8006942 <tcp_remove_listener+0x22>
    }
  }
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	08011798 	.word	0x08011798
 800696c:	08011820 	.word	0x08011820
 8006970:	080117dc 	.word	0x080117dc

08006974 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <tcp_listen_closed+0x1c>
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <tcp_listen_closed+0x60>)
 8006984:	f240 1211 	movw	r2, #273	; 0x111
 8006988:	4913      	ldr	r1, [pc, #76]	; (80069d8 <tcp_listen_closed+0x64>)
 800698a:	4814      	ldr	r0, [pc, #80]	; (80069dc <tcp_listen_closed+0x68>)
 800698c:	f008 fde4 	bl	800f558 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d006      	beq.n	80069a6 <tcp_listen_closed+0x32>
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <tcp_listen_closed+0x60>)
 800699a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800699e:	4910      	ldr	r1, [pc, #64]	; (80069e0 <tcp_listen_closed+0x6c>)
 80069a0:	480e      	ldr	r0, [pc, #56]	; (80069dc <tcp_listen_closed+0x68>)
 80069a2:	f008 fdd9 	bl	800f558 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069a6:	2301      	movs	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e00b      	b.n	80069c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80069ac:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <tcp_listen_closed+0x70>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ffb1 	bl	8006920 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d9f0      	bls.n	80069ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	08011798 	.word	0x08011798
 80069d8:	08011848 	.word	0x08011848
 80069dc:	080117dc 	.word	0x080117dc
 80069e0:	08011854 	.word	0x08011854
 80069e4:	08014794 	.word	0x08014794

080069e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80069e8:	b5b0      	push	{r4, r5, r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d106      	bne.n	8006a08 <tcp_close_shutdown+0x20>
 80069fa:	4b63      	ldr	r3, [pc, #396]	; (8006b88 <tcp_close_shutdown+0x1a0>)
 80069fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006a00:	4962      	ldr	r1, [pc, #392]	; (8006b8c <tcp_close_shutdown+0x1a4>)
 8006a02:	4863      	ldr	r0, [pc, #396]	; (8006b90 <tcp_close_shutdown+0x1a8>)
 8006a04:	f008 fda8 	bl	800f558 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d066      	beq.n	8006adc <tcp_close_shutdown+0xf4>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7d1b      	ldrb	r3, [r3, #20]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d003      	beq.n	8006a1e <tcp_close_shutdown+0x36>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7d1b      	ldrb	r3, [r3, #20]
 8006a1a:	2b07      	cmp	r3, #7
 8006a1c:	d15e      	bne.n	8006adc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <tcp_close_shutdown+0x48>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006a2e:	d055      	beq.n	8006adc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8b5b      	ldrh	r3, [r3, #26]
 8006a34:	f003 0310 	and.w	r3, r3, #16
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <tcp_close_shutdown+0x62>
 8006a3c:	4b52      	ldr	r3, [pc, #328]	; (8006b88 <tcp_close_shutdown+0x1a0>)
 8006a3e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006a42:	4954      	ldr	r1, [pc, #336]	; (8006b94 <tcp_close_shutdown+0x1ac>)
 8006a44:	4852      	ldr	r0, [pc, #328]	; (8006b90 <tcp_close_shutdown+0x1a8>)
 8006a46:	f008 fd87 	bl	800f558 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a52:	687d      	ldr	r5, [r7, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	8ad2      	ldrh	r2, [r2, #22]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	8b09      	ldrh	r1, [r1, #24]
 8006a60:	9102      	str	r1, [sp, #8]
 8006a62:	9201      	str	r2, [sp, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	462b      	mov	r3, r5
 8006a68:	4622      	mov	r2, r4
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f005 fd8b 	bl	800c588 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fb6c 	bl	8008150 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006a78:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d105      	bne.n	8006a8e <tcp_close_shutdown+0xa6>
 8006a82:	4b45      	ldr	r3, [pc, #276]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4a43      	ldr	r2, [pc, #268]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	e013      	b.n	8006ab6 <tcp_close_shutdown+0xce>
 8006a8e:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e00c      	b.n	8006ab0 <tcp_close_shutdown+0xc8>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d104      	bne.n	8006aaa <tcp_close_shutdown+0xc2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	e005      	b.n	8006ab6 <tcp_close_shutdown+0xce>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1ef      	bne.n	8006a96 <tcp_close_shutdown+0xae>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	60da      	str	r2, [r3, #12]
 8006abc:	4b37      	ldr	r3, [pc, #220]	; (8006b9c <tcp_close_shutdown+0x1b4>)
 8006abe:	2201      	movs	r2, #1
 8006ac0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <tcp_close_shutdown+0x1b8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d102      	bne.n	8006ad2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006acc:	f004 f800 	bl	800aad0 <tcp_trigger_input_pcb_close>
 8006ad0:	e002      	b.n	8006ad8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fed6 	bl	8006884 <tcp_free>
      }
      return ERR_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e050      	b.n	8006b7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7d1b      	ldrb	r3, [r3, #20]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d03b      	beq.n	8006b5c <tcp_close_shutdown+0x174>
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	dc44      	bgt.n	8006b72 <tcp_close_shutdown+0x18a>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <tcp_close_shutdown+0x10a>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d02a      	beq.n	8006b46 <tcp_close_shutdown+0x15e>
 8006af0:	e03f      	b.n	8006b72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8adb      	ldrh	r3, [r3, #22]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d021      	beq.n	8006b3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006afa:	4b2a      	ldr	r3, [pc, #168]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d105      	bne.n	8006b10 <tcp_close_shutdown+0x128>
 8006b04:	4b27      	ldr	r3, [pc, #156]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4a26      	ldr	r2, [pc, #152]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e013      	b.n	8006b38 <tcp_close_shutdown+0x150>
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <tcp_close_shutdown+0x1bc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	e00c      	b.n	8006b32 <tcp_close_shutdown+0x14a>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d104      	bne.n	8006b2c <tcp_close_shutdown+0x144>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e005      	b.n	8006b38 <tcp_close_shutdown+0x150>
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ef      	bne.n	8006b18 <tcp_close_shutdown+0x130>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fea0 	bl	8006884 <tcp_free>
      break;
 8006b44:	e01a      	b.n	8006b7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff14 	bl	8006974 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4816      	ldr	r0, [pc, #88]	; (8006ba8 <tcp_close_shutdown+0x1c0>)
 8006b50:	f001 fb4e 	bl	80081f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff feb1 	bl	80068bc <tcp_free_listen>
      break;
 8006b5a:	e00f      	b.n	8006b7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	480e      	ldr	r0, [pc, #56]	; (8006b98 <tcp_close_shutdown+0x1b0>)
 8006b60:	f001 fb46 	bl	80081f0 <tcp_pcb_remove>
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <tcp_close_shutdown+0x1b4>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fe8a 	bl	8006884 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006b70:	e004      	b.n	8006b7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f81a 	bl	8006bac <tcp_close_shutdown_fin>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	e000      	b.n	8006b7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bdb0      	pop	{r4, r5, r7, pc}
 8006b86:	bf00      	nop
 8006b88:	08011798 	.word	0x08011798
 8006b8c:	0801186c 	.word	0x0801186c
 8006b90:	080117dc 	.word	0x080117dc
 8006b94:	0801188c 	.word	0x0801188c
 8006b98:	20008ed8 	.word	0x20008ed8
 8006b9c:	20008ed4 	.word	0x20008ed4
 8006ba0:	20008eec 	.word	0x20008eec
 8006ba4:	20008ee4 	.word	0x20008ee4
 8006ba8:	20008ee0 	.word	0x20008ee0

08006bac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <tcp_close_shutdown_fin+0x1c>
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <tcp_close_shutdown_fin+0xc8>)
 8006bbc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006bc0:	492d      	ldr	r1, [pc, #180]	; (8006c78 <tcp_close_shutdown_fin+0xcc>)
 8006bc2:	482e      	ldr	r0, [pc, #184]	; (8006c7c <tcp_close_shutdown_fin+0xd0>)
 8006bc4:	f008 fcc8 	bl	800f558 <iprintf>

  switch (pcb->state) {
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7d1b      	ldrb	r3, [r3, #20]
 8006bcc:	2b07      	cmp	r3, #7
 8006bce:	d020      	beq.n	8006c12 <tcp_close_shutdown_fin+0x66>
 8006bd0:	2b07      	cmp	r3, #7
 8006bd2:	dc2b      	bgt.n	8006c2c <tcp_close_shutdown_fin+0x80>
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d002      	beq.n	8006bde <tcp_close_shutdown_fin+0x32>
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d00d      	beq.n	8006bf8 <tcp_close_shutdown_fin+0x4c>
 8006bdc:	e026      	b.n	8006c2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f004 fde0 	bl	800b7a4 <tcp_send_fin>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11f      	bne.n	8006c30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2205      	movs	r2, #5
 8006bf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006bf6:	e01b      	b.n	8006c30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f004 fdd3 	bl	800b7a4 <tcp_send_fin>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d114      	bne.n	8006c34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c10:	e010      	b.n	8006c34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f004 fdc6 	bl	800b7a4 <tcp_send_fin>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2209      	movs	r2, #9
 8006c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006c2a:	e005      	b.n	8006c38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e01c      	b.n	8006c6a <tcp_close_shutdown_fin+0xbe>
      break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <tcp_close_shutdown_fin+0x8e>
      break;
 8006c38:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f004 feec 	bl	800ba20 <tcp_output>
 8006c48:	e00d      	b.n	8006c66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c52:	d108      	bne.n	8006c66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8b5b      	ldrh	r3, [r3, #26]
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e001      	b.n	8006c6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	08011798 	.word	0x08011798
 8006c78:	08011848 	.word	0x08011848
 8006c7c:	080117dc 	.word	0x080117dc

08006c80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <tcp_close+0x22>
 8006c8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <tcp_close+0x4c>)
 8006c90:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006c94:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <tcp_close+0x50>)
 8006c96:	480f      	ldr	r0, [pc, #60]	; (8006cd4 <tcp_close+0x54>)
 8006c98:	f008 fc5e 	bl	800f558 <iprintf>
 8006c9c:	f06f 030f 	mvn.w	r3, #15
 8006ca0:	e00f      	b.n	8006cc2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7d1b      	ldrb	r3, [r3, #20]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d006      	beq.n	8006cb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	8b5b      	ldrh	r3, [r3, #26]
 8006cae:	f043 0310 	orr.w	r3, r3, #16
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006cb8:	2101      	movs	r1, #1
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fe94 	bl	80069e8 <tcp_close_shutdown>
 8006cc0:	4603      	mov	r3, r0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	08011798 	.word	0x08011798
 8006cd0:	080118a8 	.word	0x080118a8
 8006cd4:	080117dc 	.word	0x080117dc

08006cd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08e      	sub	sp, #56	; 0x38
 8006cdc:	af04      	add	r7, sp, #16
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d107      	bne.n	8006cf8 <tcp_abandon+0x20>
 8006ce8:	4b52      	ldr	r3, [pc, #328]	; (8006e34 <tcp_abandon+0x15c>)
 8006cea:	f240 223d 	movw	r2, #573	; 0x23d
 8006cee:	4952      	ldr	r1, [pc, #328]	; (8006e38 <tcp_abandon+0x160>)
 8006cf0:	4852      	ldr	r0, [pc, #328]	; (8006e3c <tcp_abandon+0x164>)
 8006cf2:	f008 fc31 	bl	800f558 <iprintf>
 8006cf6:	e099      	b.n	8006e2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7d1b      	ldrb	r3, [r3, #20]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <tcp_abandon+0x36>
 8006d00:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <tcp_abandon+0x15c>)
 8006d02:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006d06:	494e      	ldr	r1, [pc, #312]	; (8006e40 <tcp_abandon+0x168>)
 8006d08:	484c      	ldr	r0, [pc, #304]	; (8006e3c <tcp_abandon+0x164>)
 8006d0a:	f008 fc25 	bl	800f558 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	2b0a      	cmp	r3, #10
 8006d14:	d107      	bne.n	8006d26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	484a      	ldr	r0, [pc, #296]	; (8006e44 <tcp_abandon+0x16c>)
 8006d1a:	f001 fa69 	bl	80081f0 <tcp_pcb_remove>
    tcp_free(pcb);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fdb0 	bl	8006884 <tcp_free>
 8006d24:	e082      	b.n	8006e2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7d1b      	ldrb	r3, [r3, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d126      	bne.n	8006d9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8adb      	ldrh	r3, [r3, #22]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02e      	beq.n	8006db6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006d58:	4b3b      	ldr	r3, [pc, #236]	; (8006e48 <tcp_abandon+0x170>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d105      	bne.n	8006d6e <tcp_abandon+0x96>
 8006d62:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <tcp_abandon+0x170>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	4a37      	ldr	r2, [pc, #220]	; (8006e48 <tcp_abandon+0x170>)
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e013      	b.n	8006d96 <tcp_abandon+0xbe>
 8006d6e:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <tcp_abandon+0x170>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	e00c      	b.n	8006d90 <tcp_abandon+0xb8>
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d104      	bne.n	8006d8a <tcp_abandon+0xb2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	60da      	str	r2, [r3, #12]
 8006d88:	e005      	b.n	8006d96 <tcp_abandon+0xbe>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	61fb      	str	r3, [r7, #28]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1ef      	bne.n	8006d76 <tcp_abandon+0x9e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e00b      	b.n	8006db6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8adb      	ldrh	r3, [r3, #22]
 8006da6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4828      	ldr	r0, [pc, #160]	; (8006e4c <tcp_abandon+0x174>)
 8006dac:	f001 fa20 	bl	80081f0 <tcp_pcb_remove>
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <tcp_abandon+0x178>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fed6 	bl	8007b74 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fecd 	bl	8007b74 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fec4 	bl	8007b74 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	8b12      	ldrh	r2, [r2, #24]
 8006dfc:	9202      	str	r2, [sp, #8]
 8006dfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006e00:	9201      	str	r2, [sp, #4]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	460b      	mov	r3, r1
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f005 fbbc 	bl	800c588 <tcp_rst>
    }
    last_state = pcb->state;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7d1b      	ldrb	r3, [r3, #20]
 8006e14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fd34 	bl	8006884 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <tcp_abandon+0x154>
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f06f 010c 	mvn.w	r1, #12
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	4798      	blx	r3
  }
}
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	08011798 	.word	0x08011798
 8006e38:	080118dc 	.word	0x080118dc
 8006e3c:	080117dc 	.word	0x080117dc
 8006e40:	080118f8 	.word	0x080118f8
 8006e44:	20008ee8 	.word	0x20008ee8
 8006e48:	20008ee4 	.word	0x20008ee4
 8006e4c:	20008ed8 	.word	0x20008ed8
 8006e50:	20008ed4 	.word	0x20008ed4

08006e54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff ff3a 	bl	8006cd8 <tcp_abandon>
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006e84:	4b3e      	ldr	r3, [pc, #248]	; (8006f80 <tcp_bind+0x114>)
 8006e86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <tcp_bind+0x36>
 8006e8e:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <tcp_bind+0x118>)
 8006e90:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006e94:	493c      	ldr	r1, [pc, #240]	; (8006f88 <tcp_bind+0x11c>)
 8006e96:	483d      	ldr	r0, [pc, #244]	; (8006f8c <tcp_bind+0x120>)
 8006e98:	f008 fb5e 	bl	800f558 <iprintf>
 8006e9c:	f06f 030f 	mvn.w	r3, #15
 8006ea0:	e06a      	b.n	8006f78 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	7d1b      	ldrb	r3, [r3, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <tcp_bind+0x52>
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <tcp_bind+0x118>)
 8006eac:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006eb0:	4937      	ldr	r1, [pc, #220]	; (8006f90 <tcp_bind+0x124>)
 8006eb2:	4836      	ldr	r0, [pc, #216]	; (8006f8c <tcp_bind+0x120>)
 8006eb4:	f008 fb50 	bl	800f558 <iprintf>
 8006eb8:	f06f 0305 	mvn.w	r3, #5
 8006ebc:	e05c      	b.n	8006f78 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006ec4:	f000 f9f0 	bl	80072a8 <tcp_new_port>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d135      	bne.n	8006f3e <tcp_bind+0xd2>
      return ERR_BUF;
 8006ed2:	f06f 0301 	mvn.w	r3, #1
 8006ed6:	e04f      	b.n	8006f78 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	e02b      	b.n	8006f36 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006ede:	4a2d      	ldr	r2, [pc, #180]	; (8006f94 <tcp_bind+0x128>)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	61bb      	str	r3, [r7, #24]
 8006eea:	e01e      	b.n	8006f2a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	8adb      	ldrh	r3, [r3, #22]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d116      	bne.n	8006f24 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006ef6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d010      	beq.n	8006f1e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00c      	beq.n	8006f1e <tcp_bind+0xb2>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d102      	bne.n	8006f24 <tcp_bind+0xb8>
              return ERR_USE;
 8006f1e:	f06f 0307 	mvn.w	r3, #7
 8006f22:	e029      	b.n	8006f78 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1dd      	bne.n	8006eec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	dbcf      	blt.n	8006ede <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00c      	beq.n	8006f5e <tcp_bind+0xf2>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d008      	beq.n	8006f5e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <tcp_bind+0xec>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	e000      	b.n	8006f5a <tcp_bind+0xee>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <tcp_bind+0x12c>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	60da      	str	r2, [r3, #12]
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	; (8006f98 <tcp_bind+0x12c>)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	f005 fccb 	bl	800c90c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3720      	adds	r7, #32
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	080147bc 	.word	0x080147bc
 8006f84:	08011798 	.word	0x08011798
 8006f88:	0801192c 	.word	0x0801192c
 8006f8c:	080117dc 	.word	0x080117dc
 8006f90:	08011944 	.word	0x08011944
 8006f94:	08014794 	.word	0x08014794
 8006f98:	20008ee4 	.word	0x20008ee4

08006f9c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <tcp_accept_null+0x22>
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <tcp_accept_null+0x34>)
 8006fb2:	f240 320f 	movw	r2, #783	; 0x30f
 8006fb6:	4907      	ldr	r1, [pc, #28]	; (8006fd4 <tcp_accept_null+0x38>)
 8006fb8:	4807      	ldr	r0, [pc, #28]	; (8006fd8 <tcp_accept_null+0x3c>)
 8006fba:	f008 facd 	bl	800f558 <iprintf>

  tcp_abort(pcb);
 8006fbe:	68b8      	ldr	r0, [r7, #8]
 8006fc0:	f7ff ff48 	bl	8006e54 <tcp_abort>

  return ERR_ABRT;
 8006fc4:	f06f 030c 	mvn.w	r3, #12
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	08011798 	.word	0x08011798
 8006fd4:	0801196c 	.word	0x0801196c
 8006fd8:	080117dc 	.word	0x080117dc

08006fdc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	2200      	movs	r2, #0
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f806 	bl	8007000 <tcp_listen_with_backlog_and_err>
 8006ff4:	4603      	mov	r3, r0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	460b      	mov	r3, r1
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <tcp_listen_with_backlog_and_err+0x2c>
 8007018:	4b47      	ldr	r3, [pc, #284]	; (8007138 <tcp_listen_with_backlog_and_err+0x138>)
 800701a:	f240 3259 	movw	r2, #857	; 0x359
 800701e:	4947      	ldr	r1, [pc, #284]	; (800713c <tcp_listen_with_backlog_and_err+0x13c>)
 8007020:	4847      	ldr	r0, [pc, #284]	; (8007140 <tcp_listen_with_backlog_and_err+0x140>)
 8007022:	f008 fa99 	bl	800f558 <iprintf>
 8007026:	23f0      	movs	r3, #240	; 0xf0
 8007028:	76fb      	strb	r3, [r7, #27]
 800702a:	e079      	b.n	8007120 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	7d1b      	ldrb	r3, [r3, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <tcp_listen_with_backlog_and_err+0x48>
 8007034:	4b40      	ldr	r3, [pc, #256]	; (8007138 <tcp_listen_with_backlog_and_err+0x138>)
 8007036:	f240 325a 	movw	r2, #858	; 0x35a
 800703a:	4942      	ldr	r1, [pc, #264]	; (8007144 <tcp_listen_with_backlog_and_err+0x144>)
 800703c:	4840      	ldr	r0, [pc, #256]	; (8007140 <tcp_listen_with_backlog_and_err+0x140>)
 800703e:	f008 fa8b 	bl	800f558 <iprintf>
 8007042:	23f1      	movs	r3, #241	; 0xf1
 8007044:	76fb      	strb	r3, [r7, #27]
 8007046:	e06b      	b.n	8007120 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	7d1b      	ldrb	r3, [r3, #20]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d104      	bne.n	800705a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007054:	23f7      	movs	r3, #247	; 0xf7
 8007056:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007058:	e062      	b.n	8007120 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800705a:	2002      	movs	r0, #2
 800705c:	f7fe fb14 	bl	8005688 <memp_malloc>
 8007060:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007068:	23ff      	movs	r3, #255	; 0xff
 800706a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800706c:	e058      	b.n	8007120 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	691a      	ldr	r2, [r3, #16]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8ada      	ldrh	r2, [r3, #22]
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2201      	movs	r2, #1
 8007082:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	7d5a      	ldrb	r2, [r3, #21]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	7a5a      	ldrb	r2, [r3, #9]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	2200      	movs	r2, #0
 8007098:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	7ada      	ldrb	r2, [r3, #11]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	7a9a      	ldrb	r2, [r3, #10]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8adb      	ldrh	r3, [r3, #22]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d021      	beq.n	80070fe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80070ba:	4b23      	ldr	r3, [pc, #140]	; (8007148 <tcp_listen_with_backlog_and_err+0x148>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d105      	bne.n	80070d0 <tcp_listen_with_backlog_and_err+0xd0>
 80070c4:	4b20      	ldr	r3, [pc, #128]	; (8007148 <tcp_listen_with_backlog_and_err+0x148>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <tcp_listen_with_backlog_and_err+0x148>)
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e013      	b.n	80070f8 <tcp_listen_with_backlog_and_err+0xf8>
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <tcp_listen_with_backlog_and_err+0x148>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e00c      	b.n	80070f2 <tcp_listen_with_backlog_and_err+0xf2>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d104      	bne.n	80070ec <tcp_listen_with_backlog_and_err+0xec>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	e005      	b.n	80070f8 <tcp_listen_with_backlog_and_err+0xf8>
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1ef      	bne.n	80070d8 <tcp_listen_with_backlog_and_err+0xd8>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fbc0 	bl	8006884 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4a11      	ldr	r2, [pc, #68]	; (800714c <tcp_listen_with_backlog_and_err+0x14c>)
 8007108:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <tcp_listen_with_backlog_and_err+0x150>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	4a0f      	ldr	r2, [pc, #60]	; (8007150 <tcp_listen_with_backlog_and_err+0x150>)
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	f005 fbf8 	bl	800c90c <tcp_timer_needed>
  res = ERR_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	7efa      	ldrb	r2, [r7, #27]
 800712a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800712c:	69fb      	ldr	r3, [r7, #28]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08011798 	.word	0x08011798
 800713c:	0801198c 	.word	0x0801198c
 8007140:	080117dc 	.word	0x080117dc
 8007144:	080119bc 	.word	0x080119bc
 8007148:	20008ee4 	.word	0x20008ee4
 800714c:	08006f9d 	.word	0x08006f9d
 8007150:	20008ee0 	.word	0x20008ee0

08007154 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <tcp_update_rcv_ann_wnd+0x1c>
 8007162:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007164:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007168:	4924      	ldr	r1, [pc, #144]	; (80071fc <tcp_update_rcv_ann_wnd+0xa8>)
 800716a:	4825      	ldr	r0, [pc, #148]	; (8007200 <tcp_update_rcv_ann_wnd+0xac>)
 800716c:	f008 f9f4 	bl	800f558 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007178:	4413      	add	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007184:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007188:	bf28      	it	cs
 800718a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800718e:	b292      	uxth	r2, r2
 8007190:	4413      	add	r3, r2
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	db08      	blt.n	80071ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	e020      	b.n	80071ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dd03      	ble.n	80071c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071c0:	e014      	b.n	80071ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d4:	d306      	bcc.n	80071e4 <tcp_update_rcv_ann_wnd+0x90>
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80071d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80071dc:	4909      	ldr	r1, [pc, #36]	; (8007204 <tcp_update_rcv_ann_wnd+0xb0>)
 80071de:	4808      	ldr	r0, [pc, #32]	; (8007200 <tcp_update_rcv_ann_wnd+0xac>)
 80071e0:	f008 f9ba 	bl	800f558 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80071ec:	2300      	movs	r3, #0
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	08011798 	.word	0x08011798
 80071fc:	080119f4 	.word	0x080119f4
 8007200:	080117dc 	.word	0x080117dc
 8007204:	08011a18 	.word	0x08011a18

08007208 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d107      	bne.n	800722a <tcp_recved+0x22>
 800721a:	4b1f      	ldr	r3, [pc, #124]	; (8007298 <tcp_recved+0x90>)
 800721c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007220:	491e      	ldr	r1, [pc, #120]	; (800729c <tcp_recved+0x94>)
 8007222:	481f      	ldr	r0, [pc, #124]	; (80072a0 <tcp_recved+0x98>)
 8007224:	f008 f998 	bl	800f558 <iprintf>
 8007228:	e032      	b.n	8007290 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7d1b      	ldrb	r3, [r3, #20]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d106      	bne.n	8007240 <tcp_recved+0x38>
 8007232:	4b19      	ldr	r3, [pc, #100]	; (8007298 <tcp_recved+0x90>)
 8007234:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007238:	491a      	ldr	r1, [pc, #104]	; (80072a4 <tcp_recved+0x9c>)
 800723a:	4819      	ldr	r0, [pc, #100]	; (80072a0 <tcp_recved+0x98>)
 800723c:	f008 f98c 	bl	800f558 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007244:	887b      	ldrh	r3, [r7, #2]
 8007246:	4413      	add	r3, r2
 8007248:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800724a:	89fb      	ldrh	r3, [r7, #14]
 800724c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007250:	d804      	bhi.n	800725c <tcp_recved+0x54>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007256:	89fa      	ldrh	r2, [r7, #14]
 8007258:	429a      	cmp	r2, r3
 800725a:	d204      	bcs.n	8007266 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007262:	851a      	strh	r2, [r3, #40]	; 0x28
 8007264:	e002      	b.n	800726c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	89fa      	ldrh	r2, [r7, #14]
 800726a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff ff71 	bl	8007154 <tcp_update_rcv_ann_wnd>
 8007272:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800727a:	d309      	bcc.n	8007290 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8b5b      	ldrh	r3, [r3, #26]
 8007280:	f043 0302 	orr.w	r3, r3, #2
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f004 fbc8 	bl	800ba20 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	08011798 	.word	0x08011798
 800729c:	08011a34 	.word	0x08011a34
 80072a0:	080117dc 	.word	0x080117dc
 80072a4:	08011a4c 	.word	0x08011a4c

080072a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80072b2:	4b1e      	ldr	r3, [pc, #120]	; (800732c <tcp_new_port+0x84>)
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	4b1c      	ldr	r3, [pc, #112]	; (800732c <tcp_new_port+0x84>)
 80072bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80072be:	4b1b      	ldr	r3, [pc, #108]	; (800732c <tcp_new_port+0x84>)
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d103      	bne.n	80072d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80072ca:	4b18      	ldr	r3, [pc, #96]	; (800732c <tcp_new_port+0x84>)
 80072cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80072d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80072d2:	2300      	movs	r3, #0
 80072d4:	71fb      	strb	r3, [r7, #7]
 80072d6:	e01e      	b.n	8007316 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	4a15      	ldr	r2, [pc, #84]	; (8007330 <tcp_new_port+0x88>)
 80072dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	e011      	b.n	800730a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	8ada      	ldrh	r2, [r3, #22]
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <tcp_new_port+0x84>)
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d108      	bne.n	8007304 <tcp_new_port+0x5c>
        n++;
 80072f2:	88bb      	ldrh	r3, [r7, #4]
 80072f4:	3301      	adds	r3, #1
 80072f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80072f8:	88bb      	ldrh	r3, [r7, #4]
 80072fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072fe:	d3d8      	bcc.n	80072b2 <tcp_new_port+0xa>
          return 0;
 8007300:	2300      	movs	r3, #0
 8007302:	e00d      	b.n	8007320 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1ea      	bne.n	80072e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	3301      	adds	r3, #1
 8007314:	71fb      	strb	r3, [r7, #7]
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d9dd      	bls.n	80072d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <tcp_new_port+0x84>)
 800731e:	881b      	ldrh	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	2000001a 	.word	0x2000001a
 8007330:	08014794 	.word	0x08014794

08007334 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007334:	b5b0      	push	{r4, r5, r7, lr}
 8007336:	b090      	sub	sp, #64	; 0x40
 8007338:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007340:	4b94      	ldr	r3, [pc, #592]	; (8007594 <tcp_slowtmr+0x260>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a93      	ldr	r2, [pc, #588]	; (8007594 <tcp_slowtmr+0x260>)
 8007348:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800734a:	4b93      	ldr	r3, [pc, #588]	; (8007598 <tcp_slowtmr+0x264>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	3301      	adds	r3, #1
 8007350:	b2da      	uxtb	r2, r3
 8007352:	4b91      	ldr	r3, [pc, #580]	; (8007598 <tcp_slowtmr+0x264>)
 8007354:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800735a:	4b90      	ldr	r3, [pc, #576]	; (800759c <tcp_slowtmr+0x268>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007360:	e29f      	b.n	80078a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	7d1b      	ldrb	r3, [r3, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <tcp_slowtmr+0x44>
 800736a:	4b8d      	ldr	r3, [pc, #564]	; (80075a0 <tcp_slowtmr+0x26c>)
 800736c:	f240 42be 	movw	r2, #1214	; 0x4be
 8007370:	498c      	ldr	r1, [pc, #560]	; (80075a4 <tcp_slowtmr+0x270>)
 8007372:	488d      	ldr	r0, [pc, #564]	; (80075a8 <tcp_slowtmr+0x274>)
 8007374:	f008 f8f0 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	7d1b      	ldrb	r3, [r3, #20]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <tcp_slowtmr+0x5a>
 8007380:	4b87      	ldr	r3, [pc, #540]	; (80075a0 <tcp_slowtmr+0x26c>)
 8007382:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007386:	4989      	ldr	r1, [pc, #548]	; (80075ac <tcp_slowtmr+0x278>)
 8007388:	4887      	ldr	r0, [pc, #540]	; (80075a8 <tcp_slowtmr+0x274>)
 800738a:	f008 f8e5 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	7d1b      	ldrb	r3, [r3, #20]
 8007392:	2b0a      	cmp	r3, #10
 8007394:	d106      	bne.n	80073a4 <tcp_slowtmr+0x70>
 8007396:	4b82      	ldr	r3, [pc, #520]	; (80075a0 <tcp_slowtmr+0x26c>)
 8007398:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800739c:	4984      	ldr	r1, [pc, #528]	; (80075b0 <tcp_slowtmr+0x27c>)
 800739e:	4882      	ldr	r0, [pc, #520]	; (80075a8 <tcp_slowtmr+0x274>)
 80073a0:	f008 f8da 	bl	800f558 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	7f9a      	ldrb	r2, [r3, #30]
 80073a8:	4b7b      	ldr	r3, [pc, #492]	; (8007598 <tcp_slowtmr+0x264>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d105      	bne.n	80073bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80073ba:	e272      	b.n	80078a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80073bc:	4b76      	ldr	r3, [pc, #472]	; (8007598 <tcp_slowtmr+0x264>)
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	7d1b      	ldrb	r3, [r3, #20]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d10a      	bne.n	80073ee <tcp_slowtmr+0xba>
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d905      	bls.n	80073ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80073e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e6:	3301      	adds	r3, #1
 80073e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073ec:	e11e      	b.n	800762c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073f4:	2b0b      	cmp	r3, #11
 80073f6:	d905      	bls.n	8007404 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80073f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073fc:	3301      	adds	r3, #1
 80073fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007402:	e113      	b.n	800762c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800740a:	2b00      	cmp	r3, #0
 800740c:	d075      	beq.n	80074fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	2b00      	cmp	r3, #0
 8007414:	d006      	beq.n	8007424 <tcp_slowtmr+0xf0>
 8007416:	4b62      	ldr	r3, [pc, #392]	; (80075a0 <tcp_slowtmr+0x26c>)
 8007418:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800741c:	4965      	ldr	r1, [pc, #404]	; (80075b4 <tcp_slowtmr+0x280>)
 800741e:	4862      	ldr	r0, [pc, #392]	; (80075a8 <tcp_slowtmr+0x274>)
 8007420:	f008 f89a 	bl	800f558 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <tcp_slowtmr+0x106>
 800742c:	4b5c      	ldr	r3, [pc, #368]	; (80075a0 <tcp_slowtmr+0x26c>)
 800742e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007432:	4961      	ldr	r1, [pc, #388]	; (80075b8 <tcp_slowtmr+0x284>)
 8007434:	485c      	ldr	r0, [pc, #368]	; (80075a8 <tcp_slowtmr+0x274>)
 8007436:	f008 f88f 	bl	800f558 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007440:	2b0b      	cmp	r3, #11
 8007442:	d905      	bls.n	8007450 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007448:	3301      	adds	r3, #1
 800744a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800744e:	e0ed      	b.n	800762c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007456:	3b01      	subs	r3, #1
 8007458:	4a58      	ldr	r2, [pc, #352]	; (80075bc <tcp_slowtmr+0x288>)
 800745a:	5cd3      	ldrb	r3, [r2, r3]
 800745c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007464:	7c7a      	ldrb	r2, [r7, #17]
 8007466:	429a      	cmp	r2, r3
 8007468:	d907      	bls.n	800747a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007470:	3301      	adds	r3, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007480:	7c7a      	ldrb	r2, [r7, #17]
 8007482:	429a      	cmp	r2, r3
 8007484:	f200 80d2 	bhi.w	800762c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007488:	2301      	movs	r3, #1
 800748a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007492:	2b00      	cmp	r3, #0
 8007494:	d108      	bne.n	80074a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007498:	f005 f96a 	bl	800c770 <tcp_zero_window_probe>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d014      	beq.n	80074cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80074a2:	2300      	movs	r3, #0
 80074a4:	623b      	str	r3, [r7, #32]
 80074a6:	e011      	b.n	80074cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074ae:	4619      	mov	r1, r3
 80074b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074b2:	f004 f82f 	bl	800b514 <tcp_split_unsent_seg>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d107      	bne.n	80074cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80074bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074be:	f004 faaf 	bl	800ba20 <tcp_output>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80ac 	beq.w	800762c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80074e2:	2b06      	cmp	r3, #6
 80074e4:	f200 80a2 	bhi.w	800762c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80074ee:	3301      	adds	r3, #1
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80074f8:	e098      	b.n	800762c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	db0f      	blt.n	8007524 <tcp_slowtmr+0x1f0>
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800750a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800750e:	4293      	cmp	r3, r2
 8007510:	d008      	beq.n	8007524 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007518:	b29b      	uxth	r3, r3
 800751a:	3301      	adds	r3, #1
 800751c:	b29b      	uxth	r3, r3
 800751e:	b21a      	sxth	r2, r3
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007530:	429a      	cmp	r2, r3
 8007532:	db7b      	blt.n	800762c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007536:	f004 fd65 	bl	800c004 <tcp_rexmit_rto_prepare>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <tcp_slowtmr+0x21c>
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007544:	2b00      	cmp	r3, #0
 8007546:	d171      	bne.n	800762c <tcp_slowtmr+0x2f8>
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d06d      	beq.n	800762c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	7d1b      	ldrb	r3, [r3, #20]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d03a      	beq.n	80075ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800755e:	2b0c      	cmp	r3, #12
 8007560:	bf28      	it	cs
 8007562:	230c      	movcs	r3, #12
 8007564:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800756c:	10db      	asrs	r3, r3, #3
 800756e:	b21b      	sxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007578:	4413      	add	r3, r2
 800757a:	7efa      	ldrb	r2, [r7, #27]
 800757c:	4910      	ldr	r1, [pc, #64]	; (80075c0 <tcp_slowtmr+0x28c>)
 800757e:	5c8a      	ldrb	r2, [r1, r2]
 8007580:	4093      	lsls	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800758a:	4293      	cmp	r3, r2
 800758c:	dc1a      	bgt.n	80075c4 <tcp_slowtmr+0x290>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	b21a      	sxth	r2, r3
 8007592:	e019      	b.n	80075c8 <tcp_slowtmr+0x294>
 8007594:	20008edc 	.word	0x20008edc
 8007598:	20000536 	.word	0x20000536
 800759c:	20008ed8 	.word	0x20008ed8
 80075a0:	08011798 	.word	0x08011798
 80075a4:	08011adc 	.word	0x08011adc
 80075a8:	080117dc 	.word	0x080117dc
 80075ac:	08011b08 	.word	0x08011b08
 80075b0:	08011b34 	.word	0x08011b34
 80075b4:	08011b64 	.word	0x08011b64
 80075b8:	08011b98 	.word	0x08011b98
 80075bc:	0801478c 	.word	0x0801478c
 80075c0:	0801477c 	.word	0x0801477c
 80075c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2200      	movs	r2, #0
 80075d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80075e0:	4293      	cmp	r3, r2
 80075e2:	bf28      	it	cs
 80075e4:	4613      	movcs	r3, r2
 80075e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80075e8:	8a7b      	ldrh	r3, [r7, #18]
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	b29b      	uxth	r3, r3
 8007602:	429a      	cmp	r2, r3
 8007604:	d206      	bcs.n	8007614 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	2200      	movs	r2, #0
 8007622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007628:	f004 fd5c 	bl	800c0e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	7d1b      	ldrb	r3, [r3, #20]
 8007630:	2b06      	cmp	r3, #6
 8007632:	d111      	bne.n	8007658 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	8b5b      	ldrh	r3, [r3, #26]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007640:	4b9d      	ldr	r3, [pc, #628]	; (80078b8 <tcp_slowtmr+0x584>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b28      	cmp	r3, #40	; 0x28
 800764c:	d904      	bls.n	8007658 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800764e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007652:	3301      	adds	r3, #1
 8007654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	7a5b      	ldrb	r3, [r3, #9]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d04c      	beq.n	80076fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007668:	2b04      	cmp	r3, #4
 800766a:	d003      	beq.n	8007674 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007670:	2b07      	cmp	r3, #7
 8007672:	d144      	bne.n	80076fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007674:	4b90      	ldr	r3, [pc, #576]	; (80078b8 <tcp_slowtmr+0x584>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007684:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007688:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800768c:	498b      	ldr	r1, [pc, #556]	; (80078bc <tcp_slowtmr+0x588>)
 800768e:	fba1 1303 	umull	r1, r3, r1, r3
 8007692:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007694:	429a      	cmp	r2, r3
 8007696:	d90a      	bls.n	80076ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800769c:	3301      	adds	r3, #1
 800769e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80076a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076a6:	3301      	adds	r3, #1
 80076a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076ac:	e027      	b.n	80076fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076ae:	4b82      	ldr	r3, [pc, #520]	; (80078b8 <tcp_slowtmr+0x584>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80076c4:	4618      	mov	r0, r3
 80076c6:	4b7e      	ldr	r3, [pc, #504]	; (80078c0 <tcp_slowtmr+0x58c>)
 80076c8:	fb03 f300 	mul.w	r3, r3, r0
 80076cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80076ce:	497b      	ldr	r1, [pc, #492]	; (80078bc <tcp_slowtmr+0x588>)
 80076d0:	fba1 1303 	umull	r1, r3, r1, r3
 80076d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d911      	bls.n	80076fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80076da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076dc:	f005 f808 	bl	800c6f0 <tcp_keepalive>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80076e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80076f4:	3301      	adds	r3, #1
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007702:	2b00      	cmp	r3, #0
 8007704:	d011      	beq.n	800772a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007706:	4b6c      	ldr	r3, [pc, #432]	; (80078b8 <tcp_slowtmr+0x584>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007716:	4619      	mov	r1, r3
 8007718:	460b      	mov	r3, r1
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	440b      	add	r3, r1
 800771e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007720:	429a      	cmp	r2, r3
 8007722:	d302      	bcc.n	800772a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007726:	f000 fec7 	bl	80084b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	7d1b      	ldrb	r3, [r3, #20]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d10b      	bne.n	800774a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007732:	4b61      	ldr	r3, [pc, #388]	; (80078b8 <tcp_slowtmr+0x584>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b28      	cmp	r3, #40	; 0x28
 800773e:	d904      	bls.n	800774a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007744:	3301      	adds	r3, #1
 8007746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	7d1b      	ldrb	r3, [r3, #20]
 800774e:	2b09      	cmp	r3, #9
 8007750:	d10b      	bne.n	800776a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007752:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <tcp_slowtmr+0x584>)
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2bf0      	cmp	r3, #240	; 0xf0
 800775e:	d904      	bls.n	800776a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007764:	3301      	adds	r3, #1
 8007766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800776a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800776e:	2b00      	cmp	r3, #0
 8007770:	d060      	beq.n	8007834 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007778:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800777a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800777c:	f000 fce8 	bl	8008150 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d010      	beq.n	80077a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007786:	4b4f      	ldr	r3, [pc, #316]	; (80078c4 <tcp_slowtmr+0x590>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778c:	429a      	cmp	r2, r3
 800778e:	d106      	bne.n	800779e <tcp_slowtmr+0x46a>
 8007790:	4b4d      	ldr	r3, [pc, #308]	; (80078c8 <tcp_slowtmr+0x594>)
 8007792:	f240 526d 	movw	r2, #1389	; 0x56d
 8007796:	494d      	ldr	r1, [pc, #308]	; (80078cc <tcp_slowtmr+0x598>)
 8007798:	484d      	ldr	r0, [pc, #308]	; (80078d0 <tcp_slowtmr+0x59c>)
 800779a:	f007 fedd 	bl	800f558 <iprintf>
        prev->next = pcb->next;
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	e00f      	b.n	80077c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80077a8:	4b46      	ldr	r3, [pc, #280]	; (80078c4 <tcp_slowtmr+0x590>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d006      	beq.n	80077c0 <tcp_slowtmr+0x48c>
 80077b2:	4b45      	ldr	r3, [pc, #276]	; (80078c8 <tcp_slowtmr+0x594>)
 80077b4:	f240 5271 	movw	r2, #1393	; 0x571
 80077b8:	4946      	ldr	r1, [pc, #280]	; (80078d4 <tcp_slowtmr+0x5a0>)
 80077ba:	4845      	ldr	r0, [pc, #276]	; (80078d0 <tcp_slowtmr+0x59c>)
 80077bc:	f007 fecc 	bl	800f558 <iprintf>
        tcp_active_pcbs = pcb->next;
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	4a3f      	ldr	r2, [pc, #252]	; (80078c4 <tcp_slowtmr+0x590>)
 80077c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80077c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d013      	beq.n	80077f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80077d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	3304      	adds	r3, #4
 80077de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e0:	8ad2      	ldrh	r2, [r2, #22]
 80077e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e4:	8b09      	ldrh	r1, [r1, #24]
 80077e6:	9102      	str	r1, [sp, #8]
 80077e8:	9201      	str	r2, [sp, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	462b      	mov	r3, r5
 80077ee:	4622      	mov	r2, r4
 80077f0:	4601      	mov	r1, r0
 80077f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f4:	f004 fec8 	bl	800c588 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80077f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	7d1b      	ldrb	r3, [r3, #20]
 8007802:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800780e:	6838      	ldr	r0, [r7, #0]
 8007810:	f7ff f838 	bl	8006884 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007814:	4b30      	ldr	r3, [pc, #192]	; (80078d8 <tcp_slowtmr+0x5a4>)
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <tcp_slowtmr+0x4f6>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f06f 010c 	mvn.w	r1, #12
 8007826:	68b8      	ldr	r0, [r7, #8]
 8007828:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800782a:	4b2b      	ldr	r3, [pc, #172]	; (80078d8 <tcp_slowtmr+0x5a4>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d037      	beq.n	80078a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007832:	e590      	b.n	8007356 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	7f1b      	ldrb	r3, [r3, #28]
 8007842:	3301      	adds	r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	7f1a      	ldrb	r2, [r3, #28]
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	7f5b      	ldrb	r3, [r3, #29]
 8007852:	429a      	cmp	r2, r3
 8007854:	d325      	bcc.n	80078a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	2200      	movs	r2, #0
 800785a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800785c:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <tcp_slowtmr+0x5a4>)
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <tcp_slowtmr+0x550>
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007874:	6912      	ldr	r2, [r2, #16]
 8007876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	4603      	mov	r3, r0
 800787e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007882:	e002      	b.n	800788a <tcp_slowtmr+0x556>
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800788a:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <tcp_slowtmr+0x5a4>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d000      	beq.n	8007894 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007892:	e560      	b.n	8007356 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007894:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800789c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789e:	f004 f8bf 	bl	800ba20 <tcp_output>
  while (pcb != NULL) {
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f47f ad5c 	bne.w	8007362 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <tcp_slowtmr+0x5a8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80078b4:	e067      	b.n	8007986 <tcp_slowtmr+0x652>
 80078b6:	bf00      	nop
 80078b8:	20008edc 	.word	0x20008edc
 80078bc:	10624dd3 	.word	0x10624dd3
 80078c0:	000124f8 	.word	0x000124f8
 80078c4:	20008ed8 	.word	0x20008ed8
 80078c8:	08011798 	.word	0x08011798
 80078cc:	08011bd0 	.word	0x08011bd0
 80078d0:	080117dc 	.word	0x080117dc
 80078d4:	08011bfc 	.word	0x08011bfc
 80078d8:	20008ed4 	.word	0x20008ed4
 80078dc:	20008ee8 	.word	0x20008ee8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	7d1b      	ldrb	r3, [r3, #20]
 80078e4:	2b0a      	cmp	r3, #10
 80078e6:	d006      	beq.n	80078f6 <tcp_slowtmr+0x5c2>
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <tcp_slowtmr+0x664>)
 80078ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80078ee:	492b      	ldr	r1, [pc, #172]	; (800799c <tcp_slowtmr+0x668>)
 80078f0:	482b      	ldr	r0, [pc, #172]	; (80079a0 <tcp_slowtmr+0x66c>)
 80078f2:	f007 fe31 	bl	800f558 <iprintf>
    pcb_remove = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80078fc:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <tcp_slowtmr+0x670>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2bf0      	cmp	r3, #240	; 0xf0
 8007908:	d904      	bls.n	8007914 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800790a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790e:	3301      	adds	r3, #1
 8007910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007918:	2b00      	cmp	r3, #0
 800791a:	d02f      	beq.n	800797c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800791c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800791e:	f000 fc17 	bl	8008150 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	2b00      	cmp	r3, #0
 8007926:	d010      	beq.n	800794a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007928:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <tcp_slowtmr+0x674>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800792e:	429a      	cmp	r2, r3
 8007930:	d106      	bne.n	8007940 <tcp_slowtmr+0x60c>
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <tcp_slowtmr+0x664>)
 8007934:	f240 52af 	movw	r2, #1455	; 0x5af
 8007938:	491c      	ldr	r1, [pc, #112]	; (80079ac <tcp_slowtmr+0x678>)
 800793a:	4819      	ldr	r0, [pc, #100]	; (80079a0 <tcp_slowtmr+0x66c>)
 800793c:	f007 fe0c 	bl	800f558 <iprintf>
        prev->next = pcb->next;
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	60da      	str	r2, [r3, #12]
 8007948:	e00f      	b.n	800796a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800794a:	4b17      	ldr	r3, [pc, #92]	; (80079a8 <tcp_slowtmr+0x674>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d006      	beq.n	8007962 <tcp_slowtmr+0x62e>
 8007954:	4b10      	ldr	r3, [pc, #64]	; (8007998 <tcp_slowtmr+0x664>)
 8007956:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800795a:	4915      	ldr	r1, [pc, #84]	; (80079b0 <tcp_slowtmr+0x67c>)
 800795c:	4810      	ldr	r0, [pc, #64]	; (80079a0 <tcp_slowtmr+0x66c>)
 800795e:	f007 fdfb 	bl	800f558 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4a10      	ldr	r2, [pc, #64]	; (80079a8 <tcp_slowtmr+0x674>)
 8007968:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007974:	69f8      	ldr	r0, [r7, #28]
 8007976:	f7fe ff85 	bl	8006884 <tcp_free>
 800797a:	e004      	b.n	8007986 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1a9      	bne.n	80078e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	3730      	adds	r7, #48	; 0x30
 8007992:	46bd      	mov	sp, r7
 8007994:	bdb0      	pop	{r4, r5, r7, pc}
 8007996:	bf00      	nop
 8007998:	08011798 	.word	0x08011798
 800799c:	08011c28 	.word	0x08011c28
 80079a0:	080117dc 	.word	0x080117dc
 80079a4:	20008edc 	.word	0x20008edc
 80079a8:	20008ee8 	.word	0x20008ee8
 80079ac:	08011c58 	.word	0x08011c58
 80079b0:	08011c80 	.word	0x08011c80

080079b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80079ba:	4b2d      	ldr	r3, [pc, #180]	; (8007a70 <tcp_fasttmr+0xbc>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	3301      	adds	r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4b2b      	ldr	r3, [pc, #172]	; (8007a70 <tcp_fasttmr+0xbc>)
 80079c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80079c6:	4b2b      	ldr	r3, [pc, #172]	; (8007a74 <tcp_fasttmr+0xc0>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80079cc:	e048      	b.n	8007a60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7f9a      	ldrb	r2, [r3, #30]
 80079d2:	4b27      	ldr	r3, [pc, #156]	; (8007a70 <tcp_fasttmr+0xbc>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d03f      	beq.n	8007a5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80079da:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <tcp_fasttmr+0xbc>)
 80079dc:	781a      	ldrb	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8b5b      	ldrh	r3, [r3, #26]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d010      	beq.n	8007a10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8b5b      	ldrh	r3, [r3, #26]
 80079f2:	f043 0302 	orr.w	r3, r3, #2
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f004 f80f 	bl	800ba20 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	8b5b      	ldrh	r3, [r3, #26]
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8b5b      	ldrh	r3, [r3, #26]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8b5b      	ldrh	r3, [r3, #26]
 8007a20:	f023 0308 	bic.w	r3, r3, #8
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff f8be 	bl	8006bac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007a3e:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <tcp_fasttmr+0xc4>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f819 	bl	8007a7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <tcp_fasttmr+0xc4>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d000      	beq.n	8007a54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007a52:	e7b8      	b.n	80079c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	e002      	b.n	8007a60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1b3      	bne.n	80079ce <tcp_fasttmr+0x1a>
    }
  }
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000536 	.word	0x20000536
 8007a74:	20008ed8 	.word	0x20008ed8
 8007a78:	20008ed4 	.word	0x20008ed4

08007a7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <tcp_process_refused_data+0x22>
 8007a8a:	4b37      	ldr	r3, [pc, #220]	; (8007b68 <tcp_process_refused_data+0xec>)
 8007a8c:	f240 6209 	movw	r2, #1545	; 0x609
 8007a90:	4936      	ldr	r1, [pc, #216]	; (8007b6c <tcp_process_refused_data+0xf0>)
 8007a92:	4837      	ldr	r0, [pc, #220]	; (8007b70 <tcp_process_refused_data+0xf4>)
 8007a94:	f007 fd60 	bl	800f558 <iprintf>
 8007a98:	f06f 030f 	mvn.w	r3, #15
 8007a9c:	e060      	b.n	8007b60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aa2:	7b5b      	ldrb	r3, [r3, #13]
 8007aa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <tcp_process_refused_data+0x58>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6918      	ldr	r0, [r3, #16]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	47a0      	blx	r4
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]
 8007ad2:	e007      	b.n	8007ae4 <tcp_process_refused_data+0x68>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	2000      	movs	r0, #0
 8007adc:	f000 f8c2 	bl	8007c64 <tcp_recv_null>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d12a      	bne.n	8007b42 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d033      	beq.n	8007b5e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007afa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007afe:	d005      	beq.n	8007b0c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b04:	3301      	adds	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <tcp_process_refused_data+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6918      	ldr	r0, [r3, #16]
 8007b20:	2300      	movs	r3, #0
 8007b22:	2200      	movs	r2, #0
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	47a0      	blx	r4
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
 8007b2c:	e001      	b.n	8007b32 <tcp_process_refused_data+0xb6>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b36:	f113 0f0d 	cmn.w	r3, #13
 8007b3a:	d110      	bne.n	8007b5e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007b3c:	f06f 030c 	mvn.w	r3, #12
 8007b40:	e00e      	b.n	8007b60 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b46:	f113 0f0d 	cmn.w	r3, #13
 8007b4a:	d102      	bne.n	8007b52 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007b4c:	f06f 030c 	mvn.w	r3, #12
 8007b50:	e006      	b.n	8007b60 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007b58:	f06f 0304 	mvn.w	r3, #4
 8007b5c:	e000      	b.n	8007b60 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}
 8007b68:	08011798 	.word	0x08011798
 8007b6c:	08011ca8 	.word	0x08011ca8
 8007b70:	080117dc 	.word	0x080117dc

08007b74 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007b7c:	e007      	b.n	8007b8e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f80a 	bl	8007b9e <tcp_seg_free>
    seg = next;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f4      	bne.n	8007b7e <tcp_segs_free+0xa>
  }
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00c      	beq.n	8007bc6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fbc3 	bl	8006344 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	2003      	movs	r0, #3
 8007bc2:	f7fd fdad 	bl	8005720 <memp_free>
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <tcp_setprio+0x22>
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <tcp_setprio+0x30>)
 8007be4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007be8:	4906      	ldr	r1, [pc, #24]	; (8007c04 <tcp_setprio+0x34>)
 8007bea:	4807      	ldr	r0, [pc, #28]	; (8007c08 <tcp_setprio+0x38>)
 8007bec:	f007 fcb4 	bl	800f558 <iprintf>
 8007bf0:	e002      	b.n	8007bf8 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	755a      	strb	r2, [r3, #21]
}
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	08011798 	.word	0x08011798
 8007c04:	08011cd0 	.word	0x08011cd0
 8007c08:	080117dc 	.word	0x080117dc

08007c0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <tcp_seg_copy+0x1c>
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <tcp_seg_copy+0x4c>)
 8007c1c:	f240 6282 	movw	r2, #1666	; 0x682
 8007c20:	490e      	ldr	r1, [pc, #56]	; (8007c5c <tcp_seg_copy+0x50>)
 8007c22:	480f      	ldr	r0, [pc, #60]	; (8007c60 <tcp_seg_copy+0x54>)
 8007c24:	f007 fc98 	bl	800f558 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007c28:	2003      	movs	r0, #3
 8007c2a:	f7fd fd2d 	bl	8005688 <memp_malloc>
 8007c2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <tcp_seg_copy+0x2e>
    return NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e00a      	b.n	8007c50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f007 fc5a 	bl	800f4f8 <memcpy>
  pbuf_ref(cseg->p);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fc1b 	bl	8006484 <pbuf_ref>
  return cseg;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	08011798 	.word	0x08011798
 8007c5c:	08011cec 	.word	0x08011cec
 8007c60:	080117dc 	.word	0x080117dc

08007c64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <tcp_recv_null+0x28>
 8007c78:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <tcp_recv_null+0x60>)
 8007c7a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007c7e:	4912      	ldr	r1, [pc, #72]	; (8007cc8 <tcp_recv_null+0x64>)
 8007c80:	4812      	ldr	r0, [pc, #72]	; (8007ccc <tcp_recv_null+0x68>)
 8007c82:	f007 fc69 	bl	800f558 <iprintf>
 8007c86:	f06f 030f 	mvn.w	r3, #15
 8007c8a:	e016      	b.n	8007cba <tcp_recv_null+0x56>

  if (p != NULL) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	891b      	ldrh	r3, [r3, #8]
 8007c96:	4619      	mov	r1, r3
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f7ff fab5 	bl	8007208 <tcp_recved>
    pbuf_free(p);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe fb50 	bl	8006344 <pbuf_free>
 8007ca4:	e008      	b.n	8007cb8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007cae:	68b8      	ldr	r0, [r7, #8]
 8007cb0:	f7fe ffe6 	bl	8006c80 <tcp_close>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	e000      	b.n	8007cba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	08011798 	.word	0x08011798
 8007cc8:	08011d08 	.word	0x08011d08
 8007ccc:	080117dc 	.word	0x080117dc

08007cd0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	db01      	blt.n	8007ce6 <tcp_kill_prio+0x16>
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	e000      	b.n	8007ce8 <tcp_kill_prio+0x18>
 8007ce6:	237f      	movs	r3, #127	; 0x7f
 8007ce8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007cea:	7afb      	ldrb	r3, [r7, #11]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d034      	beq.n	8007d5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cfe:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <tcp_kill_prio+0x94>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	e01f      	b.n	8007d46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	7d5b      	ldrb	r3, [r3, #21]
 8007d0a:	7afa      	ldrb	r2, [r7, #11]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d80c      	bhi.n	8007d2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007d14:	7afa      	ldrb	r2, [r7, #11]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d112      	bne.n	8007d40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <tcp_kill_prio+0x98>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d80a      	bhi.n	8007d40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <tcp_kill_prio+0x98>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	7d5b      	ldrb	r3, [r3, #21]
 8007d3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1dc      	bne.n	8007d06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d004      	beq.n	8007d5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007d52:	6938      	ldr	r0, [r7, #16]
 8007d54:	f7ff f87e 	bl	8006e54 <tcp_abort>
 8007d58:	e000      	b.n	8007d5c <tcp_kill_prio+0x8c>
    return;
 8007d5a:	bf00      	nop
  }
}
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20008ed8 	.word	0x20008ed8
 8007d68:	20008edc 	.word	0x20008edc

08007d6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d009      	beq.n	8007d90 <tcp_kill_state+0x24>
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d006      	beq.n	8007d90 <tcp_kill_state+0x24>
 8007d82:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <tcp_kill_state+0x80>)
 8007d84:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007d88:	4919      	ldr	r1, [pc, #100]	; (8007df0 <tcp_kill_state+0x84>)
 8007d8a:	481a      	ldr	r0, [pc, #104]	; (8007df4 <tcp_kill_state+0x88>)
 8007d8c:	f007 fbe4 	bl	800f558 <iprintf>

  inactivity = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d98:	4b17      	ldr	r3, [pc, #92]	; (8007df8 <tcp_kill_state+0x8c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	e017      	b.n	8007dd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	7d1b      	ldrb	r3, [r3, #20]
 8007da4:	79fa      	ldrb	r2, [r7, #7]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d10f      	bne.n	8007dca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <tcp_kill_state+0x90>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d807      	bhi.n	8007dca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <tcp_kill_state+0x90>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e4      	bne.n	8007da0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6938      	ldr	r0, [r7, #16]
 8007de0:	f7fe ff7a 	bl	8006cd8 <tcp_abandon>
  }
}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	08011798 	.word	0x08011798
 8007df0:	08011d24 	.word	0x08011d24
 8007df4:	080117dc 	.word	0x080117dc
 8007df8:	20008ed8 	.word	0x20008ed8
 8007dfc:	20008edc 	.word	0x20008edc

08007e00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e0e:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <tcp_kill_timewait+0x58>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e012      	b.n	8007e3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <tcp_kill_timewait+0x5c>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d807      	bhi.n	8007e36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007e26:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <tcp_kill_timewait+0x5c>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e9      	bne.n	8007e16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	f7ff f803 	bl	8006e54 <tcp_abort>
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20008ee8 	.word	0x20008ee8
 8007e5c:	20008edc 	.word	0x20008edc

08007e60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007e66:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <tcp_handle_closepend+0x48>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007e6c:	e014      	b.n	8007e98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8b5b      	ldrh	r3, [r3, #26]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8b5b      	ldrh	r3, [r3, #26]
 8007e84:	f023 0308 	bic.w	r3, r3, #8
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7fe fe8c 	bl	8006bac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e7      	bne.n	8007e6e <tcp_handle_closepend+0xe>
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20008ed8 	.word	0x20008ed8

08007eac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	f7fd fbe6 	bl	8005688 <memp_malloc>
 8007ebc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d126      	bne.n	8007f12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007ec4:	f7ff ffcc 	bl	8007e60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007ec8:	f7ff ff9a 	bl	8007e00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ecc:	2001      	movs	r0, #1
 8007ece:	f7fd fbdb 	bl	8005688 <memp_malloc>
 8007ed2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d11b      	bne.n	8007f12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007eda:	2009      	movs	r0, #9
 8007edc:	f7ff ff46 	bl	8007d6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f7fd fbd1 	bl	8005688 <memp_malloc>
 8007ee6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d111      	bne.n	8007f12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007eee:	2008      	movs	r0, #8
 8007ef0:	f7ff ff3c 	bl	8007d6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	f7fd fbc7 	bl	8005688 <memp_malloc>
 8007efa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d107      	bne.n	8007f12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff fee3 	bl	8007cd0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	f7fd fbbc 	bl	8005688 <memp_malloc>
 8007f10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d03f      	beq.n	8007f98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007f18:	229c      	movs	r2, #156	; 0x9c
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f007 fb13 	bl	800f548 <memset>
    pcb->prio = prio;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	79fa      	ldrb	r2, [r7, #7]
 8007f26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007f2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007f38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007f4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2206      	movs	r2, #6
 8007f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2206      	movs	r2, #6
 8007f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <tcp_alloc+0xf8>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <tcp_alloc+0xfc>)
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007f84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4a08      	ldr	r2, [pc, #32]	; (8007fac <tcp_alloc+0x100>)
 8007f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4a07      	ldr	r2, [pc, #28]	; (8007fb0 <tcp_alloc+0x104>)
 8007f94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007f98:	68fb      	ldr	r3, [r7, #12]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20008edc 	.word	0x20008edc
 8007fa8:	20000536 	.word	0x20000536
 8007fac:	08007c65 	.word	0x08007c65
 8007fb0:	006ddd00 	.word	0x006ddd00

08007fb4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007fbe:	2040      	movs	r0, #64	; 0x40
 8007fc0:	f7ff ff74 	bl	8007eac <tcp_alloc>
 8007fc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	611a      	str	r2, [r3, #16]
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00e      	beq.n	8008022 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7d1b      	ldrb	r3, [r3, #20]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d106      	bne.n	800801a <tcp_recv+0x26>
 800800c:	4b07      	ldr	r3, [pc, #28]	; (800802c <tcp_recv+0x38>)
 800800e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008012:	4907      	ldr	r1, [pc, #28]	; (8008030 <tcp_recv+0x3c>)
 8008014:	4807      	ldr	r0, [pc, #28]	; (8008034 <tcp_recv+0x40>)
 8008016:	f007 fa9f 	bl	800f558 <iprintf>
    pcb->recv = recv;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	08011798 	.word	0x08011798
 8008030:	08011d34 	.word	0x08011d34
 8008034:	080117dc 	.word	0x080117dc

08008038 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00e      	beq.n	8008066 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7d1b      	ldrb	r3, [r3, #20]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d106      	bne.n	800805e <tcp_sent+0x26>
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <tcp_sent+0x38>)
 8008052:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008056:	4907      	ldr	r1, [pc, #28]	; (8008074 <tcp_sent+0x3c>)
 8008058:	4807      	ldr	r0, [pc, #28]	; (8008078 <tcp_sent+0x40>)
 800805a:	f007 fa7d 	bl	800f558 <iprintf>
    pcb->sent = sent;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	08011798 	.word	0x08011798
 8008074:	08011d5c 	.word	0x08011d5c
 8008078:	080117dc 	.word	0x080117dc

0800807c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00e      	beq.n	80080aa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	7d1b      	ldrb	r3, [r3, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d106      	bne.n	80080a2 <tcp_err+0x26>
 8008094:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <tcp_err+0x38>)
 8008096:	f640 020d 	movw	r2, #2061	; 0x80d
 800809a:	4907      	ldr	r1, [pc, #28]	; (80080b8 <tcp_err+0x3c>)
 800809c:	4807      	ldr	r0, [pc, #28]	; (80080bc <tcp_err+0x40>)
 800809e:	f007 fa5b 	bl	800f558 <iprintf>
    pcb->errf = err;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	08011798 	.word	0x08011798
 80080b8:	08011d84 	.word	0x08011d84
 80080bc:	080117dc 	.word	0x080117dc

080080c0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <tcp_accept+0x22>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7d1b      	ldrb	r3, [r3, #20]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d104      	bne.n	80080e2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	619a      	str	r2, [r3, #24]
  }
}
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d107      	bne.n	8008114 <tcp_poll+0x24>
 8008104:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <tcp_poll+0x50>)
 8008106:	f640 023d 	movw	r2, #2109	; 0x83d
 800810a:	490e      	ldr	r1, [pc, #56]	; (8008144 <tcp_poll+0x54>)
 800810c:	480e      	ldr	r0, [pc, #56]	; (8008148 <tcp_poll+0x58>)
 800810e:	f007 fa23 	bl	800f558 <iprintf>
 8008112:	e011      	b.n	8008138 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	7d1b      	ldrb	r3, [r3, #20]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d106      	bne.n	800812a <tcp_poll+0x3a>
 800811c:	4b08      	ldr	r3, [pc, #32]	; (8008140 <tcp_poll+0x50>)
 800811e:	f640 023e 	movw	r2, #2110	; 0x83e
 8008122:	490a      	ldr	r1, [pc, #40]	; (800814c <tcp_poll+0x5c>)
 8008124:	4808      	ldr	r0, [pc, #32]	; (8008148 <tcp_poll+0x58>)
 8008126:	f007 fa17 	bl	800f558 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	79fa      	ldrb	r2, [r7, #7]
 8008136:	775a      	strb	r2, [r3, #29]
}
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	08011798 	.word	0x08011798
 8008144:	08011dac 	.word	0x08011dac
 8008148:	080117dc 	.word	0x080117dc
 800814c:	08011dc4 	.word	0x08011dc4

08008150 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d107      	bne.n	800816e <tcp_pcb_purge+0x1e>
 800815e:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <tcp_pcb_purge+0x94>)
 8008160:	f640 0251 	movw	r2, #2129	; 0x851
 8008164:	4920      	ldr	r1, [pc, #128]	; (80081e8 <tcp_pcb_purge+0x98>)
 8008166:	4821      	ldr	r0, [pc, #132]	; (80081ec <tcp_pcb_purge+0x9c>)
 8008168:	f007 f9f6 	bl	800f558 <iprintf>
 800816c:	e037      	b.n	80081de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7d1b      	ldrb	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d033      	beq.n	80081de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800817a:	2b0a      	cmp	r3, #10
 800817c:	d02f      	beq.n	80081de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008182:	2b01      	cmp	r3, #1
 8008184:	d02b      	beq.n	80081de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe f8d6 	bl	8006344 <pbuf_free>
      pcb->refused_data = NULL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f986 	bl	80084b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fcdb 	bl	8007b74 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff fcd6 	bl	8007b74 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	08011798 	.word	0x08011798
 80081e8:	08011de4 	.word	0x08011de4
 80081ec:	080117dc 	.word	0x080117dc

080081f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <tcp_pcb_remove+0x1e>
 8008200:	4b3e      	ldr	r3, [pc, #248]	; (80082fc <tcp_pcb_remove+0x10c>)
 8008202:	f640 0283 	movw	r2, #2179	; 0x883
 8008206:	493e      	ldr	r1, [pc, #248]	; (8008300 <tcp_pcb_remove+0x110>)
 8008208:	483e      	ldr	r0, [pc, #248]	; (8008304 <tcp_pcb_remove+0x114>)
 800820a:	f007 f9a5 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d106      	bne.n	8008222 <tcp_pcb_remove+0x32>
 8008214:	4b39      	ldr	r3, [pc, #228]	; (80082fc <tcp_pcb_remove+0x10c>)
 8008216:	f640 0284 	movw	r2, #2180	; 0x884
 800821a:	493b      	ldr	r1, [pc, #236]	; (8008308 <tcp_pcb_remove+0x118>)
 800821c:	4839      	ldr	r0, [pc, #228]	; (8008304 <tcp_pcb_remove+0x114>)
 800821e:	f007 f99b 	bl	800f558 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d105      	bne.n	8008238 <tcp_pcb_remove+0x48>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e013      	b.n	8008260 <tcp_pcb_remove+0x70>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e00c      	b.n	800825a <tcp_pcb_remove+0x6a>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d104      	bne.n	8008254 <tcp_pcb_remove+0x64>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	e005      	b.n	8008260 <tcp_pcb_remove+0x70>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1ef      	bne.n	8008240 <tcp_pcb_remove+0x50>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008266:	6838      	ldr	r0, [r7, #0]
 8008268:	f7ff ff72 	bl	8008150 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	7d1b      	ldrb	r3, [r3, #20]
 8008270:	2b0a      	cmp	r3, #10
 8008272:	d013      	beq.n	800829c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008278:	2b01      	cmp	r3, #1
 800827a:	d00f      	beq.n	800829c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	8b5b      	ldrh	r3, [r3, #26]
 8008280:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008284:	2b00      	cmp	r3, #0
 8008286:	d009      	beq.n	800829c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	8b5b      	ldrh	r3, [r3, #26]
 800828c:	f043 0302 	orr.w	r3, r3, #2
 8008290:	b29a      	uxth	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008296:	6838      	ldr	r0, [r7, #0]
 8008298:	f003 fbc2 	bl	800ba20 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	7d1b      	ldrb	r3, [r3, #20]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d020      	beq.n	80082e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d006      	beq.n	80082ba <tcp_pcb_remove+0xca>
 80082ac:	4b13      	ldr	r3, [pc, #76]	; (80082fc <tcp_pcb_remove+0x10c>)
 80082ae:	f640 0293 	movw	r2, #2195	; 0x893
 80082b2:	4916      	ldr	r1, [pc, #88]	; (800830c <tcp_pcb_remove+0x11c>)
 80082b4:	4813      	ldr	r0, [pc, #76]	; (8008304 <tcp_pcb_remove+0x114>)
 80082b6:	f007 f94f 	bl	800f558 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d006      	beq.n	80082d0 <tcp_pcb_remove+0xe0>
 80082c2:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <tcp_pcb_remove+0x10c>)
 80082c4:	f640 0294 	movw	r2, #2196	; 0x894
 80082c8:	4911      	ldr	r1, [pc, #68]	; (8008310 <tcp_pcb_remove+0x120>)
 80082ca:	480e      	ldr	r0, [pc, #56]	; (8008304 <tcp_pcb_remove+0x114>)
 80082cc:	f007 f944 	bl	800f558 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d006      	beq.n	80082e6 <tcp_pcb_remove+0xf6>
 80082d8:	4b08      	ldr	r3, [pc, #32]	; (80082fc <tcp_pcb_remove+0x10c>)
 80082da:	f640 0296 	movw	r2, #2198	; 0x896
 80082de:	490d      	ldr	r1, [pc, #52]	; (8008314 <tcp_pcb_remove+0x124>)
 80082e0:	4808      	ldr	r0, [pc, #32]	; (8008304 <tcp_pcb_remove+0x114>)
 80082e2:	f007 f939 	bl	800f558 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80082f2:	bf00      	nop
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	08011798 	.word	0x08011798
 8008300:	08011e00 	.word	0x08011e00
 8008304:	080117dc 	.word	0x080117dc
 8008308:	08011e1c 	.word	0x08011e1c
 800830c:	08011e3c 	.word	0x08011e3c
 8008310:	08011e54 	.word	0x08011e54
 8008314:	08011e70 	.word	0x08011e70

08008318 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <tcp_next_iss+0x1c>
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <tcp_next_iss+0x38>)
 8008328:	f640 02af 	movw	r2, #2223	; 0x8af
 800832c:	4909      	ldr	r1, [pc, #36]	; (8008354 <tcp_next_iss+0x3c>)
 800832e:	480a      	ldr	r0, [pc, #40]	; (8008358 <tcp_next_iss+0x40>)
 8008330:	f007 f912 	bl	800f558 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <tcp_next_iss+0x44>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4b09      	ldr	r3, [pc, #36]	; (8008360 <tcp_next_iss+0x48>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4413      	add	r3, r2
 800833e:	4a07      	ldr	r2, [pc, #28]	; (800835c <tcp_next_iss+0x44>)
 8008340:	6013      	str	r3, [r2, #0]
  return iss;
 8008342:	4b06      	ldr	r3, [pc, #24]	; (800835c <tcp_next_iss+0x44>)
 8008344:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	08011798 	.word	0x08011798
 8008354:	08011e88 	.word	0x08011e88
 8008358:	080117dc 	.word	0x080117dc
 800835c:	2000001c 	.word	0x2000001c
 8008360:	20008edc 	.word	0x20008edc

08008364 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <tcp_eff_send_mss_netif+0x22>
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <tcp_eff_send_mss_netif+0x68>)
 800837a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800837e:	4914      	ldr	r1, [pc, #80]	; (80083d0 <tcp_eff_send_mss_netif+0x6c>)
 8008380:	4814      	ldr	r0, [pc, #80]	; (80083d4 <tcp_eff_send_mss_netif+0x70>)
 8008382:	f007 f8e9 	bl	800f558 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800838c:	89fb      	ldrh	r3, [r7, #14]
 800838e:	e019      	b.n	80083c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008394:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008396:	8afb      	ldrh	r3, [r7, #22]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d012      	beq.n	80083c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800839c:	2328      	movs	r3, #40	; 0x28
 800839e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80083a0:	8afa      	ldrh	r2, [r7, #22]
 80083a2:	8abb      	ldrh	r3, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d904      	bls.n	80083b2 <tcp_eff_send_mss_netif+0x4e>
 80083a8:	8afa      	ldrh	r2, [r7, #22]
 80083aa:	8abb      	ldrh	r3, [r7, #20]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	e000      	b.n	80083b4 <tcp_eff_send_mss_netif+0x50>
 80083b2:	2300      	movs	r3, #0
 80083b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80083b6:	8a7a      	ldrh	r2, [r7, #18]
 80083b8:	89fb      	ldrh	r3, [r7, #14]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bf28      	it	cs
 80083be:	4613      	movcs	r3, r2
 80083c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80083c2:	89fb      	ldrh	r3, [r7, #14]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	08011798 	.word	0x08011798
 80083d0:	08011ea4 	.word	0x08011ea4
 80083d4:	080117dc 	.word	0x080117dc

080083d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d119      	bne.n	8008420 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80083ec:	4b10      	ldr	r3, [pc, #64]	; (8008430 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80083ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80083f2:	4910      	ldr	r1, [pc, #64]	; (8008434 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80083f4:	4810      	ldr	r0, [pc, #64]	; (8008438 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80083f6:	f007 f8af 	bl	800f558 <iprintf>

  while (pcb != NULL) {
 80083fa:	e011      	b.n	8008420 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d108      	bne.n	800841a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7fe fd20 	bl	8006e54 <tcp_abort>
      pcb = next;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	e002      	b.n	8008420 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1ea      	bne.n	80083fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008426:	bf00      	nop
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	08011798 	.word	0x08011798
 8008434:	08011ecc 	.word	0x08011ecc
 8008438:	080117dc 	.word	0x080117dc

0800843c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02a      	beq.n	80084a2 <tcp_netif_ip_addr_changed+0x66>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d026      	beq.n	80084a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <tcp_netif_ip_addr_changed+0x70>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff ffbc 	bl	80083d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008460:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <tcp_netif_ip_addr_changed+0x74>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff ffb6 	bl	80083d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d017      	beq.n	80084a2 <tcp_netif_ip_addr_changed+0x66>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d013      	beq.n	80084a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <tcp_netif_ip_addr_changed+0x78>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e00c      	b.n	800849c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d103      	bne.n	8008496 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1ef      	bne.n	8008482 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20008ed8 	.word	0x20008ed8
 80084b0:	20008ee4 	.word	0x20008ee4
 80084b4:	20008ee0 	.word	0x20008ee0

080084b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fb51 	bl	8007b74 <tcp_segs_free>
    pcb->ooseq = NULL;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b08d      	sub	sp, #52	; 0x34
 80084e4:	af04      	add	r7, sp, #16
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <tcp_input+0x1c>
 80084f0:	4b9b      	ldr	r3, [pc, #620]	; (8008760 <tcp_input+0x280>)
 80084f2:	2283      	movs	r2, #131	; 0x83
 80084f4:	499b      	ldr	r1, [pc, #620]	; (8008764 <tcp_input+0x284>)
 80084f6:	489c      	ldr	r0, [pc, #624]	; (8008768 <tcp_input+0x288>)
 80084f8:	f007 f82e 	bl	800f558 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4a9a      	ldr	r2, [pc, #616]	; (800876c <tcp_input+0x28c>)
 8008502:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	895b      	ldrh	r3, [r3, #10]
 8008508:	2b13      	cmp	r3, #19
 800850a:	f240 83c4 	bls.w	8008c96 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800850e:	4b98      	ldr	r3, [pc, #608]	; (8008770 <tcp_input+0x290>)
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	4a97      	ldr	r2, [pc, #604]	; (8008770 <tcp_input+0x290>)
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f006 f86b 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 83ba 	bne.w	8008c9a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008526:	4b92      	ldr	r3, [pc, #584]	; (8008770 <tcp_input+0x290>)
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800852e:	2be0      	cmp	r3, #224	; 0xe0
 8008530:	f000 83b3 	beq.w	8008c9a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008534:	4b8d      	ldr	r3, [pc, #564]	; (800876c <tcp_input+0x28c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	899b      	ldrh	r3, [r3, #12]
 800853a:	b29b      	uxth	r3, r3
 800853c:	4618      	mov	r0, r3
 800853e:	f7fc fbe3 	bl	8004d08 <lwip_htons>
 8008542:	4603      	mov	r3, r0
 8008544:	0b1b      	lsrs	r3, r3, #12
 8008546:	b29b      	uxth	r3, r3
 8008548:	b2db      	uxtb	r3, r3
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800854e:	7cbb      	ldrb	r3, [r7, #18]
 8008550:	2b13      	cmp	r3, #19
 8008552:	f240 83a4 	bls.w	8008c9e <tcp_input+0x7be>
 8008556:	7cbb      	ldrb	r3, [r7, #18]
 8008558:	b29a      	uxth	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	891b      	ldrh	r3, [r3, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	f200 839d 	bhi.w	8008c9e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008564:	7cbb      	ldrb	r3, [r7, #18]
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b14      	subs	r3, #20
 800856a:	b29a      	uxth	r2, r3
 800856c:	4b81      	ldr	r3, [pc, #516]	; (8008774 <tcp_input+0x294>)
 800856e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008570:	4b81      	ldr	r3, [pc, #516]	; (8008778 <tcp_input+0x298>)
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	895a      	ldrh	r2, [r3, #10]
 800857a:	7cbb      	ldrb	r3, [r7, #18]
 800857c:	b29b      	uxth	r3, r3
 800857e:	429a      	cmp	r2, r3
 8008580:	d309      	bcc.n	8008596 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008582:	4b7c      	ldr	r3, [pc, #496]	; (8008774 <tcp_input+0x294>)
 8008584:	881a      	ldrh	r2, [r3, #0]
 8008586:	4b7d      	ldr	r3, [pc, #500]	; (800877c <tcp_input+0x29c>)
 8008588:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800858a:	7cbb      	ldrb	r3, [r7, #18]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fd fe52 	bl	8006238 <pbuf_remove_header>
 8008594:	e04e      	b.n	8008634 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <tcp_input+0xca>
 800859e:	4b70      	ldr	r3, [pc, #448]	; (8008760 <tcp_input+0x280>)
 80085a0:	22c2      	movs	r2, #194	; 0xc2
 80085a2:	4977      	ldr	r1, [pc, #476]	; (8008780 <tcp_input+0x2a0>)
 80085a4:	4870      	ldr	r0, [pc, #448]	; (8008768 <tcp_input+0x288>)
 80085a6:	f006 ffd7 	bl	800f558 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80085aa:	2114      	movs	r1, #20
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7fd fe43 	bl	8006238 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	895a      	ldrh	r2, [r3, #10]
 80085b6:	4b71      	ldr	r3, [pc, #452]	; (800877c <tcp_input+0x29c>)
 80085b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80085ba:	4b6e      	ldr	r3, [pc, #440]	; (8008774 <tcp_input+0x294>)
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	4b6f      	ldr	r3, [pc, #444]	; (800877c <tcp_input+0x29c>)
 80085c0:	881b      	ldrh	r3, [r3, #0]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80085c6:	4b6d      	ldr	r3, [pc, #436]	; (800877c <tcp_input+0x29c>)
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7fd fe33 	bl	8006238 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	895b      	ldrh	r3, [r3, #10]
 80085d8:	8a3a      	ldrh	r2, [r7, #16]
 80085da:	429a      	cmp	r2, r3
 80085dc:	f200 8361 	bhi.w	8008ca2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4a64      	ldr	r2, [pc, #400]	; (8008778 <tcp_input+0x298>)
 80085e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	8a3a      	ldrh	r2, [r7, #16]
 80085f0:	4611      	mov	r1, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fd fe20 	bl	8006238 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	891a      	ldrh	r2, [r3, #8]
 80085fc:	8a3b      	ldrh	r3, [r7, #16]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	895b      	ldrh	r3, [r3, #10]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d005      	beq.n	800861a <tcp_input+0x13a>
 800860e:	4b54      	ldr	r3, [pc, #336]	; (8008760 <tcp_input+0x280>)
 8008610:	22df      	movs	r2, #223	; 0xdf
 8008612:	495c      	ldr	r1, [pc, #368]	; (8008784 <tcp_input+0x2a4>)
 8008614:	4854      	ldr	r0, [pc, #336]	; (8008768 <tcp_input+0x288>)
 8008616:	f006 ff9f 	bl	800f558 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	891a      	ldrh	r2, [r3, #8]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	891b      	ldrh	r3, [r3, #8]
 8008624:	429a      	cmp	r2, r3
 8008626:	d005      	beq.n	8008634 <tcp_input+0x154>
 8008628:	4b4d      	ldr	r3, [pc, #308]	; (8008760 <tcp_input+0x280>)
 800862a:	22e0      	movs	r2, #224	; 0xe0
 800862c:	4956      	ldr	r1, [pc, #344]	; (8008788 <tcp_input+0x2a8>)
 800862e:	484e      	ldr	r0, [pc, #312]	; (8008768 <tcp_input+0x288>)
 8008630:	f006 ff92 	bl	800f558 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008634:	4b4d      	ldr	r3, [pc, #308]	; (800876c <tcp_input+0x28c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	4a4b      	ldr	r2, [pc, #300]	; (800876c <tcp_input+0x28c>)
 800863e:	6814      	ldr	r4, [r2, #0]
 8008640:	4618      	mov	r0, r3
 8008642:	f7fc fb61 	bl	8004d08 <lwip_htons>
 8008646:	4603      	mov	r3, r0
 8008648:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800864a:	4b48      	ldr	r3, [pc, #288]	; (800876c <tcp_input+0x28c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	885b      	ldrh	r3, [r3, #2]
 8008650:	b29b      	uxth	r3, r3
 8008652:	4a46      	ldr	r2, [pc, #280]	; (800876c <tcp_input+0x28c>)
 8008654:	6814      	ldr	r4, [r2, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f7fc fb56 	bl	8004d08 <lwip_htons>
 800865c:	4603      	mov	r3, r0
 800865e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008660:	4b42      	ldr	r3, [pc, #264]	; (800876c <tcp_input+0x28c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	4a41      	ldr	r2, [pc, #260]	; (800876c <tcp_input+0x28c>)
 8008668:	6814      	ldr	r4, [r2, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f7fc fb61 	bl	8004d32 <lwip_htonl>
 8008670:	4603      	mov	r3, r0
 8008672:	6063      	str	r3, [r4, #4]
 8008674:	6863      	ldr	r3, [r4, #4]
 8008676:	4a45      	ldr	r2, [pc, #276]	; (800878c <tcp_input+0x2ac>)
 8008678:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800867a:	4b3c      	ldr	r3, [pc, #240]	; (800876c <tcp_input+0x28c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	4a3a      	ldr	r2, [pc, #232]	; (800876c <tcp_input+0x28c>)
 8008682:	6814      	ldr	r4, [r2, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f7fc fb54 	bl	8004d32 <lwip_htonl>
 800868a:	4603      	mov	r3, r0
 800868c:	60a3      	str	r3, [r4, #8]
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	4a3f      	ldr	r2, [pc, #252]	; (8008790 <tcp_input+0x2b0>)
 8008692:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008694:	4b35      	ldr	r3, [pc, #212]	; (800876c <tcp_input+0x28c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	89db      	ldrh	r3, [r3, #14]
 800869a:	b29b      	uxth	r3, r3
 800869c:	4a33      	ldr	r2, [pc, #204]	; (800876c <tcp_input+0x28c>)
 800869e:	6814      	ldr	r4, [r2, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fc fb31 	bl	8004d08 <lwip_htons>
 80086a6:	4603      	mov	r3, r0
 80086a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80086aa:	4b30      	ldr	r3, [pc, #192]	; (800876c <tcp_input+0x28c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	899b      	ldrh	r3, [r3, #12]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fc fb28 	bl	8004d08 <lwip_htons>
 80086b8:	4603      	mov	r3, r0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	4b34      	ldr	r3, [pc, #208]	; (8008794 <tcp_input+0x2b4>)
 80086c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	891a      	ldrh	r2, [r3, #8]
 80086ca:	4b33      	ldr	r3, [pc, #204]	; (8008798 <tcp_input+0x2b8>)
 80086cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80086ce:	4b31      	ldr	r3, [pc, #196]	; (8008794 <tcp_input+0x2b4>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <tcp_input+0x214>
    tcplen++;
 80086da:	4b2f      	ldr	r3, [pc, #188]	; (8008798 <tcp_input+0x2b8>)
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	3301      	adds	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	4b2d      	ldr	r3, [pc, #180]	; (8008798 <tcp_input+0x2b8>)
 80086e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	891a      	ldrh	r2, [r3, #8]
 80086ea:	4b2b      	ldr	r3, [pc, #172]	; (8008798 <tcp_input+0x2b8>)
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	f200 82d9 	bhi.w	8008ca6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086f8:	4b28      	ldr	r3, [pc, #160]	; (800879c <tcp_input+0x2bc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	e09d      	b.n	800883c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	7d1b      	ldrb	r3, [r3, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d105      	bne.n	8008714 <tcp_input+0x234>
 8008708:	4b15      	ldr	r3, [pc, #84]	; (8008760 <tcp_input+0x280>)
 800870a:	22fb      	movs	r2, #251	; 0xfb
 800870c:	4924      	ldr	r1, [pc, #144]	; (80087a0 <tcp_input+0x2c0>)
 800870e:	4816      	ldr	r0, [pc, #88]	; (8008768 <tcp_input+0x288>)
 8008710:	f006 ff22 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	7d1b      	ldrb	r3, [r3, #20]
 8008718:	2b0a      	cmp	r3, #10
 800871a:	d105      	bne.n	8008728 <tcp_input+0x248>
 800871c:	4b10      	ldr	r3, [pc, #64]	; (8008760 <tcp_input+0x280>)
 800871e:	22fc      	movs	r2, #252	; 0xfc
 8008720:	4920      	ldr	r1, [pc, #128]	; (80087a4 <tcp_input+0x2c4>)
 8008722:	4811      	ldr	r0, [pc, #68]	; (8008768 <tcp_input+0x288>)
 8008724:	f006 ff18 	bl	800f558 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	7d1b      	ldrb	r3, [r3, #20]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d105      	bne.n	800873c <tcp_input+0x25c>
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <tcp_input+0x280>)
 8008732:	22fd      	movs	r2, #253	; 0xfd
 8008734:	491c      	ldr	r1, [pc, #112]	; (80087a8 <tcp_input+0x2c8>)
 8008736:	480c      	ldr	r0, [pc, #48]	; (8008768 <tcp_input+0x288>)
 8008738:	f006 ff0e 	bl	800f558 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	7a1b      	ldrb	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d033      	beq.n	80087ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	7a1a      	ldrb	r2, [r3, #8]
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <tcp_input+0x290>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008750:	3301      	adds	r3, #1
 8008752:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	d029      	beq.n	80087ac <tcp_input+0x2cc>
      prev = pcb;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	61bb      	str	r3, [r7, #24]
      continue;
 800875c:	e06b      	b.n	8008836 <tcp_input+0x356>
 800875e:	bf00      	nop
 8008760:	08011f00 	.word	0x08011f00
 8008764:	08011f34 	.word	0x08011f34
 8008768:	08011f4c 	.word	0x08011f4c
 800876c:	20000548 	.word	0x20000548
 8008770:	200037d4 	.word	0x200037d4
 8008774:	2000054c 	.word	0x2000054c
 8008778:	20000550 	.word	0x20000550
 800877c:	2000054e 	.word	0x2000054e
 8008780:	08011f74 	.word	0x08011f74
 8008784:	08011f84 	.word	0x08011f84
 8008788:	08011f90 	.word	0x08011f90
 800878c:	20000558 	.word	0x20000558
 8008790:	2000055c 	.word	0x2000055c
 8008794:	20000564 	.word	0x20000564
 8008798:	20000562 	.word	0x20000562
 800879c:	20008ed8 	.word	0x20008ed8
 80087a0:	08011fb0 	.word	0x08011fb0
 80087a4:	08011fd8 	.word	0x08011fd8
 80087a8:	08012004 	.word	0x08012004
    }

    if (pcb->remote_port == tcphdr->src &&
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	8b1a      	ldrh	r2, [r3, #24]
 80087b0:	4b94      	ldr	r3, [pc, #592]	; (8008a04 <tcp_input+0x524>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d13a      	bne.n	8008832 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	8ada      	ldrh	r2, [r3, #22]
 80087c0:	4b90      	ldr	r3, [pc, #576]	; (8008a04 <tcp_input+0x524>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	885b      	ldrh	r3, [r3, #2]
 80087c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d132      	bne.n	8008832 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	4b8d      	ldr	r3, [pc, #564]	; (8008a08 <tcp_input+0x528>)
 80087d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d12c      	bne.n	8008832 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	4b8a      	ldr	r3, [pc, #552]	; (8008a08 <tcp_input+0x528>)
 80087de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d126      	bne.n	8008832 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d106      	bne.n	80087fc <tcp_input+0x31c>
 80087ee:	4b87      	ldr	r3, [pc, #540]	; (8008a0c <tcp_input+0x52c>)
 80087f0:	f240 120d 	movw	r2, #269	; 0x10d
 80087f4:	4986      	ldr	r1, [pc, #536]	; (8008a10 <tcp_input+0x530>)
 80087f6:	4887      	ldr	r0, [pc, #540]	; (8008a14 <tcp_input+0x534>)
 80087f8:	f006 feae 	bl	800f558 <iprintf>
      if (prev != NULL) {
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <tcp_input+0x338>
        prev->next = pcb->next;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800880a:	4b83      	ldr	r3, [pc, #524]	; (8008a18 <tcp_input+0x538>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008812:	4a81      	ldr	r2, [pc, #516]	; (8008a18 <tcp_input+0x538>)
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	429a      	cmp	r2, r3
 8008820:	d111      	bne.n	8008846 <tcp_input+0x366>
 8008822:	4b7a      	ldr	r3, [pc, #488]	; (8008a0c <tcp_input+0x52c>)
 8008824:	f240 1215 	movw	r2, #277	; 0x115
 8008828:	497c      	ldr	r1, [pc, #496]	; (8008a1c <tcp_input+0x53c>)
 800882a:	487a      	ldr	r0, [pc, #488]	; (8008a14 <tcp_input+0x534>)
 800882c:	f006 fe94 	bl	800f558 <iprintf>
      break;
 8008830:	e009      	b.n	8008846 <tcp_input+0x366>
    }
    prev = pcb;
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f47f af5e 	bne.w	8008700 <tcp_input+0x220>
 8008844:	e000      	b.n	8008848 <tcp_input+0x368>
      break;
 8008846:	bf00      	nop
  }

  if (pcb == NULL) {
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f040 8095 	bne.w	800897a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008850:	4b73      	ldr	r3, [pc, #460]	; (8008a20 <tcp_input+0x540>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	e03f      	b.n	80088d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	7d1b      	ldrb	r3, [r3, #20]
 800885c:	2b0a      	cmp	r3, #10
 800885e:	d006      	beq.n	800886e <tcp_input+0x38e>
 8008860:	4b6a      	ldr	r3, [pc, #424]	; (8008a0c <tcp_input+0x52c>)
 8008862:	f240 121f 	movw	r2, #287	; 0x11f
 8008866:	496f      	ldr	r1, [pc, #444]	; (8008a24 <tcp_input+0x544>)
 8008868:	486a      	ldr	r0, [pc, #424]	; (8008a14 <tcp_input+0x534>)
 800886a:	f006 fe75 	bl	800f558 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	7a1b      	ldrb	r3, [r3, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	7a1a      	ldrb	r2, [r3, #8]
 800887a:	4b63      	ldr	r3, [pc, #396]	; (8008a08 <tcp_input+0x528>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008882:	3301      	adds	r3, #1
 8008884:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008886:	429a      	cmp	r2, r3
 8008888:	d122      	bne.n	80088d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	8b1a      	ldrh	r2, [r3, #24]
 800888e:	4b5d      	ldr	r3, [pc, #372]	; (8008a04 <tcp_input+0x524>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	429a      	cmp	r2, r3
 8008898:	d11b      	bne.n	80088d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	8ada      	ldrh	r2, [r3, #22]
 800889e:	4b59      	ldr	r3, [pc, #356]	; (8008a04 <tcp_input+0x524>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d113      	bne.n	80088d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	4b56      	ldr	r3, [pc, #344]	; (8008a08 <tcp_input+0x528>)
 80088b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d10d      	bne.n	80088d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4b53      	ldr	r3, [pc, #332]	; (8008a08 <tcp_input+0x528>)
 80088bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80088be:	429a      	cmp	r2, r3
 80088c0:	d107      	bne.n	80088d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80088c2:	69f8      	ldr	r0, [r7, #28]
 80088c4:	f000 fb54 	bl	8008f70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7fd fd3b 	bl	8006344 <pbuf_free>
        return;
 80088ce:	e1f0      	b.n	8008cb2 <tcp_input+0x7d2>
        continue;
 80088d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1bc      	bne.n	8008858 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80088e2:	4b51      	ldr	r3, [pc, #324]	; (8008a28 <tcp_input+0x548>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e02a      	b.n	8008940 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	7a1b      	ldrb	r3, [r3, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	7a1a      	ldrb	r2, [r3, #8]
 80088f6:	4b44      	ldr	r3, [pc, #272]	; (8008a08 <tcp_input+0x528>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088fe:	3301      	adds	r3, #1
 8008900:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008902:	429a      	cmp	r2, r3
 8008904:	d002      	beq.n	800890c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	61bb      	str	r3, [r7, #24]
        continue;
 800890a:	e016      	b.n	800893a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	8ada      	ldrh	r2, [r3, #22]
 8008910:	4b3c      	ldr	r3, [pc, #240]	; (8008a04 <tcp_input+0x524>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	b29b      	uxth	r3, r3
 8008918:	429a      	cmp	r2, r3
 800891a:	d10c      	bne.n	8008936 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	4b39      	ldr	r3, [pc, #228]	; (8008a08 <tcp_input+0x528>)
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	429a      	cmp	r2, r3
 8008926:	d00f      	beq.n	8008948 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00d      	beq.n	800894a <tcp_input+0x46a>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1d1      	bne.n	80088ea <tcp_input+0x40a>
 8008946:	e000      	b.n	800894a <tcp_input+0x46a>
            break;
 8008948:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d014      	beq.n	800897a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800895e:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <tcp_input+0x548>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008966:	4a30      	ldr	r2, [pc, #192]	; (8008a28 <tcp_input+0x548>)
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800896c:	6978      	ldr	r0, [r7, #20]
 800896e:	f000 fa01 	bl	8008d74 <tcp_listen_input>
      }
      pbuf_free(p);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fd fce6 	bl	8006344 <pbuf_free>
      return;
 8008978:	e19b      	b.n	8008cb2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8160 	beq.w	8008c42 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008982:	4b2a      	ldr	r3, [pc, #168]	; (8008a2c <tcp_input+0x54c>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	891a      	ldrh	r2, [r3, #8]
 800898c:	4b27      	ldr	r3, [pc, #156]	; (8008a2c <tcp_input+0x54c>)
 800898e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008990:	4a26      	ldr	r2, [pc, #152]	; (8008a2c <tcp_input+0x54c>)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008996:	4b1b      	ldr	r3, [pc, #108]	; (8008a04 <tcp_input+0x524>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <tcp_input+0x54c>)
 800899c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800899e:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <tcp_input+0x550>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80089a4:	4b23      	ldr	r3, [pc, #140]	; (8008a34 <tcp_input+0x554>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80089aa:	4b23      	ldr	r3, [pc, #140]	; (8008a38 <tcp_input+0x558>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80089b0:	4b22      	ldr	r3, [pc, #136]	; (8008a3c <tcp_input+0x55c>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 0308 	and.w	r3, r3, #8
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d006      	beq.n	80089ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	7b5b      	ldrb	r3, [r3, #13]
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d038      	beq.n	8008a44 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089d2:	69f8      	ldr	r0, [r7, #28]
 80089d4:	f7ff f852 	bl	8007a7c <tcp_process_refused_data>
 80089d8:	4603      	mov	r3, r0
 80089da:	f113 0f0d 	cmn.w	r3, #13
 80089de:	d007      	beq.n	80089f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02d      	beq.n	8008a44 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80089e8:	4b15      	ldr	r3, [pc, #84]	; (8008a40 <tcp_input+0x560>)
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d029      	beq.n	8008a44 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8104 	bne.w	8008c02 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80089fa:	69f8      	ldr	r0, [r7, #28]
 80089fc:	f003 fe16 	bl	800c62c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008a00:	e0ff      	b.n	8008c02 <tcp_input+0x722>
 8008a02:	bf00      	nop
 8008a04:	20000548 	.word	0x20000548
 8008a08:	200037d4 	.word	0x200037d4
 8008a0c:	08011f00 	.word	0x08011f00
 8008a10:	0801202c 	.word	0x0801202c
 8008a14:	08011f4c 	.word	0x08011f4c
 8008a18:	20008ed8 	.word	0x20008ed8
 8008a1c:	08012058 	.word	0x08012058
 8008a20:	20008ee8 	.word	0x20008ee8
 8008a24:	08012084 	.word	0x08012084
 8008a28:	20008ee0 	.word	0x20008ee0
 8008a2c:	20000538 	.word	0x20000538
 8008a30:	20000568 	.word	0x20000568
 8008a34:	20000565 	.word	0x20000565
 8008a38:	20000560 	.word	0x20000560
 8008a3c:	20000564 	.word	0x20000564
 8008a40:	20000562 	.word	0x20000562
      }
    }
    tcp_input_pcb = pcb;
 8008a44:	4a9c      	ldr	r2, [pc, #624]	; (8008cb8 <tcp_input+0x7d8>)
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008a4a:	69f8      	ldr	r0, [r7, #28]
 8008a4c:	f000 fb0a 	bl	8009064 <tcp_process>
 8008a50:	4603      	mov	r3, r0
 8008a52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008a54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a58:	f113 0f0d 	cmn.w	r3, #13
 8008a5c:	f000 80d3 	beq.w	8008c06 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008a60:	4b96      	ldr	r3, [pc, #600]	; (8008cbc <tcp_input+0x7dc>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d015      	beq.n	8008a98 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <tcp_input+0x5a8>
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	6912      	ldr	r2, [r2, #16]
 8008a80:	f06f 010d 	mvn.w	r1, #13
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a88:	69f9      	ldr	r1, [r7, #28]
 8008a8a:	488d      	ldr	r0, [pc, #564]	; (8008cc0 <tcp_input+0x7e0>)
 8008a8c:	f7ff fbb0 	bl	80081f0 <tcp_pcb_remove>
        tcp_free(pcb);
 8008a90:	69f8      	ldr	r0, [r7, #28]
 8008a92:	f7fd fef7 	bl	8006884 <tcp_free>
 8008a96:	e0c1      	b.n	8008c1c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008a9c:	4b89      	ldr	r3, [pc, #548]	; (8008cc4 <tcp_input+0x7e4>)
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01d      	beq.n	8008ae0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008aa4:	4b87      	ldr	r3, [pc, #540]	; (8008cc4 <tcp_input+0x7e4>)
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <tcp_input+0x5ea>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	6910      	ldr	r0, [r2, #16]
 8008abe:	89fa      	ldrh	r2, [r7, #14]
 8008ac0:	69f9      	ldr	r1, [r7, #28]
 8008ac2:	4798      	blx	r3
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	74fb      	strb	r3, [r7, #19]
 8008ac8:	e001      	b.n	8008ace <tcp_input+0x5ee>
 8008aca:	2300      	movs	r3, #0
 8008acc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008ace:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ad2:	f113 0f0d 	cmn.w	r3, #13
 8008ad6:	f000 8098 	beq.w	8008c0a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008ada:	4b7a      	ldr	r3, [pc, #488]	; (8008cc4 <tcp_input+0x7e4>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008ae0:	69f8      	ldr	r0, [r7, #28]
 8008ae2:	f000 f907 	bl	8008cf4 <tcp_input_delayed_close>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 8090 	bne.w	8008c0e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008aee:	4b76      	ldr	r3, [pc, #472]	; (8008cc8 <tcp_input+0x7e8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d041      	beq.n	8008b7a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d006      	beq.n	8008b0c <tcp_input+0x62c>
 8008afe:	4b73      	ldr	r3, [pc, #460]	; (8008ccc <tcp_input+0x7ec>)
 8008b00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008b04:	4972      	ldr	r1, [pc, #456]	; (8008cd0 <tcp_input+0x7f0>)
 8008b06:	4873      	ldr	r0, [pc, #460]	; (8008cd4 <tcp_input+0x7f4>)
 8008b08:	f006 fd26 	bl	800f558 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	8b5b      	ldrh	r3, [r3, #26]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008b18:	4b6b      	ldr	r3, [pc, #428]	; (8008cc8 <tcp_input+0x7e8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fd fc11 	bl	8006344 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008b22:	69f8      	ldr	r0, [r7, #28]
 8008b24:	f7fe f996 	bl	8006e54 <tcp_abort>
            goto aborted;
 8008b28:	e078      	b.n	8008c1c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00c      	beq.n	8008b4e <tcp_input+0x66e>
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	6918      	ldr	r0, [r3, #16]
 8008b3e:	4b62      	ldr	r3, [pc, #392]	; (8008cc8 <tcp_input+0x7e8>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	2300      	movs	r3, #0
 8008b44:	69f9      	ldr	r1, [r7, #28]
 8008b46:	47a0      	blx	r4
 8008b48:	4603      	mov	r3, r0
 8008b4a:	74fb      	strb	r3, [r7, #19]
 8008b4c:	e008      	b.n	8008b60 <tcp_input+0x680>
 8008b4e:	4b5e      	ldr	r3, [pc, #376]	; (8008cc8 <tcp_input+0x7e8>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	2300      	movs	r3, #0
 8008b54:	69f9      	ldr	r1, [r7, #28]
 8008b56:	2000      	movs	r0, #0
 8008b58:	f7ff f884 	bl	8007c64 <tcp_recv_null>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008b60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b64:	f113 0f0d 	cmn.w	r3, #13
 8008b68:	d053      	beq.n	8008c12 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008b6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008b72:	4b55      	ldr	r3, [pc, #340]	; (8008cc8 <tcp_input+0x7e8>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008b7a:	4b50      	ldr	r3, [pc, #320]	; (8008cbc <tcp_input+0x7dc>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d030      	beq.n	8008be8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b92:	7b5a      	ldrb	r2, [r3, #13]
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b98:	f042 0220 	orr.w	r2, r2, #32
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	735a      	strb	r2, [r3, #13]
 8008ba0:	e022      	b.n	8008be8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008baa:	d005      	beq.n	8008bb8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <tcp_input+0x6fa>
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	6918      	ldr	r0, [r3, #16]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2200      	movs	r2, #0
 8008bd0:	69f9      	ldr	r1, [r7, #28]
 8008bd2:	47a0      	blx	r4
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	74fb      	strb	r3, [r7, #19]
 8008bd8:	e001      	b.n	8008bde <tcp_input+0x6fe>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008bde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008be2:	f113 0f0d 	cmn.w	r3, #13
 8008be6:	d016      	beq.n	8008c16 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008be8:	4b33      	ldr	r3, [pc, #204]	; (8008cb8 <tcp_input+0x7d8>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008bee:	69f8      	ldr	r0, [r7, #28]
 8008bf0:	f000 f880 	bl	8008cf4 <tcp_input_delayed_close>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10f      	bne.n	8008c1a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008bfa:	69f8      	ldr	r0, [r7, #28]
 8008bfc:	f002 ff10 	bl	800ba20 <tcp_output>
 8008c00:	e00c      	b.n	8008c1c <tcp_input+0x73c>
        goto aborted;
 8008c02:	bf00      	nop
 8008c04:	e00a      	b.n	8008c1c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008c06:	bf00      	nop
 8008c08:	e008      	b.n	8008c1c <tcp_input+0x73c>
              goto aborted;
 8008c0a:	bf00      	nop
 8008c0c:	e006      	b.n	8008c1c <tcp_input+0x73c>
          goto aborted;
 8008c0e:	bf00      	nop
 8008c10:	e004      	b.n	8008c1c <tcp_input+0x73c>
            goto aborted;
 8008c12:	bf00      	nop
 8008c14:	e002      	b.n	8008c1c <tcp_input+0x73c>
              goto aborted;
 8008c16:	bf00      	nop
 8008c18:	e000      	b.n	8008c1c <tcp_input+0x73c>
          goto aborted;
 8008c1a:	bf00      	nop
    tcp_input_pcb = NULL;
 8008c1c:	4b26      	ldr	r3, [pc, #152]	; (8008cb8 <tcp_input+0x7d8>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008c22:	4b29      	ldr	r3, [pc, #164]	; (8008cc8 <tcp_input+0x7e8>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008c28:	4b2b      	ldr	r3, [pc, #172]	; (8008cd8 <tcp_input+0x7f8>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d03f      	beq.n	8008cb0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8008c30:	4b29      	ldr	r3, [pc, #164]	; (8008cd8 <tcp_input+0x7f8>)
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fd fb85 	bl	8006344 <pbuf_free>
      inseg.p = NULL;
 8008c3a:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <tcp_input+0x7f8>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008c40:	e036      	b.n	8008cb0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008c42:	4b26      	ldr	r3, [pc, #152]	; (8008cdc <tcp_input+0x7fc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	899b      	ldrh	r3, [r3, #12]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fc f85c 	bl	8004d08 <lwip_htons>
 8008c50:	4603      	mov	r3, r0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d118      	bne.n	8008c8e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c5c:	4b20      	ldr	r3, [pc, #128]	; (8008ce0 <tcp_input+0x800>)
 8008c5e:	6819      	ldr	r1, [r3, #0]
 8008c60:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <tcp_input+0x804>)
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b20      	ldr	r3, [pc, #128]	; (8008ce8 <tcp_input+0x808>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <tcp_input+0x7fc>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c74:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <tcp_input+0x7fc>)
 8008c76:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c78:	8812      	ldrh	r2, [r2, #0]
 8008c7a:	b292      	uxth	r2, r2
 8008c7c:	9202      	str	r2, [sp, #8]
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <tcp_input+0x80c>)
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	4b1a      	ldr	r3, [pc, #104]	; (8008cf0 <tcp_input+0x810>)
 8008c86:	4602      	mov	r2, r0
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f003 fc7d 	bl	800c588 <tcp_rst>
    pbuf_free(p);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7fd fb58 	bl	8006344 <pbuf_free>
  return;
 8008c94:	e00c      	b.n	8008cb0 <tcp_input+0x7d0>
    goto dropped;
 8008c96:	bf00      	nop
 8008c98:	e006      	b.n	8008ca8 <tcp_input+0x7c8>
    goto dropped;
 8008c9a:	bf00      	nop
 8008c9c:	e004      	b.n	8008ca8 <tcp_input+0x7c8>
    goto dropped;
 8008c9e:	bf00      	nop
 8008ca0:	e002      	b.n	8008ca8 <tcp_input+0x7c8>
      goto dropped;
 8008ca2:	bf00      	nop
 8008ca4:	e000      	b.n	8008ca8 <tcp_input+0x7c8>
      goto dropped;
 8008ca6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fd fb4b 	bl	8006344 <pbuf_free>
 8008cae:	e000      	b.n	8008cb2 <tcp_input+0x7d2>
  return;
 8008cb0:	bf00      	nop
}
 8008cb2:	3724      	adds	r7, #36	; 0x24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd90      	pop	{r4, r7, pc}
 8008cb8:	20008eec 	.word	0x20008eec
 8008cbc:	20000565 	.word	0x20000565
 8008cc0:	20008ed8 	.word	0x20008ed8
 8008cc4:	20000560 	.word	0x20000560
 8008cc8:	20000568 	.word	0x20000568
 8008ccc:	08011f00 	.word	0x08011f00
 8008cd0:	080120b4 	.word	0x080120b4
 8008cd4:	08011f4c 	.word	0x08011f4c
 8008cd8:	20000538 	.word	0x20000538
 8008cdc:	20000548 	.word	0x20000548
 8008ce0:	2000055c 	.word	0x2000055c
 8008ce4:	20000562 	.word	0x20000562
 8008ce8:	20000558 	.word	0x20000558
 8008cec:	200037e4 	.word	0x200037e4
 8008cf0:	200037e8 	.word	0x200037e8

08008cf4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <tcp_input_delayed_close+0x1c>
 8008d02:	4b17      	ldr	r3, [pc, #92]	; (8008d60 <tcp_input_delayed_close+0x6c>)
 8008d04:	f240 225a 	movw	r2, #602	; 0x25a
 8008d08:	4916      	ldr	r1, [pc, #88]	; (8008d64 <tcp_input_delayed_close+0x70>)
 8008d0a:	4817      	ldr	r0, [pc, #92]	; (8008d68 <tcp_input_delayed_close+0x74>)
 8008d0c:	f006 fc24 	bl	800f558 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008d10:	4b16      	ldr	r3, [pc, #88]	; (8008d6c <tcp_input_delayed_close+0x78>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01c      	beq.n	8008d56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8b5b      	ldrh	r3, [r3, #26]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10d      	bne.n	8008d44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d008      	beq.n	8008d44 <tcp_input_delayed_close+0x50>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6912      	ldr	r2, [r2, #16]
 8008d3c:	f06f 010e 	mvn.w	r1, #14
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008d44:	6879      	ldr	r1, [r7, #4]
 8008d46:	480a      	ldr	r0, [pc, #40]	; (8008d70 <tcp_input_delayed_close+0x7c>)
 8008d48:	f7ff fa52 	bl	80081f0 <tcp_pcb_remove>
    tcp_free(pcb);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7fd fd99 	bl	8006884 <tcp_free>
    return 1;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	08011f00 	.word	0x08011f00
 8008d64:	080120d0 	.word	0x080120d0
 8008d68:	08011f4c 	.word	0x08011f4c
 8008d6c:	20000565 	.word	0x20000565
 8008d70:	20008ed8 	.word	0x20008ed8

08008d74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008d74:	b590      	push	{r4, r7, lr}
 8008d76:	b08b      	sub	sp, #44	; 0x2c
 8008d78:	af04      	add	r7, sp, #16
 8008d7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008d7c:	4b6f      	ldr	r3, [pc, #444]	; (8008f3c <tcp_listen_input+0x1c8>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 80d2 	bne.w	8008f2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <tcp_listen_input+0x2a>
 8008d90:	4b6b      	ldr	r3, [pc, #428]	; (8008f40 <tcp_listen_input+0x1cc>)
 8008d92:	f240 2281 	movw	r2, #641	; 0x281
 8008d96:	496b      	ldr	r1, [pc, #428]	; (8008f44 <tcp_listen_input+0x1d0>)
 8008d98:	486b      	ldr	r0, [pc, #428]	; (8008f48 <tcp_listen_input+0x1d4>)
 8008d9a:	f006 fbdd 	bl	800f558 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008d9e:	4b67      	ldr	r3, [pc, #412]	; (8008f3c <tcp_listen_input+0x1c8>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d019      	beq.n	8008dde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008daa:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <tcp_listen_input+0x1d8>)
 8008dac:	6819      	ldr	r1, [r3, #0]
 8008dae:	4b68      	ldr	r3, [pc, #416]	; (8008f50 <tcp_listen_input+0x1dc>)
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	4b67      	ldr	r3, [pc, #412]	; (8008f54 <tcp_listen_input+0x1e0>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dba:	4b67      	ldr	r3, [pc, #412]	; (8008f58 <tcp_listen_input+0x1e4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dbe:	885b      	ldrh	r3, [r3, #2]
 8008dc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dc2:	4a65      	ldr	r2, [pc, #404]	; (8008f58 <tcp_listen_input+0x1e4>)
 8008dc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dc6:	8812      	ldrh	r2, [r2, #0]
 8008dc8:	b292      	uxth	r2, r2
 8008dca:	9202      	str	r2, [sp, #8]
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	4b63      	ldr	r3, [pc, #396]	; (8008f5c <tcp_listen_input+0x1e8>)
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	4b63      	ldr	r3, [pc, #396]	; (8008f60 <tcp_listen_input+0x1ec>)
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f003 fbd6 	bl	800c588 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008ddc:	e0a9      	b.n	8008f32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008dde:	4b57      	ldr	r3, [pc, #348]	; (8008f3c <tcp_listen_input+0x1c8>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 80a3 	beq.w	8008f32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7d5b      	ldrb	r3, [r3, #21]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff f85b 	bl	8007eac <tcp_alloc>
 8008df6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d111      	bne.n	8008e22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <tcp_listen_input+0xa8>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6910      	ldr	r0, [r2, #16]
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e12:	2100      	movs	r1, #0
 8008e14:	4798      	blx	r3
 8008e16:	4603      	mov	r3, r0
 8008e18:	73bb      	strb	r3, [r7, #14]
      return;
 8008e1a:	e08b      	b.n	8008f34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008e1c:	23f0      	movs	r3, #240	; 0xf0
 8008e1e:	73bb      	strb	r3, [r7, #14]
      return;
 8008e20:	e088      	b.n	8008f34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008e22:	4b50      	ldr	r3, [pc, #320]	; (8008f64 <tcp_listen_input+0x1f0>)
 8008e24:	695a      	ldr	r2, [r3, #20]
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008e2a:	4b4e      	ldr	r3, [pc, #312]	; (8008f64 <tcp_listen_input+0x1f0>)
 8008e2c:	691a      	ldr	r2, [r3, #16]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8ada      	ldrh	r2, [r3, #22]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008e3a:	4b47      	ldr	r3, [pc, #284]	; (8008f58 <tcp_listen_input+0x1e4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2203      	movs	r2, #3
 8008e4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008e4c:	4b41      	ldr	r3, [pc, #260]	; (8008f54 <tcp_listen_input+0x1e0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008e5e:	6978      	ldr	r0, [r7, #20]
 8008e60:	f7ff fa5a 	bl	8008318 <tcp_next_iss>
 8008e64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e7e:	4b35      	ldr	r3, [pc, #212]	; (8008f54 <tcp_listen_input+0x1e0>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	1e5a      	subs	r2, r3, #1
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	7a5b      	ldrb	r3, [r3, #9]
 8008e9a:	f003 030c 	and.w	r3, r3, #12
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	7a1a      	ldrb	r2, [r3, #8]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008eac:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <tcp_listen_input+0x1f4>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	60da      	str	r2, [r3, #12]
 8008eb4:	4a2c      	ldr	r2, [pc, #176]	; (8008f68 <tcp_listen_input+0x1f4>)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	f003 fd27 	bl	800c90c <tcp_timer_needed>
 8008ebe:	4b2b      	ldr	r3, [pc, #172]	; (8008f6c <tcp_listen_input+0x1f8>)
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008ec4:	6978      	ldr	r0, [r7, #20]
 8008ec6:	f001 fd8d 	bl	800a9e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008eca:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <tcp_listen_input+0x1e4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	89db      	ldrh	r3, [r3, #14]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f005 f8eb 	bl	800e0c8 <ip4_route>
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff fa32 	bl	8008364 <tcp_eff_send_mss_netif>
 8008f00:	4603      	mov	r3, r0
 8008f02:	461a      	mov	r2, r3
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008f08:	2112      	movs	r1, #18
 8008f0a:	6978      	ldr	r0, [r7, #20]
 8008f0c:	f002 fc9a 	bl	800b844 <tcp_enqueue_flags>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6978      	ldr	r0, [r7, #20]
 8008f20:	f7fd feda 	bl	8006cd8 <tcp_abandon>
      return;
 8008f24:	e006      	b.n	8008f34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008f26:	6978      	ldr	r0, [r7, #20]
 8008f28:	f002 fd7a 	bl	800ba20 <tcp_output>
  return;
 8008f2c:	e001      	b.n	8008f32 <tcp_listen_input+0x1be>
    return;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <tcp_listen_input+0x1c0>
  return;
 8008f32:	bf00      	nop
}
 8008f34:	371c      	adds	r7, #28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd90      	pop	{r4, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000564 	.word	0x20000564
 8008f40:	08011f00 	.word	0x08011f00
 8008f44:	080120f8 	.word	0x080120f8
 8008f48:	08011f4c 	.word	0x08011f4c
 8008f4c:	2000055c 	.word	0x2000055c
 8008f50:	20000562 	.word	0x20000562
 8008f54:	20000558 	.word	0x20000558
 8008f58:	20000548 	.word	0x20000548
 8008f5c:	200037e4 	.word	0x200037e4
 8008f60:	200037e8 	.word	0x200037e8
 8008f64:	200037d4 	.word	0x200037d4
 8008f68:	20008ed8 	.word	0x20008ed8
 8008f6c:	20008ed4 	.word	0x20008ed4

08008f70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af04      	add	r7, sp, #16
 8008f76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008f78:	4b2f      	ldr	r3, [pc, #188]	; (8009038 <tcp_timewait_input+0xc8>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d153      	bne.n	800902c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d106      	bne.n	8008f98 <tcp_timewait_input+0x28>
 8008f8a:	4b2c      	ldr	r3, [pc, #176]	; (800903c <tcp_timewait_input+0xcc>)
 8008f8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008f90:	492b      	ldr	r1, [pc, #172]	; (8009040 <tcp_timewait_input+0xd0>)
 8008f92:	482c      	ldr	r0, [pc, #176]	; (8009044 <tcp_timewait_input+0xd4>)
 8008f94:	f006 fae0 	bl	800f558 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008f98:	4b27      	ldr	r3, [pc, #156]	; (8009038 <tcp_timewait_input+0xc8>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d02a      	beq.n	8008ffa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008fa4:	4b28      	ldr	r3, [pc, #160]	; (8009048 <tcp_timewait_input+0xd8>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	db2d      	blt.n	800900e <tcp_timewait_input+0x9e>
 8008fb2:	4b25      	ldr	r3, [pc, #148]	; (8009048 <tcp_timewait_input+0xd8>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fbe:	440b      	add	r3, r1
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	dc23      	bgt.n	800900e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fc6:	4b21      	ldr	r3, [pc, #132]	; (800904c <tcp_timewait_input+0xdc>)
 8008fc8:	6819      	ldr	r1, [r3, #0]
 8008fca:	4b21      	ldr	r3, [pc, #132]	; (8009050 <tcp_timewait_input+0xe0>)
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <tcp_timewait_input+0xd8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fd6:	4b1f      	ldr	r3, [pc, #124]	; (8009054 <tcp_timewait_input+0xe4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fda:	885b      	ldrh	r3, [r3, #2]
 8008fdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fde:	4a1d      	ldr	r2, [pc, #116]	; (8009054 <tcp_timewait_input+0xe4>)
 8008fe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fe2:	8812      	ldrh	r2, [r2, #0]
 8008fe4:	b292      	uxth	r2, r2
 8008fe6:	9202      	str	r2, [sp, #8]
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	4b1b      	ldr	r3, [pc, #108]	; (8009058 <tcp_timewait_input+0xe8>)
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	4b1b      	ldr	r3, [pc, #108]	; (800905c <tcp_timewait_input+0xec>)
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f003 fac8 	bl	800c588 <tcp_rst>
      return;
 8008ff8:	e01b      	b.n	8009032 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <tcp_timewait_input+0xc8>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009006:	4b16      	ldr	r3, [pc, #88]	; (8009060 <tcp_timewait_input+0xf0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800900e:	4b10      	ldr	r3, [pc, #64]	; (8009050 <tcp_timewait_input+0xe0>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00c      	beq.n	8009030 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	8b5b      	ldrh	r3, [r3, #26]
 800901a:	f043 0302 	orr.w	r3, r3, #2
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f002 fcfb 	bl	800ba20 <tcp_output>
  }
  return;
 800902a:	e001      	b.n	8009030 <tcp_timewait_input+0xc0>
    return;
 800902c:	bf00      	nop
 800902e:	e000      	b.n	8009032 <tcp_timewait_input+0xc2>
  return;
 8009030:	bf00      	nop
}
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000564 	.word	0x20000564
 800903c:	08011f00 	.word	0x08011f00
 8009040:	08012118 	.word	0x08012118
 8009044:	08011f4c 	.word	0x08011f4c
 8009048:	20000558 	.word	0x20000558
 800904c:	2000055c 	.word	0x2000055c
 8009050:	20000562 	.word	0x20000562
 8009054:	20000548 	.word	0x20000548
 8009058:	200037e4 	.word	0x200037e4
 800905c:	200037e8 	.word	0x200037e8
 8009060:	20008edc 	.word	0x20008edc

08009064 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009064:	b590      	push	{r4, r7, lr}
 8009066:	b08d      	sub	sp, #52	; 0x34
 8009068:	af04      	add	r7, sp, #16
 800906a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <tcp_process+0x24>
 800907a:	4ba5      	ldr	r3, [pc, #660]	; (8009310 <tcp_process+0x2ac>)
 800907c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009080:	49a4      	ldr	r1, [pc, #656]	; (8009314 <tcp_process+0x2b0>)
 8009082:	48a5      	ldr	r0, [pc, #660]	; (8009318 <tcp_process+0x2b4>)
 8009084:	f006 fa68 	bl	800f558 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009088:	4ba4      	ldr	r3, [pc, #656]	; (800931c <tcp_process+0x2b8>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d04e      	beq.n	8009132 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7d1b      	ldrb	r3, [r3, #20]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d108      	bne.n	80090ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a0:	4b9f      	ldr	r3, [pc, #636]	; (8009320 <tcp_process+0x2bc>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d123      	bne.n	80090f0 <tcp_process+0x8c>
        acceptable = 1;
 80090a8:	2301      	movs	r3, #1
 80090aa:	76fb      	strb	r3, [r7, #27]
 80090ac:	e020      	b.n	80090f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090b2:	4b9c      	ldr	r3, [pc, #624]	; (8009324 <tcp_process+0x2c0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d102      	bne.n	80090c0 <tcp_process+0x5c>
        acceptable = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	76fb      	strb	r3, [r7, #27]
 80090be:	e017      	b.n	80090f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090c0:	4b98      	ldr	r3, [pc, #608]	; (8009324 <tcp_process+0x2c0>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	db10      	blt.n	80090f0 <tcp_process+0x8c>
 80090ce:	4b95      	ldr	r3, [pc, #596]	; (8009324 <tcp_process+0x2c0>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80090da:	440b      	add	r3, r1
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dc06      	bgt.n	80090f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	8b5b      	ldrh	r3, [r3, #26]
 80090e6:	f043 0302 	orr.w	r3, r3, #2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80090f0:	7efb      	ldrb	r3, [r7, #27]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01b      	beq.n	800912e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7d1b      	ldrb	r3, [r3, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <tcp_process+0xa8>
 80090fe:	4b84      	ldr	r3, [pc, #528]	; (8009310 <tcp_process+0x2ac>)
 8009100:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009104:	4988      	ldr	r1, [pc, #544]	; (8009328 <tcp_process+0x2c4>)
 8009106:	4884      	ldr	r0, [pc, #528]	; (8009318 <tcp_process+0x2b4>)
 8009108:	f006 fa26 	bl	800f558 <iprintf>
      recv_flags |= TF_RESET;
 800910c:	4b87      	ldr	r3, [pc, #540]	; (800932c <tcp_process+0x2c8>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	b2da      	uxtb	r2, r3
 8009116:	4b85      	ldr	r3, [pc, #532]	; (800932c <tcp_process+0x2c8>)
 8009118:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8b5b      	ldrh	r3, [r3, #26]
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009128:	f06f 030d 	mvn.w	r3, #13
 800912c:	e37a      	b.n	8009824 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	e378      	b.n	8009824 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009132:	4b7a      	ldr	r3, [pc, #488]	; (800931c <tcp_process+0x2b8>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d010      	beq.n	8009160 <tcp_process+0xfc>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7d1b      	ldrb	r3, [r3, #20]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d00c      	beq.n	8009160 <tcp_process+0xfc>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7d1b      	ldrb	r3, [r3, #20]
 800914a:	2b03      	cmp	r3, #3
 800914c:	d008      	beq.n	8009160 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8b5b      	ldrh	r3, [r3, #26]
 8009152:	f043 0302 	orr.w	r3, r3, #2
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	e361      	b.n	8009824 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8b5b      	ldrh	r3, [r3, #26]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800916c:	4b70      	ldr	r3, [pc, #448]	; (8009330 <tcp_process+0x2cc>)
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fc2d 	bl	800a9e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7d1b      	ldrb	r3, [r3, #20]
 800918e:	3b02      	subs	r3, #2
 8009190:	2b07      	cmp	r3, #7
 8009192:	f200 8337 	bhi.w	8009804 <tcp_process+0x7a0>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <tcp_process+0x138>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080093ed 	.word	0x080093ed
 80091a4:	08009565 	.word	0x08009565
 80091a8:	0800958f 	.word	0x0800958f
 80091ac:	080096b3 	.word	0x080096b3
 80091b0:	08009565 	.word	0x08009565
 80091b4:	0800973f 	.word	0x0800973f
 80091b8:	080097cf 	.word	0x080097cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80091bc:	4b57      	ldr	r3, [pc, #348]	; (800931c <tcp_process+0x2b8>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80e4 	beq.w	8009392 <tcp_process+0x32e>
 80091ca:	4b54      	ldr	r3, [pc, #336]	; (800931c <tcp_process+0x2b8>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80dd 	beq.w	8009392 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	4b50      	ldr	r3, [pc, #320]	; (8009320 <tcp_process+0x2bc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	f040 80d5 	bne.w	8009392 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80091e8:	4b4e      	ldr	r3, [pc, #312]	; (8009324 <tcp_process+0x2c0>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80091fa:	4b49      	ldr	r3, [pc, #292]	; (8009320 <tcp_process+0x2bc>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009202:	4b4c      	ldr	r3, [pc, #304]	; (8009334 <tcp_process+0x2d0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	89db      	ldrh	r3, [r3, #14]
 8009208:	b29a      	uxth	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800921c:	4b41      	ldr	r3, [pc, #260]	; (8009324 <tcp_process+0x2c0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2204      	movs	r2, #4
 800922a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3304      	adds	r3, #4
 8009234:	4618      	mov	r0, r3
 8009236:	f004 ff47 	bl	800e0c8 <ip4_route>
 800923a:	4601      	mov	r1, r0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3304      	adds	r3, #4
 8009240:	461a      	mov	r2, r3
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff f88e 	bl	8008364 <tcp_eff_send_mss_netif>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009254:	009a      	lsls	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009260:	428b      	cmp	r3, r1
 8009262:	bf38      	it	cc
 8009264:	460b      	movcc	r3, r1
 8009266:	429a      	cmp	r2, r3
 8009268:	d204      	bcs.n	8009274 <tcp_process+0x210>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	b29b      	uxth	r3, r3
 8009272:	e00d      	b.n	8009290 <tcp_process+0x22c>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	f241 121c 	movw	r2, #4380	; 0x111c
 800927e:	4293      	cmp	r3, r2
 8009280:	d904      	bls.n	800928c <tcp_process+0x228>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	b29b      	uxth	r3, r3
 800928a:	e001      	b.n	8009290 <tcp_process+0x22c>
 800928c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <tcp_process+0x24a>
 80092a0:	4b1b      	ldr	r3, [pc, #108]	; (8009310 <tcp_process+0x2ac>)
 80092a2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80092a6:	4924      	ldr	r1, [pc, #144]	; (8009338 <tcp_process+0x2d4>)
 80092a8:	481b      	ldr	r0, [pc, #108]	; (8009318 <tcp_process+0x2b4>)
 80092aa:	f006 f955 	bl	800f558 <iprintf>
        --pcb->snd_queuelen;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d111      	bne.n	80092ee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <tcp_process+0x280>
 80092d6:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <tcp_process+0x2ac>)
 80092d8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80092dc:	4917      	ldr	r1, [pc, #92]	; (800933c <tcp_process+0x2d8>)
 80092de:	480e      	ldr	r0, [pc, #56]	; (8009318 <tcp_process+0x2b4>)
 80092e0:	f006 f93a 	bl	800f558 <iprintf>
          pcb->unsent = rseg->next;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80092ec:	e003      	b.n	80092f6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80092f6:	69f8      	ldr	r0, [r7, #28]
 80092f8:	f7fe fc51 	bl	8007b9e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11d      	bne.n	8009340 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800930a:	861a      	strh	r2, [r3, #48]	; 0x30
 800930c:	e01f      	b.n	800934e <tcp_process+0x2ea>
 800930e:	bf00      	nop
 8009310:	08011f00 	.word	0x08011f00
 8009314:	08012138 	.word	0x08012138
 8009318:	08011f4c 	.word	0x08011f4c
 800931c:	20000564 	.word	0x20000564
 8009320:	2000055c 	.word	0x2000055c
 8009324:	20000558 	.word	0x20000558
 8009328:	08012154 	.word	0x08012154
 800932c:	20000565 	.word	0x20000565
 8009330:	20008edc 	.word	0x20008edc
 8009334:	20000548 	.word	0x20000548
 8009338:	08012174 	.word	0x08012174
 800933c:	0801218c 	.word	0x0801218c
        } else {
          pcb->rtime = 0;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <tcp_process+0x30a>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	6910      	ldr	r0, [r2, #16]
 8009362:	2200      	movs	r2, #0
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	4798      	blx	r3
 8009368:	4603      	mov	r3, r0
 800936a:	76bb      	strb	r3, [r7, #26]
 800936c:	e001      	b.n	8009372 <tcp_process+0x30e>
 800936e:	2300      	movs	r3, #0
 8009370:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009372:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009376:	f113 0f0d 	cmn.w	r3, #13
 800937a:	d102      	bne.n	8009382 <tcp_process+0x31e>
          return ERR_ABRT;
 800937c:	f06f 030c 	mvn.w	r3, #12
 8009380:	e250      	b.n	8009824 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8b5b      	ldrh	r3, [r3, #26]
 8009386:	f043 0302 	orr.w	r3, r3, #2
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009390:	e23a      	b.n	8009808 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009392:	4b9d      	ldr	r3, [pc, #628]	; (8009608 <tcp_process+0x5a4>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8234 	beq.w	8009808 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093a0:	4b9a      	ldr	r3, [pc, #616]	; (800960c <tcp_process+0x5a8>)
 80093a2:	6819      	ldr	r1, [r3, #0]
 80093a4:	4b9a      	ldr	r3, [pc, #616]	; (8009610 <tcp_process+0x5ac>)
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	4b9a      	ldr	r3, [pc, #616]	; (8009614 <tcp_process+0x5b0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093b0:	4b99      	ldr	r3, [pc, #612]	; (8009618 <tcp_process+0x5b4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093b8:	4a97      	ldr	r2, [pc, #604]	; (8009618 <tcp_process+0x5b4>)
 80093ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093bc:	8812      	ldrh	r2, [r2, #0]
 80093be:	b292      	uxth	r2, r2
 80093c0:	9202      	str	r2, [sp, #8]
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	4b95      	ldr	r3, [pc, #596]	; (800961c <tcp_process+0x5b8>)
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	4b95      	ldr	r3, [pc, #596]	; (8009620 <tcp_process+0x5bc>)
 80093ca:	4602      	mov	r2, r0
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f003 f8db 	bl	800c588 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093d8:	2b05      	cmp	r3, #5
 80093da:	f200 8215 	bhi.w	8009808 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 fea5 	bl	800c134 <tcp_rexmit_rto>
      break;
 80093ea:	e20d      	b.n	8009808 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80093ec:	4b86      	ldr	r3, [pc, #536]	; (8009608 <tcp_process+0x5a4>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 0310 	and.w	r3, r3, #16
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80a1 	beq.w	800953c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093fa:	4b84      	ldr	r3, [pc, #528]	; (800960c <tcp_process+0x5a8>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	db7e      	blt.n	8009508 <tcp_process+0x4a4>
 800940a:	4b80      	ldr	r3, [pc, #512]	; (800960c <tcp_process+0x5a8>)
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	dc77      	bgt.n	8009508 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2204      	movs	r2, #4
 800941c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009426:	23fa      	movs	r3, #250	; 0xfa
 8009428:	76bb      	strb	r3, [r7, #26]
 800942a:	e01d      	b.n	8009468 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d106      	bne.n	8009444 <tcp_process+0x3e0>
 8009436:	4b7b      	ldr	r3, [pc, #492]	; (8009624 <tcp_process+0x5c0>)
 8009438:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800943c:	497a      	ldr	r1, [pc, #488]	; (8009628 <tcp_process+0x5c4>)
 800943e:	487b      	ldr	r0, [pc, #492]	; (800962c <tcp_process+0x5c8>)
 8009440:	f006 f88a 	bl	800f558 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <tcp_process+0x400>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	6910      	ldr	r0, [r2, #16]
 8009458:	2200      	movs	r2, #0
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4798      	blx	r3
 800945e:	4603      	mov	r3, r0
 8009460:	76bb      	strb	r3, [r7, #26]
 8009462:	e001      	b.n	8009468 <tcp_process+0x404>
 8009464:	23f0      	movs	r3, #240	; 0xf0
 8009466:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009468:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009470:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009474:	f113 0f0d 	cmn.w	r3, #13
 8009478:	d002      	beq.n	8009480 <tcp_process+0x41c>
              tcp_abort(pcb);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7fd fcea 	bl	8006e54 <tcp_abort>
            }
            return ERR_ABRT;
 8009480:	f06f 030c 	mvn.w	r3, #12
 8009484:	e1ce      	b.n	8009824 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fae0 	bl	8009a4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800948c:	4b68      	ldr	r3, [pc, #416]	; (8009630 <tcp_process+0x5cc>)
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <tcp_process+0x43c>
            recv_acked--;
 8009494:	4b66      	ldr	r3, [pc, #408]	; (8009630 <tcp_process+0x5cc>)
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	4b64      	ldr	r3, [pc, #400]	; (8009630 <tcp_process+0x5cc>)
 800949e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094a4:	009a      	lsls	r2, r3, #2
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf38      	it	cc
 80094b4:	460b      	movcc	r3, r1
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d204      	bcs.n	80094c4 <tcp_process+0x460>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	e00d      	b.n	80094e0 <tcp_process+0x47c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d904      	bls.n	80094dc <tcp_process+0x478>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	b29b      	uxth	r3, r3
 80094da:	e001      	b.n	80094e0 <tcp_process+0x47c>
 80094dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80094e6:	4b53      	ldr	r3, [pc, #332]	; (8009634 <tcp_process+0x5d0>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d037      	beq.n	8009562 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	8b5b      	ldrh	r3, [r3, #26]
 80094f6:	f043 0302 	orr.w	r3, r3, #2
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2207      	movs	r2, #7
 8009504:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009506:	e02c      	b.n	8009562 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009508:	4b40      	ldr	r3, [pc, #256]	; (800960c <tcp_process+0x5a8>)
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	4b40      	ldr	r3, [pc, #256]	; (8009610 <tcp_process+0x5ac>)
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	461a      	mov	r2, r3
 8009512:	4b40      	ldr	r3, [pc, #256]	; (8009614 <tcp_process+0x5b0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009518:	4b3f      	ldr	r3, [pc, #252]	; (8009618 <tcp_process+0x5b4>)
 800951a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800951c:	885b      	ldrh	r3, [r3, #2]
 800951e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009520:	4a3d      	ldr	r2, [pc, #244]	; (8009618 <tcp_process+0x5b4>)
 8009522:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009524:	8812      	ldrh	r2, [r2, #0]
 8009526:	b292      	uxth	r2, r2
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	4b3b      	ldr	r3, [pc, #236]	; (800961c <tcp_process+0x5b8>)
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4b3b      	ldr	r3, [pc, #236]	; (8009620 <tcp_process+0x5bc>)
 8009532:	4602      	mov	r2, r0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f003 f827 	bl	800c588 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800953a:	e167      	b.n	800980c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800953c:	4b32      	ldr	r3, [pc, #200]	; (8009608 <tcp_process+0x5a4>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8161 	beq.w	800980c <tcp_process+0x7a8>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	1e5a      	subs	r2, r3, #1
 8009550:	4b30      	ldr	r3, [pc, #192]	; (8009614 <tcp_process+0x5b0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	f040 8159 	bne.w	800980c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f002 fe0c 	bl	800c178 <tcp_rexmit>
      break;
 8009560:	e154      	b.n	800980c <tcp_process+0x7a8>
 8009562:	e153      	b.n	800980c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa71 	bl	8009a4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800956a:	4b32      	ldr	r3, [pc, #200]	; (8009634 <tcp_process+0x5d0>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 814c 	beq.w	8009810 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	8b5b      	ldrh	r3, [r3, #26]
 800957c:	f043 0302 	orr.w	r3, r3, #2
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2207      	movs	r2, #7
 800958a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800958c:	e140      	b.n	8009810 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fa5c 	bl	8009a4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009594:	4b27      	ldr	r3, [pc, #156]	; (8009634 <tcp_process+0x5d0>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d071      	beq.n	8009684 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80095a0:	4b19      	ldr	r3, [pc, #100]	; (8009608 <tcp_process+0x5a4>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0310 	and.w	r3, r3, #16
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d060      	beq.n	800966e <tcp_process+0x60a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095b0:	4b16      	ldr	r3, [pc, #88]	; (800960c <tcp_process+0x5a8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d15a      	bne.n	800966e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d156      	bne.n	800966e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8b5b      	ldrh	r3, [r3, #26]
 80095c4:	f043 0302 	orr.w	r3, r3, #2
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7fe fdbe 	bl	8008150 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80095d4:	4b18      	ldr	r3, [pc, #96]	; (8009638 <tcp_process+0x5d4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d105      	bne.n	80095ea <tcp_process+0x586>
 80095de:	4b16      	ldr	r3, [pc, #88]	; (8009638 <tcp_process+0x5d4>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	4a14      	ldr	r2, [pc, #80]	; (8009638 <tcp_process+0x5d4>)
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	e02e      	b.n	8009648 <tcp_process+0x5e4>
 80095ea:	4b13      	ldr	r3, [pc, #76]	; (8009638 <tcp_process+0x5d4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	e027      	b.n	8009642 <tcp_process+0x5de>
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d11f      	bne.n	800963c <tcp_process+0x5d8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	60da      	str	r2, [r3, #12]
 8009604:	e020      	b.n	8009648 <tcp_process+0x5e4>
 8009606:	bf00      	nop
 8009608:	20000564 	.word	0x20000564
 800960c:	2000055c 	.word	0x2000055c
 8009610:	20000562 	.word	0x20000562
 8009614:	20000558 	.word	0x20000558
 8009618:	20000548 	.word	0x20000548
 800961c:	200037e4 	.word	0x200037e4
 8009620:	200037e8 	.word	0x200037e8
 8009624:	08011f00 	.word	0x08011f00
 8009628:	080121a0 	.word	0x080121a0
 800962c:	08011f4c 	.word	0x08011f4c
 8009630:	20000560 	.word	0x20000560
 8009634:	20000565 	.word	0x20000565
 8009638:	20008ed8 	.word	0x20008ed8
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1d4      	bne.n	80095f2 <tcp_process+0x58e>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	60da      	str	r2, [r3, #12]
 800964e:	4b77      	ldr	r3, [pc, #476]	; (800982c <tcp_process+0x7c8>)
 8009650:	2201      	movs	r2, #1
 8009652:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	220a      	movs	r2, #10
 8009658:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800965a:	4b75      	ldr	r3, [pc, #468]	; (8009830 <tcp_process+0x7cc>)
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60da      	str	r2, [r3, #12]
 8009662:	4a73      	ldr	r2, [pc, #460]	; (8009830 <tcp_process+0x7cc>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	f003 f950 	bl	800c90c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800966c:	e0d2      	b.n	8009814 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	8b5b      	ldrh	r3, [r3, #26]
 8009672:	f043 0302 	orr.w	r3, r3, #2
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2208      	movs	r2, #8
 8009680:	751a      	strb	r2, [r3, #20]
      break;
 8009682:	e0c7      	b.n	8009814 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009684:	4b6b      	ldr	r3, [pc, #428]	; (8009834 <tcp_process+0x7d0>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 80c1 	beq.w	8009814 <tcp_process+0x7b0>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009696:	4b68      	ldr	r3, [pc, #416]	; (8009838 <tcp_process+0x7d4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	f040 80ba 	bne.w	8009814 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f040 80b5 	bne.w	8009814 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2206      	movs	r2, #6
 80096ae:	751a      	strb	r2, [r3, #20]
      break;
 80096b0:	e0b0      	b.n	8009814 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f9ca 	bl	8009a4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80096b8:	4b60      	ldr	r3, [pc, #384]	; (800983c <tcp_process+0x7d8>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 80a9 	beq.w	8009818 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	8b5b      	ldrh	r3, [r3, #26]
 80096ca:	f043 0302 	orr.w	r3, r3, #2
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7fe fd3b 	bl	8008150 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80096da:	4b59      	ldr	r3, [pc, #356]	; (8009840 <tcp_process+0x7dc>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d105      	bne.n	80096f0 <tcp_process+0x68c>
 80096e4:	4b56      	ldr	r3, [pc, #344]	; (8009840 <tcp_process+0x7dc>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	4a55      	ldr	r2, [pc, #340]	; (8009840 <tcp_process+0x7dc>)
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	e013      	b.n	8009718 <tcp_process+0x6b4>
 80096f0:	4b53      	ldr	r3, [pc, #332]	; (8009840 <tcp_process+0x7dc>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	e00c      	b.n	8009712 <tcp_process+0x6ae>
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d104      	bne.n	800970c <tcp_process+0x6a8>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	e005      	b.n	8009718 <tcp_process+0x6b4>
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1ef      	bne.n	80096f8 <tcp_process+0x694>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	60da      	str	r2, [r3, #12]
 800971e:	4b43      	ldr	r3, [pc, #268]	; (800982c <tcp_process+0x7c8>)
 8009720:	2201      	movs	r2, #1
 8009722:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	220a      	movs	r2, #10
 8009728:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800972a:	4b41      	ldr	r3, [pc, #260]	; (8009830 <tcp_process+0x7cc>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60da      	str	r2, [r3, #12]
 8009732:	4a3f      	ldr	r2, [pc, #252]	; (8009830 <tcp_process+0x7cc>)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	f003 f8e8 	bl	800c90c <tcp_timer_needed>
      }
      break;
 800973c:	e06c      	b.n	8009818 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f984 	bl	8009a4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009744:	4b3b      	ldr	r3, [pc, #236]	; (8009834 <tcp_process+0x7d0>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b00      	cmp	r3, #0
 800974e:	d065      	beq.n	800981c <tcp_process+0x7b8>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009754:	4b38      	ldr	r3, [pc, #224]	; (8009838 <tcp_process+0x7d4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d15f      	bne.n	800981c <tcp_process+0x7b8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d15b      	bne.n	800981c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7fe fcf3 	bl	8008150 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800976a:	4b35      	ldr	r3, [pc, #212]	; (8009840 <tcp_process+0x7dc>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d105      	bne.n	8009780 <tcp_process+0x71c>
 8009774:	4b32      	ldr	r3, [pc, #200]	; (8009840 <tcp_process+0x7dc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	4a31      	ldr	r2, [pc, #196]	; (8009840 <tcp_process+0x7dc>)
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	e013      	b.n	80097a8 <tcp_process+0x744>
 8009780:	4b2f      	ldr	r3, [pc, #188]	; (8009840 <tcp_process+0x7dc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	e00c      	b.n	80097a2 <tcp_process+0x73e>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	d104      	bne.n	800979c <tcp_process+0x738>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	60da      	str	r2, [r3, #12]
 800979a:	e005      	b.n	80097a8 <tcp_process+0x744>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1ef      	bne.n	8009788 <tcp_process+0x724>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	60da      	str	r2, [r3, #12]
 80097ae:	4b1f      	ldr	r3, [pc, #124]	; (800982c <tcp_process+0x7c8>)
 80097b0:	2201      	movs	r2, #1
 80097b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	220a      	movs	r2, #10
 80097b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80097ba:	4b1d      	ldr	r3, [pc, #116]	; (8009830 <tcp_process+0x7cc>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60da      	str	r2, [r3, #12]
 80097c2:	4a1b      	ldr	r2, [pc, #108]	; (8009830 <tcp_process+0x7cc>)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	f003 f8a0 	bl	800c90c <tcp_timer_needed>
      }
      break;
 80097cc:	e026      	b.n	800981c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f93c 	bl	8009a4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80097d4:	4b17      	ldr	r3, [pc, #92]	; (8009834 <tcp_process+0x7d0>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 0310 	and.w	r3, r3, #16
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01f      	beq.n	8009820 <tcp_process+0x7bc>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097e4:	4b14      	ldr	r3, [pc, #80]	; (8009838 <tcp_process+0x7d4>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d119      	bne.n	8009820 <tcp_process+0x7bc>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d115      	bne.n	8009820 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80097f4:	4b11      	ldr	r3, [pc, #68]	; (800983c <tcp_process+0x7d8>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f043 0310 	orr.w	r3, r3, #16
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	4b0f      	ldr	r3, [pc, #60]	; (800983c <tcp_process+0x7d8>)
 8009800:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009802:	e00d      	b.n	8009820 <tcp_process+0x7bc>
    default:
      break;
 8009804:	bf00      	nop
 8009806:	e00c      	b.n	8009822 <tcp_process+0x7be>
      break;
 8009808:	bf00      	nop
 800980a:	e00a      	b.n	8009822 <tcp_process+0x7be>
      break;
 800980c:	bf00      	nop
 800980e:	e008      	b.n	8009822 <tcp_process+0x7be>
      break;
 8009810:	bf00      	nop
 8009812:	e006      	b.n	8009822 <tcp_process+0x7be>
      break;
 8009814:	bf00      	nop
 8009816:	e004      	b.n	8009822 <tcp_process+0x7be>
      break;
 8009818:	bf00      	nop
 800981a:	e002      	b.n	8009822 <tcp_process+0x7be>
      break;
 800981c:	bf00      	nop
 800981e:	e000      	b.n	8009822 <tcp_process+0x7be>
      break;
 8009820:	bf00      	nop
  }
  return ERR_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3724      	adds	r7, #36	; 0x24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd90      	pop	{r4, r7, pc}
 800982c:	20008ed4 	.word	0x20008ed4
 8009830:	20008ee8 	.word	0x20008ee8
 8009834:	20000564 	.word	0x20000564
 8009838:	2000055c 	.word	0x2000055c
 800983c:	20000565 	.word	0x20000565
 8009840:	20008ed8 	.word	0x20008ed8

08009844 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <tcp_oos_insert_segment+0x1e>
 8009854:	4b3b      	ldr	r3, [pc, #236]	; (8009944 <tcp_oos_insert_segment+0x100>)
 8009856:	f240 421f 	movw	r2, #1055	; 0x41f
 800985a:	493b      	ldr	r1, [pc, #236]	; (8009948 <tcp_oos_insert_segment+0x104>)
 800985c:	483b      	ldr	r0, [pc, #236]	; (800994c <tcp_oos_insert_segment+0x108>)
 800985e:	f005 fe7b 	bl	800f558 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	899b      	ldrh	r3, [r3, #12]
 8009868:	b29b      	uxth	r3, r3
 800986a:	4618      	mov	r0, r3
 800986c:	f7fb fa4c 	bl	8004d08 <lwip_htons>
 8009870:	4603      	mov	r3, r0
 8009872:	b2db      	uxtb	r3, r3
 8009874:	f003 0301 	and.w	r3, r3, #1
 8009878:	2b00      	cmp	r3, #0
 800987a:	d028      	beq.n	80098ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800987c:	6838      	ldr	r0, [r7, #0]
 800987e:	f7fe f979 	bl	8007b74 <tcp_segs_free>
    next = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	603b      	str	r3, [r7, #0]
 8009886:	e056      	b.n	8009936 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	899b      	ldrh	r3, [r3, #12]
 800988e:	b29b      	uxth	r3, r3
 8009890:	4618      	mov	r0, r3
 8009892:	f7fb fa39 	bl	8004d08 <lwip_htons>
 8009896:	4603      	mov	r3, r0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00d      	beq.n	80098be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	899b      	ldrh	r3, [r3, #12]
 80098a8:	b29c      	uxth	r4, r3
 80098aa:	2001      	movs	r0, #1
 80098ac:	f7fb fa2c 	bl	8004d08 <lwip_htons>
 80098b0:	4603      	mov	r3, r0
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	4322      	orrs	r2, r4
 80098ba:	b292      	uxth	r2, r2
 80098bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7fe f968 	bl	8007b9e <tcp_seg_free>
    while (next &&
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00e      	beq.n	80098f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	891b      	ldrh	r3, [r3, #8]
 80098d8:	461a      	mov	r2, r3
 80098da:	4b1d      	ldr	r3, [pc, #116]	; (8009950 <tcp_oos_insert_segment+0x10c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	441a      	add	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	8909      	ldrh	r1, [r1, #8]
 80098ea:	440b      	add	r3, r1
 80098ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	daca      	bge.n	8009888 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01e      	beq.n	8009936 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	891b      	ldrh	r3, [r3, #8]
 80098fc:	461a      	mov	r2, r3
 80098fe:	4b14      	ldr	r3, [pc, #80]	; (8009950 <tcp_oos_insert_segment+0x10c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	441a      	add	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800990c:	2b00      	cmp	r3, #0
 800990e:	dd12      	ble.n	8009936 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	b29a      	uxth	r2, r3
 8009918:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <tcp_oos_insert_segment+0x10c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	b29a      	uxth	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	891b      	ldrh	r3, [r3, #8]
 800992e:	4619      	mov	r1, r3
 8009930:	4610      	mov	r0, r2
 8009932:	f7fc fb81 	bl	8006038 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	601a      	str	r2, [r3, #0]
}
 800993c:	bf00      	nop
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	bd90      	pop	{r4, r7, pc}
 8009944:	08011f00 	.word	0x08011f00
 8009948:	080121c0 	.word	0x080121c0
 800994c:	08011f4c 	.word	0x08011f4c
 8009950:	20000558 	.word	0x20000558

08009954 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009954:	b5b0      	push	{r4, r5, r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009962:	e03e      	b.n	80099e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	f7fc fd6e 	bl	8006454 <pbuf_clen>
 8009978:	4603      	mov	r3, r0
 800997a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009982:	8a7a      	ldrh	r2, [r7, #18]
 8009984:	429a      	cmp	r2, r3
 8009986:	d906      	bls.n	8009996 <tcp_free_acked_segments+0x42>
 8009988:	4b2a      	ldr	r3, [pc, #168]	; (8009a34 <tcp_free_acked_segments+0xe0>)
 800998a:	f240 4257 	movw	r2, #1111	; 0x457
 800998e:	492a      	ldr	r1, [pc, #168]	; (8009a38 <tcp_free_acked_segments+0xe4>)
 8009990:	482a      	ldr	r0, [pc, #168]	; (8009a3c <tcp_free_acked_segments+0xe8>)
 8009992:	f005 fde1 	bl	800f558 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800999c:	8a7b      	ldrh	r3, [r7, #18]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	891a      	ldrh	r2, [r3, #8]
 80099ac:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <tcp_free_acked_segments+0xec>)
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	4413      	add	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	4b22      	ldr	r3, [pc, #136]	; (8009a40 <tcp_free_acked_segments+0xec>)
 80099b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80099b8:	6978      	ldr	r0, [r7, #20]
 80099ba:	f7fe f8f0 	bl	8007b9e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00c      	beq.n	80099e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <tcp_free_acked_segments+0x8e>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <tcp_free_acked_segments+0x8e>
 80099d4:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <tcp_free_acked_segments+0xe0>)
 80099d6:	f240 4261 	movw	r2, #1121	; 0x461
 80099da:	491a      	ldr	r1, [pc, #104]	; (8009a44 <tcp_free_acked_segments+0xf0>)
 80099dc:	4817      	ldr	r0, [pc, #92]	; (8009a3c <tcp_free_acked_segments+0xe8>)
 80099de:	f005 fdbb 	bl	800f558 <iprintf>
  while (seg_list != NULL &&
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d020      	beq.n	8009a2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fb f99f 	bl	8004d32 <lwip_htonl>
 80099f4:	4604      	mov	r4, r0
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	891b      	ldrh	r3, [r3, #8]
 80099fa:	461d      	mov	r5, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	899b      	ldrh	r3, [r3, #12]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fb f97f 	bl	8004d08 <lwip_htons>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <tcp_free_acked_segments+0xc6>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <tcp_free_acked_segments+0xc8>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	442b      	add	r3, r5
 8009a1e:	18e2      	adds	r2, r4, r3
 8009a20:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <tcp_free_acked_segments+0xf4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	dd9c      	ble.n	8009964 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bdb0      	pop	{r4, r5, r7, pc}
 8009a34:	08011f00 	.word	0x08011f00
 8009a38:	080121e8 	.word	0x080121e8
 8009a3c:	08011f4c 	.word	0x08011f4c
 8009a40:	20000560 	.word	0x20000560
 8009a44:	08012210 	.word	0x08012210
 8009a48:	2000055c 	.word	0x2000055c

08009a4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009a4c:	b5b0      	push	{r4, r5, r7, lr}
 8009a4e:	b094      	sub	sp, #80	; 0x50
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <tcp_receive+0x20>
 8009a5e:	4ba6      	ldr	r3, [pc, #664]	; (8009cf8 <tcp_receive+0x2ac>)
 8009a60:	f240 427b 	movw	r2, #1147	; 0x47b
 8009a64:	49a5      	ldr	r1, [pc, #660]	; (8009cfc <tcp_receive+0x2b0>)
 8009a66:	48a6      	ldr	r0, [pc, #664]	; (8009d00 <tcp_receive+0x2b4>)
 8009a68:	f005 fd76 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	7d1b      	ldrb	r3, [r3, #20]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d806      	bhi.n	8009a82 <tcp_receive+0x36>
 8009a74:	4ba0      	ldr	r3, [pc, #640]	; (8009cf8 <tcp_receive+0x2ac>)
 8009a76:	f240 427c 	movw	r2, #1148	; 0x47c
 8009a7a:	49a2      	ldr	r1, [pc, #648]	; (8009d04 <tcp_receive+0x2b8>)
 8009a7c:	48a0      	ldr	r0, [pc, #640]	; (8009d00 <tcp_receive+0x2b4>)
 8009a7e:	f005 fd6b 	bl	800f558 <iprintf>

  if (flags & TCP_ACK) {
 8009a82:	4ba1      	ldr	r3, [pc, #644]	; (8009d08 <tcp_receive+0x2bc>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8263 	beq.w	8009f56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a96:	461a      	mov	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9c:	4413      	add	r3, r2
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aa4:	4b99      	ldr	r3, [pc, #612]	; (8009d0c <tcp_receive+0x2c0>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	db1b      	blt.n	8009ae6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ab2:	4b96      	ldr	r3, [pc, #600]	; (8009d0c <tcp_receive+0x2c0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d106      	bne.n	8009ac8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009abe:	4b94      	ldr	r3, [pc, #592]	; (8009d10 <tcp_receive+0x2c4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	db0e      	blt.n	8009ae6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009acc:	4b90      	ldr	r3, [pc, #576]	; (8009d10 <tcp_receive+0x2c4>)
 8009ace:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d125      	bne.n	8009b20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ad4:	4b8f      	ldr	r3, [pc, #572]	; (8009d14 <tcp_receive+0x2c8>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	89db      	ldrh	r3, [r3, #14]
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d91c      	bls.n	8009b20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009ae6:	4b8b      	ldr	r3, [pc, #556]	; (8009d14 <tcp_receive+0x2c8>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	89db      	ldrh	r3, [r3, #14]
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d205      	bcs.n	8009b10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009b10:	4b7e      	ldr	r3, [pc, #504]	; (8009d0c <tcp_receive+0x2c0>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009b18:	4b7d      	ldr	r3, [pc, #500]	; (8009d10 <tcp_receive+0x2c4>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009b20:	4b7b      	ldr	r3, [pc, #492]	; (8009d10 <tcp_receive+0x2c4>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dc58      	bgt.n	8009be0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009b2e:	4b7a      	ldr	r3, [pc, #488]	; (8009d18 <tcp_receive+0x2cc>)
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d14b      	bne.n	8009bce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009b40:	4413      	add	r3, r2
 8009b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d142      	bne.n	8009bce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	db3d      	blt.n	8009bce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b56:	4b6e      	ldr	r3, [pc, #440]	; (8009d10 <tcp_receive+0x2c4>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d137      	bne.n	8009bce <tcp_receive+0x182>
              found_dupack = 1;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b68:	2bff      	cmp	r3, #255	; 0xff
 8009b6a:	d007      	beq.n	8009b7c <tcp_receive+0x130>
                ++pcb->dupacks;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b72:	3301      	adds	r3, #1
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d91b      	bls.n	8009bbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b90:	4413      	add	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d30a      	bcc.n	8009bb4 <tcp_receive+0x168>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ba8:	4413      	add	r3, r2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009bb2:	e004      	b.n	8009bbe <tcp_receive+0x172>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d902      	bls.n	8009bce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f002 fb41 	bl	800c250 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f040 8160 	bne.w	8009e96 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bde:	e15a      	b.n	8009e96 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009be0:	4b4b      	ldr	r3, [pc, #300]	; (8009d10 <tcp_receive+0x2c4>)
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	3b01      	subs	r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f2c0 814d 	blt.w	8009e8c <tcp_receive+0x440>
 8009bf2:	4b47      	ldr	r3, [pc, #284]	; (8009d10 <tcp_receive+0x2c4>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f300 8145 	bgt.w	8009e8c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	8b5b      	ldrh	r3, [r3, #26]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d010      	beq.n	8009c30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	8b5b      	ldrh	r3, [r3, #26]
 8009c12:	f023 0304 	bic.w	r3, r3, #4
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c3e:	10db      	asrs	r3, r3, #3
 8009c40:	b21b      	sxth	r3, r3
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	4413      	add	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	b21a      	sxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009c58:	4b2d      	ldr	r3, [pc, #180]	; (8009d10 <tcp_receive+0x2c4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <tcp_receive+0x2c4>)
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7d1b      	ldrb	r3, [r3, #20]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	f240 8096 	bls.w	8009dae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d244      	bcs.n	8009d1c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	8b5b      	ldrh	r3, [r3, #26]
 8009c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <tcp_receive+0x256>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <tcp_receive+0x258>
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009ca8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cb2:	fb12 f303 	smulbb	r3, r2, r3
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	bf28      	it	cs
 8009cbe:	4613      	movcs	r3, r2
 8009cc0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009cc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009cca:	4413      	add	r3, r2
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d309      	bcc.n	8009cec <tcp_receive+0x2a0>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009cde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009ce0:	4413      	add	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009cea:	e060      	b.n	8009dae <tcp_receive+0x362>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009cf6:	e05a      	b.n	8009dae <tcp_receive+0x362>
 8009cf8:	08011f00 	.word	0x08011f00
 8009cfc:	08012230 	.word	0x08012230
 8009d00:	08011f4c 	.word	0x08011f4c
 8009d04:	0801224c 	.word	0x0801224c
 8009d08:	20000564 	.word	0x20000564
 8009d0c:	20000558 	.word	0x20000558
 8009d10:	2000055c 	.word	0x2000055c
 8009d14:	20000548 	.word	0x20000548
 8009d18:	20000562 	.word	0x20000562
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d24:	4413      	add	r3, r2
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d309      	bcc.n	8009d46 <tcp_receive+0x2fa>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009d38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d3a:	4413      	add	r3, r2
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009d44:	e004      	b.n	8009d50 <tcp_receive+0x304>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d326      	bcc.n	8009dae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d80:	4413      	add	r3, r2
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d30a      	bcc.n	8009da4 <tcp_receive+0x358>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d98:	4413      	add	r3, r2
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009da2:	e004      	b.n	8009dae <tcp_receive+0x362>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009daa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db6:	4a98      	ldr	r2, [pc, #608]	; (800a018 <tcp_receive+0x5cc>)
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fdcb 	bl	8009954 <tcp_free_acked_segments>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	4a93      	ldr	r2, [pc, #588]	; (800a01c <tcp_receive+0x5d0>)
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff fdc0 	bl	8009954 <tcp_free_acked_segments>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d104      	bne.n	8009dec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009de8:	861a      	strh	r2, [r3, #48]	; 0x30
 8009dea:	e002      	b.n	8009df2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009e0e:	4b84      	ldr	r3, [pc, #528]	; (800a020 <tcp_receive+0x5d4>)
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	4413      	add	r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	8b5b      	ldrh	r3, [r3, #26]
 8009e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d035      	beq.n	8009e94 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d118      	bne.n	8009e62 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00c      	beq.n	8009e52 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fa ff74 	bl	8004d32 <lwip_htonl>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dc20      	bgt.n	8009e94 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	8b5b      	ldrh	r3, [r3, #26]
 8009e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e60:	e018      	b.n	8009e94 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fa ff5f 	bl	8004d32 <lwip_htonl>
 8009e74:	4603      	mov	r3, r0
 8009e76:	1ae3      	subs	r3, r4, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc0b      	bgt.n	8009e94 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	8b5b      	ldrh	r3, [r3, #26]
 8009e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e8a:	e003      	b.n	8009e94 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f002 fbcd 	bl	800c62c <tcp_send_empty_ack>
 8009e92:	e000      	b.n	8009e96 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e94:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d05b      	beq.n	8009f56 <tcp_receive+0x50a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea2:	4b60      	ldr	r3, [pc, #384]	; (800a024 <tcp_receive+0x5d8>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da54      	bge.n	8009f56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009eac:	4b5e      	ldr	r3, [pc, #376]	; (800a028 <tcp_receive+0x5dc>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009ec0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009eca:	10db      	asrs	r3, r3, #3
 8009ecc:	b21b      	sxth	r3, r3
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ee4:	4413      	add	r3, r2
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	b21a      	sxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009eee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	da05      	bge.n	8009f02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009ef6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009efa:	425b      	negs	r3, r3
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009f02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009f0c:	109b      	asrs	r3, r3, #2
 8009f0e:	b21b      	sxth	r3, r3
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009f26:	4413      	add	r3, r2
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	b21a      	sxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009f36:	10db      	asrs	r3, r3, #3
 8009f38:	b21b      	sxth	r3, r3
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	4413      	add	r3, r2
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	b21a      	sxth	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009f56:	4b35      	ldr	r3, [pc, #212]	; (800a02c <tcp_receive+0x5e0>)
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 84e1 	beq.w	800a922 <tcp_receive+0xed6>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	7d1b      	ldrb	r3, [r3, #20]
 8009f64:	2b06      	cmp	r3, #6
 8009f66:	f200 84dc 	bhi.w	800a922 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f6e:	4b30      	ldr	r3, [pc, #192]	; (800a030 <tcp_receive+0x5e4>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f2c0 808e 	blt.w	800a098 <tcp_receive+0x64c>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f80:	4b2a      	ldr	r3, [pc, #168]	; (800a02c <tcp_receive+0x5e0>)
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	4619      	mov	r1, r3
 8009f86:	4b2a      	ldr	r3, [pc, #168]	; (800a030 <tcp_receive+0x5e4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	440b      	add	r3, r1
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	3301      	adds	r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f300 8081 	bgt.w	800a098 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009f96:	4b27      	ldr	r3, [pc, #156]	; (800a034 <tcp_receive+0x5e8>)
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fa0:	4b23      	ldr	r3, [pc, #140]	; (800a030 <tcp_receive+0x5e4>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009fa8:	4b22      	ldr	r3, [pc, #136]	; (800a034 <tcp_receive+0x5e8>)
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d106      	bne.n	8009fbe <tcp_receive+0x572>
 8009fb0:	4b21      	ldr	r3, [pc, #132]	; (800a038 <tcp_receive+0x5ec>)
 8009fb2:	f240 5294 	movw	r2, #1428	; 0x594
 8009fb6:	4921      	ldr	r1, [pc, #132]	; (800a03c <tcp_receive+0x5f0>)
 8009fb8:	4821      	ldr	r0, [pc, #132]	; (800a040 <tcp_receive+0x5f4>)
 8009fba:	f005 facd 	bl	800f558 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d906      	bls.n	8009fd6 <tcp_receive+0x58a>
 8009fc8:	4b1b      	ldr	r3, [pc, #108]	; (800a038 <tcp_receive+0x5ec>)
 8009fca:	f240 5295 	movw	r2, #1429	; 0x595
 8009fce:	491d      	ldr	r1, [pc, #116]	; (800a044 <tcp_receive+0x5f8>)
 8009fd0:	481b      	ldr	r0, [pc, #108]	; (800a040 <tcp_receive+0x5f4>)
 8009fd2:	f005 fac1 	bl	800f558 <iprintf>
      off = (u16_t)off32;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009fdc:	4b15      	ldr	r3, [pc, #84]	; (800a034 <tcp_receive+0x5e8>)
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	891b      	ldrh	r3, [r3, #8]
 8009fe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d906      	bls.n	8009ff8 <tcp_receive+0x5ac>
 8009fea:	4b13      	ldr	r3, [pc, #76]	; (800a038 <tcp_receive+0x5ec>)
 8009fec:	f240 5297 	movw	r2, #1431	; 0x597
 8009ff0:	4915      	ldr	r1, [pc, #84]	; (800a048 <tcp_receive+0x5fc>)
 8009ff2:	4813      	ldr	r0, [pc, #76]	; (800a040 <tcp_receive+0x5f4>)
 8009ff4:	f005 fab0 	bl	800f558 <iprintf>
      inseg.len -= off;
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <tcp_receive+0x5e8>)
 8009ffa:	891a      	ldrh	r2, [r3, #8]
 8009ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	b29a      	uxth	r2, r3
 800a004:	4b0b      	ldr	r3, [pc, #44]	; (800a034 <tcp_receive+0x5e8>)
 800a006:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <tcp_receive+0x5e8>)
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	891a      	ldrh	r2, [r3, #8]
 800a00e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a016:	e029      	b.n	800a06c <tcp_receive+0x620>
 800a018:	08012268 	.word	0x08012268
 800a01c:	08012270 	.word	0x08012270
 800a020:	20000560 	.word	0x20000560
 800a024:	2000055c 	.word	0x2000055c
 800a028:	20008edc 	.word	0x20008edc
 800a02c:	20000562 	.word	0x20000562
 800a030:	20000558 	.word	0x20000558
 800a034:	20000538 	.word	0x20000538
 800a038:	08011f00 	.word	0x08011f00
 800a03c:	08012278 	.word	0x08012278
 800a040:	08011f4c 	.word	0x08011f4c
 800a044:	08012288 	.word	0x08012288
 800a048:	08012298 	.word	0x08012298
        off -= p->len;
 800a04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04e:	895b      	ldrh	r3, [r3, #10]
 800a050:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a05c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a05e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a062:	2200      	movs	r2, #0
 800a064:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a06c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a06e:	895b      	ldrh	r3, [r3, #10]
 800a070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a074:	429a      	cmp	r2, r3
 800a076:	d8e9      	bhi.n	800a04c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a07c:	4619      	mov	r1, r3
 800a07e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a080:	f7fc f8da 	bl	8006238 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	4a91      	ldr	r2, [pc, #580]	; (800a2d0 <tcp_receive+0x884>)
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	4b91      	ldr	r3, [pc, #580]	; (800a2d4 <tcp_receive+0x888>)
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	4a8f      	ldr	r2, [pc, #572]	; (800a2d0 <tcp_receive+0x884>)
 800a092:	6812      	ldr	r2, [r2, #0]
 800a094:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a096:	e00d      	b.n	800a0b4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a098:	4b8d      	ldr	r3, [pc, #564]	; (800a2d0 <tcp_receive+0x884>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da06      	bge.n	800a0b4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8b5b      	ldrh	r3, [r3, #26]
 800a0aa:	f043 0302 	orr.w	r3, r3, #2
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a0b4:	4b86      	ldr	r3, [pc, #536]	; (800a2d0 <tcp_receive+0x884>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f2c0 842a 	blt.w	800a918 <tcp_receive+0xecc>
 800a0c4:	4b82      	ldr	r3, [pc, #520]	; (800a2d0 <tcp_receive+0x884>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0d0:	440b      	add	r3, r1
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f300 841e 	bgt.w	800a918 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0e0:	4b7b      	ldr	r3, [pc, #492]	; (800a2d0 <tcp_receive+0x884>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	f040 829a 	bne.w	800a61e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a0ea:	4b7a      	ldr	r3, [pc, #488]	; (800a2d4 <tcp_receive+0x888>)
 800a0ec:	891c      	ldrh	r4, [r3, #8]
 800a0ee:	4b79      	ldr	r3, [pc, #484]	; (800a2d4 <tcp_receive+0x888>)
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	899b      	ldrh	r3, [r3, #12]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fa fe06 	bl	8004d08 <lwip_htons>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <tcp_receive+0x6c0>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <tcp_receive+0x6c2>
 800a10c:	2300      	movs	r3, #0
 800a10e:	4423      	add	r3, r4
 800a110:	b29a      	uxth	r2, r3
 800a112:	4b71      	ldr	r3, [pc, #452]	; (800a2d8 <tcp_receive+0x88c>)
 800a114:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a11a:	4b6f      	ldr	r3, [pc, #444]	; (800a2d8 <tcp_receive+0x88c>)
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d275      	bcs.n	800a20e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a122:	4b6c      	ldr	r3, [pc, #432]	; (800a2d4 <tcp_receive+0x888>)
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	899b      	ldrh	r3, [r3, #12]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fa fdec 	bl	8004d08 <lwip_htons>
 800a130:	4603      	mov	r3, r0
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01f      	beq.n	800a17c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a13c:	4b65      	ldr	r3, [pc, #404]	; (800a2d4 <tcp_receive+0x888>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	899b      	ldrh	r3, [r3, #12]
 800a142:	b29b      	uxth	r3, r3
 800a144:	b21b      	sxth	r3, r3
 800a146:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a14a:	b21c      	sxth	r4, r3
 800a14c:	4b61      	ldr	r3, [pc, #388]	; (800a2d4 <tcp_receive+0x888>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	899b      	ldrh	r3, [r3, #12]
 800a152:	b29b      	uxth	r3, r3
 800a154:	4618      	mov	r0, r3
 800a156:	f7fa fdd7 	bl	8004d08 <lwip_htons>
 800a15a:	4603      	mov	r3, r0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a164:	b29b      	uxth	r3, r3
 800a166:	4618      	mov	r0, r3
 800a168:	f7fa fdce 	bl	8004d08 <lwip_htons>
 800a16c:	4603      	mov	r3, r0
 800a16e:	b21b      	sxth	r3, r3
 800a170:	4323      	orrs	r3, r4
 800a172:	b21a      	sxth	r2, r3
 800a174:	4b57      	ldr	r3, [pc, #348]	; (800a2d4 <tcp_receive+0x888>)
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	b292      	uxth	r2, r2
 800a17a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a180:	4b54      	ldr	r3, [pc, #336]	; (800a2d4 <tcp_receive+0x888>)
 800a182:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a184:	4b53      	ldr	r3, [pc, #332]	; (800a2d4 <tcp_receive+0x888>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	899b      	ldrh	r3, [r3, #12]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fa fdbb 	bl	8004d08 <lwip_htons>
 800a192:	4603      	mov	r3, r0
 800a194:	b2db      	uxtb	r3, r3
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d005      	beq.n	800a1aa <tcp_receive+0x75e>
            inseg.len -= 1;
 800a19e:	4b4d      	ldr	r3, [pc, #308]	; (800a2d4 <tcp_receive+0x888>)
 800a1a0:	891b      	ldrh	r3, [r3, #8]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	4b4b      	ldr	r3, [pc, #300]	; (800a2d4 <tcp_receive+0x888>)
 800a1a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a1aa:	4b4a      	ldr	r3, [pc, #296]	; (800a2d4 <tcp_receive+0x888>)
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	4a49      	ldr	r2, [pc, #292]	; (800a2d4 <tcp_receive+0x888>)
 800a1b0:	8912      	ldrh	r2, [r2, #8]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fb ff3f 	bl	8006038 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a1ba:	4b46      	ldr	r3, [pc, #280]	; (800a2d4 <tcp_receive+0x888>)
 800a1bc:	891c      	ldrh	r4, [r3, #8]
 800a1be:	4b45      	ldr	r3, [pc, #276]	; (800a2d4 <tcp_receive+0x888>)
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	899b      	ldrh	r3, [r3, #12]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fa fd9e 	bl	8004d08 <lwip_htons>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	f003 0303 	and.w	r3, r3, #3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <tcp_receive+0x790>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e000      	b.n	800a1de <tcp_receive+0x792>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4423      	add	r3, r4
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	4b3d      	ldr	r3, [pc, #244]	; (800a2d8 <tcp_receive+0x88c>)
 800a1e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a1e6:	4b3c      	ldr	r3, [pc, #240]	; (800a2d8 <tcp_receive+0x88c>)
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4b38      	ldr	r3, [pc, #224]	; (800a2d0 <tcp_receive+0x884>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	441a      	add	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1fa:	440b      	add	r3, r1
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d006      	beq.n	800a20e <tcp_receive+0x7c2>
 800a200:	4b36      	ldr	r3, [pc, #216]	; (800a2dc <tcp_receive+0x890>)
 800a202:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a206:	4936      	ldr	r1, [pc, #216]	; (800a2e0 <tcp_receive+0x894>)
 800a208:	4836      	ldr	r0, [pc, #216]	; (800a2e4 <tcp_receive+0x898>)
 800a20a:	f005 f9a5 	bl	800f558 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 80e7 	beq.w	800a3e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a218:	4b2e      	ldr	r3, [pc, #184]	; (800a2d4 <tcp_receive+0x888>)
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	899b      	ldrh	r3, [r3, #12]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4618      	mov	r0, r3
 800a222:	f7fa fd71 	bl	8004d08 <lwip_htons>
 800a226:	4603      	mov	r3, r0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d010      	beq.n	800a254 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a232:	e00a      	b.n	800a24a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7fd fcaa 	bl	8007b9e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f0      	bne.n	800a234 <tcp_receive+0x7e8>
 800a252:	e0c8      	b.n	800a3e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a25a:	e052      	b.n	800a302 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	899b      	ldrh	r3, [r3, #12]
 800a262:	b29b      	uxth	r3, r3
 800a264:	4618      	mov	r0, r3
 800a266:	f7fa fd4f 	bl	8004d08 <lwip_htons>
 800a26a:	4603      	mov	r3, r0
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d03d      	beq.n	800a2f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a276:	4b17      	ldr	r3, [pc, #92]	; (800a2d4 <tcp_receive+0x888>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	899b      	ldrh	r3, [r3, #12]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fa fd42 	bl	8004d08 <lwip_htons>
 800a284:	4603      	mov	r3, r0
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d130      	bne.n	800a2f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a290:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <tcp_receive+0x888>)
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	899b      	ldrh	r3, [r3, #12]
 800a296:	b29c      	uxth	r4, r3
 800a298:	2001      	movs	r0, #1
 800a29a:	f7fa fd35 	bl	8004d08 <lwip_htons>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <tcp_receive+0x888>)
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	4322      	orrs	r2, r4
 800a2a8:	b292      	uxth	r2, r2
 800a2aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <tcp_receive+0x888>)
 800a2ae:	891c      	ldrh	r4, [r3, #8]
 800a2b0:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <tcp_receive+0x888>)
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	899b      	ldrh	r3, [r3, #12]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fa fd25 	bl	8004d08 <lwip_htons>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00e      	beq.n	800a2e8 <tcp_receive+0x89c>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e00d      	b.n	800a2ea <tcp_receive+0x89e>
 800a2ce:	bf00      	nop
 800a2d0:	20000558 	.word	0x20000558
 800a2d4:	20000538 	.word	0x20000538
 800a2d8:	20000562 	.word	0x20000562
 800a2dc:	08011f00 	.word	0x08011f00
 800a2e0:	080122a8 	.word	0x080122a8
 800a2e4:	08011f4c 	.word	0x08011f4c
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4423      	add	r3, r4
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	4b98      	ldr	r3, [pc, #608]	; (800a550 <tcp_receive+0xb04>)
 800a2f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a2fc:	6938      	ldr	r0, [r7, #16]
 800a2fe:	f7fd fc4e 	bl	8007b9e <tcp_seg_free>
            while (next &&
 800a302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00e      	beq.n	800a326 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a308:	4b91      	ldr	r3, [pc, #580]	; (800a550 <tcp_receive+0xb04>)
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	4b91      	ldr	r3, [pc, #580]	; (800a554 <tcp_receive+0xb08>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	441a      	add	r2, r3
 800a314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a31c:	8909      	ldrh	r1, [r1, #8]
 800a31e:	440b      	add	r3, r1
 800a320:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a322:	2b00      	cmp	r3, #0
 800a324:	da9a      	bge.n	800a25c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d059      	beq.n	800a3e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a32c:	4b88      	ldr	r3, [pc, #544]	; (800a550 <tcp_receive+0xb04>)
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	4b88      	ldr	r3, [pc, #544]	; (800a554 <tcp_receive+0xb08>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	441a      	add	r2, r3
 800a338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a340:	2b00      	cmp	r3, #0
 800a342:	dd4d      	ble.n	800a3e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	4b81      	ldr	r3, [pc, #516]	; (800a554 <tcp_receive+0xb08>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	b29b      	uxth	r3, r3
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	b29a      	uxth	r2, r3
 800a356:	4b80      	ldr	r3, [pc, #512]	; (800a558 <tcp_receive+0xb0c>)
 800a358:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a35a:	4b7f      	ldr	r3, [pc, #508]	; (800a558 <tcp_receive+0xb0c>)
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	899b      	ldrh	r3, [r3, #12]
 800a360:	b29b      	uxth	r3, r3
 800a362:	4618      	mov	r0, r3
 800a364:	f7fa fcd0 	bl	8004d08 <lwip_htons>
 800a368:	4603      	mov	r3, r0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <tcp_receive+0x934>
                inseg.len -= 1;
 800a374:	4b78      	ldr	r3, [pc, #480]	; (800a558 <tcp_receive+0xb0c>)
 800a376:	891b      	ldrh	r3, [r3, #8]
 800a378:	3b01      	subs	r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	4b76      	ldr	r3, [pc, #472]	; (800a558 <tcp_receive+0xb0c>)
 800a37e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a380:	4b75      	ldr	r3, [pc, #468]	; (800a558 <tcp_receive+0xb0c>)
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4a74      	ldr	r2, [pc, #464]	; (800a558 <tcp_receive+0xb0c>)
 800a386:	8912      	ldrh	r2, [r2, #8]
 800a388:	4611      	mov	r1, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fb fe54 	bl	8006038 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a390:	4b71      	ldr	r3, [pc, #452]	; (800a558 <tcp_receive+0xb0c>)
 800a392:	891c      	ldrh	r4, [r3, #8]
 800a394:	4b70      	ldr	r3, [pc, #448]	; (800a558 <tcp_receive+0xb0c>)
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	899b      	ldrh	r3, [r3, #12]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fa fcb3 	bl	8004d08 <lwip_htons>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	f003 0303 	and.w	r3, r3, #3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <tcp_receive+0x966>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <tcp_receive+0x968>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4423      	add	r3, r4
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	4b65      	ldr	r3, [pc, #404]	; (800a550 <tcp_receive+0xb04>)
 800a3ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a3bc:	4b64      	ldr	r3, [pc, #400]	; (800a550 <tcp_receive+0xb04>)
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b64      	ldr	r3, [pc, #400]	; (800a554 <tcp_receive+0xb08>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	441a      	add	r2, r3
 800a3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d006      	beq.n	800a3e0 <tcp_receive+0x994>
 800a3d2:	4b62      	ldr	r3, [pc, #392]	; (800a55c <tcp_receive+0xb10>)
 800a3d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a3d8:	4961      	ldr	r1, [pc, #388]	; (800a560 <tcp_receive+0xb14>)
 800a3da:	4862      	ldr	r0, [pc, #392]	; (800a564 <tcp_receive+0xb18>)
 800a3dc:	f005 f8bc 	bl	800f558 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a3e6:	4b5a      	ldr	r3, [pc, #360]	; (800a550 <tcp_receive+0xb04>)
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4b59      	ldr	r3, [pc, #356]	; (800a554 <tcp_receive+0xb08>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	441a      	add	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3fa:	4b55      	ldr	r3, [pc, #340]	; (800a550 <tcp_receive+0xb04>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d206      	bcs.n	800a410 <tcp_receive+0x9c4>
 800a402:	4b56      	ldr	r3, [pc, #344]	; (800a55c <tcp_receive+0xb10>)
 800a404:	f240 6207 	movw	r2, #1543	; 0x607
 800a408:	4957      	ldr	r1, [pc, #348]	; (800a568 <tcp_receive+0xb1c>)
 800a40a:	4856      	ldr	r0, [pc, #344]	; (800a564 <tcp_receive+0xb18>)
 800a40c:	f005 f8a4 	bl	800f558 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a414:	4b4e      	ldr	r3, [pc, #312]	; (800a550 <tcp_receive+0xb04>)
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7fc fe97 	bl	8007154 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a426:	4b4c      	ldr	r3, [pc, #304]	; (800a558 <tcp_receive+0xb0c>)
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	891b      	ldrh	r3, [r3, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a430:	4b49      	ldr	r3, [pc, #292]	; (800a558 <tcp_receive+0xb0c>)
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	4a4d      	ldr	r2, [pc, #308]	; (800a56c <tcp_receive+0xb20>)
 800a436:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a438:	4b47      	ldr	r3, [pc, #284]	; (800a558 <tcp_receive+0xb0c>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a43e:	4b46      	ldr	r3, [pc, #280]	; (800a558 <tcp_receive+0xb0c>)
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	899b      	ldrh	r3, [r3, #12]
 800a444:	b29b      	uxth	r3, r3
 800a446:	4618      	mov	r0, r3
 800a448:	f7fa fc5e 	bl	8004d08 <lwip_htons>
 800a44c:	4603      	mov	r3, r0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 80b8 	beq.w	800a5ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a45a:	4b45      	ldr	r3, [pc, #276]	; (800a570 <tcp_receive+0xb24>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f043 0320 	orr.w	r3, r3, #32
 800a462:	b2da      	uxtb	r2, r3
 800a464:	4b42      	ldr	r3, [pc, #264]	; (800a570 <tcp_receive+0xb24>)
 800a466:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a468:	e0af      	b.n	800a5ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a46e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	4a36      	ldr	r2, [pc, #216]	; (800a554 <tcp_receive+0xb08>)
 800a47a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	891b      	ldrh	r3, [r3, #8]
 800a480:	461c      	mov	r4, r3
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	899b      	ldrh	r3, [r3, #12]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fa fc3c 	bl	8004d08 <lwip_htons>
 800a490:	4603      	mov	r3, r0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <tcp_receive+0xa54>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <tcp_receive+0xa56>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	191a      	adds	r2, r3, r4
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	441a      	add	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b2:	461c      	mov	r4, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	891b      	ldrh	r3, [r3, #8]
 800a4b8:	461d      	mov	r5, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	899b      	ldrh	r3, [r3, #12]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fa fc20 	bl	8004d08 <lwip_htons>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <tcp_receive+0xa8c>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <tcp_receive+0xa8e>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	442b      	add	r3, r5
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	d206      	bcs.n	800a4ee <tcp_receive+0xaa2>
 800a4e0:	4b1e      	ldr	r3, [pc, #120]	; (800a55c <tcp_receive+0xb10>)
 800a4e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800a4e6:	4923      	ldr	r1, [pc, #140]	; (800a574 <tcp_receive+0xb28>)
 800a4e8:	481e      	ldr	r0, [pc, #120]	; (800a564 <tcp_receive+0xb18>)
 800a4ea:	f005 f835 	bl	800f558 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	891b      	ldrh	r3, [r3, #8]
 800a4f2:	461c      	mov	r4, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	899b      	ldrh	r3, [r3, #12]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fa fc03 	bl	8004d08 <lwip_htons>
 800a502:	4603      	mov	r3, r0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <tcp_receive+0xac6>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <tcp_receive+0xac8>
 800a512:	2300      	movs	r3, #0
 800a514:	1919      	adds	r1, r3, r4
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a51a:	b28b      	uxth	r3, r1
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fc fe15 	bl	8007154 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	891b      	ldrh	r3, [r3, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d028      	beq.n	800a586 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a534:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <tcp_receive+0xb20>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d01d      	beq.n	800a578 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <tcp_receive+0xb20>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fb ffbe 	bl	80064c8 <pbuf_cat>
 800a54c:	e018      	b.n	800a580 <tcp_receive+0xb34>
 800a54e:	bf00      	nop
 800a550:	20000562 	.word	0x20000562
 800a554:	20000558 	.word	0x20000558
 800a558:	20000538 	.word	0x20000538
 800a55c:	08011f00 	.word	0x08011f00
 800a560:	080122e0 	.word	0x080122e0
 800a564:	08011f4c 	.word	0x08011f4c
 800a568:	0801231c 	.word	0x0801231c
 800a56c:	20000568 	.word	0x20000568
 800a570:	20000565 	.word	0x20000565
 800a574:	0801233c 	.word	0x0801233c
            } else {
              recv_data = cseg->p;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	4a70      	ldr	r2, [pc, #448]	; (800a740 <tcp_receive+0xcf4>)
 800a57e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2200      	movs	r2, #0
 800a584:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	899b      	ldrh	r3, [r3, #12]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fa fbba 	bl	8004d08 <lwip_htons>
 800a594:	4603      	mov	r3, r0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00d      	beq.n	800a5bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a5a0:	4b68      	ldr	r3, [pc, #416]	; (800a744 <tcp_receive+0xcf8>)
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	f043 0320 	orr.w	r3, r3, #32
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	4b66      	ldr	r3, [pc, #408]	; (800a744 <tcp_receive+0xcf8>)
 800a5ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	7d1b      	ldrb	r3, [r3, #20]
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d102      	bne.n	800a5bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2207      	movs	r2, #7
 800a5ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a5c4:	68b8      	ldr	r0, [r7, #8]
 800a5c6:	f7fd faea 	bl	8007b9e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d008      	beq.n	800a5e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	f43f af43 	beq.w	800a46a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	8b5b      	ldrh	r3, [r3, #26]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00e      	beq.n	800a60e <tcp_receive+0xbc2>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	8b5b      	ldrh	r3, [r3, #26]
 800a5f4:	f023 0301 	bic.w	r3, r3, #1
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	835a      	strh	r2, [r3, #26]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	8b5b      	ldrh	r3, [r3, #26]
 800a602:	f043 0302 	orr.w	r3, r3, #2
 800a606:	b29a      	uxth	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a60c:	e188      	b.n	800a920 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	8b5b      	ldrh	r3, [r3, #26]
 800a612:	f043 0301 	orr.w	r3, r3, #1
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a61c:	e180      	b.n	800a920 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a626:	4848      	ldr	r0, [pc, #288]	; (800a748 <tcp_receive+0xcfc>)
 800a628:	f7fd faf0 	bl	8007c0c <tcp_seg_copy>
 800a62c:	4602      	mov	r2, r0
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	675a      	str	r2, [r3, #116]	; 0x74
 800a632:	e16d      	b.n	800a910 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a63e:	e157      	b.n	800a8f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4b41      	ldr	r3, [pc, #260]	; (800a74c <tcp_receive+0xd00>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d11d      	bne.n	800a68a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a64e:	4b3e      	ldr	r3, [pc, #248]	; (800a748 <tcp_receive+0xcfc>)
 800a650:	891a      	ldrh	r2, [r3, #8]
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	f240 814f 	bls.w	800a8fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a65c:	483a      	ldr	r0, [pc, #232]	; (800a748 <tcp_receive+0xcfc>)
 800a65e:	f7fd fad5 	bl	8007c0c <tcp_seg_copy>
 800a662:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 8149 	beq.w	800a8fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	e002      	b.n	800a680 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a682:	6978      	ldr	r0, [r7, #20]
 800a684:	f7ff f8de 	bl	8009844 <tcp_oos_insert_segment>
                }
                break;
 800a688:	e139      	b.n	800a8fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d117      	bne.n	800a6c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a690:	4b2e      	ldr	r3, [pc, #184]	; (800a74c <tcp_receive+0xd00>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	da57      	bge.n	800a750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a6a0:	4829      	ldr	r0, [pc, #164]	; (800a748 <tcp_receive+0xcfc>)
 800a6a2:	f7fd fab3 	bl	8007c0c <tcp_seg_copy>
 800a6a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8129 	beq.w	800a902 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a6b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6b8:	69b8      	ldr	r0, [r7, #24]
 800a6ba:	f7ff f8c3 	bl	8009844 <tcp_oos_insert_segment>
                  }
                  break;
 800a6be:	e120      	b.n	800a902 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a6c0:	4b22      	ldr	r3, [pc, #136]	; (800a74c <tcp_receive+0xd00>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	db3e      	blt.n	800a750 <tcp_receive+0xd04>
 800a6d2:	4b1e      	ldr	r3, [pc, #120]	; (800a74c <tcp_receive+0xd00>)
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	3301      	adds	r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dc35      	bgt.n	800a750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a6e4:	4818      	ldr	r0, [pc, #96]	; (800a748 <tcp_receive+0xcfc>)
 800a6e6:	f7fd fa91 	bl	8007c0c <tcp_seg_copy>
 800a6ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 8109 	beq.w	800a906 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6fc:	8912      	ldrh	r2, [r2, #8]
 800a6fe:	441a      	add	r2, r3
 800a700:	4b12      	ldr	r3, [pc, #72]	; (800a74c <tcp_receive+0xd00>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd12      	ble.n	800a730 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a70a:	4b10      	ldr	r3, [pc, #64]	; (800a74c <tcp_receive+0xd00>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	b29a      	uxth	r2, r3
 800a710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	b29b      	uxth	r3, r3
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a71e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a726:	891b      	ldrh	r3, [r3, #8]
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f7fb fc84 	bl	8006038 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	69fa      	ldr	r2, [r7, #28]
 800a734:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a738:	69f8      	ldr	r0, [r7, #28]
 800a73a:	f7ff f883 	bl	8009844 <tcp_oos_insert_segment>
                  }
                  break;
 800a73e:	e0e2      	b.n	800a906 <tcp_receive+0xeba>
 800a740:	20000568 	.word	0x20000568
 800a744:	20000565 	.word	0x20000565
 800a748:	20000538 	.word	0x20000538
 800a74c:	20000558 	.word	0x20000558
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 80c6 	bne.w	800a8ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a75e:	4b80      	ldr	r3, [pc, #512]	; (800a960 <tcp_receive+0xf14>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f340 80bd 	ble.w	800a8ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	899b      	ldrh	r3, [r3, #12]
 800a776:	b29b      	uxth	r3, r3
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fa fac5 	bl	8004d08 <lwip_htons>
 800a77e:	4603      	mov	r3, r0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	f040 80bf 	bne.w	800a90a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a78c:	4875      	ldr	r0, [pc, #468]	; (800a964 <tcp_receive+0xf18>)
 800a78e:	f7fd fa3d 	bl	8007c0c <tcp_seg_copy>
 800a792:	4602      	mov	r2, r0
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80b6 	beq.w	800a90e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7aa:	8912      	ldrh	r2, [r2, #8]
 800a7ac:	441a      	add	r2, r3
 800a7ae:	4b6c      	ldr	r3, [pc, #432]	; (800a960 <tcp_receive+0xf14>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dd12      	ble.n	800a7de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a7b8:	4b69      	ldr	r3, [pc, #420]	; (800a960 <tcp_receive+0xf14>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	891b      	ldrh	r3, [r3, #8]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f7fb fc2d 	bl	8006038 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a7de:	4b62      	ldr	r3, [pc, #392]	; (800a968 <tcp_receive+0xf1c>)
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4b5e      	ldr	r3, [pc, #376]	; (800a960 <tcp_receive+0xf14>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7f2:	440b      	add	r3, r1
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f340 8089 	ble.w	800a90e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	899b      	ldrh	r3, [r3, #12]
 800a804:	b29b      	uxth	r3, r3
 800a806:	4618      	mov	r0, r3
 800a808:	f7fa fa7e 	bl	8004d08 <lwip_htons>
 800a80c:	4603      	mov	r3, r0
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d022      	beq.n	800a85e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	899b      	ldrh	r3, [r3, #12]
 800a820:	b29b      	uxth	r3, r3
 800a822:	b21b      	sxth	r3, r3
 800a824:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a828:	b21c      	sxth	r4, r3
 800a82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	899b      	ldrh	r3, [r3, #12]
 800a832:	b29b      	uxth	r3, r3
 800a834:	4618      	mov	r0, r3
 800a836:	f7fa fa67 	bl	8004d08 <lwip_htons>
 800a83a:	4603      	mov	r3, r0
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	b29b      	uxth	r3, r3
 800a840:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a844:	b29b      	uxth	r3, r3
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa fa5e 	bl	8004d08 <lwip_htons>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b21b      	sxth	r3, r3
 800a850:	4323      	orrs	r3, r4
 800a852:	b21a      	sxth	r2, r3
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	b292      	uxth	r2, r2
 800a85c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	b29a      	uxth	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a868:	4413      	add	r3, r2
 800a86a:	b299      	uxth	r1, r3
 800a86c:	4b3c      	ldr	r3, [pc, #240]	; (800a960 <tcp_receive+0xf14>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	b29a      	uxth	r2, r3
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	1a8a      	subs	r2, r1, r2
 800a878:	b292      	uxth	r2, r2
 800a87a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	891b      	ldrh	r3, [r3, #8]
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7fb fbd4 	bl	8006038 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	891c      	ldrh	r4, [r3, #8]
 800a896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	899b      	ldrh	r3, [r3, #12]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fa fa31 	bl	8004d08 <lwip_htons>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <tcp_receive+0xe6a>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <tcp_receive+0xe6c>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4423      	add	r3, r4
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <tcp_receive+0xf1c>)
 800a8be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a8c0:	4b29      	ldr	r3, [pc, #164]	; (800a968 <tcp_receive+0xf1c>)
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4b26      	ldr	r3, [pc, #152]	; (800a960 <tcp_receive+0xf14>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	441a      	add	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8d4:	440b      	add	r3, r1
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d019      	beq.n	800a90e <tcp_receive+0xec2>
 800a8da:	4b24      	ldr	r3, [pc, #144]	; (800a96c <tcp_receive+0xf20>)
 800a8dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a8e0:	4923      	ldr	r1, [pc, #140]	; (800a970 <tcp_receive+0xf24>)
 800a8e2:	4824      	ldr	r0, [pc, #144]	; (800a974 <tcp_receive+0xf28>)
 800a8e4:	f004 fe38 	bl	800f558 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a8e8:	e011      	b.n	800a90e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f47f aea4 	bne.w	800a640 <tcp_receive+0xbf4>
 800a8f8:	e00a      	b.n	800a910 <tcp_receive+0xec4>
                break;
 800a8fa:	bf00      	nop
 800a8fc:	e008      	b.n	800a910 <tcp_receive+0xec4>
                break;
 800a8fe:	bf00      	nop
 800a900:	e006      	b.n	800a910 <tcp_receive+0xec4>
                  break;
 800a902:	bf00      	nop
 800a904:	e004      	b.n	800a910 <tcp_receive+0xec4>
                  break;
 800a906:	bf00      	nop
 800a908:	e002      	b.n	800a910 <tcp_receive+0xec4>
                  break;
 800a90a:	bf00      	nop
 800a90c:	e000      	b.n	800a910 <tcp_receive+0xec4>
                break;
 800a90e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 fe8b 	bl	800c62c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a916:	e003      	b.n	800a920 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 fe87 	bl	800c62c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a91e:	e01a      	b.n	800a956 <tcp_receive+0xf0a>
 800a920:	e019      	b.n	800a956 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a922:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <tcp_receive+0xf14>)
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	db0a      	blt.n	800a946 <tcp_receive+0xefa>
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <tcp_receive+0xf14>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a93c:	440b      	add	r3, r1
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	3301      	adds	r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd07      	ble.n	800a956 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	8b5b      	ldrh	r3, [r3, #26]
 800a94a:	f043 0302 	orr.w	r3, r3, #2
 800a94e:	b29a      	uxth	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a954:	e7ff      	b.n	800a956 <tcp_receive+0xf0a>
 800a956:	bf00      	nop
 800a958:	3750      	adds	r7, #80	; 0x50
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bdb0      	pop	{r4, r5, r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000558 	.word	0x20000558
 800a964:	20000538 	.word	0x20000538
 800a968:	20000562 	.word	0x20000562
 800a96c:	08011f00 	.word	0x08011f00
 800a970:	080122a8 	.word	0x080122a8
 800a974:	08011f4c 	.word	0x08011f4c

0800a978 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a97e:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <tcp_get_next_optbyte+0x5c>)
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	b291      	uxth	r1, r2
 800a986:	4a13      	ldr	r2, [pc, #76]	; (800a9d4 <tcp_get_next_optbyte+0x5c>)
 800a988:	8011      	strh	r1, [r2, #0]
 800a98a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a98c:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <tcp_get_next_optbyte+0x60>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <tcp_get_next_optbyte+0x26>
 800a994:	4b11      	ldr	r3, [pc, #68]	; (800a9dc <tcp_get_next_optbyte+0x64>)
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	88fa      	ldrh	r2, [r7, #6]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d208      	bcs.n	800a9b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a99e:	4b10      	ldr	r3, [pc, #64]	; (800a9e0 <tcp_get_next_optbyte+0x68>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3314      	adds	r3, #20
 800a9a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a9a6:	88fb      	ldrh	r3, [r7, #6]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	e00b      	b.n	800a9c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <tcp_get_next_optbyte+0x64>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <tcp_get_next_optbyte+0x60>)
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	797b      	ldrb	r3, [r7, #5]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	20000554 	.word	0x20000554
 800a9d8:	20000550 	.word	0x20000550
 800a9dc:	2000054e 	.word	0x2000054e
 800a9e0:	20000548 	.word	0x20000548

0800a9e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <tcp_parseopt+0x1c>
 800a9f2:	4b32      	ldr	r3, [pc, #200]	; (800aabc <tcp_parseopt+0xd8>)
 800a9f4:	f240 727d 	movw	r2, #1917	; 0x77d
 800a9f8:	4931      	ldr	r1, [pc, #196]	; (800aac0 <tcp_parseopt+0xdc>)
 800a9fa:	4832      	ldr	r0, [pc, #200]	; (800aac4 <tcp_parseopt+0xe0>)
 800a9fc:	f004 fdac 	bl	800f558 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aa00:	4b31      	ldr	r3, [pc, #196]	; (800aac8 <tcp_parseopt+0xe4>)
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d055      	beq.n	800aab4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa08:	4b30      	ldr	r3, [pc, #192]	; (800aacc <tcp_parseopt+0xe8>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	801a      	strh	r2, [r3, #0]
 800aa0e:	e045      	b.n	800aa9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800aa10:	f7ff ffb2 	bl	800a978 <tcp_get_next_optbyte>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d006      	beq.n	800aa2c <tcp_parseopt+0x48>
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	dc2b      	bgt.n	800aa7a <tcp_parseopt+0x96>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d041      	beq.n	800aaaa <tcp_parseopt+0xc6>
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d127      	bne.n	800aa7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800aa2a:	e037      	b.n	800aa9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800aa2c:	f7ff ffa4 	bl	800a978 <tcp_get_next_optbyte>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d13b      	bne.n	800aaae <tcp_parseopt+0xca>
 800aa36:	4b25      	ldr	r3, [pc, #148]	; (800aacc <tcp_parseopt+0xe8>)
 800aa38:	881b      	ldrh	r3, [r3, #0]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	4a22      	ldr	r2, [pc, #136]	; (800aac8 <tcp_parseopt+0xe4>)
 800aa3e:	8812      	ldrh	r2, [r2, #0]
 800aa40:	4293      	cmp	r3, r2
 800aa42:	da34      	bge.n	800aaae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800aa44:	f7ff ff98 	bl	800a978 <tcp_get_next_optbyte>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	021b      	lsls	r3, r3, #8
 800aa4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800aa50:	f7ff ff92 	bl	800a978 <tcp_get_next_optbyte>
 800aa54:	4603      	mov	r3, r0
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	89bb      	ldrh	r3, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800aa5e:	89bb      	ldrh	r3, [r7, #12]
 800aa60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aa64:	d804      	bhi.n	800aa70 <tcp_parseopt+0x8c>
 800aa66:	89bb      	ldrh	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <tcp_parseopt+0x8c>
 800aa6c:	89ba      	ldrh	r2, [r7, #12]
 800aa6e:	e001      	b.n	800aa74 <tcp_parseopt+0x90>
 800aa70:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800aa78:	e010      	b.n	800aa9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800aa7a:	f7ff ff7d 	bl	800a978 <tcp_get_next_optbyte>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800aa82:	7afb      	ldrb	r3, [r7, #11]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d914      	bls.n	800aab2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <tcp_parseopt+0xe8>)
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	4413      	add	r3, r2
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	3b02      	subs	r3, #2
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <tcp_parseopt+0xe8>)
 800aa9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aa9c:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <tcp_parseopt+0xe8>)
 800aa9e:	881a      	ldrh	r2, [r3, #0]
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <tcp_parseopt+0xe4>)
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d3b3      	bcc.n	800aa10 <tcp_parseopt+0x2c>
 800aaa8:	e004      	b.n	800aab4 <tcp_parseopt+0xd0>
          return;
 800aaaa:	bf00      	nop
 800aaac:	e002      	b.n	800aab4 <tcp_parseopt+0xd0>
            return;
 800aaae:	bf00      	nop
 800aab0:	e000      	b.n	800aab4 <tcp_parseopt+0xd0>
            return;
 800aab2:	bf00      	nop
      }
    }
  }
}
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	08011f00 	.word	0x08011f00
 800aac0:	08012364 	.word	0x08012364
 800aac4:	08011f4c 	.word	0x08011f4c
 800aac8:	2000054c 	.word	0x2000054c
 800aacc:	20000554 	.word	0x20000554

0800aad0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <tcp_trigger_input_pcb_close+0x1c>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f043 0310 	orr.w	r3, r3, #16
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	4b03      	ldr	r3, [pc, #12]	; (800aaec <tcp_trigger_input_pcb_close+0x1c>)
 800aae0:	701a      	strb	r2, [r3, #0]
}
 800aae2:	bf00      	nop
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	20000565 	.word	0x20000565

0800aaf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <tcp_route+0x28>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	7a1b      	ldrb	r3, [r3, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	7a1b      	ldrb	r3, [r3, #8]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fb f8b8 	bl	8005c84 <netif_get_by_index>
 800ab14:	4603      	mov	r3, r0
 800ab16:	e003      	b.n	800ab20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f003 fad5 	bl	800e0c8 <ip4_route>
 800ab1e:	4603      	mov	r3, r0
  }
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	4613      	mov	r3, r2
 800ab36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d105      	bne.n	800ab4a <tcp_create_segment+0x22>
 800ab3e:	4b44      	ldr	r3, [pc, #272]	; (800ac50 <tcp_create_segment+0x128>)
 800ab40:	22a3      	movs	r2, #163	; 0xa3
 800ab42:	4944      	ldr	r1, [pc, #272]	; (800ac54 <tcp_create_segment+0x12c>)
 800ab44:	4844      	ldr	r0, [pc, #272]	; (800ac58 <tcp_create_segment+0x130>)
 800ab46:	f004 fd07 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d105      	bne.n	800ab5c <tcp_create_segment+0x34>
 800ab50:	4b3f      	ldr	r3, [pc, #252]	; (800ac50 <tcp_create_segment+0x128>)
 800ab52:	22a4      	movs	r2, #164	; 0xa4
 800ab54:	4941      	ldr	r1, [pc, #260]	; (800ac5c <tcp_create_segment+0x134>)
 800ab56:	4840      	ldr	r0, [pc, #256]	; (800ac58 <tcp_create_segment+0x130>)
 800ab58:	f004 fcfe 	bl	800f558 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ab5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ab6a:	2003      	movs	r0, #3
 800ab6c:	f7fa fd8c 	bl	8005688 <memp_malloc>
 800ab70:	6138      	str	r0, [r7, #16]
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d104      	bne.n	800ab82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ab78:	68b8      	ldr	r0, [r7, #8]
 800ab7a:	f7fb fbe3 	bl	8006344 <pbuf_free>
    return NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e061      	b.n	800ac46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ab88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	891a      	ldrh	r2, [r3, #8]
 800ab9a:	7dfb      	ldrb	r3, [r7, #23]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d205      	bcs.n	800abae <tcp_create_segment+0x86>
 800aba2:	4b2b      	ldr	r3, [pc, #172]	; (800ac50 <tcp_create_segment+0x128>)
 800aba4:	22b0      	movs	r2, #176	; 0xb0
 800aba6:	492e      	ldr	r1, [pc, #184]	; (800ac60 <tcp_create_segment+0x138>)
 800aba8:	482b      	ldr	r0, [pc, #172]	; (800ac58 <tcp_create_segment+0x130>)
 800abaa:	f004 fcd5 	bl	800f558 <iprintf>
  seg->len = p->tot_len - optlen;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	891a      	ldrh	r2, [r3, #8]
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	b29a      	uxth	r2, r3
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800abbe:	2114      	movs	r1, #20
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	f7fb fb29 	bl	8006218 <pbuf_add_header>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800abcc:	6938      	ldr	r0, [r7, #16]
 800abce:	f7fc ffe6 	bl	8007b9e <tcp_seg_free>
    return NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e037      	b.n	800ac46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	8ada      	ldrh	r2, [r3, #22]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	68dc      	ldr	r4, [r3, #12]
 800abe8:	4610      	mov	r0, r2
 800abea:	f7fa f88d 	bl	8004d08 <lwip_htons>
 800abee:	4603      	mov	r3, r0
 800abf0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	8b1a      	ldrh	r2, [r3, #24]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	68dc      	ldr	r4, [r3, #12]
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fa f884 	bl	8004d08 <lwip_htons>
 800ac00:	4603      	mov	r3, r0
 800ac02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	68dc      	ldr	r4, [r3, #12]
 800ac08:	6838      	ldr	r0, [r7, #0]
 800ac0a:	f7fa f892 	bl	8004d32 <lwip_htonl>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
 800ac14:	089b      	lsrs	r3, r3, #2
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3305      	adds	r3, #5
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	031b      	lsls	r3, r3, #12
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	79fb      	ldrb	r3, [r7, #7]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	68dc      	ldr	r4, [r3, #12]
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7fa f86a 	bl	8004d08 <lwip_htons>
 800ac34:	4603      	mov	r3, r0
 800ac36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	749a      	strb	r2, [r3, #18]
 800ac40:	2200      	movs	r2, #0
 800ac42:	74da      	strb	r2, [r3, #19]
  return seg;
 800ac44:	693b      	ldr	r3, [r7, #16]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd90      	pop	{r4, r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	08012380 	.word	0x08012380
 800ac54:	080123b4 	.word	0x080123b4
 800ac58:	080123d4 	.word	0x080123d4
 800ac5c:	080123fc 	.word	0x080123fc
 800ac60:	08012420 	.word	0x08012420

0800ac64 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
 800ac70:	460b      	mov	r3, r1
 800ac72:	81bb      	strh	r3, [r7, #12]
 800ac74:	4613      	mov	r3, r2
 800ac76:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ac78:	89bb      	ldrh	r3, [r7, #12]
 800ac7a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d105      	bne.n	800ac8e <tcp_pbuf_prealloc+0x2a>
 800ac82:	4b30      	ldr	r3, [pc, #192]	; (800ad44 <tcp_pbuf_prealloc+0xe0>)
 800ac84:	22e8      	movs	r2, #232	; 0xe8
 800ac86:	4930      	ldr	r1, [pc, #192]	; (800ad48 <tcp_pbuf_prealloc+0xe4>)
 800ac88:	4830      	ldr	r0, [pc, #192]	; (800ad4c <tcp_pbuf_prealloc+0xe8>)
 800ac8a:	f004 fc65 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d105      	bne.n	800aca0 <tcp_pbuf_prealloc+0x3c>
 800ac94:	4b2b      	ldr	r3, [pc, #172]	; (800ad44 <tcp_pbuf_prealloc+0xe0>)
 800ac96:	22e9      	movs	r2, #233	; 0xe9
 800ac98:	492d      	ldr	r1, [pc, #180]	; (800ad50 <tcp_pbuf_prealloc+0xec>)
 800ac9a:	482c      	ldr	r0, [pc, #176]	; (800ad4c <tcp_pbuf_prealloc+0xe8>)
 800ac9c:	f004 fc5c 	bl	800f558 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800aca0:	89ba      	ldrh	r2, [r7, #12]
 800aca2:	897b      	ldrh	r3, [r7, #10]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d221      	bcs.n	800acec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aca8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acac:	f003 0302 	and.w	r3, r3, #2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d111      	bne.n	800acd8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	8b5b      	ldrh	r3, [r3, #26]
 800acb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d115      	bne.n	800acec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800acc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800accc:	2b00      	cmp	r3, #0
 800acce:	d103      	bne.n	800acd8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d009      	beq.n	800acec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800acd8:	89bb      	ldrh	r3, [r7, #12]
 800acda:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800acde:	f023 0203 	bic.w	r2, r3, #3
 800ace2:	897b      	ldrh	r3, [r7, #10]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	bf28      	it	cs
 800ace8:	4613      	movcs	r3, r2
 800acea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800acec:	8af9      	ldrh	r1, [r7, #22]
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fb f841 	bl	8005d7c <pbuf_alloc>
 800acfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e019      	b.n	800ad3a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d006      	beq.n	800ad1c <tcp_pbuf_prealloc+0xb8>
 800ad0e:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <tcp_pbuf_prealloc+0xe0>)
 800ad10:	f240 120b 	movw	r2, #267	; 0x10b
 800ad14:	490f      	ldr	r1, [pc, #60]	; (800ad54 <tcp_pbuf_prealloc+0xf0>)
 800ad16:	480d      	ldr	r0, [pc, #52]	; (800ad4c <tcp_pbuf_prealloc+0xe8>)
 800ad18:	f004 fc1e 	bl	800f558 <iprintf>
  *oversize = p->len - length;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	895a      	ldrh	r2, [r3, #10]
 800ad20:	89bb      	ldrh	r3, [r7, #12]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	89ba      	ldrh	r2, [r7, #12]
 800ad2e:	811a      	strh	r2, [r3, #8]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	891a      	ldrh	r2, [r3, #8]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	815a      	strh	r2, [r3, #10]
  return p;
 800ad38:	693b      	ldr	r3, [r7, #16]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	08012380 	.word	0x08012380
 800ad48:	08012438 	.word	0x08012438
 800ad4c:	080123d4 	.word	0x080123d4
 800ad50:	0801245c 	.word	0x0801245c
 800ad54:	0801247c 	.word	0x0801247c

0800ad58 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <tcp_write_checks+0x20>
 800ad6a:	4b33      	ldr	r3, [pc, #204]	; (800ae38 <tcp_write_checks+0xe0>)
 800ad6c:	f240 1233 	movw	r2, #307	; 0x133
 800ad70:	4932      	ldr	r1, [pc, #200]	; (800ae3c <tcp_write_checks+0xe4>)
 800ad72:	4833      	ldr	r0, [pc, #204]	; (800ae40 <tcp_write_checks+0xe8>)
 800ad74:	f004 fbf0 	bl	800f558 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d00e      	beq.n	800ad9e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ad84:	2b07      	cmp	r3, #7
 800ad86:	d00a      	beq.n	800ad9e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d006      	beq.n	800ad9e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d002      	beq.n	800ad9e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ad98:	f06f 030a 	mvn.w	r3, #10
 800ad9c:	e048      	b.n	800ae30 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ad9e:	887b      	ldrh	r3, [r7, #2]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <tcp_write_checks+0x50>
    return ERR_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	e043      	b.n	800ae30 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adae:	887a      	ldrh	r2, [r7, #2]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d909      	bls.n	800adc8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	8b5b      	ldrh	r3, [r3, #26]
 800adb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800adc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adc6:	e033      	b.n	800ae30 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adce:	2b08      	cmp	r3, #8
 800add0:	d909      	bls.n	800ade6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	8b5b      	ldrh	r3, [r3, #26]
 800add6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ade0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ade4:	e024      	b.n	800ae30 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00f      	beq.n	800ae10 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d11a      	bne.n	800ae2e <tcp_write_checks+0xd6>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d116      	bne.n	800ae2e <tcp_write_checks+0xd6>
 800ae00:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <tcp_write_checks+0xe0>)
 800ae02:	f240 1255 	movw	r2, #341	; 0x155
 800ae06:	490f      	ldr	r1, [pc, #60]	; (800ae44 <tcp_write_checks+0xec>)
 800ae08:	480d      	ldr	r0, [pc, #52]	; (800ae40 <tcp_write_checks+0xe8>)
 800ae0a:	f004 fba5 	bl	800f558 <iprintf>
 800ae0e:	e00e      	b.n	800ae2e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <tcp_write_checks+0xc8>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d006      	beq.n	800ae2e <tcp_write_checks+0xd6>
 800ae20:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <tcp_write_checks+0xe0>)
 800ae22:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ae26:	4908      	ldr	r1, [pc, #32]	; (800ae48 <tcp_write_checks+0xf0>)
 800ae28:	4805      	ldr	r0, [pc, #20]	; (800ae40 <tcp_write_checks+0xe8>)
 800ae2a:	f004 fb95 	bl	800f558 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	08012380 	.word	0x08012380
 800ae3c:	08012490 	.word	0x08012490
 800ae40:	080123d4 	.word	0x080123d4
 800ae44:	080124b0 	.word	0x080124b0
 800ae48:	080124ec 	.word	0x080124ec

0800ae4c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ae4c:	b590      	push	{r4, r7, lr}
 800ae4e:	b09b      	sub	sp, #108	; 0x6c
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4611      	mov	r1, r2
 800ae58:	461a      	mov	r2, r3
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	80fb      	strh	r3, [r7, #6]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	653b      	str	r3, [r7, #80]	; 0x50
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae6e:	2300      	movs	r3, #0
 800ae70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae72:	2300      	movs	r3, #0
 800ae74:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ae76:	2300      	movs	r3, #0
 800ae78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d109      	bne.n	800aea8 <tcp_write+0x5c>
 800ae94:	4ba4      	ldr	r3, [pc, #656]	; (800b128 <tcp_write+0x2dc>)
 800ae96:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ae9a:	49a4      	ldr	r1, [pc, #656]	; (800b12c <tcp_write+0x2e0>)
 800ae9c:	48a4      	ldr	r0, [pc, #656]	; (800b130 <tcp_write+0x2e4>)
 800ae9e:	f004 fb5b 	bl	800f558 <iprintf>
 800aea2:	f06f 030f 	mvn.w	r3, #15
 800aea6:	e32a      	b.n	800b4fe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aeae:	085b      	lsrs	r3, r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	bf28      	it	cs
 800aeba:	4613      	movcs	r3, r2
 800aebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800aebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <tcp_write+0x7e>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aec8:	e000      	b.n	800aecc <tcp_write+0x80>
 800aeca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aecc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d109      	bne.n	800aee8 <tcp_write+0x9c>
 800aed4:	4b94      	ldr	r3, [pc, #592]	; (800b128 <tcp_write+0x2dc>)
 800aed6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800aeda:	4996      	ldr	r1, [pc, #600]	; (800b134 <tcp_write+0x2e8>)
 800aedc:	4894      	ldr	r0, [pc, #592]	; (800b130 <tcp_write+0x2e4>)
 800aede:	f004 fb3b 	bl	800f558 <iprintf>
 800aee2:	f06f 030f 	mvn.w	r3, #15
 800aee6:	e30a      	b.n	800b4fe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800aee8:	88fb      	ldrh	r3, [r7, #6]
 800aeea:	4619      	mov	r1, r3
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7ff ff33 	bl	800ad58 <tcp_write_checks>
 800aef2:	4603      	mov	r3, r0
 800aef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800aef8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <tcp_write+0xba>
    return err;
 800af00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800af04:	e2fb      	b.n	800b4fe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800af10:	2300      	movs	r3, #0
 800af12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 80f6 	beq.w	800b10c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af24:	653b      	str	r3, [r7, #80]	; 0x50
 800af26:	e002      	b.n	800af2e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800af28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800af2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1f8      	bne.n	800af28 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800af36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af38:	7a9b      	ldrb	r3, [r3, #10]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800af44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af48:	891b      	ldrh	r3, [r3, #8]
 800af4a:	4619      	mov	r1, r3
 800af4c:	8c3b      	ldrh	r3, [r7, #32]
 800af4e:	440b      	add	r3, r1
 800af50:	429a      	cmp	r2, r3
 800af52:	da06      	bge.n	800af62 <tcp_write+0x116>
 800af54:	4b74      	ldr	r3, [pc, #464]	; (800b128 <tcp_write+0x2dc>)
 800af56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800af5a:	4977      	ldr	r1, [pc, #476]	; (800b138 <tcp_write+0x2ec>)
 800af5c:	4874      	ldr	r0, [pc, #464]	; (800b130 <tcp_write+0x2e4>)
 800af5e:	f004 fafb 	bl	800f558 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800af62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af64:	891a      	ldrh	r2, [r3, #8]
 800af66:	8c3b      	ldrh	r3, [r7, #32]
 800af68:	4413      	add	r3, r2
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af78:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800af7a:	8a7b      	ldrh	r3, [r7, #18]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d026      	beq.n	800afce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800af80:	8a7b      	ldrh	r3, [r7, #18]
 800af82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800af84:	429a      	cmp	r2, r3
 800af86:	d206      	bcs.n	800af96 <tcp_write+0x14a>
 800af88:	4b67      	ldr	r3, [pc, #412]	; (800b128 <tcp_write+0x2dc>)
 800af8a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800af8e:	496b      	ldr	r1, [pc, #428]	; (800b13c <tcp_write+0x2f0>)
 800af90:	4867      	ldr	r0, [pc, #412]	; (800b130 <tcp_write+0x2e4>)
 800af92:	f004 fae1 	bl	800f558 <iprintf>
      seg = last_unsent;
 800af96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af98:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800af9a:	8a7b      	ldrh	r3, [r7, #18]
 800af9c:	88fa      	ldrh	r2, [r7, #6]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	bf28      	it	cs
 800afa2:	4613      	movcs	r3, r2
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800afa8:	4293      	cmp	r3, r2
 800afaa:	bf28      	it	cs
 800afac:	4613      	movcs	r3, r2
 800afae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800afb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800afb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afb6:	4413      	add	r3, r2
 800afb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800afbc:	8a7a      	ldrh	r2, [r7, #18]
 800afbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800afc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800afc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800afca:	1ad3      	subs	r3, r2, r3
 800afcc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800afce:	8a7b      	ldrh	r3, [r7, #18]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00b      	beq.n	800afec <tcp_write+0x1a0>
 800afd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800afd8:	88fb      	ldrh	r3, [r7, #6]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d006      	beq.n	800afec <tcp_write+0x1a0>
 800afde:	4b52      	ldr	r3, [pc, #328]	; (800b128 <tcp_write+0x2dc>)
 800afe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afe4:	4956      	ldr	r1, [pc, #344]	; (800b140 <tcp_write+0x2f4>)
 800afe6:	4852      	ldr	r0, [pc, #328]	; (800b130 <tcp_write+0x2e4>)
 800afe8:	f004 fab6 	bl	800f558 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800afec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aff0:	88fb      	ldrh	r3, [r7, #6]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	f080 8167 	bcs.w	800b2c6 <tcp_write+0x47a>
 800aff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 8163 	beq.w	800b2c6 <tcp_write+0x47a>
 800b000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b002:	891b      	ldrh	r3, [r3, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 815e 	beq.w	800b2c6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b00a:	88fa      	ldrh	r2, [r7, #6]
 800b00c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b010:	1ad2      	subs	r2, r2, r3
 800b012:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b014:	4293      	cmp	r3, r2
 800b016:	bfa8      	it	ge
 800b018:	4613      	movge	r3, r2
 800b01a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b01c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b01e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b020:	797b      	ldrb	r3, [r7, #5]
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d027      	beq.n	800b07a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b02a:	f107 0012 	add.w	r0, r7, #18
 800b02e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b030:	8bf9      	ldrh	r1, [r7, #30]
 800b032:	2301      	movs	r3, #1
 800b034:	9302      	str	r3, [sp, #8]
 800b036:	797b      	ldrb	r3, [r7, #5]
 800b038:	9301      	str	r3, [sp, #4]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	4603      	mov	r3, r0
 800b040:	2000      	movs	r0, #0
 800b042:	f7ff fe0f 	bl	800ac64 <tcp_pbuf_prealloc>
 800b046:	6578      	str	r0, [r7, #84]	; 0x54
 800b048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 8225 	beq.w	800b49a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b052:	6858      	ldr	r0, [r3, #4]
 800b054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	4413      	add	r3, r2
 800b05c:	8bfa      	ldrh	r2, [r7, #30]
 800b05e:	4619      	mov	r1, r3
 800b060:	f004 fa4a 	bl	800f4f8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b064:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b066:	f7fb f9f5 	bl	8006454 <pbuf_clen>
 800b06a:	4603      	mov	r3, r0
 800b06c:	461a      	mov	r2, r3
 800b06e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b072:	4413      	add	r3, r2
 800b074:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b078:	e041      	b.n	800b0fe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	637b      	str	r3, [r7, #52]	; 0x34
 800b080:	e002      	b.n	800b088 <tcp_write+0x23c>
 800b082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	637b      	str	r3, [r7, #52]	; 0x34
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1f8      	bne.n	800b082 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	7b1b      	ldrb	r3, [r3, #12]
 800b094:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d115      	bne.n	800b0c8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0a2:	8952      	ldrh	r2, [r2, #10]
 800b0a4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d10d      	bne.n	800b0c8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b0ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d006      	beq.n	800b0c2 <tcp_write+0x276>
 800b0b4:	4b1c      	ldr	r3, [pc, #112]	; (800b128 <tcp_write+0x2dc>)
 800b0b6:	f240 2231 	movw	r2, #561	; 0x231
 800b0ba:	4922      	ldr	r1, [pc, #136]	; (800b144 <tcp_write+0x2f8>)
 800b0bc:	481c      	ldr	r0, [pc, #112]	; (800b130 <tcp_write+0x2e4>)
 800b0be:	f004 fa4b 	bl	800f558 <iprintf>
          extendlen = seglen;
 800b0c2:	8bfb      	ldrh	r3, [r7, #30]
 800b0c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b0c6:	e01a      	b.n	800b0fe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b0c8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	f7fa fe54 	bl	8005d7c <pbuf_alloc>
 800b0d4:	6578      	str	r0, [r7, #84]	; 0x54
 800b0d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 81e0 	beq.w	800b49e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b0de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	441a      	add	r2, r3
 800b0e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b0ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b0ec:	f7fb f9b2 	bl	8006454 <pbuf_clen>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b0fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b102:	8bfb      	ldrh	r3, [r7, #30]
 800b104:	4413      	add	r3, r2
 800b106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b10a:	e0dc      	b.n	800b2c6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 80d7 	beq.w	800b2c6 <tcp_write+0x47a>
 800b118:	4b03      	ldr	r3, [pc, #12]	; (800b128 <tcp_write+0x2dc>)
 800b11a:	f240 224a 	movw	r2, #586	; 0x24a
 800b11e:	490a      	ldr	r1, [pc, #40]	; (800b148 <tcp_write+0x2fc>)
 800b120:	4803      	ldr	r0, [pc, #12]	; (800b130 <tcp_write+0x2e4>)
 800b122:	f004 fa19 	bl	800f558 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b126:	e0ce      	b.n	800b2c6 <tcp_write+0x47a>
 800b128:	08012380 	.word	0x08012380
 800b12c:	08012520 	.word	0x08012520
 800b130:	080123d4 	.word	0x080123d4
 800b134:	08012538 	.word	0x08012538
 800b138:	0801256c 	.word	0x0801256c
 800b13c:	08012584 	.word	0x08012584
 800b140:	080125a4 	.word	0x080125a4
 800b144:	080125c4 	.word	0x080125c4
 800b148:	080125f0 	.word	0x080125f0
    struct pbuf *p;
    u16_t left = len - pos;
 800b14c:	88fa      	ldrh	r2, [r7, #6]
 800b14e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b156:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b162:	8b7a      	ldrh	r2, [r7, #26]
 800b164:	8bbb      	ldrh	r3, [r7, #28]
 800b166:	4293      	cmp	r3, r2
 800b168:	bf28      	it	cs
 800b16a:	4613      	movcs	r3, r2
 800b16c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b16e:	797b      	ldrb	r3, [r7, #5]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d036      	beq.n	800b1e6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b178:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	8b3b      	ldrh	r3, [r7, #24]
 800b180:	4413      	add	r3, r2
 800b182:	b299      	uxth	r1, r3
 800b184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b186:	2b00      	cmp	r3, #0
 800b188:	bf0c      	ite	eq
 800b18a:	2301      	moveq	r3, #1
 800b18c:	2300      	movne	r3, #0
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	f107 0012 	add.w	r0, r7, #18
 800b194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b196:	9302      	str	r3, [sp, #8]
 800b198:	797b      	ldrb	r3, [r7, #5]
 800b19a:	9301      	str	r3, [sp, #4]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	9300      	str	r3, [sp, #0]
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2036      	movs	r0, #54	; 0x36
 800b1a4:	f7ff fd5e 	bl	800ac64 <tcp_pbuf_prealloc>
 800b1a8:	6338      	str	r0, [r7, #48]	; 0x30
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8178 	beq.w	800b4a2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	895b      	ldrh	r3, [r3, #10]
 800b1b6:	8b3a      	ldrh	r2, [r7, #24]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d906      	bls.n	800b1ca <tcp_write+0x37e>
 800b1bc:	4b8c      	ldr	r3, [pc, #560]	; (800b3f0 <tcp_write+0x5a4>)
 800b1be:	f240 2266 	movw	r2, #614	; 0x266
 800b1c2:	498c      	ldr	r1, [pc, #560]	; (800b3f4 <tcp_write+0x5a8>)
 800b1c4:	488c      	ldr	r0, [pc, #560]	; (800b3f8 <tcp_write+0x5ac>)
 800b1c6:	f004 f9c7 	bl	800f558 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b1d2:	18d0      	adds	r0, r2, r3
 800b1d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	8b3a      	ldrh	r2, [r7, #24]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	f004 f98a 	bl	800f4f8 <memcpy>
 800b1e4:	e02f      	b.n	800b246 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b1e6:	8a7b      	ldrh	r3, [r7, #18]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d006      	beq.n	800b1fa <tcp_write+0x3ae>
 800b1ec:	4b80      	ldr	r3, [pc, #512]	; (800b3f0 <tcp_write+0x5a4>)
 800b1ee:	f240 2271 	movw	r2, #625	; 0x271
 800b1f2:	4982      	ldr	r1, [pc, #520]	; (800b3fc <tcp_write+0x5b0>)
 800b1f4:	4880      	ldr	r0, [pc, #512]	; (800b3f8 <tcp_write+0x5ac>)
 800b1f6:	f004 f9af 	bl	800f558 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b1fa:	8b3b      	ldrh	r3, [r7, #24]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	4619      	mov	r1, r3
 800b200:	2036      	movs	r0, #54	; 0x36
 800b202:	f7fa fdbb 	bl	8005d7c <pbuf_alloc>
 800b206:	6178      	str	r0, [r7, #20]
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 814b 	beq.w	800b4a6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	441a      	add	r2, r3
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b21c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b220:	b29b      	uxth	r3, r3
 800b222:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b226:	4619      	mov	r1, r3
 800b228:	2036      	movs	r0, #54	; 0x36
 800b22a:	f7fa fda7 	bl	8005d7c <pbuf_alloc>
 800b22e:	6338      	str	r0, [r7, #48]	; 0x30
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b236:	6978      	ldr	r0, [r7, #20]
 800b238:	f7fb f884 	bl	8006344 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b23c:	e136      	b.n	800b4ac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b23e:	6979      	ldr	r1, [r7, #20]
 800b240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b242:	f7fb f941 	bl	80064c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b248:	f7fb f904 	bl	8006454 <pbuf_clen>
 800b24c:	4603      	mov	r3, r0
 800b24e:	461a      	mov	r2, r3
 800b250:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b254:	4413      	add	r3, r2
 800b256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b25a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b25e:	2b09      	cmp	r3, #9
 800b260:	d903      	bls.n	800b26a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b264:	f7fb f86e 	bl	8006344 <pbuf_free>
      goto memerr;
 800b268:	e120      	b.n	800b4ac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b272:	441a      	add	r2, r3
 800b274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	4613      	mov	r3, r2
 800b27c:	2200      	movs	r2, #0
 800b27e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f7ff fc51 	bl	800ab28 <tcp_create_segment>
 800b286:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 810d 	beq.w	800b4aa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b292:	2b00      	cmp	r3, #0
 800b294:	d102      	bne.n	800b29c <tcp_write+0x450>
      queue = seg;
 800b296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b298:	647b      	str	r3, [r7, #68]	; 0x44
 800b29a:	e00c      	b.n	800b2b6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b29c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <tcp_write+0x464>
 800b2a2:	4b53      	ldr	r3, [pc, #332]	; (800b3f0 <tcp_write+0x5a4>)
 800b2a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b2a8:	4955      	ldr	r1, [pc, #340]	; (800b400 <tcp_write+0x5b4>)
 800b2aa:	4853      	ldr	r0, [pc, #332]	; (800b3f8 <tcp_write+0x5ac>)
 800b2ac:	f004 f954 	bl	800f558 <iprintf>
      prev_seg->next = seg;
 800b2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2b4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b2ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b2be:	8b3b      	ldrh	r3, [r7, #24]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b2c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	f4ff af3d 	bcc.w	800b14c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b2d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d02c      	beq.n	800b332 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2de:	e01e      	b.n	800b31e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	891a      	ldrh	r2, [r3, #8]
 800b2e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b2e6:	4413      	add	r3, r2
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d110      	bne.n	800b318 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2fc:	8952      	ldrh	r2, [r2, #10]
 800b2fe:	4413      	add	r3, r2
 800b300:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	4618      	mov	r0, r3
 800b306:	f004 f8f7 	bl	800f4f8 <memcpy>
        p->len += oversize_used;
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	895a      	ldrh	r2, [r3, #10]
 800b30e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b310:	4413      	add	r3, r2
 800b312:	b29a      	uxth	r2, r3
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1dd      	bne.n	800b2e0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b326:	891a      	ldrh	r2, [r3, #8]
 800b328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b32a:	4413      	add	r3, r2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b330:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b332:	8a7a      	ldrh	r2, [r7, #18]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b33a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d018      	beq.n	800b372 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <tcp_write+0x508>
 800b346:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <tcp_write+0x5a4>)
 800b348:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b34c:	492d      	ldr	r1, [pc, #180]	; (800b404 <tcp_write+0x5b8>)
 800b34e:	482a      	ldr	r0, [pc, #168]	; (800b3f8 <tcp_write+0x5ac>)
 800b350:	f004 f902 	bl	800f558 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fb f8b4 	bl	80064c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b362:	891a      	ldrh	r2, [r3, #8]
 800b364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b366:	891b      	ldrh	r3, [r3, #8]
 800b368:	4413      	add	r3, r2
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b36e:	811a      	strh	r2, [r3, #8]
 800b370:	e037      	b.n	800b3e2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b372:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d034      	beq.n	800b3e2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <tcp_write+0x53a>
 800b37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <tcp_write+0x548>
 800b386:	4b1a      	ldr	r3, [pc, #104]	; (800b3f0 <tcp_write+0x5a4>)
 800b388:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b38c:	491e      	ldr	r1, [pc, #120]	; (800b408 <tcp_write+0x5bc>)
 800b38e:	481a      	ldr	r0, [pc, #104]	; (800b3f8 <tcp_write+0x5ac>)
 800b390:	f004 f8e2 	bl	800f558 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	62bb      	str	r3, [r7, #40]	; 0x28
 800b39a:	e009      	b.n	800b3b0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	891a      	ldrh	r2, [r3, #8]
 800b3a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f1      	bne.n	800b39c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ba:	891a      	ldrh	r2, [r3, #8]
 800b3bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3be:	4413      	add	r3, r2
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	895a      	ldrh	r2, [r3, #10]
 800b3ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3cc:	4413      	add	r3, r2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d6:	891a      	ldrh	r2, [r3, #8]
 800b3d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3da:	4413      	add	r3, r2
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b3e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d111      	bne.n	800b40c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800b3ee:	e010      	b.n	800b412 <tcp_write+0x5c6>
 800b3f0:	08012380 	.word	0x08012380
 800b3f4:	08012620 	.word	0x08012620
 800b3f8:	080123d4 	.word	0x080123d4
 800b3fc:	08012660 	.word	0x08012660
 800b400:	08012670 	.word	0x08012670
 800b404:	08012684 	.word	0x08012684
 800b408:	080126bc 	.word	0x080126bc
  } else {
    last_unsent->next = queue;
 800b40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b40e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b410:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	441a      	add	r2, r3
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b424:	88fb      	ldrh	r3, [r7, #6]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b436:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00e      	beq.n	800b462 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <tcp_write+0x616>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <tcp_write+0x616>
 800b454:	4b2c      	ldr	r3, [pc, #176]	; (800b508 <tcp_write+0x6bc>)
 800b456:	f240 3212 	movw	r2, #786	; 0x312
 800b45a:	492c      	ldr	r1, [pc, #176]	; (800b50c <tcp_write+0x6c0>)
 800b45c:	482c      	ldr	r0, [pc, #176]	; (800b510 <tcp_write+0x6c4>)
 800b45e:	f004 f87b 	bl	800f558 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d016      	beq.n	800b496 <tcp_write+0x64a>
 800b468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d012      	beq.n	800b496 <tcp_write+0x64a>
 800b470:	797b      	ldrb	r3, [r7, #5]
 800b472:	f003 0302 	and.w	r3, r3, #2
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10d      	bne.n	800b496 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	899b      	ldrh	r3, [r3, #12]
 800b480:	b29c      	uxth	r4, r3
 800b482:	2008      	movs	r0, #8
 800b484:	f7f9 fc40 	bl	8004d08 <lwip_htons>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	4322      	orrs	r2, r4
 800b492:	b292      	uxth	r2, r2
 800b494:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	e031      	b.n	800b4fe <tcp_write+0x6b2>
          goto memerr;
 800b49a:	bf00      	nop
 800b49c:	e006      	b.n	800b4ac <tcp_write+0x660>
            goto memerr;
 800b49e:	bf00      	nop
 800b4a0:	e004      	b.n	800b4ac <tcp_write+0x660>
        goto memerr;
 800b4a2:	bf00      	nop
 800b4a4:	e002      	b.n	800b4ac <tcp_write+0x660>
        goto memerr;
 800b4a6:	bf00      	nop
 800b4a8:	e000      	b.n	800b4ac <tcp_write+0x660>
      goto memerr;
 800b4aa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8b5b      	ldrh	r3, [r3, #26]
 800b4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b4ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b4c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b4c2:	f7fa ff3f 	bl	8006344 <pbuf_free>
  }
  if (queue != NULL) {
 800b4c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b4cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b4ce:	f7fc fb51 	bl	8007b74 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00e      	beq.n	800b4fa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10a      	bne.n	800b4fa <tcp_write+0x6ae>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d106      	bne.n	800b4fa <tcp_write+0x6ae>
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <tcp_write+0x6bc>)
 800b4ee:	f240 3227 	movw	r2, #807	; 0x327
 800b4f2:	4906      	ldr	r1, [pc, #24]	; (800b50c <tcp_write+0x6c0>)
 800b4f4:	4806      	ldr	r0, [pc, #24]	; (800b510 <tcp_write+0x6c4>)
 800b4f6:	f004 f82f 	bl	800f558 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	375c      	adds	r7, #92	; 0x5c
 800b502:	46bd      	mov	sp, r7
 800b504:	bd90      	pop	{r4, r7, pc}
 800b506:	bf00      	nop
 800b508:	08012380 	.word	0x08012380
 800b50c:	080126f4 	.word	0x080126f4
 800b510:	080123d4 	.word	0x080123d4

0800b514 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b08b      	sub	sp, #44	; 0x2c
 800b518:	af02      	add	r7, sp, #8
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b520:	2300      	movs	r3, #0
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	2300      	movs	r3, #0
 800b526:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b528:	2300      	movs	r3, #0
 800b52a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <tcp_split_unsent_seg+0x2c>
 800b532:	4b95      	ldr	r3, [pc, #596]	; (800b788 <tcp_split_unsent_seg+0x274>)
 800b534:	f240 324b 	movw	r2, #843	; 0x34b
 800b538:	4994      	ldr	r1, [pc, #592]	; (800b78c <tcp_split_unsent_seg+0x278>)
 800b53a:	4895      	ldr	r0, [pc, #596]	; (800b790 <tcp_split_unsent_seg+0x27c>)
 800b53c:	f004 f80c 	bl	800f558 <iprintf>

  useg = pcb->unsent;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b544:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d102      	bne.n	800b552 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b550:	e116      	b.n	800b780 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b552:	887b      	ldrh	r3, [r7, #2]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d109      	bne.n	800b56c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b558:	4b8b      	ldr	r3, [pc, #556]	; (800b788 <tcp_split_unsent_seg+0x274>)
 800b55a:	f240 3253 	movw	r2, #851	; 0x353
 800b55e:	498d      	ldr	r1, [pc, #564]	; (800b794 <tcp_split_unsent_seg+0x280>)
 800b560:	488b      	ldr	r0, [pc, #556]	; (800b790 <tcp_split_unsent_seg+0x27c>)
 800b562:	f003 fff9 	bl	800f558 <iprintf>
    return ERR_VAL;
 800b566:	f06f 0305 	mvn.w	r3, #5
 800b56a:	e109      	b.n	800b780 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	891b      	ldrh	r3, [r3, #8]
 800b570:	887a      	ldrh	r2, [r7, #2]
 800b572:	429a      	cmp	r2, r3
 800b574:	d301      	bcc.n	800b57a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	e102      	b.n	800b780 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b57e:	887a      	ldrh	r2, [r7, #2]
 800b580:	429a      	cmp	r2, r3
 800b582:	d906      	bls.n	800b592 <tcp_split_unsent_seg+0x7e>
 800b584:	4b80      	ldr	r3, [pc, #512]	; (800b788 <tcp_split_unsent_seg+0x274>)
 800b586:	f240 325b 	movw	r2, #859	; 0x35b
 800b58a:	4983      	ldr	r1, [pc, #524]	; (800b798 <tcp_split_unsent_seg+0x284>)
 800b58c:	4880      	ldr	r0, [pc, #512]	; (800b790 <tcp_split_unsent_seg+0x27c>)
 800b58e:	f003 ffe3 	bl	800f558 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	891b      	ldrh	r3, [r3, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d106      	bne.n	800b5a8 <tcp_split_unsent_seg+0x94>
 800b59a:	4b7b      	ldr	r3, [pc, #492]	; (800b788 <tcp_split_unsent_seg+0x274>)
 800b59c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b5a0:	497e      	ldr	r1, [pc, #504]	; (800b79c <tcp_split_unsent_seg+0x288>)
 800b5a2:	487b      	ldr	r0, [pc, #492]	; (800b790 <tcp_split_unsent_seg+0x27c>)
 800b5a4:	f003 ffd8 	bl	800f558 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	7a9b      	ldrb	r3, [r3, #10]
 800b5ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	891a      	ldrh	r2, [r3, #8]
 800b5be:	887b      	ldrh	r3, [r7, #2]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	89bb      	ldrh	r3, [r7, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	2036      	movs	r0, #54	; 0x36
 800b5d6:	f7fa fbd1 	bl	8005d7c <pbuf_alloc>
 800b5da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 80b7 	beq.w	800b752 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	891a      	ldrh	r2, [r3, #8]
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	891b      	ldrh	r3, [r3, #8]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	887b      	ldrh	r3, [r7, #2]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	6858      	ldr	r0, [r3, #4]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	18d1      	adds	r1, r2, r3
 800b604:	897b      	ldrh	r3, [r7, #10]
 800b606:	89ba      	ldrh	r2, [r7, #12]
 800b608:	f7fb f886 	bl	8006718 <pbuf_copy_partial>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	89bb      	ldrh	r3, [r7, #12]
 800b612:	4293      	cmp	r3, r2
 800b614:	f040 809f 	bne.w	800b756 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	4618      	mov	r0, r3
 800b622:	f7f9 fb71 	bl	8004d08 <lwip_htons>
 800b626:	4603      	mov	r3, r0
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b62e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b630:	2300      	movs	r3, #0
 800b632:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b634:	7efb      	ldrb	r3, [r7, #27]
 800b636:	f003 0308 	and.w	r3, r3, #8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d007      	beq.n	800b64e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b63e:	7efb      	ldrb	r3, [r7, #27]
 800b640:	f023 0308 	bic.w	r3, r3, #8
 800b644:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b646:	7ebb      	ldrb	r3, [r7, #26]
 800b648:	f043 0308 	orr.w	r3, r3, #8
 800b64c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b64e:	7efb      	ldrb	r3, [r7, #27]
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b658:	7efb      	ldrb	r3, [r7, #27]
 800b65a:	f023 0301 	bic.w	r3, r3, #1
 800b65e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b660:	7ebb      	ldrb	r3, [r7, #26]
 800b662:	f043 0301 	orr.w	r3, r3, #1
 800b666:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f9 fb5f 	bl	8004d32 <lwip_htonl>
 800b674:	4602      	mov	r2, r0
 800b676:	887b      	ldrh	r3, [r7, #2]
 800b678:	18d1      	adds	r1, r2, r3
 800b67a:	7eba      	ldrb	r2, [r7, #26]
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	460b      	mov	r3, r1
 800b682:	6939      	ldr	r1, [r7, #16]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fa4f 	bl	800ab28 <tcp_create_segment>
 800b68a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d063      	beq.n	800b75a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	4618      	mov	r0, r3
 800b698:	f7fa fedc 	bl	8006454 <pbuf_clen>
 800b69c:	4603      	mov	r3, r0
 800b69e:	461a      	mov	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6a6:	1a9b      	subs	r3, r3, r2
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	6858      	ldr	r0, [r3, #4]
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	891a      	ldrh	r2, [r3, #8]
 800b6ba:	89bb      	ldrh	r3, [r7, #12]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f7fa fcb9 	bl	8006038 <pbuf_realloc>
  useg->len -= remainder;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	891a      	ldrh	r2, [r3, #8]
 800b6ca:	89bb      	ldrh	r3, [r7, #12]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	899b      	ldrh	r3, [r3, #12]
 800b6da:	b29c      	uxth	r4, r3
 800b6dc:	7efb      	ldrb	r3, [r7, #27]
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7f9 fb11 	bl	8004d08 <lwip_htons>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	4322      	orrs	r2, r4
 800b6f0:	b292      	uxth	r2, r2
 800b6f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fa feab 	bl	8006454 <pbuf_clen>
 800b6fe:	4603      	mov	r3, r0
 800b700:	461a      	mov	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b708:	4413      	add	r3, r2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	4618      	mov	r0, r3
 800b718:	f7fa fe9c 	bl	8006454 <pbuf_clen>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b726:	4413      	add	r3, r2
 800b728:	b29a      	uxth	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	69fa      	ldr	r2, [r7, #28]
 800b73c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d103      	bne.n	800b74e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	e016      	b.n	800b780 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b752:	bf00      	nop
 800b754:	e002      	b.n	800b75c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b756:	bf00      	nop
 800b758:	e000      	b.n	800b75c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b75a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d006      	beq.n	800b770 <tcp_split_unsent_seg+0x25c>
 800b762:	4b09      	ldr	r3, [pc, #36]	; (800b788 <tcp_split_unsent_seg+0x274>)
 800b764:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b768:	490d      	ldr	r1, [pc, #52]	; (800b7a0 <tcp_split_unsent_seg+0x28c>)
 800b76a:	4809      	ldr	r0, [pc, #36]	; (800b790 <tcp_split_unsent_seg+0x27c>)
 800b76c:	f003 fef4 	bl	800f558 <iprintf>
  if (p != NULL) {
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d002      	beq.n	800b77c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b776:	6938      	ldr	r0, [r7, #16]
 800b778:	f7fa fde4 	bl	8006344 <pbuf_free>
  }

  return ERR_MEM;
 800b77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b780:	4618      	mov	r0, r3
 800b782:	3724      	adds	r7, #36	; 0x24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd90      	pop	{r4, r7, pc}
 800b788:	08012380 	.word	0x08012380
 800b78c:	08012714 	.word	0x08012714
 800b790:	080123d4 	.word	0x080123d4
 800b794:	08012738 	.word	0x08012738
 800b798:	0801275c 	.word	0x0801275c
 800b79c:	0801276c 	.word	0x0801276c
 800b7a0:	0801277c 	.word	0x0801277c

0800b7a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b7a4:	b590      	push	{r4, r7, lr}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <tcp_send_fin+0x1c>
 800b7b2:	4b21      	ldr	r3, [pc, #132]	; (800b838 <tcp_send_fin+0x94>)
 800b7b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b7b8:	4920      	ldr	r1, [pc, #128]	; (800b83c <tcp_send_fin+0x98>)
 800b7ba:	4821      	ldr	r0, [pc, #132]	; (800b840 <tcp_send_fin+0x9c>)
 800b7bc:	f003 fecc 	bl	800f558 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d02e      	beq.n	800b826 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	e002      	b.n	800b7d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1f8      	bne.n	800b7d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	899b      	ldrh	r3, [r3, #12]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7f9 fa8e 	bl	8004d08 <lwip_htons>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 0307 	and.w	r3, r3, #7
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d116      	bne.n	800b826 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	899b      	ldrh	r3, [r3, #12]
 800b7fe:	b29c      	uxth	r4, r3
 800b800:	2001      	movs	r0, #1
 800b802:	f7f9 fa81 	bl	8004d08 <lwip_htons>
 800b806:	4603      	mov	r3, r0
 800b808:	461a      	mov	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	4322      	orrs	r2, r4
 800b810:	b292      	uxth	r2, r2
 800b812:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	8b5b      	ldrh	r3, [r3, #26]
 800b818:	f043 0320 	orr.w	r3, r3, #32
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	e004      	b.n	800b830 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b826:	2101      	movs	r1, #1
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f80b 	bl	800b844 <tcp_enqueue_flags>
 800b82e:	4603      	mov	r3, r0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	bd90      	pop	{r4, r7, pc}
 800b838:	08012380 	.word	0x08012380
 800b83c:	08012788 	.word	0x08012788
 800b840:	080123d4 	.word	0x080123d4

0800b844 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08a      	sub	sp, #40	; 0x28
 800b848:	af02      	add	r7, sp, #8
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <tcp_enqueue_flags+0x2c>
 800b862:	4b67      	ldr	r3, [pc, #412]	; (800ba00 <tcp_enqueue_flags+0x1bc>)
 800b864:	f240 4211 	movw	r2, #1041	; 0x411
 800b868:	4966      	ldr	r1, [pc, #408]	; (800ba04 <tcp_enqueue_flags+0x1c0>)
 800b86a:	4867      	ldr	r0, [pc, #412]	; (800ba08 <tcp_enqueue_flags+0x1c4>)
 800b86c:	f003 fe74 	bl	800f558 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <tcp_enqueue_flags+0x40>
 800b876:	4b62      	ldr	r3, [pc, #392]	; (800ba00 <tcp_enqueue_flags+0x1bc>)
 800b878:	f240 4213 	movw	r2, #1043	; 0x413
 800b87c:	4963      	ldr	r1, [pc, #396]	; (800ba0c <tcp_enqueue_flags+0x1c8>)
 800b87e:	4862      	ldr	r0, [pc, #392]	; (800ba08 <tcp_enqueue_flags+0x1c4>)
 800b880:	f003 fe6a 	bl	800f558 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b884:	78fb      	ldrb	r3, [r7, #3]
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b88e:	2301      	movs	r3, #1
 800b890:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b892:	7ffb      	ldrb	r3, [r7, #31]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	b2db      	uxtb	r3, r3
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	2036      	movs	r0, #54	; 0x36
 800b8aa:	f7fa fa67 	bl	8005d7c <pbuf_alloc>
 800b8ae:	6138      	str	r0, [r7, #16]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	8b5b      	ldrh	r3, [r3, #26]
 800b8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8c8:	e095      	b.n	800b9f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	895a      	ldrh	r2, [r3, #10]
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d206      	bcs.n	800b8e4 <tcp_enqueue_flags+0xa0>
 800b8d6:	4b4a      	ldr	r3, [pc, #296]	; (800ba00 <tcp_enqueue_flags+0x1bc>)
 800b8d8:	f240 4239 	movw	r2, #1081	; 0x439
 800b8dc:	494c      	ldr	r1, [pc, #304]	; (800ba10 <tcp_enqueue_flags+0x1cc>)
 800b8de:	484a      	ldr	r0, [pc, #296]	; (800ba08 <tcp_enqueue_flags+0x1c4>)
 800b8e0:	f003 fe3a 	bl	800f558 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b8e8:	78fa      	ldrb	r2, [r7, #3]
 800b8ea:	7ffb      	ldrb	r3, [r7, #31]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	6939      	ldr	r1, [r7, #16]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7ff f918 	bl	800ab28 <tcp_create_segment>
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d109      	bne.n	800b914 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	8b5b      	ldrh	r3, [r3, #26]
 800b904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b908:	b29a      	uxth	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b912:	e070      	b.n	800b9f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	f003 0303 	and.w	r3, r3, #3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d006      	beq.n	800b92e <tcp_enqueue_flags+0xea>
 800b920:	4b37      	ldr	r3, [pc, #220]	; (800ba00 <tcp_enqueue_flags+0x1bc>)
 800b922:	f240 4242 	movw	r2, #1090	; 0x442
 800b926:	493b      	ldr	r1, [pc, #236]	; (800ba14 <tcp_enqueue_flags+0x1d0>)
 800b928:	4837      	ldr	r0, [pc, #220]	; (800ba08 <tcp_enqueue_flags+0x1c4>)
 800b92a:	f003 fe15 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	891b      	ldrh	r3, [r3, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d006      	beq.n	800b944 <tcp_enqueue_flags+0x100>
 800b936:	4b32      	ldr	r3, [pc, #200]	; (800ba00 <tcp_enqueue_flags+0x1bc>)
 800b938:	f240 4243 	movw	r2, #1091	; 0x443
 800b93c:	4936      	ldr	r1, [pc, #216]	; (800ba18 <tcp_enqueue_flags+0x1d4>)
 800b93e:	4832      	ldr	r0, [pc, #200]	; (800ba08 <tcp_enqueue_flags+0x1c4>)
 800b940:	f003 fe0a 	bl	800f558 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d103      	bne.n	800b954 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	66da      	str	r2, [r3, #108]	; 0x6c
 800b952:	e00d      	b.n	800b970 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b958:	61bb      	str	r3, [r7, #24]
 800b95a:	e002      	b.n	800b962 <tcp_enqueue_flags+0x11e>
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1f8      	bne.n	800b95c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	f003 0302 	and.w	r3, r3, #2
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d104      	bne.n	800b98c <tcp_enqueue_flags+0x148>
 800b982:	78fb      	ldrb	r3, [r7, #3]
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d006      	beq.n	800b9ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	8b5b      	ldrh	r3, [r3, #26]
 800b9a4:	f043 0320 	orr.w	r3, r3, #32
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fa fd4e 	bl	8006454 <pbuf_clen>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9c2:	4413      	add	r3, r2
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00e      	beq.n	800b9f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <tcp_enqueue_flags+0x1b0>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <tcp_enqueue_flags+0x1b0>
 800b9e6:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <tcp_enqueue_flags+0x1bc>)
 800b9e8:	f240 4265 	movw	r2, #1125	; 0x465
 800b9ec:	490b      	ldr	r1, [pc, #44]	; (800ba1c <tcp_enqueue_flags+0x1d8>)
 800b9ee:	4806      	ldr	r0, [pc, #24]	; (800ba08 <tcp_enqueue_flags+0x1c4>)
 800b9f0:	f003 fdb2 	bl	800f558 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3720      	adds	r7, #32
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	08012380 	.word	0x08012380
 800ba04:	080127a4 	.word	0x080127a4
 800ba08:	080123d4 	.word	0x080123d4
 800ba0c:	080127fc 	.word	0x080127fc
 800ba10:	0801281c 	.word	0x0801281c
 800ba14:	08012858 	.word	0x08012858
 800ba18:	08012870 	.word	0x08012870
 800ba1c:	0801289c 	.word	0x0801289c

0800ba20 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ba20:	b5b0      	push	{r4, r5, r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d106      	bne.n	800ba3c <tcp_output+0x1c>
 800ba2e:	4b9e      	ldr	r3, [pc, #632]	; (800bca8 <tcp_output+0x288>)
 800ba30:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ba34:	499d      	ldr	r1, [pc, #628]	; (800bcac <tcp_output+0x28c>)
 800ba36:	489e      	ldr	r0, [pc, #632]	; (800bcb0 <tcp_output+0x290>)
 800ba38:	f003 fd8e 	bl	800f558 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7d1b      	ldrb	r3, [r3, #20]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d106      	bne.n	800ba52 <tcp_output+0x32>
 800ba44:	4b98      	ldr	r3, [pc, #608]	; (800bca8 <tcp_output+0x288>)
 800ba46:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ba4a:	499a      	ldr	r1, [pc, #616]	; (800bcb4 <tcp_output+0x294>)
 800ba4c:	4898      	ldr	r0, [pc, #608]	; (800bcb0 <tcp_output+0x290>)
 800ba4e:	f003 fd83 	bl	800f558 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ba52:	4b99      	ldr	r3, [pc, #612]	; (800bcb8 <tcp_output+0x298>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d101      	bne.n	800ba60 <tcp_output+0x40>
    return ERR_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e1ce      	b.n	800bdfe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	bf28      	it	cs
 800ba70:	4613      	movcs	r3, r2
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10b      	bne.n	800ba9a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	8b5b      	ldrh	r3, [r3, #26]
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 81aa 	beq.w	800bde4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fdcb 	bl	800c62c <tcp_send_empty_ack>
 800ba96:	4603      	mov	r3, r0
 800ba98:	e1b1      	b.n	800bdfe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	461a      	mov	r2, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff f824 	bl	800aaf0 <tcp_route>
 800baa8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d102      	bne.n	800bab6 <tcp_output+0x96>
    return ERR_RTE;
 800bab0:	f06f 0303 	mvn.w	r3, #3
 800bab4:	e1a3      	b.n	800bdfe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <tcp_output+0xa4>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d111      	bne.n	800bae8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <tcp_output+0xb0>
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	3304      	adds	r3, #4
 800bace:	e000      	b.n	800bad2 <tcp_output+0xb2>
 800bad0:	2300      	movs	r3, #0
 800bad2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d102      	bne.n	800bae0 <tcp_output+0xc0>
      return ERR_RTE;
 800bada:	f06f 0303 	mvn.w	r3, #3
 800bade:	e18e      	b.n	800bdfe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f9 f91f 	bl	8004d32 <lwip_htonl>
 800baf4:	4602      	mov	r2, r0
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafe:	8912      	ldrh	r2, [r2, #8]
 800bb00:	4413      	add	r3, r2
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d227      	bcs.n	800bb58 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb0e:	461a      	mov	r2, r3
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d114      	bne.n	800bb40 <tcp_output+0x120>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d110      	bne.n	800bb40 <tcp_output+0x120>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	8b5b      	ldrh	r3, [r3, #26]
 800bb44:	f003 0302 	and.w	r3, r3, #2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 814d 	beq.w	800bde8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fd6c 	bl	800c62c <tcp_send_empty_ack>
 800bb54:	4603      	mov	r3, r0
 800bb56:	e152      	b.n	800bdfe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb64:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f000 811c 	beq.w	800bda6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800bb6e:	e002      	b.n	800bb76 <tcp_output+0x156>
 800bb70:	6a3b      	ldr	r3, [r7, #32]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	623b      	str	r3, [r7, #32]
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f8      	bne.n	800bb70 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bb7e:	e112      	b.n	800bda6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	899b      	ldrh	r3, [r3, #12]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f9 f8bd 	bl	8004d08 <lwip_htons>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	f003 0304 	and.w	r3, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d006      	beq.n	800bba8 <tcp_output+0x188>
 800bb9a:	4b43      	ldr	r3, [pc, #268]	; (800bca8 <tcp_output+0x288>)
 800bb9c:	f240 5236 	movw	r2, #1334	; 0x536
 800bba0:	4946      	ldr	r1, [pc, #280]	; (800bcbc <tcp_output+0x29c>)
 800bba2:	4843      	ldr	r0, [pc, #268]	; (800bcb0 <tcp_output+0x290>)
 800bba4:	f003 fcd8 	bl	800f558 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01f      	beq.n	800bbf0 <tcp_output+0x1d0>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	8b5b      	ldrh	r3, [r3, #26]
 800bbb4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d119      	bne.n	800bbf0 <tcp_output+0x1d0>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00b      	beq.n	800bbdc <tcp_output+0x1bc>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d110      	bne.n	800bbf0 <tcp_output+0x1d0>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd2:	891a      	ldrh	r2, [r3, #8]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d209      	bcs.n	800bbf0 <tcp_output+0x1d0>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d004      	beq.n	800bbf0 <tcp_output+0x1d0>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbec:	2b08      	cmp	r3, #8
 800bbee:	d901      	bls.n	800bbf4 <tcp_output+0x1d4>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e000      	b.n	800bbf6 <tcp_output+0x1d6>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	8b5b      	ldrh	r3, [r3, #26]
 800bbfe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 80e4 	beq.w	800bdd0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	7d1b      	ldrb	r3, [r3, #20]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d00d      	beq.n	800bc2c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	899b      	ldrh	r3, [r3, #12]
 800bc16:	b29c      	uxth	r4, r3
 800bc18:	2010      	movs	r0, #16
 800bc1a:	f7f9 f875 	bl	8004d08 <lwip_htons>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	461a      	mov	r2, r3
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	4322      	orrs	r2, r4
 800bc28:	b292      	uxth	r2, r2
 800bc2a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc32:	f000 f909 	bl	800be48 <tcp_output_segment>
 800bc36:	4603      	mov	r3, r0
 800bc38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bc3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d009      	beq.n	800bc56 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	8b5b      	ldrh	r3, [r3, #26]
 800bc46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	835a      	strh	r2, [r3, #26]
      return err;
 800bc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc54:	e0d3      	b.n	800bdfe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7d1b      	ldrb	r3, [r3, #20]
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d006      	beq.n	800bc74 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	8b5b      	ldrh	r3, [r3, #26]
 800bc6a:	f023 0303 	bic.w	r3, r3, #3
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7f9 f859 	bl	8004d32 <lwip_htonl>
 800bc80:	4604      	mov	r4, r0
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	891b      	ldrh	r3, [r3, #8]
 800bc86:	461d      	mov	r5, r3
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	899b      	ldrh	r3, [r3, #12]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f9 f839 	bl	8004d08 <lwip_htons>
 800bc96:	4603      	mov	r3, r0
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	f003 0303 	and.w	r3, r3, #3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00e      	beq.n	800bcc0 <tcp_output+0x2a0>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e00d      	b.n	800bcc2 <tcp_output+0x2a2>
 800bca6:	bf00      	nop
 800bca8:	08012380 	.word	0x08012380
 800bcac:	080128c4 	.word	0x080128c4
 800bcb0:	080123d4 	.word	0x080123d4
 800bcb4:	080128dc 	.word	0x080128dc
 800bcb8:	20008eec 	.word	0x20008eec
 800bcbc:	08012904 	.word	0x08012904
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	442b      	add	r3, r5
 800bcc4:	4423      	add	r3, r4
 800bcc6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da02      	bge.n	800bcda <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	891b      	ldrh	r3, [r3, #8]
 800bcde:	461c      	mov	r4, r3
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	899b      	ldrh	r3, [r3, #12]
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f9 f80d 	bl	8004d08 <lwip_htons>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <tcp_output+0x2de>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e000      	b.n	800bd00 <tcp_output+0x2e0>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4423      	add	r3, r4
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d049      	beq.n	800bd9a <tcp_output+0x37a>
      seg->next = NULL;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d105      	bne.n	800bd20 <tcp_output+0x300>
        pcb->unacked = seg;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd18:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1c:	623b      	str	r3, [r7, #32]
 800bd1e:	e03f      	b.n	800bda0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f9 f803 	bl	8004d32 <lwip_htonl>
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7f8 fffc 	bl	8004d32 <lwip_htonl>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	1ae3      	subs	r3, r4, r3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	da24      	bge.n	800bd8c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	3370      	adds	r3, #112	; 0x70
 800bd46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bd48:	e002      	b.n	800bd50 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d011      	beq.n	800bd7c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7f8 ffe6 	bl	8004d32 <lwip_htonl>
 800bd66:	4604      	mov	r4, r0
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7f8 ffdf 	bl	8004d32 <lwip_htonl>
 800bd74:	4603      	mov	r3, r0
 800bd76:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	dbe6      	blt.n	800bd4a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e009      	b.n	800bda0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd90:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	623b      	str	r3, [r7, #32]
 800bd98:	e002      	b.n	800bda0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bd9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd9c:	f7fb feff 	bl	8007b9e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d012      	beq.n	800bdd2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7f8 ffbd 	bl	8004d32 <lwip_htonl>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdc2:	8912      	ldrh	r2, [r2, #8]
 800bdc4:	4413      	add	r3, r2
  while (seg != NULL &&
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	f4bf aed9 	bcs.w	800bb80 <tcp_output+0x160>
 800bdce:	e000      	b.n	800bdd2 <tcp_output+0x3b2>
      break;
 800bdd0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d108      	bne.n	800bdec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bde2:	e004      	b.n	800bdee <tcp_output+0x3ce>
    goto output_done;
 800bde4:	bf00      	nop
 800bde6:	e002      	b.n	800bdee <tcp_output+0x3ce>
    goto output_done;
 800bde8:	bf00      	nop
 800bdea:	e000      	b.n	800bdee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bdec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	8b5b      	ldrh	r3, [r3, #26]
 800bdf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3728      	adds	r7, #40	; 0x28
 800be02:	46bd      	mov	sp, r7
 800be04:	bdb0      	pop	{r4, r5, r7, pc}
 800be06:	bf00      	nop

0800be08 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d106      	bne.n	800be24 <tcp_output_segment_busy+0x1c>
 800be16:	4b09      	ldr	r3, [pc, #36]	; (800be3c <tcp_output_segment_busy+0x34>)
 800be18:	f240 529a 	movw	r2, #1434	; 0x59a
 800be1c:	4908      	ldr	r1, [pc, #32]	; (800be40 <tcp_output_segment_busy+0x38>)
 800be1e:	4809      	ldr	r0, [pc, #36]	; (800be44 <tcp_output_segment_busy+0x3c>)
 800be20:	f003 fb9a 	bl	800f558 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	7b9b      	ldrb	r3, [r3, #14]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d001      	beq.n	800be32 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	08012380 	.word	0x08012380
 800be40:	0801291c 	.word	0x0801291c
 800be44:	080123d4 	.word	0x080123d4

0800be48 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800be48:	b5b0      	push	{r4, r5, r7, lr}
 800be4a:	b08c      	sub	sp, #48	; 0x30
 800be4c:	af04      	add	r7, sp, #16
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d106      	bne.n	800be68 <tcp_output_segment+0x20>
 800be5a:	4b63      	ldr	r3, [pc, #396]	; (800bfe8 <tcp_output_segment+0x1a0>)
 800be5c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800be60:	4962      	ldr	r1, [pc, #392]	; (800bfec <tcp_output_segment+0x1a4>)
 800be62:	4863      	ldr	r0, [pc, #396]	; (800bff0 <tcp_output_segment+0x1a8>)
 800be64:	f003 fb78 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d106      	bne.n	800be7c <tcp_output_segment+0x34>
 800be6e:	4b5e      	ldr	r3, [pc, #376]	; (800bfe8 <tcp_output_segment+0x1a0>)
 800be70:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800be74:	495f      	ldr	r1, [pc, #380]	; (800bff4 <tcp_output_segment+0x1ac>)
 800be76:	485e      	ldr	r0, [pc, #376]	; (800bff0 <tcp_output_segment+0x1a8>)
 800be78:	f003 fb6e 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <tcp_output_segment+0x48>
 800be82:	4b59      	ldr	r3, [pc, #356]	; (800bfe8 <tcp_output_segment+0x1a0>)
 800be84:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800be88:	495b      	ldr	r1, [pc, #364]	; (800bff8 <tcp_output_segment+0x1b0>)
 800be8a:	4859      	ldr	r0, [pc, #356]	; (800bff0 <tcp_output_segment+0x1a8>)
 800be8c:	f003 fb64 	bl	800f558 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff ffb9 	bl	800be08 <tcp_output_segment_busy>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	e09f      	b.n	800bfe0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68dc      	ldr	r4, [r3, #12]
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7f8 ff42 	bl	8004d32 <lwip_htonl>
 800beae:	4603      	mov	r3, r0
 800beb0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	68dc      	ldr	r4, [r3, #12]
 800beba:	4610      	mov	r0, r2
 800bebc:	f7f8 ff24 	bl	8004d08 <lwip_htons>
 800bec0:	4603      	mov	r3, r0
 800bec2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800becc:	441a      	add	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	3314      	adds	r3, #20
 800bed8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	7a9b      	ldrb	r3, [r3, #10]
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d015      	beq.n	800bf12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	3304      	adds	r3, #4
 800beea:	461a      	mov	r2, r3
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bef2:	f7fc fa37 	bl	8008364 <tcp_eff_send_mss_netif>
 800bef6:	4603      	mov	r3, r0
 800bef8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800befa:	8b7b      	ldrh	r3, [r7, #26]
 800befc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7f8 ff16 	bl	8004d32 <lwip_htonl>
 800bf06:	4602      	mov	r2, r0
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	3304      	adds	r3, #4
 800bf10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	da02      	bge.n	800bf22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10c      	bne.n	800bf44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bf2a:	4b34      	ldr	r3, [pc, #208]	; (800bffc <tcp_output_segment+0x1b4>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7f8 fefa 	bl	8004d32 <lwip_htonl>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	68da      	ldr	r2, [r3, #12]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	8959      	ldrh	r1, [r3, #10]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	8b3a      	ldrh	r2, [r7, #24]
 800bf5e:	1a8a      	subs	r2, r1, r2
 800bf60:	b292      	uxth	r2, r2
 800bf62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	8919      	ldrh	r1, [r3, #8]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	8b3a      	ldrh	r2, [r7, #24]
 800bf70:	1a8a      	subs	r2, r1, r2
 800bf72:	b292      	uxth	r2, r2
 800bf74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	68d2      	ldr	r2, [r2, #12]
 800bf7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	741a      	strb	r2, [r3, #16]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f103 0214 	add.w	r2, r3, #20
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	7a9b      	ldrb	r3, [r3, #10]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	f003 0304 	and.w	r3, r3, #4
 800bf9e:	4413      	add	r3, r2
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d006      	beq.n	800bfb4 <tcp_output_segment+0x16c>
 800bfa6:	4b10      	ldr	r3, [pc, #64]	; (800bfe8 <tcp_output_segment+0x1a0>)
 800bfa8:	f240 621c 	movw	r2, #1564	; 0x61c
 800bfac:	4914      	ldr	r1, [pc, #80]	; (800c000 <tcp_output_segment+0x1b8>)
 800bfae:	4810      	ldr	r0, [pc, #64]	; (800bff0 <tcp_output_segment+0x1a8>)
 800bfb0:	f003 fad2 	bl	800f558 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6858      	ldr	r0, [r3, #4]
 800bfb8:	68b9      	ldr	r1, [r7, #8]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	1d1c      	adds	r4, r3, #4
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	7add      	ldrb	r5, [r3, #11]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	7a9b      	ldrb	r3, [r3, #10]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	9202      	str	r2, [sp, #8]
 800bfca:	2206      	movs	r2, #6
 800bfcc:	9201      	str	r2, [sp, #4]
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	f002 fa36 	bl	800e444 <ip4_output_if>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bfdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3720      	adds	r7, #32
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bdb0      	pop	{r4, r5, r7, pc}
 800bfe8:	08012380 	.word	0x08012380
 800bfec:	08012944 	.word	0x08012944
 800bff0:	080123d4 	.word	0x080123d4
 800bff4:	08012964 	.word	0x08012964
 800bff8:	08012984 	.word	0x08012984
 800bffc:	20008edc 	.word	0x20008edc
 800c000:	080129a8 	.word	0x080129a8

0800c004 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c004:	b5b0      	push	{r4, r5, r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d106      	bne.n	800c020 <tcp_rexmit_rto_prepare+0x1c>
 800c012:	4b31      	ldr	r3, [pc, #196]	; (800c0d8 <tcp_rexmit_rto_prepare+0xd4>)
 800c014:	f240 6263 	movw	r2, #1635	; 0x663
 800c018:	4930      	ldr	r1, [pc, #192]	; (800c0dc <tcp_rexmit_rto_prepare+0xd8>)
 800c01a:	4831      	ldr	r0, [pc, #196]	; (800c0e0 <tcp_rexmit_rto_prepare+0xdc>)
 800c01c:	f003 fa9c 	bl	800f558 <iprintf>

  if (pcb->unacked == NULL) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c028:	f06f 0305 	mvn.w	r3, #5
 800c02c:	e050      	b.n	800c0d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c032:	60fb      	str	r3, [r7, #12]
 800c034:	e00b      	b.n	800c04e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff fee6 	bl	800be08 <tcp_output_segment_busy>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c042:	f06f 0305 	mvn.w	r3, #5
 800c046:	e043      	b.n	800c0d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1ef      	bne.n	800c036 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f7ff fed6 	bl	800be08 <tcp_output_segment_busy>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c062:	f06f 0305 	mvn.w	r3, #5
 800c066:	e033      	b.n	800c0d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	8b5b      	ldrh	r3, [r3, #26]
 800c082:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	4618      	mov	r0, r3
 800c094:	f7f8 fe4d 	bl	8004d32 <lwip_htonl>
 800c098:	4604      	mov	r4, r0
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	891b      	ldrh	r3, [r3, #8]
 800c09e:	461d      	mov	r5, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	899b      	ldrh	r3, [r3, #12]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7f8 fe2d 	bl	8004d08 <lwip_htons>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <tcp_rexmit_rto_prepare+0xba>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e000      	b.n	800c0c0 <tcp_rexmit_rto_prepare+0xbc>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	442b      	add	r3, r5
 800c0c2:	18e2      	adds	r2, r4, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d8:	08012380 	.word	0x08012380
 800c0dc:	080129bc 	.word	0x080129bc
 800c0e0:	080123d4 	.word	0x080123d4

0800c0e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d106      	bne.n	800c100 <tcp_rexmit_rto_commit+0x1c>
 800c0f2:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <tcp_rexmit_rto_commit+0x44>)
 800c0f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c0f8:	490c      	ldr	r1, [pc, #48]	; (800c12c <tcp_rexmit_rto_commit+0x48>)
 800c0fa:	480d      	ldr	r0, [pc, #52]	; (800c130 <tcp_rexmit_rto_commit+0x4c>)
 800c0fc:	f003 fa2c 	bl	800f558 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c106:	2bff      	cmp	r3, #255	; 0xff
 800c108:	d007      	beq.n	800c11a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c110:	3301      	adds	r3, #1
 800c112:	b2da      	uxtb	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fc80 	bl	800ba20 <tcp_output>
}
 800c120:	bf00      	nop
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	08012380 	.word	0x08012380
 800c12c:	080129e0 	.word	0x080129e0
 800c130:	080123d4 	.word	0x080123d4

0800c134 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d106      	bne.n	800c150 <tcp_rexmit_rto+0x1c>
 800c142:	4b0a      	ldr	r3, [pc, #40]	; (800c16c <tcp_rexmit_rto+0x38>)
 800c144:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c148:	4909      	ldr	r1, [pc, #36]	; (800c170 <tcp_rexmit_rto+0x3c>)
 800c14a:	480a      	ldr	r0, [pc, #40]	; (800c174 <tcp_rexmit_rto+0x40>)
 800c14c:	f003 fa04 	bl	800f558 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff ff57 	bl	800c004 <tcp_rexmit_rto_prepare>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d102      	bne.n	800c162 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff ffc1 	bl	800c0e4 <tcp_rexmit_rto_commit>
  }
}
 800c162:	bf00      	nop
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	08012380 	.word	0x08012380
 800c170:	08012a04 	.word	0x08012a04
 800c174:	080123d4 	.word	0x080123d4

0800c178 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d106      	bne.n	800c194 <tcp_rexmit+0x1c>
 800c186:	4b2f      	ldr	r3, [pc, #188]	; (800c244 <tcp_rexmit+0xcc>)
 800c188:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c18c:	492e      	ldr	r1, [pc, #184]	; (800c248 <tcp_rexmit+0xd0>)
 800c18e:	482f      	ldr	r0, [pc, #188]	; (800c24c <tcp_rexmit+0xd4>)
 800c190:	f003 f9e2 	bl	800f558 <iprintf>

  if (pcb->unacked == NULL) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d102      	bne.n	800c1a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c19c:	f06f 0305 	mvn.w	r3, #5
 800c1a0:	e04c      	b.n	800c23c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c1a8:	68b8      	ldr	r0, [r7, #8]
 800c1aa:	f7ff fe2d 	bl	800be08 <tcp_output_segment_busy>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c1b4:	f06f 0305 	mvn.w	r3, #5
 800c1b8:	e040      	b.n	800c23c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	336c      	adds	r3, #108	; 0x6c
 800c1c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c1c8:	e002      	b.n	800c1d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d011      	beq.n	800c1fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7f8 fda6 	bl	8004d32 <lwip_htonl>
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7f8 fd9f 	bl	8004d32 <lwip_htonl>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dbe6      	blt.n	800c1ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d103      	bne.n	800c21a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c220:	2bff      	cmp	r3, #255	; 0xff
 800c222:	d007      	beq.n	800c234 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c22a:	3301      	adds	r3, #1
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	bd90      	pop	{r4, r7, pc}
 800c244:	08012380 	.word	0x08012380
 800c248:	08012a20 	.word	0x08012a20
 800c24c:	080123d4 	.word	0x080123d4

0800c250 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <tcp_rexmit_fast+0x1c>
 800c25e:	4b2a      	ldr	r3, [pc, #168]	; (800c308 <tcp_rexmit_fast+0xb8>)
 800c260:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c264:	4929      	ldr	r1, [pc, #164]	; (800c30c <tcp_rexmit_fast+0xbc>)
 800c266:	482a      	ldr	r0, [pc, #168]	; (800c310 <tcp_rexmit_fast+0xc0>)
 800c268:	f003 f976 	bl	800f558 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c270:	2b00      	cmp	r3, #0
 800c272:	d044      	beq.n	800c2fe <tcp_rexmit_fast+0xae>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	8b5b      	ldrh	r3, [r3, #26]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d13e      	bne.n	800c2fe <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7ff ff79 	bl	800c178 <tcp_rexmit>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d138      	bne.n	800c2fe <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c298:	4293      	cmp	r3, r2
 800c29a:	bf28      	it	cs
 800c29c:	4613      	movcs	r3, r2
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	0fda      	lsrs	r2, r3, #31
 800c2a2:	4413      	add	r3, r2
 800c2a4:	105b      	asrs	r3, r3, #1
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d206      	bcs.n	800c2ce <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2d8:	4619      	mov	r1, r3
 800c2da:	0049      	lsls	r1, r1, #1
 800c2dc:	440b      	add	r3, r1
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	4413      	add	r3, r2
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	8b5b      	ldrh	r3, [r3, #26]
 800c2ee:	f043 0304 	orr.w	r3, r3, #4
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	08012380 	.word	0x08012380
 800c30c:	08012a38 	.word	0x08012a38
 800c310:	080123d4 	.word	0x080123d4

0800c314 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	607b      	str	r3, [r7, #4]
 800c31e:	460b      	mov	r3, r1
 800c320:	817b      	strh	r3, [r7, #10]
 800c322:	4613      	mov	r3, r2
 800c324:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c326:	897a      	ldrh	r2, [r7, #10]
 800c328:	893b      	ldrh	r3, [r7, #8]
 800c32a:	4413      	add	r3, r2
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3314      	adds	r3, #20
 800c330:	b29b      	uxth	r3, r3
 800c332:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c336:	4619      	mov	r1, r3
 800c338:	2022      	movs	r0, #34	; 0x22
 800c33a:	f7f9 fd1f 	bl	8005d7c <pbuf_alloc>
 800c33e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d04d      	beq.n	800c3e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c346:	897b      	ldrh	r3, [r7, #10]
 800c348:	3313      	adds	r3, #19
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	8952      	ldrh	r2, [r2, #10]
 800c34e:	4293      	cmp	r3, r2
 800c350:	db06      	blt.n	800c360 <tcp_output_alloc_header_common+0x4c>
 800c352:	4b26      	ldr	r3, [pc, #152]	; (800c3ec <tcp_output_alloc_header_common+0xd8>)
 800c354:	f240 7223 	movw	r2, #1827	; 0x723
 800c358:	4925      	ldr	r1, [pc, #148]	; (800c3f0 <tcp_output_alloc_header_common+0xdc>)
 800c35a:	4826      	ldr	r0, [pc, #152]	; (800c3f4 <tcp_output_alloc_header_common+0xe0>)
 800c35c:	f003 f8fc 	bl	800f558 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c366:	8c3b      	ldrh	r3, [r7, #32]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7f8 fccd 	bl	8004d08 <lwip_htons>
 800c36e:	4603      	mov	r3, r0
 800c370:	461a      	mov	r2, r3
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f8 fcc5 	bl	8004d08 <lwip_htons>
 800c37e:	4603      	mov	r3, r0
 800c380:	461a      	mov	r2, r3
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f7f8 fcd0 	bl	8004d32 <lwip_htonl>
 800c392:	4602      	mov	r2, r0
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c398:	897b      	ldrh	r3, [r7, #10]
 800c39a:	089b      	lsrs	r3, r3, #2
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	3305      	adds	r3, #5
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	031b      	lsls	r3, r3, #12
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f8 fca9 	bl	8004d08 <lwip_htons>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c3be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f8 fca1 	bl	8004d08 <lwip_htons>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	741a      	strb	r2, [r3, #16]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	749a      	strb	r2, [r3, #18]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c3e2:	697b      	ldr	r3, [r7, #20]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3718      	adds	r7, #24
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	08012380 	.word	0x08012380
 800c3f0:	08012a58 	.word	0x08012a58
 800c3f4:	080123d4 	.word	0x080123d4

0800c3f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c3f8:	b5b0      	push	{r4, r5, r7, lr}
 800c3fa:	b08a      	sub	sp, #40	; 0x28
 800c3fc:	af04      	add	r7, sp, #16
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	607b      	str	r3, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	817b      	strh	r3, [r7, #10]
 800c406:	4613      	mov	r3, r2
 800c408:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d106      	bne.n	800c41e <tcp_output_alloc_header+0x26>
 800c410:	4b15      	ldr	r3, [pc, #84]	; (800c468 <tcp_output_alloc_header+0x70>)
 800c412:	f240 7242 	movw	r2, #1858	; 0x742
 800c416:	4915      	ldr	r1, [pc, #84]	; (800c46c <tcp_output_alloc_header+0x74>)
 800c418:	4815      	ldr	r0, [pc, #84]	; (800c470 <tcp_output_alloc_header+0x78>)
 800c41a:	f003 f89d 	bl	800f558 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	8adb      	ldrh	r3, [r3, #22]
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	8b12      	ldrh	r2, [r2, #24]
 800c42a:	68f9      	ldr	r1, [r7, #12]
 800c42c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c42e:	893d      	ldrh	r5, [r7, #8]
 800c430:	897c      	ldrh	r4, [r7, #10]
 800c432:	9103      	str	r1, [sp, #12]
 800c434:	2110      	movs	r1, #16
 800c436:	9102      	str	r1, [sp, #8]
 800c438:	9201      	str	r2, [sp, #4]
 800c43a:	9300      	str	r3, [sp, #0]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	462a      	mov	r2, r5
 800c440:	4621      	mov	r1, r4
 800c442:	f7ff ff67 	bl	800c314 <tcp_output_alloc_header_common>
 800c446:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d006      	beq.n	800c45c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c456:	441a      	add	r2, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c45c:	697b      	ldr	r3, [r7, #20]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bdb0      	pop	{r4, r5, r7, pc}
 800c466:	bf00      	nop
 800c468:	08012380 	.word	0x08012380
 800c46c:	08012a88 	.word	0x08012a88
 800c470:	080123d4 	.word	0x080123d4

0800c474 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	4611      	mov	r1, r2
 800c480:	461a      	mov	r2, r3
 800c482:	460b      	mov	r3, r1
 800c484:	71fb      	strb	r3, [r7, #7]
 800c486:	4613      	mov	r3, r2
 800c488:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d106      	bne.n	800c4a2 <tcp_output_fill_options+0x2e>
 800c494:	4b13      	ldr	r3, [pc, #76]	; (800c4e4 <tcp_output_fill_options+0x70>)
 800c496:	f240 7256 	movw	r2, #1878	; 0x756
 800c49a:	4913      	ldr	r1, [pc, #76]	; (800c4e8 <tcp_output_fill_options+0x74>)
 800c49c:	4813      	ldr	r0, [pc, #76]	; (800c4ec <tcp_output_fill_options+0x78>)
 800c49e:	f003 f85b 	bl	800f558 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	3314      	adds	r3, #20
 800c4ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	f103 0214 	add.w	r2, r3, #20
 800c4b4:	8bfb      	ldrh	r3, [r7, #30]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	79fb      	ldrb	r3, [r7, #7]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	f003 0304 	and.w	r3, r3, #4
 800c4c2:	440b      	add	r3, r1
 800c4c4:	4413      	add	r3, r2
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d006      	beq.n	800c4da <tcp_output_fill_options+0x66>
 800c4cc:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <tcp_output_fill_options+0x70>)
 800c4ce:	f240 7275 	movw	r2, #1909	; 0x775
 800c4d2:	4907      	ldr	r1, [pc, #28]	; (800c4f0 <tcp_output_fill_options+0x7c>)
 800c4d4:	4805      	ldr	r0, [pc, #20]	; (800c4ec <tcp_output_fill_options+0x78>)
 800c4d6:	f003 f83f 	bl	800f558 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c4da:	bf00      	nop
 800c4dc:	3720      	adds	r7, #32
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	08012380 	.word	0x08012380
 800c4e8:	08012ab0 	.word	0x08012ab0
 800c4ec:	080123d4 	.word	0x080123d4
 800c4f0:	080129a8 	.word	0x080129a8

0800c4f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af04      	add	r7, sp, #16
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <tcp_output_control_segment+0x22>
 800c508:	4b1c      	ldr	r3, [pc, #112]	; (800c57c <tcp_output_control_segment+0x88>)
 800c50a:	f240 7287 	movw	r2, #1927	; 0x787
 800c50e:	491c      	ldr	r1, [pc, #112]	; (800c580 <tcp_output_control_segment+0x8c>)
 800c510:	481c      	ldr	r0, [pc, #112]	; (800c584 <tcp_output_control_segment+0x90>)
 800c512:	f003 f821 	bl	800f558 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	6879      	ldr	r1, [r7, #4]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f7fe fae8 	bl	800aaf0 <tcp_route>
 800c520:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d102      	bne.n	800c52e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c528:	23fc      	movs	r3, #252	; 0xfc
 800c52a:	75fb      	strb	r3, [r7, #23]
 800c52c:	e01c      	b.n	800c568 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d006      	beq.n	800c542 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	7adb      	ldrb	r3, [r3, #11]
 800c538:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	7a9b      	ldrb	r3, [r3, #10]
 800c53e:	757b      	strb	r3, [r7, #21]
 800c540:	e003      	b.n	800c54a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c542:	23ff      	movs	r3, #255	; 0xff
 800c544:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c54a:	7dba      	ldrb	r2, [r7, #22]
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	9302      	str	r3, [sp, #8]
 800c550:	2306      	movs	r3, #6
 800c552:	9301      	str	r3, [sp, #4]
 800c554:	7d7b      	ldrb	r3, [r7, #21]
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	4613      	mov	r3, r2
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	68b8      	ldr	r0, [r7, #8]
 800c560:	f001 ff70 	bl	800e444 <ip4_output_if>
 800c564:	4603      	mov	r3, r0
 800c566:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c568:	68b8      	ldr	r0, [r7, #8]
 800c56a:	f7f9 feeb 	bl	8006344 <pbuf_free>
  return err;
 800c56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	08012380 	.word	0x08012380
 800c580:	08012ad8 	.word	0x08012ad8
 800c584:	080123d4 	.word	0x080123d4

0800c588 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b08b      	sub	sp, #44	; 0x2c
 800c58c:	af04      	add	r7, sp, #16
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <tcp_rst+0x22>
 800c59c:	4b1f      	ldr	r3, [pc, #124]	; (800c61c <tcp_rst+0x94>)
 800c59e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c5a2:	491f      	ldr	r1, [pc, #124]	; (800c620 <tcp_rst+0x98>)
 800c5a4:	481f      	ldr	r0, [pc, #124]	; (800c624 <tcp_rst+0x9c>)
 800c5a6:	f002 ffd7 	bl	800f558 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d106      	bne.n	800c5be <tcp_rst+0x36>
 800c5b0:	4b1a      	ldr	r3, [pc, #104]	; (800c61c <tcp_rst+0x94>)
 800c5b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c5b6:	491c      	ldr	r1, [pc, #112]	; (800c628 <tcp_rst+0xa0>)
 800c5b8:	481a      	ldr	r0, [pc, #104]	; (800c624 <tcp_rst+0x9c>)
 800c5ba:	f002 ffcd 	bl	800f558 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c5be:	2300      	movs	r3, #0
 800c5c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c5c2:	f246 0308 	movw	r3, #24584	; 0x6008
 800c5c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	b29c      	uxth	r4, r3
 800c5cc:	68b8      	ldr	r0, [r7, #8]
 800c5ce:	f7f8 fbb0 	bl	8004d32 <lwip_htonl>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	8abb      	ldrh	r3, [r7, #20]
 800c5d6:	9303      	str	r3, [sp, #12]
 800c5d8:	2314      	movs	r3, #20
 800c5da:	9302      	str	r3, [sp, #8]
 800c5dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff fe92 	bl	800c314 <tcp_output_alloc_header_common>
 800c5f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00c      	beq.n	800c612 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	6939      	ldr	r1, [r7, #16]
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff ff38 	bl	800c474 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	6939      	ldr	r1, [r7, #16]
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7ff ff72 	bl	800c4f4 <tcp_output_control_segment>
 800c610:	e000      	b.n	800c614 <tcp_rst+0x8c>
    return;
 800c612:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c614:	371c      	adds	r7, #28
 800c616:	46bd      	mov	sp, r7
 800c618:	bd90      	pop	{r4, r7, pc}
 800c61a:	bf00      	nop
 800c61c:	08012380 	.word	0x08012380
 800c620:	08012b04 	.word	0x08012b04
 800c624:	080123d4 	.word	0x080123d4
 800c628:	08012b20 	.word	0x08012b20

0800c62c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c62c:	b590      	push	{r4, r7, lr}
 800c62e:	b087      	sub	sp, #28
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d106      	bne.n	800c650 <tcp_send_empty_ack+0x24>
 800c642:	4b28      	ldr	r3, [pc, #160]	; (800c6e4 <tcp_send_empty_ack+0xb8>)
 800c644:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c648:	4927      	ldr	r1, [pc, #156]	; (800c6e8 <tcp_send_empty_ack+0xbc>)
 800c64a:	4828      	ldr	r0, [pc, #160]	; (800c6ec <tcp_send_empty_ack+0xc0>)
 800c64c:	f002 ff84 	bl	800f558 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c650:	7dfb      	ldrb	r3, [r7, #23]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	b2db      	uxtb	r3, r3
 800c656:	f003 0304 	and.w	r3, r3, #4
 800c65a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c65c:	7d7b      	ldrb	r3, [r7, #21]
 800c65e:	b29c      	uxth	r4, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c664:	4618      	mov	r0, r3
 800c666:	f7f8 fb64 	bl	8004d32 <lwip_htonl>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2200      	movs	r2, #0
 800c66e:	4621      	mov	r1, r4
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff fec1 	bl	800c3f8 <tcp_output_alloc_header>
 800c676:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d109      	bne.n	800c692 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8b5b      	ldrh	r3, [r3, #26]
 800c682:	f043 0303 	orr.w	r3, r3, #3
 800c686:	b29a      	uxth	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c68c:	f06f 0301 	mvn.w	r3, #1
 800c690:	e023      	b.n	800c6da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c692:	7dbb      	ldrb	r3, [r7, #22]
 800c694:	7dfa      	ldrb	r2, [r7, #23]
 800c696:	6939      	ldr	r1, [r7, #16]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff feeb 	bl	800c474 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	6939      	ldr	r1, [r7, #16]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff ff24 	bl	800c4f4 <tcp_output_control_segment>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d007      	beq.n	800c6c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8b5b      	ldrh	r3, [r3, #26]
 800c6bc:	f043 0303 	orr.w	r3, r3, #3
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	835a      	strh	r2, [r3, #26]
 800c6c6:	e006      	b.n	800c6d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8b5b      	ldrh	r3, [r3, #26]
 800c6cc:	f023 0303 	bic.w	r3, r3, #3
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c6d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd90      	pop	{r4, r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	08012380 	.word	0x08012380
 800c6e8:	08012b3c 	.word	0x08012b3c
 800c6ec:	080123d4 	.word	0x080123d4

0800c6f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c6f0:	b590      	push	{r4, r7, lr}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <tcp_keepalive+0x20>
 800c702:	4b18      	ldr	r3, [pc, #96]	; (800c764 <tcp_keepalive+0x74>)
 800c704:	f640 0224 	movw	r2, #2084	; 0x824
 800c708:	4917      	ldr	r1, [pc, #92]	; (800c768 <tcp_keepalive+0x78>)
 800c70a:	4818      	ldr	r0, [pc, #96]	; (800c76c <tcp_keepalive+0x7c>)
 800c70c:	f002 ff24 	bl	800f558 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	b29c      	uxth	r4, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c718:	3b01      	subs	r3, #1
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f8 fb09 	bl	8004d32 <lwip_htonl>
 800c720:	4603      	mov	r3, r0
 800c722:	2200      	movs	r2, #0
 800c724:	4621      	mov	r1, r4
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7ff fe66 	bl	800c3f8 <tcp_output_alloc_header>
 800c72c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d102      	bne.n	800c73a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c738:	e010      	b.n	800c75c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	2200      	movs	r2, #0
 800c73e:	6939      	ldr	r1, [r7, #16]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff fe97 	bl	800c474 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3304      	adds	r3, #4
 800c74c:	6939      	ldr	r1, [r7, #16]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7ff fed0 	bl	800c4f4 <tcp_output_control_segment>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	371c      	adds	r7, #28
 800c760:	46bd      	mov	sp, r7
 800c762:	bd90      	pop	{r4, r7, pc}
 800c764:	08012380 	.word	0x08012380
 800c768:	08012b5c 	.word	0x08012b5c
 800c76c:	080123d4 	.word	0x080123d4

0800c770 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b08b      	sub	sp, #44	; 0x2c
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c778:	2300      	movs	r3, #0
 800c77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <tcp_zero_window_probe+0x22>
 800c784:	4b4c      	ldr	r3, [pc, #304]	; (800c8b8 <tcp_zero_window_probe+0x148>)
 800c786:	f640 024f 	movw	r2, #2127	; 0x84f
 800c78a:	494c      	ldr	r1, [pc, #304]	; (800c8bc <tcp_zero_window_probe+0x14c>)
 800c78c:	484c      	ldr	r0, [pc, #304]	; (800c8c0 <tcp_zero_window_probe+0x150>)
 800c78e:	f002 fee3 	bl	800f558 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c796:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e086      	b.n	800c8b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c7a8:	2bff      	cmp	r3, #255	; 0xff
 800c7aa:	d007      	beq.n	800c7bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	899b      	ldrh	r3, [r3, #12]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7f8 fa9f 	bl	8004d08 <lwip_htons>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d005      	beq.n	800c7e2 <tcp_zero_window_probe+0x72>
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	891b      	ldrh	r3, [r3, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <tcp_zero_window_probe+0x72>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e000      	b.n	800c7e4 <tcp_zero_window_probe+0x74>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c7e6:	7ffb      	ldrb	r3, [r7, #31]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	bf0c      	ite	eq
 800c7ec:	2301      	moveq	r3, #1
 800c7ee:	2300      	movne	r3, #0
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7f8:	b299      	uxth	r1, r3
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	8bba      	ldrh	r2, [r7, #28]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff fdf8 	bl	800c3f8 <tcp_output_alloc_header>
 800c808:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c814:	e04c      	b.n	800c8b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c81c:	7ffb      	ldrb	r3, [r7, #31]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d011      	beq.n	800c846 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	899b      	ldrh	r3, [r3, #12]
 800c826:	b29b      	uxth	r3, r3
 800c828:	b21b      	sxth	r3, r3
 800c82a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c82e:	b21c      	sxth	r4, r3
 800c830:	2011      	movs	r0, #17
 800c832:	f7f8 fa69 	bl	8004d08 <lwip_htons>
 800c836:	4603      	mov	r3, r0
 800c838:	b21b      	sxth	r3, r3
 800c83a:	4323      	orrs	r3, r4
 800c83c:	b21b      	sxth	r3, r3
 800c83e:	b29a      	uxth	r2, r3
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	819a      	strh	r2, [r3, #12]
 800c844:	e010      	b.n	800c868 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	3314      	adds	r3, #20
 800c84c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c84e:	6a3b      	ldr	r3, [r7, #32]
 800c850:	6858      	ldr	r0, [r3, #4]
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	891a      	ldrh	r2, [r3, #8]
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	891b      	ldrh	r3, [r3, #8]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	b29b      	uxth	r3, r3
 800c860:	2201      	movs	r2, #1
 800c862:	6939      	ldr	r1, [r7, #16]
 800c864:	f7f9 ff58 	bl	8006718 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f8 fa5f 	bl	8004d32 <lwip_htonl>
 800c874:	4603      	mov	r3, r0
 800c876:	3301      	adds	r3, #1
 800c878:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	da02      	bge.n	800c88c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c890:	2200      	movs	r2, #0
 800c892:	69b9      	ldr	r1, [r7, #24]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff fded 	bl	800c474 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	69b9      	ldr	r1, [r7, #24]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff fe26 	bl	800c4f4 <tcp_output_control_segment>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c8ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	372c      	adds	r7, #44	; 0x2c
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd90      	pop	{r4, r7, pc}
 800c8b8:	08012380 	.word	0x08012380
 800c8bc:	08012b78 	.word	0x08012b78
 800c8c0:	080123d4 	.word	0x080123d4

0800c8c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c8cc:	f7fa f812 	bl	80068f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c8d0:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <tcpip_tcp_timer+0x38>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d103      	bne.n	800c8e0 <tcpip_tcp_timer+0x1c>
 800c8d8:	4b09      	ldr	r3, [pc, #36]	; (800c900 <tcpip_tcp_timer+0x3c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d005      	beq.n	800c8ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4908      	ldr	r1, [pc, #32]	; (800c904 <tcpip_tcp_timer+0x40>)
 800c8e4:	20fa      	movs	r0, #250	; 0xfa
 800c8e6:	f000 f8f3 	bl	800cad0 <sys_timeout>
 800c8ea:	e003      	b.n	800c8f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c8ec:	4b06      	ldr	r3, [pc, #24]	; (800c908 <tcpip_tcp_timer+0x44>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	601a      	str	r2, [r3, #0]
  }
}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20008ed8 	.word	0x20008ed8
 800c900:	20008ee8 	.word	0x20008ee8
 800c904:	0800c8c5 	.word	0x0800c8c5
 800c908:	20000574 	.word	0x20000574

0800c90c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c910:	4b0a      	ldr	r3, [pc, #40]	; (800c93c <tcp_timer_needed+0x30>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10f      	bne.n	800c938 <tcp_timer_needed+0x2c>
 800c918:	4b09      	ldr	r3, [pc, #36]	; (800c940 <tcp_timer_needed+0x34>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d103      	bne.n	800c928 <tcp_timer_needed+0x1c>
 800c920:	4b08      	ldr	r3, [pc, #32]	; (800c944 <tcp_timer_needed+0x38>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c928:	4b04      	ldr	r3, [pc, #16]	; (800c93c <tcp_timer_needed+0x30>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c92e:	2200      	movs	r2, #0
 800c930:	4905      	ldr	r1, [pc, #20]	; (800c948 <tcp_timer_needed+0x3c>)
 800c932:	20fa      	movs	r0, #250	; 0xfa
 800c934:	f000 f8cc 	bl	800cad0 <sys_timeout>
  }
}
 800c938:	bf00      	nop
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000574 	.word	0x20000574
 800c940:	20008ed8 	.word	0x20008ed8
 800c944:	20008ee8 	.word	0x20008ee8
 800c948:	0800c8c5 	.word	0x0800c8c5

0800c94c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c958:	2006      	movs	r0, #6
 800c95a:	f7f8 fe95 	bl	8005688 <memp_malloc>
 800c95e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d109      	bne.n	800c97a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d151      	bne.n	800ca10 <sys_timeout_abs+0xc4>
 800c96c:	4b2a      	ldr	r3, [pc, #168]	; (800ca18 <sys_timeout_abs+0xcc>)
 800c96e:	22be      	movs	r2, #190	; 0xbe
 800c970:	492a      	ldr	r1, [pc, #168]	; (800ca1c <sys_timeout_abs+0xd0>)
 800c972:	482b      	ldr	r0, [pc, #172]	; (800ca20 <sys_timeout_abs+0xd4>)
 800c974:	f002 fdf0 	bl	800f558 <iprintf>
    return;
 800c978:	e04a      	b.n	800ca10 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c992:	4b24      	ldr	r3, [pc, #144]	; (800ca24 <sys_timeout_abs+0xd8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d103      	bne.n	800c9a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c99a:	4a22      	ldr	r2, [pc, #136]	; (800ca24 <sys_timeout_abs+0xd8>)
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	6013      	str	r3, [r2, #0]
    return;
 800c9a0:	e037      	b.n	800ca12 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	685a      	ldr	r2, [r3, #4]
 800c9a6:	4b1f      	ldr	r3, [pc, #124]	; (800ca24 <sys_timeout_abs+0xd8>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	0fdb      	lsrs	r3, r3, #31
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d007      	beq.n	800c9ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c9ba:	4b1a      	ldr	r3, [pc, #104]	; (800ca24 <sys_timeout_abs+0xd8>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c9c2:	4a18      	ldr	r2, [pc, #96]	; (800ca24 <sys_timeout_abs+0xd8>)
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e023      	b.n	800ca12 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c9ca:	4b16      	ldr	r3, [pc, #88]	; (800ca24 <sys_timeout_abs+0xd8>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	e01a      	b.n	800ca08 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00b      	beq.n	800c9f2 <sys_timeout_abs+0xa6>
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	0fdb      	lsrs	r3, r3, #31
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d007      	beq.n	800ca02 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	601a      	str	r2, [r3, #0]
        break;
 800ca00:	e007      	b.n	800ca12 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	617b      	str	r3, [r7, #20]
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e1      	bne.n	800c9d2 <sys_timeout_abs+0x86>
 800ca0e:	e000      	b.n	800ca12 <sys_timeout_abs+0xc6>
    return;
 800ca10:	bf00      	nop
      }
    }
  }
}
 800ca12:	3718      	adds	r7, #24
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	08012b9c 	.word	0x08012b9c
 800ca1c:	08012bd0 	.word	0x08012bd0
 800ca20:	08012c10 	.word	0x08012c10
 800ca24:	2000056c 	.word	0x2000056c

0800ca28 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4798      	blx	r3

  now = sys_now();
 800ca3a:	f7f6 fd49 	bl	80034d0 <sys_now>
 800ca3e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	4b0f      	ldr	r3, [pc, #60]	; (800ca84 <lwip_cyclic_timer+0x5c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4413      	add	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	0fdb      	lsrs	r3, r3, #31
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d009      	beq.n	800ca72 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	4413      	add	r3, r2
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	4907      	ldr	r1, [pc, #28]	; (800ca88 <lwip_cyclic_timer+0x60>)
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff ff6e 	bl	800c94c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ca70:	e004      	b.n	800ca7c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	4904      	ldr	r1, [pc, #16]	; (800ca88 <lwip_cyclic_timer+0x60>)
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f7ff ff68 	bl	800c94c <sys_timeout_abs>
}
 800ca7c:	bf00      	nop
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000570 	.word	0x20000570
 800ca88:	0800ca29 	.word	0x0800ca29

0800ca8c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ca92:	2301      	movs	r3, #1
 800ca94:	607b      	str	r3, [r7, #4]
 800ca96:	e00e      	b.n	800cab6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ca98:	4a0b      	ldr	r2, [pc, #44]	; (800cac8 <sys_timeouts_init+0x3c>)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	4a08      	ldr	r2, [pc, #32]	; (800cac8 <sys_timeouts_init+0x3c>)
 800caa6:	4413      	add	r3, r2
 800caa8:	461a      	mov	r2, r3
 800caaa:	4908      	ldr	r1, [pc, #32]	; (800cacc <sys_timeouts_init+0x40>)
 800caac:	f000 f810 	bl	800cad0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3301      	adds	r3, #1
 800cab4:	607b      	str	r3, [r7, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d9ed      	bls.n	800ca98 <sys_timeouts_init+0xc>
  }
}
 800cabc:	bf00      	nop
 800cabe:	bf00      	nop
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	080147a4 	.word	0x080147a4
 800cacc:	0800ca29 	.word	0x0800ca29

0800cad0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cae2:	d306      	bcc.n	800caf2 <sys_timeout+0x22>
 800cae4:	4b0a      	ldr	r3, [pc, #40]	; (800cb10 <sys_timeout+0x40>)
 800cae6:	f240 1229 	movw	r2, #297	; 0x129
 800caea:	490a      	ldr	r1, [pc, #40]	; (800cb14 <sys_timeout+0x44>)
 800caec:	480a      	ldr	r0, [pc, #40]	; (800cb18 <sys_timeout+0x48>)
 800caee:	f002 fd33 	bl	800f558 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800caf2:	f7f6 fced 	bl	80034d0 <sys_now>
 800caf6:	4602      	mov	r2, r0
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	4413      	add	r3, r2
 800cafc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	68b9      	ldr	r1, [r7, #8]
 800cb02:	6978      	ldr	r0, [r7, #20]
 800cb04:	f7ff ff22 	bl	800c94c <sys_timeout_abs>
#endif
}
 800cb08:	bf00      	nop
 800cb0a:	3718      	adds	r7, #24
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	08012b9c 	.word	0x08012b9c
 800cb14:	08012c38 	.word	0x08012c38
 800cb18:	08012c10 	.word	0x08012c10

0800cb1c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cb22:	f7f6 fcd5 	bl	80034d0 <sys_now>
 800cb26:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cb28:	4b1a      	ldr	r3, [pc, #104]	; (800cb94 <sys_check_timeouts+0x78>)
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <sys_check_timeouts+0x1a>
 800cb32:	f7f9 f8cd 	bl	8005cd0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cb36:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <sys_check_timeouts+0x7c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d022      	beq.n	800cb88 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	0fdb      	lsrs	r3, r3, #31
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d11a      	bne.n	800cb8c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a0f      	ldr	r2, [pc, #60]	; (800cb98 <sys_check_timeouts+0x7c>)
 800cb5c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	4a0b      	ldr	r2, [pc, #44]	; (800cb9c <sys_check_timeouts+0x80>)
 800cb70:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	2006      	movs	r0, #6
 800cb76:	f7f8 fdd3 	bl	8005720 <memp_free>
    if (handler != NULL) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0d3      	beq.n	800cb28 <sys_check_timeouts+0xc>
      handler(arg);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6838      	ldr	r0, [r7, #0]
 800cb84:	4798      	blx	r3
  do {
 800cb86:	e7cf      	b.n	800cb28 <sys_check_timeouts+0xc>
      return;
 800cb88:	bf00      	nop
 800cb8a:	e000      	b.n	800cb8e <sys_check_timeouts+0x72>
      return;
 800cb8c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20008ed0 	.word	0x20008ed0
 800cb98:	2000056c 	.word	0x2000056c
 800cb9c:	20000570 	.word	0x20000570

0800cba0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cba4:	f002 fcf0 	bl	800f588 <rand>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	4b01      	ldr	r3, [pc, #4]	; (800cbc0 <udp_init+0x20>)
 800cbba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cbbc:	bf00      	nop
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	20000020 	.word	0x20000020

0800cbc4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d105      	bne.n	800cbe4 <udp_input_local_match+0x20>
 800cbd8:	4b27      	ldr	r3, [pc, #156]	; (800cc78 <udp_input_local_match+0xb4>)
 800cbda:	2287      	movs	r2, #135	; 0x87
 800cbdc:	4927      	ldr	r1, [pc, #156]	; (800cc7c <udp_input_local_match+0xb8>)
 800cbde:	4828      	ldr	r0, [pc, #160]	; (800cc80 <udp_input_local_match+0xbc>)
 800cbe0:	f002 fcba 	bl	800f558 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <udp_input_local_match+0x32>
 800cbea:	4b23      	ldr	r3, [pc, #140]	; (800cc78 <udp_input_local_match+0xb4>)
 800cbec:	2288      	movs	r2, #136	; 0x88
 800cbee:	4925      	ldr	r1, [pc, #148]	; (800cc84 <udp_input_local_match+0xc0>)
 800cbf0:	4823      	ldr	r0, [pc, #140]	; (800cc80 <udp_input_local_match+0xbc>)
 800cbf2:	f002 fcb1 	bl	800f558 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	7a1b      	ldrb	r3, [r3, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00b      	beq.n	800cc16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	7a1a      	ldrb	r2, [r3, #8]
 800cc02:	4b21      	ldr	r3, [pc, #132]	; (800cc88 <udp_input_local_match+0xc4>)
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d001      	beq.n	800cc16 <udp_input_local_match+0x52>
    return 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	e02b      	b.n	800cc6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cc16:	79fb      	ldrb	r3, [r7, #7]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d018      	beq.n	800cc4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d013      	beq.n	800cc4a <udp_input_local_match+0x86>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00f      	beq.n	800cc4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cc2a:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <udp_input_local_match+0xc4>)
 800cc2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc32:	d00a      	beq.n	800cc4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <udp_input_local_match+0xc4>)
 800cc3a:	695b      	ldr	r3, [r3, #20]
 800cc3c:	405a      	eors	r2, r3
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	3308      	adds	r3, #8
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d110      	bne.n	800cc6c <udp_input_local_match+0xa8>
          return 1;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e00f      	b.n	800cc6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d009      	beq.n	800cc68 <udp_input_local_match+0xa4>
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d005      	beq.n	800cc68 <udp_input_local_match+0xa4>
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	4b09      	ldr	r3, [pc, #36]	; (800cc88 <udp_input_local_match+0xc4>)
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d101      	bne.n	800cc6c <udp_input_local_match+0xa8>
        return 1;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	08012c84 	.word	0x08012c84
 800cc7c:	08012cb4 	.word	0x08012cb4
 800cc80:	08012cd8 	.word	0x08012cd8
 800cc84:	08012d00 	.word	0x08012d00
 800cc88:	200037d4 	.word	0x200037d4

0800cc8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cc8c:	b590      	push	{r4, r7, lr}
 800cc8e:	b08d      	sub	sp, #52	; 0x34
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d105      	bne.n	800ccac <udp_input+0x20>
 800cca0:	4b7c      	ldr	r3, [pc, #496]	; (800ce94 <udp_input+0x208>)
 800cca2:	22cf      	movs	r2, #207	; 0xcf
 800cca4:	497c      	ldr	r1, [pc, #496]	; (800ce98 <udp_input+0x20c>)
 800cca6:	487d      	ldr	r0, [pc, #500]	; (800ce9c <udp_input+0x210>)
 800cca8:	f002 fc56 	bl	800f558 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d105      	bne.n	800ccbe <udp_input+0x32>
 800ccb2:	4b78      	ldr	r3, [pc, #480]	; (800ce94 <udp_input+0x208>)
 800ccb4:	22d0      	movs	r2, #208	; 0xd0
 800ccb6:	497a      	ldr	r1, [pc, #488]	; (800cea0 <udp_input+0x214>)
 800ccb8:	4878      	ldr	r0, [pc, #480]	; (800ce9c <udp_input+0x210>)
 800ccba:	f002 fc4d 	bl	800f558 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	895b      	ldrh	r3, [r3, #10]
 800ccc2:	2b07      	cmp	r3, #7
 800ccc4:	d803      	bhi.n	800ccce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7f9 fb3c 	bl	8006344 <pbuf_free>
    goto end;
 800cccc:	e0de      	b.n	800ce8c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ccd4:	4b73      	ldr	r3, [pc, #460]	; (800cea4 <udp_input+0x218>)
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	4a72      	ldr	r2, [pc, #456]	; (800cea4 <udp_input+0x218>)
 800ccda:	6812      	ldr	r2, [r2, #0]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 fc88 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800cce4:	4603      	mov	r3, r0
 800cce6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7f8 f80a 	bl	8004d08 <lwip_htons>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	885b      	ldrh	r3, [r3, #2]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f8 f802 	bl	8004d08 <lwip_htons>
 800cd04:	4603      	mov	r3, r0
 800cd06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd14:	4b64      	ldr	r3, [pc, #400]	; (800cea8 <udp_input+0x21c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	627b      	str	r3, [r7, #36]	; 0x24
 800cd1a:	e054      	b.n	800cdc6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	8a5b      	ldrh	r3, [r3, #18]
 800cd20:	89fa      	ldrh	r2, [r7, #14]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d14a      	bne.n	800cdbc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cd26:	7cfb      	ldrb	r3, [r7, #19]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd2e:	f7ff ff49 	bl	800cbc4 <udp_input_local_match>
 800cd32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d041      	beq.n	800cdbc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	7c1b      	ldrb	r3, [r3, #16]
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d11d      	bne.n	800cd80 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d102      	bne.n	800cd50 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	61fb      	str	r3, [r7, #28]
 800cd4e:	e017      	b.n	800cd80 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cd50:	7cfb      	ldrb	r3, [r7, #19]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d014      	beq.n	800cd80 <udp_input+0xf4>
 800cd56:	4b53      	ldr	r3, [pc, #332]	; (800cea4 <udp_input+0x218>)
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd5e:	d10f      	bne.n	800cd80 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	3304      	adds	r3, #4
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d008      	beq.n	800cd80 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	3304      	adds	r3, #4
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d101      	bne.n	800cd80 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	8a9b      	ldrh	r3, [r3, #20]
 800cd84:	8a3a      	ldrh	r2, [r7, #16]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d118      	bne.n	800cdbc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d005      	beq.n	800cd9e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	4b43      	ldr	r3, [pc, #268]	; (800cea4 <udp_input+0x218>)
 800cd98:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d10e      	bne.n	800cdbc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d014      	beq.n	800cdce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	68da      	ldr	r2, [r3, #12]
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cdac:	4b3e      	ldr	r3, [pc, #248]	; (800cea8 <udp_input+0x21c>)
 800cdae:	681a      	ldr	r2, [r3, #0]
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cdb4:	4a3c      	ldr	r2, [pc, #240]	; (800cea8 <udp_input+0x21c>)
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cdba:	e008      	b.n	800cdce <udp_input+0x142>
      }
    }

    prev = pcb;
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1a7      	bne.n	800cd1c <udp_input+0x90>
 800cdcc:	e000      	b.n	800cdd0 <udp_input+0x144>
        break;
 800cdce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <udp_input+0x14e>
    pcb = uncon_pcb;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <udp_input+0x15a>
    for_us = 1;
 800cde0:	2301      	movs	r3, #1
 800cde2:	76fb      	strb	r3, [r7, #27]
 800cde4:	e00a      	b.n	800cdfc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	3304      	adds	r3, #4
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	4b2d      	ldr	r3, [pc, #180]	; (800cea4 <udp_input+0x218>)
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	bf0c      	ite	eq
 800cdf4:	2301      	moveq	r3, #1
 800cdf6:	2300      	movne	r3, #0
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cdfc:	7efb      	ldrb	r3, [r7, #27]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d041      	beq.n	800ce86 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ce02:	2108      	movs	r1, #8
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7f9 fa17 	bl	8006238 <pbuf_remove_header>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00a      	beq.n	800ce26 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ce10:	4b20      	ldr	r3, [pc, #128]	; (800ce94 <udp_input+0x208>)
 800ce12:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ce16:	4925      	ldr	r1, [pc, #148]	; (800ceac <udp_input+0x220>)
 800ce18:	4820      	ldr	r0, [pc, #128]	; (800ce9c <udp_input+0x210>)
 800ce1a:	f002 fb9d 	bl	800f558 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7f9 fa90 	bl	8006344 <pbuf_free>
      goto end;
 800ce24:	e032      	b.n	800ce8c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d012      	beq.n	800ce52 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00a      	beq.n	800ce4a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	699c      	ldr	r4, [r3, #24]
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	69d8      	ldr	r0, [r3, #28]
 800ce3c:	8a3b      	ldrh	r3, [r7, #16]
 800ce3e:	9300      	str	r3, [sp, #0]
 800ce40:	4b1b      	ldr	r3, [pc, #108]	; (800ceb0 <udp_input+0x224>)
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ce48:	e021      	b.n	800ce8e <udp_input+0x202>
        pbuf_free(p);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7f9 fa7a 	bl	8006344 <pbuf_free>
        goto end;
 800ce50:	e01c      	b.n	800ce8c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ce52:	7cfb      	ldrb	r3, [r7, #19]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d112      	bne.n	800ce7e <udp_input+0x1f2>
 800ce58:	4b12      	ldr	r3, [pc, #72]	; (800cea4 <udp_input+0x218>)
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce60:	2be0      	cmp	r3, #224	; 0xe0
 800ce62:	d00c      	beq.n	800ce7e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ce64:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <udp_input+0x218>)
 800ce66:	899b      	ldrh	r3, [r3, #12]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	b21b      	sxth	r3, r3
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7f9 fa54 	bl	800631e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ce76:	2103      	movs	r1, #3
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f001 f89b 	bl	800dfb4 <icmp_dest_unreach>
      pbuf_free(p);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7f9 fa60 	bl	8006344 <pbuf_free>
  return;
 800ce84:	e003      	b.n	800ce8e <udp_input+0x202>
    pbuf_free(p);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7f9 fa5c 	bl	8006344 <pbuf_free>
  return;
 800ce8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ce8e:	372c      	adds	r7, #44	; 0x2c
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd90      	pop	{r4, r7, pc}
 800ce94:	08012c84 	.word	0x08012c84
 800ce98:	08012d28 	.word	0x08012d28
 800ce9c:	08012cd8 	.word	0x08012cd8
 800cea0:	08012d40 	.word	0x08012d40
 800cea4:	200037d4 	.word	0x200037d4
 800cea8:	20008ef0 	.word	0x20008ef0
 800ceac:	08012d5c 	.word	0x08012d5c
 800ceb0:	200037e4 	.word	0x200037e4

0800ceb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01e      	beq.n	800cf02 <udp_netif_ip_addr_changed+0x4e>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01a      	beq.n	800cf02 <udp_netif_ip_addr_changed+0x4e>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d017      	beq.n	800cf02 <udp_netif_ip_addr_changed+0x4e>
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d013      	beq.n	800cf02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ceda:	4b0d      	ldr	r3, [pc, #52]	; (800cf10 <udp_netif_ip_addr_changed+0x5c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	e00c      	b.n	800cefc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d103      	bne.n	800cef6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1ef      	bne.n	800cee2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20008ef0 	.word	0x20008ef0

0800cf14 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cf1c:	4915      	ldr	r1, [pc, #84]	; (800cf74 <etharp_free_entry+0x60>)
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	4613      	mov	r3, r2
 800cf22:	005b      	lsls	r3, r3, #1
 800cf24:	4413      	add	r3, r2
 800cf26:	00db      	lsls	r3, r3, #3
 800cf28:	440b      	add	r3, r1
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d013      	beq.n	800cf58 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cf30:	4910      	ldr	r1, [pc, #64]	; (800cf74 <etharp_free_entry+0x60>)
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	4613      	mov	r3, r2
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	4413      	add	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	440b      	add	r3, r1
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7f9 f9ff 	bl	8006344 <pbuf_free>
    arp_table[i].q = NULL;
 800cf46:	490b      	ldr	r1, [pc, #44]	; (800cf74 <etharp_free_entry+0x60>)
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	4413      	add	r3, r2
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	440b      	add	r3, r1
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cf58:	4906      	ldr	r1, [pc, #24]	; (800cf74 <etharp_free_entry+0x60>)
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	4413      	add	r3, r2
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	440b      	add	r3, r1
 800cf66:	3314      	adds	r3, #20
 800cf68:	2200      	movs	r2, #0
 800cf6a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20000578 	.word	0x20000578

0800cf78 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf7e:	2300      	movs	r3, #0
 800cf80:	607b      	str	r3, [r7, #4]
 800cf82:	e096      	b.n	800d0b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cf84:	494f      	ldr	r1, [pc, #316]	; (800d0c4 <etharp_tmr+0x14c>)
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	005b      	lsls	r3, r3, #1
 800cf8c:	4413      	add	r3, r2
 800cf8e:	00db      	lsls	r3, r3, #3
 800cf90:	440b      	add	r3, r1
 800cf92:	3314      	adds	r3, #20
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f000 8086 	beq.w	800d0ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cfa0:	4948      	ldr	r1, [pc, #288]	; (800d0c4 <etharp_tmr+0x14c>)
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	4413      	add	r3, r2
 800cfaa:	00db      	lsls	r3, r3, #3
 800cfac:	440b      	add	r3, r1
 800cfae:	3312      	adds	r3, #18
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	b298      	uxth	r0, r3
 800cfb6:	4943      	ldr	r1, [pc, #268]	; (800d0c4 <etharp_tmr+0x14c>)
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	005b      	lsls	r3, r3, #1
 800cfbe:	4413      	add	r3, r2
 800cfc0:	00db      	lsls	r3, r3, #3
 800cfc2:	440b      	add	r3, r1
 800cfc4:	3312      	adds	r3, #18
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cfca:	493e      	ldr	r1, [pc, #248]	; (800d0c4 <etharp_tmr+0x14c>)
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	4413      	add	r3, r2
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	440b      	add	r3, r1
 800cfd8:	3312      	adds	r3, #18
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cfe0:	d215      	bcs.n	800d00e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cfe2:	4938      	ldr	r1, [pc, #224]	; (800d0c4 <etharp_tmr+0x14c>)
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4413      	add	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	440b      	add	r3, r1
 800cff0:	3314      	adds	r3, #20
 800cff2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d10e      	bne.n	800d016 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cff8:	4932      	ldr	r1, [pc, #200]	; (800d0c4 <etharp_tmr+0x14c>)
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	4613      	mov	r3, r2
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	440b      	add	r3, r1
 800d006:	3312      	adds	r3, #18
 800d008:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d903      	bls.n	800d016 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7ff ff80 	bl	800cf14 <etharp_free_entry>
 800d014:	e04a      	b.n	800d0ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d016:	492b      	ldr	r1, [pc, #172]	; (800d0c4 <etharp_tmr+0x14c>)
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	4613      	mov	r3, r2
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	4413      	add	r3, r2
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	440b      	add	r3, r1
 800d024:	3314      	adds	r3, #20
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	2b03      	cmp	r3, #3
 800d02a:	d10a      	bne.n	800d042 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d02c:	4925      	ldr	r1, [pc, #148]	; (800d0c4 <etharp_tmr+0x14c>)
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	4613      	mov	r3, r2
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	4413      	add	r3, r2
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	440b      	add	r3, r1
 800d03a:	3314      	adds	r3, #20
 800d03c:	2204      	movs	r2, #4
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	e034      	b.n	800d0ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d042:	4920      	ldr	r1, [pc, #128]	; (800d0c4 <etharp_tmr+0x14c>)
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	4613      	mov	r3, r2
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	4413      	add	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	440b      	add	r3, r1
 800d050:	3314      	adds	r3, #20
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b04      	cmp	r3, #4
 800d056:	d10a      	bne.n	800d06e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d058:	491a      	ldr	r1, [pc, #104]	; (800d0c4 <etharp_tmr+0x14c>)
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	4613      	mov	r3, r2
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	4413      	add	r3, r2
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	440b      	add	r3, r1
 800d066:	3314      	adds	r3, #20
 800d068:	2202      	movs	r2, #2
 800d06a:	701a      	strb	r2, [r3, #0]
 800d06c:	e01e      	b.n	800d0ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d06e:	4915      	ldr	r1, [pc, #84]	; (800d0c4 <etharp_tmr+0x14c>)
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	4613      	mov	r3, r2
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	4413      	add	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	440b      	add	r3, r1
 800d07c:	3314      	adds	r3, #20
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d113      	bne.n	800d0ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d084:	490f      	ldr	r1, [pc, #60]	; (800d0c4 <etharp_tmr+0x14c>)
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	4613      	mov	r3, r2
 800d08a:	005b      	lsls	r3, r3, #1
 800d08c:	4413      	add	r3, r2
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	440b      	add	r3, r1
 800d092:	3308      	adds	r3, #8
 800d094:	6818      	ldr	r0, [r3, #0]
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	4613      	mov	r3, r2
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	4413      	add	r3, r2
 800d09e:	00db      	lsls	r3, r3, #3
 800d0a0:	4a08      	ldr	r2, [pc, #32]	; (800d0c4 <etharp_tmr+0x14c>)
 800d0a2:	4413      	add	r3, r2
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	f000 fe6e 	bl	800dd88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	f77f af65 	ble.w	800cf84 <etharp_tmr+0xc>
      }
    }
  }
}
 800d0ba:	bf00      	nop
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	20000578 	.word	0x20000578

0800d0c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08a      	sub	sp, #40	; 0x28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d0d6:	230a      	movs	r3, #10
 800d0d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d0da:	230a      	movs	r3, #10
 800d0dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d0de:	230a      	movs	r3, #10
 800d0e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d0e6:	230a      	movs	r3, #10
 800d0e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	83bb      	strh	r3, [r7, #28]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	837b      	strh	r3, [r7, #26]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	843b      	strh	r3, [r7, #32]
 800d0fa:	e0ae      	b.n	800d25a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d0fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d100:	49a6      	ldr	r1, [pc, #664]	; (800d39c <etharp_find_entry+0x2d4>)
 800d102:	4613      	mov	r3, r2
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	4413      	add	r3, r2
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	440b      	add	r3, r1
 800d10c:	3314      	adds	r3, #20
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d112:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d116:	2b0a      	cmp	r3, #10
 800d118:	d105      	bne.n	800d126 <etharp_find_entry+0x5e>
 800d11a:	7dfb      	ldrb	r3, [r7, #23]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d120:	8c3b      	ldrh	r3, [r7, #32]
 800d122:	847b      	strh	r3, [r7, #34]	; 0x22
 800d124:	e095      	b.n	800d252 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d126:	7dfb      	ldrb	r3, [r7, #23]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 8092 	beq.w	800d252 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d12e:	7dfb      	ldrb	r3, [r7, #23]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d009      	beq.n	800d148 <etharp_find_entry+0x80>
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d806      	bhi.n	800d148 <etharp_find_entry+0x80>
 800d13a:	4b99      	ldr	r3, [pc, #612]	; (800d3a0 <etharp_find_entry+0x2d8>)
 800d13c:	f240 1223 	movw	r2, #291	; 0x123
 800d140:	4998      	ldr	r1, [pc, #608]	; (800d3a4 <etharp_find_entry+0x2dc>)
 800d142:	4899      	ldr	r0, [pc, #612]	; (800d3a8 <etharp_find_entry+0x2e0>)
 800d144:	f002 fa08 	bl	800f558 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d020      	beq.n	800d190 <etharp_find_entry+0xc8>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6819      	ldr	r1, [r3, #0]
 800d152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d156:	4891      	ldr	r0, [pc, #580]	; (800d39c <etharp_find_entry+0x2d4>)
 800d158:	4613      	mov	r3, r2
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	4413      	add	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4403      	add	r3, r0
 800d162:	3304      	adds	r3, #4
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4299      	cmp	r1, r3
 800d168:	d112      	bne.n	800d190 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00c      	beq.n	800d18a <etharp_find_entry+0xc2>
 800d170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d174:	4989      	ldr	r1, [pc, #548]	; (800d39c <etharp_find_entry+0x2d4>)
 800d176:	4613      	mov	r3, r2
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	4413      	add	r3, r2
 800d17c:	00db      	lsls	r3, r3, #3
 800d17e:	440b      	add	r3, r1
 800d180:	3308      	adds	r3, #8
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	429a      	cmp	r2, r3
 800d188:	d102      	bne.n	800d190 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d18a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d18e:	e100      	b.n	800d392 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d140      	bne.n	800d218 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d19a:	4980      	ldr	r1, [pc, #512]	; (800d39c <etharp_find_entry+0x2d4>)
 800d19c:	4613      	mov	r3, r2
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	4413      	add	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	440b      	add	r3, r1
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d01a      	beq.n	800d1e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d1ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1b0:	497a      	ldr	r1, [pc, #488]	; (800d39c <etharp_find_entry+0x2d4>)
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	00db      	lsls	r3, r3, #3
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3312      	adds	r3, #18
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	8bba      	ldrh	r2, [r7, #28]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d845      	bhi.n	800d252 <etharp_find_entry+0x18a>
            old_queue = i;
 800d1c6:	8c3b      	ldrh	r3, [r7, #32]
 800d1c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d1ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1ce:	4973      	ldr	r1, [pc, #460]	; (800d39c <etharp_find_entry+0x2d4>)
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	4413      	add	r3, r2
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	440b      	add	r3, r1
 800d1da:	3312      	adds	r3, #18
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	83bb      	strh	r3, [r7, #28]
 800d1e0:	e037      	b.n	800d252 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d1e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d1e6:	496d      	ldr	r1, [pc, #436]	; (800d39c <etharp_find_entry+0x2d4>)
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	4413      	add	r3, r2
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	440b      	add	r3, r1
 800d1f2:	3312      	adds	r3, #18
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	8b7a      	ldrh	r2, [r7, #26]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d82a      	bhi.n	800d252 <etharp_find_entry+0x18a>
            old_pending = i;
 800d1fc:	8c3b      	ldrh	r3, [r7, #32]
 800d1fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d204:	4965      	ldr	r1, [pc, #404]	; (800d39c <etharp_find_entry+0x2d4>)
 800d206:	4613      	mov	r3, r2
 800d208:	005b      	lsls	r3, r3, #1
 800d20a:	4413      	add	r3, r2
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	440b      	add	r3, r1
 800d210:	3312      	adds	r3, #18
 800d212:	881b      	ldrh	r3, [r3, #0]
 800d214:	837b      	strh	r3, [r7, #26]
 800d216:	e01c      	b.n	800d252 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d218:	7dfb      	ldrb	r3, [r7, #23]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d919      	bls.n	800d252 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d21e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d222:	495e      	ldr	r1, [pc, #376]	; (800d39c <etharp_find_entry+0x2d4>)
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	3312      	adds	r3, #18
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	8b3a      	ldrh	r2, [r7, #24]
 800d234:	429a      	cmp	r2, r3
 800d236:	d80c      	bhi.n	800d252 <etharp_find_entry+0x18a>
            old_stable = i;
 800d238:	8c3b      	ldrh	r3, [r7, #32]
 800d23a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d23c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d240:	4956      	ldr	r1, [pc, #344]	; (800d39c <etharp_find_entry+0x2d4>)
 800d242:	4613      	mov	r3, r2
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	4413      	add	r3, r2
 800d248:	00db      	lsls	r3, r3, #3
 800d24a:	440b      	add	r3, r1
 800d24c:	3312      	adds	r3, #18
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d252:	8c3b      	ldrh	r3, [r7, #32]
 800d254:	3301      	adds	r3, #1
 800d256:	b29b      	uxth	r3, r3
 800d258:	843b      	strh	r3, [r7, #32]
 800d25a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d25e:	2b09      	cmp	r3, #9
 800d260:	f77f af4c 	ble.w	800d0fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d264:	7afb      	ldrb	r3, [r7, #11]
 800d266:	f003 0302 	and.w	r3, r3, #2
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d108      	bne.n	800d280 <etharp_find_entry+0x1b8>
 800d26e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d272:	2b0a      	cmp	r3, #10
 800d274:	d107      	bne.n	800d286 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d276:	7afb      	ldrb	r3, [r7, #11]
 800d278:	f003 0301 	and.w	r3, r3, #1
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d102      	bne.n	800d286 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d284:	e085      	b.n	800d392 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d286:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d28a:	2b09      	cmp	r3, #9
 800d28c:	dc02      	bgt.n	800d294 <etharp_find_entry+0x1cc>
    i = empty;
 800d28e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d290:	843b      	strh	r3, [r7, #32]
 800d292:	e039      	b.n	800d308 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d294:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d298:	2b09      	cmp	r3, #9
 800d29a:	dc14      	bgt.n	800d2c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d29c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d29e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d2a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d2a4:	493d      	ldr	r1, [pc, #244]	; (800d39c <etharp_find_entry+0x2d4>)
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	4413      	add	r3, r2
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	440b      	add	r3, r1
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d018      	beq.n	800d2e8 <etharp_find_entry+0x220>
 800d2b6:	4b3a      	ldr	r3, [pc, #232]	; (800d3a0 <etharp_find_entry+0x2d8>)
 800d2b8:	f240 126d 	movw	r2, #365	; 0x16d
 800d2bc:	493b      	ldr	r1, [pc, #236]	; (800d3ac <etharp_find_entry+0x2e4>)
 800d2be:	483a      	ldr	r0, [pc, #232]	; (800d3a8 <etharp_find_entry+0x2e0>)
 800d2c0:	f002 f94a 	bl	800f558 <iprintf>
 800d2c4:	e010      	b.n	800d2e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d2c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d2ca:	2b09      	cmp	r3, #9
 800d2cc:	dc02      	bgt.n	800d2d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d2ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2d0:	843b      	strh	r3, [r7, #32]
 800d2d2:	e009      	b.n	800d2e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d2d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d2d8:	2b09      	cmp	r3, #9
 800d2da:	dc02      	bgt.n	800d2e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d2dc:	8bfb      	ldrh	r3, [r7, #30]
 800d2de:	843b      	strh	r3, [r7, #32]
 800d2e0:	e002      	b.n	800d2e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d2e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2e6:	e054      	b.n	800d392 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d2e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d2ec:	2b09      	cmp	r3, #9
 800d2ee:	dd06      	ble.n	800d2fe <etharp_find_entry+0x236>
 800d2f0:	4b2b      	ldr	r3, [pc, #172]	; (800d3a0 <etharp_find_entry+0x2d8>)
 800d2f2:	f240 127f 	movw	r2, #383	; 0x17f
 800d2f6:	492e      	ldr	r1, [pc, #184]	; (800d3b0 <etharp_find_entry+0x2e8>)
 800d2f8:	482b      	ldr	r0, [pc, #172]	; (800d3a8 <etharp_find_entry+0x2e0>)
 800d2fa:	f002 f92d 	bl	800f558 <iprintf>
    etharp_free_entry(i);
 800d2fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fe06 	bl	800cf14 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d308:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d30c:	2b09      	cmp	r3, #9
 800d30e:	dd06      	ble.n	800d31e <etharp_find_entry+0x256>
 800d310:	4b23      	ldr	r3, [pc, #140]	; (800d3a0 <etharp_find_entry+0x2d8>)
 800d312:	f240 1283 	movw	r2, #387	; 0x183
 800d316:	4926      	ldr	r1, [pc, #152]	; (800d3b0 <etharp_find_entry+0x2e8>)
 800d318:	4823      	ldr	r0, [pc, #140]	; (800d3a8 <etharp_find_entry+0x2e0>)
 800d31a:	f002 f91d 	bl	800f558 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d31e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d322:	491e      	ldr	r1, [pc, #120]	; (800d39c <etharp_find_entry+0x2d4>)
 800d324:	4613      	mov	r3, r2
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	4413      	add	r3, r2
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	440b      	add	r3, r1
 800d32e:	3314      	adds	r3, #20
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d006      	beq.n	800d344 <etharp_find_entry+0x27c>
 800d336:	4b1a      	ldr	r3, [pc, #104]	; (800d3a0 <etharp_find_entry+0x2d8>)
 800d338:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d33c:	491d      	ldr	r1, [pc, #116]	; (800d3b4 <etharp_find_entry+0x2ec>)
 800d33e:	481a      	ldr	r0, [pc, #104]	; (800d3a8 <etharp_find_entry+0x2e0>)
 800d340:	f002 f90a 	bl	800f558 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00b      	beq.n	800d362 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d34a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6819      	ldr	r1, [r3, #0]
 800d352:	4812      	ldr	r0, [pc, #72]	; (800d39c <etharp_find_entry+0x2d4>)
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	4403      	add	r3, r0
 800d35e:	3304      	adds	r3, #4
 800d360:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d366:	490d      	ldr	r1, [pc, #52]	; (800d39c <etharp_find_entry+0x2d4>)
 800d368:	4613      	mov	r3, r2
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	4413      	add	r3, r2
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	440b      	add	r3, r1
 800d372:	3312      	adds	r3, #18
 800d374:	2200      	movs	r2, #0
 800d376:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d37c:	4907      	ldr	r1, [pc, #28]	; (800d39c <etharp_find_entry+0x2d4>)
 800d37e:	4613      	mov	r3, r2
 800d380:	005b      	lsls	r3, r3, #1
 800d382:	4413      	add	r3, r2
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	440b      	add	r3, r1
 800d388:	3308      	adds	r3, #8
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d38e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3728      	adds	r7, #40	; 0x28
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	20000578 	.word	0x20000578
 800d3a0:	08012fe8 	.word	0x08012fe8
 800d3a4:	08013020 	.word	0x08013020
 800d3a8:	08013060 	.word	0x08013060
 800d3ac:	08013088 	.word	0x08013088
 800d3b0:	080130a0 	.word	0x080130a0
 800d3b4:	080130b4 	.word	0x080130b4

0800d3b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af02      	add	r7, sp, #8
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3cc:	2b06      	cmp	r3, #6
 800d3ce:	d006      	beq.n	800d3de <etharp_update_arp_entry+0x26>
 800d3d0:	4b48      	ldr	r3, [pc, #288]	; (800d4f4 <etharp_update_arp_entry+0x13c>)
 800d3d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d3d6:	4948      	ldr	r1, [pc, #288]	; (800d4f8 <etharp_update_arp_entry+0x140>)
 800d3d8:	4848      	ldr	r0, [pc, #288]	; (800d4fc <etharp_update_arp_entry+0x144>)
 800d3da:	f002 f8bd 	bl	800f558 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d012      	beq.n	800d40a <etharp_update_arp_entry+0x52>
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00e      	beq.n	800d40a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68f9      	ldr	r1, [r7, #12]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f001 f8fe 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800d3f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d105      	bne.n	800d40a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d406:	2be0      	cmp	r3, #224	; 0xe0
 800d408:	d102      	bne.n	800d410 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d40a:	f06f 030f 	mvn.w	r3, #15
 800d40e:	e06c      	b.n	800d4ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4619      	mov	r1, r3
 800d416:	68b8      	ldr	r0, [r7, #8]
 800d418:	f7ff fe56 	bl	800d0c8 <etharp_find_entry>
 800d41c:	4603      	mov	r3, r0
 800d41e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d420:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d424:	2b00      	cmp	r3, #0
 800d426:	da02      	bge.n	800d42e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d428:	8afb      	ldrh	r3, [r7, #22]
 800d42a:	b25b      	sxtb	r3, r3
 800d42c:	e05d      	b.n	800d4ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d42e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d432:	4933      	ldr	r1, [pc, #204]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d434:	4613      	mov	r3, r2
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	4413      	add	r3, r2
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	440b      	add	r3, r1
 800d43e:	3314      	adds	r3, #20
 800d440:	2202      	movs	r2, #2
 800d442:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d444:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d448:	492d      	ldr	r1, [pc, #180]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d44a:	4613      	mov	r3, r2
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	4413      	add	r3, r2
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	440b      	add	r3, r1
 800d454:	3308      	adds	r3, #8
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d45a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d45e:	4613      	mov	r3, r2
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	4413      	add	r3, r2
 800d464:	00db      	lsls	r3, r3, #3
 800d466:	3308      	adds	r3, #8
 800d468:	4a25      	ldr	r2, [pc, #148]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d46a:	4413      	add	r3, r2
 800d46c:	3304      	adds	r3, #4
 800d46e:	2206      	movs	r2, #6
 800d470:	6879      	ldr	r1, [r7, #4]
 800d472:	4618      	mov	r0, r3
 800d474:	f002 f840 	bl	800f4f8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d478:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d47c:	4920      	ldr	r1, [pc, #128]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	440b      	add	r3, r1
 800d488:	3312      	adds	r3, #18
 800d48a:	2200      	movs	r2, #0
 800d48c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d48e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d492:	491b      	ldr	r1, [pc, #108]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d494:	4613      	mov	r3, r2
 800d496:	005b      	lsls	r3, r3, #1
 800d498:	4413      	add	r3, r2
 800d49a:	00db      	lsls	r3, r3, #3
 800d49c:	440b      	add	r3, r1
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d021      	beq.n	800d4e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d4a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d4a8:	4915      	ldr	r1, [pc, #84]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	4413      	add	r3, r2
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	440b      	add	r3, r1
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d4b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d4bc:	4910      	ldr	r1, [pc, #64]	; (800d500 <etharp_update_arp_entry+0x148>)
 800d4be:	4613      	mov	r3, r2
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	4413      	add	r3, r2
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	440b      	add	r3, r1
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d4d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6939      	ldr	r1, [r7, #16]
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f001 ff91 	bl	800f404 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d4e2:	6938      	ldr	r0, [r7, #16]
 800d4e4:	f7f8 ff2e 	bl	8006344 <pbuf_free>
  }
  return ERR_OK;
 800d4e8:	2300      	movs	r3, #0
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	08012fe8 	.word	0x08012fe8
 800d4f8:	080130e0 	.word	0x080130e0
 800d4fc:	08013060 	.word	0x08013060
 800d500:	20000578 	.word	0x20000578

0800d504 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d50c:	2300      	movs	r3, #0
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	e01e      	b.n	800d550 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d512:	4913      	ldr	r1, [pc, #76]	; (800d560 <etharp_cleanup_netif+0x5c>)
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	440b      	add	r3, r1
 800d520:	3314      	adds	r3, #20
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d526:	7afb      	ldrb	r3, [r7, #11]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00e      	beq.n	800d54a <etharp_cleanup_netif+0x46>
 800d52c:	490c      	ldr	r1, [pc, #48]	; (800d560 <etharp_cleanup_netif+0x5c>)
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	4613      	mov	r3, r2
 800d532:	005b      	lsls	r3, r3, #1
 800d534:	4413      	add	r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	440b      	add	r3, r1
 800d53a:	3308      	adds	r3, #8
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d102      	bne.n	800d54a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7ff fce5 	bl	800cf14 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3301      	adds	r3, #1
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b09      	cmp	r3, #9
 800d554:	dddd      	ble.n	800d512 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d556:	bf00      	nop
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	20000578 	.word	0x20000578

0800d564 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d564:	b5b0      	push	{r4, r5, r7, lr}
 800d566:	b08a      	sub	sp, #40	; 0x28
 800d568:	af04      	add	r7, sp, #16
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d107      	bne.n	800d584 <etharp_input+0x20>
 800d574:	4b3d      	ldr	r3, [pc, #244]	; (800d66c <etharp_input+0x108>)
 800d576:	f240 228a 	movw	r2, #650	; 0x28a
 800d57a:	493d      	ldr	r1, [pc, #244]	; (800d670 <etharp_input+0x10c>)
 800d57c:	483d      	ldr	r0, [pc, #244]	; (800d674 <etharp_input+0x110>)
 800d57e:	f001 ffeb 	bl	800f558 <iprintf>
 800d582:	e06f      	b.n	800d664 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	b29b      	uxth	r3, r3
 800d590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d594:	d10c      	bne.n	800d5b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d59a:	2b06      	cmp	r3, #6
 800d59c:	d108      	bne.n	800d5b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d5a2:	2b04      	cmp	r3, #4
 800d5a4:	d104      	bne.n	800d5b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	885b      	ldrh	r3, [r3, #2]
 800d5aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d5ac:	2b08      	cmp	r3, #8
 800d5ae:	d003      	beq.n	800d5b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7f8 fec7 	bl	8006344 <pbuf_free>
    return;
 800d5b6:	e055      	b.n	800d664 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	330e      	adds	r3, #14
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	3318      	adds	r3, #24
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d102      	bne.n	800d5d8 <etharp_input+0x74>
    for_us = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	75fb      	strb	r3, [r7, #23]
 800d5d6:	e009      	b.n	800d5ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	3304      	adds	r3, #4
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	bf0c      	ite	eq
 800d5e4:	2301      	moveq	r3, #1
 800d5e6:	2300      	movne	r3, #0
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f103 0208 	add.w	r2, r3, #8
 800d5f2:	7dfb      	ldrb	r3, [r7, #23]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <etharp_input+0x98>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e000      	b.n	800d5fe <etharp_input+0x9a>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	f107 010c 	add.w	r1, r7, #12
 800d602:	6838      	ldr	r0, [r7, #0]
 800d604:	f7ff fed8 	bl	800d3b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	88db      	ldrh	r3, [r3, #6]
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d612:	d003      	beq.n	800d61c <etharp_input+0xb8>
 800d614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d618:	d01e      	beq.n	800d658 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d61a:	e020      	b.n	800d65e <etharp_input+0xfa>
      if (for_us) {
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d01c      	beq.n	800d65c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d63c:	2102      	movs	r1, #2
 800d63e:	9103      	str	r1, [sp, #12]
 800d640:	f107 010c 	add.w	r1, r7, #12
 800d644:	9102      	str	r1, [sp, #8]
 800d646:	9201      	str	r2, [sp, #4]
 800d648:	9300      	str	r3, [sp, #0]
 800d64a:	462b      	mov	r3, r5
 800d64c:	4622      	mov	r2, r4
 800d64e:	4601      	mov	r1, r0
 800d650:	6838      	ldr	r0, [r7, #0]
 800d652:	f000 faeb 	bl	800dc2c <etharp_raw>
      break;
 800d656:	e001      	b.n	800d65c <etharp_input+0xf8>
      break;
 800d658:	bf00      	nop
 800d65a:	e000      	b.n	800d65e <etharp_input+0xfa>
      break;
 800d65c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7f8 fe70 	bl	8006344 <pbuf_free>
}
 800d664:	3718      	adds	r7, #24
 800d666:	46bd      	mov	sp, r7
 800d668:	bdb0      	pop	{r4, r5, r7, pc}
 800d66a:	bf00      	nop
 800d66c:	08012fe8 	.word	0x08012fe8
 800d670:	08013138 	.word	0x08013138
 800d674:	08013060 	.word	0x08013060

0800d678 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af02      	add	r7, sp, #8
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	4613      	mov	r3, r2
 800d684:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d686:	79fa      	ldrb	r2, [r7, #7]
 800d688:	4944      	ldr	r1, [pc, #272]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d68a:	4613      	mov	r3, r2
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	4413      	add	r3, r2
 800d690:	00db      	lsls	r3, r3, #3
 800d692:	440b      	add	r3, r1
 800d694:	3314      	adds	r3, #20
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d806      	bhi.n	800d6aa <etharp_output_to_arp_index+0x32>
 800d69c:	4b40      	ldr	r3, [pc, #256]	; (800d7a0 <etharp_output_to_arp_index+0x128>)
 800d69e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d6a2:	4940      	ldr	r1, [pc, #256]	; (800d7a4 <etharp_output_to_arp_index+0x12c>)
 800d6a4:	4840      	ldr	r0, [pc, #256]	; (800d7a8 <etharp_output_to_arp_index+0x130>)
 800d6a6:	f001 ff57 	bl	800f558 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d6aa:	79fa      	ldrb	r2, [r7, #7]
 800d6ac:	493b      	ldr	r1, [pc, #236]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4413      	add	r3, r2
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	440b      	add	r3, r1
 800d6b8:	3314      	adds	r3, #20
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d153      	bne.n	800d768 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d6c0:	79fa      	ldrb	r2, [r7, #7]
 800d6c2:	4936      	ldr	r1, [pc, #216]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	4413      	add	r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	440b      	add	r3, r1
 800d6ce:	3312      	adds	r3, #18
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d6d6:	d919      	bls.n	800d70c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d6d8:	79fa      	ldrb	r2, [r7, #7]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	005b      	lsls	r3, r3, #1
 800d6de:	4413      	add	r3, r2
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	4a2e      	ldr	r2, [pc, #184]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d6e4:	4413      	add	r3, r2
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 fb4c 	bl	800dd88 <etharp_request>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d138      	bne.n	800d768 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d6f6:	79fa      	ldrb	r2, [r7, #7]
 800d6f8:	4928      	ldr	r1, [pc, #160]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	4413      	add	r3, r2
 800d700:	00db      	lsls	r3, r3, #3
 800d702:	440b      	add	r3, r1
 800d704:	3314      	adds	r3, #20
 800d706:	2203      	movs	r2, #3
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	e02d      	b.n	800d768 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d70c:	79fa      	ldrb	r2, [r7, #7]
 800d70e:	4923      	ldr	r1, [pc, #140]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d710:	4613      	mov	r3, r2
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	4413      	add	r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	440b      	add	r3, r1
 800d71a:	3312      	adds	r3, #18
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d722:	d321      	bcc.n	800d768 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d724:	79fa      	ldrb	r2, [r7, #7]
 800d726:	4613      	mov	r3, r2
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	4413      	add	r3, r2
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	4a1b      	ldr	r2, [pc, #108]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d730:	4413      	add	r3, r2
 800d732:	1d19      	adds	r1, r3, #4
 800d734:	79fa      	ldrb	r2, [r7, #7]
 800d736:	4613      	mov	r3, r2
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	4413      	add	r3, r2
 800d73c:	00db      	lsls	r3, r3, #3
 800d73e:	3308      	adds	r3, #8
 800d740:	4a16      	ldr	r2, [pc, #88]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d742:	4413      	add	r3, r2
 800d744:	3304      	adds	r3, #4
 800d746:	461a      	mov	r2, r3
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f000 fafb 	bl	800dd44 <etharp_request_dst>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d109      	bne.n	800d768 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d754:	79fa      	ldrb	r2, [r7, #7]
 800d756:	4911      	ldr	r1, [pc, #68]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d758:	4613      	mov	r3, r2
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	4413      	add	r3, r2
 800d75e:	00db      	lsls	r3, r3, #3
 800d760:	440b      	add	r3, r1
 800d762:	3314      	adds	r3, #20
 800d764:	2203      	movs	r2, #3
 800d766:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d76e:	79fa      	ldrb	r2, [r7, #7]
 800d770:	4613      	mov	r3, r2
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	4413      	add	r3, r2
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	3308      	adds	r3, #8
 800d77a:	4a08      	ldr	r2, [pc, #32]	; (800d79c <etharp_output_to_arp_index+0x124>)
 800d77c:	4413      	add	r3, r2
 800d77e:	3304      	adds	r3, #4
 800d780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d784:	9200      	str	r2, [sp, #0]
 800d786:	460a      	mov	r2, r1
 800d788:	68b9      	ldr	r1, [r7, #8]
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f001 fe3a 	bl	800f404 <ethernet_output>
 800d790:	4603      	mov	r3, r0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20000578 	.word	0x20000578
 800d7a0:	08012fe8 	.word	0x08012fe8
 800d7a4:	08013158 	.word	0x08013158
 800d7a8:	08013060 	.word	0x08013060

0800d7ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08a      	sub	sp, #40	; 0x28
 800d7b0:	af02      	add	r7, sp, #8
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d106      	bne.n	800d7d0 <etharp_output+0x24>
 800d7c2:	4b73      	ldr	r3, [pc, #460]	; (800d990 <etharp_output+0x1e4>)
 800d7c4:	f240 321e 	movw	r2, #798	; 0x31e
 800d7c8:	4972      	ldr	r1, [pc, #456]	; (800d994 <etharp_output+0x1e8>)
 800d7ca:	4873      	ldr	r0, [pc, #460]	; (800d998 <etharp_output+0x1ec>)
 800d7cc:	f001 fec4 	bl	800f558 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <etharp_output+0x38>
 800d7d6:	4b6e      	ldr	r3, [pc, #440]	; (800d990 <etharp_output+0x1e4>)
 800d7d8:	f240 321f 	movw	r2, #799	; 0x31f
 800d7dc:	496f      	ldr	r1, [pc, #444]	; (800d99c <etharp_output+0x1f0>)
 800d7de:	486e      	ldr	r0, [pc, #440]	; (800d998 <etharp_output+0x1ec>)
 800d7e0:	f001 feba 	bl	800f558 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <etharp_output+0x4c>
 800d7ea:	4b69      	ldr	r3, [pc, #420]	; (800d990 <etharp_output+0x1e4>)
 800d7ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d7f0:	496b      	ldr	r1, [pc, #428]	; (800d9a0 <etharp_output+0x1f4>)
 800d7f2:	4869      	ldr	r0, [pc, #420]	; (800d998 <etharp_output+0x1ec>)
 800d7f4:	f001 feb0 	bl	800f558 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68f9      	ldr	r1, [r7, #12]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 fef8 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d002      	beq.n	800d810 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d80a:	4b66      	ldr	r3, [pc, #408]	; (800d9a4 <etharp_output+0x1f8>)
 800d80c:	61fb      	str	r3, [r7, #28]
 800d80e:	e0af      	b.n	800d970 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d818:	2be0      	cmp	r3, #224	; 0xe0
 800d81a:	d118      	bne.n	800d84e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d81c:	2301      	movs	r3, #1
 800d81e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d820:	2300      	movs	r3, #0
 800d822:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d824:	235e      	movs	r3, #94	; 0x5e
 800d826:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	3301      	adds	r3, #1
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d832:	b2db      	uxtb	r3, r3
 800d834:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	3302      	adds	r3, #2
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	3303      	adds	r3, #3
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d846:	f107 0310 	add.w	r3, r7, #16
 800d84a:	61fb      	str	r3, [r7, #28]
 800d84c:	e090      	b.n	800d970 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3304      	adds	r3, #4
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	405a      	eors	r2, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3308      	adds	r3, #8
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4013      	ands	r3, r2
 800d862:	2b00      	cmp	r3, #0
 800d864:	d012      	beq.n	800d88c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d86c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d870:	4293      	cmp	r3, r2
 800d872:	d00b      	beq.n	800d88c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	330c      	adds	r3, #12
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	330c      	adds	r3, #12
 800d882:	61bb      	str	r3, [r7, #24]
 800d884:	e002      	b.n	800d88c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d886:	f06f 0303 	mvn.w	r3, #3
 800d88a:	e07d      	b.n	800d988 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d88c:	4b46      	ldr	r3, [pc, #280]	; (800d9a8 <etharp_output+0x1fc>)
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	4619      	mov	r1, r3
 800d892:	4a46      	ldr	r2, [pc, #280]	; (800d9ac <etharp_output+0x200>)
 800d894:	460b      	mov	r3, r1
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	440b      	add	r3, r1
 800d89a:	00db      	lsls	r3, r3, #3
 800d89c:	4413      	add	r3, r2
 800d89e:	3314      	adds	r3, #20
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d925      	bls.n	800d8f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d8a6:	4b40      	ldr	r3, [pc, #256]	; (800d9a8 <etharp_output+0x1fc>)
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4a3f      	ldr	r2, [pc, #252]	; (800d9ac <etharp_output+0x200>)
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	005b      	lsls	r3, r3, #1
 800d8b2:	440b      	add	r3, r1
 800d8b4:	00db      	lsls	r3, r3, #3
 800d8b6:	4413      	add	r3, r2
 800d8b8:	3308      	adds	r3, #8
 800d8ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d117      	bne.n	800d8f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	4b38      	ldr	r3, [pc, #224]	; (800d9a8 <etharp_output+0x1fc>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	4937      	ldr	r1, [pc, #220]	; (800d9ac <etharp_output+0x200>)
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	4403      	add	r3, r0
 800d8d4:	00db      	lsls	r3, r3, #3
 800d8d6:	440b      	add	r3, r1
 800d8d8:	3304      	adds	r3, #4
 800d8da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d108      	bne.n	800d8f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d8e0:	4b31      	ldr	r3, [pc, #196]	; (800d9a8 <etharp_output+0x1fc>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	68b9      	ldr	r1, [r7, #8]
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f7ff fec5 	bl	800d678 <etharp_output_to_arp_index>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	e04a      	b.n	800d988 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	75fb      	strb	r3, [r7, #23]
 800d8f6:	e031      	b.n	800d95c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d8f8:	7dfa      	ldrb	r2, [r7, #23]
 800d8fa:	492c      	ldr	r1, [pc, #176]	; (800d9ac <etharp_output+0x200>)
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	4413      	add	r3, r2
 800d902:	00db      	lsls	r3, r3, #3
 800d904:	440b      	add	r3, r1
 800d906:	3314      	adds	r3, #20
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d923      	bls.n	800d956 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d90e:	7dfa      	ldrb	r2, [r7, #23]
 800d910:	4926      	ldr	r1, [pc, #152]	; (800d9ac <etharp_output+0x200>)
 800d912:	4613      	mov	r3, r2
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	4413      	add	r3, r2
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	440b      	add	r3, r1
 800d91c:	3308      	adds	r3, #8
 800d91e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	429a      	cmp	r2, r3
 800d924:	d117      	bne.n	800d956 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	6819      	ldr	r1, [r3, #0]
 800d92a:	7dfa      	ldrb	r2, [r7, #23]
 800d92c:	481f      	ldr	r0, [pc, #124]	; (800d9ac <etharp_output+0x200>)
 800d92e:	4613      	mov	r3, r2
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	4413      	add	r3, r2
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	4403      	add	r3, r0
 800d938:	3304      	adds	r3, #4
 800d93a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d93c:	4299      	cmp	r1, r3
 800d93e:	d10a      	bne.n	800d956 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d940:	4a19      	ldr	r2, [pc, #100]	; (800d9a8 <etharp_output+0x1fc>)
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	461a      	mov	r2, r3
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f7ff fe93 	bl	800d678 <etharp_output_to_arp_index>
 800d952:	4603      	mov	r3, r0
 800d954:	e018      	b.n	800d988 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	3301      	adds	r3, #1
 800d95a:	75fb      	strb	r3, [r7, #23]
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
 800d95e:	2b09      	cmp	r3, #9
 800d960:	d9ca      	bls.n	800d8f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	69b9      	ldr	r1, [r7, #24]
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f000 f822 	bl	800d9b0 <etharp_query>
 800d96c:	4603      	mov	r3, r0
 800d96e:	e00b      	b.n	800d988 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d976:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	68b9      	ldr	r1, [r7, #8]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f001 fd3f 	bl	800f404 <ethernet_output>
 800d986:	4603      	mov	r3, r0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3720      	adds	r7, #32
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	08012fe8 	.word	0x08012fe8
 800d994:	08013138 	.word	0x08013138
 800d998:	08013060 	.word	0x08013060
 800d99c:	08013188 	.word	0x08013188
 800d9a0:	08013128 	.word	0x08013128
 800d9a4:	080147c0 	.word	0x080147c0
 800d9a8:	20000668 	.word	0x20000668
 800d9ac:	20000578 	.word	0x20000578

0800d9b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08c      	sub	sp, #48	; 0x30
 800d9b4:	af02      	add	r7, sp, #8
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	3326      	adds	r3, #38	; 0x26
 800d9c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d9c2:	23ff      	movs	r3, #255	; 0xff
 800d9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68f9      	ldr	r1, [r7, #12]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 fe0e 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10c      	bne.n	800d9f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d9e6:	2be0      	cmp	r3, #224	; 0xe0
 800d9e8:	d006      	beq.n	800d9f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d9f8:	f06f 030f 	mvn.w	r3, #15
 800d9fc:	e101      	b.n	800dc02 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	2101      	movs	r1, #1
 800da02:	68b8      	ldr	r0, [r7, #8]
 800da04:	f7ff fb60 	bl	800d0c8 <etharp_find_entry>
 800da08:	4603      	mov	r3, r0
 800da0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800da0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da10:	2b00      	cmp	r3, #0
 800da12:	da02      	bge.n	800da1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800da14:	8a7b      	ldrh	r3, [r7, #18]
 800da16:	b25b      	sxtb	r3, r3
 800da18:	e0f3      	b.n	800dc02 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800da1a:	8a7b      	ldrh	r3, [r7, #18]
 800da1c:	2b7e      	cmp	r3, #126	; 0x7e
 800da1e:	d906      	bls.n	800da2e <etharp_query+0x7e>
 800da20:	4b7a      	ldr	r3, [pc, #488]	; (800dc0c <etharp_query+0x25c>)
 800da22:	f240 32c1 	movw	r2, #961	; 0x3c1
 800da26:	497a      	ldr	r1, [pc, #488]	; (800dc10 <etharp_query+0x260>)
 800da28:	487a      	ldr	r0, [pc, #488]	; (800dc14 <etharp_query+0x264>)
 800da2a:	f001 fd95 	bl	800f558 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800da2e:	8a7b      	ldrh	r3, [r7, #18]
 800da30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800da32:	7c7a      	ldrb	r2, [r7, #17]
 800da34:	4978      	ldr	r1, [pc, #480]	; (800dc18 <etharp_query+0x268>)
 800da36:	4613      	mov	r3, r2
 800da38:	005b      	lsls	r3, r3, #1
 800da3a:	4413      	add	r3, r2
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	440b      	add	r3, r1
 800da40:	3314      	adds	r3, #20
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d115      	bne.n	800da74 <etharp_query+0xc4>
    is_new_entry = 1;
 800da48:	2301      	movs	r3, #1
 800da4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800da4c:	7c7a      	ldrb	r2, [r7, #17]
 800da4e:	4972      	ldr	r1, [pc, #456]	; (800dc18 <etharp_query+0x268>)
 800da50:	4613      	mov	r3, r2
 800da52:	005b      	lsls	r3, r3, #1
 800da54:	4413      	add	r3, r2
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	440b      	add	r3, r1
 800da5a:	3314      	adds	r3, #20
 800da5c:	2201      	movs	r2, #1
 800da5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800da60:	7c7a      	ldrb	r2, [r7, #17]
 800da62:	496d      	ldr	r1, [pc, #436]	; (800dc18 <etharp_query+0x268>)
 800da64:	4613      	mov	r3, r2
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	4413      	add	r3, r2
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	440b      	add	r3, r1
 800da6e:	3308      	adds	r3, #8
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800da74:	7c7a      	ldrb	r2, [r7, #17]
 800da76:	4968      	ldr	r1, [pc, #416]	; (800dc18 <etharp_query+0x268>)
 800da78:	4613      	mov	r3, r2
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	4413      	add	r3, r2
 800da7e:	00db      	lsls	r3, r3, #3
 800da80:	440b      	add	r3, r1
 800da82:	3314      	adds	r3, #20
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d011      	beq.n	800daae <etharp_query+0xfe>
 800da8a:	7c7a      	ldrb	r2, [r7, #17]
 800da8c:	4962      	ldr	r1, [pc, #392]	; (800dc18 <etharp_query+0x268>)
 800da8e:	4613      	mov	r3, r2
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4413      	add	r3, r2
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	440b      	add	r3, r1
 800da98:	3314      	adds	r3, #20
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d806      	bhi.n	800daae <etharp_query+0xfe>
 800daa0:	4b5a      	ldr	r3, [pc, #360]	; (800dc0c <etharp_query+0x25c>)
 800daa2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800daa6:	495d      	ldr	r1, [pc, #372]	; (800dc1c <etharp_query+0x26c>)
 800daa8:	485a      	ldr	r0, [pc, #360]	; (800dc14 <etharp_query+0x264>)
 800daaa:	f001 fd55 	bl	800f558 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d102      	bne.n	800daba <etharp_query+0x10a>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10c      	bne.n	800dad4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800daba:	68b9      	ldr	r1, [r7, #8]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f000 f963 	bl	800dd88 <etharp_request>
 800dac2:	4603      	mov	r3, r0
 800dac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d102      	bne.n	800dad4 <etharp_query+0x124>
      return result;
 800dace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dad2:	e096      	b.n	800dc02 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d106      	bne.n	800dae8 <etharp_query+0x138>
 800dada:	4b4c      	ldr	r3, [pc, #304]	; (800dc0c <etharp_query+0x25c>)
 800dadc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800dae0:	494f      	ldr	r1, [pc, #316]	; (800dc20 <etharp_query+0x270>)
 800dae2:	484c      	ldr	r0, [pc, #304]	; (800dc14 <etharp_query+0x264>)
 800dae4:	f001 fd38 	bl	800f558 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dae8:	7c7a      	ldrb	r2, [r7, #17]
 800daea:	494b      	ldr	r1, [pc, #300]	; (800dc18 <etharp_query+0x268>)
 800daec:	4613      	mov	r3, r2
 800daee:	005b      	lsls	r3, r3, #1
 800daf0:	4413      	add	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	440b      	add	r3, r1
 800daf6:	3314      	adds	r3, #20
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d917      	bls.n	800db2e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800dafe:	4a49      	ldr	r2, [pc, #292]	; (800dc24 <etharp_query+0x274>)
 800db00:	7c7b      	ldrb	r3, [r7, #17]
 800db02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800db04:	7c7a      	ldrb	r2, [r7, #17]
 800db06:	4613      	mov	r3, r2
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	4413      	add	r3, r2
 800db0c:	00db      	lsls	r3, r3, #3
 800db0e:	3308      	adds	r3, #8
 800db10:	4a41      	ldr	r2, [pc, #260]	; (800dc18 <etharp_query+0x268>)
 800db12:	4413      	add	r3, r2
 800db14:	3304      	adds	r3, #4
 800db16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db1a:	9200      	str	r2, [sp, #0]
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	6879      	ldr	r1, [r7, #4]
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f001 fc6f 	bl	800f404 <ethernet_output>
 800db26:	4603      	mov	r3, r0
 800db28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db2c:	e067      	b.n	800dbfe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800db2e:	7c7a      	ldrb	r2, [r7, #17]
 800db30:	4939      	ldr	r1, [pc, #228]	; (800dc18 <etharp_query+0x268>)
 800db32:	4613      	mov	r3, r2
 800db34:	005b      	lsls	r3, r3, #1
 800db36:	4413      	add	r3, r2
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	440b      	add	r3, r1
 800db3c:	3314      	adds	r3, #20
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d15c      	bne.n	800dbfe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800db4c:	e01c      	b.n	800db88 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	895a      	ldrh	r2, [r3, #10]
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	891b      	ldrh	r3, [r3, #8]
 800db56:	429a      	cmp	r2, r3
 800db58:	d10a      	bne.n	800db70 <etharp_query+0x1c0>
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d006      	beq.n	800db70 <etharp_query+0x1c0>
 800db62:	4b2a      	ldr	r3, [pc, #168]	; (800dc0c <etharp_query+0x25c>)
 800db64:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800db68:	492f      	ldr	r1, [pc, #188]	; (800dc28 <etharp_query+0x278>)
 800db6a:	482a      	ldr	r0, [pc, #168]	; (800dc14 <etharp_query+0x264>)
 800db6c:	f001 fcf4 	bl	800f558 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	7b1b      	ldrb	r3, [r3, #12]
 800db74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d002      	beq.n	800db82 <etharp_query+0x1d2>
        copy_needed = 1;
 800db7c:	2301      	movs	r3, #1
 800db7e:	61bb      	str	r3, [r7, #24]
        break;
 800db80:	e005      	b.n	800db8e <etharp_query+0x1de>
      }
      p = p->next;
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	61fb      	str	r3, [r7, #28]
    while (p) {
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1df      	bne.n	800db4e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	f44f 7120 	mov.w	r1, #640	; 0x280
 800db9a:	200e      	movs	r0, #14
 800db9c:	f7f8 fe2e 	bl	80067fc <pbuf_clone>
 800dba0:	61f8      	str	r0, [r7, #28]
 800dba2:	e004      	b.n	800dbae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800dba8:	69f8      	ldr	r0, [r7, #28]
 800dbaa:	f7f8 fc6b 	bl	8006484 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d021      	beq.n	800dbf8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dbb4:	7c7a      	ldrb	r2, [r7, #17]
 800dbb6:	4918      	ldr	r1, [pc, #96]	; (800dc18 <etharp_query+0x268>)
 800dbb8:	4613      	mov	r3, r2
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	4413      	add	r3, r2
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	440b      	add	r3, r1
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00a      	beq.n	800dbde <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800dbc8:	7c7a      	ldrb	r2, [r7, #17]
 800dbca:	4913      	ldr	r1, [pc, #76]	; (800dc18 <etharp_query+0x268>)
 800dbcc:	4613      	mov	r3, r2
 800dbce:	005b      	lsls	r3, r3, #1
 800dbd0:	4413      	add	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	440b      	add	r3, r1
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7f8 fbb3 	bl	8006344 <pbuf_free>
      }
      arp_table[i].q = p;
 800dbde:	7c7a      	ldrb	r2, [r7, #17]
 800dbe0:	490d      	ldr	r1, [pc, #52]	; (800dc18 <etharp_query+0x268>)
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	4413      	add	r3, r2
 800dbe8:	00db      	lsls	r3, r3, #3
 800dbea:	440b      	add	r3, r1
 800dbec:	69fa      	ldr	r2, [r7, #28]
 800dbee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbf6:	e002      	b.n	800dbfe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800dbf8:	23ff      	movs	r3, #255	; 0xff
 800dbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800dbfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3728      	adds	r7, #40	; 0x28
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	08012fe8 	.word	0x08012fe8
 800dc10:	08013194 	.word	0x08013194
 800dc14:	08013060 	.word	0x08013060
 800dc18:	20000578 	.word	0x20000578
 800dc1c:	080131a4 	.word	0x080131a4
 800dc20:	08013188 	.word	0x08013188
 800dc24:	20000668 	.word	0x20000668
 800dc28:	080131cc 	.word	0x080131cc

0800dc2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08a      	sub	sp, #40	; 0x28
 800dc30:	af02      	add	r7, sp, #8
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d106      	bne.n	800dc52 <etharp_raw+0x26>
 800dc44:	4b3a      	ldr	r3, [pc, #232]	; (800dd30 <etharp_raw+0x104>)
 800dc46:	f240 4257 	movw	r2, #1111	; 0x457
 800dc4a:	493a      	ldr	r1, [pc, #232]	; (800dd34 <etharp_raw+0x108>)
 800dc4c:	483a      	ldr	r0, [pc, #232]	; (800dd38 <etharp_raw+0x10c>)
 800dc4e:	f001 fc83 	bl	800f558 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800dc52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc56:	211c      	movs	r1, #28
 800dc58:	200e      	movs	r0, #14
 800dc5a:	f7f8 f88f 	bl	8005d7c <pbuf_alloc>
 800dc5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d102      	bne.n	800dc6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800dc66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc6a:	e05d      	b.n	800dd28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	895b      	ldrh	r3, [r3, #10]
 800dc70:	2b1b      	cmp	r3, #27
 800dc72:	d806      	bhi.n	800dc82 <etharp_raw+0x56>
 800dc74:	4b2e      	ldr	r3, [pc, #184]	; (800dd30 <etharp_raw+0x104>)
 800dc76:	f240 4262 	movw	r2, #1122	; 0x462
 800dc7a:	4930      	ldr	r1, [pc, #192]	; (800dd3c <etharp_raw+0x110>)
 800dc7c:	482e      	ldr	r0, [pc, #184]	; (800dd38 <etharp_raw+0x10c>)
 800dc7e:	f001 fc6b 	bl	800f558 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800dc88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f7 f83c 	bl	8004d08 <lwip_htons>
 800dc90:	4603      	mov	r3, r0
 800dc92:	461a      	mov	r2, r3
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dc9e:	2b06      	cmp	r3, #6
 800dca0:	d006      	beq.n	800dcb0 <etharp_raw+0x84>
 800dca2:	4b23      	ldr	r3, [pc, #140]	; (800dd30 <etharp_raw+0x104>)
 800dca4:	f240 4269 	movw	r2, #1129	; 0x469
 800dca8:	4925      	ldr	r1, [pc, #148]	; (800dd40 <etharp_raw+0x114>)
 800dcaa:	4823      	ldr	r0, [pc, #140]	; (800dd38 <etharp_raw+0x10c>)
 800dcac:	f001 fc54 	bl	800f558 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	3308      	adds	r3, #8
 800dcb4:	2206      	movs	r2, #6
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f001 fc1d 	bl	800f4f8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	3312      	adds	r3, #18
 800dcc2:	2206      	movs	r2, #6
 800dcc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f001 fc16 	bl	800f4f8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	330e      	adds	r3, #14
 800dcd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcd2:	6812      	ldr	r2, [r2, #0]
 800dcd4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	3318      	adds	r3, #24
 800dcda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcdc:	6812      	ldr	r2, [r2, #0]
 800dcde:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	2200      	movs	r2, #0
 800dce4:	701a      	strb	r2, [r3, #0]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f042 0201 	orr.w	r2, r2, #1
 800dcec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f042 0208 	orr.w	r2, r2, #8
 800dcf6:	709a      	strb	r2, [r3, #2]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2206      	movs	r2, #6
 800dd00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2204      	movs	r2, #4
 800dd06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800dd08:	f640 0306 	movw	r3, #2054	; 0x806
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	69b9      	ldr	r1, [r7, #24]
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f001 fb75 	bl	800f404 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800dd1a:	69b8      	ldr	r0, [r7, #24]
 800dd1c:	f7f8 fb12 	bl	8006344 <pbuf_free>
  p = NULL;
 800dd20:	2300      	movs	r3, #0
 800dd22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dd24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3720      	adds	r7, #32
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	08012fe8 	.word	0x08012fe8
 800dd34:	08013138 	.word	0x08013138
 800dd38:	08013060 	.word	0x08013060
 800dd3c:	080131e8 	.word	0x080131e8
 800dd40:	0801321c 	.word	0x0801321c

0800dd44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af04      	add	r7, sp, #16
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dd60:	2201      	movs	r2, #1
 800dd62:	9203      	str	r2, [sp, #12]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	9202      	str	r2, [sp, #8]
 800dd68:	4a06      	ldr	r2, [pc, #24]	; (800dd84 <etharp_request_dst+0x40>)
 800dd6a:	9201      	str	r2, [sp, #4]
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	4603      	mov	r3, r0
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f7ff ff5a 	bl	800dc2c <etharp_raw>
 800dd78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	080147c8 	.word	0x080147c8

0800dd88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800dd92:	4a05      	ldr	r2, [pc, #20]	; (800dda8 <etharp_request+0x20>)
 800dd94:	6839      	ldr	r1, [r7, #0]
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7ff ffd4 	bl	800dd44 <etharp_request_dst>
 800dd9c:	4603      	mov	r3, r0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	080147c0 	.word	0x080147c0

0800ddac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b08e      	sub	sp, #56	; 0x38
 800ddb0:	af04      	add	r7, sp, #16
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ddb6:	4b79      	ldr	r3, [pc, #484]	; (800df9c <icmp_input+0x1f0>)
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	f003 030f 	and.w	r3, r3, #15
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ddcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddce:	2b13      	cmp	r3, #19
 800ddd0:	f240 80cd 	bls.w	800df6e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	895b      	ldrh	r3, [r3, #10]
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	f240 80ca 	bls.w	800df72 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dde8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 80b7 	beq.w	800df60 <icmp_input+0x1b4>
 800ddf2:	2b08      	cmp	r3, #8
 800ddf4:	f040 80b7 	bne.w	800df66 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ddf8:	4b69      	ldr	r3, [pc, #420]	; (800dfa0 <icmp_input+0x1f4>)
 800ddfa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ddfc:	4b67      	ldr	r3, [pc, #412]	; (800df9c <icmp_input+0x1f0>)
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de04:	2be0      	cmp	r3, #224	; 0xe0
 800de06:	f000 80bb 	beq.w	800df80 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800de0a:	4b64      	ldr	r3, [pc, #400]	; (800df9c <icmp_input+0x1f0>)
 800de0c:	695b      	ldr	r3, [r3, #20]
 800de0e:	4a63      	ldr	r2, [pc, #396]	; (800df9c <icmp_input+0x1f0>)
 800de10:	6812      	ldr	r2, [r2, #0]
 800de12:	4611      	mov	r1, r2
 800de14:	4618      	mov	r0, r3
 800de16:	f000 fbed 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f040 80b1 	bne.w	800df84 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	891b      	ldrh	r3, [r3, #8]
 800de26:	2b07      	cmp	r3, #7
 800de28:	f240 80a5 	bls.w	800df76 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800de2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de2e:	330e      	adds	r3, #14
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7f8 f9f0 	bl	8006218 <pbuf_add_header>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d04b      	beq.n	800ded6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	891a      	ldrh	r2, [r3, #8]
 800de42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de44:	4413      	add	r3, r2
 800de46:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	891b      	ldrh	r3, [r3, #8]
 800de4c:	8b7a      	ldrh	r2, [r7, #26]
 800de4e:	429a      	cmp	r2, r3
 800de50:	f0c0 809a 	bcc.w	800df88 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800de54:	8b7b      	ldrh	r3, [r7, #26]
 800de56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de5a:	4619      	mov	r1, r3
 800de5c:	200e      	movs	r0, #14
 800de5e:	f7f7 ff8d 	bl	8005d7c <pbuf_alloc>
 800de62:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 8090 	beq.w	800df8c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	895b      	ldrh	r3, [r3, #10]
 800de70:	461a      	mov	r2, r3
 800de72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de74:	3308      	adds	r3, #8
 800de76:	429a      	cmp	r2, r3
 800de78:	d203      	bcs.n	800de82 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800de7a:	6978      	ldr	r0, [r7, #20]
 800de7c:	f7f8 fa62 	bl	8006344 <pbuf_free>
          goto icmperr;
 800de80:	e085      	b.n	800df8e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de8a:	4618      	mov	r0, r3
 800de8c:	f001 fb34 	bl	800f4f8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800de90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de92:	4619      	mov	r1, r3
 800de94:	6978      	ldr	r0, [r7, #20]
 800de96:	f7f8 f9cf 	bl	8006238 <pbuf_remove_header>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d009      	beq.n	800deb4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dea0:	4b40      	ldr	r3, [pc, #256]	; (800dfa4 <icmp_input+0x1f8>)
 800dea2:	22b6      	movs	r2, #182	; 0xb6
 800dea4:	4940      	ldr	r1, [pc, #256]	; (800dfa8 <icmp_input+0x1fc>)
 800dea6:	4841      	ldr	r0, [pc, #260]	; (800dfac <icmp_input+0x200>)
 800dea8:	f001 fb56 	bl	800f558 <iprintf>
          pbuf_free(r);
 800deac:	6978      	ldr	r0, [r7, #20]
 800deae:	f7f8 fa49 	bl	8006344 <pbuf_free>
          goto icmperr;
 800deb2:	e06c      	b.n	800df8e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f7f8 fb5c 	bl	8006574 <pbuf_copy>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dec2:	6978      	ldr	r0, [r7, #20]
 800dec4:	f7f8 fa3e 	bl	8006344 <pbuf_free>
          goto icmperr;
 800dec8:	e061      	b.n	800df8e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7f8 fa3a 	bl	8006344 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	607b      	str	r3, [r7, #4]
 800ded4:	e00f      	b.n	800def6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ded6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ded8:	330e      	adds	r3, #14
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7f8 f9ab 	bl	8006238 <pbuf_remove_header>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d006      	beq.n	800def6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dee8:	4b2e      	ldr	r3, [pc, #184]	; (800dfa4 <icmp_input+0x1f8>)
 800deea:	22c7      	movs	r2, #199	; 0xc7
 800deec:	4930      	ldr	r1, [pc, #192]	; (800dfb0 <icmp_input+0x204>)
 800deee:	482f      	ldr	r0, [pc, #188]	; (800dfac <icmp_input+0x200>)
 800def0:	f001 fb32 	bl	800f558 <iprintf>
          goto icmperr;
 800def4:	e04b      	b.n	800df8e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800defc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7f8 f989 	bl	8006218 <pbuf_add_header>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d12b      	bne.n	800df64 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800df1a:	4b20      	ldr	r3, [pc, #128]	; (800df9c <icmp_input+0x1f0>)
 800df1c:	691a      	ldr	r2, [r3, #16]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	2200      	movs	r2, #0
 800df2c:	709a      	strb	r2, [r3, #2]
 800df2e:	2200      	movs	r2, #0
 800df30:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	22ff      	movs	r2, #255	; 0xff
 800df36:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	729a      	strb	r2, [r3, #10]
 800df3e:	2200      	movs	r2, #0
 800df40:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	9302      	str	r3, [sp, #8]
 800df46:	2301      	movs	r3, #1
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	2300      	movs	r3, #0
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	23ff      	movs	r3, #255	; 0xff
 800df50:	2200      	movs	r2, #0
 800df52:	69f9      	ldr	r1, [r7, #28]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fa75 	bl	800e444 <ip4_output_if>
 800df5a:	4603      	mov	r3, r0
 800df5c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800df5e:	e001      	b.n	800df64 <icmp_input+0x1b8>
      break;
 800df60:	bf00      	nop
 800df62:	e000      	b.n	800df66 <icmp_input+0x1ba>
      break;
 800df64:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7f8 f9ec 	bl	8006344 <pbuf_free>
  return;
 800df6c:	e013      	b.n	800df96 <icmp_input+0x1ea>
    goto lenerr;
 800df6e:	bf00      	nop
 800df70:	e002      	b.n	800df78 <icmp_input+0x1cc>
    goto lenerr;
 800df72:	bf00      	nop
 800df74:	e000      	b.n	800df78 <icmp_input+0x1cc>
        goto lenerr;
 800df76:	bf00      	nop
lenerr:
  pbuf_free(p);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7f8 f9e3 	bl	8006344 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800df7e:	e00a      	b.n	800df96 <icmp_input+0x1ea>
        goto icmperr;
 800df80:	bf00      	nop
 800df82:	e004      	b.n	800df8e <icmp_input+0x1e2>
        goto icmperr;
 800df84:	bf00      	nop
 800df86:	e002      	b.n	800df8e <icmp_input+0x1e2>
          goto icmperr;
 800df88:	bf00      	nop
 800df8a:	e000      	b.n	800df8e <icmp_input+0x1e2>
          goto icmperr;
 800df8c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7f8 f9d8 	bl	8006344 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800df94:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800df96:	3728      	adds	r7, #40	; 0x28
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	200037d4 	.word	0x200037d4
 800dfa0:	200037e8 	.word	0x200037e8
 800dfa4:	08013260 	.word	0x08013260
 800dfa8:	08013298 	.word	0x08013298
 800dfac:	080132d0 	.word	0x080132d0
 800dfb0:	080132f8 	.word	0x080132f8

0800dfb4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dfc0:	78fb      	ldrb	r3, [r7, #3]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	2103      	movs	r1, #3
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f814 	bl	800dff4 <icmp_send_response>
}
 800dfcc:	bf00      	nop
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dfe0:	78fb      	ldrb	r3, [r7, #3]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	210b      	movs	r1, #11
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f804 	bl	800dff4 <icmp_send_response>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08c      	sub	sp, #48	; 0x30
 800dff8:	af04      	add	r7, sp, #16
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
 800e000:	4613      	mov	r3, r2
 800e002:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e004:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e008:	2124      	movs	r1, #36	; 0x24
 800e00a:	2022      	movs	r0, #34	; 0x22
 800e00c:	f7f7 feb6 	bl	8005d7c <pbuf_alloc>
 800e010:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d04c      	beq.n	800e0b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	895b      	ldrh	r3, [r3, #10]
 800e01c:	2b23      	cmp	r3, #35	; 0x23
 800e01e:	d806      	bhi.n	800e02e <icmp_send_response+0x3a>
 800e020:	4b26      	ldr	r3, [pc, #152]	; (800e0bc <icmp_send_response+0xc8>)
 800e022:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e026:	4926      	ldr	r1, [pc, #152]	; (800e0c0 <icmp_send_response+0xcc>)
 800e028:	4826      	ldr	r0, [pc, #152]	; (800e0c4 <icmp_send_response+0xd0>)
 800e02a:	f001 fa95 	bl	800f558 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	78fa      	ldrb	r2, [r7, #3]
 800e03e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	78ba      	ldrb	r2, [r7, #2]
 800e044:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2200      	movs	r2, #0
 800e04a:	711a      	strb	r2, [r3, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	2200      	movs	r2, #0
 800e054:	719a      	strb	r2, [r3, #6]
 800e056:	2200      	movs	r2, #0
 800e058:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	f103 0008 	add.w	r0, r3, #8
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	221c      	movs	r2, #28
 800e068:	4619      	mov	r1, r3
 800e06a:	f001 fa45 	bl	800f4f8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e074:	f107 030c 	add.w	r3, r7, #12
 800e078:	4618      	mov	r0, r3
 800e07a:	f000 f825 	bl	800e0c8 <ip4_route>
 800e07e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d011      	beq.n	800e0aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2200      	movs	r2, #0
 800e08a:	709a      	strb	r2, [r3, #2]
 800e08c:	2200      	movs	r2, #0
 800e08e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e090:	f107 020c 	add.w	r2, r7, #12
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	9302      	str	r3, [sp, #8]
 800e098:	2301      	movs	r3, #1
 800e09a:	9301      	str	r3, [sp, #4]
 800e09c:	2300      	movs	r3, #0
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	23ff      	movs	r3, #255	; 0xff
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	69f8      	ldr	r0, [r7, #28]
 800e0a6:	f000 f9cd 	bl	800e444 <ip4_output_if>
  }
  pbuf_free(q);
 800e0aa:	69f8      	ldr	r0, [r7, #28]
 800e0ac:	f7f8 f94a 	bl	8006344 <pbuf_free>
 800e0b0:	e000      	b.n	800e0b4 <icmp_send_response+0xc0>
    return;
 800e0b2:	bf00      	nop
}
 800e0b4:	3720      	adds	r7, #32
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	08013260 	.word	0x08013260
 800e0c0:	0801332c 	.word	0x0801332c
 800e0c4:	080132d0 	.word	0x080132d0

0800e0c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e0d0:	4b33      	ldr	r3, [pc, #204]	; (800e1a0 <ip4_route+0xd8>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	e036      	b.n	800e146 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d02b      	beq.n	800e140 <ip4_route+0x78>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0ee:	089b      	lsrs	r3, r3, #2
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d022      	beq.n	800e140 <ip4_route+0x78>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d01d      	beq.n	800e140 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3304      	adds	r3, #4
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	405a      	eors	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	3308      	adds	r3, #8
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4013      	ands	r3, r2
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	e038      	b.n	800e192 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d108      	bne.n	800e140 <ip4_route+0x78>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	330c      	adds	r3, #12
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d101      	bne.n	800e140 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	e028      	b.n	800e192 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1c5      	bne.n	800e0d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e14c:	4b15      	ldr	r3, [pc, #84]	; (800e1a4 <ip4_route+0xdc>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d01a      	beq.n	800e18a <ip4_route+0xc2>
 800e154:	4b13      	ldr	r3, [pc, #76]	; (800e1a4 <ip4_route+0xdc>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e15c:	f003 0301 	and.w	r3, r3, #1
 800e160:	2b00      	cmp	r3, #0
 800e162:	d012      	beq.n	800e18a <ip4_route+0xc2>
 800e164:	4b0f      	ldr	r3, [pc, #60]	; (800e1a4 <ip4_route+0xdc>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e16c:	f003 0304 	and.w	r3, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	d00a      	beq.n	800e18a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e174:	4b0b      	ldr	r3, [pc, #44]	; (800e1a4 <ip4_route+0xdc>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	3304      	adds	r3, #4
 800e17a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b7f      	cmp	r3, #127	; 0x7f
 800e188:	d101      	bne.n	800e18e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	e001      	b.n	800e192 <ip4_route+0xca>
  }

  return netif_default;
 800e18e:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <ip4_route+0xdc>)
 800e190:	681b      	ldr	r3, [r3, #0]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20008ec8 	.word	0x20008ec8
 800e1a4:	20008ecc 	.word	0x20008ecc

0800e1a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d016      	beq.n	800e1ee <ip4_input_accept+0x46>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3304      	adds	r3, #4
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d011      	beq.n	800e1ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e1ca:	4b0b      	ldr	r3, [pc, #44]	; (800e1f8 <ip4_input_accept+0x50>)
 800e1cc:	695a      	ldr	r2, [r3, #20]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	3304      	adds	r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d008      	beq.n	800e1ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e1d8:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <ip4_input_accept+0x50>)
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	6879      	ldr	r1, [r7, #4]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f000 fa08 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800e1e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e000      	b.n	800e1f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	200037d4 	.word	0x200037d4

0800e1fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	091b      	lsrs	r3, r3, #4
 800e212:	b2db      	uxtb	r3, r3
 800e214:	2b04      	cmp	r3, #4
 800e216:	d004      	beq.n	800e222 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7f8 f893 	bl	8006344 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	e107      	b.n	800e432 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	f003 030f 	and.w	r3, r3, #15
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	b29b      	uxth	r3, r3
 800e238:	4618      	mov	r0, r3
 800e23a:	f7f6 fd65 	bl	8004d08 <lwip_htons>
 800e23e:	4603      	mov	r3, r0
 800e240:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	891b      	ldrh	r3, [r3, #8]
 800e246:	89ba      	ldrh	r2, [r7, #12]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d204      	bcs.n	800e256 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e24c:	89bb      	ldrh	r3, [r7, #12]
 800e24e:	4619      	mov	r1, r3
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7f7 fef1 	bl	8006038 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	895b      	ldrh	r3, [r3, #10]
 800e25a:	89fa      	ldrh	r2, [r7, #14]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d807      	bhi.n	800e270 <ip4_input+0x74>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	891b      	ldrh	r3, [r3, #8]
 800e264:	89ba      	ldrh	r2, [r7, #12]
 800e266:	429a      	cmp	r2, r3
 800e268:	d802      	bhi.n	800e270 <ip4_input+0x74>
 800e26a:	89fb      	ldrh	r3, [r7, #14]
 800e26c:	2b13      	cmp	r3, #19
 800e26e:	d804      	bhi.n	800e27a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7f8 f867 	bl	8006344 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	e0db      	b.n	800e432 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	4a6f      	ldr	r2, [pc, #444]	; (800e43c <ip4_input+0x240>)
 800e280:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	4a6d      	ldr	r2, [pc, #436]	; (800e43c <ip4_input+0x240>)
 800e288:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e28a:	4b6c      	ldr	r3, [pc, #432]	; (800e43c <ip4_input+0x240>)
 800e28c:	695b      	ldr	r3, [r3, #20]
 800e28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e292:	2be0      	cmp	r3, #224	; 0xe0
 800e294:	d112      	bne.n	800e2bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e29c:	f003 0301 	and.w	r3, r3, #1
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d007      	beq.n	800e2b6 <ip4_input+0xba>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <ip4_input+0xba>
      netif = inp;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	613b      	str	r3, [r7, #16]
 800e2b4:	e02a      	b.n	800e30c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	e027      	b.n	800e30c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e2bc:	6838      	ldr	r0, [r7, #0]
 800e2be:	f7ff ff73 	bl	800e1a8 <ip4_input_accept>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d002      	beq.n	800e2ce <ip4_input+0xd2>
      netif = inp;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	613b      	str	r3, [r7, #16]
 800e2cc:	e01e      	b.n	800e30c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e2d2:	4b5a      	ldr	r3, [pc, #360]	; (800e43c <ip4_input+0x240>)
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	2b7f      	cmp	r3, #127	; 0x7f
 800e2da:	d017      	beq.n	800e30c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e2dc:	4b58      	ldr	r3, [pc, #352]	; (800e440 <ip4_input+0x244>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	613b      	str	r3, [r7, #16]
 800e2e2:	e00e      	b.n	800e302 <ip4_input+0x106>
          if (netif == inp) {
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d006      	beq.n	800e2fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e2ec:	6938      	ldr	r0, [r7, #16]
 800e2ee:	f7ff ff5b 	bl	800e1a8 <ip4_input_accept>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d108      	bne.n	800e30a <ip4_input+0x10e>
 800e2f8:	e000      	b.n	800e2fc <ip4_input+0x100>
            continue;
 800e2fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	613b      	str	r3, [r7, #16]
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1ed      	bne.n	800e2e4 <ip4_input+0xe8>
 800e308:	e000      	b.n	800e30c <ip4_input+0x110>
            break;
 800e30a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e30c:	4b4b      	ldr	r3, [pc, #300]	; (800e43c <ip4_input+0x240>)
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	6839      	ldr	r1, [r7, #0]
 800e312:	4618      	mov	r0, r3
 800e314:	f000 f96e 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d105      	bne.n	800e32a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e31e:	4b47      	ldr	r3, [pc, #284]	; (800e43c <ip4_input+0x240>)
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e326:	2be0      	cmp	r3, #224	; 0xe0
 800e328:	d104      	bne.n	800e334 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7f8 f80a 	bl	8006344 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	e07e      	b.n	800e432 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d104      	bne.n	800e344 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7f8 f802 	bl	8006344 <pbuf_free>
    return ERR_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	e076      	b.n	800e432 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	88db      	ldrh	r3, [r3, #6]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	461a      	mov	r2, r3
 800e34c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e350:	4013      	ands	r3, r2
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00b      	beq.n	800e36e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fc92 	bl	800ec80 <ip4_reass>
 800e35c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d101      	bne.n	800e368 <ip4_input+0x16c>
      return ERR_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	e064      	b.n	800e432 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e36e:	4a33      	ldr	r2, [pc, #204]	; (800e43c <ip4_input+0x240>)
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e374:	4a31      	ldr	r2, [pc, #196]	; (800e43c <ip4_input+0x240>)
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e37a:	4a30      	ldr	r2, [pc, #192]	; (800e43c <ip4_input+0x240>)
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	f003 030f 	and.w	r3, r3, #15
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	b29a      	uxth	r2, r3
 800e390:	4b2a      	ldr	r3, [pc, #168]	; (800e43c <ip4_input+0x240>)
 800e392:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e394:	89fb      	ldrh	r3, [r7, #14]
 800e396:	4619      	mov	r1, r3
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7f7 ff4d 	bl	8006238 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	7a5b      	ldrb	r3, [r3, #9]
 800e3a2:	2b11      	cmp	r3, #17
 800e3a4:	d006      	beq.n	800e3b4 <ip4_input+0x1b8>
 800e3a6:	2b11      	cmp	r3, #17
 800e3a8:	dc13      	bgt.n	800e3d2 <ip4_input+0x1d6>
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d00c      	beq.n	800e3c8 <ip4_input+0x1cc>
 800e3ae:	2b06      	cmp	r3, #6
 800e3b0:	d005      	beq.n	800e3be <ip4_input+0x1c2>
 800e3b2:	e00e      	b.n	800e3d2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7fe fc68 	bl	800cc8c <udp_input>
        break;
 800e3bc:	e026      	b.n	800e40c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e3be:	6839      	ldr	r1, [r7, #0]
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7fa f88d 	bl	80084e0 <tcp_input>
        break;
 800e3c6:	e021      	b.n	800e40c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff fcee 	bl	800ddac <icmp_input>
        break;
 800e3d0:	e01c      	b.n	800e40c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e3d2:	4b1a      	ldr	r3, [pc, #104]	; (800e43c <ip4_input+0x240>)
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	6939      	ldr	r1, [r7, #16]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 f90b 	bl	800e5f4 <ip4_addr_isbroadcast_u32>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d10f      	bne.n	800e404 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e3e4:	4b15      	ldr	r3, [pc, #84]	; (800e43c <ip4_input+0x240>)
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e3ec:	2be0      	cmp	r3, #224	; 0xe0
 800e3ee:	d009      	beq.n	800e404 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e3f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7f7 ff91 	bl	800631e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e3fc:	2102      	movs	r1, #2
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff fdd8 	bl	800dfb4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7f7 ff9d 	bl	8006344 <pbuf_free>
        break;
 800e40a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e40c:	4b0b      	ldr	r3, [pc, #44]	; (800e43c <ip4_input+0x240>)
 800e40e:	2200      	movs	r2, #0
 800e410:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e412:	4b0a      	ldr	r3, [pc, #40]	; (800e43c <ip4_input+0x240>)
 800e414:	2200      	movs	r2, #0
 800e416:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e418:	4b08      	ldr	r3, [pc, #32]	; (800e43c <ip4_input+0x240>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e41e:	4b07      	ldr	r3, [pc, #28]	; (800e43c <ip4_input+0x240>)
 800e420:	2200      	movs	r2, #0
 800e422:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e424:	4b05      	ldr	r3, [pc, #20]	; (800e43c <ip4_input+0x240>)
 800e426:	2200      	movs	r2, #0
 800e428:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e42a:	4b04      	ldr	r3, [pc, #16]	; (800e43c <ip4_input+0x240>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e430:	2300      	movs	r3, #0
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	200037d4 	.word	0x200037d4
 800e440:	20008ec8 	.word	0x20008ec8

0800e444 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08a      	sub	sp, #40	; 0x28
 800e448:	af04      	add	r7, sp, #16
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d009      	beq.n	800e470 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d003      	beq.n	800e46a <ip4_output_if+0x26>
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d102      	bne.n	800e470 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46c:	3304      	adds	r3, #4
 800e46e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e470:	78fa      	ldrb	r2, [r7, #3]
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	9302      	str	r3, [sp, #8]
 800e476:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e47a:	9301      	str	r3, [sp, #4]
 800e47c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	4613      	mov	r3, r2
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	6979      	ldr	r1, [r7, #20]
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f000 f805 	bl	800e498 <ip4_output_if_src>
 800e48e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b088      	sub	sp, #32
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	607a      	str	r2, [r7, #4]
 800e4a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	7b9b      	ldrb	r3, [r3, #14]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d006      	beq.n	800e4bc <ip4_output_if_src+0x24>
 800e4ae:	4b4b      	ldr	r3, [pc, #300]	; (800e5dc <ip4_output_if_src+0x144>)
 800e4b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e4b4:	494a      	ldr	r1, [pc, #296]	; (800e5e0 <ip4_output_if_src+0x148>)
 800e4b6:	484b      	ldr	r0, [pc, #300]	; (800e5e4 <ip4_output_if_src+0x14c>)
 800e4b8:	f001 f84e 	bl	800f558 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d060      	beq.n	800e584 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e4c2:	2314      	movs	r3, #20
 800e4c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e4c6:	2114      	movs	r1, #20
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f7f7 fea5 	bl	8006218 <pbuf_add_header>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e4d4:	f06f 0301 	mvn.w	r3, #1
 800e4d8:	e07c      	b.n	800e5d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	895b      	ldrh	r3, [r3, #10]
 800e4e4:	2b13      	cmp	r3, #19
 800e4e6:	d806      	bhi.n	800e4f6 <ip4_output_if_src+0x5e>
 800e4e8:	4b3c      	ldr	r3, [pc, #240]	; (800e5dc <ip4_output_if_src+0x144>)
 800e4ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e4ee:	493e      	ldr	r1, [pc, #248]	; (800e5e8 <ip4_output_if_src+0x150>)
 800e4f0:	483c      	ldr	r0, [pc, #240]	; (800e5e4 <ip4_output_if_src+0x14c>)
 800e4f2:	f001 f831 	bl	800f558 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	78fa      	ldrb	r2, [r7, #3]
 800e4fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e502:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e50c:	8b7b      	ldrh	r3, [r7, #26]
 800e50e:	089b      	lsrs	r3, r3, #2
 800e510:	b29b      	uxth	r3, r3
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e524:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	891b      	ldrh	r3, [r3, #8]
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7f6 fbec 	bl	8004d08 <lwip_htons>
 800e530:	4603      	mov	r3, r0
 800e532:	461a      	mov	r2, r3
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	2200      	movs	r2, #0
 800e53c:	719a      	strb	r2, [r3, #6]
 800e53e:	2200      	movs	r2, #0
 800e540:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e542:	4b2a      	ldr	r3, [pc, #168]	; (800e5ec <ip4_output_if_src+0x154>)
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	4618      	mov	r0, r3
 800e548:	f7f6 fbde 	bl	8004d08 <lwip_htons>
 800e54c:	4603      	mov	r3, r0
 800e54e:	461a      	mov	r2, r3
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e554:	4b25      	ldr	r3, [pc, #148]	; (800e5ec <ip4_output_if_src+0x154>)
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	3301      	adds	r3, #1
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	4b23      	ldr	r3, [pc, #140]	; (800e5ec <ip4_output_if_src+0x154>)
 800e55e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d104      	bne.n	800e570 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e566:	4b22      	ldr	r3, [pc, #136]	; (800e5f0 <ip4_output_if_src+0x158>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	60da      	str	r2, [r3, #12]
 800e56e:	e003      	b.n	800e578 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	2200      	movs	r2, #0
 800e57c:	729a      	strb	r2, [r3, #10]
 800e57e:	2200      	movs	r2, #0
 800e580:	72da      	strb	r2, [r3, #11]
 800e582:	e00f      	b.n	800e5a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	895b      	ldrh	r3, [r3, #10]
 800e588:	2b13      	cmp	r3, #19
 800e58a:	d802      	bhi.n	800e592 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e58c:	f06f 0301 	mvn.w	r3, #1
 800e590:	e020      	b.n	800e5d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e59e:	f107 0314 	add.w	r3, r7, #20
 800e5a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00c      	beq.n	800e5c6 <ip4_output_if_src+0x12e>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	891a      	ldrh	r2, [r3, #8]
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d906      	bls.n	800e5c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f000 fd4d 	bl	800f05c <ip4_frag>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	e006      	b.n	800e5d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	68f9      	ldr	r1, [r7, #12]
 800e5ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5d0:	4798      	blx	r3
 800e5d2:	4603      	mov	r3, r0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3720      	adds	r7, #32
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	08013358 	.word	0x08013358
 800e5e0:	0801338c 	.word	0x0801338c
 800e5e4:	08013398 	.word	0x08013398
 800e5e8:	080133c0 	.word	0x080133c0
 800e5ec:	2000066a 	.word	0x2000066a
 800e5f0:	080147bc 	.word	0x080147bc

0800e5f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e608:	d002      	beq.n	800e610 <ip4_addr_isbroadcast_u32+0x1c>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d101      	bne.n	800e614 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e610:	2301      	movs	r3, #1
 800e612:	e02a      	b.n	800e66a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e622:	2300      	movs	r3, #0
 800e624:	e021      	b.n	800e66a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	3304      	adds	r3, #4
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d101      	bne.n	800e636 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e632:	2300      	movs	r3, #0
 800e634:	e019      	b.n	800e66a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	3304      	adds	r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	405a      	eors	r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4013      	ands	r3, r2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10d      	bne.n	800e668 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	3308      	adds	r3, #8
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	43da      	mvns	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	3308      	adds	r3, #8
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e660:	429a      	cmp	r2, r3
 800e662:	d101      	bne.n	800e668 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e664:	2301      	movs	r3, #1
 800e666:	e000      	b.n	800e66a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e668:	2300      	movs	r3, #0
  }
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
	...

0800e678 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e682:	4b12      	ldr	r3, [pc, #72]	; (800e6cc <ip_reass_tmr+0x54>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e688:	e018      	b.n	800e6bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	7fdb      	ldrb	r3, [r3, #31]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00b      	beq.n	800e6aa <ip_reass_tmr+0x32>
      r->timer--;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	7fdb      	ldrb	r3, [r3, #31]
 800e696:	3b01      	subs	r3, #1
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	60fb      	str	r3, [r7, #12]
 800e6a8:	e008      	b.n	800e6bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f80a 	bl	800e6d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1e3      	bne.n	800e68a <ip_reass_tmr+0x12>
    }
  }
}
 800e6c2:	bf00      	nop
 800e6c4:	bf00      	nop
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	2000066c 	.word	0x2000066c

0800e6d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d105      	bne.n	800e6f2 <ip_reass_free_complete_datagram+0x22>
 800e6e6:	4b45      	ldr	r3, [pc, #276]	; (800e7fc <ip_reass_free_complete_datagram+0x12c>)
 800e6e8:	22ab      	movs	r2, #171	; 0xab
 800e6ea:	4945      	ldr	r1, [pc, #276]	; (800e800 <ip_reass_free_complete_datagram+0x130>)
 800e6ec:	4845      	ldr	r0, [pc, #276]	; (800e804 <ip_reass_free_complete_datagram+0x134>)
 800e6ee:	f000 ff33 	bl	800f558 <iprintf>
  if (prev != NULL) {
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00a      	beq.n	800e70e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d005      	beq.n	800e70e <ip_reass_free_complete_datagram+0x3e>
 800e702:	4b3e      	ldr	r3, [pc, #248]	; (800e7fc <ip_reass_free_complete_datagram+0x12c>)
 800e704:	22ad      	movs	r2, #173	; 0xad
 800e706:	4940      	ldr	r1, [pc, #256]	; (800e808 <ip_reass_free_complete_datagram+0x138>)
 800e708:	483e      	ldr	r0, [pc, #248]	; (800e804 <ip_reass_free_complete_datagram+0x134>)
 800e70a:	f000 ff25 	bl	800f558 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	889b      	ldrh	r3, [r3, #4]
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d12a      	bne.n	800e776 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	6858      	ldr	r0, [r3, #4]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	3308      	adds	r3, #8
 800e736:	2214      	movs	r2, #20
 800e738:	4619      	mov	r1, r3
 800e73a:	f000 fedd 	bl	800f4f8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e73e:	2101      	movs	r1, #1
 800e740:	69b8      	ldr	r0, [r7, #24]
 800e742:	f7ff fc47 	bl	800dfd4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e746:	69b8      	ldr	r0, [r7, #24]
 800e748:	f7f7 fe84 	bl	8006454 <pbuf_clen>
 800e74c:	4603      	mov	r3, r0
 800e74e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e750:	8bfa      	ldrh	r2, [r7, #30]
 800e752:	8a7b      	ldrh	r3, [r7, #18]
 800e754:	4413      	add	r3, r2
 800e756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e75a:	db05      	blt.n	800e768 <ip_reass_free_complete_datagram+0x98>
 800e75c:	4b27      	ldr	r3, [pc, #156]	; (800e7fc <ip_reass_free_complete_datagram+0x12c>)
 800e75e:	22bc      	movs	r2, #188	; 0xbc
 800e760:	492a      	ldr	r1, [pc, #168]	; (800e80c <ip_reass_free_complete_datagram+0x13c>)
 800e762:	4828      	ldr	r0, [pc, #160]	; (800e804 <ip_reass_free_complete_datagram+0x134>)
 800e764:	f000 fef8 	bl	800f558 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e768:	8bfa      	ldrh	r2, [r7, #30]
 800e76a:	8a7b      	ldrh	r3, [r7, #18]
 800e76c:	4413      	add	r3, r2
 800e76e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e770:	69b8      	ldr	r0, [r7, #24]
 800e772:	f7f7 fde7 	bl	8006344 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e77c:	e01f      	b.n	800e7be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f7f7 fe60 	bl	8006454 <pbuf_clen>
 800e794:	4603      	mov	r3, r0
 800e796:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e798:	8bfa      	ldrh	r2, [r7, #30]
 800e79a:	8a7b      	ldrh	r3, [r7, #18]
 800e79c:	4413      	add	r3, r2
 800e79e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7a2:	db05      	blt.n	800e7b0 <ip_reass_free_complete_datagram+0xe0>
 800e7a4:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <ip_reass_free_complete_datagram+0x12c>)
 800e7a6:	22cc      	movs	r2, #204	; 0xcc
 800e7a8:	4918      	ldr	r1, [pc, #96]	; (800e80c <ip_reass_free_complete_datagram+0x13c>)
 800e7aa:	4816      	ldr	r0, [pc, #88]	; (800e804 <ip_reass_free_complete_datagram+0x134>)
 800e7ac:	f000 fed4 	bl	800f558 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e7b0:	8bfa      	ldrh	r2, [r7, #30]
 800e7b2:	8a7b      	ldrh	r3, [r7, #18]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7f7 fdc3 	bl	8006344 <pbuf_free>
  while (p != NULL) {
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1dc      	bne.n	800e77e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e7c4:	6839      	ldr	r1, [r7, #0]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f8c2 	bl	800e950 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e7cc:	4b10      	ldr	r3, [pc, #64]	; (800e810 <ip_reass_free_complete_datagram+0x140>)
 800e7ce:	881b      	ldrh	r3, [r3, #0]
 800e7d0:	8bfa      	ldrh	r2, [r7, #30]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d905      	bls.n	800e7e2 <ip_reass_free_complete_datagram+0x112>
 800e7d6:	4b09      	ldr	r3, [pc, #36]	; (800e7fc <ip_reass_free_complete_datagram+0x12c>)
 800e7d8:	22d2      	movs	r2, #210	; 0xd2
 800e7da:	490e      	ldr	r1, [pc, #56]	; (800e814 <ip_reass_free_complete_datagram+0x144>)
 800e7dc:	4809      	ldr	r0, [pc, #36]	; (800e804 <ip_reass_free_complete_datagram+0x134>)
 800e7de:	f000 febb 	bl	800f558 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e7e2:	4b0b      	ldr	r3, [pc, #44]	; (800e810 <ip_reass_free_complete_datagram+0x140>)
 800e7e4:	881a      	ldrh	r2, [r3, #0]
 800e7e6:	8bfb      	ldrh	r3, [r7, #30]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	4b08      	ldr	r3, [pc, #32]	; (800e810 <ip_reass_free_complete_datagram+0x140>)
 800e7ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e7f0:	8bfb      	ldrh	r3, [r7, #30]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3720      	adds	r7, #32
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	080133f0 	.word	0x080133f0
 800e800:	0801342c 	.word	0x0801342c
 800e804:	08013438 	.word	0x08013438
 800e808:	08013460 	.word	0x08013460
 800e80c:	08013474 	.word	0x08013474
 800e810:	20000670 	.word	0x20000670
 800e814:	08013494 	.word	0x08013494

0800e818 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b08a      	sub	sp, #40	; 0x28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e822:	2300      	movs	r3, #0
 800e824:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e826:	2300      	movs	r3, #0
 800e828:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e82a:	2300      	movs	r3, #0
 800e82c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e836:	4b28      	ldr	r3, [pc, #160]	; (800e8d8 <ip_reass_remove_oldest_datagram+0xc0>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e83c:	e030      	b.n	800e8a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	695a      	ldr	r2, [r3, #20]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	429a      	cmp	r2, r3
 800e848:	d10c      	bne.n	800e864 <ip_reass_remove_oldest_datagram+0x4c>
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	699a      	ldr	r2, [r3, #24]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	429a      	cmp	r2, r3
 800e854:	d106      	bne.n	800e864 <ip_reass_remove_oldest_datagram+0x4c>
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	899a      	ldrh	r2, [r3, #12]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	889b      	ldrh	r3, [r3, #4]
 800e85e:	b29b      	uxth	r3, r3
 800e860:	429a      	cmp	r2, r3
 800e862:	d014      	beq.n	800e88e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	3301      	adds	r3, #1
 800e868:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d104      	bne.n	800e87a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	61bb      	str	r3, [r7, #24]
 800e878:	e009      	b.n	800e88e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	7fda      	ldrb	r2, [r3, #31]
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	7fdb      	ldrb	r3, [r3, #31]
 800e882:	429a      	cmp	r2, r3
 800e884:	d803      	bhi.n	800e88e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d1cb      	bne.n	800e83e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d008      	beq.n	800e8be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e8ac:	69b9      	ldr	r1, [r7, #24]
 800e8ae:	6a38      	ldr	r0, [r7, #32]
 800e8b0:	f7ff ff0e 	bl	800e6d0 <ip_reass_free_complete_datagram>
 800e8b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e8be:	697a      	ldr	r2, [r7, #20]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	da02      	bge.n	800e8cc <ip_reass_remove_oldest_datagram+0xb4>
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	dcac      	bgt.n	800e826 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e8cc:	697b      	ldr	r3, [r7, #20]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3728      	adds	r7, #40	; 0x28
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	2000066c 	.word	0x2000066c

0800e8dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e8e6:	2004      	movs	r0, #4
 800e8e8:	f7f6 fece 	bl	8005688 <memp_malloc>
 800e8ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d110      	bne.n	800e916 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e8f4:	6839      	ldr	r1, [r7, #0]
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff ff8e 	bl	800e818 <ip_reass_remove_oldest_datagram>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	4293      	cmp	r3, r2
 800e902:	dc03      	bgt.n	800e90c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e904:	2004      	movs	r0, #4
 800e906:	f7f6 febf 	bl	8005688 <memp_malloc>
 800e90a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d101      	bne.n	800e916 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e912:	2300      	movs	r3, #0
 800e914:	e016      	b.n	800e944 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e916:	2220      	movs	r2, #32
 800e918:	2100      	movs	r1, #0
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f000 fe14 	bl	800f548 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	220f      	movs	r2, #15
 800e924:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e926:	4b09      	ldr	r3, [pc, #36]	; (800e94c <ip_reass_enqueue_new_datagram+0x70>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e92e:	4a07      	ldr	r2, [pc, #28]	; (800e94c <ip_reass_enqueue_new_datagram+0x70>)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	3308      	adds	r3, #8
 800e938:	2214      	movs	r2, #20
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 fddb 	bl	800f4f8 <memcpy>
  return ipr;
 800e942:	68fb      	ldr	r3, [r7, #12]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	2000066c 	.word	0x2000066c

0800e950 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e95a:	4b10      	ldr	r3, [pc, #64]	; (800e99c <ip_reass_dequeue_datagram+0x4c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	429a      	cmp	r2, r3
 800e962:	d104      	bne.n	800e96e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a0c      	ldr	r2, [pc, #48]	; (800e99c <ip_reass_dequeue_datagram+0x4c>)
 800e96a:	6013      	str	r3, [r2, #0]
 800e96c:	e00d      	b.n	800e98a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d106      	bne.n	800e982 <ip_reass_dequeue_datagram+0x32>
 800e974:	4b0a      	ldr	r3, [pc, #40]	; (800e9a0 <ip_reass_dequeue_datagram+0x50>)
 800e976:	f240 1245 	movw	r2, #325	; 0x145
 800e97a:	490a      	ldr	r1, [pc, #40]	; (800e9a4 <ip_reass_dequeue_datagram+0x54>)
 800e97c:	480a      	ldr	r0, [pc, #40]	; (800e9a8 <ip_reass_dequeue_datagram+0x58>)
 800e97e:	f000 fdeb 	bl	800f558 <iprintf>
    prev->next = ipr->next;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e98a:	6879      	ldr	r1, [r7, #4]
 800e98c:	2004      	movs	r0, #4
 800e98e:	f7f6 fec7 	bl	8005720 <memp_free>
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	2000066c 	.word	0x2000066c
 800e9a0:	080133f0 	.word	0x080133f0
 800e9a4:	080134b8 	.word	0x080134b8
 800e9a8:	08013438 	.word	0x08013438

0800e9ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08c      	sub	sp, #48	; 0x30
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	885b      	ldrh	r3, [r3, #2]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f6 f99b 	bl	8004d08 <lwip_htons>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	f003 030f 	and.w	r3, r3, #15
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e9e4:	7e7b      	ldrb	r3, [r7, #25]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	8b7a      	ldrh	r2, [r7, #26]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d202      	bcs.n	800e9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9f2:	e135      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e9f4:	7e7b      	ldrb	r3, [r7, #25]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	8b7a      	ldrh	r2, [r7, #26]
 800e9fa:	1ad3      	subs	r3, r2, r3
 800e9fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	88db      	ldrh	r3, [r3, #6]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f6 f97f 	bl	8004d08 <lwip_htons>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	2200      	movs	r2, #0
 800ea20:	701a      	strb	r2, [r3, #0]
 800ea22:	2200      	movs	r2, #0
 800ea24:	705a      	strb	r2, [r3, #1]
 800ea26:	2200      	movs	r2, #0
 800ea28:	709a      	strb	r2, [r3, #2]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea30:	8afa      	ldrh	r2, [r7, #22]
 800ea32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ea34:	8afa      	ldrh	r2, [r7, #22]
 800ea36:	8b7b      	ldrh	r3, [r7, #26]
 800ea38:	4413      	add	r3, r2
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	88db      	ldrh	r3, [r3, #6]
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	8afa      	ldrh	r2, [r7, #22]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d902      	bls.n	800ea52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea50:	e106      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24
 800ea58:	e068      	b.n	800eb2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ea60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea62:	889b      	ldrh	r3, [r3, #4]
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	889b      	ldrh	r3, [r3, #4]
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d235      	bcs.n	800eadc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ea70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d020      	beq.n	800eabe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	889b      	ldrh	r3, [r3, #4]
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea84:	88db      	ldrh	r3, [r3, #6]
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d307      	bcc.n	800ea9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ea8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8e:	88db      	ldrh	r3, [r3, #6]
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	889b      	ldrh	r3, [r3, #4]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d902      	bls.n	800eaa2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa0:	e0de      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800eaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaaa:	88db      	ldrh	r3, [r3, #6]
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab0:	889b      	ldrh	r3, [r3, #4]
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d03d      	beq.n	800eb34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800eabc:	e03a      	b.n	800eb34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	88db      	ldrh	r3, [r3, #6]
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	889b      	ldrh	r3, [r3, #4]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d902      	bls.n	800ead4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ead2:	e0c5      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	605a      	str	r2, [r3, #4]
      break;
 800eada:	e02b      	b.n	800eb34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800eadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eade:	889b      	ldrh	r3, [r3, #4]
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	889b      	ldrh	r3, [r3, #4]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d102      	bne.n	800eaf2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eaec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaf0:	e0b6      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800eaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf4:	889b      	ldrh	r3, [r3, #4]
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	88db      	ldrh	r3, [r3, #6]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d202      	bcs.n	800eb08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eb02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb06:	e0ab      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d009      	beq.n	800eb22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	88db      	ldrh	r3, [r3, #6]
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	889b      	ldrh	r3, [r3, #4]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d001      	beq.n	800eb22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d193      	bne.n	800ea5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800eb32:	e000      	b.n	800eb36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800eb34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d12d      	bne.n	800eb98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800eb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d01c      	beq.n	800eb7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800eb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb44:	88db      	ldrh	r3, [r3, #6]
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4a:	889b      	ldrh	r3, [r3, #4]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d906      	bls.n	800eb60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800eb52:	4b45      	ldr	r3, [pc, #276]	; (800ec68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb54:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800eb58:	4944      	ldr	r1, [pc, #272]	; (800ec6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800eb5a:	4845      	ldr	r0, [pc, #276]	; (800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb5c:	f000 fcfc 	bl	800f558 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800eb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb68:	88db      	ldrh	r3, [r3, #6]
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	889b      	ldrh	r3, [r3, #4]
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d010      	beq.n	800eb98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	623b      	str	r3, [r7, #32]
 800eb7a:	e00d      	b.n	800eb98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d006      	beq.n	800eb92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800eb84:	4b38      	ldr	r3, [pc, #224]	; (800ec68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eb86:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800eb8a:	493a      	ldr	r1, [pc, #232]	; (800ec74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800eb8c:	4838      	ldr	r0, [pc, #224]	; (800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eb8e:	f000 fce3 	bl	800f558 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d105      	bne.n	800ebaa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	7f9b      	ldrb	r3, [r3, #30]
 800eba2:	f003 0301 	and.w	r3, r3, #1
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d059      	beq.n	800ec5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ebaa:	6a3b      	ldr	r3, [r7, #32]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d04f      	beq.n	800ec50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d006      	beq.n	800ebc6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	889b      	ldrh	r3, [r3, #4]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d002      	beq.n	800ebcc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	623b      	str	r3, [r7, #32]
 800ebca:	e041      	b.n	800ec50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ebd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ebd6:	e012      	b.n	800ebfe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	88db      	ldrh	r3, [r3, #6]
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	889b      	ldrh	r3, [r3, #4]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d002      	beq.n	800ebf4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	623b      	str	r3, [r7, #32]
            break;
 800ebf2:	e007      	b.n	800ec04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ebf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1e9      	bne.n	800ebd8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d022      	beq.n	800ec50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ec12:	4b15      	ldr	r3, [pc, #84]	; (800ec68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec14:	f240 12df 	movw	r2, #479	; 0x1df
 800ec18:	4917      	ldr	r1, [pc, #92]	; (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ec1a:	4815      	ldr	r0, [pc, #84]	; (800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec1c:	f000 fc9c 	bl	800f558 <iprintf>
          LWIP_ASSERT("sanity check",
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d106      	bne.n	800ec3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ec2c:	4b0e      	ldr	r3, [pc, #56]	; (800ec68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ec32:	4911      	ldr	r1, [pc, #68]	; (800ec78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ec34:	480e      	ldr	r0, [pc, #56]	; (800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec36:	f000 fc8f 	bl	800f558 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d006      	beq.n	800ec50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ec42:	4b09      	ldr	r3, [pc, #36]	; (800ec68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ec44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ec48:	490c      	ldr	r1, [pc, #48]	; (800ec7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ec4a:	4809      	ldr	r0, [pc, #36]	; (800ec70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ec4c:	f000 fc84 	bl	800f558 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ec50:	6a3b      	ldr	r3, [r7, #32]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	bf14      	ite	ne
 800ec56:	2301      	movne	r3, #1
 800ec58:	2300      	moveq	r3, #0
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	e000      	b.n	800ec60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3730      	adds	r7, #48	; 0x30
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	080133f0 	.word	0x080133f0
 800ec6c:	080134d4 	.word	0x080134d4
 800ec70:	08013438 	.word	0x08013438
 800ec74:	080134f4 	.word	0x080134f4
 800ec78:	0801352c 	.word	0x0801352c
 800ec7c:	0801353c 	.word	0x0801353c

0800ec80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08e      	sub	sp, #56	; 0x38
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	f003 030f 	and.w	r3, r3, #15
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	2b14      	cmp	r3, #20
 800ec9e:	f040 8167 	bne.w	800ef70 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800eca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca4:	88db      	ldrh	r3, [r3, #6]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7f6 f82d 	bl	8004d08 <lwip_htons>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ecba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbc:	885b      	ldrh	r3, [r3, #2]
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7f6 f821 	bl	8004d08 <lwip_htons>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	f003 030f 	and.w	r3, r3, #15
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ecda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ece2:	429a      	cmp	r2, r3
 800ece4:	f0c0 8146 	bcc.w	800ef74 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ece8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7f7 fbad 	bl	8006454 <pbuf_clen>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ecfe:	4b9f      	ldr	r3, [pc, #636]	; (800ef7c <ip4_reass+0x2fc>)
 800ed00:	881b      	ldrh	r3, [r3, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	8c3b      	ldrh	r3, [r7, #32]
 800ed06:	4413      	add	r3, r2
 800ed08:	2b0a      	cmp	r3, #10
 800ed0a:	dd10      	ble.n	800ed2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ed0c:	8c3b      	ldrh	r3, [r7, #32]
 800ed0e:	4619      	mov	r1, r3
 800ed10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed12:	f7ff fd81 	bl	800e818 <ip_reass_remove_oldest_datagram>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 812d 	beq.w	800ef78 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ed1e:	4b97      	ldr	r3, [pc, #604]	; (800ef7c <ip4_reass+0x2fc>)
 800ed20:	881b      	ldrh	r3, [r3, #0]
 800ed22:	461a      	mov	r2, r3
 800ed24:	8c3b      	ldrh	r3, [r7, #32]
 800ed26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ed28:	2b0a      	cmp	r3, #10
 800ed2a:	f300 8125 	bgt.w	800ef78 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ed2e:	4b94      	ldr	r3, [pc, #592]	; (800ef80 <ip4_reass+0x300>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	633b      	str	r3, [r7, #48]	; 0x30
 800ed34:	e015      	b.n	800ed62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	695a      	ldr	r2, [r3, #20]
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d10c      	bne.n	800ed5c <ip4_reass+0xdc>
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	699a      	ldr	r2, [r3, #24]
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	691b      	ldr	r3, [r3, #16]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d106      	bne.n	800ed5c <ip4_reass+0xdc>
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed50:	899a      	ldrh	r2, [r3, #12]
 800ed52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed54:	889b      	ldrh	r3, [r3, #4]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d006      	beq.n	800ed6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ed5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	633b      	str	r3, [r7, #48]	; 0x30
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1e6      	bne.n	800ed36 <ip4_reass+0xb6>
 800ed68:	e000      	b.n	800ed6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ed6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d109      	bne.n	800ed86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ed72:	8c3b      	ldrh	r3, [r7, #32]
 800ed74:	4619      	mov	r1, r3
 800ed76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed78:	f7ff fdb0 	bl	800e8dc <ip_reass_enqueue_new_datagram>
 800ed7c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d11c      	bne.n	800edbe <ip4_reass+0x13e>
      goto nullreturn;
 800ed84:	e109      	b.n	800ef9a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ed86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed88:	88db      	ldrh	r3, [r3, #6]
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7f5 ffbb 	bl	8004d08 <lwip_htons>
 800ed92:	4603      	mov	r3, r0
 800ed94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d110      	bne.n	800edbe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ed9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9e:	89db      	ldrh	r3, [r3, #14]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7f5 ffb1 	bl	8004d08 <lwip_htons>
 800eda6:	4603      	mov	r3, r0
 800eda8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800edac:	2b00      	cmp	r3, #0
 800edae:	d006      	beq.n	800edbe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	3308      	adds	r3, #8
 800edb4:	2214      	movs	r2, #20
 800edb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 fb9d 	bl	800f4f8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	88db      	ldrh	r3, [r3, #6]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	f003 0320 	and.w	r3, r3, #32
 800edc8:	2b00      	cmp	r3, #0
 800edca:	bf0c      	ite	eq
 800edcc:	2301      	moveq	r3, #1
 800edce:	2300      	movne	r3, #0
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d00e      	beq.n	800edf8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800edda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edde:	4413      	add	r3, r2
 800ede0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ede2:	8b7a      	ldrh	r2, [r7, #26]
 800ede4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ede6:	429a      	cmp	r2, r3
 800ede8:	f0c0 80a0 	bcc.w	800ef2c <ip4_reass+0x2ac>
 800edec:	8b7b      	ldrh	r3, [r7, #26]
 800edee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800edf2:	4293      	cmp	r3, r2
 800edf4:	f200 809a 	bhi.w	800ef2c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800edf8:	69fa      	ldr	r2, [r7, #28]
 800edfa:	6879      	ldr	r1, [r7, #4]
 800edfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfe:	f7ff fdd5 	bl	800e9ac <ip_reass_chain_frag_into_datagram_and_validate>
 800ee02:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee0a:	f000 8091 	beq.w	800ef30 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ee0e:	4b5b      	ldr	r3, [pc, #364]	; (800ef7c <ip4_reass+0x2fc>)
 800ee10:	881a      	ldrh	r2, [r3, #0]
 800ee12:	8c3b      	ldrh	r3, [r7, #32]
 800ee14:	4413      	add	r3, r2
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	4b58      	ldr	r3, [pc, #352]	; (800ef7c <ip4_reass+0x2fc>)
 800ee1a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d00d      	beq.n	800ee3e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ee22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ee24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee26:	4413      	add	r3, r2
 800ee28:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2c:	8a7a      	ldrh	r2, [r7, #18]
 800ee2e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	7f9b      	ldrb	r3, [r3, #30]
 800ee34:	f043 0301 	orr.w	r3, r3, #1
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d171      	bne.n	800ef28 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ee44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee46:	8b9b      	ldrh	r3, [r3, #28]
 800ee48:	3314      	adds	r3, #20
 800ee4a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	3308      	adds	r3, #8
 800ee62:	2214      	movs	r2, #20
 800ee64:	4619      	mov	r1, r3
 800ee66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee68:	f000 fb46 	bl	800f4f8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ee6c:	8a3b      	ldrh	r3, [r7, #16]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7f5 ff4a 	bl	8004d08 <lwip_htons>
 800ee74:	4603      	mov	r3, r0
 800ee76:	461a      	mov	r2, r3
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	2200      	movs	r2, #0
 800ee80:	719a      	strb	r2, [r3, #6]
 800ee82:	2200      	movs	r2, #0
 800ee84:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ee86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee88:	2200      	movs	r2, #0
 800ee8a:	729a      	strb	r2, [r3, #10]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ee90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ee96:	e00d      	b.n	800eeb4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ee98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ee9e:	2114      	movs	r1, #20
 800eea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eea2:	f7f7 f9c9 	bl	8006238 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7f7 fb0d 	bl	80064c8 <pbuf_cat>
      r = iprh->next_pbuf;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1ee      	bne.n	800ee98 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eeba:	4b31      	ldr	r3, [pc, #196]	; (800ef80 <ip4_reass+0x300>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d102      	bne.n	800eeca <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eec4:	2300      	movs	r3, #0
 800eec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eec8:	e010      	b.n	800eeec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eeca:	4b2d      	ldr	r3, [pc, #180]	; (800ef80 <ip4_reass+0x300>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eed0:	e007      	b.n	800eee2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d006      	beq.n	800eeea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1f4      	bne.n	800eed2 <ip4_reass+0x252>
 800eee8:	e000      	b.n	800eeec <ip4_reass+0x26c>
          break;
 800eeea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eeec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eeee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eef0:	f7ff fd2e 	bl	800e950 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7f7 faad 	bl	8006454 <pbuf_clen>
 800eefa:	4603      	mov	r3, r0
 800eefc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eefe:	4b1f      	ldr	r3, [pc, #124]	; (800ef7c <ip4_reass+0x2fc>)
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	8c3a      	ldrh	r2, [r7, #32]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d906      	bls.n	800ef16 <ip4_reass+0x296>
 800ef08:	4b1e      	ldr	r3, [pc, #120]	; (800ef84 <ip4_reass+0x304>)
 800ef0a:	f240 229b 	movw	r2, #667	; 0x29b
 800ef0e:	491e      	ldr	r1, [pc, #120]	; (800ef88 <ip4_reass+0x308>)
 800ef10:	481e      	ldr	r0, [pc, #120]	; (800ef8c <ip4_reass+0x30c>)
 800ef12:	f000 fb21 	bl	800f558 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ef16:	4b19      	ldr	r3, [pc, #100]	; (800ef7c <ip4_reass+0x2fc>)
 800ef18:	881a      	ldrh	r2, [r3, #0]
 800ef1a:	8c3b      	ldrh	r3, [r7, #32]
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	4b16      	ldr	r3, [pc, #88]	; (800ef7c <ip4_reass+0x2fc>)
 800ef22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	e03c      	b.n	800efa2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	e03a      	b.n	800efa2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800ef2c:	bf00      	nop
 800ef2e:	e000      	b.n	800ef32 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800ef30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d106      	bne.n	800ef46 <ip4_reass+0x2c6>
 800ef38:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <ip4_reass+0x304>)
 800ef3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ef3e:	4914      	ldr	r1, [pc, #80]	; (800ef90 <ip4_reass+0x310>)
 800ef40:	4812      	ldr	r0, [pc, #72]	; (800ef8c <ip4_reass+0x30c>)
 800ef42:	f000 fb09 	bl	800f558 <iprintf>
  if (ipr->p == NULL) {
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d124      	bne.n	800ef98 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ef4e:	4b0c      	ldr	r3, [pc, #48]	; (800ef80 <ip4_reass+0x300>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d006      	beq.n	800ef66 <ip4_reass+0x2e6>
 800ef58:	4b0a      	ldr	r3, [pc, #40]	; (800ef84 <ip4_reass+0x304>)
 800ef5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ef5e:	490d      	ldr	r1, [pc, #52]	; (800ef94 <ip4_reass+0x314>)
 800ef60:	480a      	ldr	r0, [pc, #40]	; (800ef8c <ip4_reass+0x30c>)
 800ef62:	f000 faf9 	bl	800f558 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ef66:	2100      	movs	r1, #0
 800ef68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef6a:	f7ff fcf1 	bl	800e950 <ip_reass_dequeue_datagram>
 800ef6e:	e014      	b.n	800ef9a <ip4_reass+0x31a>
    goto nullreturn;
 800ef70:	bf00      	nop
 800ef72:	e012      	b.n	800ef9a <ip4_reass+0x31a>
    goto nullreturn;
 800ef74:	bf00      	nop
 800ef76:	e010      	b.n	800ef9a <ip4_reass+0x31a>
      goto nullreturn;
 800ef78:	bf00      	nop
 800ef7a:	e00e      	b.n	800ef9a <ip4_reass+0x31a>
 800ef7c:	20000670 	.word	0x20000670
 800ef80:	2000066c 	.word	0x2000066c
 800ef84:	080133f0 	.word	0x080133f0
 800ef88:	08013560 	.word	0x08013560
 800ef8c:	08013438 	.word	0x08013438
 800ef90:	0801357c 	.word	0x0801357c
 800ef94:	08013588 	.word	0x08013588
  }

nullreturn:
 800ef98:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7f7 f9d2 	bl	8006344 <pbuf_free>
  return NULL;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3738      	adds	r7, #56	; 0x38
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop

0800efac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800efb0:	2005      	movs	r0, #5
 800efb2:	f7f6 fb69 	bl	8005688 <memp_malloc>
 800efb6:	4603      	mov	r3, r0
}
 800efb8:	4618      	mov	r0, r3
 800efba:	bd80      	pop	{r7, pc}

0800efbc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d106      	bne.n	800efd8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800efca:	4b07      	ldr	r3, [pc, #28]	; (800efe8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800efcc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800efd0:	4906      	ldr	r1, [pc, #24]	; (800efec <ip_frag_free_pbuf_custom_ref+0x30>)
 800efd2:	4807      	ldr	r0, [pc, #28]	; (800eff0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800efd4:	f000 fac0 	bl	800f558 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800efd8:	6879      	ldr	r1, [r7, #4]
 800efda:	2005      	movs	r0, #5
 800efdc:	f7f6 fba0 	bl	8005720 <memp_free>
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	080133f0 	.word	0x080133f0
 800efec:	080135a8 	.word	0x080135a8
 800eff0:	08013438 	.word	0x08013438

0800eff4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d106      	bne.n	800f014 <ipfrag_free_pbuf_custom+0x20>
 800f006:	4b11      	ldr	r3, [pc, #68]	; (800f04c <ipfrag_free_pbuf_custom+0x58>)
 800f008:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f00c:	4910      	ldr	r1, [pc, #64]	; (800f050 <ipfrag_free_pbuf_custom+0x5c>)
 800f00e:	4811      	ldr	r0, [pc, #68]	; (800f054 <ipfrag_free_pbuf_custom+0x60>)
 800f010:	f000 faa2 	bl	800f558 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d006      	beq.n	800f02a <ipfrag_free_pbuf_custom+0x36>
 800f01c:	4b0b      	ldr	r3, [pc, #44]	; (800f04c <ipfrag_free_pbuf_custom+0x58>)
 800f01e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f022:	490d      	ldr	r1, [pc, #52]	; (800f058 <ipfrag_free_pbuf_custom+0x64>)
 800f024:	480b      	ldr	r0, [pc, #44]	; (800f054 <ipfrag_free_pbuf_custom+0x60>)
 800f026:	f000 fa97 	bl	800f558 <iprintf>
  if (pcr->original != NULL) {
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	695b      	ldr	r3, [r3, #20]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d004      	beq.n	800f03c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	695b      	ldr	r3, [r3, #20]
 800f036:	4618      	mov	r0, r3
 800f038:	f7f7 f984 	bl	8006344 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f03c:	68f8      	ldr	r0, [r7, #12]
 800f03e:	f7ff ffbd 	bl	800efbc <ip_frag_free_pbuf_custom_ref>
}
 800f042:	bf00      	nop
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	080133f0 	.word	0x080133f0
 800f050:	080135b4 	.word	0x080135b4
 800f054:	08013438 	.word	0x08013438
 800f058:	080135c0 	.word	0x080135c0

0800f05c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b094      	sub	sp, #80	; 0x50
 800f060:	af02      	add	r7, sp, #8
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f068:	2300      	movs	r3, #0
 800f06a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f072:	3b14      	subs	r3, #20
 800f074:	2b00      	cmp	r3, #0
 800f076:	da00      	bge.n	800f07a <ip4_frag+0x1e>
 800f078:	3307      	adds	r3, #7
 800f07a:	10db      	asrs	r3, r3, #3
 800f07c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f07e:	2314      	movs	r3, #20
 800f080:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 030f 	and.w	r3, r3, #15
 800f094:	b2db      	uxtb	r3, r3
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b14      	cmp	r3, #20
 800f09c:	d002      	beq.n	800f0a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f09e:	f06f 0305 	mvn.w	r3, #5
 800f0a2:	e110      	b.n	800f2c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	895b      	ldrh	r3, [r3, #10]
 800f0a8:	2b13      	cmp	r3, #19
 800f0aa:	d809      	bhi.n	800f0c0 <ip4_frag+0x64>
 800f0ac:	4b88      	ldr	r3, [pc, #544]	; (800f2d0 <ip4_frag+0x274>)
 800f0ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f0b2:	4988      	ldr	r1, [pc, #544]	; (800f2d4 <ip4_frag+0x278>)
 800f0b4:	4888      	ldr	r0, [pc, #544]	; (800f2d8 <ip4_frag+0x27c>)
 800f0b6:	f000 fa4f 	bl	800f558 <iprintf>
 800f0ba:	f06f 0305 	mvn.w	r3, #5
 800f0be:	e102      	b.n	800f2c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c2:	88db      	ldrh	r3, [r3, #6]
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7f5 fe1e 	bl	8004d08 <lwip_htons>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f0d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f0da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f0e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	891b      	ldrh	r3, [r3, #8]
 800f0e6:	3b14      	subs	r3, #20
 800f0e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f0ec:	e0e1      	b.n	800f2b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f0ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	bf28      	it	cs
 800f0fc:	4613      	movcs	r3, r2
 800f0fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f100:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f104:	2114      	movs	r1, #20
 800f106:	200e      	movs	r0, #14
 800f108:	f7f6 fe38 	bl	8005d7c <pbuf_alloc>
 800f10c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 80d5 	beq.w	800f2c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	895b      	ldrh	r3, [r3, #10]
 800f11a:	2b13      	cmp	r3, #19
 800f11c:	d806      	bhi.n	800f12c <ip4_frag+0xd0>
 800f11e:	4b6c      	ldr	r3, [pc, #432]	; (800f2d0 <ip4_frag+0x274>)
 800f120:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f124:	496d      	ldr	r1, [pc, #436]	; (800f2dc <ip4_frag+0x280>)
 800f126:	486c      	ldr	r0, [pc, #432]	; (800f2d8 <ip4_frag+0x27c>)
 800f128:	f000 fa16 	bl	800f558 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	2214      	movs	r2, #20
 800f132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f134:	4618      	mov	r0, r3
 800f136:	f000 f9df 	bl	800f4f8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f140:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f142:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f146:	e064      	b.n	800f212 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	895a      	ldrh	r2, [r3, #10]
 800f14c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	895b      	ldrh	r3, [r3, #10]
 800f156:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f158:	429a      	cmp	r2, r3
 800f15a:	d906      	bls.n	800f16a <ip4_frag+0x10e>
 800f15c:	4b5c      	ldr	r3, [pc, #368]	; (800f2d0 <ip4_frag+0x274>)
 800f15e:	f240 322d 	movw	r2, #813	; 0x32d
 800f162:	495f      	ldr	r1, [pc, #380]	; (800f2e0 <ip4_frag+0x284>)
 800f164:	485c      	ldr	r0, [pc, #368]	; (800f2d8 <ip4_frag+0x27c>)
 800f166:	f000 f9f7 	bl	800f558 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f16a:	8bfa      	ldrh	r2, [r7, #30]
 800f16c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f170:	4293      	cmp	r3, r2
 800f172:	bf28      	it	cs
 800f174:	4613      	movcs	r3, r2
 800f176:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f17a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d105      	bne.n	800f18e <ip4_frag+0x132>
        poff = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	60fb      	str	r3, [r7, #12]
        continue;
 800f18c:	e041      	b.n	800f212 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f18e:	f7ff ff0d 	bl	800efac <ip_frag_alloc_pbuf_custom_ref>
 800f192:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f194:	69bb      	ldr	r3, [r7, #24]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d103      	bne.n	800f1a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f19c:	f7f7 f8d2 	bl	8006344 <pbuf_free>
        goto memerr;
 800f1a0:	e08f      	b.n	800f2c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f1a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f1a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f1aa:	4413      	add	r3, r2
 800f1ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f1b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f1b4:	9201      	str	r2, [sp, #4]
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2241      	movs	r2, #65	; 0x41
 800f1bc:	2000      	movs	r0, #0
 800f1be:	f7f6 ff07 	bl	8005fd0 <pbuf_alloced_custom>
 800f1c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f1ca:	69b8      	ldr	r0, [r7, #24]
 800f1cc:	f7ff fef6 	bl	800efbc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f1d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1d2:	f7f7 f8b7 	bl	8006344 <pbuf_free>
        goto memerr;
 800f1d6:	e074      	b.n	800f2c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f7f7 f953 	bl	8006484 <pbuf_ref>
      pcr->original = p;
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	4a3f      	ldr	r2, [pc, #252]	; (800f2e4 <ip4_frag+0x288>)
 800f1e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f1ea:	6979      	ldr	r1, [r7, #20]
 800f1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1ee:	f7f7 f96b 	bl	80064c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f1f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f1f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f200:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f204:	2b00      	cmp	r3, #0
 800f206:	d004      	beq.n	800f212 <ip4_frag+0x1b6>
        poff = 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f212:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f216:	2b00      	cmp	r3, #0
 800f218:	d196      	bne.n	800f148 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f21a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f21c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f220:	4413      	add	r3, r2
 800f222:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f228:	f1a3 0213 	sub.w	r2, r3, #19
 800f22c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f230:	429a      	cmp	r2, r3
 800f232:	bfcc      	ite	gt
 800f234:	2301      	movgt	r3, #1
 800f236:	2300      	movle	r3, #0
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f23c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f244:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <ip4_frag+0x1f6>
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d003      	beq.n	800f25a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f252:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f258:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f25a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f5 fd53 	bl	8004d08 <lwip_htons>
 800f262:	4603      	mov	r3, r0
 800f264:	461a      	mov	r2, r3
 800f266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f268:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f26a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f26c:	3314      	adds	r3, #20
 800f26e:	b29b      	uxth	r3, r3
 800f270:	4618      	mov	r0, r3
 800f272:	f7f5 fd49 	bl	8004d08 <lwip_htons>
 800f276:	4603      	mov	r3, r0
 800f278:	461a      	mov	r2, r3
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	2200      	movs	r2, #0
 800f282:	729a      	strb	r2, [r3, #10]
 800f284:	2200      	movs	r2, #0
 800f286:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	695b      	ldr	r3, [r3, #20]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f290:	68b8      	ldr	r0, [r7, #8]
 800f292:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f296:	f7f7 f855 	bl	8006344 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f29a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f29e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f2a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f2aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f2ac:	4413      	add	r3, r2
 800f2ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f2b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	f47f af19 	bne.w	800f0ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e002      	b.n	800f2c6 <ip4_frag+0x26a>
      goto memerr;
 800f2c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f2c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3748      	adds	r7, #72	; 0x48
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	080133f0 	.word	0x080133f0
 800f2d4:	080135cc 	.word	0x080135cc
 800f2d8:	08013438 	.word	0x08013438
 800f2dc:	080135e8 	.word	0x080135e8
 800f2e0:	08013608 	.word	0x08013608
 800f2e4:	0800eff5 	.word	0x0800eff5

0800f2e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f2f2:	230e      	movs	r3, #14
 800f2f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	895b      	ldrh	r3, [r3, #10]
 800f2fa:	2b0e      	cmp	r3, #14
 800f2fc:	d96e      	bls.n	800f3dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	7bdb      	ldrb	r3, [r3, #15]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d106      	bne.n	800f314 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f30c:	3301      	adds	r3, #1
 800f30e:	b2da      	uxtb	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	7b1a      	ldrb	r2, [r3, #12]
 800f31e:	7b5b      	ldrb	r3, [r3, #13]
 800f320:	021b      	lsls	r3, r3, #8
 800f322:	4313      	orrs	r3, r2
 800f324:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d023      	beq.n	800f37a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	2b01      	cmp	r3, #1
 800f338:	d10f      	bne.n	800f35a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	785b      	ldrb	r3, [r3, #1]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d11b      	bne.n	800f37a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f346:	2b5e      	cmp	r3, #94	; 0x5e
 800f348:	d117      	bne.n	800f37a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	7b5b      	ldrb	r3, [r3, #13]
 800f34e:	f043 0310 	orr.w	r3, r3, #16
 800f352:	b2da      	uxtb	r2, r3
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	735a      	strb	r2, [r3, #13]
 800f358:	e00f      	b.n	800f37a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	2206      	movs	r2, #6
 800f35e:	4928      	ldr	r1, [pc, #160]	; (800f400 <ethernet_input+0x118>)
 800f360:	4618      	mov	r0, r3
 800f362:	f000 f8bb 	bl	800f4dc <memcmp>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d106      	bne.n	800f37a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	7b5b      	ldrb	r3, [r3, #13]
 800f370:	f043 0308 	orr.w	r3, r3, #8
 800f374:	b2da      	uxtb	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f37a:	89fb      	ldrh	r3, [r7, #14]
 800f37c:	2b08      	cmp	r3, #8
 800f37e:	d003      	beq.n	800f388 <ethernet_input+0xa0>
 800f380:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f384:	d014      	beq.n	800f3b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f386:	e032      	b.n	800f3ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f38e:	f003 0308 	and.w	r3, r3, #8
 800f392:	2b00      	cmp	r3, #0
 800f394:	d024      	beq.n	800f3e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f396:	8afb      	ldrh	r3, [r7, #22]
 800f398:	4619      	mov	r1, r3
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7f6 ff4c 	bl	8006238 <pbuf_remove_header>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d11e      	bne.n	800f3e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f3a6:	6839      	ldr	r1, [r7, #0]
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7fe ff27 	bl	800e1fc <ip4_input>
      break;
 800f3ae:	e013      	b.n	800f3d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f3b6:	f003 0308 	and.w	r3, r3, #8
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d014      	beq.n	800f3e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f3be:	8afb      	ldrh	r3, [r7, #22]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7f6 ff38 	bl	8006238 <pbuf_remove_header>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10e      	bne.n	800f3ec <ethernet_input+0x104>
        etharp_input(p, netif);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7fe f8c7 	bl	800d564 <etharp_input>
      break;
 800f3d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e00c      	b.n	800f3f6 <ethernet_input+0x10e>
    goto free_and_return;
 800f3dc:	bf00      	nop
 800f3de:	e006      	b.n	800f3ee <ethernet_input+0x106>
        goto free_and_return;
 800f3e0:	bf00      	nop
 800f3e2:	e004      	b.n	800f3ee <ethernet_input+0x106>
        goto free_and_return;
 800f3e4:	bf00      	nop
 800f3e6:	e002      	b.n	800f3ee <ethernet_input+0x106>
        goto free_and_return;
 800f3e8:	bf00      	nop
 800f3ea:	e000      	b.n	800f3ee <ethernet_input+0x106>
        goto free_and_return;
 800f3ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7f6 ffa8 	bl	8006344 <pbuf_free>
  return ERR_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3718      	adds	r7, #24
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	080147c0 	.word	0x080147c0

0800f404 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
 800f410:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f412:	8c3b      	ldrh	r3, [r7, #32]
 800f414:	4618      	mov	r0, r3
 800f416:	f7f5 fc77 	bl	8004d08 <lwip_htons>
 800f41a:	4603      	mov	r3, r0
 800f41c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f41e:	210e      	movs	r1, #14
 800f420:	68b8      	ldr	r0, [r7, #8]
 800f422:	f7f6 fef9 	bl	8006218 <pbuf_add_header>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d125      	bne.n	800f478 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	8afa      	ldrh	r2, [r7, #22]
 800f436:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	2206      	movs	r2, #6
 800f43c:	6839      	ldr	r1, [r7, #0]
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 f85a 	bl	800f4f8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	3306      	adds	r3, #6
 800f448:	2206      	movs	r2, #6
 800f44a:	6879      	ldr	r1, [r7, #4]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f000 f853 	bl	800f4f8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f458:	2b06      	cmp	r3, #6
 800f45a:	d006      	beq.n	800f46a <ethernet_output+0x66>
 800f45c:	4b0a      	ldr	r3, [pc, #40]	; (800f488 <ethernet_output+0x84>)
 800f45e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f462:	490a      	ldr	r1, [pc, #40]	; (800f48c <ethernet_output+0x88>)
 800f464:	480a      	ldr	r0, [pc, #40]	; (800f490 <ethernet_output+0x8c>)
 800f466:	f000 f877 	bl	800f558 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	699b      	ldr	r3, [r3, #24]
 800f46e:	68b9      	ldr	r1, [r7, #8]
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	4798      	blx	r3
 800f474:	4603      	mov	r3, r0
 800f476:	e002      	b.n	800f47e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f478:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f47a:	f06f 0301 	mvn.w	r3, #1
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3718      	adds	r7, #24
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	08013618 	.word	0x08013618
 800f48c:	08013650 	.word	0x08013650
 800f490:	08013684 	.word	0x08013684

0800f494 <__libc_init_array>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	4d0d      	ldr	r5, [pc, #52]	; (800f4cc <__libc_init_array+0x38>)
 800f498:	4c0d      	ldr	r4, [pc, #52]	; (800f4d0 <__libc_init_array+0x3c>)
 800f49a:	1b64      	subs	r4, r4, r5
 800f49c:	10a4      	asrs	r4, r4, #2
 800f49e:	2600      	movs	r6, #0
 800f4a0:	42a6      	cmp	r6, r4
 800f4a2:	d109      	bne.n	800f4b8 <__libc_init_array+0x24>
 800f4a4:	4d0b      	ldr	r5, [pc, #44]	; (800f4d4 <__libc_init_array+0x40>)
 800f4a6:	4c0c      	ldr	r4, [pc, #48]	; (800f4d8 <__libc_init_array+0x44>)
 800f4a8:	f001 fa50 	bl	801094c <_init>
 800f4ac:	1b64      	subs	r4, r4, r5
 800f4ae:	10a4      	asrs	r4, r4, #2
 800f4b0:	2600      	movs	r6, #0
 800f4b2:	42a6      	cmp	r6, r4
 800f4b4:	d105      	bne.n	800f4c2 <__libc_init_array+0x2e>
 800f4b6:	bd70      	pop	{r4, r5, r6, pc}
 800f4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4bc:	4798      	blx	r3
 800f4be:	3601      	adds	r6, #1
 800f4c0:	e7ee      	b.n	800f4a0 <__libc_init_array+0xc>
 800f4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4c6:	4798      	blx	r3
 800f4c8:	3601      	adds	r6, #1
 800f4ca:	e7f2      	b.n	800f4b2 <__libc_init_array+0x1e>
 800f4cc:	08014924 	.word	0x08014924
 800f4d0:	08014924 	.word	0x08014924
 800f4d4:	08014924 	.word	0x08014924
 800f4d8:	08014928 	.word	0x08014928

0800f4dc <memcmp>:
 800f4dc:	b530      	push	{r4, r5, lr}
 800f4de:	3901      	subs	r1, #1
 800f4e0:	2400      	movs	r4, #0
 800f4e2:	42a2      	cmp	r2, r4
 800f4e4:	d101      	bne.n	800f4ea <memcmp+0xe>
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	e005      	b.n	800f4f6 <memcmp+0x1a>
 800f4ea:	5d03      	ldrb	r3, [r0, r4]
 800f4ec:	3401      	adds	r4, #1
 800f4ee:	5d0d      	ldrb	r5, [r1, r4]
 800f4f0:	42ab      	cmp	r3, r5
 800f4f2:	d0f6      	beq.n	800f4e2 <memcmp+0x6>
 800f4f4:	1b58      	subs	r0, r3, r5
 800f4f6:	bd30      	pop	{r4, r5, pc}

0800f4f8 <memcpy>:
 800f4f8:	440a      	add	r2, r1
 800f4fa:	4291      	cmp	r1, r2
 800f4fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f500:	d100      	bne.n	800f504 <memcpy+0xc>
 800f502:	4770      	bx	lr
 800f504:	b510      	push	{r4, lr}
 800f506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f50a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f50e:	4291      	cmp	r1, r2
 800f510:	d1f9      	bne.n	800f506 <memcpy+0xe>
 800f512:	bd10      	pop	{r4, pc}

0800f514 <memmove>:
 800f514:	4288      	cmp	r0, r1
 800f516:	b510      	push	{r4, lr}
 800f518:	eb01 0402 	add.w	r4, r1, r2
 800f51c:	d902      	bls.n	800f524 <memmove+0x10>
 800f51e:	4284      	cmp	r4, r0
 800f520:	4623      	mov	r3, r4
 800f522:	d807      	bhi.n	800f534 <memmove+0x20>
 800f524:	1e43      	subs	r3, r0, #1
 800f526:	42a1      	cmp	r1, r4
 800f528:	d008      	beq.n	800f53c <memmove+0x28>
 800f52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f532:	e7f8      	b.n	800f526 <memmove+0x12>
 800f534:	4402      	add	r2, r0
 800f536:	4601      	mov	r1, r0
 800f538:	428a      	cmp	r2, r1
 800f53a:	d100      	bne.n	800f53e <memmove+0x2a>
 800f53c:	bd10      	pop	{r4, pc}
 800f53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f546:	e7f7      	b.n	800f538 <memmove+0x24>

0800f548 <memset>:
 800f548:	4402      	add	r2, r0
 800f54a:	4603      	mov	r3, r0
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d100      	bne.n	800f552 <memset+0xa>
 800f550:	4770      	bx	lr
 800f552:	f803 1b01 	strb.w	r1, [r3], #1
 800f556:	e7f9      	b.n	800f54c <memset+0x4>

0800f558 <iprintf>:
 800f558:	b40f      	push	{r0, r1, r2, r3}
 800f55a:	4b0a      	ldr	r3, [pc, #40]	; (800f584 <iprintf+0x2c>)
 800f55c:	b513      	push	{r0, r1, r4, lr}
 800f55e:	681c      	ldr	r4, [r3, #0]
 800f560:	b124      	cbz	r4, 800f56c <iprintf+0x14>
 800f562:	69a3      	ldr	r3, [r4, #24]
 800f564:	b913      	cbnz	r3, 800f56c <iprintf+0x14>
 800f566:	4620      	mov	r0, r4
 800f568:	f000 f91a 	bl	800f7a0 <__sinit>
 800f56c:	ab05      	add	r3, sp, #20
 800f56e:	9a04      	ldr	r2, [sp, #16]
 800f570:	68a1      	ldr	r1, [r4, #8]
 800f572:	9301      	str	r3, [sp, #4]
 800f574:	4620      	mov	r0, r4
 800f576:	f000 fbfd 	bl	800fd74 <_vfiprintf_r>
 800f57a:	b002      	add	sp, #8
 800f57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f580:	b004      	add	sp, #16
 800f582:	4770      	bx	lr
 800f584:	20000024 	.word	0x20000024

0800f588 <rand>:
 800f588:	4b17      	ldr	r3, [pc, #92]	; (800f5e8 <rand+0x60>)
 800f58a:	b510      	push	{r4, lr}
 800f58c:	681c      	ldr	r4, [r3, #0]
 800f58e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f590:	b9b3      	cbnz	r3, 800f5c0 <rand+0x38>
 800f592:	2018      	movs	r0, #24
 800f594:	f000 f9b6 	bl	800f904 <malloc>
 800f598:	63a0      	str	r0, [r4, #56]	; 0x38
 800f59a:	b928      	cbnz	r0, 800f5a8 <rand+0x20>
 800f59c:	4602      	mov	r2, r0
 800f59e:	4b13      	ldr	r3, [pc, #76]	; (800f5ec <rand+0x64>)
 800f5a0:	4813      	ldr	r0, [pc, #76]	; (800f5f0 <rand+0x68>)
 800f5a2:	214e      	movs	r1, #78	; 0x4e
 800f5a4:	f000 f886 	bl	800f6b4 <__assert_func>
 800f5a8:	4a12      	ldr	r2, [pc, #72]	; (800f5f4 <rand+0x6c>)
 800f5aa:	4b13      	ldr	r3, [pc, #76]	; (800f5f8 <rand+0x70>)
 800f5ac:	e9c0 2300 	strd	r2, r3, [r0]
 800f5b0:	4b12      	ldr	r3, [pc, #72]	; (800f5fc <rand+0x74>)
 800f5b2:	6083      	str	r3, [r0, #8]
 800f5b4:	230b      	movs	r3, #11
 800f5b6:	8183      	strh	r3, [r0, #12]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f5c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f5c2:	480f      	ldr	r0, [pc, #60]	; (800f600 <rand+0x78>)
 800f5c4:	690a      	ldr	r2, [r1, #16]
 800f5c6:	694b      	ldr	r3, [r1, #20]
 800f5c8:	4c0e      	ldr	r4, [pc, #56]	; (800f604 <rand+0x7c>)
 800f5ca:	4350      	muls	r0, r2
 800f5cc:	fb04 0003 	mla	r0, r4, r3, r0
 800f5d0:	fba2 3404 	umull	r3, r4, r2, r4
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	4404      	add	r4, r0
 800f5d8:	f144 0000 	adc.w	r0, r4, #0
 800f5dc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800f5e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f5e4:	bd10      	pop	{r4, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20000024 	.word	0x20000024
 800f5ec:	080147d4 	.word	0x080147d4
 800f5f0:	080147eb 	.word	0x080147eb
 800f5f4:	abcd330e 	.word	0xabcd330e
 800f5f8:	e66d1234 	.word	0xe66d1234
 800f5fc:	0005deec 	.word	0x0005deec
 800f600:	5851f42d 	.word	0x5851f42d
 800f604:	4c957f2d 	.word	0x4c957f2d

0800f608 <siprintf>:
 800f608:	b40e      	push	{r1, r2, r3}
 800f60a:	b500      	push	{lr}
 800f60c:	b09c      	sub	sp, #112	; 0x70
 800f60e:	ab1d      	add	r3, sp, #116	; 0x74
 800f610:	9002      	str	r0, [sp, #8]
 800f612:	9006      	str	r0, [sp, #24]
 800f614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f618:	4809      	ldr	r0, [pc, #36]	; (800f640 <siprintf+0x38>)
 800f61a:	9107      	str	r1, [sp, #28]
 800f61c:	9104      	str	r1, [sp, #16]
 800f61e:	4909      	ldr	r1, [pc, #36]	; (800f644 <siprintf+0x3c>)
 800f620:	f853 2b04 	ldr.w	r2, [r3], #4
 800f624:	9105      	str	r1, [sp, #20]
 800f626:	6800      	ldr	r0, [r0, #0]
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	a902      	add	r1, sp, #8
 800f62c:	f000 fa78 	bl	800fb20 <_svfiprintf_r>
 800f630:	9b02      	ldr	r3, [sp, #8]
 800f632:	2200      	movs	r2, #0
 800f634:	701a      	strb	r2, [r3, #0]
 800f636:	b01c      	add	sp, #112	; 0x70
 800f638:	f85d eb04 	ldr.w	lr, [sp], #4
 800f63c:	b003      	add	sp, #12
 800f63e:	4770      	bx	lr
 800f640:	20000024 	.word	0x20000024
 800f644:	ffff0208 	.word	0xffff0208

0800f648 <strcat>:
 800f648:	b510      	push	{r4, lr}
 800f64a:	4602      	mov	r2, r0
 800f64c:	7814      	ldrb	r4, [r2, #0]
 800f64e:	4613      	mov	r3, r2
 800f650:	3201      	adds	r2, #1
 800f652:	2c00      	cmp	r4, #0
 800f654:	d1fa      	bne.n	800f64c <strcat+0x4>
 800f656:	3b01      	subs	r3, #1
 800f658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f65c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f660:	2a00      	cmp	r2, #0
 800f662:	d1f9      	bne.n	800f658 <strcat+0x10>
 800f664:	bd10      	pop	{r4, pc}

0800f666 <strchr>:
 800f666:	b2c9      	uxtb	r1, r1
 800f668:	4603      	mov	r3, r0
 800f66a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f66e:	b11a      	cbz	r2, 800f678 <strchr+0x12>
 800f670:	428a      	cmp	r2, r1
 800f672:	d1f9      	bne.n	800f668 <strchr+0x2>
 800f674:	4618      	mov	r0, r3
 800f676:	4770      	bx	lr
 800f678:	2900      	cmp	r1, #0
 800f67a:	bf18      	it	ne
 800f67c:	2300      	movne	r3, #0
 800f67e:	e7f9      	b.n	800f674 <strchr+0xe>

0800f680 <strcpy>:
 800f680:	4603      	mov	r3, r0
 800f682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f686:	f803 2b01 	strb.w	r2, [r3], #1
 800f68a:	2a00      	cmp	r2, #0
 800f68c:	d1f9      	bne.n	800f682 <strcpy+0x2>
 800f68e:	4770      	bx	lr

0800f690 <strncmp>:
 800f690:	b510      	push	{r4, lr}
 800f692:	b16a      	cbz	r2, 800f6b0 <strncmp+0x20>
 800f694:	3901      	subs	r1, #1
 800f696:	1884      	adds	r4, r0, r2
 800f698:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f69c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d103      	bne.n	800f6ac <strncmp+0x1c>
 800f6a4:	42a0      	cmp	r0, r4
 800f6a6:	d001      	beq.n	800f6ac <strncmp+0x1c>
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1f5      	bne.n	800f698 <strncmp+0x8>
 800f6ac:	1a98      	subs	r0, r3, r2
 800f6ae:	bd10      	pop	{r4, pc}
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	e7fc      	b.n	800f6ae <strncmp+0x1e>

0800f6b4 <__assert_func>:
 800f6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6b6:	4614      	mov	r4, r2
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <__assert_func+0x2c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4605      	mov	r5, r0
 800f6c0:	68d8      	ldr	r0, [r3, #12]
 800f6c2:	b14c      	cbz	r4, 800f6d8 <__assert_func+0x24>
 800f6c4:	4b07      	ldr	r3, [pc, #28]	; (800f6e4 <__assert_func+0x30>)
 800f6c6:	9100      	str	r1, [sp, #0]
 800f6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6cc:	4906      	ldr	r1, [pc, #24]	; (800f6e8 <__assert_func+0x34>)
 800f6ce:	462b      	mov	r3, r5
 800f6d0:	f000 f8e4 	bl	800f89c <fiprintf>
 800f6d4:	f000 ff38 	bl	8010548 <abort>
 800f6d8:	4b04      	ldr	r3, [pc, #16]	; (800f6ec <__assert_func+0x38>)
 800f6da:	461c      	mov	r4, r3
 800f6dc:	e7f3      	b.n	800f6c6 <__assert_func+0x12>
 800f6de:	bf00      	nop
 800f6e0:	20000024 	.word	0x20000024
 800f6e4:	0801484a 	.word	0x0801484a
 800f6e8:	08014857 	.word	0x08014857
 800f6ec:	08014885 	.word	0x08014885

0800f6f0 <std>:
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	b510      	push	{r4, lr}
 800f6f4:	4604      	mov	r4, r0
 800f6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800f6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6fe:	6083      	str	r3, [r0, #8]
 800f700:	8181      	strh	r1, [r0, #12]
 800f702:	6643      	str	r3, [r0, #100]	; 0x64
 800f704:	81c2      	strh	r2, [r0, #14]
 800f706:	6183      	str	r3, [r0, #24]
 800f708:	4619      	mov	r1, r3
 800f70a:	2208      	movs	r2, #8
 800f70c:	305c      	adds	r0, #92	; 0x5c
 800f70e:	f7ff ff1b 	bl	800f548 <memset>
 800f712:	4b05      	ldr	r3, [pc, #20]	; (800f728 <std+0x38>)
 800f714:	6263      	str	r3, [r4, #36]	; 0x24
 800f716:	4b05      	ldr	r3, [pc, #20]	; (800f72c <std+0x3c>)
 800f718:	62a3      	str	r3, [r4, #40]	; 0x28
 800f71a:	4b05      	ldr	r3, [pc, #20]	; (800f730 <std+0x40>)
 800f71c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f71e:	4b05      	ldr	r3, [pc, #20]	; (800f734 <std+0x44>)
 800f720:	6224      	str	r4, [r4, #32]
 800f722:	6323      	str	r3, [r4, #48]	; 0x30
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop
 800f728:	0801031d 	.word	0x0801031d
 800f72c:	0801033f 	.word	0x0801033f
 800f730:	08010377 	.word	0x08010377
 800f734:	0801039b 	.word	0x0801039b

0800f738 <_cleanup_r>:
 800f738:	4901      	ldr	r1, [pc, #4]	; (800f740 <_cleanup_r+0x8>)
 800f73a:	f000 b8c1 	b.w	800f8c0 <_fwalk_reent>
 800f73e:	bf00      	nop
 800f740:	08010685 	.word	0x08010685

0800f744 <__sfmoreglue>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	1e4a      	subs	r2, r1, #1
 800f748:	2568      	movs	r5, #104	; 0x68
 800f74a:	4355      	muls	r5, r2
 800f74c:	460e      	mov	r6, r1
 800f74e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f752:	f000 f92f 	bl	800f9b4 <_malloc_r>
 800f756:	4604      	mov	r4, r0
 800f758:	b140      	cbz	r0, 800f76c <__sfmoreglue+0x28>
 800f75a:	2100      	movs	r1, #0
 800f75c:	e9c0 1600 	strd	r1, r6, [r0]
 800f760:	300c      	adds	r0, #12
 800f762:	60a0      	str	r0, [r4, #8]
 800f764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f768:	f7ff feee 	bl	800f548 <memset>
 800f76c:	4620      	mov	r0, r4
 800f76e:	bd70      	pop	{r4, r5, r6, pc}

0800f770 <__sfp_lock_acquire>:
 800f770:	4801      	ldr	r0, [pc, #4]	; (800f778 <__sfp_lock_acquire+0x8>)
 800f772:	f000 b8c5 	b.w	800f900 <__retarget_lock_acquire_recursive>
 800f776:	bf00      	nop
 800f778:	20008f00 	.word	0x20008f00

0800f77c <__sfp_lock_release>:
 800f77c:	4801      	ldr	r0, [pc, #4]	; (800f784 <__sfp_lock_release+0x8>)
 800f77e:	f000 b8c0 	b.w	800f902 <__retarget_lock_release_recursive>
 800f782:	bf00      	nop
 800f784:	20008f00 	.word	0x20008f00

0800f788 <__sinit_lock_acquire>:
 800f788:	4801      	ldr	r0, [pc, #4]	; (800f790 <__sinit_lock_acquire+0x8>)
 800f78a:	f000 b8b9 	b.w	800f900 <__retarget_lock_acquire_recursive>
 800f78e:	bf00      	nop
 800f790:	20008efb 	.word	0x20008efb

0800f794 <__sinit_lock_release>:
 800f794:	4801      	ldr	r0, [pc, #4]	; (800f79c <__sinit_lock_release+0x8>)
 800f796:	f000 b8b4 	b.w	800f902 <__retarget_lock_release_recursive>
 800f79a:	bf00      	nop
 800f79c:	20008efb 	.word	0x20008efb

0800f7a0 <__sinit>:
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	f7ff fff0 	bl	800f788 <__sinit_lock_acquire>
 800f7a8:	69a3      	ldr	r3, [r4, #24]
 800f7aa:	b11b      	cbz	r3, 800f7b4 <__sinit+0x14>
 800f7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7b0:	f7ff bff0 	b.w	800f794 <__sinit_lock_release>
 800f7b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f7b8:	6523      	str	r3, [r4, #80]	; 0x50
 800f7ba:	4b13      	ldr	r3, [pc, #76]	; (800f808 <__sinit+0x68>)
 800f7bc:	4a13      	ldr	r2, [pc, #76]	; (800f80c <__sinit+0x6c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f7c2:	42a3      	cmp	r3, r4
 800f7c4:	bf04      	itt	eq
 800f7c6:	2301      	moveq	r3, #1
 800f7c8:	61a3      	streq	r3, [r4, #24]
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 f820 	bl	800f810 <__sfp>
 800f7d0:	6060      	str	r0, [r4, #4]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f000 f81c 	bl	800f810 <__sfp>
 800f7d8:	60a0      	str	r0, [r4, #8]
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 f818 	bl	800f810 <__sfp>
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	60e0      	str	r0, [r4, #12]
 800f7e4:	2104      	movs	r1, #4
 800f7e6:	6860      	ldr	r0, [r4, #4]
 800f7e8:	f7ff ff82 	bl	800f6f0 <std>
 800f7ec:	68a0      	ldr	r0, [r4, #8]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	2109      	movs	r1, #9
 800f7f2:	f7ff ff7d 	bl	800f6f0 <std>
 800f7f6:	68e0      	ldr	r0, [r4, #12]
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	2112      	movs	r1, #18
 800f7fc:	f7ff ff78 	bl	800f6f0 <std>
 800f800:	2301      	movs	r3, #1
 800f802:	61a3      	str	r3, [r4, #24]
 800f804:	e7d2      	b.n	800f7ac <__sinit+0xc>
 800f806:	bf00      	nop
 800f808:	080147d0 	.word	0x080147d0
 800f80c:	0800f739 	.word	0x0800f739

0800f810 <__sfp>:
 800f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f812:	4607      	mov	r7, r0
 800f814:	f7ff ffac 	bl	800f770 <__sfp_lock_acquire>
 800f818:	4b1e      	ldr	r3, [pc, #120]	; (800f894 <__sfp+0x84>)
 800f81a:	681e      	ldr	r6, [r3, #0]
 800f81c:	69b3      	ldr	r3, [r6, #24]
 800f81e:	b913      	cbnz	r3, 800f826 <__sfp+0x16>
 800f820:	4630      	mov	r0, r6
 800f822:	f7ff ffbd 	bl	800f7a0 <__sinit>
 800f826:	3648      	adds	r6, #72	; 0x48
 800f828:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	d503      	bpl.n	800f838 <__sfp+0x28>
 800f830:	6833      	ldr	r3, [r6, #0]
 800f832:	b30b      	cbz	r3, 800f878 <__sfp+0x68>
 800f834:	6836      	ldr	r6, [r6, #0]
 800f836:	e7f7      	b.n	800f828 <__sfp+0x18>
 800f838:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f83c:	b9d5      	cbnz	r5, 800f874 <__sfp+0x64>
 800f83e:	4b16      	ldr	r3, [pc, #88]	; (800f898 <__sfp+0x88>)
 800f840:	60e3      	str	r3, [r4, #12]
 800f842:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f846:	6665      	str	r5, [r4, #100]	; 0x64
 800f848:	f000 f859 	bl	800f8fe <__retarget_lock_init_recursive>
 800f84c:	f7ff ff96 	bl	800f77c <__sfp_lock_release>
 800f850:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f854:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f858:	6025      	str	r5, [r4, #0]
 800f85a:	61a5      	str	r5, [r4, #24]
 800f85c:	2208      	movs	r2, #8
 800f85e:	4629      	mov	r1, r5
 800f860:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f864:	f7ff fe70 	bl	800f548 <memset>
 800f868:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f86c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f870:	4620      	mov	r0, r4
 800f872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f874:	3468      	adds	r4, #104	; 0x68
 800f876:	e7d9      	b.n	800f82c <__sfp+0x1c>
 800f878:	2104      	movs	r1, #4
 800f87a:	4638      	mov	r0, r7
 800f87c:	f7ff ff62 	bl	800f744 <__sfmoreglue>
 800f880:	4604      	mov	r4, r0
 800f882:	6030      	str	r0, [r6, #0]
 800f884:	2800      	cmp	r0, #0
 800f886:	d1d5      	bne.n	800f834 <__sfp+0x24>
 800f888:	f7ff ff78 	bl	800f77c <__sfp_lock_release>
 800f88c:	230c      	movs	r3, #12
 800f88e:	603b      	str	r3, [r7, #0]
 800f890:	e7ee      	b.n	800f870 <__sfp+0x60>
 800f892:	bf00      	nop
 800f894:	080147d0 	.word	0x080147d0
 800f898:	ffff0001 	.word	0xffff0001

0800f89c <fiprintf>:
 800f89c:	b40e      	push	{r1, r2, r3}
 800f89e:	b503      	push	{r0, r1, lr}
 800f8a0:	4601      	mov	r1, r0
 800f8a2:	ab03      	add	r3, sp, #12
 800f8a4:	4805      	ldr	r0, [pc, #20]	; (800f8bc <fiprintf+0x20>)
 800f8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8aa:	6800      	ldr	r0, [r0, #0]
 800f8ac:	9301      	str	r3, [sp, #4]
 800f8ae:	f000 fa61 	bl	800fd74 <_vfiprintf_r>
 800f8b2:	b002      	add	sp, #8
 800f8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8b8:	b003      	add	sp, #12
 800f8ba:	4770      	bx	lr
 800f8bc:	20000024 	.word	0x20000024

0800f8c0 <_fwalk_reent>:
 800f8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c4:	4606      	mov	r6, r0
 800f8c6:	4688      	mov	r8, r1
 800f8c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f8cc:	2700      	movs	r7, #0
 800f8ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8d2:	f1b9 0901 	subs.w	r9, r9, #1
 800f8d6:	d505      	bpl.n	800f8e4 <_fwalk_reent+0x24>
 800f8d8:	6824      	ldr	r4, [r4, #0]
 800f8da:	2c00      	cmp	r4, #0
 800f8dc:	d1f7      	bne.n	800f8ce <_fwalk_reent+0xe>
 800f8de:	4638      	mov	r0, r7
 800f8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e4:	89ab      	ldrh	r3, [r5, #12]
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	d907      	bls.n	800f8fa <_fwalk_reent+0x3a>
 800f8ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	d003      	beq.n	800f8fa <_fwalk_reent+0x3a>
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	47c0      	blx	r8
 800f8f8:	4307      	orrs	r7, r0
 800f8fa:	3568      	adds	r5, #104	; 0x68
 800f8fc:	e7e9      	b.n	800f8d2 <_fwalk_reent+0x12>

0800f8fe <__retarget_lock_init_recursive>:
 800f8fe:	4770      	bx	lr

0800f900 <__retarget_lock_acquire_recursive>:
 800f900:	4770      	bx	lr

0800f902 <__retarget_lock_release_recursive>:
 800f902:	4770      	bx	lr

0800f904 <malloc>:
 800f904:	4b02      	ldr	r3, [pc, #8]	; (800f910 <malloc+0xc>)
 800f906:	4601      	mov	r1, r0
 800f908:	6818      	ldr	r0, [r3, #0]
 800f90a:	f000 b853 	b.w	800f9b4 <_malloc_r>
 800f90e:	bf00      	nop
 800f910:	20000024 	.word	0x20000024

0800f914 <_free_r>:
 800f914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f916:	2900      	cmp	r1, #0
 800f918:	d048      	beq.n	800f9ac <_free_r+0x98>
 800f91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f91e:	9001      	str	r0, [sp, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f1a1 0404 	sub.w	r4, r1, #4
 800f926:	bfb8      	it	lt
 800f928:	18e4      	addlt	r4, r4, r3
 800f92a:	f000 ff5d 	bl	80107e8 <__malloc_lock>
 800f92e:	4a20      	ldr	r2, [pc, #128]	; (800f9b0 <_free_r+0x9c>)
 800f930:	9801      	ldr	r0, [sp, #4]
 800f932:	6813      	ldr	r3, [r2, #0]
 800f934:	4615      	mov	r5, r2
 800f936:	b933      	cbnz	r3, 800f946 <_free_r+0x32>
 800f938:	6063      	str	r3, [r4, #4]
 800f93a:	6014      	str	r4, [r2, #0]
 800f93c:	b003      	add	sp, #12
 800f93e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f942:	f000 bf57 	b.w	80107f4 <__malloc_unlock>
 800f946:	42a3      	cmp	r3, r4
 800f948:	d90b      	bls.n	800f962 <_free_r+0x4e>
 800f94a:	6821      	ldr	r1, [r4, #0]
 800f94c:	1862      	adds	r2, r4, r1
 800f94e:	4293      	cmp	r3, r2
 800f950:	bf04      	itt	eq
 800f952:	681a      	ldreq	r2, [r3, #0]
 800f954:	685b      	ldreq	r3, [r3, #4]
 800f956:	6063      	str	r3, [r4, #4]
 800f958:	bf04      	itt	eq
 800f95a:	1852      	addeq	r2, r2, r1
 800f95c:	6022      	streq	r2, [r4, #0]
 800f95e:	602c      	str	r4, [r5, #0]
 800f960:	e7ec      	b.n	800f93c <_free_r+0x28>
 800f962:	461a      	mov	r2, r3
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	b10b      	cbz	r3, 800f96c <_free_r+0x58>
 800f968:	42a3      	cmp	r3, r4
 800f96a:	d9fa      	bls.n	800f962 <_free_r+0x4e>
 800f96c:	6811      	ldr	r1, [r2, #0]
 800f96e:	1855      	adds	r5, r2, r1
 800f970:	42a5      	cmp	r5, r4
 800f972:	d10b      	bne.n	800f98c <_free_r+0x78>
 800f974:	6824      	ldr	r4, [r4, #0]
 800f976:	4421      	add	r1, r4
 800f978:	1854      	adds	r4, r2, r1
 800f97a:	42a3      	cmp	r3, r4
 800f97c:	6011      	str	r1, [r2, #0]
 800f97e:	d1dd      	bne.n	800f93c <_free_r+0x28>
 800f980:	681c      	ldr	r4, [r3, #0]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	6053      	str	r3, [r2, #4]
 800f986:	4421      	add	r1, r4
 800f988:	6011      	str	r1, [r2, #0]
 800f98a:	e7d7      	b.n	800f93c <_free_r+0x28>
 800f98c:	d902      	bls.n	800f994 <_free_r+0x80>
 800f98e:	230c      	movs	r3, #12
 800f990:	6003      	str	r3, [r0, #0]
 800f992:	e7d3      	b.n	800f93c <_free_r+0x28>
 800f994:	6825      	ldr	r5, [r4, #0]
 800f996:	1961      	adds	r1, r4, r5
 800f998:	428b      	cmp	r3, r1
 800f99a:	bf04      	itt	eq
 800f99c:	6819      	ldreq	r1, [r3, #0]
 800f99e:	685b      	ldreq	r3, [r3, #4]
 800f9a0:	6063      	str	r3, [r4, #4]
 800f9a2:	bf04      	itt	eq
 800f9a4:	1949      	addeq	r1, r1, r5
 800f9a6:	6021      	streq	r1, [r4, #0]
 800f9a8:	6054      	str	r4, [r2, #4]
 800f9aa:	e7c7      	b.n	800f93c <_free_r+0x28>
 800f9ac:	b003      	add	sp, #12
 800f9ae:	bd30      	pop	{r4, r5, pc}
 800f9b0:	20000674 	.word	0x20000674

0800f9b4 <_malloc_r>:
 800f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b6:	1ccd      	adds	r5, r1, #3
 800f9b8:	f025 0503 	bic.w	r5, r5, #3
 800f9bc:	3508      	adds	r5, #8
 800f9be:	2d0c      	cmp	r5, #12
 800f9c0:	bf38      	it	cc
 800f9c2:	250c      	movcc	r5, #12
 800f9c4:	2d00      	cmp	r5, #0
 800f9c6:	4606      	mov	r6, r0
 800f9c8:	db01      	blt.n	800f9ce <_malloc_r+0x1a>
 800f9ca:	42a9      	cmp	r1, r5
 800f9cc:	d903      	bls.n	800f9d6 <_malloc_r+0x22>
 800f9ce:	230c      	movs	r3, #12
 800f9d0:	6033      	str	r3, [r6, #0]
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9d6:	f000 ff07 	bl	80107e8 <__malloc_lock>
 800f9da:	4921      	ldr	r1, [pc, #132]	; (800fa60 <_malloc_r+0xac>)
 800f9dc:	680a      	ldr	r2, [r1, #0]
 800f9de:	4614      	mov	r4, r2
 800f9e0:	b99c      	cbnz	r4, 800fa0a <_malloc_r+0x56>
 800f9e2:	4f20      	ldr	r7, [pc, #128]	; (800fa64 <_malloc_r+0xb0>)
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	b923      	cbnz	r3, 800f9f2 <_malloc_r+0x3e>
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f000 fc86 	bl	80102fc <_sbrk_r>
 800f9f0:	6038      	str	r0, [r7, #0]
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f000 fc81 	bl	80102fc <_sbrk_r>
 800f9fa:	1c43      	adds	r3, r0, #1
 800f9fc:	d123      	bne.n	800fa46 <_malloc_r+0x92>
 800f9fe:	230c      	movs	r3, #12
 800fa00:	6033      	str	r3, [r6, #0]
 800fa02:	4630      	mov	r0, r6
 800fa04:	f000 fef6 	bl	80107f4 <__malloc_unlock>
 800fa08:	e7e3      	b.n	800f9d2 <_malloc_r+0x1e>
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	1b5b      	subs	r3, r3, r5
 800fa0e:	d417      	bmi.n	800fa40 <_malloc_r+0x8c>
 800fa10:	2b0b      	cmp	r3, #11
 800fa12:	d903      	bls.n	800fa1c <_malloc_r+0x68>
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	441c      	add	r4, r3
 800fa18:	6025      	str	r5, [r4, #0]
 800fa1a:	e004      	b.n	800fa26 <_malloc_r+0x72>
 800fa1c:	6863      	ldr	r3, [r4, #4]
 800fa1e:	42a2      	cmp	r2, r4
 800fa20:	bf0c      	ite	eq
 800fa22:	600b      	streq	r3, [r1, #0]
 800fa24:	6053      	strne	r3, [r2, #4]
 800fa26:	4630      	mov	r0, r6
 800fa28:	f000 fee4 	bl	80107f4 <__malloc_unlock>
 800fa2c:	f104 000b 	add.w	r0, r4, #11
 800fa30:	1d23      	adds	r3, r4, #4
 800fa32:	f020 0007 	bic.w	r0, r0, #7
 800fa36:	1ac2      	subs	r2, r0, r3
 800fa38:	d0cc      	beq.n	800f9d4 <_malloc_r+0x20>
 800fa3a:	1a1b      	subs	r3, r3, r0
 800fa3c:	50a3      	str	r3, [r4, r2]
 800fa3e:	e7c9      	b.n	800f9d4 <_malloc_r+0x20>
 800fa40:	4622      	mov	r2, r4
 800fa42:	6864      	ldr	r4, [r4, #4]
 800fa44:	e7cc      	b.n	800f9e0 <_malloc_r+0x2c>
 800fa46:	1cc4      	adds	r4, r0, #3
 800fa48:	f024 0403 	bic.w	r4, r4, #3
 800fa4c:	42a0      	cmp	r0, r4
 800fa4e:	d0e3      	beq.n	800fa18 <_malloc_r+0x64>
 800fa50:	1a21      	subs	r1, r4, r0
 800fa52:	4630      	mov	r0, r6
 800fa54:	f000 fc52 	bl	80102fc <_sbrk_r>
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d1dd      	bne.n	800fa18 <_malloc_r+0x64>
 800fa5c:	e7cf      	b.n	800f9fe <_malloc_r+0x4a>
 800fa5e:	bf00      	nop
 800fa60:	20000674 	.word	0x20000674
 800fa64:	20000678 	.word	0x20000678

0800fa68 <__ssputs_r>:
 800fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	688e      	ldr	r6, [r1, #8]
 800fa6e:	429e      	cmp	r6, r3
 800fa70:	4682      	mov	sl, r0
 800fa72:	460c      	mov	r4, r1
 800fa74:	4690      	mov	r8, r2
 800fa76:	461f      	mov	r7, r3
 800fa78:	d838      	bhi.n	800faec <__ssputs_r+0x84>
 800fa7a:	898a      	ldrh	r2, [r1, #12]
 800fa7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa80:	d032      	beq.n	800fae8 <__ssputs_r+0x80>
 800fa82:	6825      	ldr	r5, [r4, #0]
 800fa84:	6909      	ldr	r1, [r1, #16]
 800fa86:	eba5 0901 	sub.w	r9, r5, r1
 800fa8a:	6965      	ldr	r5, [r4, #20]
 800fa8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa94:	3301      	adds	r3, #1
 800fa96:	444b      	add	r3, r9
 800fa98:	106d      	asrs	r5, r5, #1
 800fa9a:	429d      	cmp	r5, r3
 800fa9c:	bf38      	it	cc
 800fa9e:	461d      	movcc	r5, r3
 800faa0:	0553      	lsls	r3, r2, #21
 800faa2:	d531      	bpl.n	800fb08 <__ssputs_r+0xa0>
 800faa4:	4629      	mov	r1, r5
 800faa6:	f7ff ff85 	bl	800f9b4 <_malloc_r>
 800faaa:	4606      	mov	r6, r0
 800faac:	b950      	cbnz	r0, 800fac4 <__ssputs_r+0x5c>
 800faae:	230c      	movs	r3, #12
 800fab0:	f8ca 3000 	str.w	r3, [sl]
 800fab4:	89a3      	ldrh	r3, [r4, #12]
 800fab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac4:	6921      	ldr	r1, [r4, #16]
 800fac6:	464a      	mov	r2, r9
 800fac8:	f7ff fd16 	bl	800f4f8 <memcpy>
 800facc:	89a3      	ldrh	r3, [r4, #12]
 800face:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fad6:	81a3      	strh	r3, [r4, #12]
 800fad8:	6126      	str	r6, [r4, #16]
 800fada:	6165      	str	r5, [r4, #20]
 800fadc:	444e      	add	r6, r9
 800fade:	eba5 0509 	sub.w	r5, r5, r9
 800fae2:	6026      	str	r6, [r4, #0]
 800fae4:	60a5      	str	r5, [r4, #8]
 800fae6:	463e      	mov	r6, r7
 800fae8:	42be      	cmp	r6, r7
 800faea:	d900      	bls.n	800faee <__ssputs_r+0x86>
 800faec:	463e      	mov	r6, r7
 800faee:	4632      	mov	r2, r6
 800faf0:	6820      	ldr	r0, [r4, #0]
 800faf2:	4641      	mov	r1, r8
 800faf4:	f7ff fd0e 	bl	800f514 <memmove>
 800faf8:	68a3      	ldr	r3, [r4, #8]
 800fafa:	6822      	ldr	r2, [r4, #0]
 800fafc:	1b9b      	subs	r3, r3, r6
 800fafe:	4432      	add	r2, r6
 800fb00:	60a3      	str	r3, [r4, #8]
 800fb02:	6022      	str	r2, [r4, #0]
 800fb04:	2000      	movs	r0, #0
 800fb06:	e7db      	b.n	800fac0 <__ssputs_r+0x58>
 800fb08:	462a      	mov	r2, r5
 800fb0a:	f000 fe79 	bl	8010800 <_realloc_r>
 800fb0e:	4606      	mov	r6, r0
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d1e1      	bne.n	800fad8 <__ssputs_r+0x70>
 800fb14:	6921      	ldr	r1, [r4, #16]
 800fb16:	4650      	mov	r0, sl
 800fb18:	f7ff fefc 	bl	800f914 <_free_r>
 800fb1c:	e7c7      	b.n	800faae <__ssputs_r+0x46>
	...

0800fb20 <_svfiprintf_r>:
 800fb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb24:	4698      	mov	r8, r3
 800fb26:	898b      	ldrh	r3, [r1, #12]
 800fb28:	061b      	lsls	r3, r3, #24
 800fb2a:	b09d      	sub	sp, #116	; 0x74
 800fb2c:	4607      	mov	r7, r0
 800fb2e:	460d      	mov	r5, r1
 800fb30:	4614      	mov	r4, r2
 800fb32:	d50e      	bpl.n	800fb52 <_svfiprintf_r+0x32>
 800fb34:	690b      	ldr	r3, [r1, #16]
 800fb36:	b963      	cbnz	r3, 800fb52 <_svfiprintf_r+0x32>
 800fb38:	2140      	movs	r1, #64	; 0x40
 800fb3a:	f7ff ff3b 	bl	800f9b4 <_malloc_r>
 800fb3e:	6028      	str	r0, [r5, #0]
 800fb40:	6128      	str	r0, [r5, #16]
 800fb42:	b920      	cbnz	r0, 800fb4e <_svfiprintf_r+0x2e>
 800fb44:	230c      	movs	r3, #12
 800fb46:	603b      	str	r3, [r7, #0]
 800fb48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb4c:	e0d1      	b.n	800fcf2 <_svfiprintf_r+0x1d2>
 800fb4e:	2340      	movs	r3, #64	; 0x40
 800fb50:	616b      	str	r3, [r5, #20]
 800fb52:	2300      	movs	r3, #0
 800fb54:	9309      	str	r3, [sp, #36]	; 0x24
 800fb56:	2320      	movs	r3, #32
 800fb58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb60:	2330      	movs	r3, #48	; 0x30
 800fb62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fd0c <_svfiprintf_r+0x1ec>
 800fb66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb6a:	f04f 0901 	mov.w	r9, #1
 800fb6e:	4623      	mov	r3, r4
 800fb70:	469a      	mov	sl, r3
 800fb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb76:	b10a      	cbz	r2, 800fb7c <_svfiprintf_r+0x5c>
 800fb78:	2a25      	cmp	r2, #37	; 0x25
 800fb7a:	d1f9      	bne.n	800fb70 <_svfiprintf_r+0x50>
 800fb7c:	ebba 0b04 	subs.w	fp, sl, r4
 800fb80:	d00b      	beq.n	800fb9a <_svfiprintf_r+0x7a>
 800fb82:	465b      	mov	r3, fp
 800fb84:	4622      	mov	r2, r4
 800fb86:	4629      	mov	r1, r5
 800fb88:	4638      	mov	r0, r7
 800fb8a:	f7ff ff6d 	bl	800fa68 <__ssputs_r>
 800fb8e:	3001      	adds	r0, #1
 800fb90:	f000 80aa 	beq.w	800fce8 <_svfiprintf_r+0x1c8>
 800fb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb96:	445a      	add	r2, fp
 800fb98:	9209      	str	r2, [sp, #36]	; 0x24
 800fb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f000 80a2 	beq.w	800fce8 <_svfiprintf_r+0x1c8>
 800fba4:	2300      	movs	r3, #0
 800fba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbae:	f10a 0a01 	add.w	sl, sl, #1
 800fbb2:	9304      	str	r3, [sp, #16]
 800fbb4:	9307      	str	r3, [sp, #28]
 800fbb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbba:	931a      	str	r3, [sp, #104]	; 0x68
 800fbbc:	4654      	mov	r4, sl
 800fbbe:	2205      	movs	r2, #5
 800fbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc4:	4851      	ldr	r0, [pc, #324]	; (800fd0c <_svfiprintf_r+0x1ec>)
 800fbc6:	f7f0 fb1b 	bl	8000200 <memchr>
 800fbca:	9a04      	ldr	r2, [sp, #16]
 800fbcc:	b9d8      	cbnz	r0, 800fc06 <_svfiprintf_r+0xe6>
 800fbce:	06d0      	lsls	r0, r2, #27
 800fbd0:	bf44      	itt	mi
 800fbd2:	2320      	movmi	r3, #32
 800fbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbd8:	0711      	lsls	r1, r2, #28
 800fbda:	bf44      	itt	mi
 800fbdc:	232b      	movmi	r3, #43	; 0x2b
 800fbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800fbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800fbe8:	d015      	beq.n	800fc16 <_svfiprintf_r+0xf6>
 800fbea:	9a07      	ldr	r2, [sp, #28]
 800fbec:	4654      	mov	r4, sl
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f04f 0c0a 	mov.w	ip, #10
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbfa:	3b30      	subs	r3, #48	; 0x30
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	d94e      	bls.n	800fc9e <_svfiprintf_r+0x17e>
 800fc00:	b1b0      	cbz	r0, 800fc30 <_svfiprintf_r+0x110>
 800fc02:	9207      	str	r2, [sp, #28]
 800fc04:	e014      	b.n	800fc30 <_svfiprintf_r+0x110>
 800fc06:	eba0 0308 	sub.w	r3, r0, r8
 800fc0a:	fa09 f303 	lsl.w	r3, r9, r3
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	9304      	str	r3, [sp, #16]
 800fc12:	46a2      	mov	sl, r4
 800fc14:	e7d2      	b.n	800fbbc <_svfiprintf_r+0x9c>
 800fc16:	9b03      	ldr	r3, [sp, #12]
 800fc18:	1d19      	adds	r1, r3, #4
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	9103      	str	r1, [sp, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	bfbb      	ittet	lt
 800fc22:	425b      	neglt	r3, r3
 800fc24:	f042 0202 	orrlt.w	r2, r2, #2
 800fc28:	9307      	strge	r3, [sp, #28]
 800fc2a:	9307      	strlt	r3, [sp, #28]
 800fc2c:	bfb8      	it	lt
 800fc2e:	9204      	strlt	r2, [sp, #16]
 800fc30:	7823      	ldrb	r3, [r4, #0]
 800fc32:	2b2e      	cmp	r3, #46	; 0x2e
 800fc34:	d10c      	bne.n	800fc50 <_svfiprintf_r+0x130>
 800fc36:	7863      	ldrb	r3, [r4, #1]
 800fc38:	2b2a      	cmp	r3, #42	; 0x2a
 800fc3a:	d135      	bne.n	800fca8 <_svfiprintf_r+0x188>
 800fc3c:	9b03      	ldr	r3, [sp, #12]
 800fc3e:	1d1a      	adds	r2, r3, #4
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	9203      	str	r2, [sp, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	bfb8      	it	lt
 800fc48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fc4c:	3402      	adds	r4, #2
 800fc4e:	9305      	str	r3, [sp, #20]
 800fc50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd1c <_svfiprintf_r+0x1fc>
 800fc54:	7821      	ldrb	r1, [r4, #0]
 800fc56:	2203      	movs	r2, #3
 800fc58:	4650      	mov	r0, sl
 800fc5a:	f7f0 fad1 	bl	8000200 <memchr>
 800fc5e:	b140      	cbz	r0, 800fc72 <_svfiprintf_r+0x152>
 800fc60:	2340      	movs	r3, #64	; 0x40
 800fc62:	eba0 000a 	sub.w	r0, r0, sl
 800fc66:	fa03 f000 	lsl.w	r0, r3, r0
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	4303      	orrs	r3, r0
 800fc6e:	3401      	adds	r4, #1
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc76:	4826      	ldr	r0, [pc, #152]	; (800fd10 <_svfiprintf_r+0x1f0>)
 800fc78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc7c:	2206      	movs	r2, #6
 800fc7e:	f7f0 fabf 	bl	8000200 <memchr>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d038      	beq.n	800fcf8 <_svfiprintf_r+0x1d8>
 800fc86:	4b23      	ldr	r3, [pc, #140]	; (800fd14 <_svfiprintf_r+0x1f4>)
 800fc88:	bb1b      	cbnz	r3, 800fcd2 <_svfiprintf_r+0x1b2>
 800fc8a:	9b03      	ldr	r3, [sp, #12]
 800fc8c:	3307      	adds	r3, #7
 800fc8e:	f023 0307 	bic.w	r3, r3, #7
 800fc92:	3308      	adds	r3, #8
 800fc94:	9303      	str	r3, [sp, #12]
 800fc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc98:	4433      	add	r3, r6
 800fc9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc9c:	e767      	b.n	800fb6e <_svfiprintf_r+0x4e>
 800fc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fca2:	460c      	mov	r4, r1
 800fca4:	2001      	movs	r0, #1
 800fca6:	e7a5      	b.n	800fbf4 <_svfiprintf_r+0xd4>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	3401      	adds	r4, #1
 800fcac:	9305      	str	r3, [sp, #20]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	f04f 0c0a 	mov.w	ip, #10
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcba:	3a30      	subs	r2, #48	; 0x30
 800fcbc:	2a09      	cmp	r2, #9
 800fcbe:	d903      	bls.n	800fcc8 <_svfiprintf_r+0x1a8>
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d0c5      	beq.n	800fc50 <_svfiprintf_r+0x130>
 800fcc4:	9105      	str	r1, [sp, #20]
 800fcc6:	e7c3      	b.n	800fc50 <_svfiprintf_r+0x130>
 800fcc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fccc:	4604      	mov	r4, r0
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e7f0      	b.n	800fcb4 <_svfiprintf_r+0x194>
 800fcd2:	ab03      	add	r3, sp, #12
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	462a      	mov	r2, r5
 800fcd8:	4b0f      	ldr	r3, [pc, #60]	; (800fd18 <_svfiprintf_r+0x1f8>)
 800fcda:	a904      	add	r1, sp, #16
 800fcdc:	4638      	mov	r0, r7
 800fcde:	f3af 8000 	nop.w
 800fce2:	1c42      	adds	r2, r0, #1
 800fce4:	4606      	mov	r6, r0
 800fce6:	d1d6      	bne.n	800fc96 <_svfiprintf_r+0x176>
 800fce8:	89ab      	ldrh	r3, [r5, #12]
 800fcea:	065b      	lsls	r3, r3, #25
 800fcec:	f53f af2c 	bmi.w	800fb48 <_svfiprintf_r+0x28>
 800fcf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcf2:	b01d      	add	sp, #116	; 0x74
 800fcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf8:	ab03      	add	r3, sp, #12
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	462a      	mov	r2, r5
 800fcfe:	4b06      	ldr	r3, [pc, #24]	; (800fd18 <_svfiprintf_r+0x1f8>)
 800fd00:	a904      	add	r1, sp, #16
 800fd02:	4638      	mov	r0, r7
 800fd04:	f000 f9d4 	bl	80100b0 <_printf_i>
 800fd08:	e7eb      	b.n	800fce2 <_svfiprintf_r+0x1c2>
 800fd0a:	bf00      	nop
 800fd0c:	080148e8 	.word	0x080148e8
 800fd10:	080148f2 	.word	0x080148f2
 800fd14:	00000000 	.word	0x00000000
 800fd18:	0800fa69 	.word	0x0800fa69
 800fd1c:	080148ee 	.word	0x080148ee

0800fd20 <__sfputc_r>:
 800fd20:	6893      	ldr	r3, [r2, #8]
 800fd22:	3b01      	subs	r3, #1
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	b410      	push	{r4}
 800fd28:	6093      	str	r3, [r2, #8]
 800fd2a:	da08      	bge.n	800fd3e <__sfputc_r+0x1e>
 800fd2c:	6994      	ldr	r4, [r2, #24]
 800fd2e:	42a3      	cmp	r3, r4
 800fd30:	db01      	blt.n	800fd36 <__sfputc_r+0x16>
 800fd32:	290a      	cmp	r1, #10
 800fd34:	d103      	bne.n	800fd3e <__sfputc_r+0x1e>
 800fd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd3a:	f000 bb33 	b.w	80103a4 <__swbuf_r>
 800fd3e:	6813      	ldr	r3, [r2, #0]
 800fd40:	1c58      	adds	r0, r3, #1
 800fd42:	6010      	str	r0, [r2, #0]
 800fd44:	7019      	strb	r1, [r3, #0]
 800fd46:	4608      	mov	r0, r1
 800fd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd4c:	4770      	bx	lr

0800fd4e <__sfputs_r>:
 800fd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd50:	4606      	mov	r6, r0
 800fd52:	460f      	mov	r7, r1
 800fd54:	4614      	mov	r4, r2
 800fd56:	18d5      	adds	r5, r2, r3
 800fd58:	42ac      	cmp	r4, r5
 800fd5a:	d101      	bne.n	800fd60 <__sfputs_r+0x12>
 800fd5c:	2000      	movs	r0, #0
 800fd5e:	e007      	b.n	800fd70 <__sfputs_r+0x22>
 800fd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd64:	463a      	mov	r2, r7
 800fd66:	4630      	mov	r0, r6
 800fd68:	f7ff ffda 	bl	800fd20 <__sfputc_r>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	d1f3      	bne.n	800fd58 <__sfputs_r+0xa>
 800fd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd74 <_vfiprintf_r>:
 800fd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd78:	460d      	mov	r5, r1
 800fd7a:	b09d      	sub	sp, #116	; 0x74
 800fd7c:	4614      	mov	r4, r2
 800fd7e:	4698      	mov	r8, r3
 800fd80:	4606      	mov	r6, r0
 800fd82:	b118      	cbz	r0, 800fd8c <_vfiprintf_r+0x18>
 800fd84:	6983      	ldr	r3, [r0, #24]
 800fd86:	b90b      	cbnz	r3, 800fd8c <_vfiprintf_r+0x18>
 800fd88:	f7ff fd0a 	bl	800f7a0 <__sinit>
 800fd8c:	4b89      	ldr	r3, [pc, #548]	; (800ffb4 <_vfiprintf_r+0x240>)
 800fd8e:	429d      	cmp	r5, r3
 800fd90:	d11b      	bne.n	800fdca <_vfiprintf_r+0x56>
 800fd92:	6875      	ldr	r5, [r6, #4]
 800fd94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd96:	07d9      	lsls	r1, r3, #31
 800fd98:	d405      	bmi.n	800fda6 <_vfiprintf_r+0x32>
 800fd9a:	89ab      	ldrh	r3, [r5, #12]
 800fd9c:	059a      	lsls	r2, r3, #22
 800fd9e:	d402      	bmi.n	800fda6 <_vfiprintf_r+0x32>
 800fda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fda2:	f7ff fdad 	bl	800f900 <__retarget_lock_acquire_recursive>
 800fda6:	89ab      	ldrh	r3, [r5, #12]
 800fda8:	071b      	lsls	r3, r3, #28
 800fdaa:	d501      	bpl.n	800fdb0 <_vfiprintf_r+0x3c>
 800fdac:	692b      	ldr	r3, [r5, #16]
 800fdae:	b9eb      	cbnz	r3, 800fdec <_vfiprintf_r+0x78>
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	f000 fb5a 	bl	801046c <__swsetup_r>
 800fdb8:	b1c0      	cbz	r0, 800fdec <_vfiprintf_r+0x78>
 800fdba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdbc:	07dc      	lsls	r4, r3, #31
 800fdbe:	d50e      	bpl.n	800fdde <_vfiprintf_r+0x6a>
 800fdc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdc4:	b01d      	add	sp, #116	; 0x74
 800fdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdca:	4b7b      	ldr	r3, [pc, #492]	; (800ffb8 <_vfiprintf_r+0x244>)
 800fdcc:	429d      	cmp	r5, r3
 800fdce:	d101      	bne.n	800fdd4 <_vfiprintf_r+0x60>
 800fdd0:	68b5      	ldr	r5, [r6, #8]
 800fdd2:	e7df      	b.n	800fd94 <_vfiprintf_r+0x20>
 800fdd4:	4b79      	ldr	r3, [pc, #484]	; (800ffbc <_vfiprintf_r+0x248>)
 800fdd6:	429d      	cmp	r5, r3
 800fdd8:	bf08      	it	eq
 800fdda:	68f5      	ldreq	r5, [r6, #12]
 800fddc:	e7da      	b.n	800fd94 <_vfiprintf_r+0x20>
 800fdde:	89ab      	ldrh	r3, [r5, #12]
 800fde0:	0598      	lsls	r0, r3, #22
 800fde2:	d4ed      	bmi.n	800fdc0 <_vfiprintf_r+0x4c>
 800fde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fde6:	f7ff fd8c 	bl	800f902 <__retarget_lock_release_recursive>
 800fdea:	e7e9      	b.n	800fdc0 <_vfiprintf_r+0x4c>
 800fdec:	2300      	movs	r3, #0
 800fdee:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf0:	2320      	movs	r3, #32
 800fdf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdfa:	2330      	movs	r3, #48	; 0x30
 800fdfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffc0 <_vfiprintf_r+0x24c>
 800fe00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe04:	f04f 0901 	mov.w	r9, #1
 800fe08:	4623      	mov	r3, r4
 800fe0a:	469a      	mov	sl, r3
 800fe0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe10:	b10a      	cbz	r2, 800fe16 <_vfiprintf_r+0xa2>
 800fe12:	2a25      	cmp	r2, #37	; 0x25
 800fe14:	d1f9      	bne.n	800fe0a <_vfiprintf_r+0x96>
 800fe16:	ebba 0b04 	subs.w	fp, sl, r4
 800fe1a:	d00b      	beq.n	800fe34 <_vfiprintf_r+0xc0>
 800fe1c:	465b      	mov	r3, fp
 800fe1e:	4622      	mov	r2, r4
 800fe20:	4629      	mov	r1, r5
 800fe22:	4630      	mov	r0, r6
 800fe24:	f7ff ff93 	bl	800fd4e <__sfputs_r>
 800fe28:	3001      	adds	r0, #1
 800fe2a:	f000 80aa 	beq.w	800ff82 <_vfiprintf_r+0x20e>
 800fe2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe30:	445a      	add	r2, fp
 800fe32:	9209      	str	r2, [sp, #36]	; 0x24
 800fe34:	f89a 3000 	ldrb.w	r3, [sl]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 80a2 	beq.w	800ff82 <_vfiprintf_r+0x20e>
 800fe3e:	2300      	movs	r3, #0
 800fe40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe48:	f10a 0a01 	add.w	sl, sl, #1
 800fe4c:	9304      	str	r3, [sp, #16]
 800fe4e:	9307      	str	r3, [sp, #28]
 800fe50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe54:	931a      	str	r3, [sp, #104]	; 0x68
 800fe56:	4654      	mov	r4, sl
 800fe58:	2205      	movs	r2, #5
 800fe5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5e:	4858      	ldr	r0, [pc, #352]	; (800ffc0 <_vfiprintf_r+0x24c>)
 800fe60:	f7f0 f9ce 	bl	8000200 <memchr>
 800fe64:	9a04      	ldr	r2, [sp, #16]
 800fe66:	b9d8      	cbnz	r0, 800fea0 <_vfiprintf_r+0x12c>
 800fe68:	06d1      	lsls	r1, r2, #27
 800fe6a:	bf44      	itt	mi
 800fe6c:	2320      	movmi	r3, #32
 800fe6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe72:	0713      	lsls	r3, r2, #28
 800fe74:	bf44      	itt	mi
 800fe76:	232b      	movmi	r3, #43	; 0x2b
 800fe78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe7c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe80:	2b2a      	cmp	r3, #42	; 0x2a
 800fe82:	d015      	beq.n	800feb0 <_vfiprintf_r+0x13c>
 800fe84:	9a07      	ldr	r2, [sp, #28]
 800fe86:	4654      	mov	r4, sl
 800fe88:	2000      	movs	r0, #0
 800fe8a:	f04f 0c0a 	mov.w	ip, #10
 800fe8e:	4621      	mov	r1, r4
 800fe90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe94:	3b30      	subs	r3, #48	; 0x30
 800fe96:	2b09      	cmp	r3, #9
 800fe98:	d94e      	bls.n	800ff38 <_vfiprintf_r+0x1c4>
 800fe9a:	b1b0      	cbz	r0, 800feca <_vfiprintf_r+0x156>
 800fe9c:	9207      	str	r2, [sp, #28]
 800fe9e:	e014      	b.n	800feca <_vfiprintf_r+0x156>
 800fea0:	eba0 0308 	sub.w	r3, r0, r8
 800fea4:	fa09 f303 	lsl.w	r3, r9, r3
 800fea8:	4313      	orrs	r3, r2
 800feaa:	9304      	str	r3, [sp, #16]
 800feac:	46a2      	mov	sl, r4
 800feae:	e7d2      	b.n	800fe56 <_vfiprintf_r+0xe2>
 800feb0:	9b03      	ldr	r3, [sp, #12]
 800feb2:	1d19      	adds	r1, r3, #4
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	9103      	str	r1, [sp, #12]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	bfbb      	ittet	lt
 800febc:	425b      	neglt	r3, r3
 800febe:	f042 0202 	orrlt.w	r2, r2, #2
 800fec2:	9307      	strge	r3, [sp, #28]
 800fec4:	9307      	strlt	r3, [sp, #28]
 800fec6:	bfb8      	it	lt
 800fec8:	9204      	strlt	r2, [sp, #16]
 800feca:	7823      	ldrb	r3, [r4, #0]
 800fecc:	2b2e      	cmp	r3, #46	; 0x2e
 800fece:	d10c      	bne.n	800feea <_vfiprintf_r+0x176>
 800fed0:	7863      	ldrb	r3, [r4, #1]
 800fed2:	2b2a      	cmp	r3, #42	; 0x2a
 800fed4:	d135      	bne.n	800ff42 <_vfiprintf_r+0x1ce>
 800fed6:	9b03      	ldr	r3, [sp, #12]
 800fed8:	1d1a      	adds	r2, r3, #4
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	9203      	str	r2, [sp, #12]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	bfb8      	it	lt
 800fee2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fee6:	3402      	adds	r4, #2
 800fee8:	9305      	str	r3, [sp, #20]
 800feea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffd0 <_vfiprintf_r+0x25c>
 800feee:	7821      	ldrb	r1, [r4, #0]
 800fef0:	2203      	movs	r2, #3
 800fef2:	4650      	mov	r0, sl
 800fef4:	f7f0 f984 	bl	8000200 <memchr>
 800fef8:	b140      	cbz	r0, 800ff0c <_vfiprintf_r+0x198>
 800fefa:	2340      	movs	r3, #64	; 0x40
 800fefc:	eba0 000a 	sub.w	r0, r0, sl
 800ff00:	fa03 f000 	lsl.w	r0, r3, r0
 800ff04:	9b04      	ldr	r3, [sp, #16]
 800ff06:	4303      	orrs	r3, r0
 800ff08:	3401      	adds	r4, #1
 800ff0a:	9304      	str	r3, [sp, #16]
 800ff0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff10:	482c      	ldr	r0, [pc, #176]	; (800ffc4 <_vfiprintf_r+0x250>)
 800ff12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff16:	2206      	movs	r2, #6
 800ff18:	f7f0 f972 	bl	8000200 <memchr>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d03f      	beq.n	800ffa0 <_vfiprintf_r+0x22c>
 800ff20:	4b29      	ldr	r3, [pc, #164]	; (800ffc8 <_vfiprintf_r+0x254>)
 800ff22:	bb1b      	cbnz	r3, 800ff6c <_vfiprintf_r+0x1f8>
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	3307      	adds	r3, #7
 800ff28:	f023 0307 	bic.w	r3, r3, #7
 800ff2c:	3308      	adds	r3, #8
 800ff2e:	9303      	str	r3, [sp, #12]
 800ff30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff32:	443b      	add	r3, r7
 800ff34:	9309      	str	r3, [sp, #36]	; 0x24
 800ff36:	e767      	b.n	800fe08 <_vfiprintf_r+0x94>
 800ff38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff3c:	460c      	mov	r4, r1
 800ff3e:	2001      	movs	r0, #1
 800ff40:	e7a5      	b.n	800fe8e <_vfiprintf_r+0x11a>
 800ff42:	2300      	movs	r3, #0
 800ff44:	3401      	adds	r4, #1
 800ff46:	9305      	str	r3, [sp, #20]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	f04f 0c0a 	mov.w	ip, #10
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff54:	3a30      	subs	r2, #48	; 0x30
 800ff56:	2a09      	cmp	r2, #9
 800ff58:	d903      	bls.n	800ff62 <_vfiprintf_r+0x1ee>
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d0c5      	beq.n	800feea <_vfiprintf_r+0x176>
 800ff5e:	9105      	str	r1, [sp, #20]
 800ff60:	e7c3      	b.n	800feea <_vfiprintf_r+0x176>
 800ff62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff66:	4604      	mov	r4, r0
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e7f0      	b.n	800ff4e <_vfiprintf_r+0x1da>
 800ff6c:	ab03      	add	r3, sp, #12
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	462a      	mov	r2, r5
 800ff72:	4b16      	ldr	r3, [pc, #88]	; (800ffcc <_vfiprintf_r+0x258>)
 800ff74:	a904      	add	r1, sp, #16
 800ff76:	4630      	mov	r0, r6
 800ff78:	f3af 8000 	nop.w
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	1c78      	adds	r0, r7, #1
 800ff80:	d1d6      	bne.n	800ff30 <_vfiprintf_r+0x1bc>
 800ff82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff84:	07d9      	lsls	r1, r3, #31
 800ff86:	d405      	bmi.n	800ff94 <_vfiprintf_r+0x220>
 800ff88:	89ab      	ldrh	r3, [r5, #12]
 800ff8a:	059a      	lsls	r2, r3, #22
 800ff8c:	d402      	bmi.n	800ff94 <_vfiprintf_r+0x220>
 800ff8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff90:	f7ff fcb7 	bl	800f902 <__retarget_lock_release_recursive>
 800ff94:	89ab      	ldrh	r3, [r5, #12]
 800ff96:	065b      	lsls	r3, r3, #25
 800ff98:	f53f af12 	bmi.w	800fdc0 <_vfiprintf_r+0x4c>
 800ff9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff9e:	e711      	b.n	800fdc4 <_vfiprintf_r+0x50>
 800ffa0:	ab03      	add	r3, sp, #12
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	462a      	mov	r2, r5
 800ffa6:	4b09      	ldr	r3, [pc, #36]	; (800ffcc <_vfiprintf_r+0x258>)
 800ffa8:	a904      	add	r1, sp, #16
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f000 f880 	bl	80100b0 <_printf_i>
 800ffb0:	e7e4      	b.n	800ff7c <_vfiprintf_r+0x208>
 800ffb2:	bf00      	nop
 800ffb4:	080148a8 	.word	0x080148a8
 800ffb8:	080148c8 	.word	0x080148c8
 800ffbc:	08014888 	.word	0x08014888
 800ffc0:	080148e8 	.word	0x080148e8
 800ffc4:	080148f2 	.word	0x080148f2
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	0800fd4f 	.word	0x0800fd4f
 800ffd0:	080148ee 	.word	0x080148ee

0800ffd4 <_printf_common>:
 800ffd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffd8:	4616      	mov	r6, r2
 800ffda:	4699      	mov	r9, r3
 800ffdc:	688a      	ldr	r2, [r1, #8]
 800ffde:	690b      	ldr	r3, [r1, #16]
 800ffe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ffe4:	4293      	cmp	r3, r2
 800ffe6:	bfb8      	it	lt
 800ffe8:	4613      	movlt	r3, r2
 800ffea:	6033      	str	r3, [r6, #0]
 800ffec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fff0:	4607      	mov	r7, r0
 800fff2:	460c      	mov	r4, r1
 800fff4:	b10a      	cbz	r2, 800fffa <_printf_common+0x26>
 800fff6:	3301      	adds	r3, #1
 800fff8:	6033      	str	r3, [r6, #0]
 800fffa:	6823      	ldr	r3, [r4, #0]
 800fffc:	0699      	lsls	r1, r3, #26
 800fffe:	bf42      	ittt	mi
 8010000:	6833      	ldrmi	r3, [r6, #0]
 8010002:	3302      	addmi	r3, #2
 8010004:	6033      	strmi	r3, [r6, #0]
 8010006:	6825      	ldr	r5, [r4, #0]
 8010008:	f015 0506 	ands.w	r5, r5, #6
 801000c:	d106      	bne.n	801001c <_printf_common+0x48>
 801000e:	f104 0a19 	add.w	sl, r4, #25
 8010012:	68e3      	ldr	r3, [r4, #12]
 8010014:	6832      	ldr	r2, [r6, #0]
 8010016:	1a9b      	subs	r3, r3, r2
 8010018:	42ab      	cmp	r3, r5
 801001a:	dc26      	bgt.n	801006a <_printf_common+0x96>
 801001c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010020:	1e13      	subs	r3, r2, #0
 8010022:	6822      	ldr	r2, [r4, #0]
 8010024:	bf18      	it	ne
 8010026:	2301      	movne	r3, #1
 8010028:	0692      	lsls	r2, r2, #26
 801002a:	d42b      	bmi.n	8010084 <_printf_common+0xb0>
 801002c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010030:	4649      	mov	r1, r9
 8010032:	4638      	mov	r0, r7
 8010034:	47c0      	blx	r8
 8010036:	3001      	adds	r0, #1
 8010038:	d01e      	beq.n	8010078 <_printf_common+0xa4>
 801003a:	6823      	ldr	r3, [r4, #0]
 801003c:	68e5      	ldr	r5, [r4, #12]
 801003e:	6832      	ldr	r2, [r6, #0]
 8010040:	f003 0306 	and.w	r3, r3, #6
 8010044:	2b04      	cmp	r3, #4
 8010046:	bf08      	it	eq
 8010048:	1aad      	subeq	r5, r5, r2
 801004a:	68a3      	ldr	r3, [r4, #8]
 801004c:	6922      	ldr	r2, [r4, #16]
 801004e:	bf0c      	ite	eq
 8010050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010054:	2500      	movne	r5, #0
 8010056:	4293      	cmp	r3, r2
 8010058:	bfc4      	itt	gt
 801005a:	1a9b      	subgt	r3, r3, r2
 801005c:	18ed      	addgt	r5, r5, r3
 801005e:	2600      	movs	r6, #0
 8010060:	341a      	adds	r4, #26
 8010062:	42b5      	cmp	r5, r6
 8010064:	d11a      	bne.n	801009c <_printf_common+0xc8>
 8010066:	2000      	movs	r0, #0
 8010068:	e008      	b.n	801007c <_printf_common+0xa8>
 801006a:	2301      	movs	r3, #1
 801006c:	4652      	mov	r2, sl
 801006e:	4649      	mov	r1, r9
 8010070:	4638      	mov	r0, r7
 8010072:	47c0      	blx	r8
 8010074:	3001      	adds	r0, #1
 8010076:	d103      	bne.n	8010080 <_printf_common+0xac>
 8010078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801007c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010080:	3501      	adds	r5, #1
 8010082:	e7c6      	b.n	8010012 <_printf_common+0x3e>
 8010084:	18e1      	adds	r1, r4, r3
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	2030      	movs	r0, #48	; 0x30
 801008a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801008e:	4422      	add	r2, r4
 8010090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010098:	3302      	adds	r3, #2
 801009a:	e7c7      	b.n	801002c <_printf_common+0x58>
 801009c:	2301      	movs	r3, #1
 801009e:	4622      	mov	r2, r4
 80100a0:	4649      	mov	r1, r9
 80100a2:	4638      	mov	r0, r7
 80100a4:	47c0      	blx	r8
 80100a6:	3001      	adds	r0, #1
 80100a8:	d0e6      	beq.n	8010078 <_printf_common+0xa4>
 80100aa:	3601      	adds	r6, #1
 80100ac:	e7d9      	b.n	8010062 <_printf_common+0x8e>
	...

080100b0 <_printf_i>:
 80100b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100b4:	460c      	mov	r4, r1
 80100b6:	4691      	mov	r9, r2
 80100b8:	7e27      	ldrb	r7, [r4, #24]
 80100ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100bc:	2f78      	cmp	r7, #120	; 0x78
 80100be:	4680      	mov	r8, r0
 80100c0:	469a      	mov	sl, r3
 80100c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100c6:	d807      	bhi.n	80100d8 <_printf_i+0x28>
 80100c8:	2f62      	cmp	r7, #98	; 0x62
 80100ca:	d80a      	bhi.n	80100e2 <_printf_i+0x32>
 80100cc:	2f00      	cmp	r7, #0
 80100ce:	f000 80d8 	beq.w	8010282 <_printf_i+0x1d2>
 80100d2:	2f58      	cmp	r7, #88	; 0x58
 80100d4:	f000 80a3 	beq.w	801021e <_printf_i+0x16e>
 80100d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80100dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80100e0:	e03a      	b.n	8010158 <_printf_i+0xa8>
 80100e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100e6:	2b15      	cmp	r3, #21
 80100e8:	d8f6      	bhi.n	80100d8 <_printf_i+0x28>
 80100ea:	a001      	add	r0, pc, #4	; (adr r0, 80100f0 <_printf_i+0x40>)
 80100ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80100f0:	08010149 	.word	0x08010149
 80100f4:	0801015d 	.word	0x0801015d
 80100f8:	080100d9 	.word	0x080100d9
 80100fc:	080100d9 	.word	0x080100d9
 8010100:	080100d9 	.word	0x080100d9
 8010104:	080100d9 	.word	0x080100d9
 8010108:	0801015d 	.word	0x0801015d
 801010c:	080100d9 	.word	0x080100d9
 8010110:	080100d9 	.word	0x080100d9
 8010114:	080100d9 	.word	0x080100d9
 8010118:	080100d9 	.word	0x080100d9
 801011c:	08010269 	.word	0x08010269
 8010120:	0801018d 	.word	0x0801018d
 8010124:	0801024b 	.word	0x0801024b
 8010128:	080100d9 	.word	0x080100d9
 801012c:	080100d9 	.word	0x080100d9
 8010130:	0801028b 	.word	0x0801028b
 8010134:	080100d9 	.word	0x080100d9
 8010138:	0801018d 	.word	0x0801018d
 801013c:	080100d9 	.word	0x080100d9
 8010140:	080100d9 	.word	0x080100d9
 8010144:	08010253 	.word	0x08010253
 8010148:	680b      	ldr	r3, [r1, #0]
 801014a:	1d1a      	adds	r2, r3, #4
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	600a      	str	r2, [r1, #0]
 8010150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010158:	2301      	movs	r3, #1
 801015a:	e0a3      	b.n	80102a4 <_printf_i+0x1f4>
 801015c:	6825      	ldr	r5, [r4, #0]
 801015e:	6808      	ldr	r0, [r1, #0]
 8010160:	062e      	lsls	r6, r5, #24
 8010162:	f100 0304 	add.w	r3, r0, #4
 8010166:	d50a      	bpl.n	801017e <_printf_i+0xce>
 8010168:	6805      	ldr	r5, [r0, #0]
 801016a:	600b      	str	r3, [r1, #0]
 801016c:	2d00      	cmp	r5, #0
 801016e:	da03      	bge.n	8010178 <_printf_i+0xc8>
 8010170:	232d      	movs	r3, #45	; 0x2d
 8010172:	426d      	negs	r5, r5
 8010174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010178:	485e      	ldr	r0, [pc, #376]	; (80102f4 <_printf_i+0x244>)
 801017a:	230a      	movs	r3, #10
 801017c:	e019      	b.n	80101b2 <_printf_i+0x102>
 801017e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010182:	6805      	ldr	r5, [r0, #0]
 8010184:	600b      	str	r3, [r1, #0]
 8010186:	bf18      	it	ne
 8010188:	b22d      	sxthne	r5, r5
 801018a:	e7ef      	b.n	801016c <_printf_i+0xbc>
 801018c:	680b      	ldr	r3, [r1, #0]
 801018e:	6825      	ldr	r5, [r4, #0]
 8010190:	1d18      	adds	r0, r3, #4
 8010192:	6008      	str	r0, [r1, #0]
 8010194:	0628      	lsls	r0, r5, #24
 8010196:	d501      	bpl.n	801019c <_printf_i+0xec>
 8010198:	681d      	ldr	r5, [r3, #0]
 801019a:	e002      	b.n	80101a2 <_printf_i+0xf2>
 801019c:	0669      	lsls	r1, r5, #25
 801019e:	d5fb      	bpl.n	8010198 <_printf_i+0xe8>
 80101a0:	881d      	ldrh	r5, [r3, #0]
 80101a2:	4854      	ldr	r0, [pc, #336]	; (80102f4 <_printf_i+0x244>)
 80101a4:	2f6f      	cmp	r7, #111	; 0x6f
 80101a6:	bf0c      	ite	eq
 80101a8:	2308      	moveq	r3, #8
 80101aa:	230a      	movne	r3, #10
 80101ac:	2100      	movs	r1, #0
 80101ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101b2:	6866      	ldr	r6, [r4, #4]
 80101b4:	60a6      	str	r6, [r4, #8]
 80101b6:	2e00      	cmp	r6, #0
 80101b8:	bfa2      	ittt	ge
 80101ba:	6821      	ldrge	r1, [r4, #0]
 80101bc:	f021 0104 	bicge.w	r1, r1, #4
 80101c0:	6021      	strge	r1, [r4, #0]
 80101c2:	b90d      	cbnz	r5, 80101c8 <_printf_i+0x118>
 80101c4:	2e00      	cmp	r6, #0
 80101c6:	d04d      	beq.n	8010264 <_printf_i+0x1b4>
 80101c8:	4616      	mov	r6, r2
 80101ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80101ce:	fb03 5711 	mls	r7, r3, r1, r5
 80101d2:	5dc7      	ldrb	r7, [r0, r7]
 80101d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101d8:	462f      	mov	r7, r5
 80101da:	42bb      	cmp	r3, r7
 80101dc:	460d      	mov	r5, r1
 80101de:	d9f4      	bls.n	80101ca <_printf_i+0x11a>
 80101e0:	2b08      	cmp	r3, #8
 80101e2:	d10b      	bne.n	80101fc <_printf_i+0x14c>
 80101e4:	6823      	ldr	r3, [r4, #0]
 80101e6:	07df      	lsls	r7, r3, #31
 80101e8:	d508      	bpl.n	80101fc <_printf_i+0x14c>
 80101ea:	6923      	ldr	r3, [r4, #16]
 80101ec:	6861      	ldr	r1, [r4, #4]
 80101ee:	4299      	cmp	r1, r3
 80101f0:	bfde      	ittt	le
 80101f2:	2330      	movle	r3, #48	; 0x30
 80101f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80101fc:	1b92      	subs	r2, r2, r6
 80101fe:	6122      	str	r2, [r4, #16]
 8010200:	f8cd a000 	str.w	sl, [sp]
 8010204:	464b      	mov	r3, r9
 8010206:	aa03      	add	r2, sp, #12
 8010208:	4621      	mov	r1, r4
 801020a:	4640      	mov	r0, r8
 801020c:	f7ff fee2 	bl	800ffd4 <_printf_common>
 8010210:	3001      	adds	r0, #1
 8010212:	d14c      	bne.n	80102ae <_printf_i+0x1fe>
 8010214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010218:	b004      	add	sp, #16
 801021a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021e:	4835      	ldr	r0, [pc, #212]	; (80102f4 <_printf_i+0x244>)
 8010220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	680e      	ldr	r6, [r1, #0]
 8010228:	061f      	lsls	r7, r3, #24
 801022a:	f856 5b04 	ldr.w	r5, [r6], #4
 801022e:	600e      	str	r6, [r1, #0]
 8010230:	d514      	bpl.n	801025c <_printf_i+0x1ac>
 8010232:	07d9      	lsls	r1, r3, #31
 8010234:	bf44      	itt	mi
 8010236:	f043 0320 	orrmi.w	r3, r3, #32
 801023a:	6023      	strmi	r3, [r4, #0]
 801023c:	b91d      	cbnz	r5, 8010246 <_printf_i+0x196>
 801023e:	6823      	ldr	r3, [r4, #0]
 8010240:	f023 0320 	bic.w	r3, r3, #32
 8010244:	6023      	str	r3, [r4, #0]
 8010246:	2310      	movs	r3, #16
 8010248:	e7b0      	b.n	80101ac <_printf_i+0xfc>
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	f043 0320 	orr.w	r3, r3, #32
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	2378      	movs	r3, #120	; 0x78
 8010254:	4828      	ldr	r0, [pc, #160]	; (80102f8 <_printf_i+0x248>)
 8010256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801025a:	e7e3      	b.n	8010224 <_printf_i+0x174>
 801025c:	065e      	lsls	r6, r3, #25
 801025e:	bf48      	it	mi
 8010260:	b2ad      	uxthmi	r5, r5
 8010262:	e7e6      	b.n	8010232 <_printf_i+0x182>
 8010264:	4616      	mov	r6, r2
 8010266:	e7bb      	b.n	80101e0 <_printf_i+0x130>
 8010268:	680b      	ldr	r3, [r1, #0]
 801026a:	6826      	ldr	r6, [r4, #0]
 801026c:	6960      	ldr	r0, [r4, #20]
 801026e:	1d1d      	adds	r5, r3, #4
 8010270:	600d      	str	r5, [r1, #0]
 8010272:	0635      	lsls	r5, r6, #24
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	d501      	bpl.n	801027c <_printf_i+0x1cc>
 8010278:	6018      	str	r0, [r3, #0]
 801027a:	e002      	b.n	8010282 <_printf_i+0x1d2>
 801027c:	0671      	lsls	r1, r6, #25
 801027e:	d5fb      	bpl.n	8010278 <_printf_i+0x1c8>
 8010280:	8018      	strh	r0, [r3, #0]
 8010282:	2300      	movs	r3, #0
 8010284:	6123      	str	r3, [r4, #16]
 8010286:	4616      	mov	r6, r2
 8010288:	e7ba      	b.n	8010200 <_printf_i+0x150>
 801028a:	680b      	ldr	r3, [r1, #0]
 801028c:	1d1a      	adds	r2, r3, #4
 801028e:	600a      	str	r2, [r1, #0]
 8010290:	681e      	ldr	r6, [r3, #0]
 8010292:	6862      	ldr	r2, [r4, #4]
 8010294:	2100      	movs	r1, #0
 8010296:	4630      	mov	r0, r6
 8010298:	f7ef ffb2 	bl	8000200 <memchr>
 801029c:	b108      	cbz	r0, 80102a2 <_printf_i+0x1f2>
 801029e:	1b80      	subs	r0, r0, r6
 80102a0:	6060      	str	r0, [r4, #4]
 80102a2:	6863      	ldr	r3, [r4, #4]
 80102a4:	6123      	str	r3, [r4, #16]
 80102a6:	2300      	movs	r3, #0
 80102a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102ac:	e7a8      	b.n	8010200 <_printf_i+0x150>
 80102ae:	6923      	ldr	r3, [r4, #16]
 80102b0:	4632      	mov	r2, r6
 80102b2:	4649      	mov	r1, r9
 80102b4:	4640      	mov	r0, r8
 80102b6:	47d0      	blx	sl
 80102b8:	3001      	adds	r0, #1
 80102ba:	d0ab      	beq.n	8010214 <_printf_i+0x164>
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	079b      	lsls	r3, r3, #30
 80102c0:	d413      	bmi.n	80102ea <_printf_i+0x23a>
 80102c2:	68e0      	ldr	r0, [r4, #12]
 80102c4:	9b03      	ldr	r3, [sp, #12]
 80102c6:	4298      	cmp	r0, r3
 80102c8:	bfb8      	it	lt
 80102ca:	4618      	movlt	r0, r3
 80102cc:	e7a4      	b.n	8010218 <_printf_i+0x168>
 80102ce:	2301      	movs	r3, #1
 80102d0:	4632      	mov	r2, r6
 80102d2:	4649      	mov	r1, r9
 80102d4:	4640      	mov	r0, r8
 80102d6:	47d0      	blx	sl
 80102d8:	3001      	adds	r0, #1
 80102da:	d09b      	beq.n	8010214 <_printf_i+0x164>
 80102dc:	3501      	adds	r5, #1
 80102de:	68e3      	ldr	r3, [r4, #12]
 80102e0:	9903      	ldr	r1, [sp, #12]
 80102e2:	1a5b      	subs	r3, r3, r1
 80102e4:	42ab      	cmp	r3, r5
 80102e6:	dcf2      	bgt.n	80102ce <_printf_i+0x21e>
 80102e8:	e7eb      	b.n	80102c2 <_printf_i+0x212>
 80102ea:	2500      	movs	r5, #0
 80102ec:	f104 0619 	add.w	r6, r4, #25
 80102f0:	e7f5      	b.n	80102de <_printf_i+0x22e>
 80102f2:	bf00      	nop
 80102f4:	080148f9 	.word	0x080148f9
 80102f8:	0801490a 	.word	0x0801490a

080102fc <_sbrk_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d06      	ldr	r5, [pc, #24]	; (8010318 <_sbrk_r+0x1c>)
 8010300:	2300      	movs	r3, #0
 8010302:	4604      	mov	r4, r0
 8010304:	4608      	mov	r0, r1
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	f7f0 fbbe 	bl	8000a88 <_sbrk>
 801030c:	1c43      	adds	r3, r0, #1
 801030e:	d102      	bne.n	8010316 <_sbrk_r+0x1a>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	b103      	cbz	r3, 8010316 <_sbrk_r+0x1a>
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	20008ef4 	.word	0x20008ef4

0801031c <__sread>:
 801031c:	b510      	push	{r4, lr}
 801031e:	460c      	mov	r4, r1
 8010320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010324:	f000 fa92 	bl	801084c <_read_r>
 8010328:	2800      	cmp	r0, #0
 801032a:	bfab      	itete	ge
 801032c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801032e:	89a3      	ldrhlt	r3, [r4, #12]
 8010330:	181b      	addge	r3, r3, r0
 8010332:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010336:	bfac      	ite	ge
 8010338:	6563      	strge	r3, [r4, #84]	; 0x54
 801033a:	81a3      	strhlt	r3, [r4, #12]
 801033c:	bd10      	pop	{r4, pc}

0801033e <__swrite>:
 801033e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010342:	461f      	mov	r7, r3
 8010344:	898b      	ldrh	r3, [r1, #12]
 8010346:	05db      	lsls	r3, r3, #23
 8010348:	4605      	mov	r5, r0
 801034a:	460c      	mov	r4, r1
 801034c:	4616      	mov	r6, r2
 801034e:	d505      	bpl.n	801035c <__swrite+0x1e>
 8010350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010354:	2302      	movs	r3, #2
 8010356:	2200      	movs	r2, #0
 8010358:	f000 f9d0 	bl	80106fc <_lseek_r>
 801035c:	89a3      	ldrh	r3, [r4, #12]
 801035e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010362:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010366:	81a3      	strh	r3, [r4, #12]
 8010368:	4632      	mov	r2, r6
 801036a:	463b      	mov	r3, r7
 801036c:	4628      	mov	r0, r5
 801036e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010372:	f000 b869 	b.w	8010448 <_write_r>

08010376 <__sseek>:
 8010376:	b510      	push	{r4, lr}
 8010378:	460c      	mov	r4, r1
 801037a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801037e:	f000 f9bd 	bl	80106fc <_lseek_r>
 8010382:	1c43      	adds	r3, r0, #1
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	bf15      	itete	ne
 8010388:	6560      	strne	r0, [r4, #84]	; 0x54
 801038a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801038e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010392:	81a3      	strheq	r3, [r4, #12]
 8010394:	bf18      	it	ne
 8010396:	81a3      	strhne	r3, [r4, #12]
 8010398:	bd10      	pop	{r4, pc}

0801039a <__sclose>:
 801039a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039e:	f000 b8db 	b.w	8010558 <_close_r>
	...

080103a4 <__swbuf_r>:
 80103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a6:	460e      	mov	r6, r1
 80103a8:	4614      	mov	r4, r2
 80103aa:	4605      	mov	r5, r0
 80103ac:	b118      	cbz	r0, 80103b6 <__swbuf_r+0x12>
 80103ae:	6983      	ldr	r3, [r0, #24]
 80103b0:	b90b      	cbnz	r3, 80103b6 <__swbuf_r+0x12>
 80103b2:	f7ff f9f5 	bl	800f7a0 <__sinit>
 80103b6:	4b21      	ldr	r3, [pc, #132]	; (801043c <__swbuf_r+0x98>)
 80103b8:	429c      	cmp	r4, r3
 80103ba:	d12b      	bne.n	8010414 <__swbuf_r+0x70>
 80103bc:	686c      	ldr	r4, [r5, #4]
 80103be:	69a3      	ldr	r3, [r4, #24]
 80103c0:	60a3      	str	r3, [r4, #8]
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	071a      	lsls	r2, r3, #28
 80103c6:	d52f      	bpl.n	8010428 <__swbuf_r+0x84>
 80103c8:	6923      	ldr	r3, [r4, #16]
 80103ca:	b36b      	cbz	r3, 8010428 <__swbuf_r+0x84>
 80103cc:	6923      	ldr	r3, [r4, #16]
 80103ce:	6820      	ldr	r0, [r4, #0]
 80103d0:	1ac0      	subs	r0, r0, r3
 80103d2:	6963      	ldr	r3, [r4, #20]
 80103d4:	b2f6      	uxtb	r6, r6
 80103d6:	4283      	cmp	r3, r0
 80103d8:	4637      	mov	r7, r6
 80103da:	dc04      	bgt.n	80103e6 <__swbuf_r+0x42>
 80103dc:	4621      	mov	r1, r4
 80103de:	4628      	mov	r0, r5
 80103e0:	f000 f950 	bl	8010684 <_fflush_r>
 80103e4:	bb30      	cbnz	r0, 8010434 <__swbuf_r+0x90>
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	3b01      	subs	r3, #1
 80103ea:	60a3      	str	r3, [r4, #8]
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	1c5a      	adds	r2, r3, #1
 80103f0:	6022      	str	r2, [r4, #0]
 80103f2:	701e      	strb	r6, [r3, #0]
 80103f4:	6963      	ldr	r3, [r4, #20]
 80103f6:	3001      	adds	r0, #1
 80103f8:	4283      	cmp	r3, r0
 80103fa:	d004      	beq.n	8010406 <__swbuf_r+0x62>
 80103fc:	89a3      	ldrh	r3, [r4, #12]
 80103fe:	07db      	lsls	r3, r3, #31
 8010400:	d506      	bpl.n	8010410 <__swbuf_r+0x6c>
 8010402:	2e0a      	cmp	r6, #10
 8010404:	d104      	bne.n	8010410 <__swbuf_r+0x6c>
 8010406:	4621      	mov	r1, r4
 8010408:	4628      	mov	r0, r5
 801040a:	f000 f93b 	bl	8010684 <_fflush_r>
 801040e:	b988      	cbnz	r0, 8010434 <__swbuf_r+0x90>
 8010410:	4638      	mov	r0, r7
 8010412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010414:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <__swbuf_r+0x9c>)
 8010416:	429c      	cmp	r4, r3
 8010418:	d101      	bne.n	801041e <__swbuf_r+0x7a>
 801041a:	68ac      	ldr	r4, [r5, #8]
 801041c:	e7cf      	b.n	80103be <__swbuf_r+0x1a>
 801041e:	4b09      	ldr	r3, [pc, #36]	; (8010444 <__swbuf_r+0xa0>)
 8010420:	429c      	cmp	r4, r3
 8010422:	bf08      	it	eq
 8010424:	68ec      	ldreq	r4, [r5, #12]
 8010426:	e7ca      	b.n	80103be <__swbuf_r+0x1a>
 8010428:	4621      	mov	r1, r4
 801042a:	4628      	mov	r0, r5
 801042c:	f000 f81e 	bl	801046c <__swsetup_r>
 8010430:	2800      	cmp	r0, #0
 8010432:	d0cb      	beq.n	80103cc <__swbuf_r+0x28>
 8010434:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010438:	e7ea      	b.n	8010410 <__swbuf_r+0x6c>
 801043a:	bf00      	nop
 801043c:	080148a8 	.word	0x080148a8
 8010440:	080148c8 	.word	0x080148c8
 8010444:	08014888 	.word	0x08014888

08010448 <_write_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d07      	ldr	r5, [pc, #28]	; (8010468 <_write_r+0x20>)
 801044c:	4604      	mov	r4, r0
 801044e:	4608      	mov	r0, r1
 8010450:	4611      	mov	r1, r2
 8010452:	2200      	movs	r2, #0
 8010454:	602a      	str	r2, [r5, #0]
 8010456:	461a      	mov	r2, r3
 8010458:	f7f0 fac5 	bl	80009e6 <_write>
 801045c:	1c43      	adds	r3, r0, #1
 801045e:	d102      	bne.n	8010466 <_write_r+0x1e>
 8010460:	682b      	ldr	r3, [r5, #0]
 8010462:	b103      	cbz	r3, 8010466 <_write_r+0x1e>
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	20008ef4 	.word	0x20008ef4

0801046c <__swsetup_r>:
 801046c:	4b32      	ldr	r3, [pc, #200]	; (8010538 <__swsetup_r+0xcc>)
 801046e:	b570      	push	{r4, r5, r6, lr}
 8010470:	681d      	ldr	r5, [r3, #0]
 8010472:	4606      	mov	r6, r0
 8010474:	460c      	mov	r4, r1
 8010476:	b125      	cbz	r5, 8010482 <__swsetup_r+0x16>
 8010478:	69ab      	ldr	r3, [r5, #24]
 801047a:	b913      	cbnz	r3, 8010482 <__swsetup_r+0x16>
 801047c:	4628      	mov	r0, r5
 801047e:	f7ff f98f 	bl	800f7a0 <__sinit>
 8010482:	4b2e      	ldr	r3, [pc, #184]	; (801053c <__swsetup_r+0xd0>)
 8010484:	429c      	cmp	r4, r3
 8010486:	d10f      	bne.n	80104a8 <__swsetup_r+0x3c>
 8010488:	686c      	ldr	r4, [r5, #4]
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010490:	0719      	lsls	r1, r3, #28
 8010492:	d42c      	bmi.n	80104ee <__swsetup_r+0x82>
 8010494:	06dd      	lsls	r5, r3, #27
 8010496:	d411      	bmi.n	80104bc <__swsetup_r+0x50>
 8010498:	2309      	movs	r3, #9
 801049a:	6033      	str	r3, [r6, #0]
 801049c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80104a0:	81a3      	strh	r3, [r4, #12]
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104a6:	e03e      	b.n	8010526 <__swsetup_r+0xba>
 80104a8:	4b25      	ldr	r3, [pc, #148]	; (8010540 <__swsetup_r+0xd4>)
 80104aa:	429c      	cmp	r4, r3
 80104ac:	d101      	bne.n	80104b2 <__swsetup_r+0x46>
 80104ae:	68ac      	ldr	r4, [r5, #8]
 80104b0:	e7eb      	b.n	801048a <__swsetup_r+0x1e>
 80104b2:	4b24      	ldr	r3, [pc, #144]	; (8010544 <__swsetup_r+0xd8>)
 80104b4:	429c      	cmp	r4, r3
 80104b6:	bf08      	it	eq
 80104b8:	68ec      	ldreq	r4, [r5, #12]
 80104ba:	e7e6      	b.n	801048a <__swsetup_r+0x1e>
 80104bc:	0758      	lsls	r0, r3, #29
 80104be:	d512      	bpl.n	80104e6 <__swsetup_r+0x7a>
 80104c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104c2:	b141      	cbz	r1, 80104d6 <__swsetup_r+0x6a>
 80104c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104c8:	4299      	cmp	r1, r3
 80104ca:	d002      	beq.n	80104d2 <__swsetup_r+0x66>
 80104cc:	4630      	mov	r0, r6
 80104ce:	f7ff fa21 	bl	800f914 <_free_r>
 80104d2:	2300      	movs	r3, #0
 80104d4:	6363      	str	r3, [r4, #52]	; 0x34
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104dc:	81a3      	strh	r3, [r4, #12]
 80104de:	2300      	movs	r3, #0
 80104e0:	6063      	str	r3, [r4, #4]
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	f043 0308 	orr.w	r3, r3, #8
 80104ec:	81a3      	strh	r3, [r4, #12]
 80104ee:	6923      	ldr	r3, [r4, #16]
 80104f0:	b94b      	cbnz	r3, 8010506 <__swsetup_r+0x9a>
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104fc:	d003      	beq.n	8010506 <__swsetup_r+0x9a>
 80104fe:	4621      	mov	r1, r4
 8010500:	4630      	mov	r0, r6
 8010502:	f000 f931 	bl	8010768 <__smakebuf_r>
 8010506:	89a0      	ldrh	r0, [r4, #12]
 8010508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801050c:	f010 0301 	ands.w	r3, r0, #1
 8010510:	d00a      	beq.n	8010528 <__swsetup_r+0xbc>
 8010512:	2300      	movs	r3, #0
 8010514:	60a3      	str	r3, [r4, #8]
 8010516:	6963      	ldr	r3, [r4, #20]
 8010518:	425b      	negs	r3, r3
 801051a:	61a3      	str	r3, [r4, #24]
 801051c:	6923      	ldr	r3, [r4, #16]
 801051e:	b943      	cbnz	r3, 8010532 <__swsetup_r+0xc6>
 8010520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010524:	d1ba      	bne.n	801049c <__swsetup_r+0x30>
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	0781      	lsls	r1, r0, #30
 801052a:	bf58      	it	pl
 801052c:	6963      	ldrpl	r3, [r4, #20]
 801052e:	60a3      	str	r3, [r4, #8]
 8010530:	e7f4      	b.n	801051c <__swsetup_r+0xb0>
 8010532:	2000      	movs	r0, #0
 8010534:	e7f7      	b.n	8010526 <__swsetup_r+0xba>
 8010536:	bf00      	nop
 8010538:	20000024 	.word	0x20000024
 801053c:	080148a8 	.word	0x080148a8
 8010540:	080148c8 	.word	0x080148c8
 8010544:	08014888 	.word	0x08014888

08010548 <abort>:
 8010548:	b508      	push	{r3, lr}
 801054a:	2006      	movs	r0, #6
 801054c:	f000 f9b8 	bl	80108c0 <raise>
 8010550:	2001      	movs	r0, #1
 8010552:	f7f0 fa21 	bl	8000998 <_exit>
	...

08010558 <_close_r>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4d06      	ldr	r5, [pc, #24]	; (8010574 <_close_r+0x1c>)
 801055c:	2300      	movs	r3, #0
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	602b      	str	r3, [r5, #0]
 8010564:	f7f0 fa5b 	bl	8000a1e <_close>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	d102      	bne.n	8010572 <_close_r+0x1a>
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	b103      	cbz	r3, 8010572 <_close_r+0x1a>
 8010570:	6023      	str	r3, [r4, #0]
 8010572:	bd38      	pop	{r3, r4, r5, pc}
 8010574:	20008ef4 	.word	0x20008ef4

08010578 <__sflush_r>:
 8010578:	898a      	ldrh	r2, [r1, #12]
 801057a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057e:	4605      	mov	r5, r0
 8010580:	0710      	lsls	r0, r2, #28
 8010582:	460c      	mov	r4, r1
 8010584:	d458      	bmi.n	8010638 <__sflush_r+0xc0>
 8010586:	684b      	ldr	r3, [r1, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	dc05      	bgt.n	8010598 <__sflush_r+0x20>
 801058c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801058e:	2b00      	cmp	r3, #0
 8010590:	dc02      	bgt.n	8010598 <__sflush_r+0x20>
 8010592:	2000      	movs	r0, #0
 8010594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801059a:	2e00      	cmp	r6, #0
 801059c:	d0f9      	beq.n	8010592 <__sflush_r+0x1a>
 801059e:	2300      	movs	r3, #0
 80105a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105a4:	682f      	ldr	r7, [r5, #0]
 80105a6:	602b      	str	r3, [r5, #0]
 80105a8:	d032      	beq.n	8010610 <__sflush_r+0x98>
 80105aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105ac:	89a3      	ldrh	r3, [r4, #12]
 80105ae:	075a      	lsls	r2, r3, #29
 80105b0:	d505      	bpl.n	80105be <__sflush_r+0x46>
 80105b2:	6863      	ldr	r3, [r4, #4]
 80105b4:	1ac0      	subs	r0, r0, r3
 80105b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105b8:	b10b      	cbz	r3, 80105be <__sflush_r+0x46>
 80105ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105bc:	1ac0      	subs	r0, r0, r3
 80105be:	2300      	movs	r3, #0
 80105c0:	4602      	mov	r2, r0
 80105c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105c4:	6a21      	ldr	r1, [r4, #32]
 80105c6:	4628      	mov	r0, r5
 80105c8:	47b0      	blx	r6
 80105ca:	1c43      	adds	r3, r0, #1
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	d106      	bne.n	80105de <__sflush_r+0x66>
 80105d0:	6829      	ldr	r1, [r5, #0]
 80105d2:	291d      	cmp	r1, #29
 80105d4:	d82c      	bhi.n	8010630 <__sflush_r+0xb8>
 80105d6:	4a2a      	ldr	r2, [pc, #168]	; (8010680 <__sflush_r+0x108>)
 80105d8:	40ca      	lsrs	r2, r1
 80105da:	07d6      	lsls	r6, r2, #31
 80105dc:	d528      	bpl.n	8010630 <__sflush_r+0xb8>
 80105de:	2200      	movs	r2, #0
 80105e0:	6062      	str	r2, [r4, #4]
 80105e2:	04d9      	lsls	r1, r3, #19
 80105e4:	6922      	ldr	r2, [r4, #16]
 80105e6:	6022      	str	r2, [r4, #0]
 80105e8:	d504      	bpl.n	80105f4 <__sflush_r+0x7c>
 80105ea:	1c42      	adds	r2, r0, #1
 80105ec:	d101      	bne.n	80105f2 <__sflush_r+0x7a>
 80105ee:	682b      	ldr	r3, [r5, #0]
 80105f0:	b903      	cbnz	r3, 80105f4 <__sflush_r+0x7c>
 80105f2:	6560      	str	r0, [r4, #84]	; 0x54
 80105f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105f6:	602f      	str	r7, [r5, #0]
 80105f8:	2900      	cmp	r1, #0
 80105fa:	d0ca      	beq.n	8010592 <__sflush_r+0x1a>
 80105fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010600:	4299      	cmp	r1, r3
 8010602:	d002      	beq.n	801060a <__sflush_r+0x92>
 8010604:	4628      	mov	r0, r5
 8010606:	f7ff f985 	bl	800f914 <_free_r>
 801060a:	2000      	movs	r0, #0
 801060c:	6360      	str	r0, [r4, #52]	; 0x34
 801060e:	e7c1      	b.n	8010594 <__sflush_r+0x1c>
 8010610:	6a21      	ldr	r1, [r4, #32]
 8010612:	2301      	movs	r3, #1
 8010614:	4628      	mov	r0, r5
 8010616:	47b0      	blx	r6
 8010618:	1c41      	adds	r1, r0, #1
 801061a:	d1c7      	bne.n	80105ac <__sflush_r+0x34>
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d0c4      	beq.n	80105ac <__sflush_r+0x34>
 8010622:	2b1d      	cmp	r3, #29
 8010624:	d001      	beq.n	801062a <__sflush_r+0xb2>
 8010626:	2b16      	cmp	r3, #22
 8010628:	d101      	bne.n	801062e <__sflush_r+0xb6>
 801062a:	602f      	str	r7, [r5, #0]
 801062c:	e7b1      	b.n	8010592 <__sflush_r+0x1a>
 801062e:	89a3      	ldrh	r3, [r4, #12]
 8010630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010634:	81a3      	strh	r3, [r4, #12]
 8010636:	e7ad      	b.n	8010594 <__sflush_r+0x1c>
 8010638:	690f      	ldr	r7, [r1, #16]
 801063a:	2f00      	cmp	r7, #0
 801063c:	d0a9      	beq.n	8010592 <__sflush_r+0x1a>
 801063e:	0793      	lsls	r3, r2, #30
 8010640:	680e      	ldr	r6, [r1, #0]
 8010642:	bf08      	it	eq
 8010644:	694b      	ldreq	r3, [r1, #20]
 8010646:	600f      	str	r7, [r1, #0]
 8010648:	bf18      	it	ne
 801064a:	2300      	movne	r3, #0
 801064c:	eba6 0807 	sub.w	r8, r6, r7
 8010650:	608b      	str	r3, [r1, #8]
 8010652:	f1b8 0f00 	cmp.w	r8, #0
 8010656:	dd9c      	ble.n	8010592 <__sflush_r+0x1a>
 8010658:	6a21      	ldr	r1, [r4, #32]
 801065a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801065c:	4643      	mov	r3, r8
 801065e:	463a      	mov	r2, r7
 8010660:	4628      	mov	r0, r5
 8010662:	47b0      	blx	r6
 8010664:	2800      	cmp	r0, #0
 8010666:	dc06      	bgt.n	8010676 <__sflush_r+0xfe>
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801066e:	81a3      	strh	r3, [r4, #12]
 8010670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010674:	e78e      	b.n	8010594 <__sflush_r+0x1c>
 8010676:	4407      	add	r7, r0
 8010678:	eba8 0800 	sub.w	r8, r8, r0
 801067c:	e7e9      	b.n	8010652 <__sflush_r+0xda>
 801067e:	bf00      	nop
 8010680:	20400001 	.word	0x20400001

08010684 <_fflush_r>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	690b      	ldr	r3, [r1, #16]
 8010688:	4605      	mov	r5, r0
 801068a:	460c      	mov	r4, r1
 801068c:	b913      	cbnz	r3, 8010694 <_fflush_r+0x10>
 801068e:	2500      	movs	r5, #0
 8010690:	4628      	mov	r0, r5
 8010692:	bd38      	pop	{r3, r4, r5, pc}
 8010694:	b118      	cbz	r0, 801069e <_fflush_r+0x1a>
 8010696:	6983      	ldr	r3, [r0, #24]
 8010698:	b90b      	cbnz	r3, 801069e <_fflush_r+0x1a>
 801069a:	f7ff f881 	bl	800f7a0 <__sinit>
 801069e:	4b14      	ldr	r3, [pc, #80]	; (80106f0 <_fflush_r+0x6c>)
 80106a0:	429c      	cmp	r4, r3
 80106a2:	d11b      	bne.n	80106dc <_fflush_r+0x58>
 80106a4:	686c      	ldr	r4, [r5, #4]
 80106a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d0ef      	beq.n	801068e <_fflush_r+0xa>
 80106ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106b0:	07d0      	lsls	r0, r2, #31
 80106b2:	d404      	bmi.n	80106be <_fflush_r+0x3a>
 80106b4:	0599      	lsls	r1, r3, #22
 80106b6:	d402      	bmi.n	80106be <_fflush_r+0x3a>
 80106b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106ba:	f7ff f921 	bl	800f900 <__retarget_lock_acquire_recursive>
 80106be:	4628      	mov	r0, r5
 80106c0:	4621      	mov	r1, r4
 80106c2:	f7ff ff59 	bl	8010578 <__sflush_r>
 80106c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106c8:	07da      	lsls	r2, r3, #31
 80106ca:	4605      	mov	r5, r0
 80106cc:	d4e0      	bmi.n	8010690 <_fflush_r+0xc>
 80106ce:	89a3      	ldrh	r3, [r4, #12]
 80106d0:	059b      	lsls	r3, r3, #22
 80106d2:	d4dd      	bmi.n	8010690 <_fflush_r+0xc>
 80106d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106d6:	f7ff f914 	bl	800f902 <__retarget_lock_release_recursive>
 80106da:	e7d9      	b.n	8010690 <_fflush_r+0xc>
 80106dc:	4b05      	ldr	r3, [pc, #20]	; (80106f4 <_fflush_r+0x70>)
 80106de:	429c      	cmp	r4, r3
 80106e0:	d101      	bne.n	80106e6 <_fflush_r+0x62>
 80106e2:	68ac      	ldr	r4, [r5, #8]
 80106e4:	e7df      	b.n	80106a6 <_fflush_r+0x22>
 80106e6:	4b04      	ldr	r3, [pc, #16]	; (80106f8 <_fflush_r+0x74>)
 80106e8:	429c      	cmp	r4, r3
 80106ea:	bf08      	it	eq
 80106ec:	68ec      	ldreq	r4, [r5, #12]
 80106ee:	e7da      	b.n	80106a6 <_fflush_r+0x22>
 80106f0:	080148a8 	.word	0x080148a8
 80106f4:	080148c8 	.word	0x080148c8
 80106f8:	08014888 	.word	0x08014888

080106fc <_lseek_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4d07      	ldr	r5, [pc, #28]	; (801071c <_lseek_r+0x20>)
 8010700:	4604      	mov	r4, r0
 8010702:	4608      	mov	r0, r1
 8010704:	4611      	mov	r1, r2
 8010706:	2200      	movs	r2, #0
 8010708:	602a      	str	r2, [r5, #0]
 801070a:	461a      	mov	r2, r3
 801070c:	f7f0 f9ae 	bl	8000a6c <_lseek>
 8010710:	1c43      	adds	r3, r0, #1
 8010712:	d102      	bne.n	801071a <_lseek_r+0x1e>
 8010714:	682b      	ldr	r3, [r5, #0]
 8010716:	b103      	cbz	r3, 801071a <_lseek_r+0x1e>
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	bd38      	pop	{r3, r4, r5, pc}
 801071c:	20008ef4 	.word	0x20008ef4

08010720 <__swhatbuf_r>:
 8010720:	b570      	push	{r4, r5, r6, lr}
 8010722:	460e      	mov	r6, r1
 8010724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010728:	2900      	cmp	r1, #0
 801072a:	b096      	sub	sp, #88	; 0x58
 801072c:	4614      	mov	r4, r2
 801072e:	461d      	mov	r5, r3
 8010730:	da07      	bge.n	8010742 <__swhatbuf_r+0x22>
 8010732:	2300      	movs	r3, #0
 8010734:	602b      	str	r3, [r5, #0]
 8010736:	89b3      	ldrh	r3, [r6, #12]
 8010738:	061a      	lsls	r2, r3, #24
 801073a:	d410      	bmi.n	801075e <__swhatbuf_r+0x3e>
 801073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010740:	e00e      	b.n	8010760 <__swhatbuf_r+0x40>
 8010742:	466a      	mov	r2, sp
 8010744:	f000 f8d8 	bl	80108f8 <_fstat_r>
 8010748:	2800      	cmp	r0, #0
 801074a:	dbf2      	blt.n	8010732 <__swhatbuf_r+0x12>
 801074c:	9a01      	ldr	r2, [sp, #4]
 801074e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010752:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010756:	425a      	negs	r2, r3
 8010758:	415a      	adcs	r2, r3
 801075a:	602a      	str	r2, [r5, #0]
 801075c:	e7ee      	b.n	801073c <__swhatbuf_r+0x1c>
 801075e:	2340      	movs	r3, #64	; 0x40
 8010760:	2000      	movs	r0, #0
 8010762:	6023      	str	r3, [r4, #0]
 8010764:	b016      	add	sp, #88	; 0x58
 8010766:	bd70      	pop	{r4, r5, r6, pc}

08010768 <__smakebuf_r>:
 8010768:	898b      	ldrh	r3, [r1, #12]
 801076a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801076c:	079d      	lsls	r5, r3, #30
 801076e:	4606      	mov	r6, r0
 8010770:	460c      	mov	r4, r1
 8010772:	d507      	bpl.n	8010784 <__smakebuf_r+0x1c>
 8010774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010778:	6023      	str	r3, [r4, #0]
 801077a:	6123      	str	r3, [r4, #16]
 801077c:	2301      	movs	r3, #1
 801077e:	6163      	str	r3, [r4, #20]
 8010780:	b002      	add	sp, #8
 8010782:	bd70      	pop	{r4, r5, r6, pc}
 8010784:	ab01      	add	r3, sp, #4
 8010786:	466a      	mov	r2, sp
 8010788:	f7ff ffca 	bl	8010720 <__swhatbuf_r>
 801078c:	9900      	ldr	r1, [sp, #0]
 801078e:	4605      	mov	r5, r0
 8010790:	4630      	mov	r0, r6
 8010792:	f7ff f90f 	bl	800f9b4 <_malloc_r>
 8010796:	b948      	cbnz	r0, 80107ac <__smakebuf_r+0x44>
 8010798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801079c:	059a      	lsls	r2, r3, #22
 801079e:	d4ef      	bmi.n	8010780 <__smakebuf_r+0x18>
 80107a0:	f023 0303 	bic.w	r3, r3, #3
 80107a4:	f043 0302 	orr.w	r3, r3, #2
 80107a8:	81a3      	strh	r3, [r4, #12]
 80107aa:	e7e3      	b.n	8010774 <__smakebuf_r+0xc>
 80107ac:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <__smakebuf_r+0x7c>)
 80107ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	6020      	str	r0, [r4, #0]
 80107b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107b8:	81a3      	strh	r3, [r4, #12]
 80107ba:	9b00      	ldr	r3, [sp, #0]
 80107bc:	6163      	str	r3, [r4, #20]
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	6120      	str	r0, [r4, #16]
 80107c2:	b15b      	cbz	r3, 80107dc <__smakebuf_r+0x74>
 80107c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107c8:	4630      	mov	r0, r6
 80107ca:	f000 f8a7 	bl	801091c <_isatty_r>
 80107ce:	b128      	cbz	r0, 80107dc <__smakebuf_r+0x74>
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	f023 0303 	bic.w	r3, r3, #3
 80107d6:	f043 0301 	orr.w	r3, r3, #1
 80107da:	81a3      	strh	r3, [r4, #12]
 80107dc:	89a0      	ldrh	r0, [r4, #12]
 80107de:	4305      	orrs	r5, r0
 80107e0:	81a5      	strh	r5, [r4, #12]
 80107e2:	e7cd      	b.n	8010780 <__smakebuf_r+0x18>
 80107e4:	0800f739 	.word	0x0800f739

080107e8 <__malloc_lock>:
 80107e8:	4801      	ldr	r0, [pc, #4]	; (80107f0 <__malloc_lock+0x8>)
 80107ea:	f7ff b889 	b.w	800f900 <__retarget_lock_acquire_recursive>
 80107ee:	bf00      	nop
 80107f0:	20008efc 	.word	0x20008efc

080107f4 <__malloc_unlock>:
 80107f4:	4801      	ldr	r0, [pc, #4]	; (80107fc <__malloc_unlock+0x8>)
 80107f6:	f7ff b884 	b.w	800f902 <__retarget_lock_release_recursive>
 80107fa:	bf00      	nop
 80107fc:	20008efc 	.word	0x20008efc

08010800 <_realloc_r>:
 8010800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010802:	4607      	mov	r7, r0
 8010804:	4614      	mov	r4, r2
 8010806:	460e      	mov	r6, r1
 8010808:	b921      	cbnz	r1, 8010814 <_realloc_r+0x14>
 801080a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801080e:	4611      	mov	r1, r2
 8010810:	f7ff b8d0 	b.w	800f9b4 <_malloc_r>
 8010814:	b922      	cbnz	r2, 8010820 <_realloc_r+0x20>
 8010816:	f7ff f87d 	bl	800f914 <_free_r>
 801081a:	4625      	mov	r5, r4
 801081c:	4628      	mov	r0, r5
 801081e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010820:	f000 f88c 	bl	801093c <_malloc_usable_size_r>
 8010824:	42a0      	cmp	r0, r4
 8010826:	d20f      	bcs.n	8010848 <_realloc_r+0x48>
 8010828:	4621      	mov	r1, r4
 801082a:	4638      	mov	r0, r7
 801082c:	f7ff f8c2 	bl	800f9b4 <_malloc_r>
 8010830:	4605      	mov	r5, r0
 8010832:	2800      	cmp	r0, #0
 8010834:	d0f2      	beq.n	801081c <_realloc_r+0x1c>
 8010836:	4631      	mov	r1, r6
 8010838:	4622      	mov	r2, r4
 801083a:	f7fe fe5d 	bl	800f4f8 <memcpy>
 801083e:	4631      	mov	r1, r6
 8010840:	4638      	mov	r0, r7
 8010842:	f7ff f867 	bl	800f914 <_free_r>
 8010846:	e7e9      	b.n	801081c <_realloc_r+0x1c>
 8010848:	4635      	mov	r5, r6
 801084a:	e7e7      	b.n	801081c <_realloc_r+0x1c>

0801084c <_read_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4d07      	ldr	r5, [pc, #28]	; (801086c <_read_r+0x20>)
 8010850:	4604      	mov	r4, r0
 8010852:	4608      	mov	r0, r1
 8010854:	4611      	mov	r1, r2
 8010856:	2200      	movs	r2, #0
 8010858:	602a      	str	r2, [r5, #0]
 801085a:	461a      	mov	r2, r3
 801085c:	f7f0 f8a6 	bl	80009ac <_read>
 8010860:	1c43      	adds	r3, r0, #1
 8010862:	d102      	bne.n	801086a <_read_r+0x1e>
 8010864:	682b      	ldr	r3, [r5, #0]
 8010866:	b103      	cbz	r3, 801086a <_read_r+0x1e>
 8010868:	6023      	str	r3, [r4, #0]
 801086a:	bd38      	pop	{r3, r4, r5, pc}
 801086c:	20008ef4 	.word	0x20008ef4

08010870 <_raise_r>:
 8010870:	291f      	cmp	r1, #31
 8010872:	b538      	push	{r3, r4, r5, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	d904      	bls.n	8010884 <_raise_r+0x14>
 801087a:	2316      	movs	r3, #22
 801087c:	6003      	str	r3, [r0, #0]
 801087e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010882:	bd38      	pop	{r3, r4, r5, pc}
 8010884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010886:	b112      	cbz	r2, 801088e <_raise_r+0x1e>
 8010888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801088c:	b94b      	cbnz	r3, 80108a2 <_raise_r+0x32>
 801088e:	4620      	mov	r0, r4
 8010890:	f000 f830 	bl	80108f4 <_getpid_r>
 8010894:	462a      	mov	r2, r5
 8010896:	4601      	mov	r1, r0
 8010898:	4620      	mov	r0, r4
 801089a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801089e:	f000 b817 	b.w	80108d0 <_kill_r>
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d00a      	beq.n	80108bc <_raise_r+0x4c>
 80108a6:	1c59      	adds	r1, r3, #1
 80108a8:	d103      	bne.n	80108b2 <_raise_r+0x42>
 80108aa:	2316      	movs	r3, #22
 80108ac:	6003      	str	r3, [r0, #0]
 80108ae:	2001      	movs	r0, #1
 80108b0:	e7e7      	b.n	8010882 <_raise_r+0x12>
 80108b2:	2400      	movs	r4, #0
 80108b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108b8:	4628      	mov	r0, r5
 80108ba:	4798      	blx	r3
 80108bc:	2000      	movs	r0, #0
 80108be:	e7e0      	b.n	8010882 <_raise_r+0x12>

080108c0 <raise>:
 80108c0:	4b02      	ldr	r3, [pc, #8]	; (80108cc <raise+0xc>)
 80108c2:	4601      	mov	r1, r0
 80108c4:	6818      	ldr	r0, [r3, #0]
 80108c6:	f7ff bfd3 	b.w	8010870 <_raise_r>
 80108ca:	bf00      	nop
 80108cc:	20000024 	.word	0x20000024

080108d0 <_kill_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	4d07      	ldr	r5, [pc, #28]	; (80108f0 <_kill_r+0x20>)
 80108d4:	2300      	movs	r3, #0
 80108d6:	4604      	mov	r4, r0
 80108d8:	4608      	mov	r0, r1
 80108da:	4611      	mov	r1, r2
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	f7f0 f849 	bl	8000974 <_kill>
 80108e2:	1c43      	adds	r3, r0, #1
 80108e4:	d102      	bne.n	80108ec <_kill_r+0x1c>
 80108e6:	682b      	ldr	r3, [r5, #0]
 80108e8:	b103      	cbz	r3, 80108ec <_kill_r+0x1c>
 80108ea:	6023      	str	r3, [r4, #0]
 80108ec:	bd38      	pop	{r3, r4, r5, pc}
 80108ee:	bf00      	nop
 80108f0:	20008ef4 	.word	0x20008ef4

080108f4 <_getpid_r>:
 80108f4:	f7f0 b836 	b.w	8000964 <_getpid>

080108f8 <_fstat_r>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	4d07      	ldr	r5, [pc, #28]	; (8010918 <_fstat_r+0x20>)
 80108fc:	2300      	movs	r3, #0
 80108fe:	4604      	mov	r4, r0
 8010900:	4608      	mov	r0, r1
 8010902:	4611      	mov	r1, r2
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	f7f0 f896 	bl	8000a36 <_fstat>
 801090a:	1c43      	adds	r3, r0, #1
 801090c:	d102      	bne.n	8010914 <_fstat_r+0x1c>
 801090e:	682b      	ldr	r3, [r5, #0]
 8010910:	b103      	cbz	r3, 8010914 <_fstat_r+0x1c>
 8010912:	6023      	str	r3, [r4, #0]
 8010914:	bd38      	pop	{r3, r4, r5, pc}
 8010916:	bf00      	nop
 8010918:	20008ef4 	.word	0x20008ef4

0801091c <_isatty_r>:
 801091c:	b538      	push	{r3, r4, r5, lr}
 801091e:	4d06      	ldr	r5, [pc, #24]	; (8010938 <_isatty_r+0x1c>)
 8010920:	2300      	movs	r3, #0
 8010922:	4604      	mov	r4, r0
 8010924:	4608      	mov	r0, r1
 8010926:	602b      	str	r3, [r5, #0]
 8010928:	f7f0 f895 	bl	8000a56 <_isatty>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_isatty_r+0x1a>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_isatty_r+0x1a>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	20008ef4 	.word	0x20008ef4

0801093c <_malloc_usable_size_r>:
 801093c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010940:	1f18      	subs	r0, r3, #4
 8010942:	2b00      	cmp	r3, #0
 8010944:	bfbc      	itt	lt
 8010946:	580b      	ldrlt	r3, [r1, r0]
 8010948:	18c0      	addlt	r0, r0, r3
 801094a:	4770      	bx	lr

0801094c <_init>:
 801094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094e:	bf00      	nop
 8010950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010952:	bc08      	pop	{r3}
 8010954:	469e      	mov	lr, r3
 8010956:	4770      	bx	lr

08010958 <_fini>:
 8010958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801095a:	bf00      	nop
 801095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801095e:	bc08      	pop	{r3}
 8010960:	469e      	mov	lr, r3
 8010962:	4770      	bx	lr
