
Potenciometr_and_SMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003344  08003344  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003344  08003344  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003344  08003344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800334c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08003358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003358  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd3d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002031  00000000  00000000  0002bd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017701  00000000  00000000  0002f440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d44c  00000000  00000000  00046b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894e1  00000000  00000000  00053f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  000dd4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080032f4 	.word	0x080032f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080032f4 	.word	0x080032f4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <SMA_FILTER_Get_Value>:
 *  @param  *SMA_Filter_buffer - Массив, где будут лежать сырые значения 
 *  @param  *RAW_Data - Сырые данные	         
 *  @retval  SMA_Filter_Result - Значение, полученное после SMA фильтра.
 ******************************************************************************
 */
uint16_t SMA_FILTER_Get_Value(uint16_t *SMA_Filter_buffer, uint16_t *RAW_Data) {
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	
	/* Создадим переменную для суммы сырых значений */
	uint32_t SMA_Filter_Result = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
	
	/* Начнем заполнять массив сырыми значениями с конца */
	SMA_Filter_buffer[SMA_FILTER_ORDER - 1] = *RAW_Data;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	333e      	adds	r3, #62	; 0x3e
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	8812      	ldrh	r2, [r2, #0]
 800061e:	801a      	strh	r2, [r3, #0]
	
	/* Просуммируем все элементы массива */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	e00b      	b.n	800063e <SMA_FILTER_Get_Value+0x36>
		SMA_Filter_Result += SMA_Filter_buffer[i];
 8000626:	7afb      	ldrb	r3, [r7, #11]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000638:	7afb      	ldrb	r3, [r7, #11]
 800063a:	3301      	adds	r3, #1
 800063c:	72fb      	strb	r3, [r7, #11]
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	2b1f      	cmp	r3, #31
 8000642:	d9f0      	bls.n	8000626 <SMA_FILTER_Get_Value+0x1e>
	 * 32 = 2*2*2*2*2;
	 * Тогда SMA_Filter_Result = SMA_Filter_Result/32 будет равен, как SMA_Filter_Result = SMA_Filter_Result >> 5u;
	 *
	 */
	//SMA_Filter_Result = SMA_Filter_Result / SMA_FILTER_ORDER;
	SMA_Filter_Result = SMA_Filter_Result >> 5u; //32 = 2^5;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	095b      	lsrs	r3, r3, #5
 8000648:	60fb      	str	r3, [r7, #12]
		
	/* Сдвинем все элементы массива влево на 1 */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	72bb      	strb	r3, [r7, #10]
 800064e:	e00d      	b.n	800066c <SMA_FILTER_Get_Value+0x64>
		SMA_Filter_buffer[i] = SMA_Filter_buffer[i + 1];
 8000650:	7abb      	ldrb	r3, [r7, #10]
 8000652:	3301      	adds	r3, #1
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	441a      	add	r2, r3
 800065a:	7abb      	ldrb	r3, [r7, #10]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	440b      	add	r3, r1
 8000662:	8812      	ldrh	r2, [r2, #0]
 8000664:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000666:	7abb      	ldrb	r3, [r7, #10]
 8000668:	3301      	adds	r3, #1
 800066a:	72bb      	strb	r3, [r7, #10]
 800066c:	7abb      	ldrb	r3, [r7, #10]
 800066e:	2b1f      	cmp	r3, #31
 8000670:	d9ee      	bls.n	8000650 <SMA_FILTER_Get_Value+0x48>
	}
	
	return (uint16_t)SMA_Filter_Result; //Вернем среднее арифметическое значение
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	b29b      	uxth	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fb50 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f814 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f926 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 f906 	bl	80008a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000694:	f000 f86a 	bl	800076c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000698:	f000 f8b6 	bl	8000808 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <main+0x2c>)
 800069e:	f000 ff41 	bl	8001524 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x30>)
 80006a4:	f002 fa50 	bl	8002b48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x28>
 80006aa:	bf00      	nop
 80006ac:	20000104 	.word	0x20000104
 80006b0:	200000bc 	.word	0x200000bc

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fe0e 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000700:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fc08 	bl	8001f20 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000716:	f000 f915 	bl	8000944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fe72 	bl	8002420 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000742:	f000 f8ff 	bl	8000944 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000746:	2302      	movs	r3, #2
 8000748:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f82e 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800075e:	f000 f8f1 	bl	8000944 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_ADC1_Init+0x94>)
 800077e:	4a21      	ldr	r2, [pc, #132]	; (8000804 <MX_ADC1_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC1_Init+0x94>)
 8000784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC1_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_ADC1_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_ADC1_Init+0x94>)
 8000798:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_ADC1_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_ADC1_Init+0x94>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4815      	ldr	r0, [pc, #84]	; (8000800 <MX_ADC1_Init+0x94>)
 80007ac:	f000 faee 	bl	8000d8c <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007b6:	f000 f8c5 	bl	8000944 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2301      	movs	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007c2:	2307      	movs	r3, #7
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_ADC1_Init+0x94>)
 80007cc:	f000 fcb0 	bl	8001130 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8b5 	bl	8000944 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007da:	2311      	movs	r3, #17
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_ADC1_Init+0x94>)
 80007e8:	f000 fca2 	bl	8001130 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007f2:	f000 f8a7 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000104 	.word	0x20000104
 8000804:	40012400 	.word	0x40012400

08000808 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_TIM3_Init+0x90>)
 8000826:	4a1d      	ldr	r2, [pc, #116]	; (800089c <MX_TIM3_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_TIM3_Init+0x90>)
 800082c:	2247      	movs	r2, #71	; 0x47
 800082e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_TIM3_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_TIM3_Init+0x90>)
 8000838:	2209      	movs	r2, #9
 800083a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_TIM3_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_TIM3_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_TIM3_Init+0x90>)
 800084a:	f002 f92d 	bl	8002aa8 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000854:	f000 f876 	bl	8000944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_TIM3_Init+0x90>)
 8000866:	f002 fac9 	bl	8002dfc <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000870:	f000 f868 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_TIM3_Init+0x90>)
 8000882:	f002 fc9b 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800088c:	f000 f85a 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000bc 	.word	0x200000bc
 800089c:	40000400 	.word	0x40000400

080008a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_DMA_Init+0x38>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <MX_DMA_Init+0x38>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_DMA_Init+0x38>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	200b      	movs	r0, #11
 80008c4:	f000 ff8f 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008c8:	200b      	movs	r0, #11
 80008ca:	f000 ffa8 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_GPIO_Init+0x40>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <MX_GPIO_Init+0x40>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_GPIO_Init+0x40>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_GPIO_Init+0x40>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <MX_GPIO_Init+0x40>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <MX_GPIO_Init+0x40>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fa0f 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40000800 	.word	0x40000800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_MspInit+0x5c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x5c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x60>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_MspInit+0x60>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a28      	ldr	r2, [pc, #160]	; (8000a70 <HAL_ADC_MspInit+0xbc>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d149      	bne.n	8000a68 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_ADC_MspInit+0xc0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <HAL_ADC_MspInit+0xc0>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_ADC_MspInit+0xc0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_ADC_MspInit+0xc0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <HAL_ADC_MspInit+0xc0>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_ADC_MspInit+0xc0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a04:	2301      	movs	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	4819      	ldr	r0, [pc, #100]	; (8000a78 <HAL_ADC_MspInit+0xc4>)
 8000a14:	f001 f900 	bl	8001c18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_ADC_MspInit+0xcc>)
 8000a1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a42:	2220      	movs	r2, #32
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a4e:	f000 fef5 	bl	800183c <HAL_DMA_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000a58:	f7ff ff74 	bl	8000944 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a60:	621a      	str	r2, [r3, #32]
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_ADC_MspInit+0xc8>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40012400 	.word	0x40012400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	20000134 	.word	0x20000134
 8000a80:	40020008 	.word	0x40020008

08000a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_TIM_Base_MspInit+0x44>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d113      	bne.n	8000abe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	201d      	movs	r0, #29
 8000ab4:	f000 fe97 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ab8:	201d      	movs	r0, #29
 8000aba:	f000 feb0 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	201e      	movs	r0, #30
 8000ae6:	f000 fe7e 	bl	80017e6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000aea:	201e      	movs	r0, #30
 8000aec:	f000 fe97 	bl	800181e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <HAL_InitTick+0xa0>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_InitTick+0xa0>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	61d3      	str	r3, [r2, #28]
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_InitTick+0xa0>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b08:	f107 0210 	add.w	r2, r7, #16
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fe00 	bl	8002718 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b18:	f001 fdd6 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_InitTick+0xa4>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	0c9b      	lsrs	r3, r3, #18
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <HAL_InitTick+0xac>)
 8000b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b42:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b52:	f001 ffa9 	bl	8002aa8 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d104      	bne.n	8000b66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <HAL_InitTick+0xa8>)
 8000b5e:	f001 fff3 	bl	8002b48 <HAL_TIM_Base_Start_IT>
 8000b62:	4603      	mov	r3, r0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	431bde83 	.word	0x431bde83
 8000b78:	20000178 	.word	0x20000178
 8000b7c:	40000800 	.word	0x40000800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
	...

08000bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <DMA1_Channel1_IRQHandler+0x9c>)
 8000bd6:	f000 feeb 	bl	80019b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  //При каждом прерывании по DMA мы попадаем сюда!
	Counter_DMA_IT++; // Включим счетчик
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <DMA1_Channel1_IRQHandler+0xa0>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <DMA1_Channel1_IRQHandler+0xa0>)
 8000be4:	801a      	strh	r2, [r3, #0]
	if (Counter_DMA_IT == 300) { // Счетчик считает до 300 (Если поставить 1500 как будто поставили большой конденцатор в RC фильтр!)
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <DMA1_Channel1_IRQHandler+0xa0>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000bee:	d13a      	bne.n	8000c66 <DMA1_Channel1_IRQHandler+0x96>
		Counter_DMA_IT = 0;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <DMA1_Channel1_IRQHandler+0xa0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	801a      	strh	r2, [r3, #0]
		ADC_SMA_Data[0] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_1, &ADC_RAW_Data[0]);
 8000bf6:	491f      	ldr	r1, [pc, #124]	; (8000c74 <DMA1_Channel1_IRQHandler+0xa4>)
 8000bf8:	481f      	ldr	r0, [pc, #124]	; (8000c78 <DMA1_Channel1_IRQHandler+0xa8>)
 8000bfa:	f7ff fd05 	bl	8000608 <SMA_FILTER_Get_Value>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <DMA1_Channel1_IRQHandler+0xac>)
 8000c04:	801a      	strh	r2, [r3, #0]
		ADC_SMA_Data[1] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_2, &ADC_RAW_Data[1]);
 8000c06:	491e      	ldr	r1, [pc, #120]	; (8000c80 <DMA1_Channel1_IRQHandler+0xb0>)
 8000c08:	481e      	ldr	r0, [pc, #120]	; (8000c84 <DMA1_Channel1_IRQHandler+0xb4>)
 8000c0a:	f7ff fcfd 	bl	8000608 <SMA_FILTER_Get_Value>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <DMA1_Channel1_IRQHandler+0xac>)
 8000c14:	805a      	strh	r2, [r3, #2]
		Voltage_bit_ADC = VREFINT / ADC_SMA_Data[1];
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <DMA1_Channel1_IRQHandler+0xac>)
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fb50 	bl	80002c0 <__aeabi_i2f>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <DMA1_Channel1_IRQHandler+0xb8>)
 8000c26:	f7ff fc53 	bl	80004d0 <__aeabi_fdiv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <DMA1_Channel1_IRQHandler+0xbc>)
 8000c30:	601a      	str	r2, [r3, #0]
		ADC1_Voltage = Voltage_bit_ADC * ADC_SMA_Data[0];
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <DMA1_Channel1_IRQHandler+0xac>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fb42 	bl	80002c0 <__aeabi_i2f>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <DMA1_Channel1_IRQHandler+0xbc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4610      	mov	r0, r2
 8000c46:	f7ff fb8f 	bl	8000368 <__aeabi_fmul>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <DMA1_Channel1_IRQHandler+0xc0>)
 8000c50:	601a      	str	r2, [r3, #0]
		ADC1_Voltage /= 1000; // Делим на 1000 что бы из милливольт в вольты.
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <DMA1_Channel1_IRQHandler+0xc0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	490f      	ldr	r1, [pc, #60]	; (8000c94 <DMA1_Channel1_IRQHandler+0xc4>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fc39 	bl	80004d0 <__aeabi_fdiv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <DMA1_Channel1_IRQHandler+0xc0>)
 8000c64:	601a      	str	r2, [r3, #0]

	}
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000134 	.word	0x20000134
 8000c70:	200000b0 	.word	0x200000b0
 8000c74:	200000a8 	.word	0x200000a8
 8000c78:	20000028 	.word	0x20000028
 8000c7c:	200000ac 	.word	0x200000ac
 8000c80:	200000aa 	.word	0x200000aa
 8000c84:	20000068 	.word	0x20000068
 8000c88:	44960000 	.word	0x44960000
 8000c8c:	200000b4 	.word	0x200000b4
 8000c90:	200000b8 	.word	0x200000b8
 8000c94:	447a0000 	.word	0x447a0000

08000c98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <TIM3_IRQHandler+0x18>)
 8000c9e:	f001 ffa5 	bl	8002bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_RAW_Data, 2); // При помощи DMA сохраняем данные в буфер.
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4903      	ldr	r1, [pc, #12]	; (8000cb4 <TIM3_IRQHandler+0x1c>)
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <TIM3_IRQHandler+0x20>)
 8000ca8:	f000 f948 	bl	8000f3c <HAL_ADC_Start_DMA>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000bc 	.word	0x200000bc
 8000cb4:	200000a8 	.word	0x200000a8
 8000cb8:	20000104 	.word	0x20000104

08000cbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM4_IRQHandler+0x10>)
 8000cc2:	f001 ff93 	bl	8002bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000178 	.word	0x20000178

08000cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d02:	f7ff ffe5 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f002 fac9 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0a:	f7ff fcb9 	bl	8000680 <main>
  bx lr
 8000d0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d18:	0800334c 	.word	0x0800334c
  ldr r2, =_sbss
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d20:	200001c4 	.word	0x200001c4

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x28>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x28>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 fd49 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f7ff fec6 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe04 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x1c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x20>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <HAL_IncTick+0x20>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000008 	.word	0x20000008
 8000d74:	200001c0 	.word	0x200001c0

08000d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <HAL_GetTick+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	200001c0 	.word	0x200001c0

08000d8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e0be      	b.n	8000f2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d109      	bne.n	8000dd0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fdf2 	bl	80009b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 faff 	bl	80013d4 <ADC_ConversionStop_Disable>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8099 	bne.w	8000f1a <HAL_ADC_Init+0x18e>
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8095 	bne.w	8000f1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df8:	f023 0302 	bic.w	r3, r3, #2
 8000dfc:	f043 0202 	orr.w	r2, r3, #2
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7b1b      	ldrb	r3, [r3, #12]
 8000e12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e24:	d003      	beq.n	8000e2e <HAL_ADC_Init+0xa2>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d102      	bne.n	8000e34 <HAL_ADC_Init+0xa8>
 8000e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e32:	e000      	b.n	8000e36 <HAL_ADC_Init+0xaa>
 8000e34:	2300      	movs	r3, #0
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7d1b      	ldrb	r3, [r3, #20]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d119      	bne.n	8000e78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7b1b      	ldrb	r3, [r3, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d109      	bne.n	8000e60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	035a      	lsls	r2, r3, #13
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	e00b      	b.n	8000e78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	f043 0220 	orr.w	r2, r3, #32
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	f043 0201 	orr.w	r2, r3, #1
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <HAL_ADC_Init+0x1a8>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea8:	d003      	beq.n	8000eb2 <HAL_ADC_Init+0x126>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d104      	bne.n	8000ebc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	051b      	lsls	r3, r3, #20
 8000eba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_ADC_Init+0x1ac>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d10b      	bne.n	8000ef8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ef6:	e018      	b.n	8000f2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	f023 0312 	bic.w	r3, r3, #18
 8000f00:	f043 0210 	orr.w	r2, r3, #16
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f18:	e007      	b.n	8000f2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f043 0210 	orr.w	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	ffe1f7fd 	.word	0xffe1f7fd
 8000f38:	ff1f0efe 	.word	0xff1f0efe

08000f3c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a64      	ldr	r2, [pc, #400]	; (80010e4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d004      	beq.n	8000f60 <HAL_ADC_Start_DMA+0x24>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a63      	ldr	r2, [pc, #396]	; (80010e8 <HAL_ADC_Start_DMA+0x1ac>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d106      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x32>
 8000f60:	4b60      	ldr	r3, [pc, #384]	; (80010e4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f040 80b3 	bne.w	80010d4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_Start_DMA+0x40>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e0ae      	b.n	80010da <HAL_ADC_Start_DMA+0x19e>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 f9cb 	bl	8001320 <ADC_Enable>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 809a 	bne.w	80010ca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <HAL_ADC_Start_DMA+0x1ac>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d105      	bne.n	8000fc0 <HAL_ADC_Start_DMA+0x84>
 8000fb4:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <HAL_ADC_Start_DMA+0x1a8>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d115      	bne.n	8000fec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d026      	beq.n	8001028 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fea:	e01d      	b.n	8001028 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a39      	ldr	r2, [pc, #228]	; (80010e4 <HAL_ADC_Start_DMA+0x1a8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_ADC_Start_DMA+0xd0>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a38      	ldr	r2, [pc, #224]	; (80010e8 <HAL_ADC_Start_DMA+0x1ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d10d      	bne.n	8001028 <HAL_ADC_Start_DMA+0xec>
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_ADC_Start_DMA+0x1a8>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001020:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	f023 0206 	bic.w	r2, r3, #6
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001040:	e002      	b.n	8001048 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_ADC_Start_DMA+0x1b0>)
 8001056:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_ADC_Start_DMA+0x1b4>)
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_ADC_Start_DMA+0x1b8>)
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f06f 0202 	mvn.w	r2, #2
 8001070:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001080:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a18      	ldr	r0, [r3, #32]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	334c      	adds	r3, #76	; 0x4c
 800108c:	4619      	mov	r1, r3
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f000 fc2d 	bl	80018f0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010a4:	d108      	bne.n	80010b8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80010b4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80010b6:	e00f      	b.n	80010d8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010c6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80010c8:	e006      	b.n	80010d8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80010d2:	e001      	b.n	80010d8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012400 	.word	0x40012400
 80010e8:	40012800 	.word	0x40012800
 80010ec:	08001457 	.word	0x08001457
 80010f0:	080014d3 	.word	0x080014d3
 80010f4:	080014ef 	.word	0x080014ef

080010f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
	...

08001130 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x20>
 800114c:	2302      	movs	r3, #2
 800114e:	e0dc      	b.n	800130a <HAL_ADC_ConfigChannel+0x1da>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b06      	cmp	r3, #6
 800115e:	d81c      	bhi.n	800119a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	3b05      	subs	r3, #5
 8001172:	221f      	movs	r2, #31
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	3b05      	subs	r3, #5
 800118c:	fa00 f203 	lsl.w	r2, r0, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
 8001198:	e03c      	b.n	8001214 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b0c      	cmp	r3, #12
 80011a0:	d81c      	bhi.n	80011dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b23      	subs	r3, #35	; 0x23
 80011b4:	221f      	movs	r2, #31
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4019      	ands	r1, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b23      	subs	r3, #35	; 0x23
 80011ce:	fa00 f203 	lsl.w	r2, r0, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
 80011da:	e01b      	b.n	8001214 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b41      	subs	r3, #65	; 0x41
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4019      	ands	r1, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b41      	subs	r3, #65	; 0x41
 8001208:	fa00 f203 	lsl.w	r2, r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b09      	cmp	r3, #9
 800121a:	d91c      	bls.n	8001256 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68d9      	ldr	r1, [r3, #12]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	3b1e      	subs	r3, #30
 800122e:	2207      	movs	r2, #7
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	4019      	ands	r1, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6898      	ldr	r0, [r3, #8]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	3b1e      	subs	r3, #30
 8001248:	fa00 f203 	lsl.w	r2, r0, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	e019      	b.n	800128a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6919      	ldr	r1, [r3, #16]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	2207      	movs	r2, #7
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	4019      	ands	r1, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6898      	ldr	r0, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	fa00 f203 	lsl.w	r2, r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d003      	beq.n	800129a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001296:	2b11      	cmp	r3, #17
 8001298:	d132      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_ADC_ConfigChannel+0x1e4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d125      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d126      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d11a      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_ADC_ConfigChannel+0x1e8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_ADC_ConfigChannel+0x1ec>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9a      	lsrs	r2, r3, #18
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x1b2>
 80012ee:	e007      	b.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40012400 	.word	0x40012400
 8001318:	20000000 	.word	0x20000000
 800131c:	431bde83 	.word	0x431bde83

08001320 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d040      	beq.n	80013c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <ADC_Enable+0xac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <ADC_Enable+0xb0>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800135c:	e002      	b.n	8001364 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800136a:	f7ff fd05 	bl	8000d78 <HAL_GetTick>
 800136e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001370:	e01f      	b.n	80013b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001372:	f7ff fd01 	bl	8000d78 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d918      	bls.n	80013b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d011      	beq.n	80013b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f043 0210 	orr.w	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e007      	b.n	80013c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1d8      	bne.n	8001372 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000
 80013d0:	431bde83 	.word	0x431bde83

080013d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d12e      	bne.n	800144c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013fe:	f7ff fcbb 	bl	8000d78 <HAL_GetTick>
 8001402:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001404:	e01b      	b.n	800143e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001406:	f7ff fcb7 	bl	8000d78 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d914      	bls.n	800143e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10d      	bne.n	800143e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e007      	b.n	800144e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d0dc      	beq.n	8001406 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800146c:	2b00      	cmp	r3, #0
 800146e:	d127      	bne.n	80014c0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001486:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800148a:	d115      	bne.n	80014b8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001490:	2b00      	cmp	r3, #0
 8001492:	d111      	bne.n	80014b8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d105      	bne.n	80014b8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f7ff fe1d 	bl	80010f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80014be:	e004      	b.n	80014ca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f7ff fe12 	bl	800110a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	f043 0204 	orr.w	r2, r3, #4
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fe01 	bl	800111c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_ADCEx_Calibration_Start+0x1e>
 800153e:	2302      	movs	r3, #2
 8001540:	e095      	b.n	800166e <HAL_ADCEx_Calibration_Start+0x14a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff42 	bl	80013d4 <ADC_ConversionStop_Disable>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8084 	bne.w	8001664 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	f043 0202 	orr.w	r2, r3, #2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001570:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_ADCEx_Calibration_Start+0x154>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	2002      	movs	r0, #2
 8001576:	f001 f9d3 	bl	8002920 <HAL_RCCEx_GetPeriphCLKFreq>
 800157a:	4603      	mov	r3, r0
 800157c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001580:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001582:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3b01      	subs	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fec4 	bl	8001320 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015a8:	f7ff fbe6 	bl	8000d78 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015ae:	e01b      	b.n	80015e8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015b0:	f7ff fbe2 	bl	8000d78 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d914      	bls.n	80015e8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00d      	beq.n	80015e8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f023 0312 	bic.w	r3, r3, #18
 80015d4:	f043 0210 	orr.w	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e042      	b.n	800166e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1dc      	bne.n	80015b0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0204 	orr.w	r2, r2, #4
 8001604:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001606:	f7ff fbb7 	bl	8000d78 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800160c:	e01b      	b.n	8001646 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800160e:	f7ff fbb3 	bl	8000d78 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b0a      	cmp	r3, #10
 800161a:	d914      	bls.n	8001646 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00d      	beq.n	8001646 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f023 0312 	bic.w	r3, r3, #18
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e013      	b.n	800166e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1dc      	bne.n	800160e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	f023 0303 	bic.w	r3, r3, #3
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800166c:	7dfb      	ldrb	r3, [r7, #23]
}
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4906      	ldr	r1, [pc, #24]	; (8001714 <__NVIC_EnableIRQ+0x34>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff4f 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff64 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ffb2 	bl	800176c <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff81 	bl	8001718 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff57 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e043      	b.n	80018da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_DMA_Init+0xa8>)
 800185a:	4413      	add	r3, r2
 800185c:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_DMA_Init+0xac>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	009a      	lsls	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_DMA_Init+0xb0>)
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001886:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800188a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	bffdfff8 	.word	0xbffdfff8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_DMA_Start_IT+0x20>
 800190c:	2302      	movs	r3, #2
 800190e:	e04a      	b.n	80019a6 <HAL_DMA_Start_IT+0xb6>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191e:	2b01      	cmp	r3, #1
 8001920:	d13a      	bne.n	8001998 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f938 	bl	8001bbc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 020e 	orr.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e00f      	b.n	8001986 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0204 	bic.w	r2, r2, #4
 8001974:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 020a 	orr.w	r2, r2, #10
 8001984:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e005      	b.n	80019a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
 80019a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	2204      	movs	r2, #4
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d04f      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xc8>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d04a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a66      	ldr	r2, [pc, #408]	; (8001ba0 <HAL_DMA_IRQHandler+0x1f0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d029      	beq.n	8001a5e <HAL_DMA_IRQHandler+0xae>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a65      	ldr	r2, [pc, #404]	; (8001ba4 <HAL_DMA_IRQHandler+0x1f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d022      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xaa>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a63      	ldr	r2, [pc, #396]	; (8001ba8 <HAL_DMA_IRQHandler+0x1f8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01a      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xa4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a62      	ldr	r2, [pc, #392]	; (8001bac <HAL_DMA_IRQHandler+0x1fc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d012      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x9e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a60      	ldr	r2, [pc, #384]	; (8001bb0 <HAL_DMA_IRQHandler+0x200>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00a      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x98>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5f      	ldr	r2, [pc, #380]	; (8001bb4 <HAL_DMA_IRQHandler+0x204>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x92>
 8001a3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a40:	e00e      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a46:	e00b      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a4c:	e008      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a52:	e005      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a58:	e002      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a5a:	2340      	movs	r3, #64	; 0x40
 8001a5c:	e000      	b.n	8001a60 <HAL_DMA_IRQHandler+0xb0>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	4a55      	ldr	r2, [pc, #340]	; (8001bb8 <HAL_DMA_IRQHandler+0x208>)
 8001a62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8094 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a76:	e08e      	b.n	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d056      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x186>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d051      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020a 	bic.w	r2, r2, #10
 8001aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a38      	ldr	r2, [pc, #224]	; (8001ba0 <HAL_DMA_IRQHandler+0x1f0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d029      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x166>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <HAL_DMA_IRQHandler+0x1f4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x162>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <HAL_DMA_IRQHandler+0x1f8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01a      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x15c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_DMA_IRQHandler+0x1fc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d012      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x156>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_DMA_IRQHandler+0x200>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00a      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x150>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <HAL_DMA_IRQHandler+0x204>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d102      	bne.n	8001afa <HAL_DMA_IRQHandler+0x14a>
 8001af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001af8:	e00e      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afe:	e00b      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b04:	e008      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0a:	e005      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b10:	e002      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b12:	2320      	movs	r3, #32
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_IRQHandler+0x168>
 8001b16:	2302      	movs	r3, #2
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <HAL_DMA_IRQHandler+0x208>)
 8001b1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d034      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b34:	e02f      	b.n	8001b96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d028      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1e8>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 020e 	bic.w	r2, r2, #14
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
    }
  }
  return;
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
}
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020008 	.word	0x40020008
 8001ba4:	4002001c 	.word	0x4002001c
 8001ba8:	40020030 	.word	0x40020030
 8001bac:	40020044 	.word	0x40020044
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	4002006c 	.word	0x4002006c
 8001bb8:	40020000 	.word	0x40020000

08001bbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d108      	bne.n	8001bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bfa:	e007      	b.n	8001c0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	e169      	b.n	8001f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8158 	bne.w	8001efa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a9a      	ldr	r2, [pc, #616]	; (8001eb8 <HAL_GPIO_Init+0x2a0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d05e      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c54:	4a98      	ldr	r2, [pc, #608]	; (8001eb8 <HAL_GPIO_Init+0x2a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d875      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c5a:	4a98      	ldr	r2, [pc, #608]	; (8001ebc <HAL_GPIO_Init+0x2a4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d058      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c60:	4a96      	ldr	r2, [pc, #600]	; (8001ebc <HAL_GPIO_Init+0x2a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d86f      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c66:	4a96      	ldr	r2, [pc, #600]	; (8001ec0 <HAL_GPIO_Init+0x2a8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d052      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a94      	ldr	r2, [pc, #592]	; (8001ec0 <HAL_GPIO_Init+0x2a8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d869      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c72:	4a94      	ldr	r2, [pc, #592]	; (8001ec4 <HAL_GPIO_Init+0x2ac>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d04c      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c78:	4a92      	ldr	r2, [pc, #584]	; (8001ec4 <HAL_GPIO_Init+0x2ac>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d863      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a92      	ldr	r2, [pc, #584]	; (8001ec8 <HAL_GPIO_Init+0x2b0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d046      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c84:	4a90      	ldr	r2, [pc, #576]	; (8001ec8 <HAL_GPIO_Init+0x2b0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d85d      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d82a      	bhi.n	8001ce4 <HAL_GPIO_Init+0xcc>
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d859      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_GPIO_Init+0x80>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001ced 	.word	0x08001ced
 8001ca0:	08001cff 	.word	0x08001cff
 8001ca4:	08001d41 	.word	0x08001d41
 8001ca8:	08001d47 	.word	0x08001d47
 8001cac:	08001d47 	.word	0x08001d47
 8001cb0:	08001d47 	.word	0x08001d47
 8001cb4:	08001d47 	.word	0x08001d47
 8001cb8:	08001d47 	.word	0x08001d47
 8001cbc:	08001d47 	.word	0x08001d47
 8001cc0:	08001d47 	.word	0x08001d47
 8001cc4:	08001d47 	.word	0x08001d47
 8001cc8:	08001d47 	.word	0x08001d47
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d47 	.word	0x08001d47
 8001cd4:	08001d47 	.word	0x08001d47
 8001cd8:	08001d47 	.word	0x08001d47
 8001cdc:	08001cf5 	.word	0x08001cf5
 8001ce0:	08001d09 	.word	0x08001d09
 8001ce4:	4a79      	ldr	r2, [pc, #484]	; (8001ecc <HAL_GPIO_Init+0x2b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cea:	e02c      	b.n	8001d46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e029      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	623b      	str	r3, [r7, #32]
          break;
 8001cfc:	e024      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	3308      	adds	r3, #8
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e01f      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e01a      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e013      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	611a      	str	r2, [r3, #16]
          break;
 8001d32:	e009      	b.n	8001d48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	615a      	str	r2, [r3, #20]
          break;
 8001d3e:	e003      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          break;
 8001d46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d801      	bhi.n	8001d52 <HAL_GPIO_Init+0x13a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_Init+0x13e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d802      	bhi.n	8001d64 <HAL_GPIO_Init+0x14c>
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x152>
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3b08      	subs	r3, #8
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	210f      	movs	r1, #15
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80b1 	beq.w	8001efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001db0:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <HAL_GPIO_Init+0x2bc>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <HAL_GPIO_Init+0x2c0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x1ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3f      	ldr	r2, [pc, #252]	; (8001edc <HAL_GPIO_Init+0x2c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1e8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <HAL_GPIO_Init+0x2c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1e4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a3d      	ldr	r2, [pc, #244]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1e0>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e006      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001e04:	2300      	movs	r3, #0
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e16:	492f      	ldr	r1, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x2bc>)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	492c      	ldr	r1, [pc, #176]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4928      	ldr	r1, [pc, #160]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	491e      	ldr	r1, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4914      	ldr	r1, [pc, #80]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d021      	beq.n	8001eec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e021      	b.n	8001efa <HAL_GPIO_Init+0x2e2>
 8001eb6:	bf00      	nop
 8001eb8:	10320000 	.word	0x10320000
 8001ebc:	10310000 	.word	0x10310000
 8001ec0:	10220000 	.word	0x10220000
 8001ec4:	10210000 	.word	0x10210000
 8001ec8:	10120000 	.word	0x10120000
 8001ecc:	10110000 	.word	0x10110000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	4909      	ldr	r1, [pc, #36]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3301      	adds	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f47f ae8e 	bne.w	8001c2c <HAL_GPIO_Init+0x14>
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	372c      	adds	r7, #44	; 0x2c
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e26c      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8087 	beq.w	800204e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f40:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d00c      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4c:	4b8f      	ldr	r3, [pc, #572]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d112      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
 8001f58:	4b8c      	ldr	r3, [pc, #560]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d10b      	bne.n	8001f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f66:	4b89      	ldr	r3, [pc, #548]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06c      	beq.n	800204c <HAL_RCC_OscConfig+0x12c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d168      	bne.n	800204c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e246      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x76>
 8001f88:	4b80      	ldr	r3, [pc, #512]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a7f      	ldr	r2, [pc, #508]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	e02e      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x98>
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7a      	ldr	r2, [pc, #488]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b78      	ldr	r3, [pc, #480]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a77      	ldr	r2, [pc, #476]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0xbc>
 8001fc2:	4b72      	ldr	r3, [pc, #456]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a71      	ldr	r2, [pc, #452]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001fdc:	4b6b      	ldr	r3, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe febc 	bl	8000d78 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe feb8 	bl	8000d78 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1fa      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b5d      	ldr	r3, [pc, #372]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xe4>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fea8 	bl	8000d78 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe fea4 	bl	8000d78 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1e6      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x10c>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
 8002072:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1ba      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4939      	ldr	r1, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe fe5d 	bl	8000d78 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fe59 	bl	8000d78 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e19b      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4927      	ldr	r1, [pc, #156]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_RCC_OscConfig+0x270>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe3c 	bl	8000d78 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002104:	f7fe fe38 	bl	8000d78 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e17a      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d03a      	beq.n	80021a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d019      	beq.n	800216a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_RCC_OscConfig+0x274>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fe1c 	bl	8000d78 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fe18 	bl	8000d78 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e15a      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_RCC_OscConfig+0x26c>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 fb08 	bl	8002778 <RCC_Delay>
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <HAL_RCC_OscConfig+0x274>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7fe fe02 	bl	8000d78 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe fdfe 	bl	8000d78 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d908      	bls.n	8002198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e140      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	42420000 	.word	0x42420000
 8002194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b9e      	ldr	r3, [pc, #632]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e9      	bne.n	8002178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80a6 	beq.w	80022fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b97      	ldr	r3, [pc, #604]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10d      	bne.n	80021de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b94      	ldr	r3, [pc, #592]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4a93      	ldr	r2, [pc, #588]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	61d3      	str	r3, [r2, #28]
 80021ce:	4b91      	ldr	r3, [pc, #580]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b8e      	ldr	r3, [pc, #568]	; (8002418 <HAL_RCC_OscConfig+0x4f8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b8b      	ldr	r3, [pc, #556]	; (8002418 <HAL_RCC_OscConfig+0x4f8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a8a      	ldr	r2, [pc, #552]	; (8002418 <HAL_RCC_OscConfig+0x4f8>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fdbf 	bl	8000d78 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7fe fdbb 	bl	8000d78 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b64      	cmp	r3, #100	; 0x64
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0fd      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b81      	ldr	r3, [pc, #516]	; (8002418 <HAL_RCC_OscConfig+0x4f8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x312>
 8002224:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a7a      	ldr	r2, [pc, #488]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e02d      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x334>
 800223a:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a75      	ldr	r2, [pc, #468]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4a72      	ldr	r2, [pc, #456]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	e01c      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d10c      	bne.n	8002276 <HAL_RCC_OscConfig+0x356>
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a6c      	ldr	r2, [pc, #432]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a69      	ldr	r2, [pc, #420]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e00b      	b.n	800228e <HAL_RCC_OscConfig+0x36e>
 8002276:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a63      	ldr	r2, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe fd6f 	bl	8000d78 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fd6b 	bl	8000d78 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0ab      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b57      	ldr	r3, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCC_OscConfig+0x37e>
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fd59 	bl	8000d78 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fd55 	bl	8000d78 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e095      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	4b4c      	ldr	r3, [pc, #304]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ee      	bne.n	80022ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b48      	ldr	r3, [pc, #288]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a47      	ldr	r2, [pc, #284]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8081 	beq.w	800240a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d061      	beq.n	80023d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d146      	bne.n	80023aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_RCC_OscConfig+0x4fc>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fd29 	bl	8000d78 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fd25 	bl	8000d78 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e067      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f0      	bne.n	800232a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	492d      	ldr	r1, [pc, #180]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a19      	ldr	r1, [r3, #32]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	430b      	orrs	r3, r1
 8002376:	4927      	ldr	r1, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCC_OscConfig+0x4fc>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fcf9 	bl	8000d78 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fcf5 	bl	8000d78 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e037      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x46a>
 80023a8:	e02f      	b.n	800240a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <HAL_RCC_OscConfig+0x4fc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fce2 	bl	8000d78 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fcde 	bl	8000d78 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e020      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x498>
 80023d6:	e018      	b.n	800240a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	42420060 	.word	0x42420060

08002420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0d0      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4965      	ldr	r1, [pc, #404]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b8      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002486:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800249e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	494d      	ldr	r1, [pc, #308]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d040      	beq.n	8002540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e07f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e073      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4936      	ldr	r1, [pc, #216]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fc32 	bl	8000d78 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fc2e 	bl	8000d78 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e053      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d210      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4922      	ldr	r1, [pc, #136]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e032      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4916      	ldr	r1, [pc, #88]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	490e      	ldr	r1, [pc, #56]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ae:	f000 f821 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	490a      	ldr	r1, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1cc>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1d0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fa7e 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	0800332c 	.word	0x0800332c
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000004 	.word	0x20000004

080025f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	b490      	push	{r4, r7}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025fc:	1d3c      	adds	r4, r7, #4
 80025fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002604:	f240 2301 	movw	r3, #513	; 0x201
 8002608:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b04      	cmp	r3, #4
 800262c:	d002      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x40>
 800262e:	2b08      	cmp	r3, #8
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x46>
 8002632:	e02d      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002636:	623b      	str	r3, [r7, #32]
      break;
 8002638:	e02d      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	0c9b      	lsrs	r3, r3, #18
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002646:	4413      	add	r3, r2
 8002648:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800264c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c5b      	lsrs	r3, r3, #17
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002666:	4413      	add	r3, r2
 8002668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800266c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002672:	fb02 f203 	mul.w	r2, r2, r3
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	e004      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	623b      	str	r3, [r7, #32]
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002692:	623b      	str	r3, [r7, #32]
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	6a3b      	ldr	r3, [r7, #32]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bc90      	pop	{r4, r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	0800330c 	.word	0x0800330c
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	003d0900 	.word	0x003d0900

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff2 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	0800333c 	.word	0x0800333c

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0adb      	lsrs	r3, r3, #11
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	0800333c 	.word	0x0800333c

08002718 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	220f      	movs	r2, #15
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_GetClockConfig+0x58>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_RCC_GetClockConfig+0x58>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_GetClockConfig+0x58>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCC_GetClockConfig+0x58>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0207 	and.w	r2, r3, #7
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40021000 	.word	0x40021000
 8002774:	40022000 	.word	0x40022000

08002778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <RCC_Delay+0x34>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <RCC_Delay+0x38>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0a5b      	lsrs	r3, r3, #9
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002794:	bf00      	nop
  }
  while (Delay --);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	60fa      	str	r2, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <RCC_Delay+0x1c>
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000000 	.word	0x20000000
 80027b0:	10624dd3 	.word	0x10624dd3

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d07d      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	4a4b      	ldr	r2, [pc, #300]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	61d3      	str	r3, [r2, #28]
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d118      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002814:	f7fe fab0 	bl	8000d78 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	e008      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281c:	f7fe faac 	bl	8000d78 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e06d      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800283a:	4b36      	ldr	r3, [pc, #216]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d02e      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d027      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002868:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800286e:	4a29      	ldr	r2, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d014      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fa7b 	bl	8000d78 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fa77 	bl	8000d78 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e036      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4917      	ldr	r1, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a13      	ldr	r2, [pc, #76]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	490b      	ldr	r1, [pc, #44]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4904      	ldr	r1, [pc, #16]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
 800291c:	42420440 	.word	0x42420440

08002920 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b08d      	sub	sp, #52	; 0x34
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002928:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800292a:	f107 040c 	add.w	r4, r7, #12
 800292e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002934:	f240 2301 	movw	r3, #513	; 0x201
 8002938:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b10      	cmp	r3, #16
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b10      	cmp	r3, #16
 8002958:	f200 8091 	bhi.w	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d04c      	beq.n	80029fc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d07c      	beq.n	8002a62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002968:	e089      	b.n	8002a7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8082 	beq.w	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800298a:	4413      	add	r3, r2
 800298c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002990:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d018      	beq.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800299c:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0c5b      	lsrs	r3, r3, #17
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029aa:	4413      	add	r3, r2
 80029ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029bc:	4a37      	ldr	r2, [pc, #220]	; (8002a9c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029cc:	e004      	b.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029e4:	d102      	bne.n	80029ec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029ea:	e04a      	b.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029fa:	e042      	b.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a1e:	e01f      	b.n	8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2a:	d109      	bne.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002a38:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3e:	e00f      	b.n	8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a4a:	d11c      	bne.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002a58:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a5e:	e012      	b.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002a60:	e011      	b.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a62:	f7ff fe45 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0b9b      	lsrs	r3, r3, #14
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a7c:	e004      	b.n	8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002a86:	bf00      	nop
    }
  }
  return (frequency);
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3734      	adds	r7, #52	; 0x34
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	0800331c 	.word	0x0800331c
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	003d0900 	.word	0x003d0900
 8002aa4:	aaaaaaab 	.word	0xaaaaaaab

08002aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e041      	b.n	8002b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fd ffd8 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fa70 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d001      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e03a      	b.n	8002bd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00e      	beq.n	8002ba0 <HAL_TIM_Base_Start_IT+0x58>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8a:	d009      	beq.n	8002ba0 <HAL_TIM_Base_Start_IT+0x58>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIM_Base_Start_IT+0x58>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d111      	bne.n	8002bc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d010      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc2:	e007      	b.n	8002bd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800

08002bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0202 	mvn.w	r2, #2
 8002c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f9b1 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f9a4 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9b3 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0204 	mvn.w	r2, #4
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f987 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f97a 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f989 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0208 	mvn.w	r2, #8
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f95d 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f950 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f95f 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0210 	mvn.w	r2, #16
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f933 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f926 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f935 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0201 	mvn.w	r2, #1
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fdd8 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa77 	bl	800328a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b40      	cmp	r3, #64	; 0x40
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8f9 	bl	8002fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0220 	mvn.w	r2, #32
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa42 	bl	8003278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIM_ConfigClockSource+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e0b3      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x180>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4c:	d03e      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0xd0>
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	f200 8087 	bhi.w	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	f000 8085 	beq.w	8002f68 <HAL_TIM_ConfigClockSource+0x16c>
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d87f      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d01a      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xa2>
 8002e68:	2b70      	cmp	r3, #112	; 0x70
 8002e6a:	d87b      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e6c:	2b60      	cmp	r3, #96	; 0x60
 8002e6e:	d050      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0x116>
 8002e70:	2b60      	cmp	r3, #96	; 0x60
 8002e72:	d877      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e74:	2b50      	cmp	r3, #80	; 0x50
 8002e76:	d03c      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xf6>
 8002e78:	2b50      	cmp	r3, #80	; 0x50
 8002e7a:	d873      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d058      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0x136>
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d86f      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e84:	2b30      	cmp	r3, #48	; 0x30
 8002e86:	d064      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x156>
 8002e88:	2b30      	cmp	r3, #48	; 0x30
 8002e8a:	d86b      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d060      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x156>
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d867      	bhi.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05c      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x156>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d05a      	beq.n	8002f52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e9c:	e062      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6899      	ldr	r1, [r3, #8]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f000 f966 	bl	800317e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ec0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	609a      	str	r2, [r3, #8]
      break;
 8002eca:	e04e      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6899      	ldr	r1, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f000 f94f 	bl	800317e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eee:	609a      	str	r2, [r3, #8]
      break;
 8002ef0:	e03b      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f000 f8c6 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2150      	movs	r1, #80	; 0x50
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f91d 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f10:	e02b      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f000 f8e4 	bl	80030ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2160      	movs	r1, #96	; 0x60
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f90d 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f30:	e01b      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f000 f8a6 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2140      	movs	r1, #64	; 0x40
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f8fd 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002f50:	e00b      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f000 f8f4 	bl	800314a <TIM_ITRx_SetConfig>
        break;
 8002f62:	e002      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a29      	ldr	r2, [pc, #164]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0xc0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800

08003090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 030a 	bic.w	r3, r3, #10
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 0210 	bic.w	r2, r3, #16
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	f043 0307 	orr.w	r3, r3, #7
 800316c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003198:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e046      	b.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d009      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10c      	bne.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800

08003278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	2600      	movs	r6, #0
 80032a0:	4d0c      	ldr	r5, [pc, #48]	; (80032d4 <__libc_init_array+0x38>)
 80032a2:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	f000 f822 	bl	80032f4 <_init>
 80032b0:	2600      	movs	r6, #0
 80032b2:	4d0a      	ldr	r5, [pc, #40]	; (80032dc <__libc_init_array+0x40>)
 80032b4:	4c0a      	ldr	r4, [pc, #40]	; (80032e0 <__libc_init_array+0x44>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003344 	.word	0x08003344
 80032d8:	08003344 	.word	0x08003344
 80032dc:	08003344 	.word	0x08003344
 80032e0:	08003348 	.word	0x08003348

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
