
HTTP_server_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003570  080109b8  080109b8  000209b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f28  08013f28  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08013f28  08013f28  00023f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f30  08013f30  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f30  08013f30  00023f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f34  08013f34  00023f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08013f38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          00006ca8  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006d34  20006d34  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b532  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055d0  00000000  00000000  0005b5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00060bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00061cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbb2  00000000  00000000  00062d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000205bc  00000000  00000000  0008f8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da2fb  00000000  00000000  000afe9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018a199  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c30  00000000  00000000  0018a1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080109a0 	.word	0x080109a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080109a0 	.word	0x080109a0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <LedCGIhandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//turning the LED lights off
// the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
	if (iIndex == 0) {
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d127      	bne.n	8000600 <LedCGIhandler+0x68>
		//turning the White_Pin lights off
		HAL_GPIO_WritePin(White_GPIO_Port, White_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	4854      	ldr	r0, [pc, #336]	; (8000708 <LedCGIhandler+0x170>)
 80005b6:	f002 f8ed 	bl	8002794 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD1 LED on the board is not ON
		LD1ON = false; //Когда Led is off LD1ON = false!
 80005ba:	4b54      	ldr	r3, [pc, #336]	; (800070c <LedCGIhandler+0x174>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2102      	movs	r1, #2
 80005c4:	4850      	ldr	r0, [pc, #320]	; (8000708 <LedCGIhandler+0x170>)
 80005c6:	f002 f8e5 	bl	8002794 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD2ON = false; //Когда Led is off LD1ON = false!
 80005ca:	4b51      	ldr	r3, [pc, #324]	; (8000710 <LedCGIhandler+0x178>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	484c      	ldr	r0, [pc, #304]	; (8000708 <LedCGIhandler+0x170>)
 80005d6:	f002 f8dd 	bl	8002794 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD3 LED on the board is not ON
		LD3ON = false; //Когда Led is off LD1ON = false!
 80005da:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <LedCGIhandler+0x17c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2108      	movs	r1, #8
 80005e4:	4848      	ldr	r0, [pc, #288]	; (8000708 <LedCGIhandler+0x170>)
 80005e6:	f002 f8d5 	bl	8002794 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD4ON = false; //Когда Led is off LD1ON = false!
 80005ea:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <LedCGIhandler+0x180>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Yellow_GPIO_Port, Yellow_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	4844      	ldr	r0, [pc, #272]	; (8000708 <LedCGIhandler+0x170>)
 80005f6:	f002 f8cd 	bl	8002794 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD5ON = false; //Когда Led is off LD1ON = false!
 80005fa:	4b48      	ldr	r3, [pc, #288]	; (800071c <LedCGIhandler+0x184>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < iNumParams; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e076      	b.n	80006f4 <LedCGIhandler+0x15c>
		if (strcmp(pcParam[i], "led") == 0) {
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4943      	ldr	r1, [pc, #268]	; (8000720 <LedCGIhandler+0x188>)
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fddc 	bl	80001d0 <strcmp>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d167      	bne.n	80006ee <LedCGIhandler+0x156>
			if (strcmp(pcValue[i], "1") == 0) {
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	4413      	add	r3, r2
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	493e      	ldr	r1, [pc, #248]	; (8000724 <LedCGIhandler+0x18c>)
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdd0 	bl	80001d0 <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d108      	bne.n	8000648 <LedCGIhandler+0xb0>
				HAL_GPIO_WritePin(White_GPIO_Port, White_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	4833      	ldr	r0, [pc, #204]	; (8000708 <LedCGIhandler+0x170>)
 800063c:	f002 f8aa 	bl	8002794 <HAL_GPIO_WritePin>
				// LD3 LED (red) on the board is ON!
				LD1ON = true; //Когда Led is ON LD1ON = true!
 8000640:	4b32      	ldr	r3, [pc, #200]	; (800070c <LedCGIhandler+0x174>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e052      	b.n	80006ee <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "2") == 0) {
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4935      	ldr	r1, [pc, #212]	; (8000728 <LedCGIhandler+0x190>)
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdbb 	bl	80001d0 <strcmp>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d108      	bne.n	8000672 <LedCGIhandler+0xda>
				HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2102      	movs	r1, #2
 8000664:	4828      	ldr	r0, [pc, #160]	; (8000708 <LedCGIhandler+0x170>)
 8000666:	f002 f895 	bl	8002794 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD2ON = true; //Когда Led is ON LD1ON = true!
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <LedCGIhandler+0x178>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e03d      	b.n	80006ee <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "3") == 0) {
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	4413      	add	r3, r2
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	492b      	ldr	r1, [pc, #172]	; (800072c <LedCGIhandler+0x194>)
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fda6 	bl	80001d0 <strcmp>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d108      	bne.n	800069c <LedCGIhandler+0x104>
				HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2104      	movs	r1, #4
 800068e:	481e      	ldr	r0, [pc, #120]	; (8000708 <LedCGIhandler+0x170>)
 8000690:	f002 f880 	bl	8002794 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD3ON = true; //Когда Led is ON LD1ON = true!
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <LedCGIhandler+0x17c>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e028      	b.n	80006ee <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "4") == 0) {
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4922      	ldr	r1, [pc, #136]	; (8000730 <LedCGIhandler+0x198>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd91 	bl	80001d0 <strcmp>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d108      	bne.n	80006c6 <LedCGIhandler+0x12e>
				HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2108      	movs	r1, #8
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <LedCGIhandler+0x170>)
 80006ba:	f002 f86b 	bl	8002794 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD4ON = true; //Когда Led is ON LD1ON = true!
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <LedCGIhandler+0x180>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	e013      	b.n	80006ee <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "5") == 0) {
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	4413      	add	r3, r2
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4918      	ldr	r1, [pc, #96]	; (8000734 <LedCGIhandler+0x19c>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fd7c 	bl	80001d0 <strcmp>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d107      	bne.n	80006ee <LedCGIhandler+0x156>
				HAL_GPIO_WritePin(Yellow_GPIO_Port, Yellow_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2110      	movs	r1, #16
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <LedCGIhandler+0x170>)
 80006e4:	f002 f856 	bl	8002794 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD5ON = true; //Когда Led is ON LD1ON = true!
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <LedCGIhandler+0x184>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iNumParams; i++) {
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d384      	bcc.n	8000606 <LedCGIhandler+0x6e>
			}
		}
	}
	// the extension .shtml for SSI to work
	return "/index.shtml";
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <LedCGIhandler+0x1a0>)

} // END [= CGI #5 =]
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40020c00 	.word	0x40020c00
 800070c:	200000a8 	.word	0x200000a8
 8000710:	200000a9 	.word	0x200000a9
 8000714:	200000aa 	.word	0x200000aa
 8000718:	200000ab 	.word	0x200000ab
 800071c:	200000ac 	.word	0x200000ac
 8000720:	080109ec 	.word	0x080109ec
 8000724:	080109f0 	.word	0x080109f0
 8000728:	080109f4 	.word	0x080109f4
 800072c:	080109f8 	.word	0x080109f8
 8000730:	080109fc 	.word	0x080109fc
 8000734:	08010a00 	.word	0x08010a00
 8000738:	08010a04 	.word	0x08010a04

0800073c <myCGIinit>:

// function to initialize CGI [= CGI #6 =]
void myCGIinit(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	theCGItable[0] = LedCGI;
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <myCGIinit+0x1c>)
 8000742:	4a06      	ldr	r2, [pc, #24]	; (800075c <myCGIinit+0x20>)
 8000744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000748:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	http_set_cgi_handlers(theCGItable, 1);
 800074c:	2101      	movs	r1, #1
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <myCGIinit+0x1c>)
 8000750:	f004 fca6 	bl	80050a0 <http_set_cgi_handlers>
} // END [= CGI #6 =]
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000684 	.word	0x20000684
 800075c:	08013914 	.word	0x08013914

08000760 <mySSIHandler>:

// the actual function for SSI [* SSI #4 *] Прописыаем галочку в боксе!
u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b092      	sub	sp, #72	; 0x48
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	if (iIndex == 0) {
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d142      	bne.n	80007f8 <mySSIHandler+0x98>
		if (LD1ON == false) {
 8000772:	4baf      	ldr	r3, [pc, #700]	; (8000a30 <mySSIHandler+0x2d0>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d019      	beq.n	80007b4 <mySSIHandler+0x54>
			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\">";
 8000780:	4bac      	ldr	r3, [pc, #688]	; (8000a34 <mySSIHandler+0x2d4>)
 8000782:	f107 0410 	add.w	r4, r7, #16
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000790:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000794:	c407      	stmia	r4!, {r0, r1, r2}
 8000796:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr1);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	68b8      	ldr	r0, [r7, #8]
 80007a0:	f00f f921 	bl	800f9e6 <strcpy>
			return strlen(myStr1);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd1b 	bl	80001e4 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	e138      	b.n	8000a26 <mySSIHandler+0x2c6>
		} else if (LD1ON == true) {
 80007b4:	4b9e      	ldr	r3, [pc, #632]	; (8000a30 <mySSIHandler+0x2d0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f000 8133 	beq.w	8000a24 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr1[] ="<input value=\"1\" name=\"led\" type=\"checkbox\" checked>";
 80007be:	4b9e      	ldr	r3, [pc, #632]	; (8000a38 <mySSIHandler+0x2d8>)
 80007c0:	f107 0410 	add.w	r4, r7, #16
 80007c4:	461d      	mov	r5, r3
 80007c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007d6:	6020      	str	r0, [r4, #0]
 80007d8:	3404      	adds	r4, #4
 80007da:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr1);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	68b8      	ldr	r0, [r7, #8]
 80007e4:	f00f f8ff 	bl	800f9e6 <strcpy>
			return strlen(myStr1);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fcf9 	bl	80001e4 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	e116      	b.n	8000a26 <mySSIHandler+0x2c6>
		}
	} else if (iIndex == 1) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d142      	bne.n	8000884 <mySSIHandler+0x124>
		if (LD2ON == false) {
 80007fe:	4b8f      	ldr	r3, [pc, #572]	; (8000a3c <mySSIHandler+0x2dc>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f083 0301 	eor.w	r3, r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d019      	beq.n	8000840 <mySSIHandler+0xe0>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\">";
 800080c:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <mySSIHandler+0x2e0>)
 800080e:	f107 0410 	add.w	r4, r7, #16
 8000812:	461d      	mov	r5, r3
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000820:	c407      	stmia	r4!, {r0, r1, r2}
 8000822:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr2);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f00f f8db 	bl	800f9e6 <strcpy>
			return strlen(myStr2);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fcd5 	bl	80001e4 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29b      	uxth	r3, r3
 800083e:	e0f2      	b.n	8000a26 <mySSIHandler+0x2c6>
		} else if (LD2ON == true) {
 8000840:	4b7e      	ldr	r3, [pc, #504]	; (8000a3c <mySSIHandler+0x2dc>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 80ed 	beq.w	8000a24 <mySSIHandler+0x2c4>
			// since the LD2 blue LED on the board is ON we make its checkbox checked!
			char myStr2[] =
 800084a:	4b7e      	ldr	r3, [pc, #504]	; (8000a44 <mySSIHandler+0x2e4>)
 800084c:	f107 0410 	add.w	r4, r7, #16
 8000850:	461d      	mov	r5, r3
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000862:	6020      	str	r0, [r4, #0]
 8000864:	3404      	adds	r4, #4
 8000866:	7021      	strb	r1, [r4, #0]
					"<input value=\"2\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr2);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f00f f8b9 	bl	800f9e6 <strcpy>
			return strlen(myStr2);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fcb3 	bl	80001e4 <strlen>
 800087e:	4603      	mov	r3, r0
 8000880:	b29b      	uxth	r3, r3
 8000882:	e0d0      	b.n	8000a26 <mySSIHandler+0x2c6>
		}
	}
	else if (iIndex == 2) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d142      	bne.n	8000910 <mySSIHandler+0x1b0>
		if (LD3ON == false) {
 800088a:	4b6f      	ldr	r3, [pc, #444]	; (8000a48 <mySSIHandler+0x2e8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f083 0301 	eor.w	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d019      	beq.n	80008cc <mySSIHandler+0x16c>
			char myStr3[] = "<input value=\"3\" name=\"led\" type=\"checkbox\">";
 8000898:	4b6c      	ldr	r3, [pc, #432]	; (8000a4c <mySSIHandler+0x2ec>)
 800089a:	f107 0410 	add.w	r4, r7, #16
 800089e:	461d      	mov	r5, r3
 80008a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ac:	c407      	stmia	r4!, {r0, r1, r2}
 80008ae:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr3);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f00f f895 	bl	800f9e6 <strcpy>
			return strlen(myStr3);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fc8f 	bl	80001e4 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	e0ac      	b.n	8000a26 <mySSIHandler+0x2c6>
		} else if (LD3ON == true) {
 80008cc:	4b5e      	ldr	r3, [pc, #376]	; (8000a48 <mySSIHandler+0x2e8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 80a7 	beq.w	8000a24 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr3[] ="<input value=\"3\" name=\"led\" type=\"checkbox\" checked>";
 80008d6:	4b5e      	ldr	r3, [pc, #376]	; (8000a50 <mySSIHandler+0x2f0>)
 80008d8:	f107 0410 	add.w	r4, r7, #16
 80008dc:	461d      	mov	r5, r3
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ee:	6020      	str	r0, [r4, #0]
 80008f0:	3404      	adds	r4, #4
 80008f2:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr3);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	68b8      	ldr	r0, [r7, #8]
 80008fc:	f00f f873 	bl	800f9e6 <strcpy>
			return strlen(myStr3);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fc6d 	bl	80001e4 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	b29b      	uxth	r3, r3
 800090e:	e08a      	b.n	8000a26 <mySSIHandler+0x2c6>
		}
	}
	else if (iIndex == 3) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d141      	bne.n	800099a <mySSIHandler+0x23a>
		if (LD4ON == false) {
 8000916:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <mySSIHandler+0x2f4>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	f083 0301 	eor.w	r3, r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d019      	beq.n	8000958 <mySSIHandler+0x1f8>
			char myStr4[] = "<input value=\"4\" name=\"led\" type=\"checkbox\">";
 8000924:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <mySSIHandler+0x2f8>)
 8000926:	f107 0410 	add.w	r4, r7, #16
 800092a:	461d      	mov	r5, r3
 800092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000934:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000938:	c407      	stmia	r4!, {r0, r1, r2}
 800093a:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr4);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	68b8      	ldr	r0, [r7, #8]
 8000944:	f00f f84f 	bl	800f9e6 <strcpy>
			return strlen(myStr4);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc49 	bl	80001e4 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29b      	uxth	r3, r3
 8000956:	e066      	b.n	8000a26 <mySSIHandler+0x2c6>
		} else if (LD4ON == true) {
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <mySSIHandler+0x2f4>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d061      	beq.n	8000a24 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr4[] ="<input value=\"4\" name=\"led\" type=\"checkbox\" checked>";
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <mySSIHandler+0x2fc>)
 8000962:	f107 0410 	add.w	r4, r7, #16
 8000966:	461d      	mov	r5, r3
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000974:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000978:	6020      	str	r0, [r4, #0]
 800097a:	3404      	adds	r4, #4
 800097c:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr4);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	68b8      	ldr	r0, [r7, #8]
 8000986:	f00f f82e 	bl	800f9e6 <strcpy>
			return strlen(myStr4);
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc28 	bl	80001e4 <strlen>
 8000994:	4603      	mov	r3, r0
 8000996:	b29b      	uxth	r3, r3
 8000998:	e045      	b.n	8000a26 <mySSIHandler+0x2c6>
		}
	}
	else if (iIndex == 4) {
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d141      	bne.n	8000a24 <mySSIHandler+0x2c4>
		if (LD5ON == false) {
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <mySSIHandler+0x300>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d019      	beq.n	80009e2 <mySSIHandler+0x282>
			char myStr5[] = "<input value=\"5\" name=\"led\" type=\"checkbox\">";
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <mySSIHandler+0x304>)
 80009b0:	f107 0410 	add.w	r4, r7, #16
 80009b4:	461d      	mov	r5, r3
 80009b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009c2:	c407      	stmia	r4!, {r0, r1, r2}
 80009c4:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr5);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	68b8      	ldr	r0, [r7, #8]
 80009ce:	f00f f80a 	bl	800f9e6 <strcpy>
			return strlen(myStr5);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc04 	bl	80001e4 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29b      	uxth	r3, r3
 80009e0:	e021      	b.n	8000a26 <mySSIHandler+0x2c6>
		} else if (LD5ON == true) {
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <mySSIHandler+0x300>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d01c      	beq.n	8000a24 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr5[] ="<input value=\"5\" name=\"led\" type=\"checkbox\" checked>";
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <mySSIHandler+0x308>)
 80009ec:	f107 0410 	add.w	r4, r7, #16
 80009f0:	461d      	mov	r5, r3
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a02:	6020      	str	r0, [r4, #0]
 8000a04:	3404      	adds	r4, #4
 8000a06:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr5);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	68b8      	ldr	r0, [r7, #8]
 8000a10:	f00e ffe9 	bl	800f9e6 <strcpy>
			return strlen(myStr5);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fbe3 	bl	80001e4 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	e000      	b.n	8000a26 <mySSIHandler+0x2c6>
		}
	}
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3748      	adds	r7, #72	; 0x48
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000a8 	.word	0x200000a8
 8000a34:	08010a14 	.word	0x08010a14
 8000a38:	08010a44 	.word	0x08010a44
 8000a3c:	200000a9 	.word	0x200000a9
 8000a40:	08010a7c 	.word	0x08010a7c
 8000a44:	08010aac 	.word	0x08010aac
 8000a48:	200000aa 	.word	0x200000aa
 8000a4c:	08010ae4 	.word	0x08010ae4
 8000a50:	08010b14 	.word	0x08010b14
 8000a54:	200000ab 	.word	0x200000ab
 8000a58:	08010b4c 	.word	0x08010b4c
 8000a5c:	08010b7c 	.word	0x08010b7c
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	08010bb4 	.word	0x08010bb4
 8000a68:	08010be4 	.word	0x08010be4

08000a6c <mySSIinit>:
// function to initialize SSI [* SSI #5 *]
void mySSIinit(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,
 8000a70:	2205      	movs	r2, #5
 8000a72:	4903      	ldr	r1, [pc, #12]	; (8000a80 <mySSIinit+0x14>)
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <mySSIinit+0x18>)
 8000a76:	f004 fad1 	bl	800501c <http_set_ssi_handler>
	numSSItags);
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000000 	.word	0x20000000
 8000a84:	08000761 	.word	0x08000761

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fa44 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f80e 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f876 	bl	8000b84 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000a98:	f002 fae2 	bl	8003060 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
     httpd_init(); // initializing the HTTPd
 8000a9c:	f004 fa9e 	bl	8004fdc <httpd_init>

     myCGIinit(); // initializing CGI  [= CGI #7 =]
 8000aa0:	f7ff fe4c 	bl	800073c <myCGIinit>

     mySSIinit(); // initializing SSI [* SSI #6 *]
 8000aa4:	f7ff ffe2 	bl	8000a6c <mySSIinit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      MX_LWIP_Process(); // starting the LWIP process
 8000aa8:	f002 fc0c 	bl	80032c4 <MX_LWIP_Process>
 8000aac:	e7fc      	b.n	8000aa8 <main+0x20>
	...

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	; 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00e ff24 	bl	800f90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <SystemClock_Config+0xcc>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <SystemClock_Config+0xcc>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemClock_Config+0xcc>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <SystemClock_Config+0xd0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <SystemClock_Config+0xd0>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <SystemClock_Config+0xd0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b24:	23a8      	movs	r3, #168	; 0xa8
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fe47 	bl	80027c8 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b40:	f000 f88c 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2105      	movs	r1, #5
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 f8a8 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b6e:	f000 f875 	bl	8000c5c <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	; 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_GPIO_Init+0xd0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, White_Pin|Green_Pin|Blue_Pin|Red_Pin
 8000c26:	2200      	movs	r2, #0
 8000c28:	211f      	movs	r1, #31
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <MX_GPIO_Init+0xd4>)
 8000c2c:	f001 fdb2 	bl	8002794 <HAL_GPIO_WritePin>
                          |Yellow_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : White_Pin Green_Pin Blue_Pin Red_Pin
                           Yellow_Pin */
  GPIO_InitStruct.Pin = White_Pin|Green_Pin|Blue_Pin|Red_Pin
 8000c30:	231f      	movs	r3, #31
 8000c32:	617b      	str	r3, [r7, #20]
                          |Yellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_GPIO_Init+0xd4>)
 8000c48:	f001 fc08 	bl	800245c <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f95a 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_kill>:

int _kill(int pid, int sig)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_kill+0x20>)
 8000d28:	2216      	movs	r2, #22
 8000d2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20006d24 	.word	0x20006d24

08000d40 <_exit>:

void _exit (int status)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ffe5 	bl	8000d1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d52:	e7fe      	b.n	8000d52 <_exit+0x12>

08000d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e00a      	b.n	8000d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d66:	f3af 8000 	nop.w
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	b2ca      	uxtb	r2, r1
 8000d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbf0      	blt.n	8000d66 <_read+0x12>
	}

return len;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e009      	b.n	8000db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf1      	blt.n	8000da0 <_write+0x12>
	}
	return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_close>:

int _close(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dee:	605a      	str	r2, [r3, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_isatty>:

int _isatty(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	return 1;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d205      	bcs.n	8000e6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <_sbrk+0x6c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20020000 	.word	0x20020000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	200000b0 	.word	0x200000b0
 8000e98:	20006d38 	.word	0x20006d38
 8000e9c:	20006d24 	.word	0x20006d24

08000ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd7 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f00e fccb 	bl	800f88c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fdc7 	bl	8000a88 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000f08:	08013f38 	.word	0x08013f38
  ldr r2, =_sbss
 8000f0c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000f10:	20006d34 	.word	0x20006d34

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f931 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe8c 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f93b 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 f911 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000014 	.word	0x20000014
 8000fb4:	2000001c 	.word	0x2000001c
 8000fb8:	20000018 	.word	0x20000018

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000001c 	.word	0x2000001c
 8000fe0:	2000068c 	.word	0x2000068c

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2000068c 	.word	0x2000068c

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000001c 	.word	0x2000001c

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff47 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff5c 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffb0 	bl	8001164 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001220:	4baa      	ldr	r3, [pc, #680]	; (80014cc <HAL_ETH_Init+0x2bc>)
 8001222:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e183      	b.n	800153e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f002 f846 	bl	80032dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b9e      	ldr	r3, [pc, #632]	; (80014d0 <HAL_ETH_Init+0x2c0>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	4a9d      	ldr	r2, [pc, #628]	; (80014d0 <HAL_ETH_Init+0x2c0>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125e:	6453      	str	r3, [r2, #68]	; 0x44
 8001260:	4b9b      	ldr	r3, [pc, #620]	; (80014d0 <HAL_ETH_Init+0x2c0>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800126c:	4b99      	ldr	r3, [pc, #612]	; (80014d4 <HAL_ETH_Init+0x2c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a98      	ldr	r2, [pc, #608]	; (80014d4 <HAL_ETH_Init+0x2c4>)
 8001272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001276:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001278:	4b96      	ldr	r3, [pc, #600]	; (80014d4 <HAL_ETH_Init+0x2c4>)
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4994      	ldr	r1, [pc, #592]	; (80014d4 <HAL_ETH_Init+0x2c4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0201 	orr.w	r2, r2, #1
 8001298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800129c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800129e:	f7ff fea1 	bl	8000fe4 <HAL_GetTick>
 80012a2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012a4:	e011      	b.n	80012ca <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80012a6:	f7ff fe9d 	bl	8000fe4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012b4:	d909      	bls.n	80012ca <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e139      	b.n	800153e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e4      	bne.n	80012a6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f023 031c 	bic.w	r3, r3, #28
 80012ea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80012ec:	f001 feac 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 80012f0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4a78      	ldr	r2, [pc, #480]	; (80014d8 <HAL_ETH_Init+0x2c8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d908      	bls.n	800130c <HAL_ETH_Init+0xfc>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4a77      	ldr	r2, [pc, #476]	; (80014dc <HAL_ETH_Init+0x2cc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d804      	bhi.n	800130c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e027      	b.n	800135c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <HAL_ETH_Init+0x2cc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d908      	bls.n	8001326 <HAL_ETH_Init+0x116>
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4a6d      	ldr	r2, [pc, #436]	; (80014cc <HAL_ETH_Init+0x2bc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d204      	bcs.n	8001326 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f043 030c 	orr.w	r3, r3, #12
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	e01a      	b.n	800135c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4a68      	ldr	r2, [pc, #416]	; (80014cc <HAL_ETH_Init+0x2bc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d303      	bcc.n	8001336 <HAL_ETH_Init+0x126>
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4a6b      	ldr	r2, [pc, #428]	; (80014e0 <HAL_ETH_Init+0x2d0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d911      	bls.n	800135a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4a69      	ldr	r2, [pc, #420]	; (80014e0 <HAL_ETH_Init+0x2d0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d908      	bls.n	8001350 <HAL_ETH_Init+0x140>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_ETH_Init+0x2d4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d804      	bhi.n	8001350 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	e005      	b.n	800135c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e000      	b.n	800135c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800135a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001364:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001368:	2100      	movs	r1, #0
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fb98 	bl	8001aa0 <HAL_ETH_WritePHYRegister>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fd4d 	bl	8001e1c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0d7      	b.n	800153e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800138e:	20ff      	movs	r0, #255	; 0xff
 8001390:	f7ff fe34 	bl	8000ffc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80a5 	beq.w	80014e8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800139e:	f7ff fe21 	bl	8000fe4 <HAL_GetTick>
 80013a2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	461a      	mov	r2, r3
 80013aa:	2101      	movs	r1, #1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fb0f 	bl	80019d0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013b2:	f7ff fe17 	bl	8000fe4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d90f      	bls.n	80013e4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013c8:	6939      	ldr	r1, [r7, #16]
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fd26 	bl	8001e1c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0ac      	b.n	800153e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0da      	beq.n	80013a4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80013ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fb53 	bl	8001aa0 <HAL_ETH_WritePHYRegister>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00b      	beq.n	8001418 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001404:	6939      	ldr	r1, [r7, #16]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fd08 	bl	8001e1c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001414:	2301      	movs	r3, #1
 8001416:	e092      	b.n	800153e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff fde4 	bl	8000fe4 <HAL_GetTick>
 800141c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	461a      	mov	r2, r3
 8001424:	2101      	movs	r1, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fad2 	bl	80019d0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800142c:	f7ff fdda 	bl	8000fe4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d90f      	bls.n	800145e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001442:	6939      	ldr	r1, [r7, #16]
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fce9 	bl	8001e1c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e06f      	b.n	800153e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0da      	beq.n	800141e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	461a      	mov	r2, r3
 800146e:	2110      	movs	r1, #16
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 faad 	bl	80019d0 <HAL_ETH_ReadPHYRegister>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fcca 	bl	8001e1c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001490:	2301      	movs	r3, #1
 8001492:	e054      	b.n	800153e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	e002      	b.n	80014ae <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	e035      	b.n	800152c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e030      	b.n	800152c <HAL_ETH_Init+0x31c>
 80014ca:	bf00      	nop
 80014cc:	03938700 	.word	0x03938700
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800
 80014d8:	01312cff 	.word	0x01312cff
 80014dc:	02160ebf 	.word	0x02160ebf
 80014e0:	05f5e0ff 	.word	0x05f5e0ff
 80014e4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 facd 	bl	8001aa0 <HAL_ETH_WritePHYRegister>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001510:	6939      	ldr	r1, [r7, #16]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fc82 	bl	8001e1c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e00c      	b.n	800153e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001524:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001528:	f7ff fd68 	bl	8000ffc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800152c:	6939      	ldr	r1, [r7, #16]
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fc74 	bl	8001e1c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop

08001548 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ETH_DMATxDescListInit+0x20>
 8001564:	2302      	movs	r3, #2
 8001566:	e052      	b.n	800160e <HAL_ETH_DMATxDescListInit+0xc6>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2202      	movs	r2, #2
 8001574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e030      	b.n	80015e6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d208      	bcs.n	80015da <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	461a      	mov	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	e002      	b.n	80015e0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3ca      	bcc.n	8001584 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f8:	3310      	adds	r3, #16
 80015fa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800161a:	b480      	push	{r7}
 800161c:	b087      	sub	sp, #28
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_ETH_DMARxDescListInit+0x20>
 8001636:	2302      	movs	r3, #2
 8001638:	e056      	b.n	80016e8 <HAL_ETH_DMARxDescListInit+0xce>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e034      	b.n	80016c0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800166e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	461a      	mov	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	3b01      	subs	r3, #1
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d208      	bcs.n	80016b4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	e002      	b.n	80016ba <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d3c6      	bcc.n	8001656 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	330c      	adds	r3, #12
 80016d4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ETH_TransmitFrame+0x24>
 8001714:	2302      	movs	r3, #2
 8001716:	e0cd      	b.n	80018b4 <HAL_ETH_TransmitFrame+0x1c0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800173e:	2301      	movs	r3, #1
 8001740:	e0b8      	b.n	80018b4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	da09      	bge.n	8001760 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2212      	movs	r2, #18
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0a9      	b.n	80018b4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001766:	4293      	cmp	r3, r2
 8001768:	d915      	bls.n	8001796 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	4a54      	ldr	r2, [pc, #336]	; (80018c0 <HAL_ETH_TransmitFrame+0x1cc>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0a9b      	lsrs	r3, r3, #10
 8001774:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4b51      	ldr	r3, [pc, #324]	; (80018c0 <HAL_ETH_TransmitFrame+0x1cc>)
 800177a:	fba3 1302 	umull	r1, r3, r3, r2
 800177e:	0a9b      	lsrs	r3, r3, #10
 8001780:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e001      	b.n	800179a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001796:	2301      	movs	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d11c      	bne.n	80017da <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017ae:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017ba:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017d8:	e04b      	b.n	8001872 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	e044      	b.n	800186a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ee:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001804:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800180e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3b01      	subs	r3, #1
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	429a      	cmp	r2, r3
 8001818:	d116      	bne.n	8001848 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001828:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <HAL_ETH_TransmitFrame+0x1d0>)
 800182e:	fb02 f203 	mul.w	r2, r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800183a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001846:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001856:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	3301      	adds	r3, #1
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	429a      	cmp	r2, r3
 8001870:	d3b6      	bcc.n	80017e0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	3314      	adds	r3, #20
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00d      	beq.n	80018a2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188e:	3314      	adds	r3, #20
 8001890:	2204      	movs	r2, #4
 8001892:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	3304      	adds	r3, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	ac02b00b 	.word	0xac02b00b
 80018c4:	fffffa0c 	.word	0xfffffa0c

080018c8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ETH_GetReceivedFrame+0x1a>
 80018de:	2302      	movs	r3, #2
 80018e0:	e070      	b.n	80019c4 <HAL_ETH_GetReceivedFrame+0xfc>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db5a      	blt.n	80019b2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d030      	beq.n	800196c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	2b01      	cmp	r3, #1
 800191a:	d103      	bne.n	8001924 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0c1b      	lsrs	r3, r3, #16
 8001934:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001938:	3b04      	subs	r3, #4
 800193a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e02b      	b.n	80019c4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001976:	2b00      	cmp	r3, #0
 8001978:	d010      	beq.n	800199c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	461a      	mov	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
 800199a:	e00a      	b.n	80019b2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	460b      	mov	r3, r1
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b82      	cmp	r3, #130	; 0x82
 80019f0:	d101      	bne.n	80019f6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	e050      	b.n	8001a98 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2282      	movs	r2, #130	; 0x82
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 031c 	and.w	r3, r3, #28
 8001a0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8a1b      	ldrh	r3, [r3, #16]
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a1c:	897b      	ldrh	r3, [r7, #10]
 8001a1e:	019b      	lsls	r3, r3, #6
 8001a20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f023 0302 	bic.w	r3, r3, #2
 8001a30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a42:	f7ff facf 	bl	8000fe4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a48:	e015      	b.n	8001a76 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a4a:	f7ff facb 	bl	8000fe4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d309      	bcc.n	8001a6e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e014      	b.n	8001a98 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e4      	bne.n	8001a4a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b42      	cmp	r3, #66	; 0x42
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e04e      	b.n	8001b64 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2242      	movs	r2, #66	; 0x42
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 031c 	and.w	r3, r3, #28
 8001adc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8a1b      	ldrh	r3, [r3, #16]
 8001ae2:	02db      	lsls	r3, r3, #11
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001aec:	897b      	ldrh	r3, [r7, #10]
 8001aee:	019b      	lsls	r3, r3, #6
 8001af0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff fa62 	bl	8000fe4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b22:	e015      	b.n	8001b50 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b24:	f7ff fa5e 	bl	8000fe4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d309      	bcc.n	8001b48 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e00d      	b.n	8001b64 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e4      	bne.n	8001b24 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ETH_Start+0x16>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e01f      	b.n	8001bc2 <HAL_ETH_Start+0x56>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fb44 	bl	8002220 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb7b 	bl	8002294 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fc12 	bl	80023c8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fbaf 	bl	8002308 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fbdc 	bl	8002368 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_ETH_Stop+0x16>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e01f      	b.n	8001c20 <HAL_ETH_Stop+0x56>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fba1 	bl	8002338 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fbce 	bl	8002398 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fb66 	bl	80022ce <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fbe0 	bl	80023c8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fb26 	bl	800225a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_ETH_ConfigMAC+0x1c>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0e4      	b.n	8001e0e <HAL_ETH_ConfigMAC+0x1e6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80b1 	beq.w	8001dbe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c74:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c7a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c80:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c86:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c8c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c92:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c98:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c9e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001ca4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001caa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001cb0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001cb6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff f994 	bl	8000ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ce4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001cea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001cf0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001cf6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001cfc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d02:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d0e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d10:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff f96e 	bl	8000ffc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d30:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d3a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d58:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d5e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d64:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d6a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d70:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff f937 	bl	8000ffc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff f924 	bl	8000ffc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	61da      	str	r2, [r3, #28]
 8001dbc:	e01e      	b.n	8001dfc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001dcc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff f904 	bl	8000ffc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	ff20810f 	.word	0xff20810f

08001e1c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0b0      	sub	sp, #192	; 0xc0
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e40:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e66:	663b      	str	r3, [r7, #96]	; 0x60
 8001e68:	e001      	b.n	8001e6e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e72:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e88:	2340      	movs	r3, #64	; 0x40
 8001e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ef0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef4:	4bac      	ldr	r3, [pc, #688]	; (80021a8 <ETH_MACDMAConfig+0x38c>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f00:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f04:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f08:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f0e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f12:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f16:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f1c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f20:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f24:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f28:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f2c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f30:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff f853 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f5e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f64:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f68:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f6e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f74:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f7a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f80:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f8c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f8e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff f82e 	bl	8000ffc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fb2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fbc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fcc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fda:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fe0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001fe6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001fec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ff2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ff8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ffa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002018:	2001      	movs	r0, #1
 800201a:	f7fe ffef 	bl	8000ffc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002026:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002028:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800202c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7fe ffda 	bl	8000ffc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002050:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002064:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002076:	2304      	movs	r3, #4
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800207a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800208c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002096:	2300      	movs	r3, #0
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800209a:	2300      	movs	r3, #0
 800209c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a6:	3318      	adds	r3, #24
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <ETH_MACDMAConfig+0x390>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020ba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020bc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020be:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020c0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020c2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020c4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020c6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020c8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020ca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020cc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020ce:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020d0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020d2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020d6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020da:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ee:	3318      	adds	r3, #24
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fe:	3318      	adds	r3, #24
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe ff78 	bl	8000ffc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002114:	3318      	adds	r3, #24
 8002116:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800211a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002120:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002124:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002128:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800212c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800212e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002130:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002132:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002136:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002154:	2001      	movs	r0, #1
 8002156:	f7fe ff51 	bl	8000ffc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002166:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10f      	bne.n	8002190 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	331c      	adds	r3, #28
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218c:	331c      	adds	r3, #28
 800218e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	461a      	mov	r2, r3
 8002196:	2100      	movs	r1, #0
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f809 	bl	80021b0 <ETH_MACAddressConfig>
}
 800219e:	bf00      	nop
 80021a0:	37c0      	adds	r7, #192	; 0xc0
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	ff20810f 	.word	0xff20810f
 80021ac:	f8de3f23 	.word	0xf8de3f23

080021b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3305      	adds	r3, #5
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	3204      	adds	r2, #4
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <ETH_MACAddressConfig+0x68>)
 80021d2:	4413      	add	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3303      	adds	r3, #3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	061a      	lsls	r2, r3, #24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3302      	adds	r3, #2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	4313      	orrs	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <ETH_MACAddressConfig+0x6c>)
 8002202:	4413      	add	r3, r2
 8002204:	461a      	mov	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40028040 	.word	0x40028040
 800221c:	40028044 	.word	0x40028044

08002220 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002244:	2001      	movs	r0, #1
 8002246:	f000 f8e9 	bl	800241c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0208 	bic.w	r2, r2, #8
 8002274:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 f8cc 	bl	800241c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0204 	orr.w	r2, r2, #4
 80022ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f000 f8af 	bl	800241c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0204 	bic.w	r2, r2, #4
 80022e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 f892 	bl	800241c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	3318      	adds	r3, #24
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	3318      	adds	r3, #24
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	3318      	adds	r3, #24
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002358:	3318      	adds	r3, #24
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002378:	3318      	adds	r3, #24
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0202 	orr.w	r2, r2, #2
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	3318      	adds	r3, #24
 800238a:	601a      	str	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	3318      	adds	r3, #24
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0202 	bic.w	r2, r2, #2
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	3318      	adds	r3, #24
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	3318      	adds	r3, #24
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	3318      	adds	r3, #24
 80023ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	3318      	adds	r3, #24
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 f80c 	bl	800241c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240e:	3318      	adds	r3, #24
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <ETH_Delay+0x38>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <ETH_Delay+0x3c>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0a5b      	lsrs	r3, r3, #9
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002438:	bf00      	nop
  } 
  while (Delay --);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1e5a      	subs	r2, r3, #1
 800243e:	60fa      	str	r2, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f9      	bne.n	8002438 <ETH_Delay+0x1c>
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000014 	.word	0x20000014
 8002458:	10624dd3 	.word	0x10624dd3

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e16b      	b.n	8002750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 815a 	bne.w	800274a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80b4 	beq.w	800274a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_GPIO_Init+0x310>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_GPIO_Init+0x314>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x226>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x318>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x222>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a50      	ldr	r2, [pc, #320]	; (8002778 <HAL_GPIO_Init+0x31c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x21e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4f      	ldr	r2, [pc, #316]	; (800277c <HAL_GPIO_Init+0x320>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x21a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4e      	ldr	r2, [pc, #312]	; (8002780 <HAL_GPIO_Init+0x324>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x216>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x328>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x212>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4b      	ldr	r2, [pc, #300]	; (800278c <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x20a>
 8002662:	2307      	movs	r3, #7
 8002664:	e00e      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002666:	2308      	movs	r3, #8
 8002668:	e00c      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266a:	2306      	movs	r3, #6
 800266c:	e00a      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266e:	2305      	movs	r3, #5
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002672:	2304      	movs	r3, #4
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_GPIO_Init+0x310>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_GPIO_Init+0x334>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f ae90 	bls.w	8002478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40021c00 	.word	0x40021c00
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a4:	787b      	ldrb	r3, [r7, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b0:	e003      	b.n	80027ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e264      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d075      	beq.n	80028d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	4ba3      	ldr	r3, [pc, #652]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d00c      	beq.n	800280c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4ba0      	ldr	r3, [pc, #640]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d112      	bne.n	8002824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fe:	4b9d      	ldr	r3, [pc, #628]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280a:	d10b      	bne.n	8002824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	4b99      	ldr	r3, [pc, #612]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d05b      	beq.n	80028d0 <HAL_RCC_OscConfig+0x108>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d157      	bne.n	80028d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e23f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282c:	d106      	bne.n	800283c <HAL_RCC_OscConfig+0x74>
 800282e:	4b91      	ldr	r3, [pc, #580]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a90      	ldr	r2, [pc, #576]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e01d      	b.n	8002878 <HAL_RCC_OscConfig+0xb0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x98>
 8002846:	4b8b      	ldr	r3, [pc, #556]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a8a      	ldr	r2, [pc, #552]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a87      	ldr	r2, [pc, #540]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0xb0>
 8002860:	4b84      	ldr	r3, [pc, #528]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a83      	ldr	r2, [pc, #524]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a80      	ldr	r2, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fbb0 	bl	8000fe4 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe fbac 	bl	8000fe4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e204      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0xc0>
 80028a6:	e014      	b.n	80028d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fb9c 	bl	8000fe4 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7fe fb98 	bl	8000fe4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1f0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0xe8>
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d063      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d11c      	bne.n	8002930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x152>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1c4      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4952      	ldr	r1, [pc, #328]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	e03a      	b.n	80029a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002938:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <HAL_RCC_OscConfig+0x2b0>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fb51 	bl	8000fe4 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fb4d 	bl	8000fe4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1a5      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4940      	ldr	r1, [pc, #256]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCC_OscConfig+0x2b0>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fb30 	bl	8000fe4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fb2c 	bl	8000fe4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e184      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d030      	beq.n	8002a14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_OscConfig+0x2b4>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fb10 	bl	8000fe4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fb0c 	bl	8000fe4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e164      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x200>
 80029e6:	e015      	b.n	8002a14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_OscConfig+0x2b4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ee:	f7fe faf9 	bl	8000fe4 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe faf5 	bl	8000fe4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e14d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a0 	beq.w	8002b62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_OscConfig+0x2b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCC_OscConfig+0x2b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_RCC_OscConfig+0x2b8>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fabb 	bl	8000fe4 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e011      	b.n	8002a96 <HAL_RCC_OscConfig+0x2ce>
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470000 	.word	0x42470000
 8002a7c:	42470e80 	.word	0x42470e80
 8002a80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fe faae 	bl	8000fe4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e106      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b85      	ldr	r3, [pc, #532]	; (8002cac <HAL_RCC_OscConfig+0x4e4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
 8002aaa:	4b81      	ldr	r3, [pc, #516]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a80      	ldr	r2, [pc, #512]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x32a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x312>
 8002ac0:	4b7b      	ldr	r3, [pc, #492]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a7a      	ldr	r2, [pc, #488]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	4b78      	ldr	r3, [pc, #480]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a77      	ldr	r2, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x32a>
 8002ada:	4b75      	ldr	r3, [pc, #468]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a74      	ldr	r2, [pc, #464]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	4b72      	ldr	r3, [pc, #456]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a71      	ldr	r2, [pc, #452]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fa73 	bl	8000fe4 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe fa6f 	bl	8000fe4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0c5      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x33a>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fa5d 	bl	8000fe4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fa59 	bl	8000fe4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0af      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 809b 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d05c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d141      	bne.n	8002c04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <HAL_RCC_OscConfig+0x4ec>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe fa2d 	bl	8000fe4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fa29 	bl	8000fe4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e081      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba0:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	019b      	lsls	r3, r3, #6
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	4937      	ldr	r1, [pc, #220]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_RCC_OscConfig+0x4ec>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fa02 	bl	8000fe4 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe f9fe 	bl	8000fe4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e056      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x41c>
 8002c02:	e04e      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_OscConfig+0x4ec>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f9eb 	bl	8000fe4 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe f9e7 	bl	8000fe4 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e03f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x44a>
 8002c30:	e037      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e032      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_RCC_OscConfig+0x4e8>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d028      	beq.n	8002c9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d121      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d11a      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c6e:	4013      	ands	r3, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d111      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	42470060 	.word	0x42470060

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0cc      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b68      	ldr	r3, [pc, #416]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d90c      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0b8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d044      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d119      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e067      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4934      	ldr	r1, [pc, #208]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da8:	f7fe f91c 	bl	8000fe4 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe f918 	bl	8000fe4 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e04f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d20c      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e032      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4916      	ldr	r1, [pc, #88]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3e:	f000 f821 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e42:	4602      	mov	r2, r0
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	5ccb      	ldrb	r3, [r1, r3]
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe f87c 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023c00 	.word	0x40023c00
 8002e74:	40023800 	.word	0x40023800
 8002e78:	0801391c 	.word	0x0801391c
 8002e7c:	20000014 	.word	0x20000014
 8002e80:	20000018 	.word	0x20000018

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9c:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d00d      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	f200 80bd 	bhi.w	8003028 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8002eb6:	e0b7      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b61      	ldr	r3, [pc, #388]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002eba:	60bb      	str	r3, [r7, #8]
       break;
 8002ebc:	e0b7      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ebe:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ec0:	60bb      	str	r3, [r7, #8]
      break;
 8002ec2:	e0b4      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec4:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ecc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04d      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	099b      	lsrs	r3, r3, #6
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	ea02 0800 	and.w	r8, r2, r0
 8002ef2:	ea03 0901 	and.w	r9, r3, r1
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	014b      	lsls	r3, r1, #5
 8002f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f08:	0142      	lsls	r2, r0, #5
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	ebb0 0008 	subs.w	r0, r0, r8
 8002f12:	eb61 0109 	sbc.w	r1, r1, r9
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f24:	0182      	lsls	r2, r0, #6
 8002f26:	1a12      	subs	r2, r2, r0
 8002f28:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2c:	f04f 0000 	mov.w	r0, #0
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	00d9      	lsls	r1, r3, #3
 8002f36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f3a:	00d0      	lsls	r0, r2, #3
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	eb12 0208 	adds.w	r2, r2, r8
 8002f44:	eb43 0309 	adc.w	r3, r3, r9
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	0259      	lsls	r1, r3, #9
 8002f52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f56:	0250      	lsls	r0, r2, #9
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	f7fd f99a 	bl	80002a0 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	e04a      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	ea02 0400 	and.w	r4, r2, r0
 8002f8e:	ea03 0501 	and.w	r5, r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	014b      	lsls	r3, r1, #5
 8002fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fa4:	0142      	lsls	r2, r0, #5
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	1b00      	subs	r0, r0, r4
 8002fac:	eb61 0105 	sbc.w	r1, r1, r5
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	018b      	lsls	r3, r1, #6
 8002fba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fbe:	0182      	lsls	r2, r0, #6
 8002fc0:	1a12      	subs	r2, r2, r0
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	00d9      	lsls	r1, r3, #3
 8002fd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fd4:	00d0      	lsls	r0, r2, #3
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	1912      	adds	r2, r2, r4
 8002fdc:	eb45 0303 	adc.w	r3, r5, r3
 8002fe0:	f04f 0000 	mov.w	r0, #0
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	0299      	lsls	r1, r3, #10
 8002fea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fee:	0290      	lsls	r0, r2, #10
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	f7fd f94e 	bl	80002a0 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4613      	mov	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	3301      	adds	r3, #1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	60bb      	str	r3, [r7, #8]
      break;
 8003026:	e002      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800302a:	60bb      	str	r3, [r7, #8]
      break;
 800302c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302e:	68bb      	ldr	r3, [r7, #8]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000014 	.word	0x20000014

08003060 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <MX_LWIP_Init+0x23c>)
 8003068:	22c0      	movs	r2, #192	; 0xc0
 800306a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800306c:	4b8b      	ldr	r3, [pc, #556]	; (800329c <MX_LWIP_Init+0x23c>)
 800306e:	22a8      	movs	r2, #168	; 0xa8
 8003070:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8003072:	4b8a      	ldr	r3, [pc, #552]	; (800329c <MX_LWIP_Init+0x23c>)
 8003074:	2212      	movs	r2, #18
 8003076:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 114;
 8003078:	4b88      	ldr	r3, [pc, #544]	; (800329c <MX_LWIP_Init+0x23c>)
 800307a:	2272      	movs	r2, #114	; 0x72
 800307c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800307e:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003080:	22ff      	movs	r2, #255	; 0xff
 8003082:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003084:	4b86      	ldr	r3, [pc, #536]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800308a:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <MX_LWIP_Init+0x240>)
 800308c:	22ff      	movs	r2, #255	; 0xff
 800308e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003090:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003092:	2200      	movs	r2, #0
 8003094:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003096:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <MX_LWIP_Init+0x244>)
 8003098:	22c0      	movs	r2, #192	; 0xc0
 800309a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800309c:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <MX_LWIP_Init+0x244>)
 800309e:	22a8      	movs	r2, #168	; 0xa8
 80030a0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80030a2:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <MX_LWIP_Init+0x244>)
 80030a4:	2212      	movs	r2, #18
 80030a6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <MX_LWIP_Init+0x244>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80030ae:	f002 f8bf 	bl	8005230 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80030b2:	4b7a      	ldr	r3, [pc, #488]	; (800329c <MX_LWIP_Init+0x23c>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	061a      	lsls	r2, r3, #24
 80030b8:	4b78      	ldr	r3, [pc, #480]	; (800329c <MX_LWIP_Init+0x23c>)
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	4b76      	ldr	r3, [pc, #472]	; (800329c <MX_LWIP_Init+0x23c>)
 80030c2:	789b      	ldrb	r3, [r3, #2]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4313      	orrs	r3, r2
 80030c8:	4a74      	ldr	r2, [pc, #464]	; (800329c <MX_LWIP_Init+0x23c>)
 80030ca:	78d2      	ldrb	r2, [r2, #3]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	061a      	lsls	r2, r3, #24
 80030d0:	4b72      	ldr	r3, [pc, #456]	; (800329c <MX_LWIP_Init+0x23c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	0619      	lsls	r1, r3, #24
 80030d6:	4b71      	ldr	r3, [pc, #452]	; (800329c <MX_LWIP_Init+0x23c>)
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	4319      	orrs	r1, r3
 80030de:	4b6f      	ldr	r3, [pc, #444]	; (800329c <MX_LWIP_Init+0x23c>)
 80030e0:	789b      	ldrb	r3, [r3, #2]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	430b      	orrs	r3, r1
 80030e6:	496d      	ldr	r1, [pc, #436]	; (800329c <MX_LWIP_Init+0x23c>)
 80030e8:	78c9      	ldrb	r1, [r1, #3]
 80030ea:	430b      	orrs	r3, r1
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f2:	431a      	orrs	r2, r3
 80030f4:	4b69      	ldr	r3, [pc, #420]	; (800329c <MX_LWIP_Init+0x23c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	0619      	lsls	r1, r3, #24
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <MX_LWIP_Init+0x23c>)
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	4319      	orrs	r1, r3
 8003102:	4b66      	ldr	r3, [pc, #408]	; (800329c <MX_LWIP_Init+0x23c>)
 8003104:	789b      	ldrb	r3, [r3, #2]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	430b      	orrs	r3, r1
 800310a:	4964      	ldr	r1, [pc, #400]	; (800329c <MX_LWIP_Init+0x23c>)
 800310c:	78c9      	ldrb	r1, [r1, #3]
 800310e:	430b      	orrs	r3, r1
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003116:	431a      	orrs	r2, r3
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <MX_LWIP_Init+0x23c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	0619      	lsls	r1, r3, #24
 800311e:	4b5f      	ldr	r3, [pc, #380]	; (800329c <MX_LWIP_Init+0x23c>)
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	4319      	orrs	r1, r3
 8003126:	4b5d      	ldr	r3, [pc, #372]	; (800329c <MX_LWIP_Init+0x23c>)
 8003128:	789b      	ldrb	r3, [r3, #2]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	430b      	orrs	r3, r1
 800312e:	495b      	ldr	r1, [pc, #364]	; (800329c <MX_LWIP_Init+0x23c>)
 8003130:	78c9      	ldrb	r1, [r1, #3]
 8003132:	430b      	orrs	r3, r1
 8003134:	0e1b      	lsrs	r3, r3, #24
 8003136:	4313      	orrs	r3, r2
 8003138:	4a5b      	ldr	r2, [pc, #364]	; (80032a8 <MX_LWIP_Init+0x248>)
 800313a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <MX_LWIP_Init+0x240>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	061a      	lsls	r2, r3, #24
 8003142:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	431a      	orrs	r2, r3
 800314a:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <MX_LWIP_Init+0x240>)
 800314c:	789b      	ldrb	r3, [r3, #2]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	4313      	orrs	r3, r2
 8003152:	4a53      	ldr	r2, [pc, #332]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003154:	78d2      	ldrb	r2, [r2, #3]
 8003156:	4313      	orrs	r3, r2
 8003158:	061a      	lsls	r2, r3, #24
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <MX_LWIP_Init+0x240>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	0619      	lsls	r1, r3, #24
 8003160:	4b4f      	ldr	r3, [pc, #316]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	4319      	orrs	r1, r3
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <MX_LWIP_Init+0x240>)
 800316a:	789b      	ldrb	r3, [r3, #2]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	430b      	orrs	r3, r1
 8003170:	494b      	ldr	r1, [pc, #300]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003172:	78c9      	ldrb	r1, [r1, #3]
 8003174:	430b      	orrs	r3, r1
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800317c:	431a      	orrs	r2, r3
 800317e:	4b48      	ldr	r3, [pc, #288]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	0619      	lsls	r1, r3, #24
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	4319      	orrs	r1, r3
 800318c:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <MX_LWIP_Init+0x240>)
 800318e:	789b      	ldrb	r3, [r3, #2]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	430b      	orrs	r3, r1
 8003194:	4942      	ldr	r1, [pc, #264]	; (80032a0 <MX_LWIP_Init+0x240>)
 8003196:	78c9      	ldrb	r1, [r1, #3]
 8003198:	430b      	orrs	r3, r1
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80031a0:	431a      	orrs	r2, r3
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <MX_LWIP_Init+0x240>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	0619      	lsls	r1, r3, #24
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <MX_LWIP_Init+0x240>)
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	4319      	orrs	r1, r3
 80031b0:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <MX_LWIP_Init+0x240>)
 80031b2:	789b      	ldrb	r3, [r3, #2]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	430b      	orrs	r3, r1
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <MX_LWIP_Init+0x240>)
 80031ba:	78c9      	ldrb	r1, [r1, #3]
 80031bc:	430b      	orrs	r3, r1
 80031be:	0e1b      	lsrs	r3, r3, #24
 80031c0:	4313      	orrs	r3, r2
 80031c2:	4a3a      	ldr	r2, [pc, #232]	; (80032ac <MX_LWIP_Init+0x24c>)
 80031c4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	061a      	lsls	r2, r3, #24
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031d6:	789b      	ldrb	r3, [r3, #2]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	4313      	orrs	r3, r2
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031de:	78d2      	ldrb	r2, [r2, #3]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	061a      	lsls	r2, r3, #24
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	0619      	lsls	r1, r3, #24
 80031ea:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031ec:	785b      	ldrb	r3, [r3, #1]
 80031ee:	041b      	lsls	r3, r3, #16
 80031f0:	4319      	orrs	r1, r3
 80031f2:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031f4:	789b      	ldrb	r3, [r3, #2]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	430b      	orrs	r3, r1
 80031fa:	492a      	ldr	r1, [pc, #168]	; (80032a4 <MX_LWIP_Init+0x244>)
 80031fc:	78c9      	ldrb	r1, [r1, #3]
 80031fe:	430b      	orrs	r3, r1
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003206:	431a      	orrs	r2, r3
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <MX_LWIP_Init+0x244>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	0619      	lsls	r1, r3, #24
 800320e:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <MX_LWIP_Init+0x244>)
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	4319      	orrs	r1, r3
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <MX_LWIP_Init+0x244>)
 8003218:	789b      	ldrb	r3, [r3, #2]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	430b      	orrs	r3, r1
 800321e:	4921      	ldr	r1, [pc, #132]	; (80032a4 <MX_LWIP_Init+0x244>)
 8003220:	78c9      	ldrb	r1, [r1, #3]
 8003222:	430b      	orrs	r3, r1
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800322a:	431a      	orrs	r2, r3
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <MX_LWIP_Init+0x244>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	0619      	lsls	r1, r3, #24
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <MX_LWIP_Init+0x244>)
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	4319      	orrs	r1, r3
 800323a:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <MX_LWIP_Init+0x244>)
 800323c:	789b      	ldrb	r3, [r3, #2]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	430b      	orrs	r3, r1
 8003242:	4918      	ldr	r1, [pc, #96]	; (80032a4 <MX_LWIP_Init+0x244>)
 8003244:	78c9      	ldrb	r1, [r1, #3]
 8003246:	430b      	orrs	r3, r1
 8003248:	0e1b      	lsrs	r3, r3, #24
 800324a:	4313      	orrs	r3, r2
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <MX_LWIP_Init+0x250>)
 800324e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003250:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <MX_LWIP_Init+0x254>)
 8003252:	9302      	str	r3, [sp, #8]
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <MX_LWIP_Init+0x258>)
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2300      	movs	r3, #0
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <MX_LWIP_Init+0x250>)
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <MX_LWIP_Init+0x24c>)
 8003260:	4911      	ldr	r1, [pc, #68]	; (80032a8 <MX_LWIP_Init+0x248>)
 8003262:	4816      	ldr	r0, [pc, #88]	; (80032bc <MX_LWIP_Init+0x25c>)
 8003264:	f002 fc8a 	bl	8005b7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003268:	4814      	ldr	r0, [pc, #80]	; (80032bc <MX_LWIP_Init+0x25c>)
 800326a:	f002 fe39 	bl	8005ee0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <MX_LWIP_Init+0x25c>)
 8003270:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003280:	480e      	ldr	r0, [pc, #56]	; (80032bc <MX_LWIP_Init+0x25c>)
 8003282:	f002 fe3d 	bl	8005f00 <netif_set_up>
 8003286:	e002      	b.n	800328e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003288:	480c      	ldr	r0, [pc, #48]	; (80032bc <MX_LWIP_Init+0x25c>)
 800328a:	f002 fea5 	bl	8005fd8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800328e:	490c      	ldr	r1, [pc, #48]	; (80032c0 <MX_LWIP_Init+0x260>)
 8003290:	480a      	ldr	r0, [pc, #40]	; (80032bc <MX_LWIP_Init+0x25c>)
 8003292:	f002 fed3 	bl	800603c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200006d0 	.word	0x200006d0
 80032a0:	200006cc 	.word	0x200006cc
 80032a4:	20000690 	.word	0x20000690
 80032a8:	200006c8 	.word	0x200006c8
 80032ac:	200006d4 	.word	0x200006d4
 80032b0:	200006d8 	.word	0x200006d8
 80032b4:	0800f6e1 	.word	0x0800f6e1
 80032b8:	08003869 	.word	0x08003869
 80032bc:	20000694 	.word	0x20000694
 80032c0:	080038d5 	.word	0x080038d5

080032c4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80032c8:	4803      	ldr	r0, [pc, #12]	; (80032d8 <MX_LWIP_Process+0x14>)
 80032ca:	f000 faad 	bl	8003828 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80032ce:	f009 fe21 	bl	800cf14 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000694 	.word	0x20000694

080032dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a46      	ldr	r2, [pc, #280]	; (8003414 <HAL_ETH_MspInit+0x138>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f040 8085 	bne.w	800340a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800330a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800330e:	6313      	str	r3, [r2, #48]	; 0x30
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800332a:	6313      	str	r3, [r2, #48]	; 0x30
 800332c:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	4b36      	ldr	r3, [pc, #216]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	4a35      	ldr	r2, [pc, #212]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003342:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003346:	6313      	str	r3, [r2, #48]	; 0x30
 8003348:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6313      	str	r3, [r2, #48]	; 0x30
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6313      	str	r3, [r2, #48]	; 0x30
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6313      	str	r3, [r2, #48]	; 0x30
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_ETH_MspInit+0x13c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80033a8:	2332      	movs	r3, #50	; 0x32
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b4:	2303      	movs	r3, #3
 80033b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033b8:	230b      	movs	r3, #11
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	4816      	ldr	r0, [pc, #88]	; (800341c <HAL_ETH_MspInit+0x140>)
 80033c4:	f7ff f84a 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80033c8:	2386      	movs	r3, #134	; 0x86
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	2302      	movs	r3, #2
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d4:	2303      	movs	r3, #3
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033d8:	230b      	movs	r3, #11
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e0:	4619      	mov	r1, r3
 80033e2:	480f      	ldr	r0, [pc, #60]	; (8003420 <HAL_ETH_MspInit+0x144>)
 80033e4:	f7ff f83a 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80033e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2303      	movs	r3, #3
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033fa:	230b      	movs	r3, #11
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003402:	4619      	mov	r1, r3
 8003404:	4807      	ldr	r0, [pc, #28]	; (8003424 <HAL_ETH_MspInit+0x148>)
 8003406:	f7ff f829 	bl	800245c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800340a:	bf00      	nop
 800340c:	3738      	adds	r7, #56	; 0x38
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40028000 	.word	0x40028000
 8003418:	40023800 	.word	0x40023800
 800341c:	40020800 	.word	0x40020800
 8003420:	40020000 	.word	0x40020000
 8003424:	40020400 	.word	0x40020400

08003428 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <low_level_init+0x144>)
 8003436:	4a4e      	ldr	r2, [pc, #312]	; (8003570 <low_level_init+0x148>)
 8003438:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800343a:	4b4c      	ldr	r3, [pc, #304]	; (800356c <low_level_init+0x144>)
 800343c:	2201      	movs	r2, #1
 800343e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003440:	4b4a      	ldr	r3, [pc, #296]	; (800356c <low_level_init+0x144>)
 8003442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003446:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003448:	4b48      	ldr	r3, [pc, #288]	; (800356c <low_level_init+0x144>)
 800344a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003450:	4b46      	ldr	r3, [pc, #280]	; (800356c <low_level_init+0x144>)
 8003452:	2201      	movs	r2, #1
 8003454:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003456:	2300      	movs	r3, #0
 8003458:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800345e:	23e1      	movs	r3, #225	; 0xe1
 8003460:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003462:	2300      	movs	r3, #0
 8003464:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003466:	2300      	movs	r3, #0
 8003468:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800346a:	2300      	movs	r3, #0
 800346c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800346e:	4a3f      	ldr	r2, [pc, #252]	; (800356c <low_level_init+0x144>)
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <low_level_init+0x144>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800347c:	4b3b      	ldr	r3, [pc, #236]	; (800356c <low_level_init+0x144>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003482:	4b3a      	ldr	r3, [pc, #232]	; (800356c <low_level_init+0x144>)
 8003484:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003488:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800348a:	4838      	ldr	r0, [pc, #224]	; (800356c <low_level_init+0x144>)
 800348c:	f7fd fec0 	bl	8001210 <HAL_ETH_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d108      	bne.n	80034ac <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80034ac:	2304      	movs	r3, #4
 80034ae:	4a31      	ldr	r2, [pc, #196]	; (8003574 <low_level_init+0x14c>)
 80034b0:	4931      	ldr	r1, [pc, #196]	; (8003578 <low_level_init+0x150>)
 80034b2:	482e      	ldr	r0, [pc, #184]	; (800356c <low_level_init+0x144>)
 80034b4:	f7fe f848 	bl	8001548 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80034b8:	2304      	movs	r3, #4
 80034ba:	4a30      	ldr	r2, [pc, #192]	; (800357c <low_level_init+0x154>)
 80034bc:	4930      	ldr	r1, [pc, #192]	; (8003580 <low_level_init+0x158>)
 80034be:	482b      	ldr	r0, [pc, #172]	; (800356c <low_level_init+0x144>)
 80034c0:	f7fe f8ab 	bl	800161a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2206      	movs	r2, #6
 80034c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <low_level_init+0x144>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <low_level_init+0x144>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	785a      	ldrb	r2, [r3, #1]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <low_level_init+0x144>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	789a      	ldrb	r2, [r3, #2]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80034f0:	4b1e      	ldr	r3, [pc, #120]	; (800356c <low_level_init+0x144>)
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	78da      	ldrb	r2, [r3, #3]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80034fc:	4b1b      	ldr	r3, [pc, #108]	; (800356c <low_level_init+0x144>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	791a      	ldrb	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <low_level_init+0x144>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	795a      	ldrb	r2, [r3, #5]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800351a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003522:	f043 030a 	orr.w	r3, r3, #10
 8003526:	b2da      	uxtb	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800352e:	480f      	ldr	r0, [pc, #60]	; (800356c <low_level_init+0x144>)
 8003530:	f7fe fb1c 	bl	8001b6c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003534:	f107 0310 	add.w	r3, r7, #16
 8003538:	461a      	mov	r2, r3
 800353a:	211d      	movs	r1, #29
 800353c:	480b      	ldr	r0, [pc, #44]	; (800356c <low_level_init+0x144>)
 800353e:	f7fe fa47 	bl	80019d0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f043 030b 	orr.w	r3, r3, #11
 8003548:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	461a      	mov	r2, r3
 800354e:	211d      	movs	r1, #29
 8003550:	4806      	ldr	r0, [pc, #24]	; (800356c <low_level_init+0x144>)
 8003552:	f7fe faa5 	bl	8001aa0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003556:	f107 0310 	add.w	r3, r7, #16
 800355a:	461a      	mov	r2, r3
 800355c:	211d      	movs	r1, #29
 800355e:	4803      	ldr	r0, [pc, #12]	; (800356c <low_level_init+0x144>)
 8003560:	f7fe fa36 	bl	80019d0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003564:	bf00      	nop
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20001fac 	.word	0x20001fac
 8003570:	40028000 	.word	0x40028000
 8003574:	20001ff4 	.word	0x20001ff4
 8003578:	200006dc 	.word	0x200006dc
 800357c:	2000075c 	.word	0x2000075c
 8003580:	20001f2c 	.word	0x20001f2c

08003584 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800358e:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <low_level_output+0x138>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80035a6:	4b45      	ldr	r3, [pc, #276]	; (80036bc <low_level_output+0x138>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	623b      	str	r3, [r7, #32]
 80035b4:	e05a      	b.n	800366c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da03      	bge.n	80035c6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80035be:	23f8      	movs	r3, #248	; 0xf8
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80035c4:	e05c      	b.n	8003680 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	895b      	ldrh	r3, [r3, #10]
 80035ca:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80035d0:	e02f      	b.n	8003632 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	18d0      	adds	r0, r2, r3
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	18d1      	adds	r1, r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80035e6:	3304      	adds	r3, #4
 80035e8:	461a      	mov	r2, r3
 80035ea:	f00c f981 	bl	800f8f0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	da03      	bge.n	8003604 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80035fc:	23f8      	movs	r3, #248	; 0xf8
 80035fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003602:	e03d      	b.n	8003680 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003614:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003620:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800362c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800363c:	4293      	cmp	r3, r2
 800363e:	d8c8      	bhi.n	80035d2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	18d0      	adds	r0, r2, r3
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4413      	add	r3, r2
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4619      	mov	r1, r3
 8003652:	f00c f94d 	bl	800f8f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1a1      	bne.n	80035b6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003672:	6979      	ldr	r1, [r7, #20]
 8003674:	4811      	ldr	r0, [pc, #68]	; (80036bc <low_level_output+0x138>)
 8003676:	f7fe f83d 	bl	80016f4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <low_level_output+0x138>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003688:	3314      	adds	r3, #20
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <low_level_output+0x138>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369c:	3314      	adds	r3, #20
 800369e:	2220      	movs	r2, #32
 80036a0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <low_level_output+0x138>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036aa:	3304      	adds	r3, #4
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80036b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20001fac 	.word	0x20001fac

080036c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80036e4:	484f      	ldr	r0, [pc, #316]	; (8003824 <low_level_input+0x164>)
 80036e6:	f7fe f8ef 	bl	80018c8 <HAL_ETH_GetReceivedFrame>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <low_level_input+0x34>

    return NULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e092      	b.n	800381a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <low_level_input+0x164>)
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <low_level_input+0x164>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003706:	89fb      	ldrh	r3, [r7, #14]
 8003708:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800370c:	4619      	mov	r1, r3
 800370e:	2000      	movs	r0, #0
 8003710:	f002 fd30 	bl	8006174 <pbuf_alloc>
 8003714:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d04b      	beq.n	80037b4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800371c:	4b41      	ldr	r3, [pc, #260]	; (8003824 <low_level_input+0x164>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
 800372a:	e040      	b.n	80037ae <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	895b      	ldrh	r3, [r3, #10]
 8003730:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003736:	e021      	b.n	800377c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	18d0      	adds	r0, r2, r3
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	18d1      	adds	r1, r2, r3
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800374c:	3304      	adds	r3, #4
 800374e:	461a      	mov	r2, r3
 8003750:	f00c f8ce 	bl	800f8f0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	4413      	add	r3, r2
 8003766:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800376a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003776:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003786:	4293      	cmp	r3, r2
 8003788:	d8d6      	bhi.n	8003738 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	18d0      	adds	r0, r2, r3
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4619      	mov	r1, r3
 800379c:	f00c f8a8 	bl	800f8f0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4413      	add	r3, r2
 80037a6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1bb      	bne.n	800372c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <low_level_input+0x164>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e00b      	b.n	80037d8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3301      	adds	r3, #1
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <low_level_input+0x164>)
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3ee      	bcc.n	80037c0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <low_level_input+0x164>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <low_level_input+0x164>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	3314      	adds	r3, #20
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <low_level_input+0x164>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003804:	3314      	adds	r3, #20
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <low_level_input+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003812:	3308      	adds	r3, #8
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800381a:	4618      	mov	r0, r3
 800381c:	3730      	adds	r7, #48	; 0x30
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20001fac 	.word	0x20001fac

08003828 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff45 	bl	80036c0 <low_level_input>
 8003836:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	4798      	blx	r3
 8003848:	4603      	mov	r3, r0
 800384a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800384c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f002 ff71 	bl	800673c <pbuf_free>
    p = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e000      	b.n	8003862 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003860:	bf00      	nop
  }
}
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <ethernetif_init+0x1c>
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <ethernetif_init+0x48>)
 8003878:	f240 2207 	movw	r2, #519	; 0x207
 800387c:	490d      	ldr	r1, [pc, #52]	; (80038b4 <ethernetif_init+0x4c>)
 800387e:	480e      	ldr	r0, [pc, #56]	; (80038b8 <ethernetif_init+0x50>)
 8003880:	f00c f84c 	bl	800f91c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2273      	movs	r2, #115	; 0x73
 8003888:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2274      	movs	r2, #116	; 0x74
 8003890:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <ethernetif_init+0x54>)
 8003898:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <ethernetif_init+0x58>)
 800389e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fdc1 	bl	8003428 <low_level_init>

  return ERR_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	08010c1c 	.word	0x08010c1c
 80038b4:	08010c38 	.word	0x08010c38
 80038b8:	08010c48 	.word	0x08010c48
 80038bc:	0800dba5 	.word	0x0800dba5
 80038c0:	08003585 	.word	0x08003585

080038c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038c8:	f7fd fb8c 	bl	8000fe4 <HAL_GetTick>
 80038cc:	4603      	mov	r3, r0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d05d      	beq.n	80039b2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <ethernetif_update_config+0xf4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d03f      	beq.n	800397e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80038fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003902:	2100      	movs	r1, #0
 8003904:	4830      	ldr	r0, [pc, #192]	; (80039c8 <ethernetif_update_config+0xf4>)
 8003906:	f7fe f8cb 	bl	8001aa0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800390a:	f7fd fb6b 	bl	8000fe4 <HAL_GetTick>
 800390e:	4603      	mov	r3, r0
 8003910:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	461a      	mov	r2, r3
 8003918:	2101      	movs	r1, #1
 800391a:	482b      	ldr	r0, [pc, #172]	; (80039c8 <ethernetif_update_config+0xf4>)
 800391c:	f7fe f858 	bl	80019d0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003920:	f7fd fb60 	bl	8000fe4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800392e:	d828      	bhi.n	8003982 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0eb      	beq.n	8003912 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	461a      	mov	r2, r3
 8003940:	2110      	movs	r1, #16
 8003942:	4821      	ldr	r0, [pc, #132]	; (80039c8 <ethernetif_update_config+0xf4>)
 8003944:	f7fe f844 	bl	80019d0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <ethernetif_update_config+0xf4>)
 8003954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e002      	b.n	8003962 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <ethernetif_update_config+0xf4>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800396c:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <ethernetif_update_config+0xf4>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	e016      	b.n	80039a2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <ethernetif_update_config+0xf4>)
 8003976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e011      	b.n	80039a2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <ethernetif_update_config+0xb0>
          goto error;
 8003982:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <ethernetif_update_config+0xf4>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	08db      	lsrs	r3, r3, #3
 800398a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <ethernetif_update_config+0xf4>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003994:	4313      	orrs	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	2100      	movs	r1, #0
 800399c:	480a      	ldr	r0, [pc, #40]	; (80039c8 <ethernetif_update_config+0xf4>)
 800399e:	f7fe f87f 	bl	8001aa0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80039a2:	2100      	movs	r1, #0
 80039a4:	4808      	ldr	r0, [pc, #32]	; (80039c8 <ethernetif_update_config+0xf4>)
 80039a6:	f7fe f93f 	bl	8001c28 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80039aa:	4807      	ldr	r0, [pc, #28]	; (80039c8 <ethernetif_update_config+0xf4>)
 80039ac:	f7fe f8de 	bl	8001b6c <HAL_ETH_Start>
 80039b0:	e002      	b.n	80039b8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80039b2:	4805      	ldr	r0, [pc, #20]	; (80039c8 <ethernetif_update_config+0xf4>)
 80039b4:	f7fe f909 	bl	8001bca <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f807 	bl	80039cc <ethernetif_notify_conn_changed>
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20001fac 	.word	0x20001fac

080039cc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <fs_open+0x16>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <fs_open+0x1c>
    return ERR_ARG;
 80039f6:	f06f 030f 	mvn.w	r3, #15
 80039fa:	e028      	b.n	8003a4e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <fs_open+0x78>)
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e020      	b.n	8003a44 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4619      	mov	r1, r3
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7fc fbe1 	bl	80001d0 <strcmp>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	7c1a      	ldrb	r2, [r3, #16]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e007      	b.n	8003a4e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1db      	bne.n	8003a02 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003a4a:	f06f 0305 	mvn.w	r3, #5
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08013c98 	.word	0x08013c98

08003a5c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8003a94:	20e8      	movs	r0, #232	; 0xe8
 8003a96:	f001 fe85 	bl	80057a4 <mem_malloc>
 8003a9a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8003aa2:	22e8      	movs	r2, #232	; 0xe8
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f00b ff30 	bl	800f90c <memset>
  }
  return ret;
 8003aac:	687b      	ldr	r3, [r7, #4]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f001 fd07 	bl	80054d8 <mem_free>
  }
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003ada:	22b0      	movs	r2, #176	; 0xb0
 8003adc:	2100      	movs	r1, #0
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f00b ff14 	bl	800f90c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003af2:	20b0      	movs	r0, #176	; 0xb0
 8003af4:	f001 fe56 	bl	80057a4 <mem_malloc>
 8003af8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ffe6 	bl	8003ad2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003b06:	687b      	ldr	r3, [r7, #4]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff99 	bl	8003a5c <fs_close>
    hs->handle = NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ffba 	bl	8003ab6 <http_ssi_state_free>
    hs->ssi = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f002 fdf1 	bl	800673c <pbuf_free>
    hs->req = NULL;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <http_state_free+0x1a>
    http_state_eof(hs);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffca 	bl	8003b10 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f001 fcab 	bl	80054d8 <mem_free>
  }
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <http_write+0x22>
 8003ba0:	4b2c      	ldr	r3, [pc, #176]	; (8003c54 <http_write+0xc8>)
 8003ba2:	f240 2219 	movw	r2, #537	; 0x219
 8003ba6:	492c      	ldr	r1, [pc, #176]	; (8003c58 <http_write+0xcc>)
 8003ba8:	482c      	ldr	r0, [pc, #176]	; (8003c5c <http_write+0xd0>)
 8003baa:	f00b feb7 	bl	800f91c <iprintf>
  len = *length;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <http_write+0x32>
    return ERR_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e045      	b.n	8003c4a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003bc4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003bc6:	8aba      	ldrh	r2, [r7, #20]
 8003bc8:	8afb      	ldrh	r3, [r7, #22]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d201      	bcs.n	8003bd2 <http_write+0x46>
    len = max_len;
 8003bce:	8abb      	ldrh	r3, [r7, #20]
 8003bd0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003bda:	8afa      	ldrh	r2, [r7, #22]
 8003bdc:	8abb      	ldrh	r3, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <http_write+0x5a>
    len = max_len;
 8003be2:	8abb      	ldrh	r3, [r7, #20]
 8003be4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	8afa      	ldrh	r2, [r7, #22]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f007 fb29 	bl	800b244 <tcp_write>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003bf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfe:	d10f      	bne.n	8003c20 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d902      	bls.n	8003c1a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003c14:	2301      	movs	r3, #1
 8003c16:	82fb      	strh	r3, [r7, #22]
 8003c18:	e002      	b.n	8003c20 <http_write+0x94>
      } else {
        len /= 2;
 8003c1a:	8afb      	ldrh	r3, [r7, #22]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c28:	d102      	bne.n	8003c30 <http_write+0xa4>
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d8da      	bhi.n	8003be6 <http_write+0x5a>

  if (err == ERR_OK) {
 8003c30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8afa      	ldrh	r2, [r7, #22]
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e002      	b.n	8003c46 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003c46:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08010cec 	.word	0x08010cec
 8003c58:	08010d24 	.word	0x08010d24
 8003c5c:	08010d34 	.word	0x08010d34

08003c60 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f004 fba9 	bl	80083c8 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003c76:	2100      	movs	r1, #0
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f004 fbb7 	bl	80083ec <tcp_recv>
  altcp_err(pcb, NULL);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f004 fbf7 	bl	8008474 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f004 fc2c 	bl	80084e8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003c90:	2100      	movs	r1, #0
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f004 fbcc 	bl	8008430 <tcp_sent>
  if (hs != NULL) {
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003c9e:	68b8      	ldr	r0, [r7, #8]
 8003ca0:	f7ff ff62 	bl	8003b68 <http_state_free>
  }

  if (abort_conn) {
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f003 face 	bl	800724c <tcp_abort>
    return ERR_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e00f      	b.n	8003cd4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f003 f9df 	bl	8007078 <tcp_close>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	4904      	ldr	r1, [pc, #16]	; (8003cdc <http_close_or_abort_conn+0x7c>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f004 fc0c 	bl	80084e8 <tcp_poll>
  }
  return err;
 8003cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	08004d4f 	.word	0x08004d4f

08003ce0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ffb6 	bl	8003c60 <http_close_or_abort_conn>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffe8 	bl	8003ce0 <http_close_conn>
  }
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <extract_uri_parameters+0x18>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <extract_uri_parameters+0x1c>
    return (0);
 8003d30:	2300      	movs	r3, #0
 8003d32:	e04b      	b.n	8003dcc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e03f      	b.n	8003dbe <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	320c      	adds	r2, #12
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003d4e:	2126      	movs	r1, #38	; 0x26
 8003d50:	6978      	ldr	r0, [r7, #20]
 8003d52:	f00b fe3b 	bl	800f9cc <strchr>
 8003d56:	6178      	str	r0, [r7, #20]
    if (pair) {
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <extract_uri_parameters+0x54>
      *pair = '\0';
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
      pair++;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3301      	adds	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e00c      	b.n	8003d86 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f00b fe2c 	bl	800f9cc <strchr>
 8003d74:	6178      	str	r0, [r7, #20]
      if (pair) {
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003d86:	213d      	movs	r1, #61	; 0x3d
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f00b fe1f 	bl	800f9cc <strchr>
 8003d8e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <extract_uri_parameters+0x94>
      *equals = '\0';
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	321c      	adds	r2, #28
 8003da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003daa:	e005      	b.n	8003db8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	321c      	adds	r2, #28
 8003db2:	2100      	movs	r1, #0
 8003db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	dc02      	bgt.n	8003dca <extract_uri_parameters+0xb2>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1b9      	bne.n	8003d3e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003dca:	693b      	ldr	r3, [r7, #16]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <get_tag_insert+0x1c>
 8003de2:	4b52      	ldr	r3, [pc, #328]	; (8003f2c <get_tag_insert+0x158>)
 8003de4:	f44f 7241 	mov.w	r2, #772	; 0x304
 8003de8:	4951      	ldr	r1, [pc, #324]	; (8003f30 <get_tag_insert+0x15c>)
 8003dea:	4852      	ldr	r0, [pc, #328]	; (8003f34 <get_tag_insert+0x160>)
 8003dec:	f00b fd96 	bl	800f91c <iprintf>
  ssi = hs->ssi;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <get_tag_insert+0x36>
 8003dfc:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <get_tag_insert+0x158>)
 8003dfe:	f240 3206 	movw	r2, #774	; 0x306
 8003e02:	494d      	ldr	r1, [pc, #308]	; (8003f38 <get_tag_insert+0x164>)
 8003e04:	484b      	ldr	r0, [pc, #300]	; (8003f34 <get_tag_insert+0x160>)
 8003e06:	f00b fd89 	bl	800f91c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8003e0a:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <get_tag_insert+0x168>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02e      	beq.n	8003e70 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <get_tag_insert+0x16c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02a      	beq.n	8003e70 <get_tag_insert+0x9c>
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <get_tag_insert+0x170>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d026      	beq.n	8003e70 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e01e      	b.n	8003e66 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f103 0012 	add.w	r0, r3, #18
 8003e2e:	4b44      	ldr	r3, [pc, #272]	; (8003f40 <get_tag_insert+0x16c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f7fc f9c8 	bl	80001d0 <strcmp>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10c      	bne.n	8003e60 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <get_tag_insert+0x168>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8003e50:	22c0      	movs	r2, #192	; 0xc0
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	4798      	blx	r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8003e5e:	e061      	b.n	8003f24 <get_tag_insert+0x150>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	4b37      	ldr	r3, [pc, #220]	; (8003f44 <get_tag_insert+0x170>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	dbdb      	blt.n	8003e28 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	3312      	adds	r3, #18
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc f9b5 	bl	80001e4 <strlen>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2ba6      	cmp	r3, #166	; 0xa6
 8003e7e:	d818      	bhi.n	8003eb2 <get_tag_insert+0xde>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	3312      	adds	r3, #18
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc f9ad 	bl	80001e4 <strlen>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b11      	cmp	r3, #17
 8003e8e:	d810      	bhi.n	8003eb2 <get_tag_insert+0xde>
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	3312      	adds	r3, #18
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc f9a5 	bl	80001e4 <strlen>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2ba6      	cmp	r3, #166	; 0xa6
 8003e9e:	d806      	bhi.n	8003eae <get_tag_insert+0xda>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	3312      	adds	r3, #18
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fc f99d 	bl	80001e4 <strlen>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	e002      	b.n	8003eb4 <get_tag_insert+0xe0>
 8003eae:	23a7      	movs	r3, #167	; 0xa7
 8003eb0:	e000      	b.n	8003eb4 <get_tag_insert+0xe0>
 8003eb2:	2311      	movs	r3, #17
 8003eb4:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3323      	adds	r3, #35	; 0x23
 8003eba:	2212      	movs	r2, #18
 8003ebc:	4922      	ldr	r1, [pc, #136]	; (8003f48 <get_tag_insert+0x174>)
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f00b fd16 	bl	800f8f0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f103 0035 	add.w	r0, r3, #53	; 0x35
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3312      	adds	r3, #18
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f00b fd0d 	bl	800f8f0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3312      	adds	r3, #18
 8003eda:	3320      	adds	r3, #32
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3303      	adds	r3, #3
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	4919      	ldr	r1, [pc, #100]	; (8003f4c <get_tag_insert+0x178>)
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f00b fd02 	bl	800f8f0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3319      	adds	r3, #25
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  len = strlen(ssi->tag_insert);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	3323      	adds	r3, #35	; 0x23
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc f970 	bl	80001e4 <strlen>
 8003f04:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0c:	d306      	bcc.n	8003f1c <get_tag_insert+0x148>
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <get_tag_insert+0x158>)
 8003f10:	f240 323f 	movw	r2, #831	; 0x33f
 8003f14:	490e      	ldr	r1, [pc, #56]	; (8003f50 <get_tag_insert+0x17c>)
 8003f16:	4807      	ldr	r0, [pc, #28]	; (8003f34 <get_tag_insert+0x160>)
 8003f18:	f00b fd00 	bl	800f91c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	81da      	strh	r2, [r3, #14]
}
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	08010cec 	.word	0x08010cec
 8003f30:	08010d5c 	.word	0x08010d5c
 8003f34:	08010d34 	.word	0x08010d34
 8003f38:	08010d68 	.word	0x08010d68
 8003f3c:	200004f4 	.word	0x200004f4
 8003f40:	200004fc 	.word	0x200004fc
 8003f44:	200004f8 	.word	0x200004f8
 8003f48:	08010d74 	.word	0x08010d74
 8003f4c:	08010d88 	.word	0x08010d88
 8003f50:	08010d90 	.word	0x08010d90

08003f54 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fec8 	bl	8003cfe <http_eof>
    return 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e016      	b.n	8003fa0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd7a 	bl	8003a70 <fs_bytes_left>
 8003f7c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	dc05      	bgt.n	8003f90 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff feb9 	bl	8003cfe <http_eof>
    return 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e007      	b.n	8003fa0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <http_check_eof+0x54>)
 8003f92:	f240 429d 	movw	r2, #1181	; 0x49d
 8003f96:	4905      	ldr	r1, [pc, #20]	; (8003fac <http_check_eof+0x58>)
 8003f98:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <http_check_eof+0x5c>)
 8003f9a:	f00b fcbf 	bl	800f91c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003f9e:	2301      	movs	r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	08010cec 	.word	0x08010cec
 8003fac:	08010da0 	.word	0x08010da0
 8003fb0:	08010d34 	.word	0x08010d34

08003fb4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d803      	bhi.n	8003fd6 <http_send_data_nonssi+0x22>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	e001      	b.n	8003fda <http_send_data_nonssi+0x26>
 8003fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fda:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6999      	ldr	r1, [r3, #24]
 8003fe0:	f107 020c 	add.w	r2, r7, #12
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fdd0 	bl	8003b8c <http_write>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	89ba      	ldrh	r2, [r7, #12]
 8004002:	441a      	add	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	89ba      	ldrh	r2, [r7, #12]
 800400e:	1a9a      	subs	r2, r3, r2
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <http_send_data_ssi+0x2c>
 800403e:	4b9d      	ldr	r3, [pc, #628]	; (80042b4 <http_send_data_ssi+0x294>)
 8004040:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004044:	499c      	ldr	r1, [pc, #624]	; (80042b8 <http_send_data_ssi+0x298>)
 8004046:	489d      	ldr	r0, [pc, #628]	; (80042bc <http_send_data_ssi+0x29c>)
 8004048:	f00b fc68 	bl	800f91c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004052:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	f240 826a 	bls.w	8004536 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004070:	4293      	cmp	r3, r2
 8004072:	dc06      	bgt.n	8004082 <http_send_data_ssi+0x62>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	e001      	b.n	8004086 <http_send_data_ssi+0x66>
 8004082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004086:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	f107 020e 	add.w	r2, r7, #14
 8004090:	2300      	movs	r3, #0
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fd7a 	bl	8003b8c <http_write>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800409c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	89fa      	ldrh	r2, [r7, #14]
 80040ae:	441a      	add	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	89fa      	ldrh	r2, [r7, #14]
 80040ba:	1a9a      	subs	r2, r3, r2
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 8235 	bne.w	8004536 <http_send_data_ssi+0x516>
      return data_to_send;
 80040cc:	7dbb      	ldrb	r3, [r7, #22]
 80040ce:	e27b      	b.n	80045c8 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80040d0:	89fb      	ldrh	r3, [r7, #14]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <http_send_data_ssi+0xba>
      return data_to_send;
 80040d6:	7dbb      	ldrb	r3, [r7, #22]
 80040d8:	e276      	b.n	80045c8 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	f200 8227 	bhi.w	8004534 <http_send_data_ssi+0x514>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <http_send_data_ssi+0xcc>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004153 	.word	0x08004153
 80040f4:	080041c5 	.word	0x080041c5
 80040f8:	08004313 	.word	0x08004313
 80040fc:	0800445b 	.word	0x0800445b
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004100:	2300      	movs	r3, #0
 8004102:	757b      	strb	r3, [r7, #21]
 8004104:	e017      	b.n	8004136 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	7d7b      	ldrb	r3, [r7, #21]
 800410e:	496c      	ldr	r1, [pc, #432]	; (80042c0 <http_send_data_ssi+0x2a0>)
 8004110:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d10a      	bne.n	8004130 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	7d7a      	ldrb	r2, [r7, #21]
 800411e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_index = 1;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2201      	movs	r2, #1
 800412c:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800412e:	e005      	b.n	800413c <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004130:	7d7b      	ldrb	r3, [r7, #21]
 8004132:	3301      	adds	r3, #1
 8004134:	757b      	strb	r3, [r7, #21]
 8004136:	7d7b      	ldrb	r3, [r7, #21]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d9e4      	bls.n	8004106 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	601a      	str	r2, [r3, #0]
        break;
 8004150:	e1f1      	b.n	8004536 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	7c1b      	ldrb	r3, [r3, #16]
 8004156:	461a      	mov	r2, r3
 8004158:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <http_send_data_ssi+0x2a0>)
 800415a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	8992      	ldrh	r2, [r2, #12]
 8004162:	4413      	add	r3, r2
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2200      	movs	r2, #0
 800416e:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8004178:	e1dd      	b.n	8004536 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	781a      	ldrb	r2, [r3, #0]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	7c1b      	ldrb	r3, [r3, #16]
 8004184:	4619      	mov	r1, r3
 8004186:	4b4e      	ldr	r3, [pc, #312]	; (80042c0 <http_send_data_ssi+0x2a0>)
 8004188:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800418c:	6939      	ldr	r1, [r7, #16]
 800418e:	8989      	ldrh	r1, [r1, #12]
 8004190:	440b      	add	r3, r1
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d106      	bne.n	80041a6 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	899b      	ldrh	r3, [r3, #12]
 800419c:	3301      	adds	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	819a      	strh	r2, [r3, #12]
 80041a4:	e003      	b.n	80041ae <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	1e5a      	subs	r2, r3, #1
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	601a      	str	r2, [r3, #0]
        }
        break;
 80041c2:	e1b8      	b.n	8004536 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	899b      	ldrh	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11e      	bne.n	800420a <http_send_data_ssi+0x1ea>
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d00e      	beq.n	80041f4 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80041dc:	2b09      	cmp	r3, #9
 80041de:	d009      	beq.n	80041f4 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b0a      	cmp	r3, #10
 80041e8:	d004      	beq.n	80041f4 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80041f0:	2b0d      	cmp	r3, #13
 80041f2:	d10a      	bne.n	800420a <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	601a      	str	r2, [r3, #0]
          break;
 8004208:	e195      	b.n	8004536 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	7c1b      	ldrb	r3, [r3, #16]
 8004214:	492a      	ldr	r1, [pc, #168]	; (80042c0 <http_send_data_ssi+0x2a0>)
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d013      	beq.n	800424a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8004228:	2b20      	cmp	r3, #32
 800422a:	d00e      	beq.n	800424a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b09      	cmp	r3, #9
 8004234:	d009      	beq.n	800424a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800423c:	2b0a      	cmp	r3, #10
 800423e:	d004      	beq.n	800424a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b0d      	cmp	r3, #13
 8004248:	d142      	bne.n	80042d0 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	899b      	ldrh	r3, [r3, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          if (ssi->tag_index == 0) {
 800425a:	e04f      	b.n	80042fc <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2203      	movs	r2, #3
 8004260:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	899b      	ldrh	r3, [r3, #12]
 8004268:	2bff      	cmp	r3, #255	; 0xff
 800426a:	d906      	bls.n	800427a <http_send_data_ssi+0x25a>
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <http_send_data_ssi+0x294>)
 800426e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004272:	4914      	ldr	r1, [pc, #80]	; (80042c4 <http_send_data_ssi+0x2a4>)
 8004274:	4811      	ldr	r0, [pc, #68]	; (80042bc <http_send_data_ssi+0x29c>)
 8004276:	f00b fb51 	bl	800f91c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	899b      	ldrh	r3, [r3, #12]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	899b      	ldrh	r3, [r3, #12]
 8004288:	461a      	mov	r2, r3
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4413      	add	r3, r2
 800428e:	2200      	movs	r2, #0
 8004290:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	7c1b      	ldrb	r3, [r3, #16]
 800429c:	4908      	ldr	r1, [pc, #32]	; (80042c0 <http_send_data_ssi+0x2a0>)
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	440b      	add	r3, r1
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d10e      	bne.n	80042c8 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2201      	movs	r2, #1
 80042ae:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80042b0:	e024      	b.n	80042fc <http_send_data_ssi+0x2dc>
 80042b2:	bf00      	nop
 80042b4:	08010cec 	.word	0x08010cec
 80042b8:	08010d68 	.word	0x08010d68
 80042bc:	08010d34 	.word	0x08010d34
 80042c0:	08013ce8 	.word	0x08013ce8
 80042c4:	08010dd8 	.word	0x08010dd8
            } else {
              ssi->tag_index = 0;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2200      	movs	r2, #0
 80042cc:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80042ce:	e015      	b.n	80042fc <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	899b      	ldrh	r3, [r3, #12]
 80042d4:	2b0f      	cmp	r3, #15
 80042d6:	d80d      	bhi.n	80042f4 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	899b      	ldrh	r3, [r3, #12]
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	b288      	uxth	r0, r1
 80042e4:	6939      	ldr	r1, [r7, #16]
 80042e6:	8188      	strh	r0, [r1, #12]
 80042e8:	4619      	mov	r1, r3
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	440b      	add	r3, r1
 80042f0:	749a      	strb	r2, [r3, #18]
 80042f2:	e003      	b.n	80042fc <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	1e5a      	subs	r2, r3, #1
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	601a      	str	r2, [r3, #0]

        break;
 8004310:	e111      	b.n	8004536 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	899b      	ldrh	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11e      	bne.n	8004358 <http_send_data_ssi+0x338>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b20      	cmp	r3, #32
 8004322:	d00e      	beq.n	8004342 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800432a:	2b09      	cmp	r3, #9
 800432c:	d009      	beq.n	8004342 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b0a      	cmp	r3, #10
 8004336:	d004      	beq.n	8004342 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800433e:	2b0d      	cmp	r3, #13
 8004340:	d10a      	bne.n	8004358 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	1e5a      	subs	r2, r3, #1
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	601a      	str	r2, [r3, #0]
          break;
 8004356:	e0ee      	b.n	8004536 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	7c1b      	ldrb	r3, [r3, #16]
 8004362:	499b      	ldr	r1, [pc, #620]	; (80045d0 <http_send_data_ssi+0x5b0>)
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	440b      	add	r3, r1
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	6939      	ldr	r1, [r7, #16]
 800436c:	8989      	ldrh	r1, [r1, #12]
 800436e:	440b      	add	r3, r1
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d162      	bne.n	800443c <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	899b      	ldrh	r3, [r3, #12]
 800438e:	3301      	adds	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	7c1b      	ldrb	r3, [r3, #16]
 800439a:	4a8d      	ldr	r2, [pc, #564]	; (80045d0 <http_send_data_ssi+0x5b0>)
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	8992      	ldrh	r2, [r2, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 80c3 	bne.w	8004536 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80043b0:	6838      	ldr	r0, [r7, #0]
 80043b2:	f7ff fd0f 	bl	8003dd4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2200      	movs	r2, #0
 80043ba:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2204      	movs	r2, #4
 80043c0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	f240 80ae 	bls.w	8004536 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043e8:	4293      	cmp	r3, r2
 80043ea:	dc06      	bgt.n	80043fa <http_send_data_ssi+0x3da>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	e001      	b.n	80043fe <http_send_data_ssi+0x3de>
 80043fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043fe:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	6999      	ldr	r1, [r3, #24]
 8004404:	f107 020e 	add.w	r2, r7, #14
 8004408:	2300      	movs	r3, #0
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fbbe 	bl	8003b8c <http_write>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8004414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f040 808c 	bne.w	8004536 <http_send_data_ssi+0x516>
                data_to_send = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	89fa      	ldrh	r2, [r7, #14]
 8004428:	441a      	add	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	89fa      	ldrh	r2, [r7, #14]
 8004434:	1a9a      	subs	r2, r3, r2
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24
 800443a:	e07c      	b.n	8004536 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        }
        break;
 8004458:	e06d      	b.n	8004536 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	429a      	cmp	r2, r3
 8004464:	d935      	bls.n	80044d2 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004474:	4293      	cmp	r3, r2
 8004476:	dc06      	bgt.n	8004486 <http_send_data_ssi+0x466>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	b29b      	uxth	r3, r3
 8004484:	e001      	b.n	800448a <http_send_data_ssi+0x46a>
 8004486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800448c:	89fb      	ldrh	r3, [r7, #14]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	f107 020e 	add.w	r2, r7, #14
 800449a:	2300      	movs	r3, #0
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fb75 	bl	8003b8c <http_write>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]
 80044a6:	e001      	b.n	80044ac <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80044ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d140      	bne.n	8004536 <http_send_data_ssi+0x516>
            data_to_send = 1;
 80044b4:	2301      	movs	r3, #1
 80044b6:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	89fa      	ldrh	r2, [r7, #14]
 80044be:	441a      	add	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	89fa      	ldrh	r2, [r7, #14]
 80044ca:	1a9a      	subs	r2, r3, r2
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
 80044d0:	e031      	b.n	8004536 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	899a      	ldrh	r2, [r3, #12]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	89db      	ldrh	r3, [r3, #14]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d222      	bcs.n	8004524 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	89da      	ldrh	r2, [r3, #14]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	899b      	ldrh	r3, [r3, #12]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	899b      	ldrh	r3, [r3, #12]
 80044f0:	3320      	adds	r3, #32
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	1cd9      	adds	r1, r3, #3
 80044f8:	f107 020e 	add.w	r2, r7, #14
 80044fc:	2301      	movs	r3, #1
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fb44 	bl	8003b8c <http_write>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8004508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d112      	bne.n	8004536 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8004510:	2301      	movs	r3, #1
 8004512:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	899a      	ldrh	r2, [r3, #12]
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	4413      	add	r3, r2
 800451c:	b29a      	uxth	r2, r3
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	819a      	strh	r2, [r3, #12]
 8004522:	e008      	b.n	8004536 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2200      	movs	r2, #0
 8004528:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8004532:	e000      	b.n	8004536 <http_send_data_ssi+0x516>
        default:
          break;
 8004534:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <http_send_data_ssi+0x528>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <http_send_data_ssi+0x532>
 8004548:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f43f adbf 	beq.w	80040d0 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d034      	beq.n	80045c6 <http_send_data_ssi+0x5a6>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d92e      	bls.n	80045c6 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004576:	4293      	cmp	r3, r2
 8004578:	dc06      	bgt.n	8004588 <http_send_data_ssi+0x568>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	b29b      	uxth	r3, r3
 8004586:	e001      	b.n	800458c <http_send_data_ssi+0x56c>
 8004588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800458c:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6999      	ldr	r1, [r3, #24]
 8004592:	f107 020e 	add.w	r2, r7, #14
 8004596:	2300      	movs	r3, #0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff faf7 	bl	8003b8c <http_write>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80045a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10d      	bne.n	80045c6 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	89fa      	ldrh	r2, [r7, #14]
 80045b4:	441a      	add	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	89fa      	ldrh	r2, [r7, #14]
 80045c0:	1a9a      	subs	r2, r3, r2
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80045c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	08013ce8 	.word	0x08013ce8

080045d4 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80045de:	2300      	movs	r3, #0
 80045e0:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <http_send+0x18>
    return 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e030      	b.n	800464e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fcac 	bl	8003f54 <http_check_eof>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <http_send+0x32>
      return 0;
 8004602:	2300      	movs	r3, #0
 8004604:	e023      	b.n	800464e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff fd05 	bl	8004020 <http_send_data_ssi>
 8004616:	4603      	mov	r3, r0
 8004618:	73fb      	strb	r3, [r7, #15]
 800461a:	e005      	b.n	8004628 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fcc8 	bl	8003fb4 <http_send_data_nonssi>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <http_send+0x78>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fa1b 	bl	8003a70 <fs_bytes_left>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	dc05      	bgt.n	800464c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fb5b 	bl	8003cfe <http_eof>
    return 0;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <http_get_404_file+0x80>)
 8004666:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f7ff f9b5 	bl	80039e0 <fs_open>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800467a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d024      	beq.n	80046cc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <http_get_404_file+0x84>)
 8004686:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7ff f9a5 	bl	80039e0 <fs_open>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800469a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d014      	beq.n	80046cc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <http_get_404_file+0x88>)
 80046a6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7ff f995 	bl	80039e0 <fs_open>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80046ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
        return NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80046cc:	687b      	ldr	r3, [r7, #4]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	08010df0 	.word	0x08010df0
 80046dc:	08010dfc 	.word	0x08010dfc
 80046e0:	08010e08 	.word	0x08010e08

080046e4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	; 0x38
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <http_parse_request+0x24>
 80046fa:	4b65      	ldr	r3, [pc, #404]	; (8004890 <http_parse_request+0x1ac>)
 80046fc:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8004700:	4964      	ldr	r1, [pc, #400]	; (8004894 <http_parse_request+0x1b0>)
 8004702:	4865      	ldr	r0, [pc, #404]	; (8004898 <http_parse_request+0x1b4>)
 8004704:	f00b f90a 	bl	800f91c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <http_parse_request+0x38>
 800470e:	4b60      	ldr	r3, [pc, #384]	; (8004890 <http_parse_request+0x1ac>)
 8004710:	f240 72af 	movw	r2, #1967	; 0x7af
 8004714:	4961      	ldr	r1, [pc, #388]	; (800489c <http_parse_request+0x1b8>)
 8004716:	4860      	ldr	r0, [pc, #384]	; (8004898 <http_parse_request+0x1b4>)
 8004718:	f00b f900 	bl	800f91c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <http_parse_request+0x48>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800472c:	f06f 0307 	mvn.w	r3, #7
 8004730:	e0a9      	b.n	8004886 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473e:	621a      	str	r2, [r3, #32]
 8004740:	e005      	b.n	800474e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004748:	4618      	mov	r0, r3
 800474a:	f002 f8b9 	bl	80068c0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800474e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004750:	f002 f894 	bl	800687c <pbuf_ref>

  if (hs->req->next != NULL) {
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	891b      	ldrh	r3, [r3, #8]
 8004764:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004768:	4293      	cmp	r3, r2
 800476a:	bf28      	it	cs
 800476c:	4613      	movcs	r3, r2
 800476e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a18      	ldr	r0, [r3, #32]
 8004774:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004776:	2300      	movs	r3, #0
 8004778:	4949      	ldr	r1, [pc, #292]	; (80048a0 <http_parse_request+0x1bc>)
 800477a:	f002 f9c9 	bl	8006b10 <pbuf_copy_partial>
    data = httpd_req_buf;
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <http_parse_request+0x1bc>)
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
 8004782:	e005      	b.n	8004790 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	895b      	ldrh	r3, [r3, #10]
 800478e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8004790:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004792:	2b06      	cmp	r3, #6
 8004794:	d962      	bls.n	800485c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004796:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004798:	461a      	mov	r2, r3
 800479a:	4942      	ldr	r1, [pc, #264]	; (80048a4 <http_parse_request+0x1c0>)
 800479c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800479e:	f000 fcdd 	bl	800515c <lwip_strnstr>
 80047a2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d058      	beq.n	800485c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80047ae:	2204      	movs	r2, #4
 80047b0:	493d      	ldr	r1, [pc, #244]	; (80048a8 <http_parse_request+0x1c4>)
 80047b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047b4:	f00b f91f 	bl	800f9f6 <strncmp>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d116      	bne.n	80047ec <http_parse_request+0x108>
        sp1 = data + 3;
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	3303      	adds	r3, #3
 80047c2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	3301      	adds	r3, #1
 80047d8:	8b7a      	ldrh	r2, [r7, #26]
 80047da:	4934      	ldr	r1, [pc, #208]	; (80048ac <http_parse_request+0x1c8>)
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fcbd 	bl	800515c <lwip_strnstr>
 80047e2:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d111      	bne.n	800480e <http_parse_request+0x12a>
 80047ea:	e006      	b.n	80047fa <http_parse_request+0x116>
        data[4] = 0;
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	3304      	adds	r3, #4
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80047f4:	f06f 030f 	mvn.w	r3, #15
 80047f8:	e045      	b.n	8004886 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3301      	adds	r3, #1
 80047fe:	8b7a      	ldrh	r2, [r7, #26]
 8004800:	4928      	ldr	r1, [pc, #160]	; (80048a4 <http_parse_request+0x1c0>)
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fcaa 	bl	800515c <lwip_strnstr>
 8004808:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01e      	beq.n	800485c <http_parse_request+0x178>
 800481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	429a      	cmp	r2, r3
 8004824:	d91a      	bls.n	800485c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8004826:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004828:	461a      	mov	r2, r3
 800482a:	4921      	ldr	r1, [pc, #132]	; (80048b0 <http_parse_request+0x1cc>)
 800482c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800482e:	f000 fc95 	bl	800515c <lwip_strnstr>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d011      	beq.n	800485c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	3301      	adds	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8004844:	8b3b      	ldrh	r3, [r7, #24]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4413      	add	r3, r2
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800484e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004850:	6979      	ldr	r1, [r7, #20]
 8004852:	68b8      	ldr	r0, [r7, #8]
 8004854:	f000 f880 	bl	8004958 <http_find_file>
 8004858:	4603      	mov	r3, r0
 800485a:	e014      	b.n	8004886 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4618      	mov	r0, r3
 8004862:	f001 fff3 	bl	800684c <pbuf_clen>
 8004866:	4603      	mov	r3, r0
 8004868:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	891b      	ldrh	r3, [r3, #8]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d205      	bcs.n	8004882 <http_parse_request+0x19e>
 8004876:	8a7b      	ldrh	r3, [r7, #18]
 8004878:	2b05      	cmp	r3, #5
 800487a:	d802      	bhi.n	8004882 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800487c:	f06f 0304 	mvn.w	r3, #4
 8004880:	e001      	b.n	8004886 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8004882:	f06f 030f 	mvn.w	r3, #15
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	3738      	adds	r7, #56	; 0x38
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08010cec 	.word	0x08010cec
 8004894:	08010e14 	.word	0x08010e14
 8004898:	08010d34 	.word	0x08010d34
 800489c:	08010d5c 	.word	0x08010d5c
 80048a0:	200000b4 	.word	0x200000b4
 80048a4:	08010e20 	.word	0x08010e20
 80048a8:	08010e24 	.word	0x08010e24
 80048ac:	08010e2c 	.word	0x08010e2c
 80048b0:	08010e30 	.word	0x08010e30

080048b4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d040      	beq.n	800494a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80048cc:	213f      	movs	r1, #63	; 0x3f
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f00b f87c 	bl	800f9cc <strchr>
 80048d4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	613b      	str	r3, [r7, #16]
    ext = uri;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80048ea:	212e      	movs	r1, #46	; 0x2e
 80048ec:	6938      	ldr	r0, [r7, #16]
 80048ee:	f00b f86d 	bl	800f9cc <strchr>
 80048f2:	6138      	str	r0, [r7, #16]
 80048f4:	e009      	b.n	800490a <http_uri_is_ssi+0x56>
      ext = sub;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	617b      	str	r3, [r7, #20]
      sub++;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3301      	adds	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8004900:	212e      	movs	r1, #46	; 0x2e
 8004902:	6938      	ldr	r0, [r7, #16]
 8004904:	f00b f862 	bl	800f9cc <strchr>
 8004908:	6138      	str	r0, [r7, #16]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f2      	bne.n	80048f6 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e010      	b.n	8004938 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8004916:	4a0f      	ldr	r2, [pc, #60]	; (8004954 <http_uri_is_ssi+0xa0>)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491e:	4619      	mov	r1, r3
 8004920:	6978      	ldr	r0, [r7, #20]
 8004922:	f000 fc51 	bl	80051c8 <lwip_stricmp>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800492c:	2301      	movs	r3, #1
 800492e:	76fb      	strb	r3, [r7, #27]
        break;
 8004930:	e005      	b.n	800493e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b04      	cmp	r3, #4
 800493c:	d9eb      	bls.n	8004916 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <http_uri_is_ssi+0x96>
      *param = '?';
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	223f      	movs	r2, #63	; 0x3f
 8004948:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800494a:	7efb      	ldrb	r3, [r7, #27]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08013cac 	.word	0x08013cac

08004958 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b093      	sub	sp, #76	; 0x4c
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fb fc35 	bl	80001e4 <strlen>
 800497a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d072      	beq.n	8004a68 <http_find_file+0x110>
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3b01      	subs	r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b2f      	cmp	r3, #47	; 0x2f
 800498e:	d16b      	bne.n	8004a68 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004990:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004992:	4a80      	ldr	r2, [pc, #512]	; (8004b94 <http_find_file+0x23c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d102      	bne.n	800499e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d164      	bne.n	8004a68 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	3b01      	subs	r3, #1
 80049a2:	2b3f      	cmp	r3, #63	; 0x3f
 80049a4:	bf28      	it	cs
 80049a6:	233f      	movcs	r3, #63	; 0x3f
 80049a8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4877      	ldr	r0, [pc, #476]	; (8004b94 <http_find_file+0x23c>)
 80049b8:	f00a ff9a 	bl	800f8f0 <memcpy>
      http_uri_buf[copy_len] = 0;
 80049bc:	4a75      	ldr	r2, [pc, #468]	; (8004b94 <http_find_file+0x23c>)
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	4413      	add	r3, r2
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80049c6:	2300      	movs	r3, #0
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ca:	e04a      	b.n	8004a62 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80049d8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01e      	beq.n	8004a1e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80049e0:	4a6d      	ldr	r2, [pc, #436]	; (8004b98 <http_find_file+0x240>)
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fb fbfb 	bl	80001e4 <strlen>
 80049ee:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf28      	it	cs
 80049f8:	4613      	movcs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	4a65      	ldr	r2, [pc, #404]	; (8004b94 <http_find_file+0x23c>)
 8004a00:	1898      	adds	r0, r3, r2
 8004a02:	4a65      	ldr	r2, [pc, #404]	; (8004b98 <http_find_file+0x240>)
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f00a ff6f 	bl	800f8f0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4413      	add	r3, r2
 8004a18:	4a5e      	ldr	r2, [pc, #376]	; (8004b94 <http_find_file+0x23c>)
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <http_find_file+0x23c>)
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a22:	e004      	b.n	8004a2e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8004a24:	4a5c      	ldr	r2, [pc, #368]	; (8004b98 <http_find_file+0x240>)
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe ffd4 	bl	80039e0 <fs_open>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8004a3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <http_find_file+0x104>
        uri = file_name;
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8004a4c:	4a52      	ldr	r2, [pc, #328]	; (8004b98 <http_find_file+0x240>)
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4413      	add	r3, r2
 8004a54:	791b      	ldrb	r3, [r3, #4]
 8004a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8004a5a:	e005      	b.n	8004a68 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	3301      	adds	r3, #1
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d9b1      	bls.n	80049cc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d176      	bne.n	8004b5c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	213f      	movs	r1, #63	; 0x3f
 8004a72:	4618      	mov	r0, r3
 8004a74:	f00a ffaa 	bl	800f9cc <strchr>
 8004a78:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
      params++;
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	3301      	adds	r3, #1
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004a8c:	4b43      	ldr	r3, [pc, #268]	; (8004b9c <http_find_file+0x244>)
 8004a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a92:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8004a94:	4b42      	ldr	r3, [pc, #264]	; (8004ba0 <http_find_file+0x248>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d034      	beq.n	8004b06 <http_find_file+0x1ae>
 8004a9c:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <http_find_file+0x24c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d030      	beq.n	8004b06 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa8:	e028      	b.n	8004afc <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8004aaa:	68b8      	ldr	r0, [r7, #8]
 8004aac:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <http_find_file+0x24c>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f7fb fb89 	bl	80001d0 <strcmp>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d118      	bne.n	8004af6 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8004ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff f926 	bl	8003d18 <extract_uri_parameters>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <http_find_file+0x244>)
 8004ad0:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004ad2:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <http_find_file+0x24c>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	685c      	ldr	r4, [r3, #4]
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <http_find_file+0x244>)
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8004aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aee:	47a0      	blx	r4
 8004af0:	4603      	mov	r3, r0
 8004af2:	60bb      	str	r3, [r7, #8]
          break;
 8004af4:	e007      	b.n	8004b06 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	3301      	adds	r3, #1
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <http_find_file+0x248>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b02:	429a      	cmp	r2, r3
 8004b04:	dbd1      	blt.n	8004aaa <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe ff67 	bl	80039e0 <fs_open>
 8004b12:	4603      	mov	r3, r0
 8004b14:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8004b16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b22:	e006      	b.n	8004b32 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff fd94 	bl	8004658 <http_get_404_file>
 8004b30:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d011      	beq.n	8004b5c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	7c1b      	ldrb	r3, [r3, #16]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <http_find_file+0x1f4>
        tag_check = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b4a:	e007      	b.n	8004b5c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b52:	f7ff feaf 	bl	80048b4 <http_uri_is_ssi>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	4619      	mov	r1, r3
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fd75 	bl	8004658 <http_get_404_file>
 8004b6e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f810 	bl	8004ba8 <http_init_file>
 8004b88:	4603      	mov	r3, r0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3744      	adds	r7, #68	; 0x44
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200004b4 	.word	0x200004b4
 8004b98:	08013cc0 	.word	0x08013cc0
 8004b9c:	20000508 	.word	0x20000508
 8004ba0:	20000504 	.word	0x20000504
 8004ba4:	20000500 	.word	0x20000500

08004ba8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d07d      	beq.n	8004cb8 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <http_init_file+0x2a>
 8004bc4:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <http_init_file+0x134>)
 8004bc6:	f640 120b 	movw	r2, #2315	; 0x90b
 8004bca:	4945      	ldr	r1, [pc, #276]	; (8004ce0 <http_init_file+0x138>)
 8004bcc:	4845      	ldr	r0, [pc, #276]	; (8004ce4 <http_init_file+0x13c>)
 8004bce:	f00a fea5 	bl	800f91c <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8004bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01c      	beq.n	8004c14 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8004bda:	f7fe ff58 	bl	8003a8e <http_ssi_state_alloc>
 8004bde:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d016      	beq.n	8004c14 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2200      	movs	r2, #0
 8004bea:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        ssi->parsed = file->data;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	461a      	mov	r2, r3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da06      	bge.n	8004c38 <http_init_file+0x90>
 8004c2a:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <http_init_file+0x134>)
 8004c2c:	f640 1234 	movw	r2, #2356	; 0x934
 8004c30:	492d      	ldr	r1, [pc, #180]	; (8004ce8 <http_init_file+0x140>)
 8004c32:	482c      	ldr	r0, [pc, #176]	; (8004ce4 <http_init_file+0x13c>)
 8004c34:	f00a fe72 	bl	800f91c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	7c1b      	ldrb	r3, [r3, #16]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <http_init_file+0xbe>
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <http_init_file+0x134>)
 8004c5a:	f640 1243 	movw	r2, #2371	; 0x943
 8004c5e:	4923      	ldr	r1, [pc, #140]	; (8004cec <http_init_file+0x144>)
 8004c60:	4820      	ldr	r0, [pc, #128]	; (8004ce4 <http_init_file+0x13c>)
 8004c62:	f00a fe5b 	bl	800f91c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d032      	beq.n	8004cd2 <http_init_file+0x12a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	7c1b      	ldrb	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d02b      	beq.n	8004cd2 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6998      	ldr	r0, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	461a      	mov	r2, r3
 8004c84:	491a      	ldr	r1, [pc, #104]	; (8004cf0 <http_init_file+0x148>)
 8004c86:	f000 fa69 	bl	800515c <lwip_strnstr>
 8004c8a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01f      	beq.n	8004cd2 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8004cb6:	e00c      	b.n	8004cd2 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	08010cec 	.word	0x08010cec
 8004ce0:	08010e38 	.word	0x08010e38
 8004ce4:	08010d34 	.word	0x08010d34
 8004ce8:	08010e4c 	.word	0x08010e4c
 8004cec:	08010e6c 	.word	0x08010e6c
 8004cf0:	08010e30 	.word	0x08010e30

08004cf4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <http_err+0x1c>
    http_state_free(hs);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7fe ff2c 	bl	8003b68 <http_state_free>
  }
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <http_sent+0x1c>
    return ERR_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e008      	b.n	8004d46 <http_sent+0x2e>
  }

  hs->retries = 0;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004d3c:	6979      	ldr	r1, [r7, #20]
 8004d3e:	68b8      	ldr	r0, [r7, #8]
 8004d40:	f7ff fc48 	bl	80045d4 <http_send>

  return ERR_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8004d62:	2100      	movs	r1, #0
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f7fe ffbb 	bl	8003ce0 <http_close_conn>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e021      	b.n	8004db6 <http_poll+0x68>
  } else {
    hs->retries++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d78:	3301      	adds	r3, #1
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d105      	bne.n	8004d98 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	6838      	ldr	r0, [r7, #0]
 8004d90:	f7fe ffa6 	bl	8003ce0 <http_close_conn>
      return ERR_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e00e      	b.n	8004db6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	6838      	ldr	r0, [r7, #0]
 8004da4:	f7ff fc16 	bl	80045d4 <http_send>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8004dae:	6838      	ldr	r0, [r7, #0]
 8004db0:	f007 f832 	bl	800be18 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <http_recv+0x26>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <http_recv+0x26>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d111      	bne.n	8004e0a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	891b      	ldrh	r3, [r3, #8]
 8004df0:	4619      	mov	r1, r3
 8004df2:	68b8      	ldr	r0, [r7, #8]
 8004df4:	f002 fc04 	bl	8007600 <tcp_recved>
      pbuf_free(p);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f001 fc9f 	bl	800673c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	68b8      	ldr	r0, [r7, #8]
 8004e02:	f7fe ff6d 	bl	8003ce0 <http_close_conn>
    return ERR_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e055      	b.n	8004eb6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	891b      	ldrh	r3, [r3, #8]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	68b8      	ldr	r0, [r7, #8]
 8004e12:	f002 fbf5 	bl	8007600 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d147      	bne.n	8004eae <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fc5e 	bl	80046e4 <http_parse_request>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004e2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <http_recv+0xa0>
 8004e34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e38:	f113 0f05 	cmn.w	r3, #5
 8004e3c:	d010      	beq.n	8004e60 <http_recv+0xa0>
 8004e3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e42:	f113 0f10 	cmn.w	r3, #16
 8004e46:	d00b      	beq.n	8004e60 <http_recv+0xa0>
 8004e48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e4c:	f113 0f08 	cmn.w	r3, #8
 8004e50:	d006      	beq.n	8004e60 <http_recv+0xa0>
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <http_recv+0x100>)
 8004e54:	f640 2204 	movw	r2, #2564	; 0xa04
 8004e58:	491a      	ldr	r1, [pc, #104]	; (8004ec4 <http_recv+0x104>)
 8004e5a:	481b      	ldr	r0, [pc, #108]	; (8004ec8 <http_recv+0x108>)
 8004e5c:	f00a fd5e 	bl	800f91c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e64:	f113 0f05 	cmn.w	r3, #5
 8004e68:	d00b      	beq.n	8004e82 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <http_recv+0xc2>
          pbuf_free(hs->req);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fc60 	bl	800673c <pbuf_free>
          hs->req = NULL;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fc5a 	bl	800673c <pbuf_free>
      if (parsed == ERR_OK) {
 8004e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004e90:	6979      	ldr	r1, [r7, #20]
 8004e92:	68b8      	ldr	r0, [r7, #8]
 8004e94:	f7ff fb9e 	bl	80045d4 <http_send>
 8004e98:	e00c      	b.n	8004eb4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004e9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004e9e:	f113 0f10 	cmn.w	r3, #16
 8004ea2:	d107      	bne.n	8004eb4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	68b8      	ldr	r0, [r7, #8]
 8004ea8:	f7fe ff1a 	bl	8003ce0 <http_close_conn>
 8004eac:	e002      	b.n	8004eb4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 fc44 	bl	800673c <pbuf_free>
    }
  }
  return ERR_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08010cec 	.word	0x08010cec
 8004ec4:	08010e98 	.word	0x08010e98
 8004ec8:	08010d34 	.word	0x08010d34

08004ecc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <http_accept+0x1c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <http_accept+0x22>
    return ERR_VAL;
 8004ee8:	f06f 0305 	mvn.w	r3, #5
 8004eec:	e025      	b.n	8004f3a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004eee:	2101      	movs	r1, #1
 8004ef0:	68b8      	ldr	r0, [r7, #8]
 8004ef2:	f003 f869 	bl	8007fc8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8004ef6:	f7fe fdf9 	bl	8003aec <http_state_alloc>
 8004efa:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f06:	e018      	b.n	8004f3a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004f0e:	6979      	ldr	r1, [r7, #20]
 8004f10:	68b8      	ldr	r0, [r7, #8]
 8004f12:	f003 fa59 	bl	80083c8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004f16:	490b      	ldr	r1, [pc, #44]	; (8004f44 <http_accept+0x78>)
 8004f18:	68b8      	ldr	r0, [r7, #8]
 8004f1a:	f003 fa67 	bl	80083ec <tcp_recv>
  altcp_err(pcb, http_err);
 8004f1e:	490a      	ldr	r1, [pc, #40]	; (8004f48 <http_accept+0x7c>)
 8004f20:	68b8      	ldr	r0, [r7, #8]
 8004f22:	f003 faa7 	bl	8008474 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004f26:	2204      	movs	r2, #4
 8004f28:	4908      	ldr	r1, [pc, #32]	; (8004f4c <http_accept+0x80>)
 8004f2a:	68b8      	ldr	r0, [r7, #8]
 8004f2c:	f003 fadc 	bl	80084e8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8004f30:	4907      	ldr	r1, [pc, #28]	; (8004f50 <http_accept+0x84>)
 8004f32:	68b8      	ldr	r0, [r7, #8]
 8004f34:	f003 fa7c 	bl	8008430 <tcp_sent>

  return ERR_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	08004dc1 	.word	0x08004dc1
 8004f48:	08004cf5 	.word	0x08004cf5
 8004f4c:	08004d4f 	.word	0x08004d4f
 8004f50:	08004d19 	.word	0x08004d19

08004f54 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d029      	beq.n	8004fba <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004f66:	2101      	movs	r1, #1
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f003 f82d 	bl	8007fc8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4914      	ldr	r1, [pc, #80]	; (8004fc4 <httpd_init_pcb+0x70>)
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f002 f975 	bl	8007264 <tcp_bind>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <httpd_init_pcb+0x40>
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <httpd_init_pcb+0x74>)
 8004f88:	f640 2257 	movw	r2, #2647	; 0xa57
 8004f8c:	490f      	ldr	r1, [pc, #60]	; (8004fcc <httpd_init_pcb+0x78>)
 8004f8e:	4810      	ldr	r0, [pc, #64]	; (8004fd0 <httpd_init_pcb+0x7c>)
 8004f90:	f00a fcc4 	bl	800f91c <iprintf>
    pcb = altcp_listen(pcb);
 8004f94:	21ff      	movs	r1, #255	; 0xff
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f002 fa1c 	bl	80073d4 <tcp_listen_with_backlog>
 8004f9c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <httpd_init_pcb+0x5e>
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <httpd_init_pcb+0x74>)
 8004fa6:	f640 2259 	movw	r2, #2649	; 0xa59
 8004faa:	490a      	ldr	r1, [pc, #40]	; (8004fd4 <httpd_init_pcb+0x80>)
 8004fac:	4808      	ldr	r0, [pc, #32]	; (8004fd0 <httpd_init_pcb+0x7c>)
 8004fae:	f00a fcb5 	bl	800f91c <iprintf>
    altcp_accept(pcb, http_accept);
 8004fb2:	4909      	ldr	r1, [pc, #36]	; (8004fd8 <httpd_init_pcb+0x84>)
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f003 fa7f 	bl	80084b8 <tcp_accept>
  }
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	08013dc8 	.word	0x08013dc8
 8004fc8:	08010cec 	.word	0x08010cec
 8004fcc:	08010ec4 	.word	0x08010ec4
 8004fd0:	08010d34 	.word	0x08010d34
 8004fd4:	08010ee0 	.word	0x08010ee0
 8004fd8:	08004ecd 	.word	0x08004ecd

08004fdc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8004fe2:	202e      	movs	r0, #46	; 0x2e
 8004fe4:	f003 f9e2 	bl	80083ac <tcp_new_ip_type>
 8004fe8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <httpd_init+0x22>
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <httpd_init+0x34>)
 8004ff2:	f640 2272 	movw	r2, #2674	; 0xa72
 8004ff6:	4907      	ldr	r1, [pc, #28]	; (8005014 <httpd_init+0x38>)
 8004ff8:	4807      	ldr	r0, [pc, #28]	; (8005018 <httpd_init+0x3c>)
 8004ffa:	f00a fc8f 	bl	800f91c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8004ffe:	2150      	movs	r1, #80	; 0x50
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ffa7 	bl	8004f54 <httpd_init_pcb>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	08010cec 	.word	0x08010cec
 8005014:	08010f00 	.word	0x08010f00
 8005018:	08010d34 	.word	0x08010d34

0800501c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <http_set_ssi_handler+0x20>
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <http_set_ssi_handler+0x64>)
 8005030:	f640 2297 	movw	r2, #2711	; 0xa97
 8005034:	4913      	ldr	r1, [pc, #76]	; (8005084 <http_set_ssi_handler+0x68>)
 8005036:	4814      	ldr	r0, [pc, #80]	; (8005088 <http_set_ssi_handler+0x6c>)
 8005038:	f00a fc70 	bl	800f91c <iprintf>
  httpd_ssi_handler = ssi_handler;
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <http_set_ssi_handler+0x70>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <http_set_ssi_handler+0x3a>
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <http_set_ssi_handler+0x64>)
 800504a:	f640 229e 	movw	r2, #2718	; 0xa9e
 800504e:	4910      	ldr	r1, [pc, #64]	; (8005090 <http_set_ssi_handler+0x74>)
 8005050:	480d      	ldr	r0, [pc, #52]	; (8005088 <http_set_ssi_handler+0x6c>)
 8005052:	f00a fc63 	bl	800f91c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	dc06      	bgt.n	800506a <http_set_ssi_handler+0x4e>
 800505c:	4b08      	ldr	r3, [pc, #32]	; (8005080 <http_set_ssi_handler+0x64>)
 800505e:	f640 229f 	movw	r2, #2719	; 0xa9f
 8005062:	490c      	ldr	r1, [pc, #48]	; (8005094 <http_set_ssi_handler+0x78>)
 8005064:	4808      	ldr	r0, [pc, #32]	; (8005088 <http_set_ssi_handler+0x6c>)
 8005066:	f00a fc59 	bl	800f91c <iprintf>

  httpd_tags = tags;
 800506a:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <http_set_ssi_handler+0x7c>)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <http_set_ssi_handler+0x80>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	08010cec 	.word	0x08010cec
 8005084:	08010f1c 	.word	0x08010f1c
 8005088:	08010d34 	.word	0x08010d34
 800508c:	200004f4 	.word	0x200004f4
 8005090:	08010f34 	.word	0x08010f34
 8005094:	08010f44 	.word	0x08010f44
 8005098:	200004fc 	.word	0x200004fc
 800509c:	200004f8 	.word	0x200004f8

080050a0 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <http_set_cgi_handlers+0x1e>
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <http_set_cgi_handlers+0x48>)
 80050b2:	f640 22b2 	movw	r2, #2738	; 0xab2
 80050b6:	490d      	ldr	r1, [pc, #52]	; (80050ec <http_set_cgi_handlers+0x4c>)
 80050b8:	480d      	ldr	r0, [pc, #52]	; (80050f0 <http_set_cgi_handlers+0x50>)
 80050ba:	f00a fc2f 	bl	800f91c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dc06      	bgt.n	80050d2 <http_set_cgi_handlers+0x32>
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <http_set_cgi_handlers+0x48>)
 80050c6:	f640 22b3 	movw	r2, #2739	; 0xab3
 80050ca:	490a      	ldr	r1, [pc, #40]	; (80050f4 <http_set_cgi_handlers+0x54>)
 80050cc:	4808      	ldr	r0, [pc, #32]	; (80050f0 <http_set_cgi_handlers+0x50>)
 80050ce:	f00a fc25 	bl	800f91c <iprintf>

  httpd_cgis = cgis;
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <http_set_cgi_handlers+0x58>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <http_set_cgi_handlers+0x5c>)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	08010cec 	.word	0x08010cec
 80050ec:	08010f5c 	.word	0x08010f5c
 80050f0:	08010d34 	.word	0x08010d34
 80050f4:	08010f6c 	.word	0x08010f6c
 80050f8:	20000500 	.word	0x20000500
 80050fc:	20000504 	.word	0x20000504

08005100 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	b21a      	sxth	r2, r3
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	b29b      	uxth	r3, r3
 8005116:	b21b      	sxth	r3, r3
 8005118:	4313      	orrs	r3, r2
 800511a:	b21b      	sxth	r3, r3
 800511c:	b29b      	uxth	r3, r3
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	061a      	lsls	r2, r3, #24
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0e1b      	lsrs	r3, r3, #24
 800514e:	4313      	orrs	r3, r2
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005168:	68b8      	ldr	r0, [r7, #8]
 800516a:	f7fb f83b 	bl	80001e4 <strlen>
 800516e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	e022      	b.n	80051c0 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e012      	b.n	80051a6 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	781a      	ldrb	r2, [r3, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d109      	bne.n	80051a0 <lwip_strnstr+0x44>
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	6978      	ldr	r0, [r7, #20]
 8005192:	f00a fc30 	bl	800f9f6 <strncmp>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	e00f      	b.n	80051c0 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	3301      	adds	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <lwip_strnstr+0x62>
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	441a      	add	r2, r3
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	440b      	add	r3, r1
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d9e0      	bls.n	8005180 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	603a      	str	r2, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d016      	beq.n	800521c <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	f043 0320 	orr.w	r3, r3, #32
 80051f4:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80051f6:	7b7b      	ldrb	r3, [r7, #13]
 80051f8:	2b60      	cmp	r3, #96	; 0x60
 80051fa:	d90c      	bls.n	8005216 <lwip_stricmp+0x4e>
 80051fc:	7b7b      	ldrb	r3, [r7, #13]
 80051fe:	2b7a      	cmp	r3, #122	; 0x7a
 8005200:	d809      	bhi.n	8005216 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	f043 0320 	orr.w	r3, r3, #32
 8005208:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800520a:	7b7a      	ldrb	r2, [r7, #13]
 800520c:	7b3b      	ldrb	r3, [r7, #12]
 800520e:	429a      	cmp	r2, r3
 8005210:	d003      	beq.n	800521a <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8005212:	2301      	movs	r3, #1
 8005214:	e006      	b.n	8005224 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8005216:	2301      	movs	r3, #1
 8005218:	e004      	b.n	8005224 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800521a:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d7      	bne.n	80051d2 <lwip_stricmp+0xa>
  return 0;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800523a:	f000 f8d5 	bl	80053e8 <mem_init>
  memp_init();
 800523e:	f000 fbdb 	bl	80059f8 <memp_init>
  pbuf_init();
  netif_init();
 8005242:	f000 fc93 	bl	8005b6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005246:	f007 fea7 	bl	800cf98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800524a:	f001 fd05 	bl	8006c58 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800524e:	f007 fe19 	bl	800ce84 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <ptr_to_mem+0x20>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	4413      	add	r3, r2
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	2000050c 	.word	0x2000050c

08005280 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <mem_to_ptr+0x20>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	b29b      	uxth	r3, r3
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	2000050c 	.word	0x2000050c

080052a4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80052ac:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <plug_holes+0x120>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d206      	bcs.n	80052c4 <plug_holes+0x20>
 80052b6:	4b44      	ldr	r3, [pc, #272]	; (80053c8 <plug_holes+0x124>)
 80052b8:	f240 12df 	movw	r2, #479	; 0x1df
 80052bc:	4943      	ldr	r1, [pc, #268]	; (80053cc <plug_holes+0x128>)
 80052be:	4844      	ldr	r0, [pc, #272]	; (80053d0 <plug_holes+0x12c>)
 80052c0:	f00a fb2c 	bl	800f91c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80052c4:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <plug_holes+0x130>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d306      	bcc.n	80052dc <plug_holes+0x38>
 80052ce:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <plug_holes+0x124>)
 80052d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80052d4:	4940      	ldr	r1, [pc, #256]	; (80053d8 <plug_holes+0x134>)
 80052d6:	483e      	ldr	r0, [pc, #248]	; (80053d0 <plug_holes+0x12c>)
 80052d8:	f00a fb20 	bl	800f91c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	791b      	ldrb	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <plug_holes+0x4e>
 80052e4:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <plug_holes+0x124>)
 80052e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80052ea:	493c      	ldr	r1, [pc, #240]	; (80053dc <plug_holes+0x138>)
 80052ec:	4838      	ldr	r0, [pc, #224]	; (80053d0 <plug_holes+0x12c>)
 80052ee:	f00a fb15 	bl	800f91c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052fa:	d906      	bls.n	800530a <plug_holes+0x66>
 80052fc:	4b32      	ldr	r3, [pc, #200]	; (80053c8 <plug_holes+0x124>)
 80052fe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005302:	4937      	ldr	r1, [pc, #220]	; (80053e0 <plug_holes+0x13c>)
 8005304:	4832      	ldr	r0, [pc, #200]	; (80053d0 <plug_holes+0x12c>)
 8005306:	f00a fb09 	bl	800f91c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ffa4 	bl	800525c <ptr_to_mem>
 8005314:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	429a      	cmp	r2, r3
 800531c:	d024      	beq.n	8005368 <plug_holes+0xc4>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	791b      	ldrb	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d120      	bne.n	8005368 <plug_holes+0xc4>
 8005326:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <plug_holes+0x130>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d01b      	beq.n	8005368 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <plug_holes+0x140>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	429a      	cmp	r2, r3
 8005338:	d102      	bne.n	8005340 <plug_holes+0x9c>
      lfree = mem;
 800533a:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <plug_holes+0x140>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005350:	d00a      	beq.n	8005368 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ff80 	bl	800525c <ptr_to_mem>
 800535c:	4604      	mov	r4, r0
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff ff8e 	bl	8005280 <mem_to_ptr>
 8005364:	4603      	mov	r3, r0
 8005366:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	885b      	ldrh	r3, [r3, #2]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff ff75 	bl	800525c <ptr_to_mem>
 8005372:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d01f      	beq.n	80053bc <plug_holes+0x118>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	791b      	ldrb	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11b      	bne.n	80053bc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <plug_holes+0x140>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d102      	bne.n	8005394 <plug_holes+0xf0>
      lfree = pmem;
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <plug_holes+0x140>)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80053a4:	d00a      	beq.n	80053bc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff ff56 	bl	800525c <ptr_to_mem>
 80053b0:	4604      	mov	r4, r0
 80053b2:	68b8      	ldr	r0, [r7, #8]
 80053b4:	f7ff ff64 	bl	8005280 <mem_to_ptr>
 80053b8:	4603      	mov	r3, r0
 80053ba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}
 80053c4:	2000050c 	.word	0x2000050c
 80053c8:	08010f88 	.word	0x08010f88
 80053cc:	08010fb8 	.word	0x08010fb8
 80053d0:	08010fd0 	.word	0x08010fd0
 80053d4:	20000510 	.word	0x20000510
 80053d8:	08010ff8 	.word	0x08010ff8
 80053dc:	08011014 	.word	0x08011014
 80053e0:	08011030 	.word	0x08011030
 80053e4:	20000514 	.word	0x20000514

080053e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <mem_init+0x68>)
 80053f0:	3303      	adds	r3, #3
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	461a      	mov	r2, r3
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <mem_init+0x6c>)
 80053fa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80053fc:	4b15      	ldr	r3, [pc, #84]	; (8005454 <mem_init+0x6c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005408:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005416:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800541a:	f7ff ff1f 	bl	800525c <ptr_to_mem>
 800541e:	4603      	mov	r3, r0
 8005420:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <mem_init+0x70>)
 8005422:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <mem_init+0x70>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2201      	movs	r2, #1
 800542a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <mem_init+0x70>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005434:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <mem_init+0x70>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800543e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <mem_init+0x6c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a05      	ldr	r2, [pc, #20]	; (800545c <mem_init+0x74>)
 8005446:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200037dc 	.word	0x200037dc
 8005454:	2000050c 	.word	0x2000050c
 8005458:	20000510 	.word	0x20000510
 800545c:	20000514 	.word	0x20000514

08005460 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ff09 	bl	8005280 <mem_to_ptr>
 800546e:	4603      	mov	r3, r0
 8005470:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fef0 	bl	800525c <ptr_to_mem>
 800547c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	885b      	ldrh	r3, [r3, #2]
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff feea 	bl	800525c <ptr_to_mem>
 8005488:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005492:	d818      	bhi.n	80054c6 <mem_link_valid+0x66>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	885b      	ldrh	r3, [r3, #2]
 8005498:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800549c:	d813      	bhi.n	80054c6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80054a2:	8afa      	ldrh	r2, [r7, #22]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d004      	beq.n	80054b2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	8afa      	ldrh	r2, [r7, #22]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d109      	bne.n	80054c6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <mem_link_valid+0x74>)
 80054b4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d006      	beq.n	80054ca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	885b      	ldrh	r3, [r3, #2]
 80054c0:	8afa      	ldrh	r2, [r7, #22]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <mem_link_valid+0x6a>
    return 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <mem_link_valid+0x6c>
  }
  return 1;
 80054ca:	2301      	movs	r3, #1
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000510 	.word	0x20000510

080054d8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04c      	beq.n	8005580 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80054f0:	4b25      	ldr	r3, [pc, #148]	; (8005588 <mem_free+0xb0>)
 80054f2:	f240 2273 	movw	r2, #627	; 0x273
 80054f6:	4925      	ldr	r1, [pc, #148]	; (800558c <mem_free+0xb4>)
 80054f8:	4825      	ldr	r0, [pc, #148]	; (8005590 <mem_free+0xb8>)
 80054fa:	f00a fa0f 	bl	800f91c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054fe:	e040      	b.n	8005582 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b08      	subs	r3, #8
 8005504:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005506:	4b23      	ldr	r3, [pc, #140]	; (8005594 <mem_free+0xbc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	429a      	cmp	r2, r3
 800550e:	d306      	bcc.n	800551e <mem_free+0x46>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 020c 	add.w	r2, r3, #12
 8005516:	4b20      	ldr	r3, [pc, #128]	; (8005598 <mem_free+0xc0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d907      	bls.n	800552e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <mem_free+0xb0>)
 8005520:	f240 227f 	movw	r2, #639	; 0x27f
 8005524:	491d      	ldr	r1, [pc, #116]	; (800559c <mem_free+0xc4>)
 8005526:	481a      	ldr	r0, [pc, #104]	; (8005590 <mem_free+0xb8>)
 8005528:	f00a f9f8 	bl	800f91c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800552c:	e029      	b.n	8005582 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	791b      	ldrb	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <mem_free+0xb0>)
 8005538:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800553c:	4918      	ldr	r1, [pc, #96]	; (80055a0 <mem_free+0xc8>)
 800553e:	4814      	ldr	r0, [pc, #80]	; (8005590 <mem_free+0xb8>)
 8005540:	f00a f9ec 	bl	800f91c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005544:	e01d      	b.n	8005582 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ff8a 	bl	8005460 <mem_link_valid>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d107      	bne.n	8005562 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <mem_free+0xb0>)
 8005554:	f240 2295 	movw	r2, #661	; 0x295
 8005558:	4912      	ldr	r1, [pc, #72]	; (80055a4 <mem_free+0xcc>)
 800555a:	480d      	ldr	r0, [pc, #52]	; (8005590 <mem_free+0xb8>)
 800555c:	f00a f9de 	bl	800f91c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005560:	e00f      	b.n	8005582 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <mem_free+0xd0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	429a      	cmp	r2, r3
 8005570:	d202      	bcs.n	8005578 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005572:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <mem_free+0xd0>)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff fe93 	bl	80052a4 <plug_holes>
 800557e:	e000      	b.n	8005582 <mem_free+0xaa>
    return;
 8005580:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	08010f88 	.word	0x08010f88
 800558c:	0801105c 	.word	0x0801105c
 8005590:	08010fd0 	.word	0x08010fd0
 8005594:	2000050c 	.word	0x2000050c
 8005598:	20000510 	.word	0x20000510
 800559c:	08011080 	.word	0x08011080
 80055a0:	0801109c 	.word	0x0801109c
 80055a4:	080110c4 	.word	0x080110c4
 80055a8:	20000514 	.word	0x20000514

080055ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80055b8:	887b      	ldrh	r3, [r7, #2]
 80055ba:	3303      	adds	r3, #3
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80055c4:	8bfb      	ldrh	r3, [r7, #30]
 80055c6:	2b0b      	cmp	r3, #11
 80055c8:	d801      	bhi.n	80055ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80055ca:	230c      	movs	r3, #12
 80055cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80055ce:	8bfb      	ldrh	r3, [r7, #30]
 80055d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80055d4:	d803      	bhi.n	80055de <mem_trim+0x32>
 80055d6:	8bfa      	ldrh	r2, [r7, #30]
 80055d8:	887b      	ldrh	r3, [r7, #2]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d201      	bcs.n	80055e2 <mem_trim+0x36>
    return NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	e0cc      	b.n	800577c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80055e2:	4b68      	ldr	r3, [pc, #416]	; (8005784 <mem_trim+0x1d8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d304      	bcc.n	80055f6 <mem_trim+0x4a>
 80055ec:	4b66      	ldr	r3, [pc, #408]	; (8005788 <mem_trim+0x1dc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d306      	bcc.n	8005604 <mem_trim+0x58>
 80055f6:	4b65      	ldr	r3, [pc, #404]	; (800578c <mem_trim+0x1e0>)
 80055f8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80055fc:	4964      	ldr	r1, [pc, #400]	; (8005790 <mem_trim+0x1e4>)
 80055fe:	4865      	ldr	r0, [pc, #404]	; (8005794 <mem_trim+0x1e8>)
 8005600:	f00a f98c 	bl	800f91c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005604:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <mem_trim+0x1d8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d304      	bcc.n	8005618 <mem_trim+0x6c>
 800560e:	4b5e      	ldr	r3, [pc, #376]	; (8005788 <mem_trim+0x1dc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d301      	bcc.n	800561c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	e0af      	b.n	800577c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3b08      	subs	r3, #8
 8005620:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005622:	69b8      	ldr	r0, [r7, #24]
 8005624:	f7ff fe2c 	bl	8005280 <mem_to_ptr>
 8005628:	4603      	mov	r3, r0
 800562a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	881a      	ldrh	r2, [r3, #0]
 8005630:	8afb      	ldrh	r3, [r7, #22]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b08      	subs	r3, #8
 8005638:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800563a:	8bfa      	ldrh	r2, [r7, #30]
 800563c:	8abb      	ldrh	r3, [r7, #20]
 800563e:	429a      	cmp	r2, r3
 8005640:	d906      	bls.n	8005650 <mem_trim+0xa4>
 8005642:	4b52      	ldr	r3, [pc, #328]	; (800578c <mem_trim+0x1e0>)
 8005644:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005648:	4953      	ldr	r1, [pc, #332]	; (8005798 <mem_trim+0x1ec>)
 800564a:	4852      	ldr	r0, [pc, #328]	; (8005794 <mem_trim+0x1e8>)
 800564c:	f00a f966 	bl	800f91c <iprintf>
  if (newsize > size) {
 8005650:	8bfa      	ldrh	r2, [r7, #30]
 8005652:	8abb      	ldrh	r3, [r7, #20]
 8005654:	429a      	cmp	r2, r3
 8005656:	d901      	bls.n	800565c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	e08f      	b.n	800577c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800565c:	8bfa      	ldrh	r2, [r7, #30]
 800565e:	8abb      	ldrh	r3, [r7, #20]
 8005660:	429a      	cmp	r2, r3
 8005662:	d101      	bne.n	8005668 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	e089      	b.n	800577c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fdf5 	bl	800525c <ptr_to_mem>
 8005672:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	791b      	ldrb	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d13f      	bne.n	80056fc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005684:	d106      	bne.n	8005694 <mem_trim+0xe8>
 8005686:	4b41      	ldr	r3, [pc, #260]	; (800578c <mem_trim+0x1e0>)
 8005688:	f240 22f5 	movw	r2, #757	; 0x2f5
 800568c:	4943      	ldr	r1, [pc, #268]	; (800579c <mem_trim+0x1f0>)
 800568e:	4841      	ldr	r0, [pc, #260]	; (8005794 <mem_trim+0x1e8>)
 8005690:	f00a f944 	bl	800f91c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800569a:	8afa      	ldrh	r2, [r7, #22]
 800569c:	8bfb      	ldrh	r3, [r7, #30]
 800569e:	4413      	add	r3, r2
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3308      	adds	r3, #8
 80056a4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80056a6:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <mem_trim+0x1f4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d106      	bne.n	80056be <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80056b0:	89fb      	ldrh	r3, [r7, #14]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fdd2 	bl	800525c <ptr_to_mem>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4a39      	ldr	r2, [pc, #228]	; (80057a0 <mem_trim+0x1f4>)
 80056bc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80056be:	89fb      	ldrh	r3, [r7, #14]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fdcb 	bl	800525c <ptr_to_mem>
 80056c6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2200      	movs	r2, #0
 80056cc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	89ba      	ldrh	r2, [r7, #12]
 80056d2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	8afa      	ldrh	r2, [r7, #22]
 80056d8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	89fa      	ldrh	r2, [r7, #14]
 80056de:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056e8:	d047      	beq.n	800577a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fdb4 	bl	800525c <ptr_to_mem>
 80056f4:	4602      	mov	r2, r0
 80056f6:	89fb      	ldrh	r3, [r7, #14]
 80056f8:	8053      	strh	r3, [r2, #2]
 80056fa:	e03e      	b.n	800577a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80056fc:	8bfb      	ldrh	r3, [r7, #30]
 80056fe:	f103 0214 	add.w	r2, r3, #20
 8005702:	8abb      	ldrh	r3, [r7, #20]
 8005704:	429a      	cmp	r2, r3
 8005706:	d838      	bhi.n	800577a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005708:	8afa      	ldrh	r2, [r7, #22]
 800570a:	8bfb      	ldrh	r3, [r7, #30]
 800570c:	4413      	add	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	3308      	adds	r3, #8
 8005712:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800571c:	d106      	bne.n	800572c <mem_trim+0x180>
 800571e:	4b1b      	ldr	r3, [pc, #108]	; (800578c <mem_trim+0x1e0>)
 8005720:	f240 3216 	movw	r2, #790	; 0x316
 8005724:	491d      	ldr	r1, [pc, #116]	; (800579c <mem_trim+0x1f0>)
 8005726:	481b      	ldr	r0, [pc, #108]	; (8005794 <mem_trim+0x1e8>)
 8005728:	f00a f8f8 	bl	800f91c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800572c:	89fb      	ldrh	r3, [r7, #14]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fd94 	bl	800525c <ptr_to_mem>
 8005734:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <mem_trim+0x1f4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d202      	bcs.n	8005746 <mem_trim+0x19a>
      lfree = mem2;
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <mem_trim+0x1f4>)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2200      	movs	r2, #0
 800574a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	881a      	ldrh	r2, [r3, #0]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	8afa      	ldrh	r2, [r7, #22]
 8005758:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	89fa      	ldrh	r2, [r7, #14]
 800575e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005768:	d007      	beq.n	800577a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fd74 	bl	800525c <ptr_to_mem>
 8005774:	4602      	mov	r2, r0
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800577a:	687b      	ldr	r3, [r7, #4]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	2000050c 	.word	0x2000050c
 8005788:	20000510 	.word	0x20000510
 800578c:	08010f88 	.word	0x08010f88
 8005790:	080110f8 	.word	0x080110f8
 8005794:	08010fd0 	.word	0x08010fd0
 8005798:	08011110 	.word	0x08011110
 800579c:	08011130 	.word	0x08011130
 80057a0:	20000514 	.word	0x20000514

080057a4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <mem_malloc+0x14>
    return NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e0d9      	b.n	800596c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	3303      	adds	r3, #3
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80057c4:	8bbb      	ldrh	r3, [r7, #28]
 80057c6:	2b0b      	cmp	r3, #11
 80057c8:	d801      	bhi.n	80057ce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80057ca:	230c      	movs	r3, #12
 80057cc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80057ce:	8bbb      	ldrh	r3, [r7, #28]
 80057d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057d4:	d803      	bhi.n	80057de <mem_malloc+0x3a>
 80057d6:	8bba      	ldrh	r2, [r7, #28]
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d201      	bcs.n	80057e2 <mem_malloc+0x3e>
    return NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	e0c4      	b.n	800596c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80057e2:	4b64      	ldr	r3, [pc, #400]	; (8005974 <mem_malloc+0x1d0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fd4a 	bl	8005280 <mem_to_ptr>
 80057ec:	4603      	mov	r3, r0
 80057ee:	83fb      	strh	r3, [r7, #30]
 80057f0:	e0b4      	b.n	800595c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80057f2:	8bfb      	ldrh	r3, [r7, #30]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fd31 	bl	800525c <ptr_to_mem>
 80057fa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	791b      	ldrb	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 80a4 	bne.w	800594e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	8bfb      	ldrh	r3, [r7, #30]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f1a3 0208 	sub.w	r2, r3, #8
 8005814:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005816:	429a      	cmp	r2, r3
 8005818:	f0c0 8099 	bcc.w	800594e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	8bfb      	ldrh	r3, [r7, #30]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f1a3 0208 	sub.w	r2, r3, #8
 800582a:	8bbb      	ldrh	r3, [r7, #28]
 800582c:	3314      	adds	r3, #20
 800582e:	429a      	cmp	r2, r3
 8005830:	d333      	bcc.n	800589a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005832:	8bfa      	ldrh	r2, [r7, #30]
 8005834:	8bbb      	ldrh	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	3308      	adds	r3, #8
 800583c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800583e:	8a7b      	ldrh	r3, [r7, #18]
 8005840:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005844:	d106      	bne.n	8005854 <mem_malloc+0xb0>
 8005846:	4b4c      	ldr	r3, [pc, #304]	; (8005978 <mem_malloc+0x1d4>)
 8005848:	f240 3287 	movw	r2, #903	; 0x387
 800584c:	494b      	ldr	r1, [pc, #300]	; (800597c <mem_malloc+0x1d8>)
 800584e:	484c      	ldr	r0, [pc, #304]	; (8005980 <mem_malloc+0x1dc>)
 8005850:	f00a f864 	bl	800f91c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005854:	8a7b      	ldrh	r3, [r7, #18]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fd00 	bl	800525c <ptr_to_mem>
 800585c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	881a      	ldrh	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8bfa      	ldrh	r2, [r7, #30]
 8005870:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	8a7a      	ldrh	r2, [r7, #18]
 8005876:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2201      	movs	r2, #1
 800587c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005886:	d00b      	beq.n	80058a0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fce5 	bl	800525c <ptr_to_mem>
 8005892:	4602      	mov	r2, r0
 8005894:	8a7b      	ldrh	r3, [r7, #18]
 8005896:	8053      	strh	r3, [r2, #2]
 8005898:	e002      	b.n	80058a0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2201      	movs	r2, #1
 800589e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <mem_malloc+0x1d0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d127      	bne.n	80058fa <mem_malloc+0x156>
          struct mem *cur = lfree;
 80058aa:	4b32      	ldr	r3, [pc, #200]	; (8005974 <mem_malloc+0x1d0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80058b0:	e005      	b.n	80058be <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fcd0 	bl	800525c <ptr_to_mem>
 80058bc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	791b      	ldrb	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <mem_malloc+0x12c>
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <mem_malloc+0x1e0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d1f0      	bne.n	80058b2 <mem_malloc+0x10e>
          }
          lfree = cur;
 80058d0:	4a28      	ldr	r2, [pc, #160]	; (8005974 <mem_malloc+0x1d0>)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80058d6:	4b27      	ldr	r3, [pc, #156]	; (8005974 <mem_malloc+0x1d0>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <mem_malloc+0x1e0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d00b      	beq.n	80058fa <mem_malloc+0x156>
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <mem_malloc+0x1d0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	791b      	ldrb	r3, [r3, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d006      	beq.n	80058fa <mem_malloc+0x156>
 80058ec:	4b22      	ldr	r3, [pc, #136]	; (8005978 <mem_malloc+0x1d4>)
 80058ee:	f240 32b5 	movw	r2, #949	; 0x3b5
 80058f2:	4925      	ldr	r1, [pc, #148]	; (8005988 <mem_malloc+0x1e4>)
 80058f4:	4822      	ldr	r0, [pc, #136]	; (8005980 <mem_malloc+0x1dc>)
 80058f6:	f00a f811 	bl	800f91c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80058fa:	8bba      	ldrh	r2, [r7, #28]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	3308      	adds	r3, #8
 8005902:	4a20      	ldr	r2, [pc, #128]	; (8005984 <mem_malloc+0x1e0>)
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	4293      	cmp	r3, r2
 8005908:	d906      	bls.n	8005918 <mem_malloc+0x174>
 800590a:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <mem_malloc+0x1d4>)
 800590c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005910:	491e      	ldr	r1, [pc, #120]	; (800598c <mem_malloc+0x1e8>)
 8005912:	481b      	ldr	r0, [pc, #108]	; (8005980 <mem_malloc+0x1dc>)
 8005914:	f00a f802 	bl	800f91c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <mem_malloc+0x18c>
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <mem_malloc+0x1d4>)
 8005924:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005928:	4919      	ldr	r1, [pc, #100]	; (8005990 <mem_malloc+0x1ec>)
 800592a:	4815      	ldr	r0, [pc, #84]	; (8005980 <mem_malloc+0x1dc>)
 800592c:	f009 fff6 	bl	800f91c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d006      	beq.n	8005948 <mem_malloc+0x1a4>
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <mem_malloc+0x1d4>)
 800593c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005940:	4914      	ldr	r1, [pc, #80]	; (8005994 <mem_malloc+0x1f0>)
 8005942:	480f      	ldr	r0, [pc, #60]	; (8005980 <mem_malloc+0x1dc>)
 8005944:	f009 ffea 	bl	800f91c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	3308      	adds	r3, #8
 800594c:	e00e      	b.n	800596c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800594e:	8bfb      	ldrh	r3, [r7, #30]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fc83 	bl	800525c <ptr_to_mem>
 8005956:	4603      	mov	r3, r0
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800595c:	8bfa      	ldrh	r2, [r7, #30]
 800595e:	8bbb      	ldrh	r3, [r7, #28]
 8005960:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005964:	429a      	cmp	r2, r3
 8005966:	f4ff af44 	bcc.w	80057f2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3720      	adds	r7, #32
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000514 	.word	0x20000514
 8005978:	08010f88 	.word	0x08010f88
 800597c:	08011130 	.word	0x08011130
 8005980:	08010fd0 	.word	0x08010fd0
 8005984:	20000510 	.word	0x20000510
 8005988:	08011144 	.word	0x08011144
 800598c:	08011160 	.word	0x08011160
 8005990:	08011190 	.word	0x08011190
 8005994:	080111c0 	.word	0x080111c0

08005998 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	3303      	adds	r3, #3
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e011      	b.n	80059de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	885b      	ldrh	r3, [r3, #2]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	dbe7      	blt.n	80059ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80059fe:	2300      	movs	r3, #0
 8005a00:	80fb      	strh	r3, [r7, #6]
 8005a02:	e009      	b.n	8005a18 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <memp_init+0x30>)
 8005a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff ffc3 	bl	8005998 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	3301      	adds	r3, #1
 8005a16:	80fb      	strh	r3, [r7, #6]
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d9f2      	bls.n	8005a04 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08013d64 	.word	0x08013d64

08005a2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d012      	beq.n	8005a68 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <do_memp_malloc_pool+0x38>
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <do_memp_malloc_pool+0x48>)
 8005a58:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005a5c:	4906      	ldr	r1, [pc, #24]	; (8005a78 <do_memp_malloc_pool+0x4c>)
 8005a5e:	4807      	ldr	r0, [pc, #28]	; (8005a7c <do_memp_malloc_pool+0x50>)
 8005a60:	f009 ff5c 	bl	800f91c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	e000      	b.n	8005a6a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	080111e4 	.word	0x080111e4
 8005a78:	08011214 	.word	0x08011214
 8005a7c:	08011238 	.word	0x08011238

08005a80 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d908      	bls.n	8005aa2 <memp_malloc+0x22>
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <memp_malloc+0x3c>)
 8005a92:	f240 1257 	movw	r2, #343	; 0x157
 8005a96:	490a      	ldr	r1, [pc, #40]	; (8005ac0 <memp_malloc+0x40>)
 8005a98:	480a      	ldr	r0, [pc, #40]	; (8005ac4 <memp_malloc+0x44>)
 8005a9a:	f009 ff3f 	bl	800f91c <iprintf>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e008      	b.n	8005ab4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <memp_malloc+0x48>)
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff ffbe 	bl	8005a2c <do_memp_malloc_pool>
 8005ab0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	080111e4 	.word	0x080111e4
 8005ac0:	08011274 	.word	0x08011274
 8005ac4:	08011238 	.word	0x08011238
 8005ac8:	08013d64 	.word	0x08013d64

08005acc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f003 0303 	and.w	r3, r3, #3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d006      	beq.n	8005aee <do_memp_free_pool+0x22>
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <do_memp_free_pool+0x40>)
 8005ae2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005ae6:	490a      	ldr	r1, [pc, #40]	; (8005b10 <do_memp_free_pool+0x44>)
 8005ae8:	480a      	ldr	r0, [pc, #40]	; (8005b14 <do_memp_free_pool+0x48>)
 8005aea:	f009 ff17 	bl	800f91c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	080111e4 	.word	0x080111e4
 8005b10:	08011294 	.word	0x08011294
 8005b14:	08011238 	.word	0x08011238

08005b18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d907      	bls.n	8005b3a <memp_free+0x22>
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <memp_free+0x44>)
 8005b2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005b30:	490b      	ldr	r1, [pc, #44]	; (8005b60 <memp_free+0x48>)
 8005b32:	480c      	ldr	r0, [pc, #48]	; (8005b64 <memp_free+0x4c>)
 8005b34:	f009 fef2 	bl	800f91c <iprintf>
 8005b38:	e00c      	b.n	8005b54 <memp_free+0x3c>

  if (mem == NULL) {
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	4a09      	ldr	r2, [pc, #36]	; (8005b68 <memp_free+0x50>)
 8005b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff ffbe 	bl	8005acc <do_memp_free_pool>
 8005b50:	e000      	b.n	8005b54 <memp_free+0x3c>
    return;
 8005b52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	080111e4 	.word	0x080111e4
 8005b60:	080112b4 	.word	0x080112b4
 8005b64:	08011238 	.word	0x08011238
 8005b68:	08013d64 	.word	0x08013d64

08005b6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005b70:	bf00      	nop
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <netif_add+0x26>
 8005b90:	4b57      	ldr	r3, [pc, #348]	; (8005cf0 <netif_add+0x174>)
 8005b92:	f240 1227 	movw	r2, #295	; 0x127
 8005b96:	4957      	ldr	r1, [pc, #348]	; (8005cf4 <netif_add+0x178>)
 8005b98:	4857      	ldr	r0, [pc, #348]	; (8005cf8 <netif_add+0x17c>)
 8005b9a:	f009 febf 	bl	800f91c <iprintf>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e0a2      	b.n	8005ce8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d108      	bne.n	8005bba <netif_add+0x3e>
 8005ba8:	4b51      	ldr	r3, [pc, #324]	; (8005cf0 <netif_add+0x174>)
 8005baa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005bae:	4953      	ldr	r1, [pc, #332]	; (8005cfc <netif_add+0x180>)
 8005bb0:	4851      	ldr	r0, [pc, #324]	; (8005cf8 <netif_add+0x17c>)
 8005bb2:	f009 feb3 	bl	800f91c <iprintf>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e096      	b.n	8005ce8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005bc0:	4b4f      	ldr	r3, [pc, #316]	; (8005d00 <netif_add+0x184>)
 8005bc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005bca:	4b4d      	ldr	r3, [pc, #308]	; (8005d00 <netif_add+0x184>)
 8005bcc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005bd4:	4b4a      	ldr	r3, [pc, #296]	; (8005d00 <netif_add+0x184>)
 8005bd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a45      	ldr	r2, [pc, #276]	; (8005d04 <netif_add+0x188>)
 8005bee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	; (8005d08 <netif_add+0x18c>)
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c18:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f913 	bl	8005e4c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	4798      	blx	r3
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <netif_add+0xba>
    return NULL;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e058      	b.n	8005ce8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d103      	bne.n	8005c48 <netif_add+0xcc>
        netif->num = 0;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005c4c:	4b2f      	ldr	r3, [pc, #188]	; (8005d0c <netif_add+0x190>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e02b      	b.n	8005cac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d106      	bne.n	8005c6a <netif_add+0xee>
 8005c5c:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <netif_add+0x174>)
 8005c5e:	f240 128b 	movw	r2, #395	; 0x18b
 8005c62:	492b      	ldr	r1, [pc, #172]	; (8005d10 <netif_add+0x194>)
 8005c64:	4824      	ldr	r0, [pc, #144]	; (8005cf8 <netif_add+0x17c>)
 8005c66:	f009 fe59 	bl	800f91c <iprintf>
        num_netifs++;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2bff      	cmp	r3, #255	; 0xff
 8005c74:	dd06      	ble.n	8005c84 <netif_add+0x108>
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <netif_add+0x174>)
 8005c78:	f240 128d 	movw	r2, #397	; 0x18d
 8005c7c:	4925      	ldr	r1, [pc, #148]	; (8005d14 <netif_add+0x198>)
 8005c7e:	481e      	ldr	r0, [pc, #120]	; (8005cf8 <netif_add+0x17c>)
 8005c80:	f009 fe4c 	bl	800f91c <iprintf>
        if (netif2->num == netif->num) {
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d108      	bne.n	8005ca6 <netif_add+0x12a>
          netif->num++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005ca4:	e005      	b.n	8005cb2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1d0      	bne.n	8005c54 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1be      	bne.n	8005c36 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8005cc0:	d103      	bne.n	8005cca <netif_add+0x14e>
    netif_num = 0;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <netif_add+0x18c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	e006      	b.n	8005cd8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <netif_add+0x18c>)
 8005cd6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <netif_add+0x190>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <netif_add+0x190>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	080112d0 	.word	0x080112d0
 8005cf4:	08011364 	.word	0x08011364
 8005cf8:	08011320 	.word	0x08011320
 8005cfc:	08011380 	.word	0x08011380
 8005d00:	08013dc8 	.word	0x08013dc8
 8005d04:	0800605f 	.word	0x0800605f
 8005d08:	2000053c 	.word	0x2000053c
 8005d0c:	20006cf8 	.word	0x20006cf8
 8005d10:	080113a4 	.word	0x080113a4
 8005d14:	080113b8 	.word	0x080113b8

08005d18 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f002 fd85 	bl	8008834 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f007 fabd 	bl	800d2ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <netif_do_set_ipaddr+0x20>
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <netif_do_set_ipaddr+0x88>)
 8005d50:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005d54:	491c      	ldr	r1, [pc, #112]	; (8005dc8 <netif_do_set_ipaddr+0x8c>)
 8005d56:	481d      	ldr	r0, [pc, #116]	; (8005dcc <netif_do_set_ipaddr+0x90>)
 8005d58:	f009 fde0 	bl	800f91c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <netif_do_set_ipaddr+0x34>
 8005d62:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <netif_do_set_ipaddr+0x88>)
 8005d64:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005d68:	4917      	ldr	r1, [pc, #92]	; (8005dc8 <netif_do_set_ipaddr+0x8c>)
 8005d6a:	4818      	ldr	r0, [pc, #96]	; (8005dcc <netif_do_set_ipaddr+0x90>)
 8005d6c:	f009 fdd6 	bl	800f91c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3304      	adds	r3, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d01c      	beq.n	8005db8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3304      	adds	r3, #4
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005d8e:	f107 0314 	add.w	r3, r7, #20
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff ffbf 	bl	8005d18 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <netif_do_set_ipaddr+0x6a>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	e000      	b.n	8005da8 <netif_do_set_ipaddr+0x6c>
 8005da6:	2300      	movs	r3, #0
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005dac:	2101      	movs	r1, #1
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f8d2 	bl	8005f58 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	080112d0 	.word	0x080112d0
 8005dc8:	080113e8 	.word	0x080113e8
 8005dcc:	08011320 	.word	0x08011320

08005dd0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3308      	adds	r3, #8
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d00a      	beq.n	8005e00 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <netif_do_set_netmask+0x26>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	e000      	b.n	8005df8 <netif_do_set_netmask+0x28>
 8005df6:	2300      	movs	r3, #0
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	330c      	adds	r3, #12
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d00a      	beq.n	8005e3e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <netif_do_set_gw+0x26>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	e000      	b.n	8005e36 <netif_do_set_gw+0x28>
 8005e34:	2300      	movs	r3, #0
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005e68:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <netif_set_addr+0x90>)
 8005e6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <netif_set_addr+0x90>)
 8005e74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005e7c:	4b17      	ldr	r3, [pc, #92]	; (8005edc <netif_set_addr+0x90>)
 8005e7e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <netif_set_addr+0x42>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <netif_set_addr+0x46>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <netif_set_addr+0x48>
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005e9c:	f107 0310 	add.w	r3, r7, #16
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff ff49 	bl	8005d3c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff ff8e 	bl	8005dd0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff ffa8 	bl	8005e0e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005ec4:	f107 0310 	add.w	r3, r7, #16
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff35 	bl	8005d3c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005ed2:	bf00      	nop
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	08013dc8 	.word	0x08013dc8

08005ee0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005ee8:	4a04      	ldr	r2, [pc, #16]	; (8005efc <netif_set_default+0x1c>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20006cfc 	.word	0x20006cfc

08005f00 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d107      	bne.n	8005f1e <netif_set_up+0x1e>
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <netif_set_up+0x4c>)
 8005f10:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005f14:	490e      	ldr	r1, [pc, #56]	; (8005f50 <netif_set_up+0x50>)
 8005f16:	480f      	ldr	r0, [pc, #60]	; (8005f54 <netif_set_up+0x54>)
 8005f18:	f009 fd00 	bl	800f91c <iprintf>
 8005f1c:	e013      	b.n	8005f46 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10c      	bne.n	8005f46 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005f3e:	2103      	movs	r1, #3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f809 	bl	8005f58 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	080112d0 	.word	0x080112d0
 8005f50:	08011458 	.word	0x08011458
 8005f54:	08011320 	.word	0x08011320

08005f58 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <netif_issue_reports+0x20>
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <netif_issue_reports+0x74>)
 8005f6c:	f240 326d 	movw	r2, #877	; 0x36d
 8005f70:	4917      	ldr	r1, [pc, #92]	; (8005fd0 <netif_issue_reports+0x78>)
 8005f72:	4818      	ldr	r0, [pc, #96]	; (8005fd4 <netif_issue_reports+0x7c>)
 8005f74:	f009 fcd2 	bl	800f91c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01e      	beq.n	8005fc4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f8c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d013      	beq.n	8005fc6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f008 f8df 	bl	800e180 <etharp_request>
 8005fc2:	e000      	b.n	8005fc6 <netif_issue_reports+0x6e>
    return;
 8005fc4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	080112d0 	.word	0x080112d0
 8005fd0:	08011474 	.word	0x08011474
 8005fd4:	08011320 	.word	0x08011320

08005fd8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <netif_set_down+0x1e>
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <netif_set_down+0x58>)
 8005fe8:	f240 329b 	movw	r2, #923	; 0x39b
 8005fec:	4911      	ldr	r1, [pc, #68]	; (8006034 <netif_set_down+0x5c>)
 8005fee:	4812      	ldr	r0, [pc, #72]	; (8006038 <netif_set_down+0x60>)
 8005ff0:	f009 fc94 	bl	800f91c <iprintf>
 8005ff4:	e019      	b.n	800602a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d012      	beq.n	800602a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f007 fc69 	bl	800d8fc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	080112d0 	.word	0x080112d0
 8006034:	08011498 	.word	0x08011498
 8006038:	08011320 	.word	0x08011320

0800603c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	61da      	str	r2, [r3, #28]
  }
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800606a:	f06f 030b 	mvn.w	r3, #11
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d013      	beq.n	80060b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <netif_get_by_index+0x48>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e00c      	b.n	80060ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800609a:	3301      	adds	r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	79fa      	ldrb	r2, [r7, #7]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d101      	bne.n	80060a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	e006      	b.n	80060b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ef      	bne.n	8006094 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20006cf8 	.word	0x20006cf8

080060c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <pbuf_free_ooseq+0x38>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <pbuf_free_ooseq+0x3c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	607b      	str	r3, [r7, #4]
 80060da:	e00a      	b.n	80060f2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 fbe3 	bl	80088b0 <tcp_free_ooseq>
      return;
 80060ea:	e005      	b.n	80060f8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f1      	bne.n	80060dc <pbuf_free_ooseq+0x14>
    }
  }
}
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20006d00 	.word	0x20006d00
 8006104:	20006d08 	.word	0x20006d08

08006108 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <pbuf_pool_is_empty+0x14>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20006d00 	.word	0x20006d00

08006120 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4611      	mov	r1, r2
 800612c:	461a      	mov	r2, r3
 800612e:	460b      	mov	r3, r1
 8006130:	80fb      	strh	r3, [r7, #6]
 8006132:	4613      	mov	r3, r2
 8006134:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88ba      	ldrh	r2, [r7, #4]
 800614c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800614e:	8b3b      	ldrh	r3, [r7, #24]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7f3a      	ldrb	r2, [r7, #28]
 800615a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	73da      	strb	r2, [r3, #15]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af02      	add	r7, sp, #8
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
 800617e:	460b      	mov	r3, r1
 8006180:	80bb      	strh	r3, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800618a:	887b      	ldrh	r3, [r7, #2]
 800618c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006190:	d07f      	beq.n	8006292 <pbuf_alloc+0x11e>
 8006192:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006196:	f300 80c8 	bgt.w	800632a <pbuf_alloc+0x1b6>
 800619a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800619e:	d010      	beq.n	80061c2 <pbuf_alloc+0x4e>
 80061a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80061a4:	f300 80c1 	bgt.w	800632a <pbuf_alloc+0x1b6>
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d002      	beq.n	80061b2 <pbuf_alloc+0x3e>
 80061ac:	2b41      	cmp	r3, #65	; 0x41
 80061ae:	f040 80bc 	bne.w	800632a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	88bb      	ldrh	r3, [r7, #4]
 80061b6:	4619      	mov	r1, r3
 80061b8:	2000      	movs	r0, #0
 80061ba:	f000 f8d1 	bl	8006360 <pbuf_alloc_reference>
 80061be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80061c0:	e0bd      	b.n	800633e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80061ca:	88bb      	ldrh	r3, [r7, #4]
 80061cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80061ce:	2008      	movs	r0, #8
 80061d0:	f7ff fc56 	bl	8005a80 <memp_malloc>
 80061d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80061dc:	f7ff ff94 	bl	8006108 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <pbuf_alloc+0x78>
            pbuf_free(p);
 80061e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061e8:	f000 faa8 	bl	800673c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e0a7      	b.n	8006340 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80061f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061f2:	3303      	adds	r3, #3
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006200:	b29b      	uxth	r3, r3
 8006202:	8b7a      	ldrh	r2, [r7, #26]
 8006204:	4293      	cmp	r3, r2
 8006206:	bf28      	it	cs
 8006208:	4613      	movcs	r3, r2
 800620a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800620c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800620e:	3310      	adds	r3, #16
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4413      	add	r3, r2
 8006214:	3303      	adds	r3, #3
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	4618      	mov	r0, r3
 800621c:	89f9      	ldrh	r1, [r7, #14]
 800621e:	8b7a      	ldrh	r2, [r7, #26]
 8006220:	2300      	movs	r3, #0
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	460b      	mov	r3, r1
 800622a:	4601      	mov	r1, r0
 800622c:	6938      	ldr	r0, [r7, #16]
 800622e:	f7ff ff77 	bl	8006120 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d006      	beq.n	800624c <pbuf_alloc+0xd8>
 800623e:	4b42      	ldr	r3, [pc, #264]	; (8006348 <pbuf_alloc+0x1d4>)
 8006240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006244:	4941      	ldr	r1, [pc, #260]	; (800634c <pbuf_alloc+0x1d8>)
 8006246:	4842      	ldr	r0, [pc, #264]	; (8006350 <pbuf_alloc+0x1dc>)
 8006248:	f009 fb68 	bl	800f91c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800624c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800624e:	3303      	adds	r3, #3
 8006250:	f023 0303 	bic.w	r3, r3, #3
 8006254:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006258:	d106      	bne.n	8006268 <pbuf_alloc+0xf4>
 800625a:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <pbuf_alloc+0x1d4>)
 800625c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006260:	493c      	ldr	r1, [pc, #240]	; (8006354 <pbuf_alloc+0x1e0>)
 8006262:	483b      	ldr	r0, [pc, #236]	; (8006350 <pbuf_alloc+0x1dc>)
 8006264:	f009 fb5a 	bl	800f91c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	e002      	b.n	800627a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800627e:	8b7a      	ldrh	r2, [r7, #26]
 8006280:	89fb      	ldrh	r3, [r7, #14]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800628a:	8b7b      	ldrh	r3, [r7, #26]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d19e      	bne.n	80061ce <pbuf_alloc+0x5a>
      break;
 8006290:	e055      	b.n	800633e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006294:	3303      	adds	r3, #3
 8006296:	b29b      	uxth	r3, r3
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	b29a      	uxth	r2, r3
 800629e:	88bb      	ldrh	r3, [r7, #4]
 80062a0:	3303      	adds	r3, #3
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f023 0303 	bic.w	r3, r3, #3
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80062ae:	8b3b      	ldrh	r3, [r7, #24]
 80062b0:	3310      	adds	r3, #16
 80062b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80062b4:	8b3a      	ldrh	r2, [r7, #24]
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	3303      	adds	r3, #3
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	429a      	cmp	r2, r3
 80062c0:	d306      	bcc.n	80062d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80062c2:	8afa      	ldrh	r2, [r7, #22]
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	3303      	adds	r3, #3
 80062c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d201      	bcs.n	80062d4 <pbuf_alloc+0x160>
        return NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e035      	b.n	8006340 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80062d4:	8afb      	ldrh	r3, [r7, #22]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7ff fa64 	bl	80057a4 <mem_malloc>
 80062dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <pbuf_alloc+0x174>
        return NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e02b      	b.n	8006340 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80062e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062ea:	3310      	adds	r3, #16
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	4413      	add	r3, r2
 80062f0:	3303      	adds	r3, #3
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	4618      	mov	r0, r3
 80062f8:	88b9      	ldrh	r1, [r7, #4]
 80062fa:	88ba      	ldrh	r2, [r7, #4]
 80062fc:	2300      	movs	r3, #0
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	887b      	ldrh	r3, [r7, #2]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	460b      	mov	r3, r1
 8006306:	4601      	mov	r1, r0
 8006308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800630a:	f7ff ff09 	bl	8006120 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d010      	beq.n	800633c <pbuf_alloc+0x1c8>
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <pbuf_alloc+0x1d4>)
 800631c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006320:	490d      	ldr	r1, [pc, #52]	; (8006358 <pbuf_alloc+0x1e4>)
 8006322:	480b      	ldr	r0, [pc, #44]	; (8006350 <pbuf_alloc+0x1dc>)
 8006324:	f009 fafa 	bl	800f91c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006328:	e008      	b.n	800633c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <pbuf_alloc+0x1d4>)
 800632c:	f240 1227 	movw	r2, #295	; 0x127
 8006330:	490a      	ldr	r1, [pc, #40]	; (800635c <pbuf_alloc+0x1e8>)
 8006332:	4807      	ldr	r0, [pc, #28]	; (8006350 <pbuf_alloc+0x1dc>)
 8006334:	f009 faf2 	bl	800f91c <iprintf>
      return NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	e001      	b.n	8006340 <pbuf_alloc+0x1cc>
      break;
 800633c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006340:	4618      	mov	r0, r3
 8006342:	3728      	adds	r7, #40	; 0x28
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	08011500 	.word	0x08011500
 800634c:	08011530 	.word	0x08011530
 8006350:	08011560 	.word	0x08011560
 8006354:	08011588 	.word	0x08011588
 8006358:	080115bc 	.word	0x080115bc
 800635c:	080115e8 	.word	0x080115e8

08006360 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	807b      	strh	r3, [r7, #2]
 800636c:	4613      	mov	r3, r2
 800636e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006370:	883b      	ldrh	r3, [r7, #0]
 8006372:	2b41      	cmp	r3, #65	; 0x41
 8006374:	d009      	beq.n	800638a <pbuf_alloc_reference+0x2a>
 8006376:	883b      	ldrh	r3, [r7, #0]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d006      	beq.n	800638a <pbuf_alloc_reference+0x2a>
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <pbuf_alloc_reference+0x5c>)
 800637e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006382:	490f      	ldr	r1, [pc, #60]	; (80063c0 <pbuf_alloc_reference+0x60>)
 8006384:	480f      	ldr	r0, [pc, #60]	; (80063c4 <pbuf_alloc_reference+0x64>)
 8006386:	f009 fac9 	bl	800f91c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800638a:	2007      	movs	r0, #7
 800638c:	f7ff fb78 	bl	8005a80 <memp_malloc>
 8006390:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006398:	2300      	movs	r3, #0
 800639a:	e00b      	b.n	80063b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800639c:	8879      	ldrh	r1, [r7, #2]
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	2300      	movs	r3, #0
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	883b      	ldrh	r3, [r7, #0]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	460b      	mov	r3, r1
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff feb7 	bl	8006120 <pbuf_init_alloced_pbuf>
  return p;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	08011500 	.word	0x08011500
 80063c0:	08011604 	.word	0x08011604
 80063c4:	08011560 	.word	0x08011560

080063c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	607b      	str	r3, [r7, #4]
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	460b      	mov	r3, r1
 80063d6:	81bb      	strh	r3, [r7, #12]
 80063d8:	4613      	mov	r3, r2
 80063da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80063e0:	8a7b      	ldrh	r3, [r7, #18]
 80063e2:	3303      	adds	r3, #3
 80063e4:	f023 0203 	bic.w	r2, r3, #3
 80063e8:	89bb      	ldrh	r3, [r7, #12]
 80063ea:	441a      	add	r2, r3
 80063ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d901      	bls.n	80063f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e018      	b.n	8006428 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80063fc:	8a7b      	ldrh	r3, [r7, #18]
 80063fe:	3303      	adds	r3, #3
 8006400:	f023 0303 	bic.w	r3, r3, #3
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	4413      	add	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e001      	b.n	8006410 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	89b9      	ldrh	r1, [r7, #12]
 8006414:	89ba      	ldrh	r2, [r7, #12]
 8006416:	2302      	movs	r3, #2
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	460b      	mov	r3, r1
 8006420:	6979      	ldr	r1, [r7, #20]
 8006422:	f7ff fe7d 	bl	8006120 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006426:	687b      	ldr	r3, [r7, #4]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <pbuf_realloc+0x20>
 8006442:	4b3a      	ldr	r3, [pc, #232]	; (800652c <pbuf_realloc+0xfc>)
 8006444:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006448:	4939      	ldr	r1, [pc, #228]	; (8006530 <pbuf_realloc+0x100>)
 800644a:	483a      	ldr	r0, [pc, #232]	; (8006534 <pbuf_realloc+0x104>)
 800644c:	f009 fa66 	bl	800f91c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	891b      	ldrh	r3, [r3, #8]
 8006454:	887a      	ldrh	r2, [r7, #2]
 8006456:	429a      	cmp	r2, r3
 8006458:	d263      	bcs.n	8006522 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	891a      	ldrh	r2, [r3, #8]
 800645e:	887b      	ldrh	r3, [r7, #2]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	817b      	strh	r3, [r7, #10]
  q = p;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800646c:	e018      	b.n	80064a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	895b      	ldrh	r3, [r3, #10]
 8006472:	897a      	ldrh	r2, [r7, #10]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	891a      	ldrh	r2, [r3, #8]
 800647c:	893b      	ldrh	r3, [r7, #8]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <pbuf_realloc+0x70>
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <pbuf_realloc+0xfc>)
 8006494:	f240 12af 	movw	r2, #431	; 0x1af
 8006498:	4927      	ldr	r1, [pc, #156]	; (8006538 <pbuf_realloc+0x108>)
 800649a:	4826      	ldr	r0, [pc, #152]	; (8006534 <pbuf_realloc+0x104>)
 800649c:	f009 fa3e 	bl	800f91c <iprintf>
  while (rem_len > q->len) {
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	895b      	ldrh	r3, [r3, #10]
 80064a4:	897a      	ldrh	r2, [r7, #10]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d8e1      	bhi.n	800646e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	7b1b      	ldrb	r3, [r3, #12]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d121      	bne.n	80064fa <pbuf_realloc+0xca>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	895b      	ldrh	r3, [r3, #10]
 80064ba:	897a      	ldrh	r2, [r7, #10]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d01c      	beq.n	80064fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	7b5b      	ldrb	r3, [r3, #13]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d116      	bne.n	80064fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	897b      	ldrh	r3, [r7, #10]
 80064d8:	4413      	add	r3, r2
 80064da:	b29b      	uxth	r3, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff f864 	bl	80055ac <mem_trim>
 80064e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <pbuf_realloc+0xca>
 80064ec:	4b0f      	ldr	r3, [pc, #60]	; (800652c <pbuf_realloc+0xfc>)
 80064ee:	f240 12bd 	movw	r2, #445	; 0x1bd
 80064f2:	4912      	ldr	r1, [pc, #72]	; (800653c <pbuf_realloc+0x10c>)
 80064f4:	480f      	ldr	r0, [pc, #60]	; (8006534 <pbuf_realloc+0x104>)
 80064f6:	f009 fa11 	bl	800f91c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	897a      	ldrh	r2, [r7, #10]
 80064fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	895a      	ldrh	r2, [r3, #10]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f911 	bl	800673c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e000      	b.n	8006524 <pbuf_realloc+0xf4>
    return;
 8006522:	bf00      	nop

}
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	08011500 	.word	0x08011500
 8006530:	08011618 	.word	0x08011618
 8006534:	08011560 	.word	0x08011560
 8006538:	08011630 	.word	0x08011630
 800653c:	08011648 	.word	0x08011648

08006540 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <pbuf_add_header_impl+0x22>
 8006554:	4b2b      	ldr	r3, [pc, #172]	; (8006604 <pbuf_add_header_impl+0xc4>)
 8006556:	f240 12df 	movw	r2, #479	; 0x1df
 800655a:	492b      	ldr	r1, [pc, #172]	; (8006608 <pbuf_add_header_impl+0xc8>)
 800655c:	482b      	ldr	r0, [pc, #172]	; (800660c <pbuf_add_header_impl+0xcc>)
 800655e:	f009 f9dd 	bl	800f91c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <pbuf_add_header_impl+0x30>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656e:	d301      	bcc.n	8006574 <pbuf_add_header_impl+0x34>
    return 1;
 8006570:	2301      	movs	r3, #1
 8006572:	e043      	b.n	80065fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <pbuf_add_header_impl+0x3e>
    return 0;
 800657a:	2300      	movs	r3, #0
 800657c:	e03e      	b.n	80065fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	891a      	ldrh	r2, [r3, #8]
 8006586:	8a7b      	ldrh	r3, [r7, #18]
 8006588:	4413      	add	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	8a7a      	ldrh	r2, [r7, #18]
 800658e:	429a      	cmp	r2, r3
 8006590:	d901      	bls.n	8006596 <pbuf_add_header_impl+0x56>
    return 1;
 8006592:	2301      	movs	r3, #1
 8006594:	e032      	b.n	80065fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	7b1b      	ldrb	r3, [r3, #12]
 800659a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800659c:	8a3b      	ldrh	r3, [r7, #16]
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	425b      	negs	r3, r3
 80065ae:	4413      	add	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3310      	adds	r3, #16
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d20d      	bcs.n	80065d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80065bc:	2301      	movs	r3, #1
 80065be:	e01d      	b.n	80065fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d006      	beq.n	80065d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	425b      	negs	r3, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e001      	b.n	80065d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e011      	b.n	80065fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	895a      	ldrh	r2, [r3, #10]
 80065e2:	8a7b      	ldrh	r3, [r7, #18]
 80065e4:	4413      	add	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	891a      	ldrh	r2, [r3, #8]
 80065f0:	8a7b      	ldrh	r3, [r7, #18]
 80065f2:	4413      	add	r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	08011500 	.word	0x08011500
 8006608:	08011664 	.word	0x08011664
 800660c:	08011560 	.word	0x08011560

08006610 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff ff8e 	bl	8006540 <pbuf_add_header_impl>
 8006624:	4603      	mov	r3, r0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d106      	bne.n	800664e <pbuf_remove_header+0x1e>
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <pbuf_remove_header+0x94>)
 8006642:	f240 224b 	movw	r2, #587	; 0x24b
 8006646:	4920      	ldr	r1, [pc, #128]	; (80066c8 <pbuf_remove_header+0x98>)
 8006648:	4820      	ldr	r0, [pc, #128]	; (80066cc <pbuf_remove_header+0x9c>)
 800664a:	f009 f967 	bl	800f91c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <pbuf_remove_header+0x2c>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665a:	d301      	bcc.n	8006660 <pbuf_remove_header+0x30>
    return 1;
 800665c:	2301      	movs	r3, #1
 800665e:	e02c      	b.n	80066ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <pbuf_remove_header+0x3a>
    return 0;
 8006666:	2300      	movs	r3, #0
 8006668:	e027      	b.n	80066ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	895b      	ldrh	r3, [r3, #10]
 8006672:	89fa      	ldrh	r2, [r7, #14]
 8006674:	429a      	cmp	r2, r3
 8006676:	d908      	bls.n	800668a <pbuf_remove_header+0x5a>
 8006678:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <pbuf_remove_header+0x94>)
 800667a:	f240 2255 	movw	r2, #597	; 0x255
 800667e:	4914      	ldr	r1, [pc, #80]	; (80066d0 <pbuf_remove_header+0xa0>)
 8006680:	4812      	ldr	r0, [pc, #72]	; (80066cc <pbuf_remove_header+0x9c>)
 8006682:	f009 f94b 	bl	800f91c <iprintf>
 8006686:	2301      	movs	r3, #1
 8006688:	e017      	b.n	80066ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	441a      	add	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	895a      	ldrh	r2, [r3, #10]
 80066a0:	89fb      	ldrh	r3, [r7, #14]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	891a      	ldrh	r2, [r3, #8]
 80066ae:	89fb      	ldrh	r3, [r7, #14]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	08011500 	.word	0x08011500
 80066c8:	08011664 	.word	0x08011664
 80066cc:	08011560 	.word	0x08011560
 80066d0:	08011670 	.word	0x08011670

080066d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	807b      	strh	r3, [r7, #2]
 80066e0:	4613      	mov	r3, r2
 80066e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80066e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da08      	bge.n	80066fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80066ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80066f0:	425b      	negs	r3, r3
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ff9b 	bl	8006630 <pbuf_remove_header>
 80066fa:	4603      	mov	r3, r0
 80066fc:	e007      	b.n	800670e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80066fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006702:	787a      	ldrb	r2, [r7, #1]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ff1a 	bl	8006540 <pbuf_add_header_impl>
 800670c:	4603      	mov	r3, r0
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006722:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006726:	2201      	movs	r2, #1
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff ffd2 	bl	80066d4 <pbuf_header_impl>
 8006730:	4603      	mov	r3, r0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <pbuf_free+0x22>
 8006750:	4b38      	ldr	r3, [pc, #224]	; (8006834 <pbuf_free+0xf8>)
 8006752:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006756:	4938      	ldr	r1, [pc, #224]	; (8006838 <pbuf_free+0xfc>)
 8006758:	4838      	ldr	r0, [pc, #224]	; (800683c <pbuf_free+0x100>)
 800675a:	f009 f8df 	bl	800f91c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800675e:	2300      	movs	r3, #0
 8006760:	e063      	b.n	800682a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006766:	e05c      	b.n	8006822 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7b9b      	ldrb	r3, [r3, #14]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d106      	bne.n	800677e <pbuf_free+0x42>
 8006770:	4b30      	ldr	r3, [pc, #192]	; (8006834 <pbuf_free+0xf8>)
 8006772:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006776:	4932      	ldr	r1, [pc, #200]	; (8006840 <pbuf_free+0x104>)
 8006778:	4830      	ldr	r0, [pc, #192]	; (800683c <pbuf_free+0x100>)
 800677a:	f009 f8cf 	bl	800f91c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	7b9b      	ldrb	r3, [r3, #14]
 8006782:	3b01      	subs	r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	739a      	strb	r2, [r3, #14]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7b9b      	ldrb	r3, [r3, #14]
 800678e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006790:	7dbb      	ldrb	r3, [r7, #22]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d143      	bne.n	800681e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7b1b      	ldrb	r3, [r3, #12]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7b5b      	ldrb	r3, [r3, #13]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d011      	beq.n	80067d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <pbuf_free+0x90>
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <pbuf_free+0xf8>)
 80067c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80067c4:	491f      	ldr	r1, [pc, #124]	; (8006844 <pbuf_free+0x108>)
 80067c6:	481d      	ldr	r0, [pc, #116]	; (800683c <pbuf_free+0x100>)
 80067c8:	f009 f8a8 	bl	800f91c <iprintf>
        pc->custom_free_function(p);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4798      	blx	r3
 80067d4:	e01d      	b.n	8006812 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d104      	bne.n	80067e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	2008      	movs	r0, #8
 80067e0:	f7ff f99a 	bl	8005b18 <memp_free>
 80067e4:	e015      	b.n	8006812 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d104      	bne.n	80067f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	2007      	movs	r0, #7
 80067f0:	f7ff f992 	bl	8005b18 <memp_free>
 80067f4:	e00d      	b.n	8006812 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <pbuf_free+0xc8>
          mem_free(p);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fe fe6b 	bl	80054d8 <mem_free>
 8006802:	e006      	b.n	8006812 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <pbuf_free+0xf8>)
 8006806:	f240 320f 	movw	r2, #783	; 0x30f
 800680a:	490f      	ldr	r1, [pc, #60]	; (8006848 <pbuf_free+0x10c>)
 800680c:	480b      	ldr	r0, [pc, #44]	; (800683c <pbuf_free+0x100>)
 800680e:	f009 f885 	bl	800f91c <iprintf>
        }
      }
      count++;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	3301      	adds	r3, #1
 8006816:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	e001      	b.n	8006822 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d19f      	bne.n	8006768 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	08011500 	.word	0x08011500
 8006838:	08011664 	.word	0x08011664
 800683c:	08011560 	.word	0x08011560
 8006840:	08011690 	.word	0x08011690
 8006844:	080116a8 	.word	0x080116a8
 8006848:	080116cc 	.word	0x080116cc

0800684c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006858:	e005      	b.n	8006866 <pbuf_clen+0x1a>
    ++len;
 800685a:	89fb      	ldrh	r3, [r7, #14]
 800685c:	3301      	adds	r3, #1
 800685e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f6      	bne.n	800685a <pbuf_clen+0xe>
  }
  return len;
 800686c:	89fb      	ldrh	r3, [r7, #14]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d010      	beq.n	80068ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7b9b      	ldrb	r3, [r3, #14]
 800688e:	3301      	adds	r3, #1
 8006890:	b2da      	uxtb	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	7b9b      	ldrb	r3, [r3, #14]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <pbuf_ref+0x30>
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <pbuf_ref+0x38>)
 80068a0:	f240 3242 	movw	r2, #834	; 0x342
 80068a4:	4904      	ldr	r1, [pc, #16]	; (80068b8 <pbuf_ref+0x3c>)
 80068a6:	4805      	ldr	r0, [pc, #20]	; (80068bc <pbuf_ref+0x40>)
 80068a8:	f009 f838 	bl	800f91c <iprintf>
  }
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08011500 	.word	0x08011500
 80068b8:	080116e0 	.word	0x080116e0
 80068bc:	08011560 	.word	0x08011560

080068c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <pbuf_cat+0x16>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <pbuf_cat+0x26>
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <pbuf_cat+0x98>)
 80068d8:	f240 3259 	movw	r2, #857	; 0x359
 80068dc:	491f      	ldr	r1, [pc, #124]	; (800695c <pbuf_cat+0x9c>)
 80068de:	4820      	ldr	r0, [pc, #128]	; (8006960 <pbuf_cat+0xa0>)
 80068e0:	f009 f81c 	bl	800f91c <iprintf>
 80068e4:	e034      	b.n	8006950 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	e00a      	b.n	8006902 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	891a      	ldrh	r2, [r3, #8]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	891b      	ldrh	r3, [r3, #8]
 80068f4:	4413      	add	r3, r2
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	891a      	ldrh	r2, [r3, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	895b      	ldrh	r3, [r3, #10]
 8006912:	429a      	cmp	r2, r3
 8006914:	d006      	beq.n	8006924 <pbuf_cat+0x64>
 8006916:	4b10      	ldr	r3, [pc, #64]	; (8006958 <pbuf_cat+0x98>)
 8006918:	f240 3262 	movw	r2, #866	; 0x362
 800691c:	4911      	ldr	r1, [pc, #68]	; (8006964 <pbuf_cat+0xa4>)
 800691e:	4810      	ldr	r0, [pc, #64]	; (8006960 <pbuf_cat+0xa0>)
 8006920:	f008 fffc 	bl	800f91c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d006      	beq.n	800693a <pbuf_cat+0x7a>
 800692c:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <pbuf_cat+0x98>)
 800692e:	f240 3263 	movw	r2, #867	; 0x363
 8006932:	490d      	ldr	r1, [pc, #52]	; (8006968 <pbuf_cat+0xa8>)
 8006934:	480a      	ldr	r0, [pc, #40]	; (8006960 <pbuf_cat+0xa0>)
 8006936:	f008 fff1 	bl	800f91c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	891a      	ldrh	r2, [r3, #8]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	891b      	ldrh	r3, [r3, #8]
 8006942:	4413      	add	r3, r2
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	08011500 	.word	0x08011500
 800695c:	080116f4 	.word	0x080116f4
 8006960:	08011560 	.word	0x08011560
 8006964:	0801172c 	.word	0x0801172c
 8006968:	0801175c 	.word	0x0801175c

0800696c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <pbuf_copy+0x2a>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <pbuf_copy+0x2a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	891a      	ldrh	r2, [r3, #8]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	891b      	ldrh	r3, [r3, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d209      	bcs.n	80069aa <pbuf_copy+0x3e>
 8006996:	4b57      	ldr	r3, [pc, #348]	; (8006af4 <pbuf_copy+0x188>)
 8006998:	f240 32c9 	movw	r2, #969	; 0x3c9
 800699c:	4956      	ldr	r1, [pc, #344]	; (8006af8 <pbuf_copy+0x18c>)
 800699e:	4857      	ldr	r0, [pc, #348]	; (8006afc <pbuf_copy+0x190>)
 80069a0:	f008 ffbc 	bl	800f91c <iprintf>
 80069a4:	f06f 030f 	mvn.w	r3, #15
 80069a8:	e09f      	b.n	8006aea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	895b      	ldrh	r3, [r3, #10]
 80069ae:	461a      	mov	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	895b      	ldrh	r3, [r3, #10]
 80069b8:	4619      	mov	r1, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1acb      	subs	r3, r1, r3
 80069be:	429a      	cmp	r2, r3
 80069c0:	d306      	bcc.n	80069d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	895b      	ldrh	r3, [r3, #10]
 80069c6:	461a      	mov	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e005      	b.n	80069dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	895b      	ldrh	r3, [r3, #10]
 80069d4:	461a      	mov	r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	18d0      	adds	r0, r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4619      	mov	r1, r3
 80069f0:	f008 ff7e 	bl	800f8f0 <memcpy>
    offset_to += len;
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	895b      	ldrh	r3, [r3, #10]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d906      	bls.n	8006a1e <pbuf_copy+0xb2>
 8006a10:	4b38      	ldr	r3, [pc, #224]	; (8006af4 <pbuf_copy+0x188>)
 8006a12:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006a16:	493a      	ldr	r1, [pc, #232]	; (8006b00 <pbuf_copy+0x194>)
 8006a18:	4838      	ldr	r0, [pc, #224]	; (8006afc <pbuf_copy+0x190>)
 8006a1a:	f008 ff7f 	bl	800f91c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	895b      	ldrh	r3, [r3, #10]
 8006a22:	461a      	mov	r2, r3
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d906      	bls.n	8006a38 <pbuf_copy+0xcc>
 8006a2a:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <pbuf_copy+0x188>)
 8006a2c:	f240 32da 	movw	r2, #986	; 0x3da
 8006a30:	4934      	ldr	r1, [pc, #208]	; (8006b04 <pbuf_copy+0x198>)
 8006a32:	4832      	ldr	r0, [pc, #200]	; (8006afc <pbuf_copy+0x190>)
 8006a34:	f008 ff72 	bl	800f91c <iprintf>
    if (offset_from >= p_from->len) {
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	895b      	ldrh	r3, [r3, #10]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d304      	bcc.n	8006a4e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	895b      	ldrh	r3, [r3, #10]
 8006a52:	461a      	mov	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d114      	bne.n	8006a84 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10c      	bne.n	8006a84 <pbuf_copy+0x118>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <pbuf_copy+0x118>
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <pbuf_copy+0x188>)
 8006a72:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006a76:	4924      	ldr	r1, [pc, #144]	; (8006b08 <pbuf_copy+0x19c>)
 8006a78:	4820      	ldr	r0, [pc, #128]	; (8006afc <pbuf_copy+0x190>)
 8006a7a:	f008 ff4f 	bl	800f91c <iprintf>
 8006a7e:	f06f 030f 	mvn.w	r3, #15
 8006a82:	e032      	b.n	8006aea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d013      	beq.n	8006ab2 <pbuf_copy+0x146>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	895a      	ldrh	r2, [r3, #10]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	891b      	ldrh	r3, [r3, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d10d      	bne.n	8006ab2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <pbuf_copy+0x146>
 8006a9e:	4b15      	ldr	r3, [pc, #84]	; (8006af4 <pbuf_copy+0x188>)
 8006aa0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006aa4:	4919      	ldr	r1, [pc, #100]	; (8006b0c <pbuf_copy+0x1a0>)
 8006aa6:	4815      	ldr	r0, [pc, #84]	; (8006afc <pbuf_copy+0x190>)
 8006aa8:	f008 ff38 	bl	800f91c <iprintf>
 8006aac:	f06f 0305 	mvn.w	r3, #5
 8006ab0:	e01b      	b.n	8006aea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d013      	beq.n	8006ae0 <pbuf_copy+0x174>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	895a      	ldrh	r2, [r3, #10]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	891b      	ldrh	r3, [r3, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d10d      	bne.n	8006ae0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <pbuf_copy+0x174>
 8006acc:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <pbuf_copy+0x188>)
 8006ace:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006ad2:	490e      	ldr	r1, [pc, #56]	; (8006b0c <pbuf_copy+0x1a0>)
 8006ad4:	4809      	ldr	r0, [pc, #36]	; (8006afc <pbuf_copy+0x190>)
 8006ad6:	f008 ff21 	bl	800f91c <iprintf>
 8006ada:	f06f 0305 	mvn.w	r3, #5
 8006ade:	e004      	b.n	8006aea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f47f af61 	bne.w	80069aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	08011500 	.word	0x08011500
 8006af8:	080117a8 	.word	0x080117a8
 8006afc:	08011560 	.word	0x08011560
 8006b00:	080117d8 	.word	0x080117d8
 8006b04:	080117f0 	.word	0x080117f0
 8006b08:	0801180c 	.word	0x0801180c
 8006b0c:	0801181c 	.word	0x0801181c

08006b10 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	460b      	mov	r3, r1
 8006b20:	80fb      	strh	r3, [r7, #6]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d108      	bne.n	8006b46 <pbuf_copy_partial+0x36>
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <pbuf_copy_partial+0xd4>)
 8006b36:	f240 420a 	movw	r2, #1034	; 0x40a
 8006b3a:	492b      	ldr	r1, [pc, #172]	; (8006be8 <pbuf_copy_partial+0xd8>)
 8006b3c:	482b      	ldr	r0, [pc, #172]	; (8006bec <pbuf_copy_partial+0xdc>)
 8006b3e:	f008 feed 	bl	800f91c <iprintf>
 8006b42:	2300      	movs	r3, #0
 8006b44:	e04a      	b.n	8006bdc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d108      	bne.n	8006b5e <pbuf_copy_partial+0x4e>
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <pbuf_copy_partial+0xd4>)
 8006b4e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006b52:	4927      	ldr	r1, [pc, #156]	; (8006bf0 <pbuf_copy_partial+0xe0>)
 8006b54:	4825      	ldr	r0, [pc, #148]	; (8006bec <pbuf_copy_partial+0xdc>)
 8006b56:	f008 fee1 	bl	800f91c <iprintf>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e03e      	b.n	8006bdc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e034      	b.n	8006bce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006b64:	88bb      	ldrh	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <pbuf_copy_partial+0x70>
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	895b      	ldrh	r3, [r3, #10]
 8006b6e:	88ba      	ldrh	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d305      	bcc.n	8006b80 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	895b      	ldrh	r3, [r3, #10]
 8006b78:	88ba      	ldrh	r2, [r7, #4]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	80bb      	strh	r3, [r7, #4]
 8006b7e:	e023      	b.n	8006bc8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	895a      	ldrh	r2, [r3, #10]
 8006b84:	88bb      	ldrh	r3, [r7, #4]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006b8a:	8b3a      	ldrh	r2, [r7, #24]
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d901      	bls.n	8006b96 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006b96:	8b7b      	ldrh	r3, [r7, #26]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	18d0      	adds	r0, r2, r3
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	88bb      	ldrh	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	8b3a      	ldrh	r2, [r7, #24]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f008 fea2 	bl	800f8f0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006bac:	8afa      	ldrh	r2, [r7, #22]
 8006bae:	8b3b      	ldrh	r3, [r7, #24]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006bb4:	8b7a      	ldrh	r2, [r7, #26]
 8006bb6:	8b3b      	ldrh	r3, [r7, #24]
 8006bb8:	4413      	add	r3, r2
 8006bba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006bbc:	88fa      	ldrh	r2, [r7, #6]
 8006bbe:	8b3b      	ldrh	r3, [r7, #24]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <pbuf_copy_partial+0xca>
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1c4      	bne.n	8006b64 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006bda:	8afb      	ldrh	r3, [r7, #22]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08011500 	.word	0x08011500
 8006be8:	08011848 	.word	0x08011848
 8006bec:	08011560 	.word	0x08011560
 8006bf0:	08011868 	.word	0x08011868

08006bf4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	603a      	str	r2, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
 8006c00:	460b      	mov	r3, r1
 8006c02:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	8919      	ldrh	r1, [r3, #8]
 8006c08:	88ba      	ldrh	r2, [r7, #4]
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fab1 	bl	8006174 <pbuf_alloc>
 8006c12:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <pbuf_clone+0x2a>
    return NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e011      	b.n	8006c42 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fea3 	bl	800696c <pbuf_copy>
 8006c26:	4603      	mov	r3, r0
 8006c28:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006c2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d006      	beq.n	8006c40 <pbuf_clone+0x4c>
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <pbuf_clone+0x58>)
 8006c34:	f240 5224 	movw	r2, #1316	; 0x524
 8006c38:	4905      	ldr	r1, [pc, #20]	; (8006c50 <pbuf_clone+0x5c>)
 8006c3a:	4806      	ldr	r0, [pc, #24]	; (8006c54 <pbuf_clone+0x60>)
 8006c3c:	f008 fe6e 	bl	800f91c <iprintf>
  return q;
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08011500 	.word	0x08011500
 8006c50:	08011974 	.word	0x08011974
 8006c54:	08011560 	.word	0x08011560

08006c58 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006c5c:	f008 fe76 	bl	800f94c <rand>
 8006c60:	4603      	mov	r3, r0
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	4b01      	ldr	r3, [pc, #4]	; (8006c78 <tcp_init+0x20>)
 8006c72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006c74:	bf00      	nop
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000001e 	.word	0x2000001e

08006c7c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7d1b      	ldrb	r3, [r3, #20]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d105      	bne.n	8006c98 <tcp_free+0x1c>
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <tcp_free+0x2c>)
 8006c8e:	22d4      	movs	r2, #212	; 0xd4
 8006c90:	4906      	ldr	r1, [pc, #24]	; (8006cac <tcp_free+0x30>)
 8006c92:	4807      	ldr	r0, [pc, #28]	; (8006cb0 <tcp_free+0x34>)
 8006c94:	f008 fe42 	bl	800f91c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	2001      	movs	r0, #1
 8006c9c:	f7fe ff3c 	bl	8005b18 <memp_free>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	08011a00 	.word	0x08011a00
 8006cac:	08011a30 	.word	0x08011a30
 8006cb0:	08011a44 	.word	0x08011a44

08006cb4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7d1b      	ldrb	r3, [r3, #20]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d105      	bne.n	8006cd0 <tcp_free_listen+0x1c>
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <tcp_free_listen+0x2c>)
 8006cc6:	22df      	movs	r2, #223	; 0xdf
 8006cc8:	4906      	ldr	r1, [pc, #24]	; (8006ce4 <tcp_free_listen+0x30>)
 8006cca:	4807      	ldr	r0, [pc, #28]	; (8006ce8 <tcp_free_listen+0x34>)
 8006ccc:	f008 fe26 	bl	800f91c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	2002      	movs	r0, #2
 8006cd4:	f7fe ff20 	bl	8005b18 <memp_free>
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	08011a00 	.word	0x08011a00
 8006ce4:	08011a6c 	.word	0x08011a6c
 8006ce8:	08011a44 	.word	0x08011a44

08006cec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006cf0:	f001 f85c 	bl	8007dac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <tcp_tmr+0x28>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <tcp_tmr+0x28>)
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <tcp_tmr+0x28>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006d0c:	f000 fd0e 	bl	800772c <tcp_slowtmr>
  }
}
 8006d10:	bf00      	nop
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2000053d 	.word	0x2000053d

08006d18 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <tcp_remove_listener+0x1c>
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <tcp_remove_listener+0x48>)
 8006d2a:	22ff      	movs	r2, #255	; 0xff
 8006d2c:	490d      	ldr	r1, [pc, #52]	; (8006d64 <tcp_remove_listener+0x4c>)
 8006d2e:	480e      	ldr	r0, [pc, #56]	; (8006d68 <tcp_remove_listener+0x50>)
 8006d30:	f008 fdf4 	bl	800f91c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e00a      	b.n	8006d50 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d102      	bne.n	8006d4a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f1      	bne.n	8006d3a <tcp_remove_listener+0x22>
    }
  }
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	08011a00 	.word	0x08011a00
 8006d64:	08011a88 	.word	0x08011a88
 8006d68:	08011a44 	.word	0x08011a44

08006d6c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <tcp_listen_closed+0x1c>
 8006d7a:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <tcp_listen_closed+0x60>)
 8006d7c:	f240 1211 	movw	r2, #273	; 0x111
 8006d80:	4913      	ldr	r1, [pc, #76]	; (8006dd0 <tcp_listen_closed+0x64>)
 8006d82:	4814      	ldr	r0, [pc, #80]	; (8006dd4 <tcp_listen_closed+0x68>)
 8006d84:	f008 fdca 	bl	800f91c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7d1b      	ldrb	r3, [r3, #20]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d006      	beq.n	8006d9e <tcp_listen_closed+0x32>
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <tcp_listen_closed+0x60>)
 8006d92:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006d96:	4910      	ldr	r1, [pc, #64]	; (8006dd8 <tcp_listen_closed+0x6c>)
 8006d98:	480e      	ldr	r0, [pc, #56]	; (8006dd4 <tcp_listen_closed+0x68>)
 8006d9a:	f008 fdbf 	bl	800f91c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006d9e:	2301      	movs	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e00b      	b.n	8006dbc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <tcp_listen_closed+0x70>)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ffb1 	bl	8006d18 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d9f0      	bls.n	8006da4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	08011a00 	.word	0x08011a00
 8006dd0:	08011ab0 	.word	0x08011ab0
 8006dd4:	08011a44 	.word	0x08011a44
 8006dd8:	08011abc 	.word	0x08011abc
 8006ddc:	08013da0 	.word	0x08013da0

08006de0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006de0:	b5b0      	push	{r4, r5, r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af04      	add	r7, sp, #16
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <tcp_close_shutdown+0x20>
 8006df2:	4b63      	ldr	r3, [pc, #396]	; (8006f80 <tcp_close_shutdown+0x1a0>)
 8006df4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006df8:	4962      	ldr	r1, [pc, #392]	; (8006f84 <tcp_close_shutdown+0x1a4>)
 8006dfa:	4863      	ldr	r0, [pc, #396]	; (8006f88 <tcp_close_shutdown+0x1a8>)
 8006dfc:	f008 fd8e 	bl	800f91c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d066      	beq.n	8006ed4 <tcp_close_shutdown+0xf4>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7d1b      	ldrb	r3, [r3, #20]
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d003      	beq.n	8006e16 <tcp_close_shutdown+0x36>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7d1b      	ldrb	r3, [r3, #20]
 8006e12:	2b07      	cmp	r3, #7
 8006e14:	d15e      	bne.n	8006ed4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <tcp_close_shutdown+0x48>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e22:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e26:	d055      	beq.n	8006ed4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8b5b      	ldrh	r3, [r3, #26]
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d106      	bne.n	8006e42 <tcp_close_shutdown+0x62>
 8006e34:	4b52      	ldr	r3, [pc, #328]	; (8006f80 <tcp_close_shutdown+0x1a0>)
 8006e36:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006e3a:	4954      	ldr	r1, [pc, #336]	; (8006f8c <tcp_close_shutdown+0x1ac>)
 8006e3c:	4852      	ldr	r0, [pc, #328]	; (8006f88 <tcp_close_shutdown+0x1a8>)
 8006e3e:	f008 fd6d 	bl	800f91c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006e4a:	687d      	ldr	r5, [r7, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	8ad2      	ldrh	r2, [r2, #22]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	8b09      	ldrh	r1, [r1, #24]
 8006e58:	9102      	str	r1, [sp, #8]
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	462b      	mov	r3, r5
 8006e60:	4622      	mov	r2, r4
 8006e62:	4601      	mov	r1, r0
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f005 fd8b 	bl	800c980 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 fb6c 	bl	8008548 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006e70:	4b47      	ldr	r3, [pc, #284]	; (8006f90 <tcp_close_shutdown+0x1b0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d105      	bne.n	8006e86 <tcp_close_shutdown+0xa6>
 8006e7a:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <tcp_close_shutdown+0x1b0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4a43      	ldr	r2, [pc, #268]	; (8006f90 <tcp_close_shutdown+0x1b0>)
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e013      	b.n	8006eae <tcp_close_shutdown+0xce>
 8006e86:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <tcp_close_shutdown+0x1b0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e00c      	b.n	8006ea8 <tcp_close_shutdown+0xc8>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d104      	bne.n	8006ea2 <tcp_close_shutdown+0xc2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	60da      	str	r2, [r3, #12]
 8006ea0:	e005      	b.n	8006eae <tcp_close_shutdown+0xce>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1ef      	bne.n	8006e8e <tcp_close_shutdown+0xae>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	60da      	str	r2, [r3, #12]
 8006eb4:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <tcp_close_shutdown+0x1b4>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006eba:	4b37      	ldr	r3, [pc, #220]	; (8006f98 <tcp_close_shutdown+0x1b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d102      	bne.n	8006eca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006ec4:	f004 f800 	bl	800aec8 <tcp_trigger_input_pcb_close>
 8006ec8:	e002      	b.n	8006ed0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fed6 	bl	8006c7c <tcp_free>
      }
      return ERR_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e050      	b.n	8006f76 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7d1b      	ldrb	r3, [r3, #20]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d03b      	beq.n	8006f54 <tcp_close_shutdown+0x174>
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	dc44      	bgt.n	8006f6a <tcp_close_shutdown+0x18a>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <tcp_close_shutdown+0x10a>
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d02a      	beq.n	8006f3e <tcp_close_shutdown+0x15e>
 8006ee8:	e03f      	b.n	8006f6a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	8adb      	ldrh	r3, [r3, #22]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d021      	beq.n	8006f36 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ef2:	4b2a      	ldr	r3, [pc, #168]	; (8006f9c <tcp_close_shutdown+0x1bc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d105      	bne.n	8006f08 <tcp_close_shutdown+0x128>
 8006efc:	4b27      	ldr	r3, [pc, #156]	; (8006f9c <tcp_close_shutdown+0x1bc>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	4a26      	ldr	r2, [pc, #152]	; (8006f9c <tcp_close_shutdown+0x1bc>)
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	e013      	b.n	8006f30 <tcp_close_shutdown+0x150>
 8006f08:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <tcp_close_shutdown+0x1bc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60bb      	str	r3, [r7, #8]
 8006f0e:	e00c      	b.n	8006f2a <tcp_close_shutdown+0x14a>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d104      	bne.n	8006f24 <tcp_close_shutdown+0x144>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	60da      	str	r2, [r3, #12]
 8006f22:	e005      	b.n	8006f30 <tcp_close_shutdown+0x150>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1ef      	bne.n	8006f10 <tcp_close_shutdown+0x130>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fea0 	bl	8006c7c <tcp_free>
      break;
 8006f3c:	e01a      	b.n	8006f74 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff ff14 	bl	8006d6c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4816      	ldr	r0, [pc, #88]	; (8006fa0 <tcp_close_shutdown+0x1c0>)
 8006f48:	f001 fb4e 	bl	80085e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff feb1 	bl	8006cb4 <tcp_free_listen>
      break;
 8006f52:	e00f      	b.n	8006f74 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	480e      	ldr	r0, [pc, #56]	; (8006f90 <tcp_close_shutdown+0x1b0>)
 8006f58:	f001 fb46 	bl	80085e8 <tcp_pcb_remove>
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <tcp_close_shutdown+0x1b4>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fe8a 	bl	8006c7c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006f68:	e004      	b.n	8006f74 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f81a 	bl	8006fa4 <tcp_close_shutdown_fin>
 8006f70:	4603      	mov	r3, r0
 8006f72:	e000      	b.n	8006f76 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	08011a00 	.word	0x08011a00
 8006f84:	08011ad4 	.word	0x08011ad4
 8006f88:	08011a44 	.word	0x08011a44
 8006f8c:	08011af4 	.word	0x08011af4
 8006f90:	20006d08 	.word	0x20006d08
 8006f94:	20006d04 	.word	0x20006d04
 8006f98:	20006d1c 	.word	0x20006d1c
 8006f9c:	20006d14 	.word	0x20006d14
 8006fa0:	20006d10 	.word	0x20006d10

08006fa4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <tcp_close_shutdown_fin+0x1c>
 8006fb2:	4b2e      	ldr	r3, [pc, #184]	; (800706c <tcp_close_shutdown_fin+0xc8>)
 8006fb4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006fb8:	492d      	ldr	r1, [pc, #180]	; (8007070 <tcp_close_shutdown_fin+0xcc>)
 8006fba:	482e      	ldr	r0, [pc, #184]	; (8007074 <tcp_close_shutdown_fin+0xd0>)
 8006fbc:	f008 fcae 	bl	800f91c <iprintf>

  switch (pcb->state) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7d1b      	ldrb	r3, [r3, #20]
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	d020      	beq.n	800700a <tcp_close_shutdown_fin+0x66>
 8006fc8:	2b07      	cmp	r3, #7
 8006fca:	dc2b      	bgt.n	8007024 <tcp_close_shutdown_fin+0x80>
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d002      	beq.n	8006fd6 <tcp_close_shutdown_fin+0x32>
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d00d      	beq.n	8006ff0 <tcp_close_shutdown_fin+0x4c>
 8006fd4:	e026      	b.n	8007024 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f004 fde0 	bl	800bb9c <tcp_send_fin>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d11f      	bne.n	8007028 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2205      	movs	r2, #5
 8006fec:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006fee:	e01b      	b.n	8007028 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f004 fdd3 	bl	800bb9c <tcp_send_fin>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d114      	bne.n	800702c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2205      	movs	r2, #5
 8007006:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007008:	e010      	b.n	800702c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f004 fdc6 	bl	800bb9c <tcp_send_fin>
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2209      	movs	r2, #9
 8007020:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007022:	e005      	b.n	8007030 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	e01c      	b.n	8007062 <tcp_close_shutdown_fin+0xbe>
      break;
 8007028:	bf00      	nop
 800702a:	e002      	b.n	8007032 <tcp_close_shutdown_fin+0x8e>
      break;
 800702c:	bf00      	nop
 800702e:	e000      	b.n	8007032 <tcp_close_shutdown_fin+0x8e>
      break;
 8007030:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f004 feec 	bl	800be18 <tcp_output>
 8007040:	e00d      	b.n	800705e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704a:	d108      	bne.n	800705e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8b5b      	ldrh	r3, [r3, #26]
 8007050:	f043 0308 	orr.w	r3, r3, #8
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	e001      	b.n	8007062 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800705e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	08011a00 	.word	0x08011a00
 8007070:	08011ab0 	.word	0x08011ab0
 8007074:	08011a44 	.word	0x08011a44

08007078 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <tcp_close+0x22>
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <tcp_close+0x4c>)
 8007088:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800708c:	490e      	ldr	r1, [pc, #56]	; (80070c8 <tcp_close+0x50>)
 800708e:	480f      	ldr	r0, [pc, #60]	; (80070cc <tcp_close+0x54>)
 8007090:	f008 fc44 	bl	800f91c <iprintf>
 8007094:	f06f 030f 	mvn.w	r3, #15
 8007098:	e00f      	b.n	80070ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7d1b      	ldrb	r3, [r3, #20]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d006      	beq.n	80070b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	8b5b      	ldrh	r3, [r3, #26]
 80070a6:	f043 0310 	orr.w	r3, r3, #16
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80070b0:	2101      	movs	r1, #1
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe94 	bl	8006de0 <tcp_close_shutdown>
 80070b8:	4603      	mov	r3, r0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	08011a00 	.word	0x08011a00
 80070c8:	08011b10 	.word	0x08011b10
 80070cc:	08011a44 	.word	0x08011a44

080070d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	; 0x38
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d107      	bne.n	80070f0 <tcp_abandon+0x20>
 80070e0:	4b52      	ldr	r3, [pc, #328]	; (800722c <tcp_abandon+0x15c>)
 80070e2:	f240 223d 	movw	r2, #573	; 0x23d
 80070e6:	4952      	ldr	r1, [pc, #328]	; (8007230 <tcp_abandon+0x160>)
 80070e8:	4852      	ldr	r0, [pc, #328]	; (8007234 <tcp_abandon+0x164>)
 80070ea:	f008 fc17 	bl	800f91c <iprintf>
 80070ee:	e099      	b.n	8007224 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7d1b      	ldrb	r3, [r3, #20]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d106      	bne.n	8007106 <tcp_abandon+0x36>
 80070f8:	4b4c      	ldr	r3, [pc, #304]	; (800722c <tcp_abandon+0x15c>)
 80070fa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80070fe:	494e      	ldr	r1, [pc, #312]	; (8007238 <tcp_abandon+0x168>)
 8007100:	484c      	ldr	r0, [pc, #304]	; (8007234 <tcp_abandon+0x164>)
 8007102:	f008 fc0b 	bl	800f91c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7d1b      	ldrb	r3, [r3, #20]
 800710a:	2b0a      	cmp	r3, #10
 800710c:	d107      	bne.n	800711e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	484a      	ldr	r0, [pc, #296]	; (800723c <tcp_abandon+0x16c>)
 8007112:	f001 fa69 	bl	80085e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff fdb0 	bl	8006c7c <tcp_free>
 800711c:	e082      	b.n	8007224 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007138:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7d1b      	ldrb	r3, [r3, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d126      	bne.n	8007196 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8adb      	ldrh	r3, [r3, #22]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02e      	beq.n	80071ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007150:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <tcp_abandon+0x170>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	429a      	cmp	r2, r3
 8007158:	d105      	bne.n	8007166 <tcp_abandon+0x96>
 800715a:	4b39      	ldr	r3, [pc, #228]	; (8007240 <tcp_abandon+0x170>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	4a37      	ldr	r2, [pc, #220]	; (8007240 <tcp_abandon+0x170>)
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	e013      	b.n	800718e <tcp_abandon+0xbe>
 8007166:	4b36      	ldr	r3, [pc, #216]	; (8007240 <tcp_abandon+0x170>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	e00c      	b.n	8007188 <tcp_abandon+0xb8>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d104      	bne.n	8007182 <tcp_abandon+0xb2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	60da      	str	r2, [r3, #12]
 8007180:	e005      	b.n	800718e <tcp_abandon+0xbe>
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1ef      	bne.n	800716e <tcp_abandon+0x9e>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e00b      	b.n	80071ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8adb      	ldrh	r3, [r3, #22]
 800719e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	4828      	ldr	r0, [pc, #160]	; (8007244 <tcp_abandon+0x174>)
 80071a4:	f001 fa20 	bl	80085e8 <tcp_pcb_remove>
 80071a8:	4b27      	ldr	r3, [pc, #156]	; (8007248 <tcp_abandon+0x178>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fed6 	bl	8007f6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fecd 	bl	8007f6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fec4 	bl	8007f6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3304      	adds	r3, #4
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	8b12      	ldrh	r2, [r2, #24]
 80071f4:	9202      	str	r2, [sp, #8]
 80071f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80071f8:	9201      	str	r2, [sp, #4]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	460b      	mov	r3, r1
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	69b9      	ldr	r1, [r7, #24]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f005 fbbc 	bl	800c980 <tcp_rst>
    }
    last_state = pcb->state;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7d1b      	ldrb	r3, [r3, #20]
 800720c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff fd34 	bl	8006c7c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <tcp_abandon+0x154>
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f06f 010c 	mvn.w	r1, #12
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	4798      	blx	r3
  }
}
 8007224:	3728      	adds	r7, #40	; 0x28
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	08011a00 	.word	0x08011a00
 8007230:	08011b44 	.word	0x08011b44
 8007234:	08011a44 	.word	0x08011a44
 8007238:	08011b60 	.word	0x08011b60
 800723c:	20006d18 	.word	0x20006d18
 8007240:	20006d14 	.word	0x20006d14
 8007244:	20006d08 	.word	0x20006d08
 8007248:	20006d04 	.word	0x20006d04

0800724c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007254:	2101      	movs	r1, #1
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ff3a 	bl	80070d0 <tcp_abandon>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007272:	2304      	movs	r3, #4
 8007274:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800727c:	4b3e      	ldr	r3, [pc, #248]	; (8007378 <tcp_bind+0x114>)
 800727e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <tcp_bind+0x36>
 8007286:	4b3d      	ldr	r3, [pc, #244]	; (800737c <tcp_bind+0x118>)
 8007288:	f240 22a9 	movw	r2, #681	; 0x2a9
 800728c:	493c      	ldr	r1, [pc, #240]	; (8007380 <tcp_bind+0x11c>)
 800728e:	483d      	ldr	r0, [pc, #244]	; (8007384 <tcp_bind+0x120>)
 8007290:	f008 fb44 	bl	800f91c <iprintf>
 8007294:	f06f 030f 	mvn.w	r3, #15
 8007298:	e06a      	b.n	8007370 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	7d1b      	ldrb	r3, [r3, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <tcp_bind+0x52>
 80072a2:	4b36      	ldr	r3, [pc, #216]	; (800737c <tcp_bind+0x118>)
 80072a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80072a8:	4937      	ldr	r1, [pc, #220]	; (8007388 <tcp_bind+0x124>)
 80072aa:	4836      	ldr	r0, [pc, #216]	; (8007384 <tcp_bind+0x120>)
 80072ac:	f008 fb36 	bl	800f91c <iprintf>
 80072b0:	f06f 0305 	mvn.w	r3, #5
 80072b4:	e05c      	b.n	8007370 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80072bc:	f000 f9f0 	bl	80076a0 <tcp_new_port>
 80072c0:	4603      	mov	r3, r0
 80072c2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d135      	bne.n	8007336 <tcp_bind+0xd2>
      return ERR_BUF;
 80072ca:	f06f 0301 	mvn.w	r3, #1
 80072ce:	e04f      	b.n	8007370 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e02b      	b.n	800732e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80072d6:	4a2d      	ldr	r2, [pc, #180]	; (800738c <tcp_bind+0x128>)
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	e01e      	b.n	8007322 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	8adb      	ldrh	r3, [r3, #22]
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d116      	bne.n	800731c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80072ee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d010      	beq.n	8007316 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00c      	beq.n	8007316 <tcp_bind+0xb2>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007312:	429a      	cmp	r2, r3
 8007314:	d102      	bne.n	800731c <tcp_bind+0xb8>
              return ERR_USE;
 8007316:	f06f 0307 	mvn.w	r3, #7
 800731a:	e029      	b.n	8007370 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1dd      	bne.n	80072e4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	3301      	adds	r3, #1
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	429a      	cmp	r2, r3
 8007334:	dbcf      	blt.n	80072d6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00c      	beq.n	8007356 <tcp_bind+0xf2>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <tcp_bind+0xec>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	e000      	b.n	8007352 <tcp_bind+0xee>
 8007350:	2300      	movs	r3, #0
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	88fa      	ldrh	r2, [r7, #6]
 800735a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <tcp_bind+0x12c>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	60da      	str	r2, [r3, #12]
 8007364:	4a0a      	ldr	r2, [pc, #40]	; (8007390 <tcp_bind+0x12c>)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	f005 fccb 	bl	800cd04 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	08013dc8 	.word	0x08013dc8
 800737c:	08011a00 	.word	0x08011a00
 8007380:	08011b94 	.word	0x08011b94
 8007384:	08011a44 	.word	0x08011a44
 8007388:	08011bac 	.word	0x08011bac
 800738c:	08013da0 	.word	0x08013da0
 8007390:	20006d14 	.word	0x20006d14

08007394 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d106      	bne.n	80073b6 <tcp_accept_null+0x22>
 80073a8:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <tcp_accept_null+0x34>)
 80073aa:	f240 320f 	movw	r2, #783	; 0x30f
 80073ae:	4907      	ldr	r1, [pc, #28]	; (80073cc <tcp_accept_null+0x38>)
 80073b0:	4807      	ldr	r0, [pc, #28]	; (80073d0 <tcp_accept_null+0x3c>)
 80073b2:	f008 fab3 	bl	800f91c <iprintf>

  tcp_abort(pcb);
 80073b6:	68b8      	ldr	r0, [r7, #8]
 80073b8:	f7ff ff48 	bl	800724c <tcp_abort>

  return ERR_ABRT;
 80073bc:	f06f 030c 	mvn.w	r3, #12
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	08011a00 	.word	0x08011a00
 80073cc:	08011bd4 	.word	0x08011bd4
 80073d0:	08011a44 	.word	0x08011a44

080073d4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	2200      	movs	r2, #0
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f806 	bl	80073f8 <tcp_listen_with_backlog_and_err>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	460b      	mov	r3, r1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <tcp_listen_with_backlog_and_err+0x2c>
 8007410:	4b47      	ldr	r3, [pc, #284]	; (8007530 <tcp_listen_with_backlog_and_err+0x138>)
 8007412:	f240 3259 	movw	r2, #857	; 0x359
 8007416:	4947      	ldr	r1, [pc, #284]	; (8007534 <tcp_listen_with_backlog_and_err+0x13c>)
 8007418:	4847      	ldr	r0, [pc, #284]	; (8007538 <tcp_listen_with_backlog_and_err+0x140>)
 800741a:	f008 fa7f 	bl	800f91c <iprintf>
 800741e:	23f0      	movs	r3, #240	; 0xf0
 8007420:	76fb      	strb	r3, [r7, #27]
 8007422:	e079      	b.n	8007518 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	7d1b      	ldrb	r3, [r3, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <tcp_listen_with_backlog_and_err+0x48>
 800742c:	4b40      	ldr	r3, [pc, #256]	; (8007530 <tcp_listen_with_backlog_and_err+0x138>)
 800742e:	f240 325a 	movw	r2, #858	; 0x35a
 8007432:	4942      	ldr	r1, [pc, #264]	; (800753c <tcp_listen_with_backlog_and_err+0x144>)
 8007434:	4840      	ldr	r0, [pc, #256]	; (8007538 <tcp_listen_with_backlog_and_err+0x140>)
 8007436:	f008 fa71 	bl	800f91c <iprintf>
 800743a:	23f1      	movs	r3, #241	; 0xf1
 800743c:	76fb      	strb	r3, [r7, #27]
 800743e:	e06b      	b.n	8007518 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	7d1b      	ldrb	r3, [r3, #20]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d104      	bne.n	8007452 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800744c:	23f7      	movs	r3, #247	; 0xf7
 800744e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007450:	e062      	b.n	8007518 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007452:	2002      	movs	r0, #2
 8007454:	f7fe fb14 	bl	8005a80 <memp_malloc>
 8007458:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007460:	23ff      	movs	r3, #255	; 0xff
 8007462:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007464:	e058      	b.n	8007518 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8ada      	ldrh	r2, [r3, #22]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2201      	movs	r2, #1
 800747a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7d5a      	ldrb	r2, [r3, #21]
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7a5a      	ldrb	r2, [r3, #9]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2200      	movs	r2, #0
 8007490:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	7ada      	ldrb	r2, [r3, #11]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	7a9a      	ldrb	r2, [r3, #10]
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8adb      	ldrh	r3, [r3, #22]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d021      	beq.n	80074f6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80074b2:	4b23      	ldr	r3, [pc, #140]	; (8007540 <tcp_listen_with_backlog_and_err+0x148>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d105      	bne.n	80074c8 <tcp_listen_with_backlog_and_err+0xd0>
 80074bc:	4b20      	ldr	r3, [pc, #128]	; (8007540 <tcp_listen_with_backlog_and_err+0x148>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	4a1f      	ldr	r2, [pc, #124]	; (8007540 <tcp_listen_with_backlog_and_err+0x148>)
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	e013      	b.n	80074f0 <tcp_listen_with_backlog_and_err+0xf8>
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <tcp_listen_with_backlog_and_err+0x148>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e00c      	b.n	80074ea <tcp_listen_with_backlog_and_err+0xf2>
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d104      	bne.n	80074e4 <tcp_listen_with_backlog_and_err+0xec>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e005      	b.n	80074f0 <tcp_listen_with_backlog_and_err+0xf8>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1ef      	bne.n	80074d0 <tcp_listen_with_backlog_and_err+0xd8>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fbc0 	bl	8006c7c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4a11      	ldr	r2, [pc, #68]	; (8007544 <tcp_listen_with_backlog_and_err+0x14c>)
 8007500:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <tcp_listen_with_backlog_and_err+0x150>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	4a0f      	ldr	r2, [pc, #60]	; (8007548 <tcp_listen_with_backlog_and_err+0x150>)
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	f005 fbf8 	bl	800cd04 <tcp_timer_needed>
  res = ERR_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7efa      	ldrb	r2, [r7, #27]
 8007522:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007524:	69fb      	ldr	r3, [r7, #28]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3720      	adds	r7, #32
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	08011a00 	.word	0x08011a00
 8007534:	08011bf4 	.word	0x08011bf4
 8007538:	08011a44 	.word	0x08011a44
 800753c:	08011c24 	.word	0x08011c24
 8007540:	20006d14 	.word	0x20006d14
 8007544:	08007395 	.word	0x08007395
 8007548:	20006d10 	.word	0x20006d10

0800754c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <tcp_update_rcv_ann_wnd+0x1c>
 800755a:	4b25      	ldr	r3, [pc, #148]	; (80075f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800755c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007560:	4924      	ldr	r1, [pc, #144]	; (80075f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007562:	4825      	ldr	r0, [pc, #148]	; (80075f8 <tcp_update_rcv_ann_wnd+0xac>)
 8007564:	f008 f9da 	bl	800f91c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007570:	4413      	add	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800757c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007580:	bf28      	it	cs
 8007582:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007586:	b292      	uxth	r2, r2
 8007588:	4413      	add	r3, r2
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	db08      	blt.n	80075a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	e020      	b.n	80075e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd03      	ble.n	80075ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075b8:	e014      	b.n	80075e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075cc:	d306      	bcc.n	80075dc <tcp_update_rcv_ann_wnd+0x90>
 80075ce:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80075d0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80075d4:	4909      	ldr	r1, [pc, #36]	; (80075fc <tcp_update_rcv_ann_wnd+0xb0>)
 80075d6:	4808      	ldr	r0, [pc, #32]	; (80075f8 <tcp_update_rcv_ann_wnd+0xac>)
 80075d8:	f008 f9a0 	bl	800f91c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80075e4:	2300      	movs	r3, #0
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	08011a00 	.word	0x08011a00
 80075f4:	08011c5c 	.word	0x08011c5c
 80075f8:	08011a44 	.word	0x08011a44
 80075fc:	08011c80 	.word	0x08011c80

08007600 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d107      	bne.n	8007622 <tcp_recved+0x22>
 8007612:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <tcp_recved+0x90>)
 8007614:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007618:	491e      	ldr	r1, [pc, #120]	; (8007694 <tcp_recved+0x94>)
 800761a:	481f      	ldr	r0, [pc, #124]	; (8007698 <tcp_recved+0x98>)
 800761c:	f008 f97e 	bl	800f91c <iprintf>
 8007620:	e032      	b.n	8007688 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7d1b      	ldrb	r3, [r3, #20]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d106      	bne.n	8007638 <tcp_recved+0x38>
 800762a:	4b19      	ldr	r3, [pc, #100]	; (8007690 <tcp_recved+0x90>)
 800762c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007630:	491a      	ldr	r1, [pc, #104]	; (800769c <tcp_recved+0x9c>)
 8007632:	4819      	ldr	r0, [pc, #100]	; (8007698 <tcp_recved+0x98>)
 8007634:	f008 f972 	bl	800f91c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800763c:	887b      	ldrh	r3, [r7, #2]
 800763e:	4413      	add	r3, r2
 8007640:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007642:	89fb      	ldrh	r3, [r7, #14]
 8007644:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007648:	d804      	bhi.n	8007654 <tcp_recved+0x54>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764e:	89fa      	ldrh	r2, [r7, #14]
 8007650:	429a      	cmp	r2, r3
 8007652:	d204      	bcs.n	800765e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800765a:	851a      	strh	r2, [r3, #40]	; 0x28
 800765c:	e002      	b.n	8007664 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	89fa      	ldrh	r2, [r7, #14]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ff71 	bl	800754c <tcp_update_rcv_ann_wnd>
 800766a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007672:	d309      	bcc.n	8007688 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8b5b      	ldrh	r3, [r3, #26]
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f004 fbc8 	bl	800be18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	08011a00 	.word	0x08011a00
 8007694:	08011c9c 	.word	0x08011c9c
 8007698:	08011a44 	.word	0x08011a44
 800769c:	08011cb4 	.word	0x08011cb4

080076a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80076aa:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <tcp_new_port+0x84>)
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	3301      	adds	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <tcp_new_port+0x84>)
 80076b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <tcp_new_port+0x84>)
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076be:	4293      	cmp	r3, r2
 80076c0:	d103      	bne.n	80076ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80076c2:	4b18      	ldr	r3, [pc, #96]	; (8007724 <tcp_new_port+0x84>)
 80076c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80076c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80076ca:	2300      	movs	r3, #0
 80076cc:	71fb      	strb	r3, [r7, #7]
 80076ce:	e01e      	b.n	800770e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <tcp_new_port+0x88>)
 80076d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	e011      	b.n	8007702 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	8ada      	ldrh	r2, [r3, #22]
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <tcp_new_port+0x84>)
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d108      	bne.n	80076fc <tcp_new_port+0x5c>
        n++;
 80076ea:	88bb      	ldrh	r3, [r7, #4]
 80076ec:	3301      	adds	r3, #1
 80076ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80076f0:	88bb      	ldrh	r3, [r7, #4]
 80076f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f6:	d3d8      	bcc.n	80076aa <tcp_new_port+0xa>
          return 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	e00d      	b.n	8007718 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1ea      	bne.n	80076de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	3301      	adds	r3, #1
 800770c:	71fb      	strb	r3, [r7, #7]
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b03      	cmp	r3, #3
 8007712:	d9dd      	bls.n	80076d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <tcp_new_port+0x84>)
 8007716:	881b      	ldrh	r3, [r3, #0]
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	2000001e 	.word	0x2000001e
 8007728:	08013da0 	.word	0x08013da0

0800772c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800772c:	b5b0      	push	{r4, r5, r7, lr}
 800772e:	b090      	sub	sp, #64	; 0x40
 8007730:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007738:	4b94      	ldr	r3, [pc, #592]	; (800798c <tcp_slowtmr+0x260>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	4a93      	ldr	r2, [pc, #588]	; (800798c <tcp_slowtmr+0x260>)
 8007740:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007742:	4b93      	ldr	r3, [pc, #588]	; (8007990 <tcp_slowtmr+0x264>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4b91      	ldr	r3, [pc, #580]	; (8007990 <tcp_slowtmr+0x264>)
 800774c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007752:	4b90      	ldr	r3, [pc, #576]	; (8007994 <tcp_slowtmr+0x268>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007758:	e29f      	b.n	8007c9a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	7d1b      	ldrb	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <tcp_slowtmr+0x44>
 8007762:	4b8d      	ldr	r3, [pc, #564]	; (8007998 <tcp_slowtmr+0x26c>)
 8007764:	f240 42be 	movw	r2, #1214	; 0x4be
 8007768:	498c      	ldr	r1, [pc, #560]	; (800799c <tcp_slowtmr+0x270>)
 800776a:	488d      	ldr	r0, [pc, #564]	; (80079a0 <tcp_slowtmr+0x274>)
 800776c:	f008 f8d6 	bl	800f91c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	7d1b      	ldrb	r3, [r3, #20]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d106      	bne.n	8007786 <tcp_slowtmr+0x5a>
 8007778:	4b87      	ldr	r3, [pc, #540]	; (8007998 <tcp_slowtmr+0x26c>)
 800777a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800777e:	4989      	ldr	r1, [pc, #548]	; (80079a4 <tcp_slowtmr+0x278>)
 8007780:	4887      	ldr	r0, [pc, #540]	; (80079a0 <tcp_slowtmr+0x274>)
 8007782:	f008 f8cb 	bl	800f91c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007788:	7d1b      	ldrb	r3, [r3, #20]
 800778a:	2b0a      	cmp	r3, #10
 800778c:	d106      	bne.n	800779c <tcp_slowtmr+0x70>
 800778e:	4b82      	ldr	r3, [pc, #520]	; (8007998 <tcp_slowtmr+0x26c>)
 8007790:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007794:	4984      	ldr	r1, [pc, #528]	; (80079a8 <tcp_slowtmr+0x27c>)
 8007796:	4882      	ldr	r0, [pc, #520]	; (80079a0 <tcp_slowtmr+0x274>)
 8007798:	f008 f8c0 	bl	800f91c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	7f9a      	ldrb	r2, [r3, #30]
 80077a0:	4b7b      	ldr	r3, [pc, #492]	; (8007990 <tcp_slowtmr+0x264>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d105      	bne.n	80077b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80077b2:	e272      	b.n	8007c9a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80077b4:	4b76      	ldr	r3, [pc, #472]	; (8007990 <tcp_slowtmr+0x264>)
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	7d1b      	ldrb	r3, [r3, #20]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d10a      	bne.n	80077e6 <tcp_slowtmr+0xba>
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d905      	bls.n	80077e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80077da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077de:	3301      	adds	r3, #1
 80077e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077e4:	e11e      	b.n	8007a24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ec:	2b0b      	cmp	r3, #11
 80077ee:	d905      	bls.n	80077fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80077f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f4:	3301      	adds	r3, #1
 80077f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077fa:	e113      	b.n	8007a24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007802:	2b00      	cmp	r3, #0
 8007804:	d075      	beq.n	80078f2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	2b00      	cmp	r3, #0
 800780c:	d006      	beq.n	800781c <tcp_slowtmr+0xf0>
 800780e:	4b62      	ldr	r3, [pc, #392]	; (8007998 <tcp_slowtmr+0x26c>)
 8007810:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007814:	4965      	ldr	r1, [pc, #404]	; (80079ac <tcp_slowtmr+0x280>)
 8007816:	4862      	ldr	r0, [pc, #392]	; (80079a0 <tcp_slowtmr+0x274>)
 8007818:	f008 f880 	bl	800f91c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <tcp_slowtmr+0x106>
 8007824:	4b5c      	ldr	r3, [pc, #368]	; (8007998 <tcp_slowtmr+0x26c>)
 8007826:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800782a:	4961      	ldr	r1, [pc, #388]	; (80079b0 <tcp_slowtmr+0x284>)
 800782c:	485c      	ldr	r0, [pc, #368]	; (80079a0 <tcp_slowtmr+0x274>)
 800782e:	f008 f875 	bl	800f91c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007838:	2b0b      	cmp	r3, #11
 800783a:	d905      	bls.n	8007848 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800783c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007840:	3301      	adds	r3, #1
 8007842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007846:	e0ed      	b.n	8007a24 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800784e:	3b01      	subs	r3, #1
 8007850:	4a58      	ldr	r2, [pc, #352]	; (80079b4 <tcp_slowtmr+0x288>)
 8007852:	5cd3      	ldrb	r3, [r2, r3]
 8007854:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800785c:	7c7a      	ldrb	r2, [r7, #17]
 800785e:	429a      	cmp	r2, r3
 8007860:	d907      	bls.n	8007872 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007868:	3301      	adds	r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007878:	7c7a      	ldrb	r2, [r7, #17]
 800787a:	429a      	cmp	r2, r3
 800787c:	f200 80d2 	bhi.w	8007a24 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007880:	2301      	movs	r3, #1
 8007882:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800788a:	2b00      	cmp	r3, #0
 800788c:	d108      	bne.n	80078a0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800788e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007890:	f005 f96a 	bl	800cb68 <tcp_zero_window_probe>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d014      	beq.n	80078c4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800789a:	2300      	movs	r3, #0
 800789c:	623b      	str	r3, [r7, #32]
 800789e:	e011      	b.n	80078c4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078a6:	4619      	mov	r1, r3
 80078a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078aa:	f004 f82f 	bl	800b90c <tcp_split_unsent_seg>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d107      	bne.n	80078c4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80078b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b6:	f004 faaf 	bl	800be18 <tcp_output>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80ac 	beq.w	8007a24 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80078da:	2b06      	cmp	r3, #6
 80078dc:	f200 80a2 	bhi.w	8007a24 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80078e6:	3301      	adds	r3, #1
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80078f0:	e098      	b.n	8007a24 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	db0f      	blt.n	800791c <tcp_slowtmr+0x1f0>
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007902:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007906:	4293      	cmp	r3, r2
 8007908:	d008      	beq.n	800791c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007910:	b29b      	uxth	r3, r3
 8007912:	3301      	adds	r3, #1
 8007914:	b29b      	uxth	r3, r3
 8007916:	b21a      	sxth	r2, r3
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007928:	429a      	cmp	r2, r3
 800792a:	db7b      	blt.n	8007a24 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800792c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800792e:	f004 fd65 	bl	800c3fc <tcp_rexmit_rto_prepare>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <tcp_slowtmr+0x21c>
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	2b00      	cmp	r3, #0
 800793e:	d171      	bne.n	8007a24 <tcp_slowtmr+0x2f8>
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d06d      	beq.n	8007a24 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	7d1b      	ldrb	r3, [r3, #20]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d03a      	beq.n	80079c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007956:	2b0c      	cmp	r3, #12
 8007958:	bf28      	it	cs
 800795a:	230c      	movcs	r3, #12
 800795c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007964:	10db      	asrs	r3, r3, #3
 8007966:	b21b      	sxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007970:	4413      	add	r3, r2
 8007972:	7efa      	ldrb	r2, [r7, #27]
 8007974:	4910      	ldr	r1, [pc, #64]	; (80079b8 <tcp_slowtmr+0x28c>)
 8007976:	5c8a      	ldrb	r2, [r1, r2]
 8007978:	4093      	lsls	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007982:	4293      	cmp	r3, r2
 8007984:	dc1a      	bgt.n	80079bc <tcp_slowtmr+0x290>
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	b21a      	sxth	r2, r3
 800798a:	e019      	b.n	80079c0 <tcp_slowtmr+0x294>
 800798c:	20006d0c 	.word	0x20006d0c
 8007990:	2000053e 	.word	0x2000053e
 8007994:	20006d08 	.word	0x20006d08
 8007998:	08011a00 	.word	0x08011a00
 800799c:	08011d44 	.word	0x08011d44
 80079a0:	08011a44 	.word	0x08011a44
 80079a4:	08011d70 	.word	0x08011d70
 80079a8:	08011d9c 	.word	0x08011d9c
 80079ac:	08011dcc 	.word	0x08011dcc
 80079b0:	08011e00 	.word	0x08011e00
 80079b4:	08013d98 	.word	0x08013d98
 80079b8:	08013d88 	.word	0x08013d88
 80079bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	2200      	movs	r2, #0
 80079ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80079d8:	4293      	cmp	r3, r2
 80079da:	bf28      	it	cs
 80079dc:	4613      	movcs	r3, r2
 80079de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80079e0:	8a7b      	ldrh	r3, [r7, #18]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d206      	bcs.n	8007a0c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a20:	f004 fd5c 	bl	800c4dc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	7d1b      	ldrb	r3, [r3, #20]
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d111      	bne.n	8007a50 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	8b5b      	ldrh	r3, [r3, #26]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a38:	4b9d      	ldr	r3, [pc, #628]	; (8007cb0 <tcp_slowtmr+0x584>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b28      	cmp	r3, #40	; 0x28
 8007a44:	d904      	bls.n	8007a50 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	7a5b      	ldrb	r3, [r3, #9]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d04c      	beq.n	8007af6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d003      	beq.n	8007a6c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007a68:	2b07      	cmp	r3, #7
 8007a6a:	d144      	bne.n	8007af6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a6c:	4b90      	ldr	r3, [pc, #576]	; (8007cb0 <tcp_slowtmr+0x584>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a7c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007a80:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007a84:	498b      	ldr	r1, [pc, #556]	; (8007cb4 <tcp_slowtmr+0x588>)
 8007a86:	fba1 1303 	umull	r1, r3, r1, r3
 8007a8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d90a      	bls.n	8007aa6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a94:	3301      	adds	r3, #1
 8007a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007aa4:	e027      	b.n	8007af6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007aa6:	4b82      	ldr	r3, [pc, #520]	; (8007cb0 <tcp_slowtmr+0x584>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007abc:	4618      	mov	r0, r3
 8007abe:	4b7e      	ldr	r3, [pc, #504]	; (8007cb8 <tcp_slowtmr+0x58c>)
 8007ac0:	fb03 f300 	mul.w	r3, r3, r0
 8007ac4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007ac6:	497b      	ldr	r1, [pc, #492]	; (8007cb4 <tcp_slowtmr+0x588>)
 8007ac8:	fba1 1303 	umull	r1, r3, r1, r3
 8007acc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d911      	bls.n	8007af6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad4:	f005 f808 	bl	800cae8 <tcp_keepalive>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007ade:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007aec:	3301      	adds	r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d011      	beq.n	8007b22 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007afe:	4b6c      	ldr	r3, [pc, #432]	; (8007cb0 <tcp_slowtmr+0x584>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	1ad2      	subs	r2, r2, r3
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007b0e:	4619      	mov	r1, r3
 8007b10:	460b      	mov	r3, r1
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	440b      	add	r3, r1
 8007b16:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d302      	bcc.n	8007b22 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b1e:	f000 fec7 	bl	80088b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	7d1b      	ldrb	r3, [r3, #20]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d10b      	bne.n	8007b42 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b2a:	4b61      	ldr	r3, [pc, #388]	; (8007cb0 <tcp_slowtmr+0x584>)
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b28      	cmp	r3, #40	; 0x28
 8007b36:	d904      	bls.n	8007b42 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	7d1b      	ldrb	r3, [r3, #20]
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d10b      	bne.n	8007b62 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007b4a:	4b59      	ldr	r3, [pc, #356]	; (8007cb0 <tcp_slowtmr+0x584>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2bf0      	cmp	r3, #240	; 0xf0
 8007b56:	d904      	bls.n	8007b62 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d060      	beq.n	8007c2c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007b72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b74:	f000 fce8 	bl	8008548 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d010      	beq.n	8007ba0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007b7e:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <tcp_slowtmr+0x590>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d106      	bne.n	8007b96 <tcp_slowtmr+0x46a>
 8007b88:	4b4d      	ldr	r3, [pc, #308]	; (8007cc0 <tcp_slowtmr+0x594>)
 8007b8a:	f240 526d 	movw	r2, #1389	; 0x56d
 8007b8e:	494d      	ldr	r1, [pc, #308]	; (8007cc4 <tcp_slowtmr+0x598>)
 8007b90:	484d      	ldr	r0, [pc, #308]	; (8007cc8 <tcp_slowtmr+0x59c>)
 8007b92:	f007 fec3 	bl	800f91c <iprintf>
        prev->next = pcb->next;
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e00f      	b.n	8007bc0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007ba0:	4b46      	ldr	r3, [pc, #280]	; (8007cbc <tcp_slowtmr+0x590>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d006      	beq.n	8007bb8 <tcp_slowtmr+0x48c>
 8007baa:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <tcp_slowtmr+0x594>)
 8007bac:	f240 5271 	movw	r2, #1393	; 0x571
 8007bb0:	4946      	ldr	r1, [pc, #280]	; (8007ccc <tcp_slowtmr+0x5a0>)
 8007bb2:	4845      	ldr	r0, [pc, #276]	; (8007cc8 <tcp_slowtmr+0x59c>)
 8007bb4:	f007 feb2 	bl	800f91c <iprintf>
        tcp_active_pcbs = pcb->next;
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4a3f      	ldr	r2, [pc, #252]	; (8007cbc <tcp_slowtmr+0x590>)
 8007bbe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d013      	beq.n	8007bf0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007bd0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd8:	8ad2      	ldrh	r2, [r2, #22]
 8007bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bdc:	8b09      	ldrh	r1, [r1, #24]
 8007bde:	9102      	str	r1, [sp, #8]
 8007be0:	9201      	str	r2, [sp, #4]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	462b      	mov	r3, r5
 8007be6:	4622      	mov	r2, r4
 8007be8:	4601      	mov	r1, r0
 8007bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bec:	f004 fec8 	bl	800c980 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	7d1b      	ldrb	r3, [r3, #20]
 8007bfa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007c06:	6838      	ldr	r0, [r7, #0]
 8007c08:	f7ff f838 	bl	8006c7c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007c0c:	4b30      	ldr	r3, [pc, #192]	; (8007cd0 <tcp_slowtmr+0x5a4>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <tcp_slowtmr+0x4f6>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f06f 010c 	mvn.w	r1, #12
 8007c1e:	68b8      	ldr	r0, [r7, #8]
 8007c20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007c22:	4b2b      	ldr	r3, [pc, #172]	; (8007cd0 <tcp_slowtmr+0x5a4>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d037      	beq.n	8007c9a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007c2a:	e590      	b.n	800774e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	7f1b      	ldrb	r3, [r3, #28]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	7f1a      	ldrb	r2, [r3, #28]
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	7f5b      	ldrb	r3, [r3, #29]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d325      	bcc.n	8007c9a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007c54:	4b1e      	ldr	r3, [pc, #120]	; (8007cd0 <tcp_slowtmr+0x5a4>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <tcp_slowtmr+0x550>
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c6c:	6912      	ldr	r2, [r2, #16]
 8007c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007c7a:	e002      	b.n	8007c82 <tcp_slowtmr+0x556>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <tcp_slowtmr+0x5a4>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d000      	beq.n	8007c8c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007c8a:	e560      	b.n	800774e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007c8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c96:	f004 f8bf 	bl	800be18 <tcp_output>
  while (pcb != NULL) {
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f47f ad5c 	bne.w	800775a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <tcp_slowtmr+0x5a8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007cac:	e067      	b.n	8007d7e <tcp_slowtmr+0x652>
 8007cae:	bf00      	nop
 8007cb0:	20006d0c 	.word	0x20006d0c
 8007cb4:	10624dd3 	.word	0x10624dd3
 8007cb8:	000124f8 	.word	0x000124f8
 8007cbc:	20006d08 	.word	0x20006d08
 8007cc0:	08011a00 	.word	0x08011a00
 8007cc4:	08011e38 	.word	0x08011e38
 8007cc8:	08011a44 	.word	0x08011a44
 8007ccc:	08011e64 	.word	0x08011e64
 8007cd0:	20006d04 	.word	0x20006d04
 8007cd4:	20006d18 	.word	0x20006d18
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	7d1b      	ldrb	r3, [r3, #20]
 8007cdc:	2b0a      	cmp	r3, #10
 8007cde:	d006      	beq.n	8007cee <tcp_slowtmr+0x5c2>
 8007ce0:	4b2b      	ldr	r3, [pc, #172]	; (8007d90 <tcp_slowtmr+0x664>)
 8007ce2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007ce6:	492b      	ldr	r1, [pc, #172]	; (8007d94 <tcp_slowtmr+0x668>)
 8007ce8:	482b      	ldr	r0, [pc, #172]	; (8007d98 <tcp_slowtmr+0x66c>)
 8007cea:	f007 fe17 	bl	800f91c <iprintf>
    pcb_remove = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007cf4:	4b29      	ldr	r3, [pc, #164]	; (8007d9c <tcp_slowtmr+0x670>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2bf0      	cmp	r3, #240	; 0xf0
 8007d00:	d904      	bls.n	8007d0c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d06:	3301      	adds	r3, #1
 8007d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02f      	beq.n	8007d74 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d16:	f000 fc17 	bl	8008548 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d010      	beq.n	8007d42 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007d20:	4b1f      	ldr	r3, [pc, #124]	; (8007da0 <tcp_slowtmr+0x674>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d106      	bne.n	8007d38 <tcp_slowtmr+0x60c>
 8007d2a:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <tcp_slowtmr+0x664>)
 8007d2c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007d30:	491c      	ldr	r1, [pc, #112]	; (8007da4 <tcp_slowtmr+0x678>)
 8007d32:	4819      	ldr	r0, [pc, #100]	; (8007d98 <tcp_slowtmr+0x66c>)
 8007d34:	f007 fdf2 	bl	800f91c <iprintf>
        prev->next = pcb->next;
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	60da      	str	r2, [r3, #12]
 8007d40:	e00f      	b.n	8007d62 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <tcp_slowtmr+0x674>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d006      	beq.n	8007d5a <tcp_slowtmr+0x62e>
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <tcp_slowtmr+0x664>)
 8007d4e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007d52:	4915      	ldr	r1, [pc, #84]	; (8007da8 <tcp_slowtmr+0x67c>)
 8007d54:	4810      	ldr	r0, [pc, #64]	; (8007d98 <tcp_slowtmr+0x66c>)
 8007d56:	f007 fde1 	bl	800f91c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <tcp_slowtmr+0x674>)
 8007d60:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007d6c:	69f8      	ldr	r0, [r7, #28]
 8007d6e:	f7fe ff85 	bl	8006c7c <tcp_free>
 8007d72:	e004      	b.n	8007d7e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1a9      	bne.n	8007cd8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	3730      	adds	r7, #48	; 0x30
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	08011a00 	.word	0x08011a00
 8007d94:	08011e90 	.word	0x08011e90
 8007d98:	08011a44 	.word	0x08011a44
 8007d9c:	20006d0c 	.word	0x20006d0c
 8007da0:	20006d18 	.word	0x20006d18
 8007da4:	08011ec0 	.word	0x08011ec0
 8007da8:	08011ee8 	.word	0x08011ee8

08007dac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007db2:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <tcp_fasttmr+0xbc>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	4b2b      	ldr	r3, [pc, #172]	; (8007e68 <tcp_fasttmr+0xbc>)
 8007dbc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007dbe:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <tcp_fasttmr+0xc0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007dc4:	e048      	b.n	8007e58 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	7f9a      	ldrb	r2, [r3, #30]
 8007dca:	4b27      	ldr	r3, [pc, #156]	; (8007e68 <tcp_fasttmr+0xbc>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d03f      	beq.n	8007e52 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007dd2:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <tcp_fasttmr+0xbc>)
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	8b5b      	ldrh	r3, [r3, #26]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d010      	beq.n	8007e08 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8b5b      	ldrh	r3, [r3, #26]
 8007dea:	f043 0302 	orr.w	r3, r3, #2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f004 f80f 	bl	800be18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8b5b      	ldrh	r3, [r3, #26]
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8b5b      	ldrh	r3, [r3, #26]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8b5b      	ldrh	r3, [r3, #26]
 8007e18:	f023 0308 	bic.w	r3, r3, #8
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff f8be 	bl	8006fa4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <tcp_fasttmr+0xc4>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f819 	bl	8007e74 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007e42:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <tcp_fasttmr+0xc4>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d000      	beq.n	8007e4c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007e4a:	e7b8      	b.n	8007dbe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	607b      	str	r3, [r7, #4]
 8007e50:	e002      	b.n	8007e58 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1b3      	bne.n	8007dc6 <tcp_fasttmr+0x1a>
    }
  }
}
 8007e5e:	bf00      	nop
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	2000053e 	.word	0x2000053e
 8007e6c:	20006d08 	.word	0x20006d08
 8007e70:	20006d04 	.word	0x20006d04

08007e74 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007e74:	b590      	push	{r4, r7, lr}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <tcp_process_refused_data+0x22>
 8007e82:	4b37      	ldr	r3, [pc, #220]	; (8007f60 <tcp_process_refused_data+0xec>)
 8007e84:	f240 6209 	movw	r2, #1545	; 0x609
 8007e88:	4936      	ldr	r1, [pc, #216]	; (8007f64 <tcp_process_refused_data+0xf0>)
 8007e8a:	4837      	ldr	r0, [pc, #220]	; (8007f68 <tcp_process_refused_data+0xf4>)
 8007e8c:	f007 fd46 	bl	800f91c <iprintf>
 8007e90:	f06f 030f 	mvn.w	r3, #15
 8007e94:	e060      	b.n	8007f58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e9a:	7b5b      	ldrb	r3, [r3, #13]
 8007e9c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ea2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <tcp_process_refused_data+0x58>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6918      	ldr	r0, [r3, #16]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	47a0      	blx	r4
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73fb      	strb	r3, [r7, #15]
 8007eca:	e007      	b.n	8007edc <tcp_process_refused_data+0x68>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	f000 f8c2 	bl	800805c <tcp_recv_null>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d12a      	bne.n	8007f3a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d033      	beq.n	8007f56 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ef6:	d005      	beq.n	8007f04 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efc:	3301      	adds	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00b      	beq.n	8007f26 <tcp_process_refused_data+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6918      	ldr	r0, [r3, #16]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	6879      	ldr	r1, [r7, #4]
 8007f1e:	47a0      	blx	r4
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
 8007f24:	e001      	b.n	8007f2a <tcp_process_refused_data+0xb6>
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f2e:	f113 0f0d 	cmn.w	r3, #13
 8007f32:	d110      	bne.n	8007f56 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007f34:	f06f 030c 	mvn.w	r3, #12
 8007f38:	e00e      	b.n	8007f58 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f3e:	f113 0f0d 	cmn.w	r3, #13
 8007f42:	d102      	bne.n	8007f4a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007f44:	f06f 030c 	mvn.w	r3, #12
 8007f48:	e006      	b.n	8007f58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007f50:	f06f 0304 	mvn.w	r3, #4
 8007f54:	e000      	b.n	8007f58 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}
 8007f60:	08011a00 	.word	0x08011a00
 8007f64:	08011f10 	.word	0x08011f10
 8007f68:	08011a44 	.word	0x08011a44

08007f6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007f74:	e007      	b.n	8007f86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f80a 	bl	8007f96 <tcp_seg_free>
    seg = next;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f4      	bne.n	8007f76 <tcp_segs_free+0xa>
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00c      	beq.n	8007fbe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fbc3 	bl	800673c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	2003      	movs	r0, #3
 8007fba:	f7fd fdad 	bl	8005b18 <memp_free>
  }
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d107      	bne.n	8007fea <tcp_setprio+0x22>
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <tcp_setprio+0x30>)
 8007fdc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007fe0:	4906      	ldr	r1, [pc, #24]	; (8007ffc <tcp_setprio+0x34>)
 8007fe2:	4807      	ldr	r0, [pc, #28]	; (8008000 <tcp_setprio+0x38>)
 8007fe4:	f007 fc9a 	bl	800f91c <iprintf>
 8007fe8:	e002      	b.n	8007ff0 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	78fa      	ldrb	r2, [r7, #3]
 8007fee:	755a      	strb	r2, [r3, #21]
}
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	08011a00 	.word	0x08011a00
 8007ffc:	08011f38 	.word	0x08011f38
 8008000:	08011a44 	.word	0x08011a44

08008004 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <tcp_seg_copy+0x1c>
 8008012:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <tcp_seg_copy+0x4c>)
 8008014:	f240 6282 	movw	r2, #1666	; 0x682
 8008018:	490e      	ldr	r1, [pc, #56]	; (8008054 <tcp_seg_copy+0x50>)
 800801a:	480f      	ldr	r0, [pc, #60]	; (8008058 <tcp_seg_copy+0x54>)
 800801c:	f007 fc7e 	bl	800f91c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008020:	2003      	movs	r0, #3
 8008022:	f7fd fd2d 	bl	8005a80 <memp_malloc>
 8008026:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <tcp_seg_copy+0x2e>
    return NULL;
 800802e:	2300      	movs	r3, #0
 8008030:	e00a      	b.n	8008048 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008032:	2210      	movs	r2, #16
 8008034:	6879      	ldr	r1, [r7, #4]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f007 fc5a 	bl	800f8f0 <memcpy>
  pbuf_ref(cseg->p);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe fc1b 	bl	800687c <pbuf_ref>
  return cseg;
 8008046:	68fb      	ldr	r3, [r7, #12]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	08011a00 	.word	0x08011a00
 8008054:	08011f54 	.word	0x08011f54
 8008058:	08011a44 	.word	0x08011a44

0800805c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <tcp_recv_null+0x28>
 8008070:	4b12      	ldr	r3, [pc, #72]	; (80080bc <tcp_recv_null+0x60>)
 8008072:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008076:	4912      	ldr	r1, [pc, #72]	; (80080c0 <tcp_recv_null+0x64>)
 8008078:	4812      	ldr	r0, [pc, #72]	; (80080c4 <tcp_recv_null+0x68>)
 800807a:	f007 fc4f 	bl	800f91c <iprintf>
 800807e:	f06f 030f 	mvn.w	r3, #15
 8008082:	e016      	b.n	80080b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	891b      	ldrh	r3, [r3, #8]
 800808e:	4619      	mov	r1, r3
 8008090:	68b8      	ldr	r0, [r7, #8]
 8008092:	f7ff fab5 	bl	8007600 <tcp_recved>
    pbuf_free(p);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fe fb50 	bl	800673c <pbuf_free>
 800809c:	e008      	b.n	80080b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800809e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80080a6:	68b8      	ldr	r0, [r7, #8]
 80080a8:	f7fe ffe6 	bl	8007078 <tcp_close>
 80080ac:	4603      	mov	r3, r0
 80080ae:	e000      	b.n	80080b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	08011a00 	.word	0x08011a00
 80080c0:	08011f70 	.word	0x08011f70
 80080c4:	08011a44 	.word	0x08011a44

080080c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80080d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	db01      	blt.n	80080de <tcp_kill_prio+0x16>
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	e000      	b.n	80080e0 <tcp_kill_prio+0x18>
 80080de:	237f      	movs	r3, #127	; 0x7f
 80080e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d034      	beq.n	8008152 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80080e8:	7afb      	ldrb	r3, [r7, #11]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080f6:	4b19      	ldr	r3, [pc, #100]	; (800815c <tcp_kill_prio+0x94>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e01f      	b.n	800813e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	7d5b      	ldrb	r3, [r3, #21]
 8008102:	7afa      	ldrb	r2, [r7, #11]
 8008104:	429a      	cmp	r2, r3
 8008106:	d80c      	bhi.n	8008122 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800810c:	7afa      	ldrb	r2, [r7, #11]
 800810e:	429a      	cmp	r2, r3
 8008110:	d112      	bne.n	8008138 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008112:	4b13      	ldr	r3, [pc, #76]	; (8008160 <tcp_kill_prio+0x98>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	429a      	cmp	r2, r3
 8008120:	d80a      	bhi.n	8008138 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <tcp_kill_prio+0x98>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	7d5b      	ldrb	r3, [r3, #21]
 8008136:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1dc      	bne.n	80080fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800814a:	6938      	ldr	r0, [r7, #16]
 800814c:	f7ff f87e 	bl	800724c <tcp_abort>
 8008150:	e000      	b.n	8008154 <tcp_kill_prio+0x8c>
    return;
 8008152:	bf00      	nop
  }
}
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20006d08 	.word	0x20006d08
 8008160:	20006d0c 	.word	0x20006d0c

08008164 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	2b08      	cmp	r3, #8
 8008172:	d009      	beq.n	8008188 <tcp_kill_state+0x24>
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	2b09      	cmp	r3, #9
 8008178:	d006      	beq.n	8008188 <tcp_kill_state+0x24>
 800817a:	4b1a      	ldr	r3, [pc, #104]	; (80081e4 <tcp_kill_state+0x80>)
 800817c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008180:	4919      	ldr	r1, [pc, #100]	; (80081e8 <tcp_kill_state+0x84>)
 8008182:	481a      	ldr	r0, [pc, #104]	; (80081ec <tcp_kill_state+0x88>)
 8008184:	f007 fbca 	bl	800f91c <iprintf>

  inactivity = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800818c:	2300      	movs	r3, #0
 800818e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <tcp_kill_state+0x8c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	617b      	str	r3, [r7, #20]
 8008196:	e017      	b.n	80081c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	7d1b      	ldrb	r3, [r3, #20]
 800819c:	79fa      	ldrb	r2, [r7, #7]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d10f      	bne.n	80081c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <tcp_kill_state+0x90>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d807      	bhi.n	80081c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80081b2:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <tcp_kill_state+0x90>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e4      	bne.n	8008198 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80081d4:	2100      	movs	r1, #0
 80081d6:	6938      	ldr	r0, [r7, #16]
 80081d8:	f7fe ff7a 	bl	80070d0 <tcp_abandon>
  }
}
 80081dc:	bf00      	nop
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	08011a00 	.word	0x08011a00
 80081e8:	08011f8c 	.word	0x08011f8c
 80081ec:	08011a44 	.word	0x08011a44
 80081f0:	20006d08 	.word	0x20006d08
 80081f4:	20006d0c 	.word	0x20006d0c

080081f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008206:	4b12      	ldr	r3, [pc, #72]	; (8008250 <tcp_kill_timewait+0x58>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e012      	b.n	8008234 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800820e:	4b11      	ldr	r3, [pc, #68]	; (8008254 <tcp_kill_timewait+0x5c>)
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d807      	bhi.n	800822e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <tcp_kill_timewait+0x5c>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e9      	bne.n	800820e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008240:	68b8      	ldr	r0, [r7, #8]
 8008242:	f7ff f803 	bl	800724c <tcp_abort>
  }
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20006d18 	.word	0x20006d18
 8008254:	20006d0c 	.word	0x20006d0c

08008258 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800825e:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <tcp_handle_closepend+0x48>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008264:	e014      	b.n	8008290 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8b5b      	ldrh	r3, [r3, #26]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8b5b      	ldrh	r3, [r3, #26]
 800827c:	f023 0308 	bic.w	r3, r3, #8
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7fe fe8c 	bl	8006fa4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e7      	bne.n	8008266 <tcp_handle_closepend+0xe>
  }
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20006d08 	.word	0x20006d08

080082a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082ae:	2001      	movs	r0, #1
 80082b0:	f7fd fbe6 	bl	8005a80 <memp_malloc>
 80082b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d126      	bne.n	800830a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80082bc:	f7ff ffcc 	bl	8008258 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80082c0:	f7ff ff9a 	bl	80081f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082c4:	2001      	movs	r0, #1
 80082c6:	f7fd fbdb 	bl	8005a80 <memp_malloc>
 80082ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d11b      	bne.n	800830a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80082d2:	2009      	movs	r0, #9
 80082d4:	f7ff ff46 	bl	8008164 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082d8:	2001      	movs	r0, #1
 80082da:	f7fd fbd1 	bl	8005a80 <memp_malloc>
 80082de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d111      	bne.n	800830a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80082e6:	2008      	movs	r0, #8
 80082e8:	f7ff ff3c 	bl	8008164 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082ec:	2001      	movs	r0, #1
 80082ee:	f7fd fbc7 	bl	8005a80 <memp_malloc>
 80082f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d107      	bne.n	800830a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff fee3 	bl	80080c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008302:	2001      	movs	r0, #1
 8008304:	f7fd fbbc 	bl	8005a80 <memp_malloc>
 8008308:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d03f      	beq.n	8008390 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008310:	229c      	movs	r2, #156	; 0x9c
 8008312:	2100      	movs	r1, #0
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f007 faf9 	bl	800f90c <memset>
    pcb->prio = prio;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	79fa      	ldrb	r2, [r7, #7]
 800831e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008326:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008330:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	22ff      	movs	r2, #255	; 0xff
 800833e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008346:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2206      	movs	r2, #6
 800834c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2206      	movs	r2, #6
 8008354:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800835c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008366:	4b0d      	ldr	r3, [pc, #52]	; (800839c <tcp_alloc+0xf8>)
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <tcp_alloc+0xfc>)
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800837c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4a08      	ldr	r2, [pc, #32]	; (80083a4 <tcp_alloc+0x100>)
 8008384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <tcp_alloc+0x104>)
 800838c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008390:	68fb      	ldr	r3, [r7, #12]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20006d0c 	.word	0x20006d0c
 80083a0:	2000053e 	.word	0x2000053e
 80083a4:	0800805d 	.word	0x0800805d
 80083a8:	006ddd00 	.word	0x006ddd00

080083ac <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80083b6:	2040      	movs	r0, #64	; 0x40
 80083b8:	f7ff ff74 	bl	80082a4 <tcp_alloc>
 80083bc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	611a      	str	r2, [r3, #16]
  }
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7d1b      	ldrb	r3, [r3, #20]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d106      	bne.n	8008412 <tcp_recv+0x26>
 8008404:	4b07      	ldr	r3, [pc, #28]	; (8008424 <tcp_recv+0x38>)
 8008406:	f240 72df 	movw	r2, #2015	; 0x7df
 800840a:	4907      	ldr	r1, [pc, #28]	; (8008428 <tcp_recv+0x3c>)
 800840c:	4807      	ldr	r0, [pc, #28]	; (800842c <tcp_recv+0x40>)
 800840e:	f007 fa85 	bl	800f91c <iprintf>
    pcb->recv = recv;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	08011a00 	.word	0x08011a00
 8008428:	08011f9c 	.word	0x08011f9c
 800842c:	08011a44 	.word	0x08011a44

08008430 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00e      	beq.n	800845e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7d1b      	ldrb	r3, [r3, #20]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d106      	bne.n	8008456 <tcp_sent+0x26>
 8008448:	4b07      	ldr	r3, [pc, #28]	; (8008468 <tcp_sent+0x38>)
 800844a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800844e:	4907      	ldr	r1, [pc, #28]	; (800846c <tcp_sent+0x3c>)
 8008450:	4807      	ldr	r0, [pc, #28]	; (8008470 <tcp_sent+0x40>)
 8008452:	f007 fa63 	bl	800f91c <iprintf>
    pcb->sent = sent;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800845e:	bf00      	nop
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	08011a00 	.word	0x08011a00
 800846c:	08011fc4 	.word	0x08011fc4
 8008470:	08011a44 	.word	0x08011a44

08008474 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00e      	beq.n	80084a2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	7d1b      	ldrb	r3, [r3, #20]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d106      	bne.n	800849a <tcp_err+0x26>
 800848c:	4b07      	ldr	r3, [pc, #28]	; (80084ac <tcp_err+0x38>)
 800848e:	f640 020d 	movw	r2, #2061	; 0x80d
 8008492:	4907      	ldr	r1, [pc, #28]	; (80084b0 <tcp_err+0x3c>)
 8008494:	4807      	ldr	r0, [pc, #28]	; (80084b4 <tcp_err+0x40>)
 8008496:	f007 fa41 	bl	800f91c <iprintf>
    pcb->errf = err;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	08011a00 	.word	0x08011a00
 80084b0:	08011fec 	.word	0x08011fec
 80084b4:	08011a44 	.word	0x08011a44

080084b8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d008      	beq.n	80084da <tcp_accept+0x22>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7d1b      	ldrb	r3, [r3, #20]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d104      	bne.n	80084da <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	619a      	str	r2, [r3, #24]
  }
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <tcp_poll+0x24>
 80084fc:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <tcp_poll+0x50>)
 80084fe:	f640 023d 	movw	r2, #2109	; 0x83d
 8008502:	490e      	ldr	r1, [pc, #56]	; (800853c <tcp_poll+0x54>)
 8008504:	480e      	ldr	r0, [pc, #56]	; (8008540 <tcp_poll+0x58>)
 8008506:	f007 fa09 	bl	800f91c <iprintf>
 800850a:	e011      	b.n	8008530 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	7d1b      	ldrb	r3, [r3, #20]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d106      	bne.n	8008522 <tcp_poll+0x3a>
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <tcp_poll+0x50>)
 8008516:	f640 023e 	movw	r2, #2110	; 0x83e
 800851a:	490a      	ldr	r1, [pc, #40]	; (8008544 <tcp_poll+0x5c>)
 800851c:	4808      	ldr	r0, [pc, #32]	; (8008540 <tcp_poll+0x58>)
 800851e:	f007 f9fd 	bl	800f91c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	79fa      	ldrb	r2, [r7, #7]
 800852e:	775a      	strb	r2, [r3, #29]
}
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	08011a00 	.word	0x08011a00
 800853c:	08012014 	.word	0x08012014
 8008540:	08011a44 	.word	0x08011a44
 8008544:	0801202c 	.word	0x0801202c

08008548 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <tcp_pcb_purge+0x1e>
 8008556:	4b21      	ldr	r3, [pc, #132]	; (80085dc <tcp_pcb_purge+0x94>)
 8008558:	f640 0251 	movw	r2, #2129	; 0x851
 800855c:	4920      	ldr	r1, [pc, #128]	; (80085e0 <tcp_pcb_purge+0x98>)
 800855e:	4821      	ldr	r0, [pc, #132]	; (80085e4 <tcp_pcb_purge+0x9c>)
 8008560:	f007 f9dc 	bl	800f91c <iprintf>
 8008564:	e037      	b.n	80085d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	7d1b      	ldrb	r3, [r3, #20]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d033      	beq.n	80085d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008572:	2b0a      	cmp	r3, #10
 8008574:	d02f      	beq.n	80085d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800857a:	2b01      	cmp	r3, #1
 800857c:	d02b      	beq.n	80085d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008582:	2b00      	cmp	r3, #0
 8008584:	d007      	beq.n	8008596 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe f8d6 	bl	800673c <pbuf_free>
      pcb->refused_data = NULL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f986 	bl	80088b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fcdb 	bl	8007f6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff fcd6 	bl	8007f6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	08011a00 	.word	0x08011a00
 80085e0:	0801204c 	.word	0x0801204c
 80085e4:	08011a44 	.word	0x08011a44

080085e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <tcp_pcb_remove+0x1e>
 80085f8:	4b3e      	ldr	r3, [pc, #248]	; (80086f4 <tcp_pcb_remove+0x10c>)
 80085fa:	f640 0283 	movw	r2, #2179	; 0x883
 80085fe:	493e      	ldr	r1, [pc, #248]	; (80086f8 <tcp_pcb_remove+0x110>)
 8008600:	483e      	ldr	r0, [pc, #248]	; (80086fc <tcp_pcb_remove+0x114>)
 8008602:	f007 f98b 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d106      	bne.n	800861a <tcp_pcb_remove+0x32>
 800860c:	4b39      	ldr	r3, [pc, #228]	; (80086f4 <tcp_pcb_remove+0x10c>)
 800860e:	f640 0284 	movw	r2, #2180	; 0x884
 8008612:	493b      	ldr	r1, [pc, #236]	; (8008700 <tcp_pcb_remove+0x118>)
 8008614:	4839      	ldr	r0, [pc, #228]	; (80086fc <tcp_pcb_remove+0x114>)
 8008616:	f007 f981 	bl	800f91c <iprintf>

  TCP_RMV(pcblist, pcb);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d105      	bne.n	8008630 <tcp_pcb_remove+0x48>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e013      	b.n	8008658 <tcp_pcb_remove+0x70>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	e00c      	b.n	8008652 <tcp_pcb_remove+0x6a>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d104      	bne.n	800864c <tcp_pcb_remove+0x64>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	60da      	str	r2, [r3, #12]
 800864a:	e005      	b.n	8008658 <tcp_pcb_remove+0x70>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1ef      	bne.n	8008638 <tcp_pcb_remove+0x50>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	2200      	movs	r2, #0
 800865c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800865e:	6838      	ldr	r0, [r7, #0]
 8008660:	f7ff ff72 	bl	8008548 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	7d1b      	ldrb	r3, [r3, #20]
 8008668:	2b0a      	cmp	r3, #10
 800866a:	d013      	beq.n	8008694 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008670:	2b01      	cmp	r3, #1
 8008672:	d00f      	beq.n	8008694 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	8b5b      	ldrh	r3, [r3, #26]
 8008678:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800867c:	2b00      	cmp	r3, #0
 800867e:	d009      	beq.n	8008694 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	8b5b      	ldrh	r3, [r3, #26]
 8008684:	f043 0302 	orr.w	r3, r3, #2
 8008688:	b29a      	uxth	r2, r3
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800868e:	6838      	ldr	r0, [r7, #0]
 8008690:	f003 fbc2 	bl	800be18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	7d1b      	ldrb	r3, [r3, #20]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d020      	beq.n	80086de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <tcp_pcb_remove+0xca>
 80086a4:	4b13      	ldr	r3, [pc, #76]	; (80086f4 <tcp_pcb_remove+0x10c>)
 80086a6:	f640 0293 	movw	r2, #2195	; 0x893
 80086aa:	4916      	ldr	r1, [pc, #88]	; (8008704 <tcp_pcb_remove+0x11c>)
 80086ac:	4813      	ldr	r0, [pc, #76]	; (80086fc <tcp_pcb_remove+0x114>)
 80086ae:	f007 f935 	bl	800f91c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d006      	beq.n	80086c8 <tcp_pcb_remove+0xe0>
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <tcp_pcb_remove+0x10c>)
 80086bc:	f640 0294 	movw	r2, #2196	; 0x894
 80086c0:	4911      	ldr	r1, [pc, #68]	; (8008708 <tcp_pcb_remove+0x120>)
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <tcp_pcb_remove+0x114>)
 80086c4:	f007 f92a 	bl	800f91c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d006      	beq.n	80086de <tcp_pcb_remove+0xf6>
 80086d0:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <tcp_pcb_remove+0x10c>)
 80086d2:	f640 0296 	movw	r2, #2198	; 0x896
 80086d6:	490d      	ldr	r1, [pc, #52]	; (800870c <tcp_pcb_remove+0x124>)
 80086d8:	4808      	ldr	r0, [pc, #32]	; (80086fc <tcp_pcb_remove+0x114>)
 80086da:	f007 f91f 	bl	800f91c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2200      	movs	r2, #0
 80086e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2200      	movs	r2, #0
 80086e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	08011a00 	.word	0x08011a00
 80086f8:	08012068 	.word	0x08012068
 80086fc:	08011a44 	.word	0x08011a44
 8008700:	08012084 	.word	0x08012084
 8008704:	080120a4 	.word	0x080120a4
 8008708:	080120bc 	.word	0x080120bc
 800870c:	080120d8 	.word	0x080120d8

08008710 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <tcp_next_iss+0x1c>
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <tcp_next_iss+0x38>)
 8008720:	f640 02af 	movw	r2, #2223	; 0x8af
 8008724:	4909      	ldr	r1, [pc, #36]	; (800874c <tcp_next_iss+0x3c>)
 8008726:	480a      	ldr	r0, [pc, #40]	; (8008750 <tcp_next_iss+0x40>)
 8008728:	f007 f8f8 	bl	800f91c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800872c:	4b09      	ldr	r3, [pc, #36]	; (8008754 <tcp_next_iss+0x44>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	4b09      	ldr	r3, [pc, #36]	; (8008758 <tcp_next_iss+0x48>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4413      	add	r3, r2
 8008736:	4a07      	ldr	r2, [pc, #28]	; (8008754 <tcp_next_iss+0x44>)
 8008738:	6013      	str	r3, [r2, #0]
  return iss;
 800873a:	4b06      	ldr	r3, [pc, #24]	; (8008754 <tcp_next_iss+0x44>)
 800873c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	08011a00 	.word	0x08011a00
 800874c:	080120f0 	.word	0x080120f0
 8008750:	08011a44 	.word	0x08011a44
 8008754:	20000020 	.word	0x20000020
 8008758:	20006d0c 	.word	0x20006d0c

0800875c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <tcp_eff_send_mss_netif+0x22>
 8008770:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <tcp_eff_send_mss_netif+0x68>)
 8008772:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008776:	4914      	ldr	r1, [pc, #80]	; (80087c8 <tcp_eff_send_mss_netif+0x6c>)
 8008778:	4814      	ldr	r0, [pc, #80]	; (80087cc <tcp_eff_send_mss_netif+0x70>)
 800877a:	f007 f8cf 	bl	800f91c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008784:	89fb      	ldrh	r3, [r7, #14]
 8008786:	e019      	b.n	80087bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800878c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800878e:	8afb      	ldrh	r3, [r7, #22]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d012      	beq.n	80087ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008794:	2328      	movs	r3, #40	; 0x28
 8008796:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008798:	8afa      	ldrh	r2, [r7, #22]
 800879a:	8abb      	ldrh	r3, [r7, #20]
 800879c:	429a      	cmp	r2, r3
 800879e:	d904      	bls.n	80087aa <tcp_eff_send_mss_netif+0x4e>
 80087a0:	8afa      	ldrh	r2, [r7, #22]
 80087a2:	8abb      	ldrh	r3, [r7, #20]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	e000      	b.n	80087ac <tcp_eff_send_mss_netif+0x50>
 80087aa:	2300      	movs	r3, #0
 80087ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80087ae:	8a7a      	ldrh	r2, [r7, #18]
 80087b0:	89fb      	ldrh	r3, [r7, #14]
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bf28      	it	cs
 80087b6:	4613      	movcs	r3, r2
 80087b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80087ba:	89fb      	ldrh	r3, [r7, #14]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	08011a00 	.word	0x08011a00
 80087c8:	0801210c 	.word	0x0801210c
 80087cc:	08011a44 	.word	0x08011a44

080087d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d119      	bne.n	8008818 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80087e4:	4b10      	ldr	r3, [pc, #64]	; (8008828 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80087e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80087ea:	4910      	ldr	r1, [pc, #64]	; (800882c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80087ec:	4810      	ldr	r0, [pc, #64]	; (8008830 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80087ee:	f007 f895 	bl	800f91c <iprintf>

  while (pcb != NULL) {
 80087f2:	e011      	b.n	8008818 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d108      	bne.n	8008812 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7fe fd20 	bl	800724c <tcp_abort>
      pcb = next;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e002      	b.n	8008818 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ea      	bne.n	80087f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800881e:	bf00      	nop
 8008820:	bf00      	nop
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	08011a00 	.word	0x08011a00
 800882c:	08012134 	.word	0x08012134
 8008830:	08011a44 	.word	0x08011a44

08008834 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d02a      	beq.n	800889a <tcp_netif_ip_addr_changed+0x66>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d026      	beq.n	800889a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800884c:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <tcp_netif_ip_addr_changed+0x70>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff ffbc 	bl	80087d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008858:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <tcp_netif_ip_addr_changed+0x74>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff ffb6 	bl	80087d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d017      	beq.n	800889a <tcp_netif_ip_addr_changed+0x66>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d013      	beq.n	800889a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008872:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <tcp_netif_ip_addr_changed+0x78>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	e00c      	b.n	8008894 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d103      	bne.n	800888e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1ef      	bne.n	800887a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20006d08 	.word	0x20006d08
 80088a8:	20006d14 	.word	0x20006d14
 80088ac:	20006d10 	.word	0x20006d10

080088b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fb51 	bl	8007f6c <tcp_segs_free>
    pcb->ooseq = NULL;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80088d8:	b590      	push	{r4, r7, lr}
 80088da:	b08d      	sub	sp, #52	; 0x34
 80088dc:	af04      	add	r7, sp, #16
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d105      	bne.n	80088f4 <tcp_input+0x1c>
 80088e8:	4b9b      	ldr	r3, [pc, #620]	; (8008b58 <tcp_input+0x280>)
 80088ea:	2283      	movs	r2, #131	; 0x83
 80088ec:	499b      	ldr	r1, [pc, #620]	; (8008b5c <tcp_input+0x284>)
 80088ee:	489c      	ldr	r0, [pc, #624]	; (8008b60 <tcp_input+0x288>)
 80088f0:	f007 f814 	bl	800f91c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4a9a      	ldr	r2, [pc, #616]	; (8008b64 <tcp_input+0x28c>)
 80088fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	895b      	ldrh	r3, [r3, #10]
 8008900:	2b13      	cmp	r3, #19
 8008902:	f240 83c4 	bls.w	800908e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008906:	4b98      	ldr	r3, [pc, #608]	; (8008b68 <tcp_input+0x290>)
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	4a97      	ldr	r2, [pc, #604]	; (8008b68 <tcp_input+0x290>)
 800890c:	6812      	ldr	r2, [r2, #0]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f006 f86b 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	f040 83ba 	bne.w	8009092 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800891e:	4b92      	ldr	r3, [pc, #584]	; (8008b68 <tcp_input+0x290>)
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008926:	2be0      	cmp	r3, #224	; 0xe0
 8008928:	f000 83b3 	beq.w	8009092 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800892c:	4b8d      	ldr	r3, [pc, #564]	; (8008b64 <tcp_input+0x28c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	899b      	ldrh	r3, [r3, #12]
 8008932:	b29b      	uxth	r3, r3
 8008934:	4618      	mov	r0, r3
 8008936:	f7fc fbe3 	bl	8005100 <lwip_htons>
 800893a:	4603      	mov	r3, r0
 800893c:	0b1b      	lsrs	r3, r3, #12
 800893e:	b29b      	uxth	r3, r3
 8008940:	b2db      	uxtb	r3, r3
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008946:	7cbb      	ldrb	r3, [r7, #18]
 8008948:	2b13      	cmp	r3, #19
 800894a:	f240 83a4 	bls.w	8009096 <tcp_input+0x7be>
 800894e:	7cbb      	ldrb	r3, [r7, #18]
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	891b      	ldrh	r3, [r3, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	f200 839d 	bhi.w	8009096 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800895c:	7cbb      	ldrb	r3, [r7, #18]
 800895e:	b29b      	uxth	r3, r3
 8008960:	3b14      	subs	r3, #20
 8008962:	b29a      	uxth	r2, r3
 8008964:	4b81      	ldr	r3, [pc, #516]	; (8008b6c <tcp_input+0x294>)
 8008966:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008968:	4b81      	ldr	r3, [pc, #516]	; (8008b70 <tcp_input+0x298>)
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	895a      	ldrh	r2, [r3, #10]
 8008972:	7cbb      	ldrb	r3, [r7, #18]
 8008974:	b29b      	uxth	r3, r3
 8008976:	429a      	cmp	r2, r3
 8008978:	d309      	bcc.n	800898e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800897a:	4b7c      	ldr	r3, [pc, #496]	; (8008b6c <tcp_input+0x294>)
 800897c:	881a      	ldrh	r2, [r3, #0]
 800897e:	4b7d      	ldr	r3, [pc, #500]	; (8008b74 <tcp_input+0x29c>)
 8008980:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008982:	7cbb      	ldrb	r3, [r7, #18]
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fd fe52 	bl	8006630 <pbuf_remove_header>
 800898c:	e04e      	b.n	8008a2c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <tcp_input+0xca>
 8008996:	4b70      	ldr	r3, [pc, #448]	; (8008b58 <tcp_input+0x280>)
 8008998:	22c2      	movs	r2, #194	; 0xc2
 800899a:	4977      	ldr	r1, [pc, #476]	; (8008b78 <tcp_input+0x2a0>)
 800899c:	4870      	ldr	r0, [pc, #448]	; (8008b60 <tcp_input+0x288>)
 800899e:	f006 ffbd 	bl	800f91c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80089a2:	2114      	movs	r1, #20
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7fd fe43 	bl	8006630 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	895a      	ldrh	r2, [r3, #10]
 80089ae:	4b71      	ldr	r3, [pc, #452]	; (8008b74 <tcp_input+0x29c>)
 80089b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80089b2:	4b6e      	ldr	r3, [pc, #440]	; (8008b6c <tcp_input+0x294>)
 80089b4:	881a      	ldrh	r2, [r3, #0]
 80089b6:	4b6f      	ldr	r3, [pc, #444]	; (8008b74 <tcp_input+0x29c>)
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80089be:	4b6d      	ldr	r3, [pc, #436]	; (8008b74 <tcp_input+0x29c>)
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fd fe33 	bl	8006630 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	895b      	ldrh	r3, [r3, #10]
 80089d0:	8a3a      	ldrh	r2, [r7, #16]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	f200 8361 	bhi.w	800909a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	4a64      	ldr	r2, [pc, #400]	; (8008b70 <tcp_input+0x298>)
 80089e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	8a3a      	ldrh	r2, [r7, #16]
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fd fe20 	bl	8006630 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	891a      	ldrh	r2, [r3, #8]
 80089f4:	8a3b      	ldrh	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	895b      	ldrh	r3, [r3, #10]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <tcp_input+0x13a>
 8008a06:	4b54      	ldr	r3, [pc, #336]	; (8008b58 <tcp_input+0x280>)
 8008a08:	22df      	movs	r2, #223	; 0xdf
 8008a0a:	495c      	ldr	r1, [pc, #368]	; (8008b7c <tcp_input+0x2a4>)
 8008a0c:	4854      	ldr	r0, [pc, #336]	; (8008b60 <tcp_input+0x288>)
 8008a0e:	f006 ff85 	bl	800f91c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	891a      	ldrh	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	891b      	ldrh	r3, [r3, #8]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d005      	beq.n	8008a2c <tcp_input+0x154>
 8008a20:	4b4d      	ldr	r3, [pc, #308]	; (8008b58 <tcp_input+0x280>)
 8008a22:	22e0      	movs	r2, #224	; 0xe0
 8008a24:	4956      	ldr	r1, [pc, #344]	; (8008b80 <tcp_input+0x2a8>)
 8008a26:	484e      	ldr	r0, [pc, #312]	; (8008b60 <tcp_input+0x288>)
 8008a28:	f006 ff78 	bl	800f91c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008a2c:	4b4d      	ldr	r3, [pc, #308]	; (8008b64 <tcp_input+0x28c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	4a4b      	ldr	r2, [pc, #300]	; (8008b64 <tcp_input+0x28c>)
 8008a36:	6814      	ldr	r4, [r2, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fc fb61 	bl	8005100 <lwip_htons>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008a42:	4b48      	ldr	r3, [pc, #288]	; (8008b64 <tcp_input+0x28c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	885b      	ldrh	r3, [r3, #2]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	4a46      	ldr	r2, [pc, #280]	; (8008b64 <tcp_input+0x28c>)
 8008a4c:	6814      	ldr	r4, [r2, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fc fb56 	bl	8005100 <lwip_htons>
 8008a54:	4603      	mov	r3, r0
 8008a56:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008a58:	4b42      	ldr	r3, [pc, #264]	; (8008b64 <tcp_input+0x28c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	4a41      	ldr	r2, [pc, #260]	; (8008b64 <tcp_input+0x28c>)
 8008a60:	6814      	ldr	r4, [r2, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fc fb61 	bl	800512a <lwip_htonl>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	4a45      	ldr	r2, [pc, #276]	; (8008b84 <tcp_input+0x2ac>)
 8008a70:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008a72:	4b3c      	ldr	r3, [pc, #240]	; (8008b64 <tcp_input+0x28c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	4a3a      	ldr	r2, [pc, #232]	; (8008b64 <tcp_input+0x28c>)
 8008a7a:	6814      	ldr	r4, [r2, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fc fb54 	bl	800512a <lwip_htonl>
 8008a82:	4603      	mov	r3, r0
 8008a84:	60a3      	str	r3, [r4, #8]
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <tcp_input+0x2b0>)
 8008a8a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008a8c:	4b35      	ldr	r3, [pc, #212]	; (8008b64 <tcp_input+0x28c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	89db      	ldrh	r3, [r3, #14]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4a33      	ldr	r2, [pc, #204]	; (8008b64 <tcp_input+0x28c>)
 8008a96:	6814      	ldr	r4, [r2, #0]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fc fb31 	bl	8005100 <lwip_htons>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008aa2:	4b30      	ldr	r3, [pc, #192]	; (8008b64 <tcp_input+0x28c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	899b      	ldrh	r3, [r3, #12]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fc fb28 	bl	8005100 <lwip_htons>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4b34      	ldr	r3, [pc, #208]	; (8008b8c <tcp_input+0x2b4>)
 8008abc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	891a      	ldrh	r2, [r3, #8]
 8008ac2:	4b33      	ldr	r3, [pc, #204]	; (8008b90 <tcp_input+0x2b8>)
 8008ac4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008ac6:	4b31      	ldr	r3, [pc, #196]	; (8008b8c <tcp_input+0x2b4>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <tcp_input+0x214>
    tcplen++;
 8008ad2:	4b2f      	ldr	r3, [pc, #188]	; (8008b90 <tcp_input+0x2b8>)
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	4b2d      	ldr	r3, [pc, #180]	; (8008b90 <tcp_input+0x2b8>)
 8008adc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	891a      	ldrh	r2, [r3, #8]
 8008ae2:	4b2b      	ldr	r3, [pc, #172]	; (8008b90 <tcp_input+0x2b8>)
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	f200 82d9 	bhi.w	800909e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008af0:	4b28      	ldr	r3, [pc, #160]	; (8008b94 <tcp_input+0x2bc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e09d      	b.n	8008c34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	7d1b      	ldrb	r3, [r3, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d105      	bne.n	8008b0c <tcp_input+0x234>
 8008b00:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <tcp_input+0x280>)
 8008b02:	22fb      	movs	r2, #251	; 0xfb
 8008b04:	4924      	ldr	r1, [pc, #144]	; (8008b98 <tcp_input+0x2c0>)
 8008b06:	4816      	ldr	r0, [pc, #88]	; (8008b60 <tcp_input+0x288>)
 8008b08:	f006 ff08 	bl	800f91c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	7d1b      	ldrb	r3, [r3, #20]
 8008b10:	2b0a      	cmp	r3, #10
 8008b12:	d105      	bne.n	8008b20 <tcp_input+0x248>
 8008b14:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <tcp_input+0x280>)
 8008b16:	22fc      	movs	r2, #252	; 0xfc
 8008b18:	4920      	ldr	r1, [pc, #128]	; (8008b9c <tcp_input+0x2c4>)
 8008b1a:	4811      	ldr	r0, [pc, #68]	; (8008b60 <tcp_input+0x288>)
 8008b1c:	f006 fefe 	bl	800f91c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	7d1b      	ldrb	r3, [r3, #20]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d105      	bne.n	8008b34 <tcp_input+0x25c>
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <tcp_input+0x280>)
 8008b2a:	22fd      	movs	r2, #253	; 0xfd
 8008b2c:	491c      	ldr	r1, [pc, #112]	; (8008ba0 <tcp_input+0x2c8>)
 8008b2e:	480c      	ldr	r0, [pc, #48]	; (8008b60 <tcp_input+0x288>)
 8008b30:	f006 fef4 	bl	800f91c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	7a1b      	ldrb	r3, [r3, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d033      	beq.n	8008ba4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	7a1a      	ldrb	r2, [r3, #8]
 8008b40:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <tcp_input+0x290>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b48:	3301      	adds	r3, #1
 8008b4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d029      	beq.n	8008ba4 <tcp_input+0x2cc>
      prev = pcb;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	61bb      	str	r3, [r7, #24]
      continue;
 8008b54:	e06b      	b.n	8008c2e <tcp_input+0x356>
 8008b56:	bf00      	nop
 8008b58:	08012168 	.word	0x08012168
 8008b5c:	0801219c 	.word	0x0801219c
 8008b60:	080121b4 	.word	0x080121b4
 8008b64:	20000550 	.word	0x20000550
 8008b68:	200037c4 	.word	0x200037c4
 8008b6c:	20000554 	.word	0x20000554
 8008b70:	20000558 	.word	0x20000558
 8008b74:	20000556 	.word	0x20000556
 8008b78:	080121dc 	.word	0x080121dc
 8008b7c:	080121ec 	.word	0x080121ec
 8008b80:	080121f8 	.word	0x080121f8
 8008b84:	20000560 	.word	0x20000560
 8008b88:	20000564 	.word	0x20000564
 8008b8c:	2000056c 	.word	0x2000056c
 8008b90:	2000056a 	.word	0x2000056a
 8008b94:	20006d08 	.word	0x20006d08
 8008b98:	08012218 	.word	0x08012218
 8008b9c:	08012240 	.word	0x08012240
 8008ba0:	0801226c 	.word	0x0801226c
    }

    if (pcb->remote_port == tcphdr->src &&
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	8b1a      	ldrh	r2, [r3, #24]
 8008ba8:	4b94      	ldr	r3, [pc, #592]	; (8008dfc <tcp_input+0x524>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d13a      	bne.n	8008c2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	8ada      	ldrh	r2, [r3, #22]
 8008bb8:	4b90      	ldr	r3, [pc, #576]	; (8008dfc <tcp_input+0x524>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	885b      	ldrh	r3, [r3, #2]
 8008bbe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d132      	bne.n	8008c2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	4b8d      	ldr	r3, [pc, #564]	; (8008e00 <tcp_input+0x528>)
 8008bca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d12c      	bne.n	8008c2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	4b8a      	ldr	r3, [pc, #552]	; (8008e00 <tcp_input+0x528>)
 8008bd6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d126      	bne.n	8008c2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d106      	bne.n	8008bf4 <tcp_input+0x31c>
 8008be6:	4b87      	ldr	r3, [pc, #540]	; (8008e04 <tcp_input+0x52c>)
 8008be8:	f240 120d 	movw	r2, #269	; 0x10d
 8008bec:	4986      	ldr	r1, [pc, #536]	; (8008e08 <tcp_input+0x530>)
 8008bee:	4887      	ldr	r0, [pc, #540]	; (8008e0c <tcp_input+0x534>)
 8008bf0:	f006 fe94 	bl	800f91c <iprintf>
      if (prev != NULL) {
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <tcp_input+0x338>
        prev->next = pcb->next;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	68da      	ldr	r2, [r3, #12]
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008c02:	4b83      	ldr	r3, [pc, #524]	; (8008e10 <tcp_input+0x538>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008c0a:	4a81      	ldr	r2, [pc, #516]	; (8008e10 <tcp_input+0x538>)
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d111      	bne.n	8008c3e <tcp_input+0x366>
 8008c1a:	4b7a      	ldr	r3, [pc, #488]	; (8008e04 <tcp_input+0x52c>)
 8008c1c:	f240 1215 	movw	r2, #277	; 0x115
 8008c20:	497c      	ldr	r1, [pc, #496]	; (8008e14 <tcp_input+0x53c>)
 8008c22:	487a      	ldr	r0, [pc, #488]	; (8008e0c <tcp_input+0x534>)
 8008c24:	f006 fe7a 	bl	800f91c <iprintf>
      break;
 8008c28:	e009      	b.n	8008c3e <tcp_input+0x366>
    }
    prev = pcb;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f47f af5e 	bne.w	8008af8 <tcp_input+0x220>
 8008c3c:	e000      	b.n	8008c40 <tcp_input+0x368>
      break;
 8008c3e:	bf00      	nop
  }

  if (pcb == NULL) {
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 8095 	bne.w	8008d72 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c48:	4b73      	ldr	r3, [pc, #460]	; (8008e18 <tcp_input+0x540>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	61fb      	str	r3, [r7, #28]
 8008c4e:	e03f      	b.n	8008cd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	7d1b      	ldrb	r3, [r3, #20]
 8008c54:	2b0a      	cmp	r3, #10
 8008c56:	d006      	beq.n	8008c66 <tcp_input+0x38e>
 8008c58:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <tcp_input+0x52c>)
 8008c5a:	f240 121f 	movw	r2, #287	; 0x11f
 8008c5e:	496f      	ldr	r1, [pc, #444]	; (8008e1c <tcp_input+0x544>)
 8008c60:	486a      	ldr	r0, [pc, #424]	; (8008e0c <tcp_input+0x534>)
 8008c62:	f006 fe5b 	bl	800f91c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	7a1b      	ldrb	r3, [r3, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	7a1a      	ldrb	r2, [r3, #8]
 8008c72:	4b63      	ldr	r3, [pc, #396]	; (8008e00 <tcp_input+0x528>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d122      	bne.n	8008cc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	8b1a      	ldrh	r2, [r3, #24]
 8008c86:	4b5d      	ldr	r3, [pc, #372]	; (8008dfc <tcp_input+0x524>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d11b      	bne.n	8008cca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	8ada      	ldrh	r2, [r3, #22]
 8008c96:	4b59      	ldr	r3, [pc, #356]	; (8008dfc <tcp_input+0x524>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	885b      	ldrh	r3, [r3, #2]
 8008c9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d113      	bne.n	8008cca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	4b56      	ldr	r3, [pc, #344]	; (8008e00 <tcp_input+0x528>)
 8008ca8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d10d      	bne.n	8008cca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b53      	ldr	r3, [pc, #332]	; (8008e00 <tcp_input+0x528>)
 8008cb4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d107      	bne.n	8008cca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008cba:	69f8      	ldr	r0, [r7, #28]
 8008cbc:	f000 fb54 	bl	8009368 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7fd fd3b 	bl	800673c <pbuf_free>
        return;
 8008cc6:	e1f0      	b.n	80090aa <tcp_input+0x7d2>
        continue;
 8008cc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1bc      	bne.n	8008c50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008cda:	4b51      	ldr	r3, [pc, #324]	; (8008e20 <tcp_input+0x548>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	e02a      	b.n	8008d38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	7a1b      	ldrb	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00c      	beq.n	8008d04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	7a1a      	ldrb	r2, [r3, #8]
 8008cee:	4b44      	ldr	r3, [pc, #272]	; (8008e00 <tcp_input+0x528>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d002      	beq.n	8008d04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	61bb      	str	r3, [r7, #24]
        continue;
 8008d02:	e016      	b.n	8008d32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	8ada      	ldrh	r2, [r3, #22]
 8008d08:	4b3c      	ldr	r3, [pc, #240]	; (8008dfc <tcp_input+0x524>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d10c      	bne.n	8008d2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b39      	ldr	r3, [pc, #228]	; (8008e00 <tcp_input+0x528>)
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d00f      	beq.n	8008d40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00d      	beq.n	8008d42 <tcp_input+0x46a>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1d1      	bne.n	8008ce2 <tcp_input+0x40a>
 8008d3e:	e000      	b.n	8008d42 <tcp_input+0x46a>
            break;
 8008d40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d014      	beq.n	8008d72 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008d56:	4b32      	ldr	r3, [pc, #200]	; (8008e20 <tcp_input+0x548>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008d5e:	4a30      	ldr	r2, [pc, #192]	; (8008e20 <tcp_input+0x548>)
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f000 fa01 	bl	800916c <tcp_listen_input>
      }
      pbuf_free(p);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fd fce6 	bl	800673c <pbuf_free>
      return;
 8008d70:	e19b      	b.n	80090aa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 8160 	beq.w	800903a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008d7a:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <tcp_input+0x54c>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	891a      	ldrh	r2, [r3, #8]
 8008d84:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <tcp_input+0x54c>)
 8008d86:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008d88:	4a26      	ldr	r2, [pc, #152]	; (8008e24 <tcp_input+0x54c>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008d8e:	4b1b      	ldr	r3, [pc, #108]	; (8008dfc <tcp_input+0x524>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a24      	ldr	r2, [pc, #144]	; (8008e24 <tcp_input+0x54c>)
 8008d94:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008d96:	4b24      	ldr	r3, [pc, #144]	; (8008e28 <tcp_input+0x550>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008d9c:	4b23      	ldr	r3, [pc, #140]	; (8008e2c <tcp_input+0x554>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008da2:	4b23      	ldr	r3, [pc, #140]	; (8008e30 <tcp_input+0x558>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008da8:	4b22      	ldr	r3, [pc, #136]	; (8008e34 <tcp_input+0x55c>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d006      	beq.n	8008dc2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7b5b      	ldrb	r3, [r3, #13]
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d038      	beq.n	8008e3c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008dca:	69f8      	ldr	r0, [r7, #28]
 8008dcc:	f7ff f852 	bl	8007e74 <tcp_process_refused_data>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f113 0f0d 	cmn.w	r3, #13
 8008dd6:	d007      	beq.n	8008de8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d02d      	beq.n	8008e3c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008de0:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <tcp_input+0x560>)
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d029      	beq.n	8008e3c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 8104 	bne.w	8008ffa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008df2:	69f8      	ldr	r0, [r7, #28]
 8008df4:	f003 fe16 	bl	800ca24 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008df8:	e0ff      	b.n	8008ffa <tcp_input+0x722>
 8008dfa:	bf00      	nop
 8008dfc:	20000550 	.word	0x20000550
 8008e00:	200037c4 	.word	0x200037c4
 8008e04:	08012168 	.word	0x08012168
 8008e08:	08012294 	.word	0x08012294
 8008e0c:	080121b4 	.word	0x080121b4
 8008e10:	20006d08 	.word	0x20006d08
 8008e14:	080122c0 	.word	0x080122c0
 8008e18:	20006d18 	.word	0x20006d18
 8008e1c:	080122ec 	.word	0x080122ec
 8008e20:	20006d10 	.word	0x20006d10
 8008e24:	20000540 	.word	0x20000540
 8008e28:	20000570 	.word	0x20000570
 8008e2c:	2000056d 	.word	0x2000056d
 8008e30:	20000568 	.word	0x20000568
 8008e34:	2000056c 	.word	0x2000056c
 8008e38:	2000056a 	.word	0x2000056a
      }
    }
    tcp_input_pcb = pcb;
 8008e3c:	4a9c      	ldr	r2, [pc, #624]	; (80090b0 <tcp_input+0x7d8>)
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008e42:	69f8      	ldr	r0, [r7, #28]
 8008e44:	f000 fb0a 	bl	800945c <tcp_process>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008e4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e50:	f113 0f0d 	cmn.w	r3, #13
 8008e54:	f000 80d3 	beq.w	8008ffe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8008e58:	4b96      	ldr	r3, [pc, #600]	; (80090b4 <tcp_input+0x7dc>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d015      	beq.n	8008e90 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d008      	beq.n	8008e80 <tcp_input+0x5a8>
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	6912      	ldr	r2, [r2, #16]
 8008e78:	f06f 010d 	mvn.w	r1, #13
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008e80:	69f9      	ldr	r1, [r7, #28]
 8008e82:	488d      	ldr	r0, [pc, #564]	; (80090b8 <tcp_input+0x7e0>)
 8008e84:	f7ff fbb0 	bl	80085e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8008e88:	69f8      	ldr	r0, [r7, #28]
 8008e8a:	f7fd fef7 	bl	8006c7c <tcp_free>
 8008e8e:	e0c1      	b.n	8009014 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008e94:	4b89      	ldr	r3, [pc, #548]	; (80090bc <tcp_input+0x7e4>)
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01d      	beq.n	8008ed8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008e9c:	4b87      	ldr	r3, [pc, #540]	; (80090bc <tcp_input+0x7e4>)
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00a      	beq.n	8008ec2 <tcp_input+0x5ea>
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	6910      	ldr	r0, [r2, #16]
 8008eb6:	89fa      	ldrh	r2, [r7, #14]
 8008eb8:	69f9      	ldr	r1, [r7, #28]
 8008eba:	4798      	blx	r3
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	74fb      	strb	r3, [r7, #19]
 8008ec0:	e001      	b.n	8008ec6 <tcp_input+0x5ee>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008ec6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008eca:	f113 0f0d 	cmn.w	r3, #13
 8008ece:	f000 8098 	beq.w	8009002 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008ed2:	4b7a      	ldr	r3, [pc, #488]	; (80090bc <tcp_input+0x7e4>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008ed8:	69f8      	ldr	r0, [r7, #28]
 8008eda:	f000 f907 	bl	80090ec <tcp_input_delayed_close>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f040 8090 	bne.w	8009006 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008ee6:	4b76      	ldr	r3, [pc, #472]	; (80090c0 <tcp_input+0x7e8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d041      	beq.n	8008f72 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <tcp_input+0x62c>
 8008ef6:	4b73      	ldr	r3, [pc, #460]	; (80090c4 <tcp_input+0x7ec>)
 8008ef8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008efc:	4972      	ldr	r1, [pc, #456]	; (80090c8 <tcp_input+0x7f0>)
 8008efe:	4873      	ldr	r0, [pc, #460]	; (80090cc <tcp_input+0x7f4>)
 8008f00:	f006 fd0c 	bl	800f91c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	8b5b      	ldrh	r3, [r3, #26]
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d008      	beq.n	8008f22 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008f10:	4b6b      	ldr	r3, [pc, #428]	; (80090c0 <tcp_input+0x7e8>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fd fc11 	bl	800673c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008f1a:	69f8      	ldr	r0, [r7, #28]
 8008f1c:	f7fe f996 	bl	800724c <tcp_abort>
            goto aborted;
 8008f20:	e078      	b.n	8009014 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00c      	beq.n	8008f46 <tcp_input+0x66e>
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	6918      	ldr	r0, [r3, #16]
 8008f36:	4b62      	ldr	r3, [pc, #392]	; (80090c0 <tcp_input+0x7e8>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	47a0      	blx	r4
 8008f40:	4603      	mov	r3, r0
 8008f42:	74fb      	strb	r3, [r7, #19]
 8008f44:	e008      	b.n	8008f58 <tcp_input+0x680>
 8008f46:	4b5e      	ldr	r3, [pc, #376]	; (80090c0 <tcp_input+0x7e8>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	69f9      	ldr	r1, [r7, #28]
 8008f4e:	2000      	movs	r0, #0
 8008f50:	f7ff f884 	bl	800805c <tcp_recv_null>
 8008f54:	4603      	mov	r3, r0
 8008f56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f5c:	f113 0f0d 	cmn.w	r3, #13
 8008f60:	d053      	beq.n	800900a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008f62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008f6a:	4b55      	ldr	r3, [pc, #340]	; (80090c0 <tcp_input+0x7e8>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008f72:	4b50      	ldr	r3, [pc, #320]	; (80090b4 <tcp_input+0x7dc>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d030      	beq.n	8008fe0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f8a:	7b5a      	ldrb	r2, [r3, #13]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f90:	f042 0220 	orr.w	r2, r2, #32
 8008f94:	b2d2      	uxtb	r2, r2
 8008f96:	735a      	strb	r2, [r3, #13]
 8008f98:	e022      	b.n	8008fe0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fa2:	d005      	beq.n	8008fb0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa8:	3301      	adds	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00b      	beq.n	8008fd2 <tcp_input+0x6fa>
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	6918      	ldr	r0, [r3, #16]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	47a0      	blx	r4
 8008fcc:	4603      	mov	r3, r0
 8008fce:	74fb      	strb	r3, [r7, #19]
 8008fd0:	e001      	b.n	8008fd6 <tcp_input+0x6fe>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fda:	f113 0f0d 	cmn.w	r3, #13
 8008fde:	d016      	beq.n	800900e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008fe0:	4b33      	ldr	r3, [pc, #204]	; (80090b0 <tcp_input+0x7d8>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008fe6:	69f8      	ldr	r0, [r7, #28]
 8008fe8:	f000 f880 	bl	80090ec <tcp_input_delayed_close>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10f      	bne.n	8009012 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008ff2:	69f8      	ldr	r0, [r7, #28]
 8008ff4:	f002 ff10 	bl	800be18 <tcp_output>
 8008ff8:	e00c      	b.n	8009014 <tcp_input+0x73c>
        goto aborted;
 8008ffa:	bf00      	nop
 8008ffc:	e00a      	b.n	8009014 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008ffe:	bf00      	nop
 8009000:	e008      	b.n	8009014 <tcp_input+0x73c>
              goto aborted;
 8009002:	bf00      	nop
 8009004:	e006      	b.n	8009014 <tcp_input+0x73c>
          goto aborted;
 8009006:	bf00      	nop
 8009008:	e004      	b.n	8009014 <tcp_input+0x73c>
            goto aborted;
 800900a:	bf00      	nop
 800900c:	e002      	b.n	8009014 <tcp_input+0x73c>
              goto aborted;
 800900e:	bf00      	nop
 8009010:	e000      	b.n	8009014 <tcp_input+0x73c>
          goto aborted;
 8009012:	bf00      	nop
    tcp_input_pcb = NULL;
 8009014:	4b26      	ldr	r3, [pc, #152]	; (80090b0 <tcp_input+0x7d8>)
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800901a:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <tcp_input+0x7e8>)
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009020:	4b2b      	ldr	r3, [pc, #172]	; (80090d0 <tcp_input+0x7f8>)
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d03f      	beq.n	80090a8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8009028:	4b29      	ldr	r3, [pc, #164]	; (80090d0 <tcp_input+0x7f8>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4618      	mov	r0, r3
 800902e:	f7fd fb85 	bl	800673c <pbuf_free>
      inseg.p = NULL;
 8009032:	4b27      	ldr	r3, [pc, #156]	; (80090d0 <tcp_input+0x7f8>)
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009038:	e036      	b.n	80090a8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800903a:	4b26      	ldr	r3, [pc, #152]	; (80090d4 <tcp_input+0x7fc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	899b      	ldrh	r3, [r3, #12]
 8009040:	b29b      	uxth	r3, r3
 8009042:	4618      	mov	r0, r3
 8009044:	f7fc f85c 	bl	8005100 <lwip_htons>
 8009048:	4603      	mov	r3, r0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d118      	bne.n	8009086 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009054:	4b20      	ldr	r3, [pc, #128]	; (80090d8 <tcp_input+0x800>)
 8009056:	6819      	ldr	r1, [r3, #0]
 8009058:	4b20      	ldr	r3, [pc, #128]	; (80090dc <tcp_input+0x804>)
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <tcp_input+0x808>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009064:	4b1b      	ldr	r3, [pc, #108]	; (80090d4 <tcp_input+0x7fc>)
 8009066:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800906c:	4a19      	ldr	r2, [pc, #100]	; (80090d4 <tcp_input+0x7fc>)
 800906e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009070:	8812      	ldrh	r2, [r2, #0]
 8009072:	b292      	uxth	r2, r2
 8009074:	9202      	str	r2, [sp, #8]
 8009076:	9301      	str	r3, [sp, #4]
 8009078:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <tcp_input+0x80c>)
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	4b1a      	ldr	r3, [pc, #104]	; (80090e8 <tcp_input+0x810>)
 800907e:	4602      	mov	r2, r0
 8009080:	2000      	movs	r0, #0
 8009082:	f003 fc7d 	bl	800c980 <tcp_rst>
    pbuf_free(p);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7fd fb58 	bl	800673c <pbuf_free>
  return;
 800908c:	e00c      	b.n	80090a8 <tcp_input+0x7d0>
    goto dropped;
 800908e:	bf00      	nop
 8009090:	e006      	b.n	80090a0 <tcp_input+0x7c8>
    goto dropped;
 8009092:	bf00      	nop
 8009094:	e004      	b.n	80090a0 <tcp_input+0x7c8>
    goto dropped;
 8009096:	bf00      	nop
 8009098:	e002      	b.n	80090a0 <tcp_input+0x7c8>
      goto dropped;
 800909a:	bf00      	nop
 800909c:	e000      	b.n	80090a0 <tcp_input+0x7c8>
      goto dropped;
 800909e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fd fb4b 	bl	800673c <pbuf_free>
 80090a6:	e000      	b.n	80090aa <tcp_input+0x7d2>
  return;
 80090a8:	bf00      	nop
}
 80090aa:	3724      	adds	r7, #36	; 0x24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd90      	pop	{r4, r7, pc}
 80090b0:	20006d1c 	.word	0x20006d1c
 80090b4:	2000056d 	.word	0x2000056d
 80090b8:	20006d08 	.word	0x20006d08
 80090bc:	20000568 	.word	0x20000568
 80090c0:	20000570 	.word	0x20000570
 80090c4:	08012168 	.word	0x08012168
 80090c8:	0801231c 	.word	0x0801231c
 80090cc:	080121b4 	.word	0x080121b4
 80090d0:	20000540 	.word	0x20000540
 80090d4:	20000550 	.word	0x20000550
 80090d8:	20000564 	.word	0x20000564
 80090dc:	2000056a 	.word	0x2000056a
 80090e0:	20000560 	.word	0x20000560
 80090e4:	200037d4 	.word	0x200037d4
 80090e8:	200037d8 	.word	0x200037d8

080090ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <tcp_input_delayed_close+0x1c>
 80090fa:	4b17      	ldr	r3, [pc, #92]	; (8009158 <tcp_input_delayed_close+0x6c>)
 80090fc:	f240 225a 	movw	r2, #602	; 0x25a
 8009100:	4916      	ldr	r1, [pc, #88]	; (800915c <tcp_input_delayed_close+0x70>)
 8009102:	4817      	ldr	r0, [pc, #92]	; (8009160 <tcp_input_delayed_close+0x74>)
 8009104:	f006 fc0a 	bl	800f91c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009108:	4b16      	ldr	r3, [pc, #88]	; (8009164 <tcp_input_delayed_close+0x78>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 0310 	and.w	r3, r3, #16
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01c      	beq.n	800914e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	8b5b      	ldrh	r3, [r3, #26]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10d      	bne.n	800913c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <tcp_input_delayed_close+0x50>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6912      	ldr	r2, [r2, #16]
 8009134:	f06f 010e 	mvn.w	r1, #14
 8009138:	4610      	mov	r0, r2
 800913a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800913c:	6879      	ldr	r1, [r7, #4]
 800913e:	480a      	ldr	r0, [pc, #40]	; (8009168 <tcp_input_delayed_close+0x7c>)
 8009140:	f7ff fa52 	bl	80085e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fd fd99 	bl	8006c7c <tcp_free>
    return 1;
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	08012168 	.word	0x08012168
 800915c:	08012338 	.word	0x08012338
 8009160:	080121b4 	.word	0x080121b4
 8009164:	2000056d 	.word	0x2000056d
 8009168:	20006d08 	.word	0x20006d08

0800916c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800916c:	b590      	push	{r4, r7, lr}
 800916e:	b08b      	sub	sp, #44	; 0x2c
 8009170:	af04      	add	r7, sp, #16
 8009172:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009174:	4b6f      	ldr	r3, [pc, #444]	; (8009334 <tcp_listen_input+0x1c8>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	f040 80d2 	bne.w	8009326 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d106      	bne.n	8009196 <tcp_listen_input+0x2a>
 8009188:	4b6b      	ldr	r3, [pc, #428]	; (8009338 <tcp_listen_input+0x1cc>)
 800918a:	f240 2281 	movw	r2, #641	; 0x281
 800918e:	496b      	ldr	r1, [pc, #428]	; (800933c <tcp_listen_input+0x1d0>)
 8009190:	486b      	ldr	r0, [pc, #428]	; (8009340 <tcp_listen_input+0x1d4>)
 8009192:	f006 fbc3 	bl	800f91c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009196:	4b67      	ldr	r3, [pc, #412]	; (8009334 <tcp_listen_input+0x1c8>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d019      	beq.n	80091d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091a2:	4b68      	ldr	r3, [pc, #416]	; (8009344 <tcp_listen_input+0x1d8>)
 80091a4:	6819      	ldr	r1, [r3, #0]
 80091a6:	4b68      	ldr	r3, [pc, #416]	; (8009348 <tcp_listen_input+0x1dc>)
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	4b67      	ldr	r3, [pc, #412]	; (800934c <tcp_listen_input+0x1e0>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091b2:	4b67      	ldr	r3, [pc, #412]	; (8009350 <tcp_listen_input+0x1e4>)
 80091b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091b6:	885b      	ldrh	r3, [r3, #2]
 80091b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80091ba:	4a65      	ldr	r2, [pc, #404]	; (8009350 <tcp_listen_input+0x1e4>)
 80091bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80091be:	8812      	ldrh	r2, [r2, #0]
 80091c0:	b292      	uxth	r2, r2
 80091c2:	9202      	str	r2, [sp, #8]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	4b63      	ldr	r3, [pc, #396]	; (8009354 <tcp_listen_input+0x1e8>)
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	4b63      	ldr	r3, [pc, #396]	; (8009358 <tcp_listen_input+0x1ec>)
 80091cc:	4602      	mov	r2, r0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f003 fbd6 	bl	800c980 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80091d4:	e0a9      	b.n	800932a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80091d6:	4b57      	ldr	r3, [pc, #348]	; (8009334 <tcp_listen_input+0x1c8>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80a3 	beq.w	800932a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7d5b      	ldrb	r3, [r3, #21]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff f85b 	bl	80082a4 <tcp_alloc>
 80091ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d111      	bne.n	800921a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <tcp_listen_input+0xa8>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6910      	ldr	r0, [r2, #16]
 8009206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800920a:	2100      	movs	r1, #0
 800920c:	4798      	blx	r3
 800920e:	4603      	mov	r3, r0
 8009210:	73bb      	strb	r3, [r7, #14]
      return;
 8009212:	e08b      	b.n	800932c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009214:	23f0      	movs	r3, #240	; 0xf0
 8009216:	73bb      	strb	r3, [r7, #14]
      return;
 8009218:	e088      	b.n	800932c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800921a:	4b50      	ldr	r3, [pc, #320]	; (800935c <tcp_listen_input+0x1f0>)
 800921c:	695a      	ldr	r2, [r3, #20]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009222:	4b4e      	ldr	r3, [pc, #312]	; (800935c <tcp_listen_input+0x1f0>)
 8009224:	691a      	ldr	r2, [r3, #16]
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	8ada      	ldrh	r2, [r3, #22]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009232:	4b47      	ldr	r3, [pc, #284]	; (8009350 <tcp_listen_input+0x1e4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29a      	uxth	r2, r3
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2203      	movs	r2, #3
 8009242:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009244:	4b41      	ldr	r3, [pc, #260]	; (800934c <tcp_listen_input+0x1e0>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009256:	6978      	ldr	r0, [r7, #20]
 8009258:	f7ff fa5a 	bl	8008710 <tcp_next_iss>
 800925c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009276:	4b35      	ldr	r3, [pc, #212]	; (800934c <tcp_listen_input+0x1e0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	1e5a      	subs	r2, r3, #1
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691a      	ldr	r2, [r3, #16]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	7a5b      	ldrb	r3, [r3, #9]
 8009292:	f003 030c 	and.w	r3, r3, #12
 8009296:	b2da      	uxtb	r2, r3
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7a1a      	ldrb	r2, [r3, #8]
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80092a4:	4b2e      	ldr	r3, [pc, #184]	; (8009360 <tcp_listen_input+0x1f4>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	60da      	str	r2, [r3, #12]
 80092ac:	4a2c      	ldr	r2, [pc, #176]	; (8009360 <tcp_listen_input+0x1f4>)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	f003 fd27 	bl	800cd04 <tcp_timer_needed>
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <tcp_listen_input+0x1f8>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80092bc:	6978      	ldr	r0, [r7, #20]
 80092be:	f001 fd8d 	bl	800addc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80092c2:	4b23      	ldr	r3, [pc, #140]	; (8009350 <tcp_listen_input+0x1e4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	89db      	ldrh	r3, [r3, #14]
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f005 f8eb 	bl	800e4c0 <ip4_route>
 80092ea:	4601      	mov	r1, r0
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	3304      	adds	r3, #4
 80092f0:	461a      	mov	r2, r3
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7ff fa32 	bl	800875c <tcp_eff_send_mss_netif>
 80092f8:	4603      	mov	r3, r0
 80092fa:	461a      	mov	r2, r3
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009300:	2112      	movs	r1, #18
 8009302:	6978      	ldr	r0, [r7, #20]
 8009304:	f002 fc9a 	bl	800bc3c <tcp_enqueue_flags>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800930c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009314:	2100      	movs	r1, #0
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	f7fd feda 	bl	80070d0 <tcp_abandon>
      return;
 800931c:	e006      	b.n	800932c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f002 fd7a 	bl	800be18 <tcp_output>
  return;
 8009324:	e001      	b.n	800932a <tcp_listen_input+0x1be>
    return;
 8009326:	bf00      	nop
 8009328:	e000      	b.n	800932c <tcp_listen_input+0x1c0>
  return;
 800932a:	bf00      	nop
}
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	bd90      	pop	{r4, r7, pc}
 8009332:	bf00      	nop
 8009334:	2000056c 	.word	0x2000056c
 8009338:	08012168 	.word	0x08012168
 800933c:	08012360 	.word	0x08012360
 8009340:	080121b4 	.word	0x080121b4
 8009344:	20000564 	.word	0x20000564
 8009348:	2000056a 	.word	0x2000056a
 800934c:	20000560 	.word	0x20000560
 8009350:	20000550 	.word	0x20000550
 8009354:	200037d4 	.word	0x200037d4
 8009358:	200037d8 	.word	0x200037d8
 800935c:	200037c4 	.word	0x200037c4
 8009360:	20006d08 	.word	0x20006d08
 8009364:	20006d04 	.word	0x20006d04

08009368 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af04      	add	r7, sp, #16
 800936e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009370:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <tcp_timewait_input+0xc8>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 0304 	and.w	r3, r3, #4
 8009378:	2b00      	cmp	r3, #0
 800937a:	d153      	bne.n	8009424 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <tcp_timewait_input+0x28>
 8009382:	4b2c      	ldr	r3, [pc, #176]	; (8009434 <tcp_timewait_input+0xcc>)
 8009384:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009388:	492b      	ldr	r1, [pc, #172]	; (8009438 <tcp_timewait_input+0xd0>)
 800938a:	482c      	ldr	r0, [pc, #176]	; (800943c <tcp_timewait_input+0xd4>)
 800938c:	f006 fac6 	bl	800f91c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009390:	4b27      	ldr	r3, [pc, #156]	; (8009430 <tcp_timewait_input+0xc8>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02a      	beq.n	80093f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800939c:	4b28      	ldr	r3, [pc, #160]	; (8009440 <tcp_timewait_input+0xd8>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	db2d      	blt.n	8009406 <tcp_timewait_input+0x9e>
 80093aa:	4b25      	ldr	r3, [pc, #148]	; (8009440 <tcp_timewait_input+0xd8>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80093b6:	440b      	add	r3, r1
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dc23      	bgt.n	8009406 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093be:	4b21      	ldr	r3, [pc, #132]	; (8009444 <tcp_timewait_input+0xdc>)
 80093c0:	6819      	ldr	r1, [r3, #0]
 80093c2:	4b21      	ldr	r3, [pc, #132]	; (8009448 <tcp_timewait_input+0xe0>)
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <tcp_timewait_input+0xd8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093ce:	4b1f      	ldr	r3, [pc, #124]	; (800944c <tcp_timewait_input+0xe4>)
 80093d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093d2:	885b      	ldrh	r3, [r3, #2]
 80093d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093d6:	4a1d      	ldr	r2, [pc, #116]	; (800944c <tcp_timewait_input+0xe4>)
 80093d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093da:	8812      	ldrh	r2, [r2, #0]
 80093dc:	b292      	uxth	r2, r2
 80093de:	9202      	str	r2, [sp, #8]
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <tcp_timewait_input+0xe8>)
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4b1b      	ldr	r3, [pc, #108]	; (8009454 <tcp_timewait_input+0xec>)
 80093e8:	4602      	mov	r2, r0
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f003 fac8 	bl	800c980 <tcp_rst>
      return;
 80093f0:	e01b      	b.n	800942a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80093f2:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <tcp_timewait_input+0xc8>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <tcp_timewait_input+0xf0>)
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <tcp_timewait_input+0xe0>)
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00c      	beq.n	8009428 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	8b5b      	ldrh	r3, [r3, #26]
 8009412:	f043 0302 	orr.w	r3, r3, #2
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f002 fcfb 	bl	800be18 <tcp_output>
  }
  return;
 8009422:	e001      	b.n	8009428 <tcp_timewait_input+0xc0>
    return;
 8009424:	bf00      	nop
 8009426:	e000      	b.n	800942a <tcp_timewait_input+0xc2>
  return;
 8009428:	bf00      	nop
}
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	2000056c 	.word	0x2000056c
 8009434:	08012168 	.word	0x08012168
 8009438:	08012380 	.word	0x08012380
 800943c:	080121b4 	.word	0x080121b4
 8009440:	20000560 	.word	0x20000560
 8009444:	20000564 	.word	0x20000564
 8009448:	2000056a 	.word	0x2000056a
 800944c:	20000550 	.word	0x20000550
 8009450:	200037d4 	.word	0x200037d4
 8009454:	200037d8 	.word	0x200037d8
 8009458:	20006d0c 	.word	0x20006d0c

0800945c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800945c:	b590      	push	{r4, r7, lr}
 800945e:	b08d      	sub	sp, #52	; 0x34
 8009460:	af04      	add	r7, sp, #16
 8009462:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <tcp_process+0x24>
 8009472:	4ba5      	ldr	r3, [pc, #660]	; (8009708 <tcp_process+0x2ac>)
 8009474:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009478:	49a4      	ldr	r1, [pc, #656]	; (800970c <tcp_process+0x2b0>)
 800947a:	48a5      	ldr	r0, [pc, #660]	; (8009710 <tcp_process+0x2b4>)
 800947c:	f006 fa4e 	bl	800f91c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009480:	4ba4      	ldr	r3, [pc, #656]	; (8009714 <tcp_process+0x2b8>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d04e      	beq.n	800952a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7d1b      	ldrb	r3, [r3, #20]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d108      	bne.n	80094a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009498:	4b9f      	ldr	r3, [pc, #636]	; (8009718 <tcp_process+0x2bc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d123      	bne.n	80094e8 <tcp_process+0x8c>
        acceptable = 1;
 80094a0:	2301      	movs	r3, #1
 80094a2:	76fb      	strb	r3, [r7, #27]
 80094a4:	e020      	b.n	80094e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094aa:	4b9c      	ldr	r3, [pc, #624]	; (800971c <tcp_process+0x2c0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d102      	bne.n	80094b8 <tcp_process+0x5c>
        acceptable = 1;
 80094b2:	2301      	movs	r3, #1
 80094b4:	76fb      	strb	r3, [r7, #27]
 80094b6:	e017      	b.n	80094e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80094b8:	4b98      	ldr	r3, [pc, #608]	; (800971c <tcp_process+0x2c0>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	db10      	blt.n	80094e8 <tcp_process+0x8c>
 80094c6:	4b95      	ldr	r3, [pc, #596]	; (800971c <tcp_process+0x2c0>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094d2:	440b      	add	r3, r1
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dc06      	bgt.n	80094e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	8b5b      	ldrh	r3, [r3, #26]
 80094de:	f043 0302 	orr.w	r3, r3, #2
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80094e8:	7efb      	ldrb	r3, [r7, #27]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01b      	beq.n	8009526 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7d1b      	ldrb	r3, [r3, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <tcp_process+0xa8>
 80094f6:	4b84      	ldr	r3, [pc, #528]	; (8009708 <tcp_process+0x2ac>)
 80094f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80094fc:	4988      	ldr	r1, [pc, #544]	; (8009720 <tcp_process+0x2c4>)
 80094fe:	4884      	ldr	r0, [pc, #528]	; (8009710 <tcp_process+0x2b4>)
 8009500:	f006 fa0c 	bl	800f91c <iprintf>
      recv_flags |= TF_RESET;
 8009504:	4b87      	ldr	r3, [pc, #540]	; (8009724 <tcp_process+0x2c8>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f043 0308 	orr.w	r3, r3, #8
 800950c:	b2da      	uxtb	r2, r3
 800950e:	4b85      	ldr	r3, [pc, #532]	; (8009724 <tcp_process+0x2c8>)
 8009510:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8b5b      	ldrh	r3, [r3, #26]
 8009516:	f023 0301 	bic.w	r3, r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009520:	f06f 030d 	mvn.w	r3, #13
 8009524:	e37a      	b.n	8009c1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	e378      	b.n	8009c1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800952a:	4b7a      	ldr	r3, [pc, #488]	; (8009714 <tcp_process+0x2b8>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d010      	beq.n	8009558 <tcp_process+0xfc>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	7d1b      	ldrb	r3, [r3, #20]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d00c      	beq.n	8009558 <tcp_process+0xfc>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7d1b      	ldrb	r3, [r3, #20]
 8009542:	2b03      	cmp	r3, #3
 8009544:	d008      	beq.n	8009558 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8b5b      	ldrh	r3, [r3, #26]
 800954a:	f043 0302 	orr.w	r3, r3, #2
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	e361      	b.n	8009c1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	8b5b      	ldrh	r3, [r3, #26]
 800955c:	f003 0310 	and.w	r3, r3, #16
 8009560:	2b00      	cmp	r3, #0
 8009562:	d103      	bne.n	800956c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009564:	4b70      	ldr	r3, [pc, #448]	; (8009728 <tcp_process+0x2cc>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 fc2d 	bl	800addc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7d1b      	ldrb	r3, [r3, #20]
 8009586:	3b02      	subs	r3, #2
 8009588:	2b07      	cmp	r3, #7
 800958a:	f200 8337 	bhi.w	8009bfc <tcp_process+0x7a0>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <tcp_process+0x138>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095b5 	.word	0x080095b5
 8009598:	080097e5 	.word	0x080097e5
 800959c:	0800995d 	.word	0x0800995d
 80095a0:	08009987 	.word	0x08009987
 80095a4:	08009aab 	.word	0x08009aab
 80095a8:	0800995d 	.word	0x0800995d
 80095ac:	08009b37 	.word	0x08009b37
 80095b0:	08009bc7 	.word	0x08009bc7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80095b4:	4b57      	ldr	r3, [pc, #348]	; (8009714 <tcp_process+0x2b8>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 0310 	and.w	r3, r3, #16
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80e4 	beq.w	800978a <tcp_process+0x32e>
 80095c2:	4b54      	ldr	r3, [pc, #336]	; (8009714 <tcp_process+0x2b8>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80dd 	beq.w	800978a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	4b50      	ldr	r3, [pc, #320]	; (8009718 <tcp_process+0x2bc>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	f040 80d5 	bne.w	800978a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80095e0:	4b4e      	ldr	r3, [pc, #312]	; (800971c <tcp_process+0x2c0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80095f2:	4b49      	ldr	r3, [pc, #292]	; (8009718 <tcp_process+0x2bc>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80095fa:	4b4c      	ldr	r3, [pc, #304]	; (800972c <tcp_process+0x2d0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	89db      	ldrh	r3, [r3, #14]
 8009600:	b29a      	uxth	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009614:	4b41      	ldr	r3, [pc, #260]	; (800971c <tcp_process+0x2c0>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2204      	movs	r2, #4
 8009622:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3304      	adds	r3, #4
 800962c:	4618      	mov	r0, r3
 800962e:	f004 ff47 	bl	800e4c0 <ip4_route>
 8009632:	4601      	mov	r1, r0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3304      	adds	r3, #4
 8009638:	461a      	mov	r2, r3
 800963a:	4620      	mov	r0, r4
 800963c:	f7ff f88e 	bl	800875c <tcp_eff_send_mss_netif>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800964c:	009a      	lsls	r2, r3, #2
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	f241 111c 	movw	r1, #4380	; 0x111c
 8009658:	428b      	cmp	r3, r1
 800965a:	bf38      	it	cc
 800965c:	460b      	movcc	r3, r1
 800965e:	429a      	cmp	r2, r3
 8009660:	d204      	bcs.n	800966c <tcp_process+0x210>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	b29b      	uxth	r3, r3
 800966a:	e00d      	b.n	8009688 <tcp_process+0x22c>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	f241 121c 	movw	r2, #4380	; 0x111c
 8009676:	4293      	cmp	r3, r2
 8009678:	d904      	bls.n	8009684 <tcp_process+0x228>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800967e:	005b      	lsls	r3, r3, #1
 8009680:	b29b      	uxth	r3, r3
 8009682:	e001      	b.n	8009688 <tcp_process+0x22c>
 8009684:	f241 131c 	movw	r3, #4380	; 0x111c
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <tcp_process+0x24a>
 8009698:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <tcp_process+0x2ac>)
 800969a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800969e:	4924      	ldr	r1, [pc, #144]	; (8009730 <tcp_process+0x2d4>)
 80096a0:	481b      	ldr	r0, [pc, #108]	; (8009710 <tcp_process+0x2b4>)
 80096a2:	f006 f93b 	bl	800f91c <iprintf>
        --pcb->snd_queuelen;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d111      	bne.n	80096e6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <tcp_process+0x280>
 80096ce:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <tcp_process+0x2ac>)
 80096d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80096d4:	4917      	ldr	r1, [pc, #92]	; (8009734 <tcp_process+0x2d8>)
 80096d6:	480e      	ldr	r0, [pc, #56]	; (8009710 <tcp_process+0x2b4>)
 80096d8:	f006 f920 	bl	800f91c <iprintf>
          pcb->unsent = rseg->next;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80096e4:	e003      	b.n	80096ee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80096ee:	69f8      	ldr	r0, [r7, #28]
 80096f0:	f7fe fc51 	bl	8007f96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11d      	bne.n	8009738 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009702:	861a      	strh	r2, [r3, #48]	; 0x30
 8009704:	e01f      	b.n	8009746 <tcp_process+0x2ea>
 8009706:	bf00      	nop
 8009708:	08012168 	.word	0x08012168
 800970c:	080123a0 	.word	0x080123a0
 8009710:	080121b4 	.word	0x080121b4
 8009714:	2000056c 	.word	0x2000056c
 8009718:	20000564 	.word	0x20000564
 800971c:	20000560 	.word	0x20000560
 8009720:	080123bc 	.word	0x080123bc
 8009724:	2000056d 	.word	0x2000056d
 8009728:	20006d0c 	.word	0x20006d0c
 800972c:	20000550 	.word	0x20000550
 8009730:	080123dc 	.word	0x080123dc
 8009734:	080123f4 	.word	0x080123f4
        } else {
          pcb->rtime = 0;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <tcp_process+0x30a>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	6910      	ldr	r0, [r2, #16]
 800975a:	2200      	movs	r2, #0
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4798      	blx	r3
 8009760:	4603      	mov	r3, r0
 8009762:	76bb      	strb	r3, [r7, #26]
 8009764:	e001      	b.n	800976a <tcp_process+0x30e>
 8009766:	2300      	movs	r3, #0
 8009768:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800976a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800976e:	f113 0f0d 	cmn.w	r3, #13
 8009772:	d102      	bne.n	800977a <tcp_process+0x31e>
          return ERR_ABRT;
 8009774:	f06f 030c 	mvn.w	r3, #12
 8009778:	e250      	b.n	8009c1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8b5b      	ldrh	r3, [r3, #26]
 800977e:	f043 0302 	orr.w	r3, r3, #2
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009788:	e23a      	b.n	8009c00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800978a:	4b9d      	ldr	r3, [pc, #628]	; (8009a00 <tcp_process+0x5a4>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 8234 	beq.w	8009c00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009798:	4b9a      	ldr	r3, [pc, #616]	; (8009a04 <tcp_process+0x5a8>)
 800979a:	6819      	ldr	r1, [r3, #0]
 800979c:	4b9a      	ldr	r3, [pc, #616]	; (8009a08 <tcp_process+0x5ac>)
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4b9a      	ldr	r3, [pc, #616]	; (8009a0c <tcp_process+0x5b0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097a8:	4b99      	ldr	r3, [pc, #612]	; (8009a10 <tcp_process+0x5b4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097b0:	4a97      	ldr	r2, [pc, #604]	; (8009a10 <tcp_process+0x5b4>)
 80097b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097b4:	8812      	ldrh	r2, [r2, #0]
 80097b6:	b292      	uxth	r2, r2
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	4b95      	ldr	r3, [pc, #596]	; (8009a14 <tcp_process+0x5b8>)
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4b95      	ldr	r3, [pc, #596]	; (8009a18 <tcp_process+0x5bc>)
 80097c2:	4602      	mov	r2, r0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f003 f8db 	bl	800c980 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097d0:	2b05      	cmp	r3, #5
 80097d2:	f200 8215 	bhi.w	8009c00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f002 fea5 	bl	800c52c <tcp_rexmit_rto>
      break;
 80097e2:	e20d      	b.n	8009c00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80097e4:	4b86      	ldr	r3, [pc, #536]	; (8009a00 <tcp_process+0x5a4>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80a1 	beq.w	8009934 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097f2:	4b84      	ldr	r3, [pc, #528]	; (8009a04 <tcp_process+0x5a8>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	db7e      	blt.n	8009900 <tcp_process+0x4a4>
 8009802:	4b80      	ldr	r3, [pc, #512]	; (8009a04 <tcp_process+0x5a8>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	dc77      	bgt.n	8009900 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2204      	movs	r2, #4
 8009814:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d102      	bne.n	8009824 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800981e:	23fa      	movs	r3, #250	; 0xfa
 8009820:	76bb      	strb	r3, [r7, #26]
 8009822:	e01d      	b.n	8009860 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d106      	bne.n	800983c <tcp_process+0x3e0>
 800982e:	4b7b      	ldr	r3, [pc, #492]	; (8009a1c <tcp_process+0x5c0>)
 8009830:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009834:	497a      	ldr	r1, [pc, #488]	; (8009a20 <tcp_process+0x5c4>)
 8009836:	487b      	ldr	r0, [pc, #492]	; (8009a24 <tcp_process+0x5c8>)
 8009838:	f006 f870 	bl	800f91c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <tcp_process+0x400>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6910      	ldr	r0, [r2, #16]
 8009850:	2200      	movs	r2, #0
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4798      	blx	r3
 8009856:	4603      	mov	r3, r0
 8009858:	76bb      	strb	r3, [r7, #26]
 800985a:	e001      	b.n	8009860 <tcp_process+0x404>
 800985c:	23f0      	movs	r3, #240	; 0xf0
 800985e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009860:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00a      	beq.n	800987e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009868:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800986c:	f113 0f0d 	cmn.w	r3, #13
 8009870:	d002      	beq.n	8009878 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7fd fcea 	bl	800724c <tcp_abort>
            }
            return ERR_ABRT;
 8009878:	f06f 030c 	mvn.w	r3, #12
 800987c:	e1ce      	b.n	8009c1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fae0 	bl	8009e44 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009884:	4b68      	ldr	r3, [pc, #416]	; (8009a28 <tcp_process+0x5cc>)
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <tcp_process+0x43c>
            recv_acked--;
 800988c:	4b66      	ldr	r3, [pc, #408]	; (8009a28 <tcp_process+0x5cc>)
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	4b64      	ldr	r3, [pc, #400]	; (8009a28 <tcp_process+0x5cc>)
 8009896:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800989c:	009a      	lsls	r2, r3, #2
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf38      	it	cc
 80098ac:	460b      	movcc	r3, r1
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d204      	bcs.n	80098bc <tcp_process+0x460>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	e00d      	b.n	80098d8 <tcp_process+0x47c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d904      	bls.n	80098d4 <tcp_process+0x478>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	e001      	b.n	80098d8 <tcp_process+0x47c>
 80098d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80098de:	4b53      	ldr	r3, [pc, #332]	; (8009a2c <tcp_process+0x5d0>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d037      	beq.n	800995a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	8b5b      	ldrh	r3, [r3, #26]
 80098ee:	f043 0302 	orr.w	r3, r3, #2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2207      	movs	r2, #7
 80098fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80098fe:	e02c      	b.n	800995a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009900:	4b40      	ldr	r3, [pc, #256]	; (8009a04 <tcp_process+0x5a8>)
 8009902:	6819      	ldr	r1, [r3, #0]
 8009904:	4b40      	ldr	r3, [pc, #256]	; (8009a08 <tcp_process+0x5ac>)
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	4b40      	ldr	r3, [pc, #256]	; (8009a0c <tcp_process+0x5b0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009910:	4b3f      	ldr	r3, [pc, #252]	; (8009a10 <tcp_process+0x5b4>)
 8009912:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009914:	885b      	ldrh	r3, [r3, #2]
 8009916:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009918:	4a3d      	ldr	r2, [pc, #244]	; (8009a10 <tcp_process+0x5b4>)
 800991a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800991c:	8812      	ldrh	r2, [r2, #0]
 800991e:	b292      	uxth	r2, r2
 8009920:	9202      	str	r2, [sp, #8]
 8009922:	9301      	str	r3, [sp, #4]
 8009924:	4b3b      	ldr	r3, [pc, #236]	; (8009a14 <tcp_process+0x5b8>)
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	4b3b      	ldr	r3, [pc, #236]	; (8009a18 <tcp_process+0x5bc>)
 800992a:	4602      	mov	r2, r0
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f003 f827 	bl	800c980 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009932:	e167      	b.n	8009c04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009934:	4b32      	ldr	r3, [pc, #200]	; (8009a00 <tcp_process+0x5a4>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8161 	beq.w	8009c04 <tcp_process+0x7a8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	4b30      	ldr	r3, [pc, #192]	; (8009a0c <tcp_process+0x5b0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	f040 8159 	bne.w	8009c04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f002 fe0c 	bl	800c570 <tcp_rexmit>
      break;
 8009958:	e154      	b.n	8009c04 <tcp_process+0x7a8>
 800995a:	e153      	b.n	8009c04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fa71 	bl	8009e44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009962:	4b32      	ldr	r3, [pc, #200]	; (8009a2c <tcp_process+0x5d0>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	f003 0320 	and.w	r3, r3, #32
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 814c 	beq.w	8009c08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	8b5b      	ldrh	r3, [r3, #26]
 8009974:	f043 0302 	orr.w	r3, r3, #2
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2207      	movs	r2, #7
 8009982:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009984:	e140      	b.n	8009c08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fa5c 	bl	8009e44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800998c:	4b27      	ldr	r3, [pc, #156]	; (8009a2c <tcp_process+0x5d0>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	d071      	beq.n	8009a7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009998:	4b19      	ldr	r3, [pc, #100]	; (8009a00 <tcp_process+0x5a4>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d060      	beq.n	8009a66 <tcp_process+0x60a>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099a8:	4b16      	ldr	r3, [pc, #88]	; (8009a04 <tcp_process+0x5a8>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d15a      	bne.n	8009a66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d156      	bne.n	8009a66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8b5b      	ldrh	r3, [r3, #26]
 80099bc:	f043 0302 	orr.w	r3, r3, #2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7fe fdbe 	bl	8008548 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80099cc:	4b18      	ldr	r3, [pc, #96]	; (8009a30 <tcp_process+0x5d4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d105      	bne.n	80099e2 <tcp_process+0x586>
 80099d6:	4b16      	ldr	r3, [pc, #88]	; (8009a30 <tcp_process+0x5d4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	4a14      	ldr	r2, [pc, #80]	; (8009a30 <tcp_process+0x5d4>)
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	e02e      	b.n	8009a40 <tcp_process+0x5e4>
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <tcp_process+0x5d4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e027      	b.n	8009a3a <tcp_process+0x5de>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d11f      	bne.n	8009a34 <tcp_process+0x5d8>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	60da      	str	r2, [r3, #12]
 80099fc:	e020      	b.n	8009a40 <tcp_process+0x5e4>
 80099fe:	bf00      	nop
 8009a00:	2000056c 	.word	0x2000056c
 8009a04:	20000564 	.word	0x20000564
 8009a08:	2000056a 	.word	0x2000056a
 8009a0c:	20000560 	.word	0x20000560
 8009a10:	20000550 	.word	0x20000550
 8009a14:	200037d4 	.word	0x200037d4
 8009a18:	200037d8 	.word	0x200037d8
 8009a1c:	08012168 	.word	0x08012168
 8009a20:	08012408 	.word	0x08012408
 8009a24:	080121b4 	.word	0x080121b4
 8009a28:	20000568 	.word	0x20000568
 8009a2c:	2000056d 	.word	0x2000056d
 8009a30:	20006d08 	.word	0x20006d08
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	617b      	str	r3, [r7, #20]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1d4      	bne.n	80099ea <tcp_process+0x58e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	60da      	str	r2, [r3, #12]
 8009a46:	4b77      	ldr	r3, [pc, #476]	; (8009c24 <tcp_process+0x7c8>)
 8009a48:	2201      	movs	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	220a      	movs	r2, #10
 8009a50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009a52:	4b75      	ldr	r3, [pc, #468]	; (8009c28 <tcp_process+0x7cc>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60da      	str	r2, [r3, #12]
 8009a5a:	4a73      	ldr	r2, [pc, #460]	; (8009c28 <tcp_process+0x7cc>)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	f003 f950 	bl	800cd04 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009a64:	e0d2      	b.n	8009c0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	8b5b      	ldrh	r3, [r3, #26]
 8009a6a:	f043 0302 	orr.w	r3, r3, #2
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2208      	movs	r2, #8
 8009a78:	751a      	strb	r2, [r3, #20]
      break;
 8009a7a:	e0c7      	b.n	8009c0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a7c:	4b6b      	ldr	r3, [pc, #428]	; (8009c2c <tcp_process+0x7d0>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 80c1 	beq.w	8009c0c <tcp_process+0x7b0>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a8e:	4b68      	ldr	r3, [pc, #416]	; (8009c30 <tcp_process+0x7d4>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	f040 80ba 	bne.w	8009c0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 80b5 	bne.w	8009c0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2206      	movs	r2, #6
 8009aa6:	751a      	strb	r2, [r3, #20]
      break;
 8009aa8:	e0b0      	b.n	8009c0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f9ca 	bl	8009e44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ab0:	4b60      	ldr	r3, [pc, #384]	; (8009c34 <tcp_process+0x7d8>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 80a9 	beq.w	8009c10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	8b5b      	ldrh	r3, [r3, #26]
 8009ac2:	f043 0302 	orr.w	r3, r3, #2
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7fe fd3b 	bl	8008548 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009ad2:	4b59      	ldr	r3, [pc, #356]	; (8009c38 <tcp_process+0x7dc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d105      	bne.n	8009ae8 <tcp_process+0x68c>
 8009adc:	4b56      	ldr	r3, [pc, #344]	; (8009c38 <tcp_process+0x7dc>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	4a55      	ldr	r2, [pc, #340]	; (8009c38 <tcp_process+0x7dc>)
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	e013      	b.n	8009b10 <tcp_process+0x6b4>
 8009ae8:	4b53      	ldr	r3, [pc, #332]	; (8009c38 <tcp_process+0x7dc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	e00c      	b.n	8009b0a <tcp_process+0x6ae>
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d104      	bne.n	8009b04 <tcp_process+0x6a8>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	60da      	str	r2, [r3, #12]
 8009b02:	e005      	b.n	8009b10 <tcp_process+0x6b4>
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1ef      	bne.n	8009af0 <tcp_process+0x694>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	60da      	str	r2, [r3, #12]
 8009b16:	4b43      	ldr	r3, [pc, #268]	; (8009c24 <tcp_process+0x7c8>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	220a      	movs	r2, #10
 8009b20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b22:	4b41      	ldr	r3, [pc, #260]	; (8009c28 <tcp_process+0x7cc>)
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	60da      	str	r2, [r3, #12]
 8009b2a:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <tcp_process+0x7cc>)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	f003 f8e8 	bl	800cd04 <tcp_timer_needed>
      }
      break;
 8009b34:	e06c      	b.n	8009c10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f984 	bl	8009e44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009b3c:	4b3b      	ldr	r3, [pc, #236]	; (8009c2c <tcp_process+0x7d0>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f003 0310 	and.w	r3, r3, #16
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d065      	beq.n	8009c14 <tcp_process+0x7b8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b4c:	4b38      	ldr	r3, [pc, #224]	; (8009c30 <tcp_process+0x7d4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d15f      	bne.n	8009c14 <tcp_process+0x7b8>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d15b      	bne.n	8009c14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7fe fcf3 	bl	8008548 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009b62:	4b35      	ldr	r3, [pc, #212]	; (8009c38 <tcp_process+0x7dc>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d105      	bne.n	8009b78 <tcp_process+0x71c>
 8009b6c:	4b32      	ldr	r3, [pc, #200]	; (8009c38 <tcp_process+0x7dc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	4a31      	ldr	r2, [pc, #196]	; (8009c38 <tcp_process+0x7dc>)
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e013      	b.n	8009ba0 <tcp_process+0x744>
 8009b78:	4b2f      	ldr	r3, [pc, #188]	; (8009c38 <tcp_process+0x7dc>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	e00c      	b.n	8009b9a <tcp_process+0x73e>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d104      	bne.n	8009b94 <tcp_process+0x738>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	60da      	str	r2, [r3, #12]
 8009b92:	e005      	b.n	8009ba0 <tcp_process+0x744>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1ef      	bne.n	8009b80 <tcp_process+0x724>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	60da      	str	r2, [r3, #12]
 8009ba6:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <tcp_process+0x7c8>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	220a      	movs	r2, #10
 8009bb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009bb2:	4b1d      	ldr	r3, [pc, #116]	; (8009c28 <tcp_process+0x7cc>)
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
 8009bba:	4a1b      	ldr	r2, [pc, #108]	; (8009c28 <tcp_process+0x7cc>)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	f003 f8a0 	bl	800cd04 <tcp_timer_needed>
      }
      break;
 8009bc4:	e026      	b.n	8009c14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f93c 	bl	8009e44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009bcc:	4b17      	ldr	r3, [pc, #92]	; (8009c2c <tcp_process+0x7d0>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	f003 0310 	and.w	r3, r3, #16
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01f      	beq.n	8009c18 <tcp_process+0x7bc>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bdc:	4b14      	ldr	r3, [pc, #80]	; (8009c30 <tcp_process+0x7d4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d119      	bne.n	8009c18 <tcp_process+0x7bc>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d115      	bne.n	8009c18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009bec:	4b11      	ldr	r3, [pc, #68]	; (8009c34 <tcp_process+0x7d8>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f043 0310 	orr.w	r3, r3, #16
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	4b0f      	ldr	r3, [pc, #60]	; (8009c34 <tcp_process+0x7d8>)
 8009bf8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009bfa:	e00d      	b.n	8009c18 <tcp_process+0x7bc>
    default:
      break;
 8009bfc:	bf00      	nop
 8009bfe:	e00c      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c00:	bf00      	nop
 8009c02:	e00a      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c04:	bf00      	nop
 8009c06:	e008      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c08:	bf00      	nop
 8009c0a:	e006      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c0c:	bf00      	nop
 8009c0e:	e004      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <tcp_process+0x7be>
      break;
 8009c18:	bf00      	nop
  }
  return ERR_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3724      	adds	r7, #36	; 0x24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd90      	pop	{r4, r7, pc}
 8009c24:	20006d04 	.word	0x20006d04
 8009c28:	20006d18 	.word	0x20006d18
 8009c2c:	2000056c 	.word	0x2000056c
 8009c30:	20000564 	.word	0x20000564
 8009c34:	2000056d 	.word	0x2000056d
 8009c38:	20006d08 	.word	0x20006d08

08009c3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009c3c:	b590      	push	{r4, r7, lr}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d106      	bne.n	8009c5a <tcp_oos_insert_segment+0x1e>
 8009c4c:	4b3b      	ldr	r3, [pc, #236]	; (8009d3c <tcp_oos_insert_segment+0x100>)
 8009c4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009c52:	493b      	ldr	r1, [pc, #236]	; (8009d40 <tcp_oos_insert_segment+0x104>)
 8009c54:	483b      	ldr	r0, [pc, #236]	; (8009d44 <tcp_oos_insert_segment+0x108>)
 8009c56:	f005 fe61 	bl	800f91c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	899b      	ldrh	r3, [r3, #12]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fb fa4c 	bl	8005100 <lwip_htons>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d028      	beq.n	8009cc6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009c74:	6838      	ldr	r0, [r7, #0]
 8009c76:	f7fe f979 	bl	8007f6c <tcp_segs_free>
    next = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	603b      	str	r3, [r7, #0]
 8009c7e:	e056      	b.n	8009d2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	899b      	ldrh	r3, [r3, #12]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fb fa39 	bl	8005100 <lwip_htons>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00d      	beq.n	8009cb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	899b      	ldrh	r3, [r3, #12]
 8009ca0:	b29c      	uxth	r4, r3
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	f7fb fa2c 	bl	8005100 <lwip_htons>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	4322      	orrs	r2, r4
 8009cb2:	b292      	uxth	r2, r2
 8009cb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f7fe f968 	bl	8007f96 <tcp_seg_free>
    while (next &&
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	891b      	ldrh	r3, [r3, #8]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4b1d      	ldr	r3, [pc, #116]	; (8009d48 <tcp_oos_insert_segment+0x10c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	441a      	add	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	8909      	ldrh	r1, [r1, #8]
 8009ce2:	440b      	add	r3, r1
 8009ce4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	daca      	bge.n	8009c80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01e      	beq.n	8009d2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	891b      	ldrh	r3, [r3, #8]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <tcp_oos_insert_segment+0x10c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dd12      	ble.n	8009d2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <tcp_oos_insert_segment+0x10c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	891b      	ldrh	r3, [r3, #8]
 8009d26:	4619      	mov	r1, r3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f7fc fb81 	bl	8006430 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	601a      	str	r2, [r3, #0]
}
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd90      	pop	{r4, r7, pc}
 8009d3c:	08012168 	.word	0x08012168
 8009d40:	08012428 	.word	0x08012428
 8009d44:	080121b4 	.word	0x080121b4
 8009d48:	20000560 	.word	0x20000560

08009d4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009d4c:	b5b0      	push	{r4, r5, r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009d5a:	e03e      	b.n	8009dda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fc fd6e 	bl	800684c <pbuf_clen>
 8009d70:	4603      	mov	r3, r0
 8009d72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d7a:	8a7a      	ldrh	r2, [r7, #18]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d906      	bls.n	8009d8e <tcp_free_acked_segments+0x42>
 8009d80:	4b2a      	ldr	r3, [pc, #168]	; (8009e2c <tcp_free_acked_segments+0xe0>)
 8009d82:	f240 4257 	movw	r2, #1111	; 0x457
 8009d86:	492a      	ldr	r1, [pc, #168]	; (8009e30 <tcp_free_acked_segments+0xe4>)
 8009d88:	482a      	ldr	r0, [pc, #168]	; (8009e34 <tcp_free_acked_segments+0xe8>)
 8009d8a:	f005 fdc7 	bl	800f91c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009d94:	8a7b      	ldrh	r3, [r7, #18]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	891a      	ldrh	r2, [r3, #8]
 8009da4:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <tcp_free_acked_segments+0xec>)
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	4413      	add	r3, r2
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	4b22      	ldr	r3, [pc, #136]	; (8009e38 <tcp_free_acked_segments+0xec>)
 8009dae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009db0:	6978      	ldr	r0, [r7, #20]
 8009db2:	f7fe f8f0 	bl	8007f96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00c      	beq.n	8009dda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d109      	bne.n	8009dda <tcp_free_acked_segments+0x8e>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <tcp_free_acked_segments+0x8e>
 8009dcc:	4b17      	ldr	r3, [pc, #92]	; (8009e2c <tcp_free_acked_segments+0xe0>)
 8009dce:	f240 4261 	movw	r2, #1121	; 0x461
 8009dd2:	491a      	ldr	r1, [pc, #104]	; (8009e3c <tcp_free_acked_segments+0xf0>)
 8009dd4:	4817      	ldr	r0, [pc, #92]	; (8009e34 <tcp_free_acked_segments+0xe8>)
 8009dd6:	f005 fda1 	bl	800f91c <iprintf>
  while (seg_list != NULL &&
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d020      	beq.n	8009e22 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fb f99f 	bl	800512a <lwip_htonl>
 8009dec:	4604      	mov	r4, r0
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	891b      	ldrh	r3, [r3, #8]
 8009df2:	461d      	mov	r5, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	899b      	ldrh	r3, [r3, #12]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fb f97f 	bl	8005100 <lwip_htons>
 8009e02:	4603      	mov	r3, r0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <tcp_free_acked_segments+0xc6>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e000      	b.n	8009e14 <tcp_free_acked_segments+0xc8>
 8009e12:	2300      	movs	r3, #0
 8009e14:	442b      	add	r3, r5
 8009e16:	18e2      	adds	r2, r4, r3
 8009e18:	4b09      	ldr	r3, [pc, #36]	; (8009e40 <tcp_free_acked_segments+0xf4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dd9c      	ble.n	8009d5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009e22:	68bb      	ldr	r3, [r7, #8]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e2c:	08012168 	.word	0x08012168
 8009e30:	08012450 	.word	0x08012450
 8009e34:	080121b4 	.word	0x080121b4
 8009e38:	20000568 	.word	0x20000568
 8009e3c:	08012478 	.word	0x08012478
 8009e40:	20000564 	.word	0x20000564

08009e44 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009e44:	b5b0      	push	{r4, r5, r7, lr}
 8009e46:	b094      	sub	sp, #80	; 0x50
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <tcp_receive+0x20>
 8009e56:	4ba6      	ldr	r3, [pc, #664]	; (800a0f0 <tcp_receive+0x2ac>)
 8009e58:	f240 427b 	movw	r2, #1147	; 0x47b
 8009e5c:	49a5      	ldr	r1, [pc, #660]	; (800a0f4 <tcp_receive+0x2b0>)
 8009e5e:	48a6      	ldr	r0, [pc, #664]	; (800a0f8 <tcp_receive+0x2b4>)
 8009e60:	f005 fd5c 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7d1b      	ldrb	r3, [r3, #20]
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d806      	bhi.n	8009e7a <tcp_receive+0x36>
 8009e6c:	4ba0      	ldr	r3, [pc, #640]	; (800a0f0 <tcp_receive+0x2ac>)
 8009e6e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009e72:	49a2      	ldr	r1, [pc, #648]	; (800a0fc <tcp_receive+0x2b8>)
 8009e74:	48a0      	ldr	r0, [pc, #640]	; (800a0f8 <tcp_receive+0x2b4>)
 8009e76:	f005 fd51 	bl	800f91c <iprintf>

  if (flags & TCP_ACK) {
 8009e7a:	4ba1      	ldr	r3, [pc, #644]	; (800a100 <tcp_receive+0x2bc>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 8263 	beq.w	800a34e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e8e:	461a      	mov	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e94:	4413      	add	r3, r2
 8009e96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e9c:	4b99      	ldr	r3, [pc, #612]	; (800a104 <tcp_receive+0x2c0>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	db1b      	blt.n	8009ede <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eaa:	4b96      	ldr	r3, [pc, #600]	; (800a104 <tcp_receive+0x2c0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d106      	bne.n	8009ec0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009eb6:	4b94      	ldr	r3, [pc, #592]	; (800a108 <tcp_receive+0x2c4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	db0e      	blt.n	8009ede <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ec4:	4b90      	ldr	r3, [pc, #576]	; (800a108 <tcp_receive+0x2c4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d125      	bne.n	8009f18 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ecc:	4b8f      	ldr	r3, [pc, #572]	; (800a10c <tcp_receive+0x2c8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	89db      	ldrh	r3, [r3, #14]
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d91c      	bls.n	8009f18 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009ede:	4b8b      	ldr	r3, [pc, #556]	; (800a10c <tcp_receive+0x2c8>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	89db      	ldrh	r3, [r3, #14]
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d205      	bcs.n	8009f08 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009f08:	4b7e      	ldr	r3, [pc, #504]	; (800a104 <tcp_receive+0x2c0>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009f10:	4b7d      	ldr	r3, [pc, #500]	; (800a108 <tcp_receive+0x2c4>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009f18:	4b7b      	ldr	r3, [pc, #492]	; (800a108 <tcp_receive+0x2c4>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dc58      	bgt.n	8009fd8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009f26:	4b7a      	ldr	r3, [pc, #488]	; (800a110 <tcp_receive+0x2cc>)
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d14b      	bne.n	8009fc6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009f38:	4413      	add	r3, r2
 8009f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d142      	bne.n	8009fc6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	db3d      	blt.n	8009fc6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f4e:	4b6e      	ldr	r3, [pc, #440]	; (800a108 <tcp_receive+0x2c4>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d137      	bne.n	8009fc6 <tcp_receive+0x182>
              found_dupack = 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f60:	2bff      	cmp	r3, #255	; 0xff
 8009f62:	d007      	beq.n	8009f74 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d91b      	bls.n	8009fb6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f88:	4413      	add	r3, r2
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d30a      	bcc.n	8009fac <tcp_receive+0x168>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fa0:	4413      	add	r3, r2
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009faa:	e004      	b.n	8009fb6 <tcp_receive+0x172>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d902      	bls.n	8009fc6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f002 fb41 	bl	800c648 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f040 8160 	bne.w	800a28e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fd6:	e15a      	b.n	800a28e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009fd8:	4b4b      	ldr	r3, [pc, #300]	; (800a108 <tcp_receive+0x2c4>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f2c0 814d 	blt.w	800a284 <tcp_receive+0x440>
 8009fea:	4b47      	ldr	r3, [pc, #284]	; (800a108 <tcp_receive+0x2c4>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f300 8145 	bgt.w	800a284 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	8b5b      	ldrh	r3, [r3, #26]
 8009ffe:	f003 0304 	and.w	r3, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	d010      	beq.n	800a028 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	8b5b      	ldrh	r3, [r3, #26]
 800a00a:	f023 0304 	bic.w	r3, r3, #4
 800a00e:	b29a      	uxth	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a036:	10db      	asrs	r3, r3, #3
 800a038:	b21b      	sxth	r3, r3
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a042:	b29b      	uxth	r3, r3
 800a044:	4413      	add	r3, r2
 800a046:	b29b      	uxth	r3, r3
 800a048:	b21a      	sxth	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a050:	4b2d      	ldr	r3, [pc, #180]	; (800a108 <tcp_receive+0x2c4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	b29a      	uxth	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a068:	4b27      	ldr	r3, [pc, #156]	; (800a108 <tcp_receive+0x2c4>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	7d1b      	ldrb	r3, [r3, #20]
 800a074:	2b03      	cmp	r3, #3
 800a076:	f240 8096 	bls.w	800a1a6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a086:	429a      	cmp	r2, r3
 800a088:	d244      	bcs.n	800a114 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	8b5b      	ldrh	r3, [r3, #26]
 800a08e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <tcp_receive+0x256>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <tcp_receive+0x258>
 800a09a:	2302      	movs	r3, #2
 800a09c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a0a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0aa:	fb12 f303 	smulbb	r3, r2, r3
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	bf28      	it	cs
 800a0b6:	4613      	movcs	r3, r2
 800a0b8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a0c2:	4413      	add	r3, r2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d309      	bcc.n	800a0e4 <tcp_receive+0x2a0>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a0d8:	4413      	add	r3, r2
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0e2:	e060      	b.n	800a1a6 <tcp_receive+0x362>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a0ee:	e05a      	b.n	800a1a6 <tcp_receive+0x362>
 800a0f0:	08012168 	.word	0x08012168
 800a0f4:	08012498 	.word	0x08012498
 800a0f8:	080121b4 	.word	0x080121b4
 800a0fc:	080124b4 	.word	0x080124b4
 800a100:	2000056c 	.word	0x2000056c
 800a104:	20000560 	.word	0x20000560
 800a108:	20000564 	.word	0x20000564
 800a10c:	20000550 	.word	0x20000550
 800a110:	2000056a 	.word	0x2000056a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a11a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a11c:	4413      	add	r3, r2
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a126:	429a      	cmp	r2, r3
 800a128:	d309      	bcc.n	800a13e <tcp_receive+0x2fa>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a132:	4413      	add	r3, r2
 800a134:	b29a      	uxth	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a13c:	e004      	b.n	800a148 <tcp_receive+0x304>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a154:	429a      	cmp	r2, r3
 800a156:	d326      	bcc.n	800a1a6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a178:	4413      	add	r3, r2
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a182:	429a      	cmp	r2, r3
 800a184:	d30a      	bcc.n	800a19c <tcp_receive+0x358>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a190:	4413      	add	r3, r2
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a19a:	e004      	b.n	800a1a6 <tcp_receive+0x362>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ae:	4a98      	ldr	r2, [pc, #608]	; (800a410 <tcp_receive+0x5cc>)
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fdcb 	bl	8009d4c <tcp_free_acked_segments>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c4:	4a93      	ldr	r2, [pc, #588]	; (800a414 <tcp_receive+0x5d0>)
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff fdc0 	bl	8009d4c <tcp_free_acked_segments>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d104      	bne.n	800a1e4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800a1e2:	e002      	b.n	800a1ea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d103      	bne.n	800a200 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a206:	4b84      	ldr	r3, [pc, #528]	; (800a418 <tcp_receive+0x5d4>)
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	4413      	add	r3, r2
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8b5b      	ldrh	r3, [r3, #26]
 800a218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d035      	beq.n	800a28c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a224:	2b00      	cmp	r3, #0
 800a226:	d118      	bne.n	800a25a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00c      	beq.n	800a24a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fa ff74 	bl	800512a <lwip_htonl>
 800a242:	4603      	mov	r3, r0
 800a244:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a246:	2b00      	cmp	r3, #0
 800a248:	dc20      	bgt.n	800a28c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	8b5b      	ldrh	r3, [r3, #26]
 800a24e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a258:	e018      	b.n	800a28c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	4618      	mov	r0, r3
 800a268:	f7fa ff5f 	bl	800512a <lwip_htonl>
 800a26c:	4603      	mov	r3, r0
 800a26e:	1ae3      	subs	r3, r4, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	dc0b      	bgt.n	800a28c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	8b5b      	ldrh	r3, [r3, #26]
 800a278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a282:	e003      	b.n	800a28c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f002 fbcd 	bl	800ca24 <tcp_send_empty_ack>
 800a28a:	e000      	b.n	800a28e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a28c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	2b00      	cmp	r3, #0
 800a294:	d05b      	beq.n	800a34e <tcp_receive+0x50a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a29a:	4b60      	ldr	r3, [pc, #384]	; (800a41c <tcp_receive+0x5d8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	da54      	bge.n	800a34e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a2a4:	4b5e      	ldr	r3, [pc, #376]	; (800a420 <tcp_receive+0x5dc>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a2b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2c2:	10db      	asrs	r3, r3, #3
 800a2c4:	b21b      	sxth	r3, r3
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2dc:	4413      	add	r3, r2
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	b21a      	sxth	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a2e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da05      	bge.n	800a2fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a2ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2f2:	425b      	negs	r3, r3
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a2fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a304:	109b      	asrs	r3, r3, #2
 800a306:	b21b      	sxth	r3, r3
 800a308:	b29b      	uxth	r3, r3
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a318:	b29a      	uxth	r2, r3
 800a31a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a31e:	4413      	add	r3, r2
 800a320:	b29b      	uxth	r3, r3
 800a322:	b21a      	sxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a32e:	10db      	asrs	r3, r3, #3
 800a330:	b21b      	sxth	r3, r3
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	4413      	add	r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	b21a      	sxth	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a34e:	4b35      	ldr	r3, [pc, #212]	; (800a424 <tcp_receive+0x5e0>)
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 84e1 	beq.w	800ad1a <tcp_receive+0xed6>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	7d1b      	ldrb	r3, [r3, #20]
 800a35c:	2b06      	cmp	r3, #6
 800a35e:	f200 84dc 	bhi.w	800ad1a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a366:	4b30      	ldr	r3, [pc, #192]	; (800a428 <tcp_receive+0x5e4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f2c0 808e 	blt.w	800a490 <tcp_receive+0x64c>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a378:	4b2a      	ldr	r3, [pc, #168]	; (800a424 <tcp_receive+0x5e0>)
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	4619      	mov	r1, r3
 800a37e:	4b2a      	ldr	r3, [pc, #168]	; (800a428 <tcp_receive+0x5e4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	440b      	add	r3, r1
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	3301      	adds	r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f300 8081 	bgt.w	800a490 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a38e:	4b27      	ldr	r3, [pc, #156]	; (800a42c <tcp_receive+0x5e8>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a398:	4b23      	ldr	r3, [pc, #140]	; (800a428 <tcp_receive+0x5e4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a3a0:	4b22      	ldr	r3, [pc, #136]	; (800a42c <tcp_receive+0x5e8>)
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <tcp_receive+0x572>
 800a3a8:	4b21      	ldr	r3, [pc, #132]	; (800a430 <tcp_receive+0x5ec>)
 800a3aa:	f240 5294 	movw	r2, #1428	; 0x594
 800a3ae:	4921      	ldr	r1, [pc, #132]	; (800a434 <tcp_receive+0x5f0>)
 800a3b0:	4821      	ldr	r0, [pc, #132]	; (800a438 <tcp_receive+0x5f4>)
 800a3b2:	f005 fab3 	bl	800f91c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d906      	bls.n	800a3ce <tcp_receive+0x58a>
 800a3c0:	4b1b      	ldr	r3, [pc, #108]	; (800a430 <tcp_receive+0x5ec>)
 800a3c2:	f240 5295 	movw	r2, #1429	; 0x595
 800a3c6:	491d      	ldr	r1, [pc, #116]	; (800a43c <tcp_receive+0x5f8>)
 800a3c8:	481b      	ldr	r0, [pc, #108]	; (800a438 <tcp_receive+0x5f4>)
 800a3ca:	f005 faa7 	bl	800f91c <iprintf>
      off = (u16_t)off32;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a3d4:	4b15      	ldr	r3, [pc, #84]	; (800a42c <tcp_receive+0x5e8>)
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	891b      	ldrh	r3, [r3, #8]
 800a3da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d906      	bls.n	800a3f0 <tcp_receive+0x5ac>
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <tcp_receive+0x5ec>)
 800a3e4:	f240 5297 	movw	r2, #1431	; 0x597
 800a3e8:	4915      	ldr	r1, [pc, #84]	; (800a440 <tcp_receive+0x5fc>)
 800a3ea:	4813      	ldr	r0, [pc, #76]	; (800a438 <tcp_receive+0x5f4>)
 800a3ec:	f005 fa96 	bl	800f91c <iprintf>
      inseg.len -= off;
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <tcp_receive+0x5e8>)
 800a3f2:	891a      	ldrh	r2, [r3, #8]
 800a3f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	; (800a42c <tcp_receive+0x5e8>)
 800a3fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <tcp_receive+0x5e8>)
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	891a      	ldrh	r2, [r3, #8]
 800a406:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a40e:	e029      	b.n	800a464 <tcp_receive+0x620>
 800a410:	080124d0 	.word	0x080124d0
 800a414:	080124d8 	.word	0x080124d8
 800a418:	20000568 	.word	0x20000568
 800a41c:	20000564 	.word	0x20000564
 800a420:	20006d0c 	.word	0x20006d0c
 800a424:	2000056a 	.word	0x2000056a
 800a428:	20000560 	.word	0x20000560
 800a42c:	20000540 	.word	0x20000540
 800a430:	08012168 	.word	0x08012168
 800a434:	080124e0 	.word	0x080124e0
 800a438:	080121b4 	.word	0x080121b4
 800a43c:	080124f0 	.word	0x080124f0
 800a440:	08012500 	.word	0x08012500
        off -= p->len;
 800a444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a446:	895b      	ldrh	r3, [r3, #10]
 800a448:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a454:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a456:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a45a:	2200      	movs	r2, #0
 800a45c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a466:	895b      	ldrh	r3, [r3, #10]
 800a468:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d8e9      	bhi.n	800a444 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a474:	4619      	mov	r1, r3
 800a476:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a478:	f7fc f8da 	bl	8006630 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	4a91      	ldr	r2, [pc, #580]	; (800a6c8 <tcp_receive+0x884>)
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	4b91      	ldr	r3, [pc, #580]	; (800a6cc <tcp_receive+0x888>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	4a8f      	ldr	r2, [pc, #572]	; (800a6c8 <tcp_receive+0x884>)
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a48e:	e00d      	b.n	800a4ac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a490:	4b8d      	ldr	r3, [pc, #564]	; (800a6c8 <tcp_receive+0x884>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	da06      	bge.n	800a4ac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	8b5b      	ldrh	r3, [r3, #26]
 800a4a2:	f043 0302 	orr.w	r3, r3, #2
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a4ac:	4b86      	ldr	r3, [pc, #536]	; (800a6c8 <tcp_receive+0x884>)
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f2c0 842a 	blt.w	800ad10 <tcp_receive+0xecc>
 800a4bc:	4b82      	ldr	r3, [pc, #520]	; (800a6c8 <tcp_receive+0x884>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a4c8:	440b      	add	r3, r1
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f300 841e 	bgt.w	800ad10 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4d8:	4b7b      	ldr	r3, [pc, #492]	; (800a6c8 <tcp_receive+0x884>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	f040 829a 	bne.w	800aa16 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a4e2:	4b7a      	ldr	r3, [pc, #488]	; (800a6cc <tcp_receive+0x888>)
 800a4e4:	891c      	ldrh	r4, [r3, #8]
 800a4e6:	4b79      	ldr	r3, [pc, #484]	; (800a6cc <tcp_receive+0x888>)
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	899b      	ldrh	r3, [r3, #12]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fa fe06 	bl	8005100 <lwip_htons>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <tcp_receive+0x6c0>
 800a500:	2301      	movs	r3, #1
 800a502:	e000      	b.n	800a506 <tcp_receive+0x6c2>
 800a504:	2300      	movs	r3, #0
 800a506:	4423      	add	r3, r4
 800a508:	b29a      	uxth	r2, r3
 800a50a:	4b71      	ldr	r3, [pc, #452]	; (800a6d0 <tcp_receive+0x88c>)
 800a50c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a512:	4b6f      	ldr	r3, [pc, #444]	; (800a6d0 <tcp_receive+0x88c>)
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d275      	bcs.n	800a606 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a51a:	4b6c      	ldr	r3, [pc, #432]	; (800a6cc <tcp_receive+0x888>)
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	899b      	ldrh	r3, [r3, #12]
 800a520:	b29b      	uxth	r3, r3
 800a522:	4618      	mov	r0, r3
 800a524:	f7fa fdec 	bl	8005100 <lwip_htons>
 800a528:	4603      	mov	r3, r0
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01f      	beq.n	800a574 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a534:	4b65      	ldr	r3, [pc, #404]	; (800a6cc <tcp_receive+0x888>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	899b      	ldrh	r3, [r3, #12]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	b21b      	sxth	r3, r3
 800a53e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a542:	b21c      	sxth	r4, r3
 800a544:	4b61      	ldr	r3, [pc, #388]	; (800a6cc <tcp_receive+0x888>)
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	899b      	ldrh	r3, [r3, #12]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fa fdd7 	bl	8005100 <lwip_htons>
 800a552:	4603      	mov	r3, r0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	b29b      	uxth	r3, r3
 800a558:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fa fdce 	bl	8005100 <lwip_htons>
 800a564:	4603      	mov	r3, r0
 800a566:	b21b      	sxth	r3, r3
 800a568:	4323      	orrs	r3, r4
 800a56a:	b21a      	sxth	r2, r3
 800a56c:	4b57      	ldr	r3, [pc, #348]	; (800a6cc <tcp_receive+0x888>)
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	b292      	uxth	r2, r2
 800a572:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a578:	4b54      	ldr	r3, [pc, #336]	; (800a6cc <tcp_receive+0x888>)
 800a57a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a57c:	4b53      	ldr	r3, [pc, #332]	; (800a6cc <tcp_receive+0x888>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	899b      	ldrh	r3, [r3, #12]
 800a582:	b29b      	uxth	r3, r3
 800a584:	4618      	mov	r0, r3
 800a586:	f7fa fdbb 	bl	8005100 <lwip_htons>
 800a58a:	4603      	mov	r3, r0
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d005      	beq.n	800a5a2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800a596:	4b4d      	ldr	r3, [pc, #308]	; (800a6cc <tcp_receive+0x888>)
 800a598:	891b      	ldrh	r3, [r3, #8]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	4b4b      	ldr	r3, [pc, #300]	; (800a6cc <tcp_receive+0x888>)
 800a5a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a5a2:	4b4a      	ldr	r3, [pc, #296]	; (800a6cc <tcp_receive+0x888>)
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	4a49      	ldr	r2, [pc, #292]	; (800a6cc <tcp_receive+0x888>)
 800a5a8:	8912      	ldrh	r2, [r2, #8]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fb ff3f 	bl	8006430 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a5b2:	4b46      	ldr	r3, [pc, #280]	; (800a6cc <tcp_receive+0x888>)
 800a5b4:	891c      	ldrh	r4, [r3, #8]
 800a5b6:	4b45      	ldr	r3, [pc, #276]	; (800a6cc <tcp_receive+0x888>)
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	899b      	ldrh	r3, [r3, #12]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fa fd9e 	bl	8005100 <lwip_htons>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <tcp_receive+0x790>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <tcp_receive+0x792>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4423      	add	r3, r4
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	4b3d      	ldr	r3, [pc, #244]	; (800a6d0 <tcp_receive+0x88c>)
 800a5dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a5de:	4b3c      	ldr	r3, [pc, #240]	; (800a6d0 <tcp_receive+0x88c>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4b38      	ldr	r3, [pc, #224]	; (800a6c8 <tcp_receive+0x884>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	441a      	add	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5f2:	440b      	add	r3, r1
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d006      	beq.n	800a606 <tcp_receive+0x7c2>
 800a5f8:	4b36      	ldr	r3, [pc, #216]	; (800a6d4 <tcp_receive+0x890>)
 800a5fa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a5fe:	4936      	ldr	r1, [pc, #216]	; (800a6d8 <tcp_receive+0x894>)
 800a600:	4836      	ldr	r0, [pc, #216]	; (800a6dc <tcp_receive+0x898>)
 800a602:	f005 f98b 	bl	800f91c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 80e7 	beq.w	800a7de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a610:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <tcp_receive+0x888>)
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	899b      	ldrh	r3, [r3, #12]
 800a616:	b29b      	uxth	r3, r3
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fa fd71 	bl	8005100 <lwip_htons>
 800a61e:	4603      	mov	r3, r0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d010      	beq.n	800a64c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a62a:	e00a      	b.n	800a642 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a630:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f7fd fcaa 	bl	8007f96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f0      	bne.n	800a62c <tcp_receive+0x7e8>
 800a64a:	e0c8      	b.n	800a7de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a652:	e052      	b.n	800a6fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	899b      	ldrh	r3, [r3, #12]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fa fd4f 	bl	8005100 <lwip_htons>
 800a662:	4603      	mov	r3, r0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d03d      	beq.n	800a6ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a66e:	4b17      	ldr	r3, [pc, #92]	; (800a6cc <tcp_receive+0x888>)
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	899b      	ldrh	r3, [r3, #12]
 800a674:	b29b      	uxth	r3, r3
 800a676:	4618      	mov	r0, r3
 800a678:	f7fa fd42 	bl	8005100 <lwip_htons>
 800a67c:	4603      	mov	r3, r0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a684:	2b00      	cmp	r3, #0
 800a686:	d130      	bne.n	800a6ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a688:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <tcp_receive+0x888>)
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	899b      	ldrh	r3, [r3, #12]
 800a68e:	b29c      	uxth	r4, r3
 800a690:	2001      	movs	r0, #1
 800a692:	f7fa fd35 	bl	8005100 <lwip_htons>
 800a696:	4603      	mov	r3, r0
 800a698:	461a      	mov	r2, r3
 800a69a:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <tcp_receive+0x888>)
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	4322      	orrs	r2, r4
 800a6a0:	b292      	uxth	r2, r2
 800a6a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a6a4:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <tcp_receive+0x888>)
 800a6a6:	891c      	ldrh	r4, [r3, #8]
 800a6a8:	4b08      	ldr	r3, [pc, #32]	; (800a6cc <tcp_receive+0x888>)
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	899b      	ldrh	r3, [r3, #12]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fa fd25 	bl	8005100 <lwip_htons>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00e      	beq.n	800a6e0 <tcp_receive+0x89c>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e00d      	b.n	800a6e2 <tcp_receive+0x89e>
 800a6c6:	bf00      	nop
 800a6c8:	20000560 	.word	0x20000560
 800a6cc:	20000540 	.word	0x20000540
 800a6d0:	2000056a 	.word	0x2000056a
 800a6d4:	08012168 	.word	0x08012168
 800a6d8:	08012510 	.word	0x08012510
 800a6dc:	080121b4 	.word	0x080121b4
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4423      	add	r3, r4
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	4b98      	ldr	r3, [pc, #608]	; (800a948 <tcp_receive+0xb04>)
 800a6e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a6f4:	6938      	ldr	r0, [r7, #16]
 800a6f6:	f7fd fc4e 	bl	8007f96 <tcp_seg_free>
            while (next &&
 800a6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00e      	beq.n	800a71e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a700:	4b91      	ldr	r3, [pc, #580]	; (800a948 <tcp_receive+0xb04>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	4b91      	ldr	r3, [pc, #580]	; (800a94c <tcp_receive+0xb08>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	441a      	add	r2, r3
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a714:	8909      	ldrh	r1, [r1, #8]
 800a716:	440b      	add	r3, r1
 800a718:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da9a      	bge.n	800a654 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d059      	beq.n	800a7d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a724:	4b88      	ldr	r3, [pc, #544]	; (800a948 <tcp_receive+0xb04>)
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	4b88      	ldr	r3, [pc, #544]	; (800a94c <tcp_receive+0xb08>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	441a      	add	r2, r3
 800a730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a738:	2b00      	cmp	r3, #0
 800a73a:	dd4d      	ble.n	800a7d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	b29a      	uxth	r2, r3
 800a744:	4b81      	ldr	r3, [pc, #516]	; (800a94c <tcp_receive+0xb08>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	4b80      	ldr	r3, [pc, #512]	; (800a950 <tcp_receive+0xb0c>)
 800a750:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a752:	4b7f      	ldr	r3, [pc, #508]	; (800a950 <tcp_receive+0xb0c>)
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	899b      	ldrh	r3, [r3, #12]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fa fcd0 	bl	8005100 <lwip_htons>
 800a760:	4603      	mov	r3, r0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <tcp_receive+0x934>
                inseg.len -= 1;
 800a76c:	4b78      	ldr	r3, [pc, #480]	; (800a950 <tcp_receive+0xb0c>)
 800a76e:	891b      	ldrh	r3, [r3, #8]
 800a770:	3b01      	subs	r3, #1
 800a772:	b29a      	uxth	r2, r3
 800a774:	4b76      	ldr	r3, [pc, #472]	; (800a950 <tcp_receive+0xb0c>)
 800a776:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a778:	4b75      	ldr	r3, [pc, #468]	; (800a950 <tcp_receive+0xb0c>)
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	4a74      	ldr	r2, [pc, #464]	; (800a950 <tcp_receive+0xb0c>)
 800a77e:	8912      	ldrh	r2, [r2, #8]
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f7fb fe54 	bl	8006430 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a788:	4b71      	ldr	r3, [pc, #452]	; (800a950 <tcp_receive+0xb0c>)
 800a78a:	891c      	ldrh	r4, [r3, #8]
 800a78c:	4b70      	ldr	r3, [pc, #448]	; (800a950 <tcp_receive+0xb0c>)
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	899b      	ldrh	r3, [r3, #12]
 800a792:	b29b      	uxth	r3, r3
 800a794:	4618      	mov	r0, r3
 800a796:	f7fa fcb3 	bl	8005100 <lwip_htons>
 800a79a:	4603      	mov	r3, r0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <tcp_receive+0x966>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <tcp_receive+0x968>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4423      	add	r3, r4
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	4b65      	ldr	r3, [pc, #404]	; (800a948 <tcp_receive+0xb04>)
 800a7b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a7b4:	4b64      	ldr	r3, [pc, #400]	; (800a948 <tcp_receive+0xb04>)
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4b64      	ldr	r3, [pc, #400]	; (800a94c <tcp_receive+0xb08>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	441a      	add	r2, r3
 800a7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d006      	beq.n	800a7d8 <tcp_receive+0x994>
 800a7ca:	4b62      	ldr	r3, [pc, #392]	; (800a954 <tcp_receive+0xb10>)
 800a7cc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a7d0:	4961      	ldr	r1, [pc, #388]	; (800a958 <tcp_receive+0xb14>)
 800a7d2:	4862      	ldr	r0, [pc, #392]	; (800a95c <tcp_receive+0xb18>)
 800a7d4:	f005 f8a2 	bl	800f91c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a7de:	4b5a      	ldr	r3, [pc, #360]	; (800a948 <tcp_receive+0xb04>)
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	4b59      	ldr	r3, [pc, #356]	; (800a94c <tcp_receive+0xb08>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7f2:	4b55      	ldr	r3, [pc, #340]	; (800a948 <tcp_receive+0xb04>)
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d206      	bcs.n	800a808 <tcp_receive+0x9c4>
 800a7fa:	4b56      	ldr	r3, [pc, #344]	; (800a954 <tcp_receive+0xb10>)
 800a7fc:	f240 6207 	movw	r2, #1543	; 0x607
 800a800:	4957      	ldr	r1, [pc, #348]	; (800a960 <tcp_receive+0xb1c>)
 800a802:	4856      	ldr	r0, [pc, #344]	; (800a95c <tcp_receive+0xb18>)
 800a804:	f005 f88a 	bl	800f91c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a80c:	4b4e      	ldr	r3, [pc, #312]	; (800a948 <tcp_receive+0xb04>)
 800a80e:	881b      	ldrh	r3, [r3, #0]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7fc fe97 	bl	800754c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a81e:	4b4c      	ldr	r3, [pc, #304]	; (800a950 <tcp_receive+0xb0c>)
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	891b      	ldrh	r3, [r3, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d006      	beq.n	800a836 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a828:	4b49      	ldr	r3, [pc, #292]	; (800a950 <tcp_receive+0xb0c>)
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	4a4d      	ldr	r2, [pc, #308]	; (800a964 <tcp_receive+0xb20>)
 800a82e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a830:	4b47      	ldr	r3, [pc, #284]	; (800a950 <tcp_receive+0xb0c>)
 800a832:	2200      	movs	r2, #0
 800a834:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a836:	4b46      	ldr	r3, [pc, #280]	; (800a950 <tcp_receive+0xb0c>)
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	899b      	ldrh	r3, [r3, #12]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fa fc5e 	bl	8005100 <lwip_htons>
 800a844:	4603      	mov	r3, r0
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f000 80b8 	beq.w	800a9c2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a852:	4b45      	ldr	r3, [pc, #276]	; (800a968 <tcp_receive+0xb24>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	f043 0320 	orr.w	r3, r3, #32
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	4b42      	ldr	r3, [pc, #264]	; (800a968 <tcp_receive+0xb24>)
 800a85e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a860:	e0af      	b.n	800a9c2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a866:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	4a36      	ldr	r2, [pc, #216]	; (800a94c <tcp_receive+0xb08>)
 800a872:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	891b      	ldrh	r3, [r3, #8]
 800a878:	461c      	mov	r4, r3
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	899b      	ldrh	r3, [r3, #12]
 800a880:	b29b      	uxth	r3, r3
 800a882:	4618      	mov	r0, r3
 800a884:	f7fa fc3c 	bl	8005100 <lwip_htons>
 800a888:	4603      	mov	r3, r0
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	f003 0303 	and.w	r3, r3, #3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <tcp_receive+0xa54>
 800a894:	2301      	movs	r3, #1
 800a896:	e000      	b.n	800a89a <tcp_receive+0xa56>
 800a898:	2300      	movs	r3, #0
 800a89a:	191a      	adds	r2, r3, r4
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	441a      	add	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8aa:	461c      	mov	r4, r3
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	891b      	ldrh	r3, [r3, #8]
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	899b      	ldrh	r3, [r3, #12]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fa fc20 	bl	8005100 <lwip_htons>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0303 	and.w	r3, r3, #3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <tcp_receive+0xa8c>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e000      	b.n	800a8d2 <tcp_receive+0xa8e>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	442b      	add	r3, r5
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	d206      	bcs.n	800a8e6 <tcp_receive+0xaa2>
 800a8d8:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <tcp_receive+0xb10>)
 800a8da:	f240 622b 	movw	r2, #1579	; 0x62b
 800a8de:	4923      	ldr	r1, [pc, #140]	; (800a96c <tcp_receive+0xb28>)
 800a8e0:	481e      	ldr	r0, [pc, #120]	; (800a95c <tcp_receive+0xb18>)
 800a8e2:	f005 f81b 	bl	800f91c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	891b      	ldrh	r3, [r3, #8]
 800a8ea:	461c      	mov	r4, r3
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	899b      	ldrh	r3, [r3, #12]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fa fc03 	bl	8005100 <lwip_htons>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <tcp_receive+0xac6>
 800a906:	2301      	movs	r3, #1
 800a908:	e000      	b.n	800a90c <tcp_receive+0xac8>
 800a90a:	2300      	movs	r3, #0
 800a90c:	1919      	adds	r1, r3, r4
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a912:	b28b      	uxth	r3, r1
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7fc fe15 	bl	800754c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	891b      	ldrh	r3, [r3, #8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d028      	beq.n	800a97e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a92c:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <tcp_receive+0xb20>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01d      	beq.n	800a970 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a934:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <tcp_receive+0xb20>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4619      	mov	r1, r3
 800a93e:	4610      	mov	r0, r2
 800a940:	f7fb ffbe 	bl	80068c0 <pbuf_cat>
 800a944:	e018      	b.n	800a978 <tcp_receive+0xb34>
 800a946:	bf00      	nop
 800a948:	2000056a 	.word	0x2000056a
 800a94c:	20000560 	.word	0x20000560
 800a950:	20000540 	.word	0x20000540
 800a954:	08012168 	.word	0x08012168
 800a958:	08012548 	.word	0x08012548
 800a95c:	080121b4 	.word	0x080121b4
 800a960:	08012584 	.word	0x08012584
 800a964:	20000570 	.word	0x20000570
 800a968:	2000056d 	.word	0x2000056d
 800a96c:	080125a4 	.word	0x080125a4
            } else {
              recv_data = cseg->p;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	4a70      	ldr	r2, [pc, #448]	; (800ab38 <tcp_receive+0xcf4>)
 800a976:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2200      	movs	r2, #0
 800a97c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	899b      	ldrh	r3, [r3, #12]
 800a984:	b29b      	uxth	r3, r3
 800a986:	4618      	mov	r0, r3
 800a988:	f7fa fbba 	bl	8005100 <lwip_htons>
 800a98c:	4603      	mov	r3, r0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00d      	beq.n	800a9b4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a998:	4b68      	ldr	r3, [pc, #416]	; (800ab3c <tcp_receive+0xcf8>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	f043 0320 	orr.w	r3, r3, #32
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	4b66      	ldr	r3, [pc, #408]	; (800ab3c <tcp_receive+0xcf8>)
 800a9a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	7d1b      	ldrb	r3, [r3, #20]
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	d102      	bne.n	800a9b4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2207      	movs	r2, #7
 800a9b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a9bc:	68b8      	ldr	r0, [r7, #8]
 800a9be:	f7fd faea 	bl	8007f96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d008      	beq.n	800a9dc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	f43f af43 	beq.w	800a862 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8b5b      	ldrh	r3, [r3, #26]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <tcp_receive+0xbc2>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8b5b      	ldrh	r3, [r3, #26]
 800a9ec:	f023 0301 	bic.w	r3, r3, #1
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	835a      	strh	r2, [r3, #26]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	8b5b      	ldrh	r3, [r3, #26]
 800a9fa:	f043 0302 	orr.w	r3, r3, #2
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aa04:	e188      	b.n	800ad18 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8b5b      	ldrh	r3, [r3, #26]
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aa14:	e180      	b.n	800ad18 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800aa1e:	4848      	ldr	r0, [pc, #288]	; (800ab40 <tcp_receive+0xcfc>)
 800aa20:	f7fd faf0 	bl	8008004 <tcp_seg_copy>
 800aa24:	4602      	mov	r2, r0
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	675a      	str	r2, [r3, #116]	; 0x74
 800aa2a:	e16d      	b.n	800ad08 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa34:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa36:	e157      	b.n	800ace8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b41      	ldr	r3, [pc, #260]	; (800ab44 <tcp_receive+0xd00>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d11d      	bne.n	800aa82 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800aa46:	4b3e      	ldr	r3, [pc, #248]	; (800ab40 <tcp_receive+0xcfc>)
 800aa48:	891a      	ldrh	r2, [r3, #8]
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	891b      	ldrh	r3, [r3, #8]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	f240 814f 	bls.w	800acf2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa54:	483a      	ldr	r0, [pc, #232]	; (800ab40 <tcp_receive+0xcfc>)
 800aa56:	f7fd fad5 	bl	8008004 <tcp_seg_copy>
 800aa5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 8149 	beq.w	800acf6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800aa64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	e002      	b.n	800aa78 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800aa78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa7a:	6978      	ldr	r0, [r7, #20]
 800aa7c:	f7ff f8de 	bl	8009c3c <tcp_oos_insert_segment>
                }
                break;
 800aa80:	e139      	b.n	800acf6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d117      	bne.n	800aab8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aa88:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <tcp_receive+0xd00>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da57      	bge.n	800ab48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa98:	4829      	ldr	r0, [pc, #164]	; (800ab40 <tcp_receive+0xcfc>)
 800aa9a:	f7fd fab3 	bl	8008004 <tcp_seg_copy>
 800aa9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f000 8129 	beq.w	800acfa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	69ba      	ldr	r2, [r7, #24]
 800aaac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aaae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aab0:	69b8      	ldr	r0, [r7, #24]
 800aab2:	f7ff f8c3 	bl	8009c3c <tcp_oos_insert_segment>
                  }
                  break;
 800aab6:	e120      	b.n	800acfa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aab8:	4b22      	ldr	r3, [pc, #136]	; (800ab44 <tcp_receive+0xd00>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	db3e      	blt.n	800ab48 <tcp_receive+0xd04>
 800aaca:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <tcp_receive+0xd00>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	3301      	adds	r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc35      	bgt.n	800ab48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aadc:	4818      	ldr	r0, [pc, #96]	; (800ab40 <tcp_receive+0xcfc>)
 800aade:	f7fd fa91 	bl	8008004 <tcp_seg_copy>
 800aae2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f000 8109 	beq.w	800acfe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800aaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf4:	8912      	ldrh	r2, [r2, #8]
 800aaf6:	441a      	add	r2, r3
 800aaf8:	4b12      	ldr	r3, [pc, #72]	; (800ab44 <tcp_receive+0xd00>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dd12      	ble.n	800ab28 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ab02:	4b10      	ldr	r3, [pc, #64]	; (800ab44 <tcp_receive+0xd00>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ab18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1e:	891b      	ldrh	r3, [r3, #8]
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7fb fc84 	bl	8006430 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ab28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ab2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab30:	69f8      	ldr	r0, [r7, #28]
 800ab32:	f7ff f883 	bl	8009c3c <tcp_oos_insert_segment>
                  }
                  break;
 800ab36:	e0e2      	b.n	800acfe <tcp_receive+0xeba>
 800ab38:	20000570 	.word	0x20000570
 800ab3c:	2000056d 	.word	0x2000056d
 800ab40:	20000540 	.word	0x20000540
 800ab44:	20000560 	.word	0x20000560
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f040 80c6 	bne.w	800ace2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ab56:	4b80      	ldr	r3, [pc, #512]	; (800ad58 <tcp_receive+0xf14>)
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f340 80bd 	ble.w	800ace2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	899b      	ldrh	r3, [r3, #12]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fa fac5 	bl	8005100 <lwip_htons>
 800ab76:	4603      	mov	r3, r0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f040 80bf 	bne.w	800ad02 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ab84:	4875      	ldr	r0, [pc, #468]	; (800ad5c <tcp_receive+0xf18>)
 800ab86:	f7fd fa3d 	bl	8008004 <tcp_seg_copy>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ab90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80b6 	beq.w	800ad06 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aba2:	8912      	ldrh	r2, [r2, #8]
 800aba4:	441a      	add	r2, r3
 800aba6:	4b6c      	ldr	r3, [pc, #432]	; (800ad58 <tcp_receive+0xf14>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	dd12      	ble.n	800abd6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800abb0:	4b69      	ldr	r3, [pc, #420]	; (800ad58 <tcp_receive+0xf14>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	891b      	ldrh	r3, [r3, #8]
 800abce:	4619      	mov	r1, r3
 800abd0:	4610      	mov	r0, r2
 800abd2:	f7fb fc2d 	bl	8006430 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800abd6:	4b62      	ldr	r3, [pc, #392]	; (800ad60 <tcp_receive+0xf1c>)
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	4b5e      	ldr	r3, [pc, #376]	; (800ad58 <tcp_receive+0xf14>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	441a      	add	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	6879      	ldr	r1, [r7, #4]
 800abe8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800abea:	440b      	add	r3, r1
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f340 8089 	ble.w	800ad06 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800abf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	899b      	ldrh	r3, [r3, #12]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fa fa7e 	bl	8005100 <lwip_htons>
 800ac04:	4603      	mov	r3, r0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d022      	beq.n	800ac56 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	899b      	ldrh	r3, [r3, #12]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac20:	b21c      	sxth	r4, r3
 800ac22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	899b      	ldrh	r3, [r3, #12]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fa fa67 	bl	8005100 <lwip_htons>
 800ac32:	4603      	mov	r3, r0
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fa fa5e 	bl	8005100 <lwip_htons>
 800ac44:	4603      	mov	r3, r0
 800ac46:	b21b      	sxth	r3, r3
 800ac48:	4323      	orrs	r3, r4
 800ac4a:	b21a      	sxth	r2, r3
 800ac4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	b292      	uxth	r2, r2
 800ac54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac60:	4413      	add	r3, r2
 800ac62:	b299      	uxth	r1, r3
 800ac64:	4b3c      	ldr	r3, [pc, #240]	; (800ad58 <tcp_receive+0xf14>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	1a8a      	subs	r2, r1, r2
 800ac70:	b292      	uxth	r2, r2
 800ac72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	891b      	ldrh	r3, [r3, #8]
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fb fbd4 	bl	8006430 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	891c      	ldrh	r4, [r3, #8]
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	899b      	ldrh	r3, [r3, #12]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fa fa31 	bl	8005100 <lwip_htons>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	f003 0303 	and.w	r3, r3, #3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <tcp_receive+0xe6a>
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <tcp_receive+0xe6c>
 800acae:	2300      	movs	r3, #0
 800acb0:	4423      	add	r3, r4
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <tcp_receive+0xf1c>)
 800acb6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800acb8:	4b29      	ldr	r3, [pc, #164]	; (800ad60 <tcp_receive+0xf1c>)
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <tcp_receive+0xf14>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	441a      	add	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800accc:	440b      	add	r3, r1
 800acce:	429a      	cmp	r2, r3
 800acd0:	d019      	beq.n	800ad06 <tcp_receive+0xec2>
 800acd2:	4b24      	ldr	r3, [pc, #144]	; (800ad64 <tcp_receive+0xf20>)
 800acd4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800acd8:	4923      	ldr	r1, [pc, #140]	; (800ad68 <tcp_receive+0xf24>)
 800acda:	4824      	ldr	r0, [pc, #144]	; (800ad6c <tcp_receive+0xf28>)
 800acdc:	f004 fe1e 	bl	800f91c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ace0:	e011      	b.n	800ad06 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ace8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acea:	2b00      	cmp	r3, #0
 800acec:	f47f aea4 	bne.w	800aa38 <tcp_receive+0xbf4>
 800acf0:	e00a      	b.n	800ad08 <tcp_receive+0xec4>
                break;
 800acf2:	bf00      	nop
 800acf4:	e008      	b.n	800ad08 <tcp_receive+0xec4>
                break;
 800acf6:	bf00      	nop
 800acf8:	e006      	b.n	800ad08 <tcp_receive+0xec4>
                  break;
 800acfa:	bf00      	nop
 800acfc:	e004      	b.n	800ad08 <tcp_receive+0xec4>
                  break;
 800acfe:	bf00      	nop
 800ad00:	e002      	b.n	800ad08 <tcp_receive+0xec4>
                  break;
 800ad02:	bf00      	nop
 800ad04:	e000      	b.n	800ad08 <tcp_receive+0xec4>
                break;
 800ad06:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f001 fe8b 	bl	800ca24 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ad0e:	e003      	b.n	800ad18 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 fe87 	bl	800ca24 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ad16:	e01a      	b.n	800ad4e <tcp_receive+0xf0a>
 800ad18:	e019      	b.n	800ad4e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <tcp_receive+0xf14>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	db0a      	blt.n	800ad3e <tcp_receive+0xefa>
 800ad28:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <tcp_receive+0xf14>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad34:	440b      	add	r3, r1
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	3301      	adds	r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dd07      	ble.n	800ad4e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	8b5b      	ldrh	r3, [r3, #26]
 800ad42:	f043 0302 	orr.w	r3, r3, #2
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ad4c:	e7ff      	b.n	800ad4e <tcp_receive+0xf0a>
 800ad4e:	bf00      	nop
 800ad50:	3750      	adds	r7, #80	; 0x50
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bdb0      	pop	{r4, r5, r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000560 	.word	0x20000560
 800ad5c:	20000540 	.word	0x20000540
 800ad60:	2000056a 	.word	0x2000056a
 800ad64:	08012168 	.word	0x08012168
 800ad68:	08012510 	.word	0x08012510
 800ad6c:	080121b4 	.word	0x080121b4

0800ad70 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ad76:	4b15      	ldr	r3, [pc, #84]	; (800adcc <tcp_get_next_optbyte+0x5c>)
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	b291      	uxth	r1, r2
 800ad7e:	4a13      	ldr	r2, [pc, #76]	; (800adcc <tcp_get_next_optbyte+0x5c>)
 800ad80:	8011      	strh	r1, [r2, #0]
 800ad82:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ad84:	4b12      	ldr	r3, [pc, #72]	; (800add0 <tcp_get_next_optbyte+0x60>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d004      	beq.n	800ad96 <tcp_get_next_optbyte+0x26>
 800ad8c:	4b11      	ldr	r3, [pc, #68]	; (800add4 <tcp_get_next_optbyte+0x64>)
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	88fa      	ldrh	r2, [r7, #6]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d208      	bcs.n	800ada8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ad96:	4b10      	ldr	r3, [pc, #64]	; (800add8 <tcp_get_next_optbyte+0x68>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3314      	adds	r3, #20
 800ad9c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	4413      	add	r3, r2
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	e00b      	b.n	800adc0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	4b09      	ldr	r3, [pc, #36]	; (800add4 <tcp_get_next_optbyte+0x64>)
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800adb6:	4b06      	ldr	r3, [pc, #24]	; (800add0 <tcp_get_next_optbyte+0x60>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	797b      	ldrb	r3, [r7, #5]
 800adbc:	4413      	add	r3, r2
 800adbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	2000055c 	.word	0x2000055c
 800add0:	20000558 	.word	0x20000558
 800add4:	20000556 	.word	0x20000556
 800add8:	20000550 	.word	0x20000550

0800addc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d106      	bne.n	800adf8 <tcp_parseopt+0x1c>
 800adea:	4b32      	ldr	r3, [pc, #200]	; (800aeb4 <tcp_parseopt+0xd8>)
 800adec:	f240 727d 	movw	r2, #1917	; 0x77d
 800adf0:	4931      	ldr	r1, [pc, #196]	; (800aeb8 <tcp_parseopt+0xdc>)
 800adf2:	4832      	ldr	r0, [pc, #200]	; (800aebc <tcp_parseopt+0xe0>)
 800adf4:	f004 fd92 	bl	800f91c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800adf8:	4b31      	ldr	r3, [pc, #196]	; (800aec0 <tcp_parseopt+0xe4>)
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d055      	beq.n	800aeac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ae00:	4b30      	ldr	r3, [pc, #192]	; (800aec4 <tcp_parseopt+0xe8>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	801a      	strh	r2, [r3, #0]
 800ae06:	e045      	b.n	800ae94 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ae08:	f7ff ffb2 	bl	800ad70 <tcp_get_next_optbyte>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d006      	beq.n	800ae24 <tcp_parseopt+0x48>
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	dc2b      	bgt.n	800ae72 <tcp_parseopt+0x96>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d041      	beq.n	800aea2 <tcp_parseopt+0xc6>
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d127      	bne.n	800ae72 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ae22:	e037      	b.n	800ae94 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ae24:	f7ff ffa4 	bl	800ad70 <tcp_get_next_optbyte>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	d13b      	bne.n	800aea6 <tcp_parseopt+0xca>
 800ae2e:	4b25      	ldr	r3, [pc, #148]	; (800aec4 <tcp_parseopt+0xe8>)
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	4a22      	ldr	r2, [pc, #136]	; (800aec0 <tcp_parseopt+0xe4>)
 800ae36:	8812      	ldrh	r2, [r2, #0]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	da34      	bge.n	800aea6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ae3c:	f7ff ff98 	bl	800ad70 <tcp_get_next_optbyte>
 800ae40:	4603      	mov	r3, r0
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ae48:	f7ff ff92 	bl	800ad70 <tcp_get_next_optbyte>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	89bb      	ldrh	r3, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ae56:	89bb      	ldrh	r3, [r7, #12]
 800ae58:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ae5c:	d804      	bhi.n	800ae68 <tcp_parseopt+0x8c>
 800ae5e:	89bb      	ldrh	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <tcp_parseopt+0x8c>
 800ae64:	89ba      	ldrh	r2, [r7, #12]
 800ae66:	e001      	b.n	800ae6c <tcp_parseopt+0x90>
 800ae68:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ae70:	e010      	b.n	800ae94 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ae72:	f7ff ff7d 	bl	800ad70 <tcp_get_next_optbyte>
 800ae76:	4603      	mov	r3, r0
 800ae78:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d914      	bls.n	800aeaa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	4b0f      	ldr	r3, [pc, #60]	; (800aec4 <tcp_parseopt+0xe8>)
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	4413      	add	r3, r2
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	3b02      	subs	r3, #2
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <tcp_parseopt+0xe8>)
 800ae92:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <tcp_parseopt+0xe8>)
 800ae96:	881a      	ldrh	r2, [r3, #0]
 800ae98:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <tcp_parseopt+0xe4>)
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d3b3      	bcc.n	800ae08 <tcp_parseopt+0x2c>
 800aea0:	e004      	b.n	800aeac <tcp_parseopt+0xd0>
          return;
 800aea2:	bf00      	nop
 800aea4:	e002      	b.n	800aeac <tcp_parseopt+0xd0>
            return;
 800aea6:	bf00      	nop
 800aea8:	e000      	b.n	800aeac <tcp_parseopt+0xd0>
            return;
 800aeaa:	bf00      	nop
      }
    }
  }
}
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	08012168 	.word	0x08012168
 800aeb8:	080125cc 	.word	0x080125cc
 800aebc:	080121b4 	.word	0x080121b4
 800aec0:	20000554 	.word	0x20000554
 800aec4:	2000055c 	.word	0x2000055c

0800aec8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800aecc:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <tcp_trigger_input_pcb_close+0x1c>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f043 0310 	orr.w	r3, r3, #16
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	4b03      	ldr	r3, [pc, #12]	; (800aee4 <tcp_trigger_input_pcb_close+0x1c>)
 800aed8:	701a      	strb	r2, [r3, #0]
}
 800aeda:	bf00      	nop
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	2000056d 	.word	0x2000056d

0800aee8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00a      	beq.n	800af10 <tcp_route+0x28>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	7a1b      	ldrb	r3, [r3, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d006      	beq.n	800af10 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	7a1b      	ldrb	r3, [r3, #8]
 800af06:	4618      	mov	r0, r3
 800af08:	f7fb f8b8 	bl	800607c <netif_get_by_index>
 800af0c:	4603      	mov	r3, r0
 800af0e:	e003      	b.n	800af18 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f003 fad5 	bl	800e4c0 <ip4_route>
 800af16:	4603      	mov	r3, r0
  }
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	603b      	str	r3, [r7, #0]
 800af2c:	4613      	mov	r3, r2
 800af2e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d105      	bne.n	800af42 <tcp_create_segment+0x22>
 800af36:	4b44      	ldr	r3, [pc, #272]	; (800b048 <tcp_create_segment+0x128>)
 800af38:	22a3      	movs	r2, #163	; 0xa3
 800af3a:	4944      	ldr	r1, [pc, #272]	; (800b04c <tcp_create_segment+0x12c>)
 800af3c:	4844      	ldr	r0, [pc, #272]	; (800b050 <tcp_create_segment+0x130>)
 800af3e:	f004 fced 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d105      	bne.n	800af54 <tcp_create_segment+0x34>
 800af48:	4b3f      	ldr	r3, [pc, #252]	; (800b048 <tcp_create_segment+0x128>)
 800af4a:	22a4      	movs	r2, #164	; 0xa4
 800af4c:	4941      	ldr	r1, [pc, #260]	; (800b054 <tcp_create_segment+0x134>)
 800af4e:	4840      	ldr	r0, [pc, #256]	; (800b050 <tcp_create_segment+0x130>)
 800af50:	f004 fce4 	bl	800f91c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800af62:	2003      	movs	r0, #3
 800af64:	f7fa fd8c 	bl	8005a80 <memp_malloc>
 800af68:	6138      	str	r0, [r7, #16]
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d104      	bne.n	800af7a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800af70:	68b8      	ldr	r0, [r7, #8]
 800af72:	f7fb fbe3 	bl	800673c <pbuf_free>
    return NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	e061      	b.n	800b03e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800af80:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	891a      	ldrh	r2, [r3, #8]
 800af92:	7dfb      	ldrb	r3, [r7, #23]
 800af94:	b29b      	uxth	r3, r3
 800af96:	429a      	cmp	r2, r3
 800af98:	d205      	bcs.n	800afa6 <tcp_create_segment+0x86>
 800af9a:	4b2b      	ldr	r3, [pc, #172]	; (800b048 <tcp_create_segment+0x128>)
 800af9c:	22b0      	movs	r2, #176	; 0xb0
 800af9e:	492e      	ldr	r1, [pc, #184]	; (800b058 <tcp_create_segment+0x138>)
 800afa0:	482b      	ldr	r0, [pc, #172]	; (800b050 <tcp_create_segment+0x130>)
 800afa2:	f004 fcbb 	bl	800f91c <iprintf>
  seg->len = p->tot_len - optlen;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	891a      	ldrh	r2, [r3, #8]
 800afaa:	7dfb      	ldrb	r3, [r7, #23]
 800afac:	b29b      	uxth	r3, r3
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800afb6:	2114      	movs	r1, #20
 800afb8:	68b8      	ldr	r0, [r7, #8]
 800afba:	f7fb fb29 	bl	8006610 <pbuf_add_header>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800afc4:	6938      	ldr	r0, [r7, #16]
 800afc6:	f7fc ffe6 	bl	8007f96 <tcp_seg_free>
    return NULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	e037      	b.n	800b03e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8ada      	ldrh	r2, [r3, #22]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	68dc      	ldr	r4, [r3, #12]
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fa f88d 	bl	8005100 <lwip_htons>
 800afe6:	4603      	mov	r3, r0
 800afe8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	8b1a      	ldrh	r2, [r3, #24]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	68dc      	ldr	r4, [r3, #12]
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fa f884 	bl	8005100 <lwip_htons>
 800aff8:	4603      	mov	r3, r0
 800affa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	68dc      	ldr	r4, [r3, #12]
 800b000:	6838      	ldr	r0, [r7, #0]
 800b002:	f7fa f892 	bl	800512a <lwip_htonl>
 800b006:	4603      	mov	r3, r0
 800b008:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	089b      	lsrs	r3, r3, #2
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	b29b      	uxth	r3, r3
 800b012:	3305      	adds	r3, #5
 800b014:	b29b      	uxth	r3, r3
 800b016:	031b      	lsls	r3, r3, #12
 800b018:	b29a      	uxth	r2, r3
 800b01a:	79fb      	ldrb	r3, [r7, #7]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	b29a      	uxth	r2, r3
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	68dc      	ldr	r4, [r3, #12]
 800b026:	4610      	mov	r0, r2
 800b028:	f7fa f86a 	bl	8005100 <lwip_htons>
 800b02c:	4603      	mov	r3, r0
 800b02e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	749a      	strb	r2, [r3, #18]
 800b038:	2200      	movs	r2, #0
 800b03a:	74da      	strb	r2, [r3, #19]
  return seg;
 800b03c:	693b      	ldr	r3, [r7, #16]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	371c      	adds	r7, #28
 800b042:	46bd      	mov	sp, r7
 800b044:	bd90      	pop	{r4, r7, pc}
 800b046:	bf00      	nop
 800b048:	080125e8 	.word	0x080125e8
 800b04c:	0801261c 	.word	0x0801261c
 800b050:	0801263c 	.word	0x0801263c
 800b054:	08012664 	.word	0x08012664
 800b058:	08012688 	.word	0x08012688

0800b05c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	607b      	str	r3, [r7, #4]
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
 800b068:	460b      	mov	r3, r1
 800b06a:	81bb      	strh	r3, [r7, #12]
 800b06c:	4613      	mov	r3, r2
 800b06e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b070:	89bb      	ldrh	r3, [r7, #12]
 800b072:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d105      	bne.n	800b086 <tcp_pbuf_prealloc+0x2a>
 800b07a:	4b30      	ldr	r3, [pc, #192]	; (800b13c <tcp_pbuf_prealloc+0xe0>)
 800b07c:	22e8      	movs	r2, #232	; 0xe8
 800b07e:	4930      	ldr	r1, [pc, #192]	; (800b140 <tcp_pbuf_prealloc+0xe4>)
 800b080:	4830      	ldr	r0, [pc, #192]	; (800b144 <tcp_pbuf_prealloc+0xe8>)
 800b082:	f004 fc4b 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d105      	bne.n	800b098 <tcp_pbuf_prealloc+0x3c>
 800b08c:	4b2b      	ldr	r3, [pc, #172]	; (800b13c <tcp_pbuf_prealloc+0xe0>)
 800b08e:	22e9      	movs	r2, #233	; 0xe9
 800b090:	492d      	ldr	r1, [pc, #180]	; (800b148 <tcp_pbuf_prealloc+0xec>)
 800b092:	482c      	ldr	r0, [pc, #176]	; (800b144 <tcp_pbuf_prealloc+0xe8>)
 800b094:	f004 fc42 	bl	800f91c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b098:	89ba      	ldrh	r2, [r7, #12]
 800b09a:	897b      	ldrh	r3, [r7, #10]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d221      	bcs.n	800b0e4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b0a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d111      	bne.n	800b0d0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	8b5b      	ldrh	r3, [r3, #26]
 800b0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d115      	bne.n	800b0e4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b0b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d007      	beq.n	800b0d0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d103      	bne.n	800b0d0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b0d0:	89bb      	ldrh	r3, [r7, #12]
 800b0d2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b0d6:	f023 0203 	bic.w	r2, r3, #3
 800b0da:	897b      	ldrh	r3, [r7, #10]
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	bf28      	it	cs
 800b0e0:	4613      	movcs	r3, r2
 800b0e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b0e4:	8af9      	ldrh	r1, [r7, #22]
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fb f841 	bl	8006174 <pbuf_alloc>
 800b0f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e019      	b.n	800b132 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d006      	beq.n	800b114 <tcp_pbuf_prealloc+0xb8>
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <tcp_pbuf_prealloc+0xe0>)
 800b108:	f240 120b 	movw	r2, #267	; 0x10b
 800b10c:	490f      	ldr	r1, [pc, #60]	; (800b14c <tcp_pbuf_prealloc+0xf0>)
 800b10e:	480d      	ldr	r0, [pc, #52]	; (800b144 <tcp_pbuf_prealloc+0xe8>)
 800b110:	f004 fc04 	bl	800f91c <iprintf>
  *oversize = p->len - length;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	895a      	ldrh	r2, [r3, #10]
 800b118:	89bb      	ldrh	r3, [r7, #12]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	89ba      	ldrh	r2, [r7, #12]
 800b126:	811a      	strh	r2, [r3, #8]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	891a      	ldrh	r2, [r3, #8]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	815a      	strh	r2, [r3, #10]
  return p;
 800b130:	693b      	ldr	r3, [r7, #16]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	080125e8 	.word	0x080125e8
 800b140:	080126a0 	.word	0x080126a0
 800b144:	0801263c 	.word	0x0801263c
 800b148:	080126c4 	.word	0x080126c4
 800b14c:	080126e4 	.word	0x080126e4

0800b150 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <tcp_write_checks+0x20>
 800b162:	4b33      	ldr	r3, [pc, #204]	; (800b230 <tcp_write_checks+0xe0>)
 800b164:	f240 1233 	movw	r2, #307	; 0x133
 800b168:	4932      	ldr	r1, [pc, #200]	; (800b234 <tcp_write_checks+0xe4>)
 800b16a:	4833      	ldr	r0, [pc, #204]	; (800b238 <tcp_write_checks+0xe8>)
 800b16c:	f004 fbd6 	bl	800f91c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	7d1b      	ldrb	r3, [r3, #20]
 800b174:	2b04      	cmp	r3, #4
 800b176:	d00e      	beq.n	800b196 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b17c:	2b07      	cmp	r3, #7
 800b17e:	d00a      	beq.n	800b196 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b184:	2b02      	cmp	r3, #2
 800b186:	d006      	beq.n	800b196 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d002      	beq.n	800b196 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b190:	f06f 030a 	mvn.w	r3, #10
 800b194:	e048      	b.n	800b228 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b196:	887b      	ldrh	r3, [r7, #2]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <tcp_write_checks+0x50>
    return ERR_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	e043      	b.n	800b228 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1a6:	887a      	ldrh	r2, [r7, #2]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d909      	bls.n	800b1c0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	8b5b      	ldrh	r3, [r3, #26]
 800b1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1be:	e033      	b.n	800b228 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1c6:	2b08      	cmp	r3, #8
 800b1c8:	d909      	bls.n	800b1de <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	8b5b      	ldrh	r3, [r3, #26]
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b1d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1dc:	e024      	b.n	800b228 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00f      	beq.n	800b208 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d11a      	bne.n	800b226 <tcp_write_checks+0xd6>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d116      	bne.n	800b226 <tcp_write_checks+0xd6>
 800b1f8:	4b0d      	ldr	r3, [pc, #52]	; (800b230 <tcp_write_checks+0xe0>)
 800b1fa:	f240 1255 	movw	r2, #341	; 0x155
 800b1fe:	490f      	ldr	r1, [pc, #60]	; (800b23c <tcp_write_checks+0xec>)
 800b200:	480d      	ldr	r0, [pc, #52]	; (800b238 <tcp_write_checks+0xe8>)
 800b202:	f004 fb8b 	bl	800f91c <iprintf>
 800b206:	e00e      	b.n	800b226 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d103      	bne.n	800b218 <tcp_write_checks+0xc8>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d006      	beq.n	800b226 <tcp_write_checks+0xd6>
 800b218:	4b05      	ldr	r3, [pc, #20]	; (800b230 <tcp_write_checks+0xe0>)
 800b21a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b21e:	4908      	ldr	r1, [pc, #32]	; (800b240 <tcp_write_checks+0xf0>)
 800b220:	4805      	ldr	r0, [pc, #20]	; (800b238 <tcp_write_checks+0xe8>)
 800b222:	f004 fb7b 	bl	800f91c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	080125e8 	.word	0x080125e8
 800b234:	080126f8 	.word	0x080126f8
 800b238:	0801263c 	.word	0x0801263c
 800b23c:	08012718 	.word	0x08012718
 800b240:	08012754 	.word	0x08012754

0800b244 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b244:	b590      	push	{r4, r7, lr}
 800b246:	b09b      	sub	sp, #108	; 0x6c
 800b248:	af04      	add	r7, sp, #16
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	4611      	mov	r1, r2
 800b250:	461a      	mov	r2, r3
 800b252:	460b      	mov	r3, r1
 800b254:	80fb      	strh	r3, [r7, #6]
 800b256:	4613      	mov	r3, r2
 800b258:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b25a:	2300      	movs	r3, #0
 800b25c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	653b      	str	r3, [r7, #80]	; 0x50
 800b262:	2300      	movs	r3, #0
 800b264:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b266:	2300      	movs	r3, #0
 800b268:	64bb      	str	r3, [r7, #72]	; 0x48
 800b26a:	2300      	movs	r3, #0
 800b26c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b26e:	2300      	movs	r3, #0
 800b270:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <tcp_write+0x5c>
 800b28c:	4ba4      	ldr	r3, [pc, #656]	; (800b520 <tcp_write+0x2dc>)
 800b28e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b292:	49a4      	ldr	r1, [pc, #656]	; (800b524 <tcp_write+0x2e0>)
 800b294:	48a4      	ldr	r0, [pc, #656]	; (800b528 <tcp_write+0x2e4>)
 800b296:	f004 fb41 	bl	800f91c <iprintf>
 800b29a:	f06f 030f 	mvn.w	r3, #15
 800b29e:	e32a      	b.n	800b8f6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2a6:	085b      	lsrs	r3, r3, #1
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bf28      	it	cs
 800b2b2:	4613      	movcs	r3, r2
 800b2b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b2b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d102      	bne.n	800b2c2 <tcp_write+0x7e>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2c0:	e000      	b.n	800b2c4 <tcp_write+0x80>
 800b2c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d109      	bne.n	800b2e0 <tcp_write+0x9c>
 800b2cc:	4b94      	ldr	r3, [pc, #592]	; (800b520 <tcp_write+0x2dc>)
 800b2ce:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b2d2:	4996      	ldr	r1, [pc, #600]	; (800b52c <tcp_write+0x2e8>)
 800b2d4:	4894      	ldr	r0, [pc, #592]	; (800b528 <tcp_write+0x2e4>)
 800b2d6:	f004 fb21 	bl	800f91c <iprintf>
 800b2da:	f06f 030f 	mvn.w	r3, #15
 800b2de:	e30a      	b.n	800b8f6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b2e0:	88fb      	ldrh	r3, [r7, #6]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f7ff ff33 	bl	800b150 <tcp_write_checks>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b2f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <tcp_write+0xba>
    return err;
 800b2f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b2fc:	e2fb      	b.n	800b8f6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b304:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b308:	2300      	movs	r3, #0
 800b30a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 80f6 	beq.w	800b504 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b31c:	653b      	str	r3, [r7, #80]	; 0x50
 800b31e:	e002      	b.n	800b326 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f8      	bne.n	800b320 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b330:	7a9b      	ldrb	r3, [r3, #10]
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	b29b      	uxth	r3, r3
 800b336:	f003 0304 	and.w	r3, r3, #4
 800b33a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b33c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b340:	891b      	ldrh	r3, [r3, #8]
 800b342:	4619      	mov	r1, r3
 800b344:	8c3b      	ldrh	r3, [r7, #32]
 800b346:	440b      	add	r3, r1
 800b348:	429a      	cmp	r2, r3
 800b34a:	da06      	bge.n	800b35a <tcp_write+0x116>
 800b34c:	4b74      	ldr	r3, [pc, #464]	; (800b520 <tcp_write+0x2dc>)
 800b34e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b352:	4977      	ldr	r1, [pc, #476]	; (800b530 <tcp_write+0x2ec>)
 800b354:	4874      	ldr	r0, [pc, #464]	; (800b528 <tcp_write+0x2e4>)
 800b356:	f004 fae1 	bl	800f91c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b35c:	891a      	ldrh	r2, [r3, #8]
 800b35e:	8c3b      	ldrh	r3, [r7, #32]
 800b360:	4413      	add	r3, r2
 800b362:	b29b      	uxth	r3, r3
 800b364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b370:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b372:	8a7b      	ldrh	r3, [r7, #18]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d026      	beq.n	800b3c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b378:	8a7b      	ldrh	r3, [r7, #18]
 800b37a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d206      	bcs.n	800b38e <tcp_write+0x14a>
 800b380:	4b67      	ldr	r3, [pc, #412]	; (800b520 <tcp_write+0x2dc>)
 800b382:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b386:	496b      	ldr	r1, [pc, #428]	; (800b534 <tcp_write+0x2f0>)
 800b388:	4867      	ldr	r0, [pc, #412]	; (800b528 <tcp_write+0x2e4>)
 800b38a:	f004 fac7 	bl	800f91c <iprintf>
      seg = last_unsent;
 800b38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b390:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b392:	8a7b      	ldrh	r3, [r7, #18]
 800b394:	88fa      	ldrh	r2, [r7, #6]
 800b396:	4293      	cmp	r3, r2
 800b398:	bf28      	it	cs
 800b39a:	4613      	movcs	r3, r2
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bf28      	it	cs
 800b3a4:	4613      	movcs	r3, r2
 800b3a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b3a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b3ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b3b4:	8a7a      	ldrh	r2, [r7, #18]
 800b3b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b3be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b3c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b3c6:	8a7b      	ldrh	r3, [r7, #18]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00b      	beq.n	800b3e4 <tcp_write+0x1a0>
 800b3cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d006      	beq.n	800b3e4 <tcp_write+0x1a0>
 800b3d6:	4b52      	ldr	r3, [pc, #328]	; (800b520 <tcp_write+0x2dc>)
 800b3d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3dc:	4956      	ldr	r1, [pc, #344]	; (800b538 <tcp_write+0x2f4>)
 800b3de:	4852      	ldr	r0, [pc, #328]	; (800b528 <tcp_write+0x2e4>)
 800b3e0:	f004 fa9c 	bl	800f91c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b3e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b3e8:	88fb      	ldrh	r3, [r7, #6]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	f080 8167 	bcs.w	800b6be <tcp_write+0x47a>
 800b3f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 8163 	beq.w	800b6be <tcp_write+0x47a>
 800b3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3fa:	891b      	ldrh	r3, [r3, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 815e 	beq.w	800b6be <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b402:	88fa      	ldrh	r2, [r7, #6]
 800b404:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b408:	1ad2      	subs	r2, r2, r3
 800b40a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b40c:	4293      	cmp	r3, r2
 800b40e:	bfa8      	it	ge
 800b410:	4613      	movge	r3, r2
 800b412:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b416:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b418:	797b      	ldrb	r3, [r7, #5]
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d027      	beq.n	800b472 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b422:	f107 0012 	add.w	r0, r7, #18
 800b426:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b428:	8bf9      	ldrh	r1, [r7, #30]
 800b42a:	2301      	movs	r3, #1
 800b42c:	9302      	str	r3, [sp, #8]
 800b42e:	797b      	ldrb	r3, [r7, #5]
 800b430:	9301      	str	r3, [sp, #4]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	4603      	mov	r3, r0
 800b438:	2000      	movs	r0, #0
 800b43a:	f7ff fe0f 	bl	800b05c <tcp_pbuf_prealloc>
 800b43e:	6578      	str	r0, [r7, #84]	; 0x54
 800b440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 8225 	beq.w	800b892 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b44a:	6858      	ldr	r0, [r3, #4]
 800b44c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	4413      	add	r3, r2
 800b454:	8bfa      	ldrh	r2, [r7, #30]
 800b456:	4619      	mov	r1, r3
 800b458:	f004 fa4a 	bl	800f8f0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b45c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b45e:	f7fb f9f5 	bl	800684c <pbuf_clen>
 800b462:	4603      	mov	r3, r0
 800b464:	461a      	mov	r2, r3
 800b466:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b46a:	4413      	add	r3, r2
 800b46c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b470:	e041      	b.n	800b4f6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
 800b478:	e002      	b.n	800b480 <tcp_write+0x23c>
 800b47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1f8      	bne.n	800b47a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48a:	7b1b      	ldrb	r3, [r3, #12]
 800b48c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d115      	bne.n	800b4c0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b49a:	8952      	ldrh	r2, [r2, #10]
 800b49c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d10d      	bne.n	800b4c0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b4a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d006      	beq.n	800b4ba <tcp_write+0x276>
 800b4ac:	4b1c      	ldr	r3, [pc, #112]	; (800b520 <tcp_write+0x2dc>)
 800b4ae:	f240 2231 	movw	r2, #561	; 0x231
 800b4b2:	4922      	ldr	r1, [pc, #136]	; (800b53c <tcp_write+0x2f8>)
 800b4b4:	481c      	ldr	r0, [pc, #112]	; (800b528 <tcp_write+0x2e4>)
 800b4b6:	f004 fa31 	bl	800f91c <iprintf>
          extendlen = seglen;
 800b4ba:	8bfb      	ldrh	r3, [r7, #30]
 800b4bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b4be:	e01a      	b.n	800b4f6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b4c0:	8bfb      	ldrh	r3, [r7, #30]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f7fa fe54 	bl	8006174 <pbuf_alloc>
 800b4cc:	6578      	str	r0, [r7, #84]	; 0x54
 800b4ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 81e0 	beq.w	800b896 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b4d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	441a      	add	r2, r3
 800b4de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b4e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b4e4:	f7fb f9b2 	bl	800684c <pbuf_clen>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b4f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4fa:	8bfb      	ldrh	r3, [r7, #30]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b502:	e0dc      	b.n	800b6be <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 80d7 	beq.w	800b6be <tcp_write+0x47a>
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <tcp_write+0x2dc>)
 800b512:	f240 224a 	movw	r2, #586	; 0x24a
 800b516:	490a      	ldr	r1, [pc, #40]	; (800b540 <tcp_write+0x2fc>)
 800b518:	4803      	ldr	r0, [pc, #12]	; (800b528 <tcp_write+0x2e4>)
 800b51a:	f004 f9ff 	bl	800f91c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b51e:	e0ce      	b.n	800b6be <tcp_write+0x47a>
 800b520:	080125e8 	.word	0x080125e8
 800b524:	08012788 	.word	0x08012788
 800b528:	0801263c 	.word	0x0801263c
 800b52c:	080127a0 	.word	0x080127a0
 800b530:	080127d4 	.word	0x080127d4
 800b534:	080127ec 	.word	0x080127ec
 800b538:	0801280c 	.word	0x0801280c
 800b53c:	0801282c 	.word	0x0801282c
 800b540:	08012858 	.word	0x08012858
    struct pbuf *p;
    u16_t left = len - pos;
 800b544:	88fa      	ldrh	r2, [r7, #6]
 800b546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b54e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b552:	b29b      	uxth	r3, r3
 800b554:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b55a:	8b7a      	ldrh	r2, [r7, #26]
 800b55c:	8bbb      	ldrh	r3, [r7, #28]
 800b55e:	4293      	cmp	r3, r2
 800b560:	bf28      	it	cs
 800b562:	4613      	movcs	r3, r2
 800b564:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b566:	797b      	ldrb	r3, [r7, #5]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d036      	beq.n	800b5de <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b574:	b29a      	uxth	r2, r3
 800b576:	8b3b      	ldrh	r3, [r7, #24]
 800b578:	4413      	add	r3, r2
 800b57a:	b299      	uxth	r1, r3
 800b57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b57e:	2b00      	cmp	r3, #0
 800b580:	bf0c      	ite	eq
 800b582:	2301      	moveq	r3, #1
 800b584:	2300      	movne	r3, #0
 800b586:	b2db      	uxtb	r3, r3
 800b588:	f107 0012 	add.w	r0, r7, #18
 800b58c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b58e:	9302      	str	r3, [sp, #8]
 800b590:	797b      	ldrb	r3, [r7, #5]
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	4603      	mov	r3, r0
 800b59a:	2036      	movs	r0, #54	; 0x36
 800b59c:	f7ff fd5e 	bl	800b05c <tcp_pbuf_prealloc>
 800b5a0:	6338      	str	r0, [r7, #48]	; 0x30
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 8178 	beq.w	800b89a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	895b      	ldrh	r3, [r3, #10]
 800b5ae:	8b3a      	ldrh	r2, [r7, #24]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d906      	bls.n	800b5c2 <tcp_write+0x37e>
 800b5b4:	4b8c      	ldr	r3, [pc, #560]	; (800b7e8 <tcp_write+0x5a4>)
 800b5b6:	f240 2266 	movw	r2, #614	; 0x266
 800b5ba:	498c      	ldr	r1, [pc, #560]	; (800b7ec <tcp_write+0x5a8>)
 800b5bc:	488c      	ldr	r0, [pc, #560]	; (800b7f0 <tcp_write+0x5ac>)
 800b5be:	f004 f9ad 	bl	800f91c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5ca:	18d0      	adds	r0, r2, r3
 800b5cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	8b3a      	ldrh	r2, [r7, #24]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f004 f98a 	bl	800f8f0 <memcpy>
 800b5dc:	e02f      	b.n	800b63e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b5de:	8a7b      	ldrh	r3, [r7, #18]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d006      	beq.n	800b5f2 <tcp_write+0x3ae>
 800b5e4:	4b80      	ldr	r3, [pc, #512]	; (800b7e8 <tcp_write+0x5a4>)
 800b5e6:	f240 2271 	movw	r2, #625	; 0x271
 800b5ea:	4982      	ldr	r1, [pc, #520]	; (800b7f4 <tcp_write+0x5b0>)
 800b5ec:	4880      	ldr	r0, [pc, #512]	; (800b7f0 <tcp_write+0x5ac>)
 800b5ee:	f004 f995 	bl	800f91c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b5f2:	8b3b      	ldrh	r3, [r7, #24]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	2036      	movs	r0, #54	; 0x36
 800b5fa:	f7fa fdbb 	bl	8006174 <pbuf_alloc>
 800b5fe:	6178      	str	r0, [r7, #20]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 814b 	beq.w	800b89e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	441a      	add	r2, r3
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b614:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b61e:	4619      	mov	r1, r3
 800b620:	2036      	movs	r0, #54	; 0x36
 800b622:	f7fa fda7 	bl	8006174 <pbuf_alloc>
 800b626:	6338      	str	r0, [r7, #48]	; 0x30
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b62e:	6978      	ldr	r0, [r7, #20]
 800b630:	f7fb f884 	bl	800673c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b634:	e136      	b.n	800b8a4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b636:	6979      	ldr	r1, [r7, #20]
 800b638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b63a:	f7fb f941 	bl	80068c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b63e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b640:	f7fb f904 	bl	800684c <pbuf_clen>
 800b644:	4603      	mov	r3, r0
 800b646:	461a      	mov	r2, r3
 800b648:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b64c:	4413      	add	r3, r2
 800b64e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b656:	2b09      	cmp	r3, #9
 800b658:	d903      	bls.n	800b662 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b65a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b65c:	f7fb f86e 	bl	800673c <pbuf_free>
      goto memerr;
 800b660:	e120      	b.n	800b8a4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b66a:	441a      	add	r2, r3
 800b66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	4613      	mov	r3, r2
 800b674:	2200      	movs	r2, #0
 800b676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff fc51 	bl	800af20 <tcp_create_segment>
 800b67e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 810d 	beq.w	800b8a2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d102      	bne.n	800b694 <tcp_write+0x450>
      queue = seg;
 800b68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b690:	647b      	str	r3, [r7, #68]	; 0x44
 800b692:	e00c      	b.n	800b6ae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <tcp_write+0x464>
 800b69a:	4b53      	ldr	r3, [pc, #332]	; (800b7e8 <tcp_write+0x5a4>)
 800b69c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b6a0:	4955      	ldr	r1, [pc, #340]	; (800b7f8 <tcp_write+0x5b4>)
 800b6a2:	4853      	ldr	r0, [pc, #332]	; (800b7f0 <tcp_write+0x5ac>)
 800b6a4:	f004 f93a 	bl	800f91c <iprintf>
      prev_seg->next = seg;
 800b6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b6b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6b6:	8b3b      	ldrh	r3, [r7, #24]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b6be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	f4ff af3d 	bcc.w	800b544 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b6ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d02c      	beq.n	800b72a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6d6:	e01e      	b.n	800b716 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6da:	891a      	ldrh	r2, [r3, #8]
 800b6dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b6de:	4413      	add	r3, r2
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d110      	bne.n	800b710 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f4:	8952      	ldrh	r2, [r2, #10]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f004 f8f7 	bl	800f8f0 <memcpy>
        p->len += oversize_used;
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	895a      	ldrh	r2, [r3, #10]
 800b706:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b708:	4413      	add	r3, r2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1dd      	bne.n	800b6d8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b71c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b71e:	891a      	ldrh	r2, [r3, #8]
 800b720:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b722:	4413      	add	r3, r2
 800b724:	b29a      	uxth	r2, r3
 800b726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b728:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b72a:	8a7a      	ldrh	r2, [r7, #18]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b734:	2b00      	cmp	r3, #0
 800b736:	d018      	beq.n	800b76a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <tcp_write+0x508>
 800b73e:	4b2a      	ldr	r3, [pc, #168]	; (800b7e8 <tcp_write+0x5a4>)
 800b740:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b744:	492d      	ldr	r1, [pc, #180]	; (800b7fc <tcp_write+0x5b8>)
 800b746:	482a      	ldr	r0, [pc, #168]	; (800b7f0 <tcp_write+0x5ac>)
 800b748:	f004 f8e8 	bl	800f91c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b752:	4618      	mov	r0, r3
 800b754:	f7fb f8b4 	bl	80068c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b75a:	891a      	ldrh	r2, [r3, #8]
 800b75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b75e:	891b      	ldrh	r3, [r3, #8]
 800b760:	4413      	add	r3, r2
 800b762:	b29a      	uxth	r2, r3
 800b764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b766:	811a      	strh	r2, [r3, #8]
 800b768:	e037      	b.n	800b7da <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b76a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d034      	beq.n	800b7da <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <tcp_write+0x53a>
 800b776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <tcp_write+0x548>
 800b77e:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <tcp_write+0x5a4>)
 800b780:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b784:	491e      	ldr	r1, [pc, #120]	; (800b800 <tcp_write+0x5bc>)
 800b786:	481a      	ldr	r0, [pc, #104]	; (800b7f0 <tcp_write+0x5ac>)
 800b788:	f004 f8c8 	bl	800f91c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
 800b792:	e009      	b.n	800b7a8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	891a      	ldrh	r2, [r3, #8]
 800b798:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b79a:	4413      	add	r3, r2
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1f1      	bne.n	800b794 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	891a      	ldrh	r2, [r3, #8]
 800b7b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7b6:	4413      	add	r3, r2
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	895a      	ldrh	r2, [r3, #10]
 800b7c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7c4:	4413      	add	r3, r2
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ce:	891a      	ldrh	r2, [r3, #8]
 800b7d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7d2:	4413      	add	r3, r2
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7d8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d111      	bne.n	800b804 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800b7e6:	e010      	b.n	800b80a <tcp_write+0x5c6>
 800b7e8:	080125e8 	.word	0x080125e8
 800b7ec:	08012888 	.word	0x08012888
 800b7f0:	0801263c 	.word	0x0801263c
 800b7f4:	080128c8 	.word	0x080128c8
 800b7f8:	080128d8 	.word	0x080128d8
 800b7fc:	080128ec 	.word	0x080128ec
 800b800:	08012924 	.word	0x08012924
  } else {
    last_unsent->next = queue;
 800b804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b808:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b80e:	88fb      	ldrh	r3, [r7, #6]
 800b810:	441a      	add	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b81c:	88fb      	ldrh	r3, [r7, #6]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b82e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00e      	beq.n	800b85a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <tcp_write+0x616>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <tcp_write+0x616>
 800b84c:	4b2c      	ldr	r3, [pc, #176]	; (800b900 <tcp_write+0x6bc>)
 800b84e:	f240 3212 	movw	r2, #786	; 0x312
 800b852:	492c      	ldr	r1, [pc, #176]	; (800b904 <tcp_write+0x6c0>)
 800b854:	482c      	ldr	r0, [pc, #176]	; (800b908 <tcp_write+0x6c4>)
 800b856:	f004 f861 	bl	800f91c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d016      	beq.n	800b88e <tcp_write+0x64a>
 800b860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d012      	beq.n	800b88e <tcp_write+0x64a>
 800b868:	797b      	ldrb	r3, [r7, #5]
 800b86a:	f003 0302 	and.w	r3, r3, #2
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10d      	bne.n	800b88e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	899b      	ldrh	r3, [r3, #12]
 800b878:	b29c      	uxth	r4, r3
 800b87a:	2008      	movs	r0, #8
 800b87c:	f7f9 fc40 	bl	8005100 <lwip_htons>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	4322      	orrs	r2, r4
 800b88a:	b292      	uxth	r2, r2
 800b88c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	e031      	b.n	800b8f6 <tcp_write+0x6b2>
          goto memerr;
 800b892:	bf00      	nop
 800b894:	e006      	b.n	800b8a4 <tcp_write+0x660>
            goto memerr;
 800b896:	bf00      	nop
 800b898:	e004      	b.n	800b8a4 <tcp_write+0x660>
        goto memerr;
 800b89a:	bf00      	nop
 800b89c:	e002      	b.n	800b8a4 <tcp_write+0x660>
        goto memerr;
 800b89e:	bf00      	nop
 800b8a0:	e000      	b.n	800b8a4 <tcp_write+0x660>
      goto memerr;
 800b8a2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8b5b      	ldrh	r3, [r3, #26]
 800b8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b8b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b8ba:	f7fa ff3f 	bl	800673c <pbuf_free>
  }
  if (queue != NULL) {
 800b8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <tcp_write+0x686>
    tcp_segs_free(queue);
 800b8c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b8c6:	f7fc fb51 	bl	8007f6c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <tcp_write+0x6ae>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d106      	bne.n	800b8f2 <tcp_write+0x6ae>
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <tcp_write+0x6bc>)
 800b8e6:	f240 3227 	movw	r2, #807	; 0x327
 800b8ea:	4906      	ldr	r1, [pc, #24]	; (800b904 <tcp_write+0x6c0>)
 800b8ec:	4806      	ldr	r0, [pc, #24]	; (800b908 <tcp_write+0x6c4>)
 800b8ee:	f004 f815 	bl	800f91c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b8f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	375c      	adds	r7, #92	; 0x5c
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd90      	pop	{r4, r7, pc}
 800b8fe:	bf00      	nop
 800b900:	080125e8 	.word	0x080125e8
 800b904:	0801295c 	.word	0x0801295c
 800b908:	0801263c 	.word	0x0801263c

0800b90c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b90c:	b590      	push	{r4, r7, lr}
 800b90e:	b08b      	sub	sp, #44	; 0x2c
 800b910:	af02      	add	r7, sp, #8
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <tcp_split_unsent_seg+0x2c>
 800b92a:	4b95      	ldr	r3, [pc, #596]	; (800bb80 <tcp_split_unsent_seg+0x274>)
 800b92c:	f240 324b 	movw	r2, #843	; 0x34b
 800b930:	4994      	ldr	r1, [pc, #592]	; (800bb84 <tcp_split_unsent_seg+0x278>)
 800b932:	4895      	ldr	r0, [pc, #596]	; (800bb88 <tcp_split_unsent_seg+0x27c>)
 800b934:	f003 fff2 	bl	800f91c <iprintf>

  useg = pcb->unsent;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b93c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b948:	e116      	b.n	800bb78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b94a:	887b      	ldrh	r3, [r7, #2]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d109      	bne.n	800b964 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b950:	4b8b      	ldr	r3, [pc, #556]	; (800bb80 <tcp_split_unsent_seg+0x274>)
 800b952:	f240 3253 	movw	r2, #851	; 0x353
 800b956:	498d      	ldr	r1, [pc, #564]	; (800bb8c <tcp_split_unsent_seg+0x280>)
 800b958:	488b      	ldr	r0, [pc, #556]	; (800bb88 <tcp_split_unsent_seg+0x27c>)
 800b95a:	f003 ffdf 	bl	800f91c <iprintf>
    return ERR_VAL;
 800b95e:	f06f 0305 	mvn.w	r3, #5
 800b962:	e109      	b.n	800bb78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	891b      	ldrh	r3, [r3, #8]
 800b968:	887a      	ldrh	r2, [r7, #2]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d301      	bcc.n	800b972 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	e102      	b.n	800bb78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b976:	887a      	ldrh	r2, [r7, #2]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d906      	bls.n	800b98a <tcp_split_unsent_seg+0x7e>
 800b97c:	4b80      	ldr	r3, [pc, #512]	; (800bb80 <tcp_split_unsent_seg+0x274>)
 800b97e:	f240 325b 	movw	r2, #859	; 0x35b
 800b982:	4983      	ldr	r1, [pc, #524]	; (800bb90 <tcp_split_unsent_seg+0x284>)
 800b984:	4880      	ldr	r0, [pc, #512]	; (800bb88 <tcp_split_unsent_seg+0x27c>)
 800b986:	f003 ffc9 	bl	800f91c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	891b      	ldrh	r3, [r3, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <tcp_split_unsent_seg+0x94>
 800b992:	4b7b      	ldr	r3, [pc, #492]	; (800bb80 <tcp_split_unsent_seg+0x274>)
 800b994:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b998:	497e      	ldr	r1, [pc, #504]	; (800bb94 <tcp_split_unsent_seg+0x288>)
 800b99a:	487b      	ldr	r0, [pc, #492]	; (800bb88 <tcp_split_unsent_seg+0x27c>)
 800b99c:	f003 ffbe 	bl	800f91c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	7a9b      	ldrb	r3, [r3, #10]
 800b9a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	891a      	ldrh	r2, [r3, #8]
 800b9b6:	887b      	ldrh	r3, [r7, #2]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	89bb      	ldrh	r3, [r7, #12]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	2036      	movs	r0, #54	; 0x36
 800b9ce:	f7fa fbd1 	bl	8006174 <pbuf_alloc>
 800b9d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 80b7 	beq.w	800bb4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	891a      	ldrh	r2, [r3, #8]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	891b      	ldrh	r3, [r3, #8]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	887b      	ldrh	r3, [r7, #2]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	6858      	ldr	r0, [r3, #4]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	685a      	ldr	r2, [r3, #4]
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	18d1      	adds	r1, r2, r3
 800b9fc:	897b      	ldrh	r3, [r7, #10]
 800b9fe:	89ba      	ldrh	r2, [r7, #12]
 800ba00:	f7fb f886 	bl	8006b10 <pbuf_copy_partial>
 800ba04:	4603      	mov	r3, r0
 800ba06:	461a      	mov	r2, r3
 800ba08:	89bb      	ldrh	r3, [r7, #12]
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	f040 809f 	bne.w	800bb4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	899b      	ldrh	r3, [r3, #12]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7f9 fb71 	bl	8005100 <lwip_htons>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ba28:	2300      	movs	r3, #0
 800ba2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ba2c:	7efb      	ldrb	r3, [r7, #27]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ba36:	7efb      	ldrb	r3, [r7, #27]
 800ba38:	f023 0308 	bic.w	r3, r3, #8
 800ba3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ba3e:	7ebb      	ldrb	r3, [r7, #26]
 800ba40:	f043 0308 	orr.w	r3, r3, #8
 800ba44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ba46:	7efb      	ldrb	r3, [r7, #27]
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d007      	beq.n	800ba60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ba50:	7efb      	ldrb	r3, [r7, #27]
 800ba52:	f023 0301 	bic.w	r3, r3, #1
 800ba56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ba58:	7ebb      	ldrb	r3, [r7, #26]
 800ba5a:	f043 0301 	orr.w	r3, r3, #1
 800ba5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7f9 fb5f 	bl	800512a <lwip_htonl>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	887b      	ldrh	r3, [r7, #2]
 800ba70:	18d1      	adds	r1, r2, r3
 800ba72:	7eba      	ldrb	r2, [r7, #26]
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	6939      	ldr	r1, [r7, #16]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7ff fa4f 	bl	800af20 <tcp_create_segment>
 800ba82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d063      	beq.n	800bb52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fa fedc 	bl	800684c <pbuf_clen>
 800ba94:	4603      	mov	r3, r0
 800ba96:	461a      	mov	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	6858      	ldr	r0, [r3, #4]
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	891a      	ldrh	r2, [r3, #8]
 800bab2:	89bb      	ldrh	r3, [r7, #12]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	4619      	mov	r1, r3
 800baba:	f7fa fcb9 	bl	8006430 <pbuf_realloc>
  useg->len -= remainder;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	891a      	ldrh	r2, [r3, #8]
 800bac2:	89bb      	ldrh	r3, [r7, #12]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	899b      	ldrh	r3, [r3, #12]
 800bad2:	b29c      	uxth	r4, r3
 800bad4:	7efb      	ldrb	r3, [r7, #27]
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f9 fb11 	bl	8005100 <lwip_htons>
 800bade:	4603      	mov	r3, r0
 800bae0:	461a      	mov	r2, r3
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	4322      	orrs	r2, r4
 800bae8:	b292      	uxth	r2, r2
 800baea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fa feab 	bl	800684c <pbuf_clen>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461a      	mov	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb00:	4413      	add	r3, r2
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fa fe9c 	bl	800684c <pbuf_clen>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb1e:	4413      	add	r3, r2
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d103      	bne.n	800bb46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e016      	b.n	800bb78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bb4a:	bf00      	nop
 800bb4c:	e002      	b.n	800bb54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bb4e:	bf00      	nop
 800bb50:	e000      	b.n	800bb54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bb52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d006      	beq.n	800bb68 <tcp_split_unsent_seg+0x25c>
 800bb5a:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <tcp_split_unsent_seg+0x274>)
 800bb5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bb60:	490d      	ldr	r1, [pc, #52]	; (800bb98 <tcp_split_unsent_seg+0x28c>)
 800bb62:	4809      	ldr	r0, [pc, #36]	; (800bb88 <tcp_split_unsent_seg+0x27c>)
 800bb64:	f003 feda 	bl	800f91c <iprintf>
  if (p != NULL) {
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bb6e:	6938      	ldr	r0, [r7, #16]
 800bb70:	f7fa fde4 	bl	800673c <pbuf_free>
  }

  return ERR_MEM;
 800bb74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3724      	adds	r7, #36	; 0x24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd90      	pop	{r4, r7, pc}
 800bb80:	080125e8 	.word	0x080125e8
 800bb84:	0801297c 	.word	0x0801297c
 800bb88:	0801263c 	.word	0x0801263c
 800bb8c:	080129a0 	.word	0x080129a0
 800bb90:	080129c4 	.word	0x080129c4
 800bb94:	080129d4 	.word	0x080129d4
 800bb98:	080129e4 	.word	0x080129e4

0800bb9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bb9c:	b590      	push	{r4, r7, lr}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d106      	bne.n	800bbb8 <tcp_send_fin+0x1c>
 800bbaa:	4b21      	ldr	r3, [pc, #132]	; (800bc30 <tcp_send_fin+0x94>)
 800bbac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bbb0:	4920      	ldr	r1, [pc, #128]	; (800bc34 <tcp_send_fin+0x98>)
 800bbb2:	4821      	ldr	r0, [pc, #132]	; (800bc38 <tcp_send_fin+0x9c>)
 800bbb4:	f003 feb2 	bl	800f91c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d02e      	beq.n	800bc1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	e002      	b.n	800bbce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1f8      	bne.n	800bbc8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	899b      	ldrh	r3, [r3, #12]
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f9 fa8e 	bl	8005100 <lwip_htons>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f003 0307 	and.w	r3, r3, #7
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d116      	bne.n	800bc1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	899b      	ldrh	r3, [r3, #12]
 800bbf6:	b29c      	uxth	r4, r3
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	f7f9 fa81 	bl	8005100 <lwip_htons>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	461a      	mov	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	4322      	orrs	r2, r4
 800bc08:	b292      	uxth	r2, r2
 800bc0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	8b5b      	ldrh	r3, [r3, #26]
 800bc10:	f043 0320 	orr.w	r3, r3, #32
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e004      	b.n	800bc28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bc1e:	2101      	movs	r1, #1
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f80b 	bl	800bc3c <tcp_enqueue_flags>
 800bc26:	4603      	mov	r3, r0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd90      	pop	{r4, r7, pc}
 800bc30:	080125e8 	.word	0x080125e8
 800bc34:	080129f0 	.word	0x080129f0
 800bc38:	0801263c 	.word	0x0801263c

0800bc3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	; 0x28
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bc50:	78fb      	ldrb	r3, [r7, #3]
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <tcp_enqueue_flags+0x2c>
 800bc5a:	4b67      	ldr	r3, [pc, #412]	; (800bdf8 <tcp_enqueue_flags+0x1bc>)
 800bc5c:	f240 4211 	movw	r2, #1041	; 0x411
 800bc60:	4966      	ldr	r1, [pc, #408]	; (800bdfc <tcp_enqueue_flags+0x1c0>)
 800bc62:	4867      	ldr	r0, [pc, #412]	; (800be00 <tcp_enqueue_flags+0x1c4>)
 800bc64:	f003 fe5a 	bl	800f91c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_enqueue_flags+0x40>
 800bc6e:	4b62      	ldr	r3, [pc, #392]	; (800bdf8 <tcp_enqueue_flags+0x1bc>)
 800bc70:	f240 4213 	movw	r2, #1043	; 0x413
 800bc74:	4963      	ldr	r1, [pc, #396]	; (800be04 <tcp_enqueue_flags+0x1c8>)
 800bc76:	4862      	ldr	r0, [pc, #392]	; (800be00 <tcp_enqueue_flags+0x1c4>)
 800bc78:	f003 fe50 	bl	800f91c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	f003 0302 	and.w	r3, r3, #2
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bc86:	2301      	movs	r3, #1
 800bc88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bc8a:	7ffb      	ldrb	r3, [r7, #31]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	f003 0304 	and.w	r3, r3, #4
 800bc94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc9e:	4619      	mov	r1, r3
 800bca0:	2036      	movs	r0, #54	; 0x36
 800bca2:	f7fa fa67 	bl	8006174 <pbuf_alloc>
 800bca6:	6138      	str	r0, [r7, #16]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d109      	bne.n	800bcc2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	8b5b      	ldrh	r3, [r3, #26]
 800bcb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bcbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcc0:	e095      	b.n	800bdee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	895a      	ldrh	r2, [r3, #10]
 800bcc6:	7dfb      	ldrb	r3, [r7, #23]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d206      	bcs.n	800bcdc <tcp_enqueue_flags+0xa0>
 800bcce:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <tcp_enqueue_flags+0x1bc>)
 800bcd0:	f240 4239 	movw	r2, #1081	; 0x439
 800bcd4:	494c      	ldr	r1, [pc, #304]	; (800be08 <tcp_enqueue_flags+0x1cc>)
 800bcd6:	484a      	ldr	r0, [pc, #296]	; (800be00 <tcp_enqueue_flags+0x1c4>)
 800bcd8:	f003 fe20 	bl	800f91c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bce0:	78fa      	ldrb	r2, [r7, #3]
 800bce2:	7ffb      	ldrb	r3, [r7, #31]
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	460b      	mov	r3, r1
 800bce8:	6939      	ldr	r1, [r7, #16]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff f918 	bl	800af20 <tcp_create_segment>
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d109      	bne.n	800bd0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	8b5b      	ldrh	r3, [r3, #26]
 800bcfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd0a:	e070      	b.n	800bdee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f003 0303 	and.w	r3, r3, #3
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d006      	beq.n	800bd26 <tcp_enqueue_flags+0xea>
 800bd18:	4b37      	ldr	r3, [pc, #220]	; (800bdf8 <tcp_enqueue_flags+0x1bc>)
 800bd1a:	f240 4242 	movw	r2, #1090	; 0x442
 800bd1e:	493b      	ldr	r1, [pc, #236]	; (800be0c <tcp_enqueue_flags+0x1d0>)
 800bd20:	4837      	ldr	r0, [pc, #220]	; (800be00 <tcp_enqueue_flags+0x1c4>)
 800bd22:	f003 fdfb 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	891b      	ldrh	r3, [r3, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d006      	beq.n	800bd3c <tcp_enqueue_flags+0x100>
 800bd2e:	4b32      	ldr	r3, [pc, #200]	; (800bdf8 <tcp_enqueue_flags+0x1bc>)
 800bd30:	f240 4243 	movw	r2, #1091	; 0x443
 800bd34:	4936      	ldr	r1, [pc, #216]	; (800be10 <tcp_enqueue_flags+0x1d4>)
 800bd36:	4832      	ldr	r0, [pc, #200]	; (800be00 <tcp_enqueue_flags+0x1c4>)
 800bd38:	f003 fdf0 	bl	800f91c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	66da      	str	r2, [r3, #108]	; 0x6c
 800bd4a:	e00d      	b.n	800bd68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd50:	61bb      	str	r3, [r7, #24]
 800bd52:	e002      	b.n	800bd5a <tcp_enqueue_flags+0x11e>
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	61bb      	str	r3, [r7, #24]
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1f8      	bne.n	800bd54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d104      	bne.n	800bd84 <tcp_enqueue_flags+0x148>
 800bd7a:	78fb      	ldrb	r3, [r7, #3]
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d004      	beq.n	800bd8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bd8e:	78fb      	ldrb	r3, [r7, #3]
 800bd90:	f003 0301 	and.w	r3, r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	8b5b      	ldrh	r3, [r3, #26]
 800bd9c:	f043 0320 	orr.w	r3, r3, #32
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fa fd4e 	bl	800684c <pbuf_clen>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdba:	4413      	add	r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00e      	beq.n	800bdec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10a      	bne.n	800bdec <tcp_enqueue_flags+0x1b0>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d106      	bne.n	800bdec <tcp_enqueue_flags+0x1b0>
 800bdde:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <tcp_enqueue_flags+0x1bc>)
 800bde0:	f240 4265 	movw	r2, #1125	; 0x465
 800bde4:	490b      	ldr	r1, [pc, #44]	; (800be14 <tcp_enqueue_flags+0x1d8>)
 800bde6:	4806      	ldr	r0, [pc, #24]	; (800be00 <tcp_enqueue_flags+0x1c4>)
 800bde8:	f003 fd98 	bl	800f91c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3720      	adds	r7, #32
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	080125e8 	.word	0x080125e8
 800bdfc:	08012a0c 	.word	0x08012a0c
 800be00:	0801263c 	.word	0x0801263c
 800be04:	08012a64 	.word	0x08012a64
 800be08:	08012a84 	.word	0x08012a84
 800be0c:	08012ac0 	.word	0x08012ac0
 800be10:	08012ad8 	.word	0x08012ad8
 800be14:	08012b04 	.word	0x08012b04

0800be18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800be18:	b5b0      	push	{r4, r5, r7, lr}
 800be1a:	b08a      	sub	sp, #40	; 0x28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <tcp_output+0x1c>
 800be26:	4b9e      	ldr	r3, [pc, #632]	; (800c0a0 <tcp_output+0x288>)
 800be28:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800be2c:	499d      	ldr	r1, [pc, #628]	; (800c0a4 <tcp_output+0x28c>)
 800be2e:	489e      	ldr	r0, [pc, #632]	; (800c0a8 <tcp_output+0x290>)
 800be30:	f003 fd74 	bl	800f91c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7d1b      	ldrb	r3, [r3, #20]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d106      	bne.n	800be4a <tcp_output+0x32>
 800be3c:	4b98      	ldr	r3, [pc, #608]	; (800c0a0 <tcp_output+0x288>)
 800be3e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800be42:	499a      	ldr	r1, [pc, #616]	; (800c0ac <tcp_output+0x294>)
 800be44:	4898      	ldr	r0, [pc, #608]	; (800c0a8 <tcp_output+0x290>)
 800be46:	f003 fd69 	bl	800f91c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800be4a:	4b99      	ldr	r3, [pc, #612]	; (800c0b0 <tcp_output+0x298>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d101      	bne.n	800be58 <tcp_output+0x40>
    return ERR_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	e1ce      	b.n	800c1f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be64:	4293      	cmp	r3, r2
 800be66:	bf28      	it	cs
 800be68:	4613      	movcs	r3, r2
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be72:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10b      	bne.n	800be92 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8b5b      	ldrh	r3, [r3, #26]
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b00      	cmp	r3, #0
 800be84:	f000 81aa 	beq.w	800c1dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fdcb 	bl	800ca24 <tcp_send_empty_ack>
 800be8e:	4603      	mov	r3, r0
 800be90:	e1b1      	b.n	800c1f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3304      	adds	r3, #4
 800be98:	461a      	mov	r2, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff f824 	bl	800aee8 <tcp_route>
 800bea0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d102      	bne.n	800beae <tcp_output+0x96>
    return ERR_RTE;
 800bea8:	f06f 0303 	mvn.w	r3, #3
 800beac:	e1a3      	b.n	800c1f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <tcp_output+0xa4>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d111      	bne.n	800bee0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <tcp_output+0xb0>
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	3304      	adds	r3, #4
 800bec6:	e000      	b.n	800beca <tcp_output+0xb2>
 800bec8:	2300      	movs	r3, #0
 800beca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d102      	bne.n	800bed8 <tcp_output+0xc0>
      return ERR_RTE;
 800bed2:	f06f 0303 	mvn.w	r3, #3
 800bed6:	e18e      	b.n	800c1f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f9 f91f 	bl	800512a <lwip_htonl>
 800beec:	4602      	mov	r2, r0
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef6:	8912      	ldrh	r2, [r2, #8]
 800bef8:	4413      	add	r3, r2
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	429a      	cmp	r2, r3
 800befe:	d227      	bcs.n	800bf50 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf06:	461a      	mov	r2, r3
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d114      	bne.n	800bf38 <tcp_output+0x120>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d110      	bne.n	800bf38 <tcp_output+0x120>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10b      	bne.n	800bf38 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	8b5b      	ldrh	r3, [r3, #26]
 800bf3c:	f003 0302 	and.w	r3, r3, #2
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 814d 	beq.w	800c1e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fd6c 	bl	800ca24 <tcp_send_empty_ack>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	e152      	b.n	800c1f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 811c 	beq.w	800c19e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800bf66:	e002      	b.n	800bf6e <tcp_output+0x156>
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	623b      	str	r3, [r7, #32]
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1f8      	bne.n	800bf68 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800bf76:	e112      	b.n	800c19e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	899b      	ldrh	r3, [r3, #12]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f9 f8bd 	bl	8005100 <lwip_htons>
 800bf86:	4603      	mov	r3, r0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d006      	beq.n	800bfa0 <tcp_output+0x188>
 800bf92:	4b43      	ldr	r3, [pc, #268]	; (800c0a0 <tcp_output+0x288>)
 800bf94:	f240 5236 	movw	r2, #1334	; 0x536
 800bf98:	4946      	ldr	r1, [pc, #280]	; (800c0b4 <tcp_output+0x29c>)
 800bf9a:	4843      	ldr	r0, [pc, #268]	; (800c0a8 <tcp_output+0x290>)
 800bf9c:	f003 fcbe 	bl	800f91c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01f      	beq.n	800bfe8 <tcp_output+0x1d0>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8b5b      	ldrh	r3, [r3, #26]
 800bfac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d119      	bne.n	800bfe8 <tcp_output+0x1d0>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <tcp_output+0x1bc>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d110      	bne.n	800bfe8 <tcp_output+0x1d0>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfca:	891a      	ldrh	r2, [r3, #8]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d209      	bcs.n	800bfe8 <tcp_output+0x1d0>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d004      	beq.n	800bfe8 <tcp_output+0x1d0>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d901      	bls.n	800bfec <tcp_output+0x1d4>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e000      	b.n	800bfee <tcp_output+0x1d6>
 800bfec:	2300      	movs	r3, #0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8b5b      	ldrh	r3, [r3, #26]
 800bff6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 80e4 	beq.w	800c1c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7d1b      	ldrb	r3, [r3, #20]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d00d      	beq.n	800c024 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	899b      	ldrh	r3, [r3, #12]
 800c00e:	b29c      	uxth	r4, r3
 800c010:	2010      	movs	r0, #16
 800c012:	f7f9 f875 	bl	8005100 <lwip_htons>
 800c016:	4603      	mov	r3, r0
 800c018:	461a      	mov	r2, r3
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	4322      	orrs	r2, r4
 800c020:	b292      	uxth	r2, r2
 800c022:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c02a:	f000 f909 	bl	800c240 <tcp_output_segment>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d009      	beq.n	800c04e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	8b5b      	ldrh	r3, [r3, #26]
 800c03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c042:	b29a      	uxth	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	835a      	strh	r2, [r3, #26]
      return err;
 800c048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c04c:	e0d3      	b.n	800c1f6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	7d1b      	ldrb	r3, [r3, #20]
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d006      	beq.n	800c06c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8b5b      	ldrh	r3, [r3, #26]
 800c062:	f023 0303 	bic.w	r3, r3, #3
 800c066:	b29a      	uxth	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	4618      	mov	r0, r3
 800c074:	f7f9 f859 	bl	800512a <lwip_htonl>
 800c078:	4604      	mov	r4, r0
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	891b      	ldrh	r3, [r3, #8]
 800c07e:	461d      	mov	r5, r3
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	899b      	ldrh	r3, [r3, #12]
 800c086:	b29b      	uxth	r3, r3
 800c088:	4618      	mov	r0, r3
 800c08a:	f7f9 f839 	bl	8005100 <lwip_htons>
 800c08e:	4603      	mov	r3, r0
 800c090:	b2db      	uxtb	r3, r3
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00e      	beq.n	800c0b8 <tcp_output+0x2a0>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e00d      	b.n	800c0ba <tcp_output+0x2a2>
 800c09e:	bf00      	nop
 800c0a0:	080125e8 	.word	0x080125e8
 800c0a4:	08012b2c 	.word	0x08012b2c
 800c0a8:	0801263c 	.word	0x0801263c
 800c0ac:	08012b44 	.word	0x08012b44
 800c0b0:	20006d1c 	.word	0x20006d1c
 800c0b4:	08012b6c 	.word	0x08012b6c
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	442b      	add	r3, r5
 800c0bc:	4423      	add	r3, r4
 800c0be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	da02      	bge.n	800c0d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	891b      	ldrh	r3, [r3, #8]
 800c0d6:	461c      	mov	r4, r3
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f9 f80d 	bl	8005100 <lwip_htons>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	f003 0303 	and.w	r3, r3, #3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <tcp_output+0x2de>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e000      	b.n	800c0f8 <tcp_output+0x2e0>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	4423      	add	r3, r4
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d049      	beq.n	800c192 <tcp_output+0x37a>
      seg->next = NULL;
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d105      	bne.n	800c118 <tcp_output+0x300>
        pcb->unacked = seg;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c110:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	623b      	str	r3, [r7, #32]
 800c116:	e03f      	b.n	800c198 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	4618      	mov	r0, r3
 800c120:	f7f9 f803 	bl	800512a <lwip_htonl>
 800c124:	4604      	mov	r4, r0
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f8 fffc 	bl	800512a <lwip_htonl>
 800c132:	4603      	mov	r3, r0
 800c134:	1ae3      	subs	r3, r4, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	da24      	bge.n	800c184 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	3370      	adds	r3, #112	; 0x70
 800c13e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c140:	e002      	b.n	800c148 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d011      	beq.n	800c174 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f8 ffe6 	bl	800512a <lwip_htonl>
 800c15e:	4604      	mov	r4, r0
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	4618      	mov	r0, r3
 800c168:	f7f8 ffdf 	bl	800512a <lwip_htonl>
 800c16c:	4603      	mov	r3, r0
 800c16e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c170:	2b00      	cmp	r3, #0
 800c172:	dbe6      	blt.n	800c142 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e009      	b.n	800c198 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c188:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	623b      	str	r3, [r7, #32]
 800c190:	e002      	b.n	800c198 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c194:	f7fb feff 	bl	8007f96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d012      	beq.n	800c1ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7f8 ffbd 	bl	800512a <lwip_htonl>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ba:	8912      	ldrh	r2, [r2, #8]
 800c1bc:	4413      	add	r3, r2
  while (seg != NULL &&
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	f4bf aed9 	bcs.w	800bf78 <tcp_output+0x160>
 800c1c6:	e000      	b.n	800c1ca <tcp_output+0x3b2>
      break;
 800c1c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d108      	bne.n	800c1e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c1da:	e004      	b.n	800c1e6 <tcp_output+0x3ce>
    goto output_done;
 800c1dc:	bf00      	nop
 800c1de:	e002      	b.n	800c1e6 <tcp_output+0x3ce>
    goto output_done;
 800c1e0:	bf00      	nop
 800c1e2:	e000      	b.n	800c1e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c1e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3728      	adds	r7, #40	; 0x28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c1fe:	bf00      	nop

0800c200 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d106      	bne.n	800c21c <tcp_output_segment_busy+0x1c>
 800c20e:	4b09      	ldr	r3, [pc, #36]	; (800c234 <tcp_output_segment_busy+0x34>)
 800c210:	f240 529a 	movw	r2, #1434	; 0x59a
 800c214:	4908      	ldr	r1, [pc, #32]	; (800c238 <tcp_output_segment_busy+0x38>)
 800c216:	4809      	ldr	r0, [pc, #36]	; (800c23c <tcp_output_segment_busy+0x3c>)
 800c218:	f003 fb80 	bl	800f91c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	7b9b      	ldrb	r3, [r3, #14]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d001      	beq.n	800c22a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c226:	2301      	movs	r3, #1
 800c228:	e000      	b.n	800c22c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	080125e8 	.word	0x080125e8
 800c238:	08012b84 	.word	0x08012b84
 800c23c:	0801263c 	.word	0x0801263c

0800c240 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c240:	b5b0      	push	{r4, r5, r7, lr}
 800c242:	b08c      	sub	sp, #48	; 0x30
 800c244:	af04      	add	r7, sp, #16
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d106      	bne.n	800c260 <tcp_output_segment+0x20>
 800c252:	4b63      	ldr	r3, [pc, #396]	; (800c3e0 <tcp_output_segment+0x1a0>)
 800c254:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c258:	4962      	ldr	r1, [pc, #392]	; (800c3e4 <tcp_output_segment+0x1a4>)
 800c25a:	4863      	ldr	r0, [pc, #396]	; (800c3e8 <tcp_output_segment+0x1a8>)
 800c25c:	f003 fb5e 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d106      	bne.n	800c274 <tcp_output_segment+0x34>
 800c266:	4b5e      	ldr	r3, [pc, #376]	; (800c3e0 <tcp_output_segment+0x1a0>)
 800c268:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c26c:	495f      	ldr	r1, [pc, #380]	; (800c3ec <tcp_output_segment+0x1ac>)
 800c26e:	485e      	ldr	r0, [pc, #376]	; (800c3e8 <tcp_output_segment+0x1a8>)
 800c270:	f003 fb54 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <tcp_output_segment+0x48>
 800c27a:	4b59      	ldr	r3, [pc, #356]	; (800c3e0 <tcp_output_segment+0x1a0>)
 800c27c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c280:	495b      	ldr	r1, [pc, #364]	; (800c3f0 <tcp_output_segment+0x1b0>)
 800c282:	4859      	ldr	r0, [pc, #356]	; (800c3e8 <tcp_output_segment+0x1a8>)
 800c284:	f003 fb4a 	bl	800f91c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff ffb9 	bl	800c200 <tcp_output_segment_busy>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	e09f      	b.n	800c3d8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	68dc      	ldr	r4, [r3, #12]
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	f7f8 ff42 	bl	800512a <lwip_htonl>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	68dc      	ldr	r4, [r3, #12]
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	f7f8 ff24 	bl	8005100 <lwip_htons>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c2c4:	441a      	add	r2, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	3314      	adds	r3, #20
 800c2d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	7a9b      	ldrb	r3, [r3, #10]
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d015      	beq.n	800c30a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c2ea:	f7fc fa37 	bl	800875c <tcp_eff_send_mss_netif>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c2f2:	8b7b      	ldrh	r3, [r7, #26]
 800c2f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7f8 ff16 	bl	800512a <lwip_htonl>
 800c2fe:	4602      	mov	r2, r0
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	3304      	adds	r3, #4
 800c308:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c310:	2b00      	cmp	r3, #0
 800c312:	da02      	bge.n	800c31a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10c      	bne.n	800c33c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c322:	4b34      	ldr	r3, [pc, #208]	; (800c3f4 <tcp_output_segment+0x1b4>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	f7f8 fefa 	bl	800512a <lwip_htonl>
 800c336:	4602      	mov	r2, r0
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	8959      	ldrh	r1, [r3, #10]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	8b3a      	ldrh	r2, [r7, #24]
 800c356:	1a8a      	subs	r2, r1, r2
 800c358:	b292      	uxth	r2, r2
 800c35a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	8919      	ldrh	r1, [r3, #8]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	8b3a      	ldrh	r2, [r7, #24]
 800c368:	1a8a      	subs	r2, r1, r2
 800c36a:	b292      	uxth	r2, r2
 800c36c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	68d2      	ldr	r2, [r2, #12]
 800c376:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	741a      	strb	r2, [r3, #16]
 800c380:	2200      	movs	r2, #0
 800c382:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	f103 0214 	add.w	r2, r3, #20
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	7a9b      	ldrb	r3, [r3, #10]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	f003 0304 	and.w	r3, r3, #4
 800c396:	4413      	add	r3, r2
 800c398:	69fa      	ldr	r2, [r7, #28]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d006      	beq.n	800c3ac <tcp_output_segment+0x16c>
 800c39e:	4b10      	ldr	r3, [pc, #64]	; (800c3e0 <tcp_output_segment+0x1a0>)
 800c3a0:	f240 621c 	movw	r2, #1564	; 0x61c
 800c3a4:	4914      	ldr	r1, [pc, #80]	; (800c3f8 <tcp_output_segment+0x1b8>)
 800c3a6:	4810      	ldr	r0, [pc, #64]	; (800c3e8 <tcp_output_segment+0x1a8>)
 800c3a8:	f003 fab8 	bl	800f91c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6858      	ldr	r0, [r3, #4]
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	1d1c      	adds	r4, r3, #4
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	7add      	ldrb	r5, [r3, #11]
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	7a9b      	ldrb	r3, [r3, #10]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	9202      	str	r2, [sp, #8]
 800c3c2:	2206      	movs	r2, #6
 800c3c4:	9201      	str	r2, [sp, #4]
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	f002 fa36 	bl	800e83c <ip4_output_if>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3720      	adds	r7, #32
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bdb0      	pop	{r4, r5, r7, pc}
 800c3e0:	080125e8 	.word	0x080125e8
 800c3e4:	08012bac 	.word	0x08012bac
 800c3e8:	0801263c 	.word	0x0801263c
 800c3ec:	08012bcc 	.word	0x08012bcc
 800c3f0:	08012bec 	.word	0x08012bec
 800c3f4:	20006d0c 	.word	0x20006d0c
 800c3f8:	08012c10 	.word	0x08012c10

0800c3fc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c3fc:	b5b0      	push	{r4, r5, r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <tcp_rexmit_rto_prepare+0x1c>
 800c40a:	4b31      	ldr	r3, [pc, #196]	; (800c4d0 <tcp_rexmit_rto_prepare+0xd4>)
 800c40c:	f240 6263 	movw	r2, #1635	; 0x663
 800c410:	4930      	ldr	r1, [pc, #192]	; (800c4d4 <tcp_rexmit_rto_prepare+0xd8>)
 800c412:	4831      	ldr	r0, [pc, #196]	; (800c4d8 <tcp_rexmit_rto_prepare+0xdc>)
 800c414:	f003 fa82 	bl	800f91c <iprintf>

  if (pcb->unacked == NULL) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d102      	bne.n	800c426 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c420:	f06f 0305 	mvn.w	r3, #5
 800c424:	e050      	b.n	800c4c8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e00b      	b.n	800c446 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fee6 	bl	800c200 <tcp_output_segment_busy>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c43a:	f06f 0305 	mvn.w	r3, #5
 800c43e:	e043      	b.n	800c4c8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1ef      	bne.n	800c42e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff fed6 	bl	800c200 <tcp_output_segment_busy>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c45a:	f06f 0305 	mvn.w	r3, #5
 800c45e:	e033      	b.n	800c4c8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	8b5b      	ldrh	r3, [r3, #26]
 800c47a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c47e:	b29a      	uxth	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f8 fe4d 	bl	800512a <lwip_htonl>
 800c490:	4604      	mov	r4, r0
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	891b      	ldrh	r3, [r3, #8]
 800c496:	461d      	mov	r5, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	899b      	ldrh	r3, [r3, #12]
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7f8 fe2d 	bl	8005100 <lwip_htons>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	f003 0303 	and.w	r3, r3, #3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <tcp_rexmit_rto_prepare+0xba>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e000      	b.n	800c4b8 <tcp_rexmit_rto_prepare+0xbc>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	442b      	add	r3, r5
 800c4ba:	18e2      	adds	r2, r4, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bdb0      	pop	{r4, r5, r7, pc}
 800c4d0:	080125e8 	.word	0x080125e8
 800c4d4:	08012c24 	.word	0x08012c24
 800c4d8:	0801263c 	.word	0x0801263c

0800c4dc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <tcp_rexmit_rto_commit+0x1c>
 800c4ea:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <tcp_rexmit_rto_commit+0x44>)
 800c4ec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c4f0:	490c      	ldr	r1, [pc, #48]	; (800c524 <tcp_rexmit_rto_commit+0x48>)
 800c4f2:	480d      	ldr	r0, [pc, #52]	; (800c528 <tcp_rexmit_rto_commit+0x4c>)
 800c4f4:	f003 fa12 	bl	800f91c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4fe:	2bff      	cmp	r3, #255	; 0xff
 800c500:	d007      	beq.n	800c512 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c508:	3301      	adds	r3, #1
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff fc80 	bl	800be18 <tcp_output>
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	080125e8 	.word	0x080125e8
 800c524:	08012c48 	.word	0x08012c48
 800c528:	0801263c 	.word	0x0801263c

0800c52c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <tcp_rexmit_rto+0x1c>
 800c53a:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <tcp_rexmit_rto+0x38>)
 800c53c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c540:	4909      	ldr	r1, [pc, #36]	; (800c568 <tcp_rexmit_rto+0x3c>)
 800c542:	480a      	ldr	r0, [pc, #40]	; (800c56c <tcp_rexmit_rto+0x40>)
 800c544:	f003 f9ea 	bl	800f91c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7ff ff57 	bl	800c3fc <tcp_rexmit_rto_prepare>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d102      	bne.n	800c55a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff ffc1 	bl	800c4dc <tcp_rexmit_rto_commit>
  }
}
 800c55a:	bf00      	nop
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	080125e8 	.word	0x080125e8
 800c568:	08012c6c 	.word	0x08012c6c
 800c56c:	0801263c 	.word	0x0801263c

0800c570 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d106      	bne.n	800c58c <tcp_rexmit+0x1c>
 800c57e:	4b2f      	ldr	r3, [pc, #188]	; (800c63c <tcp_rexmit+0xcc>)
 800c580:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c584:	492e      	ldr	r1, [pc, #184]	; (800c640 <tcp_rexmit+0xd0>)
 800c586:	482f      	ldr	r0, [pc, #188]	; (800c644 <tcp_rexmit+0xd4>)
 800c588:	f003 f9c8 	bl	800f91c <iprintf>

  if (pcb->unacked == NULL) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c594:	f06f 0305 	mvn.w	r3, #5
 800c598:	e04c      	b.n	800c634 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c5a0:	68b8      	ldr	r0, [r7, #8]
 800c5a2:	f7ff fe2d 	bl	800c200 <tcp_output_segment_busy>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c5ac:	f06f 0305 	mvn.w	r3, #5
 800c5b0:	e040      	b.n	800c634 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	336c      	adds	r3, #108	; 0x6c
 800c5be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c5c0:	e002      	b.n	800c5c8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d011      	beq.n	800c5f4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f8 fda6 	bl	800512a <lwip_htonl>
 800c5de:	4604      	mov	r4, r0
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f8 fd9f 	bl	800512a <lwip_htonl>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	dbe6      	blt.n	800c5c2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d103      	bne.n	800c612 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c618:	2bff      	cmp	r3, #255	; 0xff
 800c61a:	d007      	beq.n	800c62c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c622:	3301      	adds	r3, #1
 800c624:	b2da      	uxtb	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd90      	pop	{r4, r7, pc}
 800c63c:	080125e8 	.word	0x080125e8
 800c640:	08012c88 	.word	0x08012c88
 800c644:	0801263c 	.word	0x0801263c

0800c648 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d106      	bne.n	800c664 <tcp_rexmit_fast+0x1c>
 800c656:	4b2a      	ldr	r3, [pc, #168]	; (800c700 <tcp_rexmit_fast+0xb8>)
 800c658:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c65c:	4929      	ldr	r1, [pc, #164]	; (800c704 <tcp_rexmit_fast+0xbc>)
 800c65e:	482a      	ldr	r0, [pc, #168]	; (800c708 <tcp_rexmit_fast+0xc0>)
 800c660:	f003 f95c 	bl	800f91c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d044      	beq.n	800c6f6 <tcp_rexmit_fast+0xae>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	8b5b      	ldrh	r3, [r3, #26]
 800c670:	f003 0304 	and.w	r3, r3, #4
 800c674:	2b00      	cmp	r3, #0
 800c676:	d13e      	bne.n	800c6f6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff79 	bl	800c570 <tcp_rexmit>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d138      	bne.n	800c6f6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c690:	4293      	cmp	r3, r2
 800c692:	bf28      	it	cs
 800c694:	4613      	movcs	r3, r2
 800c696:	b29b      	uxth	r3, r3
 800c698:	0fda      	lsrs	r2, r3, #31
 800c69a:	4413      	add	r3, r2
 800c69c:	105b      	asrs	r3, r3, #1
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d206      	bcs.n	800c6c6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	0049      	lsls	r1, r1, #1
 800c6d4:	440b      	add	r3, r1
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	4413      	add	r3, r2
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8b5b      	ldrh	r3, [r3, #26]
 800c6e6:	f043 0304 	orr.w	r3, r3, #4
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	080125e8 	.word	0x080125e8
 800c704:	08012ca0 	.word	0x08012ca0
 800c708:	0801263c 	.word	0x0801263c

0800c70c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	607b      	str	r3, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	817b      	strh	r3, [r7, #10]
 800c71a:	4613      	mov	r3, r2
 800c71c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c71e:	897a      	ldrh	r2, [r7, #10]
 800c720:	893b      	ldrh	r3, [r7, #8]
 800c722:	4413      	add	r3, r2
 800c724:	b29b      	uxth	r3, r3
 800c726:	3314      	adds	r3, #20
 800c728:	b29b      	uxth	r3, r3
 800c72a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c72e:	4619      	mov	r1, r3
 800c730:	2022      	movs	r0, #34	; 0x22
 800c732:	f7f9 fd1f 	bl	8006174 <pbuf_alloc>
 800c736:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d04d      	beq.n	800c7da <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c73e:	897b      	ldrh	r3, [r7, #10]
 800c740:	3313      	adds	r3, #19
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	8952      	ldrh	r2, [r2, #10]
 800c746:	4293      	cmp	r3, r2
 800c748:	db06      	blt.n	800c758 <tcp_output_alloc_header_common+0x4c>
 800c74a:	4b26      	ldr	r3, [pc, #152]	; (800c7e4 <tcp_output_alloc_header_common+0xd8>)
 800c74c:	f240 7223 	movw	r2, #1827	; 0x723
 800c750:	4925      	ldr	r1, [pc, #148]	; (800c7e8 <tcp_output_alloc_header_common+0xdc>)
 800c752:	4826      	ldr	r0, [pc, #152]	; (800c7ec <tcp_output_alloc_header_common+0xe0>)
 800c754:	f003 f8e2 	bl	800f91c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c75e:	8c3b      	ldrh	r3, [r7, #32]
 800c760:	4618      	mov	r0, r3
 800c762:	f7f8 fccd 	bl	8005100 <lwip_htons>
 800c766:	4603      	mov	r3, r0
 800c768:	461a      	mov	r2, r3
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c76e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c770:	4618      	mov	r0, r3
 800c772:	f7f8 fcc5 	bl	8005100 <lwip_htons>
 800c776:	4603      	mov	r3, r0
 800c778:	461a      	mov	r2, r3
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f7f8 fcd0 	bl	800512a <lwip_htonl>
 800c78a:	4602      	mov	r2, r0
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c790:	897b      	ldrh	r3, [r7, #10]
 800c792:	089b      	lsrs	r3, r3, #2
 800c794:	b29b      	uxth	r3, r3
 800c796:	3305      	adds	r3, #5
 800c798:	b29b      	uxth	r3, r3
 800c79a:	031b      	lsls	r3, r3, #12
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7f8 fca9 	bl	8005100 <lwip_htons>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c7b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f8 fca1 	bl	8005100 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	741a      	strb	r2, [r3, #16]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	749a      	strb	r2, [r3, #18]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c7da:	697b      	ldr	r3, [r7, #20]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	080125e8 	.word	0x080125e8
 800c7e8:	08012cc0 	.word	0x08012cc0
 800c7ec:	0801263c 	.word	0x0801263c

0800c7f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c7f0:	b5b0      	push	{r4, r5, r7, lr}
 800c7f2:	b08a      	sub	sp, #40	; 0x28
 800c7f4:	af04      	add	r7, sp, #16
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	607b      	str	r3, [r7, #4]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	817b      	strh	r3, [r7, #10]
 800c7fe:	4613      	mov	r3, r2
 800c800:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d106      	bne.n	800c816 <tcp_output_alloc_header+0x26>
 800c808:	4b15      	ldr	r3, [pc, #84]	; (800c860 <tcp_output_alloc_header+0x70>)
 800c80a:	f240 7242 	movw	r2, #1858	; 0x742
 800c80e:	4915      	ldr	r1, [pc, #84]	; (800c864 <tcp_output_alloc_header+0x74>)
 800c810:	4815      	ldr	r0, [pc, #84]	; (800c868 <tcp_output_alloc_header+0x78>)
 800c812:	f003 f883 	bl	800f91c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	8adb      	ldrh	r3, [r3, #22]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	8b12      	ldrh	r2, [r2, #24]
 800c822:	68f9      	ldr	r1, [r7, #12]
 800c824:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c826:	893d      	ldrh	r5, [r7, #8]
 800c828:	897c      	ldrh	r4, [r7, #10]
 800c82a:	9103      	str	r1, [sp, #12]
 800c82c:	2110      	movs	r1, #16
 800c82e:	9102      	str	r1, [sp, #8]
 800c830:	9201      	str	r2, [sp, #4]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	462a      	mov	r2, r5
 800c838:	4621      	mov	r1, r4
 800c83a:	f7ff ff67 	bl	800c70c <tcp_output_alloc_header_common>
 800c83e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d006      	beq.n	800c854 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c84e:	441a      	add	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c854:	697b      	ldr	r3, [r7, #20]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bdb0      	pop	{r4, r5, r7, pc}
 800c85e:	bf00      	nop
 800c860:	080125e8 	.word	0x080125e8
 800c864:	08012cf0 	.word	0x08012cf0
 800c868:	0801263c 	.word	0x0801263c

0800c86c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4611      	mov	r1, r2
 800c878:	461a      	mov	r2, r3
 800c87a:	460b      	mov	r3, r1
 800c87c:	71fb      	strb	r3, [r7, #7]
 800c87e:	4613      	mov	r3, r2
 800c880:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d106      	bne.n	800c89a <tcp_output_fill_options+0x2e>
 800c88c:	4b13      	ldr	r3, [pc, #76]	; (800c8dc <tcp_output_fill_options+0x70>)
 800c88e:	f240 7256 	movw	r2, #1878	; 0x756
 800c892:	4913      	ldr	r1, [pc, #76]	; (800c8e0 <tcp_output_fill_options+0x74>)
 800c894:	4813      	ldr	r0, [pc, #76]	; (800c8e4 <tcp_output_fill_options+0x78>)
 800c896:	f003 f841 	bl	800f91c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	3314      	adds	r3, #20
 800c8a4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	f103 0214 	add.w	r2, r3, #20
 800c8ac:	8bfb      	ldrh	r3, [r7, #30]
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	f003 0304 	and.w	r3, r3, #4
 800c8ba:	440b      	add	r3, r1
 800c8bc:	4413      	add	r3, r2
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d006      	beq.n	800c8d2 <tcp_output_fill_options+0x66>
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <tcp_output_fill_options+0x70>)
 800c8c6:	f240 7275 	movw	r2, #1909	; 0x775
 800c8ca:	4907      	ldr	r1, [pc, #28]	; (800c8e8 <tcp_output_fill_options+0x7c>)
 800c8cc:	4805      	ldr	r0, [pc, #20]	; (800c8e4 <tcp_output_fill_options+0x78>)
 800c8ce:	f003 f825 	bl	800f91c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c8d2:	bf00      	nop
 800c8d4:	3720      	adds	r7, #32
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	080125e8 	.word	0x080125e8
 800c8e0:	08012d18 	.word	0x08012d18
 800c8e4:	0801263c 	.word	0x0801263c
 800c8e8:	08012c10 	.word	0x08012c10

0800c8ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08a      	sub	sp, #40	; 0x28
 800c8f0:	af04      	add	r7, sp, #16
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d106      	bne.n	800c90e <tcp_output_control_segment+0x22>
 800c900:	4b1c      	ldr	r3, [pc, #112]	; (800c974 <tcp_output_control_segment+0x88>)
 800c902:	f240 7287 	movw	r2, #1927	; 0x787
 800c906:	491c      	ldr	r1, [pc, #112]	; (800c978 <tcp_output_control_segment+0x8c>)
 800c908:	481c      	ldr	r0, [pc, #112]	; (800c97c <tcp_output_control_segment+0x90>)
 800c90a:	f003 f807 	bl	800f91c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	6879      	ldr	r1, [r7, #4]
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7fe fae8 	bl	800aee8 <tcp_route>
 800c918:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d102      	bne.n	800c926 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c920:	23fc      	movs	r3, #252	; 0xfc
 800c922:	75fb      	strb	r3, [r7, #23]
 800c924:	e01c      	b.n	800c960 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d006      	beq.n	800c93a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	7adb      	ldrb	r3, [r3, #11]
 800c930:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	7a9b      	ldrb	r3, [r3, #10]
 800c936:	757b      	strb	r3, [r7, #21]
 800c938:	e003      	b.n	800c942 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c93a:	23ff      	movs	r3, #255	; 0xff
 800c93c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c942:	7dba      	ldrb	r2, [r7, #22]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	9302      	str	r3, [sp, #8]
 800c948:	2306      	movs	r3, #6
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	7d7b      	ldrb	r3, [r7, #21]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	4613      	mov	r3, r2
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	68b8      	ldr	r0, [r7, #8]
 800c958:	f001 ff70 	bl	800e83c <ip4_output_if>
 800c95c:	4603      	mov	r3, r0
 800c95e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c960:	68b8      	ldr	r0, [r7, #8]
 800c962:	f7f9 feeb 	bl	800673c <pbuf_free>
  return err;
 800c966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3718      	adds	r7, #24
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	080125e8 	.word	0x080125e8
 800c978:	08012d40 	.word	0x08012d40
 800c97c:	0801263c 	.word	0x0801263c

0800c980 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c980:	b590      	push	{r4, r7, lr}
 800c982:	b08b      	sub	sp, #44	; 0x2c
 800c984:	af04      	add	r7, sp, #16
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
 800c98c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d106      	bne.n	800c9a2 <tcp_rst+0x22>
 800c994:	4b1f      	ldr	r3, [pc, #124]	; (800ca14 <tcp_rst+0x94>)
 800c996:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c99a:	491f      	ldr	r1, [pc, #124]	; (800ca18 <tcp_rst+0x98>)
 800c99c:	481f      	ldr	r0, [pc, #124]	; (800ca1c <tcp_rst+0x9c>)
 800c99e:	f002 ffbd 	bl	800f91c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <tcp_rst+0x36>
 800c9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ca14 <tcp_rst+0x94>)
 800c9aa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c9ae:	491c      	ldr	r1, [pc, #112]	; (800ca20 <tcp_rst+0xa0>)
 800c9b0:	481a      	ldr	r0, [pc, #104]	; (800ca1c <tcp_rst+0x9c>)
 800c9b2:	f002 ffb3 	bl	800f91c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c9ba:	f246 0308 	movw	r3, #24584	; 0x6008
 800c9be:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	b29c      	uxth	r4, r3
 800c9c4:	68b8      	ldr	r0, [r7, #8]
 800c9c6:	f7f8 fbb0 	bl	800512a <lwip_htonl>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	8abb      	ldrh	r3, [r7, #20]
 800c9ce:	9303      	str	r3, [sp, #12]
 800c9d0:	2314      	movs	r3, #20
 800c9d2:	9302      	str	r3, [sp, #8]
 800c9d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fe92 	bl	800c70c <tcp_output_alloc_header_common>
 800c9e8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00c      	beq.n	800ca0a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	6939      	ldr	r1, [r7, #16]
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f7ff ff38 	bl	800c86c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	6939      	ldr	r1, [r7, #16]
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7ff ff72 	bl	800c8ec <tcp_output_control_segment>
 800ca08:	e000      	b.n	800ca0c <tcp_rst+0x8c>
    return;
 800ca0a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd90      	pop	{r4, r7, pc}
 800ca12:	bf00      	nop
 800ca14:	080125e8 	.word	0x080125e8
 800ca18:	08012d6c 	.word	0x08012d6c
 800ca1c:	0801263c 	.word	0x0801263c
 800ca20:	08012d88 	.word	0x08012d88

0800ca24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ca24:	b590      	push	{r4, r7, lr}
 800ca26:	b087      	sub	sp, #28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d106      	bne.n	800ca48 <tcp_send_empty_ack+0x24>
 800ca3a:	4b28      	ldr	r3, [pc, #160]	; (800cadc <tcp_send_empty_ack+0xb8>)
 800ca3c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ca40:	4927      	ldr	r1, [pc, #156]	; (800cae0 <tcp_send_empty_ack+0xbc>)
 800ca42:	4828      	ldr	r0, [pc, #160]	; (800cae4 <tcp_send_empty_ack+0xc0>)
 800ca44:	f002 ff6a 	bl	800f91c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	f003 0304 	and.w	r3, r3, #4
 800ca52:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ca54:	7d7b      	ldrb	r3, [r7, #21]
 800ca56:	b29c      	uxth	r4, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f8 fb64 	bl	800512a <lwip_htonl>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2200      	movs	r2, #0
 800ca66:	4621      	mov	r1, r4
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7ff fec1 	bl	800c7f0 <tcp_output_alloc_header>
 800ca6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d109      	bne.n	800ca8a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	8b5b      	ldrh	r3, [r3, #26]
 800ca7a:	f043 0303 	orr.w	r3, r3, #3
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ca84:	f06f 0301 	mvn.w	r3, #1
 800ca88:	e023      	b.n	800cad2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ca8a:	7dbb      	ldrb	r3, [r7, #22]
 800ca8c:	7dfa      	ldrb	r2, [r7, #23]
 800ca8e:	6939      	ldr	r1, [r7, #16]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff feeb 	bl	800c86c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	6939      	ldr	r1, [r7, #16]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ff24 	bl	800c8ec <tcp_output_control_segment>
 800caa4:	4603      	mov	r3, r0
 800caa6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800caa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d007      	beq.n	800cac0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8b5b      	ldrh	r3, [r3, #26]
 800cab4:	f043 0303 	orr.w	r3, r3, #3
 800cab8:	b29a      	uxth	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	835a      	strh	r2, [r3, #26]
 800cabe:	e006      	b.n	800cace <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	8b5b      	ldrh	r3, [r3, #26]
 800cac4:	f023 0303 	bic.w	r3, r3, #3
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd90      	pop	{r4, r7, pc}
 800cada:	bf00      	nop
 800cadc:	080125e8 	.word	0x080125e8
 800cae0:	08012da4 	.word	0x08012da4
 800cae4:	0801263c 	.word	0x0801263c

0800cae8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cae8:	b590      	push	{r4, r7, lr}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800caf0:	2300      	movs	r3, #0
 800caf2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <tcp_keepalive+0x20>
 800cafa:	4b18      	ldr	r3, [pc, #96]	; (800cb5c <tcp_keepalive+0x74>)
 800cafc:	f640 0224 	movw	r2, #2084	; 0x824
 800cb00:	4917      	ldr	r1, [pc, #92]	; (800cb60 <tcp_keepalive+0x78>)
 800cb02:	4818      	ldr	r0, [pc, #96]	; (800cb64 <tcp_keepalive+0x7c>)
 800cb04:	f002 ff0a 	bl	800f91c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
 800cb0a:	b29c      	uxth	r4, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb10:	3b01      	subs	r3, #1
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7f8 fb09 	bl	800512a <lwip_htonl>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7ff fe66 	bl	800c7f0 <tcp_output_alloc_header>
 800cb24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d102      	bne.n	800cb32 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb30:	e010      	b.n	800cb54 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
 800cb34:	2200      	movs	r2, #0
 800cb36:	6939      	ldr	r1, [r7, #16]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff fe97 	bl	800c86c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3304      	adds	r3, #4
 800cb44:	6939      	ldr	r1, [r7, #16]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fed0 	bl	800c8ec <tcp_output_control_segment>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cb50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	371c      	adds	r7, #28
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd90      	pop	{r4, r7, pc}
 800cb5c:	080125e8 	.word	0x080125e8
 800cb60:	08012dc4 	.word	0x08012dc4
 800cb64:	0801263c 	.word	0x0801263c

0800cb68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cb68:	b590      	push	{r4, r7, lr}
 800cb6a:	b08b      	sub	sp, #44	; 0x2c
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cb70:	2300      	movs	r3, #0
 800cb72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d106      	bne.n	800cb8a <tcp_zero_window_probe+0x22>
 800cb7c:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <tcp_zero_window_probe+0x148>)
 800cb7e:	f640 024f 	movw	r2, #2127	; 0x84f
 800cb82:	494c      	ldr	r1, [pc, #304]	; (800ccb4 <tcp_zero_window_probe+0x14c>)
 800cb84:	484c      	ldr	r0, [pc, #304]	; (800ccb8 <tcp_zero_window_probe+0x150>)
 800cb86:	f002 fec9 	bl	800f91c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb8e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	e086      	b.n	800cca8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cba0:	2bff      	cmp	r3, #255	; 0xff
 800cba2:	d007      	beq.n	800cbb4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cbaa:	3301      	adds	r3, #1
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	899b      	ldrh	r3, [r3, #12]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7f8 fa9f 	bl	8005100 <lwip_htons>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d005      	beq.n	800cbda <tcp_zero_window_probe+0x72>
 800cbce:	6a3b      	ldr	r3, [r7, #32]
 800cbd0:	891b      	ldrh	r3, [r3, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <tcp_zero_window_probe+0x72>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e000      	b.n	800cbdc <tcp_zero_window_probe+0x74>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cbde:	7ffb      	ldrb	r3, [r7, #31]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	bf0c      	ite	eq
 800cbe4:	2301      	moveq	r3, #1
 800cbe6:	2300      	movne	r3, #0
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cbec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf0:	b299      	uxth	r1, r3
 800cbf2:	6a3b      	ldr	r3, [r7, #32]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	8bba      	ldrh	r2, [r7, #28]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff fdf8 	bl	800c7f0 <tcp_output_alloc_header>
 800cc00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc0c:	e04c      	b.n	800cca8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cc14:	7ffb      	ldrb	r3, [r7, #31]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d011      	beq.n	800cc3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	899b      	ldrh	r3, [r3, #12]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	b21b      	sxth	r3, r3
 800cc22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc26:	b21c      	sxth	r4, r3
 800cc28:	2011      	movs	r0, #17
 800cc2a:	f7f8 fa69 	bl	8005100 <lwip_htons>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	b21b      	sxth	r3, r3
 800cc32:	4323      	orrs	r3, r4
 800cc34:	b21b      	sxth	r3, r3
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	819a      	strh	r2, [r3, #12]
 800cc3c:	e010      	b.n	800cc60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	3314      	adds	r3, #20
 800cc44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	6858      	ldr	r0, [r3, #4]
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	891a      	ldrh	r2, [r3, #8]
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	891b      	ldrh	r3, [r3, #8]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	2201      	movs	r2, #1
 800cc5a:	6939      	ldr	r1, [r7, #16]
 800cc5c:	f7f9 ff58 	bl	8006b10 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f8 fa5f 	bl	800512a <lwip_htonl>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	3301      	adds	r3, #1
 800cc70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	da02      	bge.n	800cc84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc88:	2200      	movs	r2, #0
 800cc8a:	69b9      	ldr	r1, [r7, #24]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7ff fded 	bl	800c86c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3304      	adds	r3, #4
 800cc98:	69b9      	ldr	r1, [r7, #24]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7ff fe26 	bl	800c8ec <tcp_output_control_segment>
 800cca0:	4603      	mov	r3, r0
 800cca2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cca4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	372c      	adds	r7, #44	; 0x2c
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}
 800ccb0:	080125e8 	.word	0x080125e8
 800ccb4:	08012de0 	.word	0x08012de0
 800ccb8:	0801263c 	.word	0x0801263c

0800ccbc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ccc4:	f7fa f812 	bl	8006cec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <tcpip_tcp_timer+0x38>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d103      	bne.n	800ccd8 <tcpip_tcp_timer+0x1c>
 800ccd0:	4b09      	ldr	r3, [pc, #36]	; (800ccf8 <tcpip_tcp_timer+0x3c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d005      	beq.n	800cce4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4908      	ldr	r1, [pc, #32]	; (800ccfc <tcpip_tcp_timer+0x40>)
 800ccdc:	20fa      	movs	r0, #250	; 0xfa
 800ccde:	f000 f8f3 	bl	800cec8 <sys_timeout>
 800cce2:	e003      	b.n	800ccec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <tcpip_tcp_timer+0x44>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	601a      	str	r2, [r3, #0]
  }
}
 800ccea:	bf00      	nop
 800ccec:	bf00      	nop
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20006d08 	.word	0x20006d08
 800ccf8:	20006d18 	.word	0x20006d18
 800ccfc:	0800ccbd 	.word	0x0800ccbd
 800cd00:	2000057c 	.word	0x2000057c

0800cd04 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cd08:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <tcp_timer_needed+0x30>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10f      	bne.n	800cd30 <tcp_timer_needed+0x2c>
 800cd10:	4b09      	ldr	r3, [pc, #36]	; (800cd38 <tcp_timer_needed+0x34>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d103      	bne.n	800cd20 <tcp_timer_needed+0x1c>
 800cd18:	4b08      	ldr	r3, [pc, #32]	; (800cd3c <tcp_timer_needed+0x38>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d007      	beq.n	800cd30 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cd20:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <tcp_timer_needed+0x30>)
 800cd22:	2201      	movs	r2, #1
 800cd24:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cd26:	2200      	movs	r2, #0
 800cd28:	4905      	ldr	r1, [pc, #20]	; (800cd40 <tcp_timer_needed+0x3c>)
 800cd2a:	20fa      	movs	r0, #250	; 0xfa
 800cd2c:	f000 f8cc 	bl	800cec8 <sys_timeout>
  }
}
 800cd30:	bf00      	nop
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	2000057c 	.word	0x2000057c
 800cd38:	20006d08 	.word	0x20006d08
 800cd3c:	20006d18 	.word	0x20006d18
 800cd40:	0800ccbd 	.word	0x0800ccbd

0800cd44 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cd50:	2006      	movs	r0, #6
 800cd52:	f7f8 fe95 	bl	8005a80 <memp_malloc>
 800cd56:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d109      	bne.n	800cd72 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d151      	bne.n	800ce08 <sys_timeout_abs+0xc4>
 800cd64:	4b2a      	ldr	r3, [pc, #168]	; (800ce10 <sys_timeout_abs+0xcc>)
 800cd66:	22be      	movs	r2, #190	; 0xbe
 800cd68:	492a      	ldr	r1, [pc, #168]	; (800ce14 <sys_timeout_abs+0xd0>)
 800cd6a:	482b      	ldr	r0, [pc, #172]	; (800ce18 <sys_timeout_abs+0xd4>)
 800cd6c:	f002 fdd6 	bl	800f91c <iprintf>
    return;
 800cd70:	e04a      	b.n	800ce08 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cd8a:	4b24      	ldr	r3, [pc, #144]	; (800ce1c <sys_timeout_abs+0xd8>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800cd92:	4a22      	ldr	r2, [pc, #136]	; (800ce1c <sys_timeout_abs+0xd8>)
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6013      	str	r3, [r2, #0]
    return;
 800cd98:	e037      	b.n	800ce0a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	685a      	ldr	r2, [r3, #4]
 800cd9e:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <sys_timeout_abs+0xd8>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	0fdb      	lsrs	r3, r3, #31
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800cdb2:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <sys_timeout_abs+0xd8>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cdba:	4a18      	ldr	r2, [pc, #96]	; (800ce1c <sys_timeout_abs+0xd8>)
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	e023      	b.n	800ce0a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cdc2:	4b16      	ldr	r3, [pc, #88]	; (800ce1c <sys_timeout_abs+0xd8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	617b      	str	r3, [r7, #20]
 800cdc8:	e01a      	b.n	800ce00 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <sys_timeout_abs+0xa6>
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	0fdb      	lsrs	r3, r3, #31
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d007      	beq.n	800cdfa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	601a      	str	r2, [r3, #0]
        break;
 800cdf8:	e007      	b.n	800ce0a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e1      	bne.n	800cdca <sys_timeout_abs+0x86>
 800ce06:	e000      	b.n	800ce0a <sys_timeout_abs+0xc6>
    return;
 800ce08:	bf00      	nop
      }
    }
  }
}
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	08012e04 	.word	0x08012e04
 800ce14:	08012e38 	.word	0x08012e38
 800ce18:	08012e78 	.word	0x08012e78
 800ce1c:	20000574 	.word	0x20000574

0800ce20 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b086      	sub	sp, #24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	4798      	blx	r3

  now = sys_now();
 800ce32:	f7f6 fd47 	bl	80038c4 <sys_now>
 800ce36:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <lwip_cyclic_timer+0x5c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4413      	add	r3, r2
 800ce42:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	0fdb      	lsrs	r3, r3, #31
 800ce4c:	f003 0301 	and.w	r3, r3, #1
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d009      	beq.n	800ce6a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	4907      	ldr	r1, [pc, #28]	; (800ce80 <lwip_cyclic_timer+0x60>)
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff ff6e 	bl	800cd44 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ce68:	e004      	b.n	800ce74 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4904      	ldr	r1, [pc, #16]	; (800ce80 <lwip_cyclic_timer+0x60>)
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7ff ff68 	bl	800cd44 <sys_timeout_abs>
}
 800ce74:	bf00      	nop
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20000578 	.word	0x20000578
 800ce80:	0800ce21 	.word	0x0800ce21

0800ce84 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	607b      	str	r3, [r7, #4]
 800ce8e:	e00e      	b.n	800ceae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ce90:	4a0b      	ldr	r2, [pc, #44]	; (800cec0 <sys_timeouts_init+0x3c>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	4a08      	ldr	r2, [pc, #32]	; (800cec0 <sys_timeouts_init+0x3c>)
 800ce9e:	4413      	add	r3, r2
 800cea0:	461a      	mov	r2, r3
 800cea2:	4908      	ldr	r1, [pc, #32]	; (800cec4 <sys_timeouts_init+0x40>)
 800cea4:	f000 f810 	bl	800cec8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	607b      	str	r3, [r7, #4]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d9ed      	bls.n	800ce90 <sys_timeouts_init+0xc>
  }
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	08013db0 	.word	0x08013db0
 800cec4:	0800ce21 	.word	0x0800ce21

0800cec8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceda:	d306      	bcc.n	800ceea <sys_timeout+0x22>
 800cedc:	4b0a      	ldr	r3, [pc, #40]	; (800cf08 <sys_timeout+0x40>)
 800cede:	f240 1229 	movw	r2, #297	; 0x129
 800cee2:	490a      	ldr	r1, [pc, #40]	; (800cf0c <sys_timeout+0x44>)
 800cee4:	480a      	ldr	r0, [pc, #40]	; (800cf10 <sys_timeout+0x48>)
 800cee6:	f002 fd19 	bl	800f91c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ceea:	f7f6 fceb 	bl	80038c4 <sys_now>
 800ceee:	4602      	mov	r2, r0
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	4413      	add	r3, r2
 800cef4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	68b9      	ldr	r1, [r7, #8]
 800cefa:	6978      	ldr	r0, [r7, #20]
 800cefc:	f7ff ff22 	bl	800cd44 <sys_timeout_abs>
#endif
}
 800cf00:	bf00      	nop
 800cf02:	3718      	adds	r7, #24
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	08012e04 	.word	0x08012e04
 800cf0c:	08012ea0 	.word	0x08012ea0
 800cf10:	08012e78 	.word	0x08012e78

0800cf14 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cf1a:	f7f6 fcd3 	bl	80038c4 <sys_now>
 800cf1e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800cf20:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <sys_check_timeouts+0x78>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <sys_check_timeouts+0x1a>
 800cf2a:	f7f9 f8cd 	bl	80060c8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800cf2e:	4b18      	ldr	r3, [pc, #96]	; (800cf90 <sys_check_timeouts+0x7c>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d022      	beq.n	800cf80 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	0fdb      	lsrs	r3, r3, #31
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d11a      	bne.n	800cf84 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a0f      	ldr	r2, [pc, #60]	; (800cf90 <sys_check_timeouts+0x7c>)
 800cf54:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	4a0b      	ldr	r2, [pc, #44]	; (800cf94 <sys_check_timeouts+0x80>)
 800cf68:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cf6a:	68b9      	ldr	r1, [r7, #8]
 800cf6c:	2006      	movs	r0, #6
 800cf6e:	f7f8 fdd3 	bl	8005b18 <memp_free>
    if (handler != NULL) {
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d0d3      	beq.n	800cf20 <sys_check_timeouts+0xc>
      handler(arg);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6838      	ldr	r0, [r7, #0]
 800cf7c:	4798      	blx	r3
  do {
 800cf7e:	e7cf      	b.n	800cf20 <sys_check_timeouts+0xc>
      return;
 800cf80:	bf00      	nop
 800cf82:	e000      	b.n	800cf86 <sys_check_timeouts+0x72>
      return;
 800cf84:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	20006d00 	.word	0x20006d00
 800cf90:	20000574 	.word	0x20000574
 800cf94:	20000578 	.word	0x20000578

0800cf98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cf9c:	f002 fcd6 	bl	800f94c <rand>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	4b01      	ldr	r3, [pc, #4]	; (800cfb8 <udp_init+0x20>)
 800cfb2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cfb4:	bf00      	nop
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	20000024 	.word	0x20000024

0800cfbc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d105      	bne.n	800cfdc <udp_input_local_match+0x20>
 800cfd0:	4b27      	ldr	r3, [pc, #156]	; (800d070 <udp_input_local_match+0xb4>)
 800cfd2:	2287      	movs	r2, #135	; 0x87
 800cfd4:	4927      	ldr	r1, [pc, #156]	; (800d074 <udp_input_local_match+0xb8>)
 800cfd6:	4828      	ldr	r0, [pc, #160]	; (800d078 <udp_input_local_match+0xbc>)
 800cfd8:	f002 fca0 	bl	800f91c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d105      	bne.n	800cfee <udp_input_local_match+0x32>
 800cfe2:	4b23      	ldr	r3, [pc, #140]	; (800d070 <udp_input_local_match+0xb4>)
 800cfe4:	2288      	movs	r2, #136	; 0x88
 800cfe6:	4925      	ldr	r1, [pc, #148]	; (800d07c <udp_input_local_match+0xc0>)
 800cfe8:	4823      	ldr	r0, [pc, #140]	; (800d078 <udp_input_local_match+0xbc>)
 800cfea:	f002 fc97 	bl	800f91c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	7a1b      	ldrb	r3, [r3, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00b      	beq.n	800d00e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	7a1a      	ldrb	r2, [r3, #8]
 800cffa:	4b21      	ldr	r3, [pc, #132]	; (800d080 <udp_input_local_match+0xc4>)
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d002:	3301      	adds	r3, #1
 800d004:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d006:	429a      	cmp	r2, r3
 800d008:	d001      	beq.n	800d00e <udp_input_local_match+0x52>
    return 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	e02b      	b.n	800d066 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d018      	beq.n	800d046 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d013      	beq.n	800d042 <udp_input_local_match+0x86>
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00f      	beq.n	800d042 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d022:	4b17      	ldr	r3, [pc, #92]	; (800d080 <udp_input_local_match+0xc4>)
 800d024:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d02a:	d00a      	beq.n	800d042 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	4b13      	ldr	r3, [pc, #76]	; (800d080 <udp_input_local_match+0xc4>)
 800d032:	695b      	ldr	r3, [r3, #20]
 800d034:	405a      	eors	r2, r3
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3308      	adds	r3, #8
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d110      	bne.n	800d064 <udp_input_local_match+0xa8>
          return 1;
 800d042:	2301      	movs	r3, #1
 800d044:	e00f      	b.n	800d066 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d009      	beq.n	800d060 <udp_input_local_match+0xa4>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d005      	beq.n	800d060 <udp_input_local_match+0xa4>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	4b09      	ldr	r3, [pc, #36]	; (800d080 <udp_input_local_match+0xc4>)
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d101      	bne.n	800d064 <udp_input_local_match+0xa8>
        return 1;
 800d060:	2301      	movs	r3, #1
 800d062:	e000      	b.n	800d066 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	08012eec 	.word	0x08012eec
 800d074:	08012f1c 	.word	0x08012f1c
 800d078:	08012f40 	.word	0x08012f40
 800d07c:	08012f68 	.word	0x08012f68
 800d080:	200037c4 	.word	0x200037c4

0800d084 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d084:	b590      	push	{r4, r7, lr}
 800d086:	b08d      	sub	sp, #52	; 0x34
 800d088:	af02      	add	r7, sp, #8
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d105      	bne.n	800d0a4 <udp_input+0x20>
 800d098:	4b7c      	ldr	r3, [pc, #496]	; (800d28c <udp_input+0x208>)
 800d09a:	22cf      	movs	r2, #207	; 0xcf
 800d09c:	497c      	ldr	r1, [pc, #496]	; (800d290 <udp_input+0x20c>)
 800d09e:	487d      	ldr	r0, [pc, #500]	; (800d294 <udp_input+0x210>)
 800d0a0:	f002 fc3c 	bl	800f91c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <udp_input+0x32>
 800d0aa:	4b78      	ldr	r3, [pc, #480]	; (800d28c <udp_input+0x208>)
 800d0ac:	22d0      	movs	r2, #208	; 0xd0
 800d0ae:	497a      	ldr	r1, [pc, #488]	; (800d298 <udp_input+0x214>)
 800d0b0:	4878      	ldr	r0, [pc, #480]	; (800d294 <udp_input+0x210>)
 800d0b2:	f002 fc33 	bl	800f91c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	895b      	ldrh	r3, [r3, #10]
 800d0ba:	2b07      	cmp	r3, #7
 800d0bc:	d803      	bhi.n	800d0c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7f9 fb3c 	bl	800673c <pbuf_free>
    goto end;
 800d0c4:	e0de      	b.n	800d284 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d0cc:	4b73      	ldr	r3, [pc, #460]	; (800d29c <udp_input+0x218>)
 800d0ce:	695b      	ldr	r3, [r3, #20]
 800d0d0:	4a72      	ldr	r2, [pc, #456]	; (800d29c <udp_input+0x218>)
 800d0d2:	6812      	ldr	r2, [r2, #0]
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f001 fc88 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	881b      	ldrh	r3, [r3, #0]
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7f8 f80a 	bl	8005100 <lwip_htons>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	885b      	ldrh	r3, [r3, #2]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f8 f802 	bl	8005100 <lwip_htons>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d100:	2300      	movs	r3, #0
 800d102:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d104:	2300      	movs	r3, #0
 800d106:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d108:	2300      	movs	r3, #0
 800d10a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d10c:	4b64      	ldr	r3, [pc, #400]	; (800d2a0 <udp_input+0x21c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	627b      	str	r3, [r7, #36]	; 0x24
 800d112:	e054      	b.n	800d1be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	8a5b      	ldrh	r3, [r3, #18]
 800d118:	89fa      	ldrh	r2, [r7, #14]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d14a      	bne.n	800d1b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d11e:	7cfb      	ldrb	r3, [r7, #19]
 800d120:	461a      	mov	r2, r3
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d126:	f7ff ff49 	bl	800cfbc <udp_input_local_match>
 800d12a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d041      	beq.n	800d1b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	7c1b      	ldrb	r3, [r3, #16]
 800d134:	f003 0304 	and.w	r3, r3, #4
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d11d      	bne.n	800d178 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d102      	bne.n	800d148 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d144:	61fb      	str	r3, [r7, #28]
 800d146:	e017      	b.n	800d178 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d148:	7cfb      	ldrb	r3, [r7, #19]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d014      	beq.n	800d178 <udp_input+0xf4>
 800d14e:	4b53      	ldr	r3, [pc, #332]	; (800d29c <udp_input+0x218>)
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d156:	d10f      	bne.n	800d178 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	3304      	adds	r3, #4
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	429a      	cmp	r2, r3
 800d164:	d008      	beq.n	800d178 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	3304      	adds	r3, #4
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d101      	bne.n	800d178 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	8a9b      	ldrh	r3, [r3, #20]
 800d17c:	8a3a      	ldrh	r2, [r7, #16]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d118      	bne.n	800d1b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d186:	2b00      	cmp	r3, #0
 800d188:	d005      	beq.n	800d196 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	4b43      	ldr	r3, [pc, #268]	; (800d29c <udp_input+0x218>)
 800d190:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d192:	429a      	cmp	r2, r3
 800d194:	d10e      	bne.n	800d1b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d014      	beq.n	800d1c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19e:	68da      	ldr	r2, [r3, #12]
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d1a4:	4b3e      	ldr	r3, [pc, #248]	; (800d2a0 <udp_input+0x21c>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d1ac:	4a3c      	ldr	r2, [pc, #240]	; (800d2a0 <udp_input+0x21c>)
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d1b2:	e008      	b.n	800d1c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1a7      	bne.n	800d114 <udp_input+0x90>
 800d1c4:	e000      	b.n	800d1c8 <udp_input+0x144>
        break;
 800d1c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d101      	bne.n	800d1d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <udp_input+0x15a>
    for_us = 1;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	76fb      	strb	r3, [r7, #27]
 800d1dc:	e00a      	b.n	800d1f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	4b2d      	ldr	r3, [pc, #180]	; (800d29c <udp_input+0x218>)
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	bf0c      	ite	eq
 800d1ec:	2301      	moveq	r3, #1
 800d1ee:	2300      	movne	r3, #0
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d1f4:	7efb      	ldrb	r3, [r7, #27]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d041      	beq.n	800d27e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d1fa:	2108      	movs	r1, #8
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7f9 fa17 	bl	8006630 <pbuf_remove_header>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00a      	beq.n	800d21e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d208:	4b20      	ldr	r3, [pc, #128]	; (800d28c <udp_input+0x208>)
 800d20a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d20e:	4925      	ldr	r1, [pc, #148]	; (800d2a4 <udp_input+0x220>)
 800d210:	4820      	ldr	r0, [pc, #128]	; (800d294 <udp_input+0x210>)
 800d212:	f002 fb83 	bl	800f91c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7f9 fa90 	bl	800673c <pbuf_free>
      goto end;
 800d21c:	e032      	b.n	800d284 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	2b00      	cmp	r3, #0
 800d222:	d012      	beq.n	800d24a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	699b      	ldr	r3, [r3, #24]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00a      	beq.n	800d242 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	699c      	ldr	r4, [r3, #24]
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	69d8      	ldr	r0, [r3, #28]
 800d234:	8a3b      	ldrh	r3, [r7, #16]
 800d236:	9300      	str	r3, [sp, #0]
 800d238:	4b1b      	ldr	r3, [pc, #108]	; (800d2a8 <udp_input+0x224>)
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d23e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d240:	e021      	b.n	800d286 <udp_input+0x202>
        pbuf_free(p);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7f9 fa7a 	bl	800673c <pbuf_free>
        goto end;
 800d248:	e01c      	b.n	800d284 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d24a:	7cfb      	ldrb	r3, [r7, #19]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d112      	bne.n	800d276 <udp_input+0x1f2>
 800d250:	4b12      	ldr	r3, [pc, #72]	; (800d29c <udp_input+0x218>)
 800d252:	695b      	ldr	r3, [r3, #20]
 800d254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d258:	2be0      	cmp	r3, #224	; 0xe0
 800d25a:	d00c      	beq.n	800d276 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d25c:	4b0f      	ldr	r3, [pc, #60]	; (800d29c <udp_input+0x218>)
 800d25e:	899b      	ldrh	r3, [r3, #12]
 800d260:	3308      	adds	r3, #8
 800d262:	b29b      	uxth	r3, r3
 800d264:	b21b      	sxth	r3, r3
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7f9 fa54 	bl	8006716 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d26e:	2103      	movs	r1, #3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f001 f89b 	bl	800e3ac <icmp_dest_unreach>
      pbuf_free(p);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7f9 fa60 	bl	800673c <pbuf_free>
  return;
 800d27c:	e003      	b.n	800d286 <udp_input+0x202>
    pbuf_free(p);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7f9 fa5c 	bl	800673c <pbuf_free>
  return;
 800d284:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d286:	372c      	adds	r7, #44	; 0x2c
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd90      	pop	{r4, r7, pc}
 800d28c:	08012eec 	.word	0x08012eec
 800d290:	08012f90 	.word	0x08012f90
 800d294:	08012f40 	.word	0x08012f40
 800d298:	08012fa8 	.word	0x08012fa8
 800d29c:	200037c4 	.word	0x200037c4
 800d2a0:	20006d20 	.word	0x20006d20
 800d2a4:	08012fc4 	.word	0x08012fc4
 800d2a8:	200037d4 	.word	0x200037d4

0800d2ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01e      	beq.n	800d2fa <udp_netif_ip_addr_changed+0x4e>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01a      	beq.n	800d2fa <udp_netif_ip_addr_changed+0x4e>
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d017      	beq.n	800d2fa <udp_netif_ip_addr_changed+0x4e>
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d013      	beq.n	800d2fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	; (800d308 <udp_netif_ip_addr_changed+0x5c>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	e00c      	b.n	800d2f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d103      	bne.n	800d2ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1ef      	bne.n	800d2da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d2fa:	bf00      	nop
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	20006d20 	.word	0x20006d20

0800d30c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d314:	4915      	ldr	r1, [pc, #84]	; (800d36c <etharp_free_entry+0x60>)
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	4613      	mov	r3, r2
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	4413      	add	r3, r2
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	440b      	add	r3, r1
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d013      	beq.n	800d350 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d328:	4910      	ldr	r1, [pc, #64]	; (800d36c <etharp_free_entry+0x60>)
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	4613      	mov	r3, r2
 800d32e:	005b      	lsls	r3, r3, #1
 800d330:	4413      	add	r3, r2
 800d332:	00db      	lsls	r3, r3, #3
 800d334:	440b      	add	r3, r1
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7f9 f9ff 	bl	800673c <pbuf_free>
    arp_table[i].q = NULL;
 800d33e:	490b      	ldr	r1, [pc, #44]	; (800d36c <etharp_free_entry+0x60>)
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4613      	mov	r3, r2
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	4413      	add	r3, r2
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	440b      	add	r3, r1
 800d34c:	2200      	movs	r2, #0
 800d34e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d350:	4906      	ldr	r1, [pc, #24]	; (800d36c <etharp_free_entry+0x60>)
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	440b      	add	r3, r1
 800d35e:	3314      	adds	r3, #20
 800d360:	2200      	movs	r2, #0
 800d362:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	20000580 	.word	0x20000580

0800d370 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d376:	2300      	movs	r3, #0
 800d378:	607b      	str	r3, [r7, #4]
 800d37a:	e096      	b.n	800d4aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d37c:	494f      	ldr	r1, [pc, #316]	; (800d4bc <etharp_tmr+0x14c>)
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	4613      	mov	r3, r2
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	3314      	adds	r3, #20
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d390:	78fb      	ldrb	r3, [r7, #3]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 8086 	beq.w	800d4a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d398:	4948      	ldr	r1, [pc, #288]	; (800d4bc <etharp_tmr+0x14c>)
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	4613      	mov	r3, r2
 800d39e:	005b      	lsls	r3, r3, #1
 800d3a0:	4413      	add	r3, r2
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	440b      	add	r3, r1
 800d3a6:	3312      	adds	r3, #18
 800d3a8:	881b      	ldrh	r3, [r3, #0]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	b298      	uxth	r0, r3
 800d3ae:	4943      	ldr	r1, [pc, #268]	; (800d4bc <etharp_tmr+0x14c>)
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	005b      	lsls	r3, r3, #1
 800d3b6:	4413      	add	r3, r2
 800d3b8:	00db      	lsls	r3, r3, #3
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3312      	adds	r3, #18
 800d3be:	4602      	mov	r2, r0
 800d3c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d3c2:	493e      	ldr	r1, [pc, #248]	; (800d4bc <etharp_tmr+0x14c>)
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	4413      	add	r3, r2
 800d3cc:	00db      	lsls	r3, r3, #3
 800d3ce:	440b      	add	r3, r1
 800d3d0:	3312      	adds	r3, #18
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d3d8:	d215      	bcs.n	800d406 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d3da:	4938      	ldr	r1, [pc, #224]	; (800d4bc <etharp_tmr+0x14c>)
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	4413      	add	r3, r2
 800d3e4:	00db      	lsls	r3, r3, #3
 800d3e6:	440b      	add	r3, r1
 800d3e8:	3314      	adds	r3, #20
 800d3ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d10e      	bne.n	800d40e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d3f0:	4932      	ldr	r1, [pc, #200]	; (800d4bc <etharp_tmr+0x14c>)
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	440b      	add	r3, r1
 800d3fe:	3312      	adds	r3, #18
 800d400:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d402:	2b04      	cmp	r3, #4
 800d404:	d903      	bls.n	800d40e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7ff ff80 	bl	800d30c <etharp_free_entry>
 800d40c:	e04a      	b.n	800d4a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d40e:	492b      	ldr	r1, [pc, #172]	; (800d4bc <etharp_tmr+0x14c>)
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	4613      	mov	r3, r2
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	4413      	add	r3, r2
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	440b      	add	r3, r1
 800d41c:	3314      	adds	r3, #20
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	2b03      	cmp	r3, #3
 800d422:	d10a      	bne.n	800d43a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d424:	4925      	ldr	r1, [pc, #148]	; (800d4bc <etharp_tmr+0x14c>)
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	4613      	mov	r3, r2
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	4413      	add	r3, r2
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	440b      	add	r3, r1
 800d432:	3314      	adds	r3, #20
 800d434:	2204      	movs	r2, #4
 800d436:	701a      	strb	r2, [r3, #0]
 800d438:	e034      	b.n	800d4a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d43a:	4920      	ldr	r1, [pc, #128]	; (800d4bc <etharp_tmr+0x14c>)
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	4613      	mov	r3, r2
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	4413      	add	r3, r2
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	440b      	add	r3, r1
 800d448:	3314      	adds	r3, #20
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b04      	cmp	r3, #4
 800d44e:	d10a      	bne.n	800d466 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d450:	491a      	ldr	r1, [pc, #104]	; (800d4bc <etharp_tmr+0x14c>)
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	4613      	mov	r3, r2
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	4413      	add	r3, r2
 800d45a:	00db      	lsls	r3, r3, #3
 800d45c:	440b      	add	r3, r1
 800d45e:	3314      	adds	r3, #20
 800d460:	2202      	movs	r2, #2
 800d462:	701a      	strb	r2, [r3, #0]
 800d464:	e01e      	b.n	800d4a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d466:	4915      	ldr	r1, [pc, #84]	; (800d4bc <etharp_tmr+0x14c>)
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	4613      	mov	r3, r2
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	440b      	add	r3, r1
 800d474:	3314      	adds	r3, #20
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d113      	bne.n	800d4a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d47c:	490f      	ldr	r1, [pc, #60]	; (800d4bc <etharp_tmr+0x14c>)
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	4613      	mov	r3, r2
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	4413      	add	r3, r2
 800d486:	00db      	lsls	r3, r3, #3
 800d488:	440b      	add	r3, r1
 800d48a:	3308      	adds	r3, #8
 800d48c:	6818      	ldr	r0, [r3, #0]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	4613      	mov	r3, r2
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	4413      	add	r3, r2
 800d496:	00db      	lsls	r3, r3, #3
 800d498:	4a08      	ldr	r2, [pc, #32]	; (800d4bc <etharp_tmr+0x14c>)
 800d49a:	4413      	add	r3, r2
 800d49c:	3304      	adds	r3, #4
 800d49e:	4619      	mov	r1, r3
 800d4a0:	f000 fe6e 	bl	800e180 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	607b      	str	r3, [r7, #4]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b09      	cmp	r3, #9
 800d4ae:	f77f af65 	ble.w	800d37c <etharp_tmr+0xc>
      }
    }
  }
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	20000580 	.word	0x20000580

0800d4c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08a      	sub	sp, #40	; 0x28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d4ce:	230a      	movs	r3, #10
 800d4d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d4d2:	230a      	movs	r3, #10
 800d4d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d4d6:	230a      	movs	r3, #10
 800d4d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d4de:	230a      	movs	r3, #10
 800d4e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	83bb      	strh	r3, [r7, #28]
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	837b      	strh	r3, [r7, #26]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	843b      	strh	r3, [r7, #32]
 800d4f2:	e0ae      	b.n	800d652 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d4f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4f8:	49a6      	ldr	r1, [pc, #664]	; (800d794 <etharp_find_entry+0x2d4>)
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	005b      	lsls	r3, r3, #1
 800d4fe:	4413      	add	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	440b      	add	r3, r1
 800d504:	3314      	adds	r3, #20
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d50a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d50e:	2b0a      	cmp	r3, #10
 800d510:	d105      	bne.n	800d51e <etharp_find_entry+0x5e>
 800d512:	7dfb      	ldrb	r3, [r7, #23]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d518:	8c3b      	ldrh	r3, [r7, #32]
 800d51a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d51c:	e095      	b.n	800d64a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 8092 	beq.w	800d64a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d526:	7dfb      	ldrb	r3, [r7, #23]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d009      	beq.n	800d540 <etharp_find_entry+0x80>
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d806      	bhi.n	800d540 <etharp_find_entry+0x80>
 800d532:	4b99      	ldr	r3, [pc, #612]	; (800d798 <etharp_find_entry+0x2d8>)
 800d534:	f240 1223 	movw	r2, #291	; 0x123
 800d538:	4998      	ldr	r1, [pc, #608]	; (800d79c <etharp_find_entry+0x2dc>)
 800d53a:	4899      	ldr	r0, [pc, #612]	; (800d7a0 <etharp_find_entry+0x2e0>)
 800d53c:	f002 f9ee 	bl	800f91c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d020      	beq.n	800d588 <etharp_find_entry+0xc8>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6819      	ldr	r1, [r3, #0]
 800d54a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d54e:	4891      	ldr	r0, [pc, #580]	; (800d794 <etharp_find_entry+0x2d4>)
 800d550:	4613      	mov	r3, r2
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	4413      	add	r3, r2
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	4403      	add	r3, r0
 800d55a:	3304      	adds	r3, #4
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4299      	cmp	r1, r3
 800d560:	d112      	bne.n	800d588 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00c      	beq.n	800d582 <etharp_find_entry+0xc2>
 800d568:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d56c:	4989      	ldr	r1, [pc, #548]	; (800d794 <etharp_find_entry+0x2d4>)
 800d56e:	4613      	mov	r3, r2
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4413      	add	r3, r2
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	440b      	add	r3, r1
 800d578:	3308      	adds	r3, #8
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d102      	bne.n	800d588 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d582:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d586:	e100      	b.n	800d78a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d588:	7dfb      	ldrb	r3, [r7, #23]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d140      	bne.n	800d610 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d58e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d592:	4980      	ldr	r1, [pc, #512]	; (800d794 <etharp_find_entry+0x2d4>)
 800d594:	4613      	mov	r3, r2
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	4413      	add	r3, r2
 800d59a:	00db      	lsls	r3, r3, #3
 800d59c:	440b      	add	r3, r1
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d01a      	beq.n	800d5da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d5a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5a8:	497a      	ldr	r1, [pc, #488]	; (800d794 <etharp_find_entry+0x2d4>)
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4413      	add	r3, r2
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	440b      	add	r3, r1
 800d5b4:	3312      	adds	r3, #18
 800d5b6:	881b      	ldrh	r3, [r3, #0]
 800d5b8:	8bba      	ldrh	r2, [r7, #28]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d845      	bhi.n	800d64a <etharp_find_entry+0x18a>
            old_queue = i;
 800d5be:	8c3b      	ldrh	r3, [r7, #32]
 800d5c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5c6:	4973      	ldr	r1, [pc, #460]	; (800d794 <etharp_find_entry+0x2d4>)
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	4413      	add	r3, r2
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	440b      	add	r3, r1
 800d5d2:	3312      	adds	r3, #18
 800d5d4:	881b      	ldrh	r3, [r3, #0]
 800d5d6:	83bb      	strh	r3, [r7, #28]
 800d5d8:	e037      	b.n	800d64a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d5da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5de:	496d      	ldr	r1, [pc, #436]	; (800d794 <etharp_find_entry+0x2d4>)
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3312      	adds	r3, #18
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	8b7a      	ldrh	r2, [r7, #26]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d82a      	bhi.n	800d64a <etharp_find_entry+0x18a>
            old_pending = i;
 800d5f4:	8c3b      	ldrh	r3, [r7, #32]
 800d5f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d5f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5fc:	4965      	ldr	r1, [pc, #404]	; (800d794 <etharp_find_entry+0x2d4>)
 800d5fe:	4613      	mov	r3, r2
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	4413      	add	r3, r2
 800d604:	00db      	lsls	r3, r3, #3
 800d606:	440b      	add	r3, r1
 800d608:	3312      	adds	r3, #18
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	837b      	strh	r3, [r7, #26]
 800d60e:	e01c      	b.n	800d64a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d919      	bls.n	800d64a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d61a:	495e      	ldr	r1, [pc, #376]	; (800d794 <etharp_find_entry+0x2d4>)
 800d61c:	4613      	mov	r3, r2
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	4413      	add	r3, r2
 800d622:	00db      	lsls	r3, r3, #3
 800d624:	440b      	add	r3, r1
 800d626:	3312      	adds	r3, #18
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	8b3a      	ldrh	r2, [r7, #24]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d80c      	bhi.n	800d64a <etharp_find_entry+0x18a>
            old_stable = i;
 800d630:	8c3b      	ldrh	r3, [r7, #32]
 800d632:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d634:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d638:	4956      	ldr	r1, [pc, #344]	; (800d794 <etharp_find_entry+0x2d4>)
 800d63a:	4613      	mov	r3, r2
 800d63c:	005b      	lsls	r3, r3, #1
 800d63e:	4413      	add	r3, r2
 800d640:	00db      	lsls	r3, r3, #3
 800d642:	440b      	add	r3, r1
 800d644:	3312      	adds	r3, #18
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d64a:	8c3b      	ldrh	r3, [r7, #32]
 800d64c:	3301      	adds	r3, #1
 800d64e:	b29b      	uxth	r3, r3
 800d650:	843b      	strh	r3, [r7, #32]
 800d652:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d656:	2b09      	cmp	r3, #9
 800d658:	f77f af4c 	ble.w	800d4f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d65c:	7afb      	ldrb	r3, [r7, #11]
 800d65e:	f003 0302 	and.w	r3, r3, #2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d108      	bne.n	800d678 <etharp_find_entry+0x1b8>
 800d666:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d66a:	2b0a      	cmp	r3, #10
 800d66c:	d107      	bne.n	800d67e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d66e:	7afb      	ldrb	r3, [r7, #11]
 800d670:	f003 0301 	and.w	r3, r3, #1
 800d674:	2b00      	cmp	r3, #0
 800d676:	d102      	bne.n	800d67e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d67c:	e085      	b.n	800d78a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d67e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d682:	2b09      	cmp	r3, #9
 800d684:	dc02      	bgt.n	800d68c <etharp_find_entry+0x1cc>
    i = empty;
 800d686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d688:	843b      	strh	r3, [r7, #32]
 800d68a:	e039      	b.n	800d700 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d68c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d690:	2b09      	cmp	r3, #9
 800d692:	dc14      	bgt.n	800d6be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d696:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d698:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d69c:	493d      	ldr	r1, [pc, #244]	; (800d794 <etharp_find_entry+0x2d4>)
 800d69e:	4613      	mov	r3, r2
 800d6a0:	005b      	lsls	r3, r3, #1
 800d6a2:	4413      	add	r3, r2
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	440b      	add	r3, r1
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d018      	beq.n	800d6e0 <etharp_find_entry+0x220>
 800d6ae:	4b3a      	ldr	r3, [pc, #232]	; (800d798 <etharp_find_entry+0x2d8>)
 800d6b0:	f240 126d 	movw	r2, #365	; 0x16d
 800d6b4:	493b      	ldr	r1, [pc, #236]	; (800d7a4 <etharp_find_entry+0x2e4>)
 800d6b6:	483a      	ldr	r0, [pc, #232]	; (800d7a0 <etharp_find_entry+0x2e0>)
 800d6b8:	f002 f930 	bl	800f91c <iprintf>
 800d6bc:	e010      	b.n	800d6e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d6be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d6c2:	2b09      	cmp	r3, #9
 800d6c4:	dc02      	bgt.n	800d6cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d6c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6c8:	843b      	strh	r3, [r7, #32]
 800d6ca:	e009      	b.n	800d6e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d6cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d6d0:	2b09      	cmp	r3, #9
 800d6d2:	dc02      	bgt.n	800d6da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d6d4:	8bfb      	ldrh	r3, [r7, #30]
 800d6d6:	843b      	strh	r3, [r7, #32]
 800d6d8:	e002      	b.n	800d6e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6de:	e054      	b.n	800d78a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d6e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6e4:	2b09      	cmp	r3, #9
 800d6e6:	dd06      	ble.n	800d6f6 <etharp_find_entry+0x236>
 800d6e8:	4b2b      	ldr	r3, [pc, #172]	; (800d798 <etharp_find_entry+0x2d8>)
 800d6ea:	f240 127f 	movw	r2, #383	; 0x17f
 800d6ee:	492e      	ldr	r1, [pc, #184]	; (800d7a8 <etharp_find_entry+0x2e8>)
 800d6f0:	482b      	ldr	r0, [pc, #172]	; (800d7a0 <etharp_find_entry+0x2e0>)
 800d6f2:	f002 f913 	bl	800f91c <iprintf>
    etharp_free_entry(i);
 800d6f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff fe06 	bl	800d30c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d704:	2b09      	cmp	r3, #9
 800d706:	dd06      	ble.n	800d716 <etharp_find_entry+0x256>
 800d708:	4b23      	ldr	r3, [pc, #140]	; (800d798 <etharp_find_entry+0x2d8>)
 800d70a:	f240 1283 	movw	r2, #387	; 0x183
 800d70e:	4926      	ldr	r1, [pc, #152]	; (800d7a8 <etharp_find_entry+0x2e8>)
 800d710:	4823      	ldr	r0, [pc, #140]	; (800d7a0 <etharp_find_entry+0x2e0>)
 800d712:	f002 f903 	bl	800f91c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d71a:	491e      	ldr	r1, [pc, #120]	; (800d794 <etharp_find_entry+0x2d4>)
 800d71c:	4613      	mov	r3, r2
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	4413      	add	r3, r2
 800d722:	00db      	lsls	r3, r3, #3
 800d724:	440b      	add	r3, r1
 800d726:	3314      	adds	r3, #20
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d006      	beq.n	800d73c <etharp_find_entry+0x27c>
 800d72e:	4b1a      	ldr	r3, [pc, #104]	; (800d798 <etharp_find_entry+0x2d8>)
 800d730:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d734:	491d      	ldr	r1, [pc, #116]	; (800d7ac <etharp_find_entry+0x2ec>)
 800d736:	481a      	ldr	r0, [pc, #104]	; (800d7a0 <etharp_find_entry+0x2e0>)
 800d738:	f002 f8f0 	bl	800f91c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d742:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	4812      	ldr	r0, [pc, #72]	; (800d794 <etharp_find_entry+0x2d4>)
 800d74c:	4613      	mov	r3, r2
 800d74e:	005b      	lsls	r3, r3, #1
 800d750:	4413      	add	r3, r2
 800d752:	00db      	lsls	r3, r3, #3
 800d754:	4403      	add	r3, r0
 800d756:	3304      	adds	r3, #4
 800d758:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d75a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d75e:	490d      	ldr	r1, [pc, #52]	; (800d794 <etharp_find_entry+0x2d4>)
 800d760:	4613      	mov	r3, r2
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	440b      	add	r3, r1
 800d76a:	3312      	adds	r3, #18
 800d76c:	2200      	movs	r2, #0
 800d76e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d770:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d774:	4907      	ldr	r1, [pc, #28]	; (800d794 <etharp_find_entry+0x2d4>)
 800d776:	4613      	mov	r3, r2
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	440b      	add	r3, r1
 800d780:	3308      	adds	r3, #8
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d786:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3728      	adds	r7, #40	; 0x28
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	20000580 	.word	0x20000580
 800d798:	08013250 	.word	0x08013250
 800d79c:	08013288 	.word	0x08013288
 800d7a0:	080132c8 	.word	0x080132c8
 800d7a4:	080132f0 	.word	0x080132f0
 800d7a8:	08013308 	.word	0x08013308
 800d7ac:	0801331c 	.word	0x0801331c

0800d7b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b088      	sub	sp, #32
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d7c4:	2b06      	cmp	r3, #6
 800d7c6:	d006      	beq.n	800d7d6 <etharp_update_arp_entry+0x26>
 800d7c8:	4b48      	ldr	r3, [pc, #288]	; (800d8ec <etharp_update_arp_entry+0x13c>)
 800d7ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d7ce:	4948      	ldr	r1, [pc, #288]	; (800d8f0 <etharp_update_arp_entry+0x140>)
 800d7d0:	4848      	ldr	r0, [pc, #288]	; (800d8f4 <etharp_update_arp_entry+0x144>)
 800d7d2:	f002 f8a3 	bl	800f91c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d012      	beq.n	800d802 <etharp_update_arp_entry+0x52>
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00e      	beq.n	800d802 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68f9      	ldr	r1, [r7, #12]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f001 f8fe 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800d7f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d105      	bne.n	800d802 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7fe:	2be0      	cmp	r3, #224	; 0xe0
 800d800:	d102      	bne.n	800d808 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d802:	f06f 030f 	mvn.w	r3, #15
 800d806:	e06c      	b.n	800d8e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d808:	78fb      	ldrb	r3, [r7, #3]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	4619      	mov	r1, r3
 800d80e:	68b8      	ldr	r0, [r7, #8]
 800d810:	f7ff fe56 	bl	800d4c0 <etharp_find_entry>
 800d814:	4603      	mov	r3, r0
 800d816:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d818:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	da02      	bge.n	800d826 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d820:	8afb      	ldrh	r3, [r7, #22]
 800d822:	b25b      	sxtb	r3, r3
 800d824:	e05d      	b.n	800d8e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d82a:	4933      	ldr	r1, [pc, #204]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d82c:	4613      	mov	r3, r2
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	4413      	add	r3, r2
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	440b      	add	r3, r1
 800d836:	3314      	adds	r3, #20
 800d838:	2202      	movs	r2, #2
 800d83a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d83c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d840:	492d      	ldr	r1, [pc, #180]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	440b      	add	r3, r1
 800d84c:	3308      	adds	r3, #8
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d852:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d856:	4613      	mov	r3, r2
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	4413      	add	r3, r2
 800d85c:	00db      	lsls	r3, r3, #3
 800d85e:	3308      	adds	r3, #8
 800d860:	4a25      	ldr	r2, [pc, #148]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d862:	4413      	add	r3, r2
 800d864:	3304      	adds	r3, #4
 800d866:	2206      	movs	r2, #6
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f002 f840 	bl	800f8f0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d870:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d874:	4920      	ldr	r1, [pc, #128]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d876:	4613      	mov	r3, r2
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4413      	add	r3, r2
 800d87c:	00db      	lsls	r3, r3, #3
 800d87e:	440b      	add	r3, r1
 800d880:	3312      	adds	r3, #18
 800d882:	2200      	movs	r2, #0
 800d884:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d886:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d88a:	491b      	ldr	r1, [pc, #108]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d88c:	4613      	mov	r3, r2
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	4413      	add	r3, r2
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	440b      	add	r3, r1
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d021      	beq.n	800d8e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d89c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8a0:	4915      	ldr	r1, [pc, #84]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	4413      	add	r3, r2
 800d8a8:	00db      	lsls	r3, r3, #3
 800d8aa:	440b      	add	r3, r1
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d8b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d8b4:	4910      	ldr	r1, [pc, #64]	; (800d8f8 <etharp_update_arp_entry+0x148>)
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	005b      	lsls	r3, r3, #1
 800d8ba:	4413      	add	r3, r2
 800d8bc:	00db      	lsls	r3, r3, #3
 800d8be:	440b      	add	r3, r1
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d8ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6939      	ldr	r1, [r7, #16]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f001 ff91 	bl	800f7fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f7f8 ff2e 	bl	800673c <pbuf_free>
  }
  return ERR_OK;
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3718      	adds	r7, #24
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	08013250 	.word	0x08013250
 800d8f0:	08013348 	.word	0x08013348
 800d8f4:	080132c8 	.word	0x080132c8
 800d8f8:	20000580 	.word	0x20000580

0800d8fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d904:	2300      	movs	r3, #0
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	e01e      	b.n	800d948 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d90a:	4913      	ldr	r1, [pc, #76]	; (800d958 <etharp_cleanup_netif+0x5c>)
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4613      	mov	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	440b      	add	r3, r1
 800d918:	3314      	adds	r3, #20
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d91e:	7afb      	ldrb	r3, [r7, #11]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00e      	beq.n	800d942 <etharp_cleanup_netif+0x46>
 800d924:	490c      	ldr	r1, [pc, #48]	; (800d958 <etharp_cleanup_netif+0x5c>)
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	4613      	mov	r3, r2
 800d92a:	005b      	lsls	r3, r3, #1
 800d92c:	4413      	add	r3, r2
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	440b      	add	r3, r1
 800d932:	3308      	adds	r3, #8
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d102      	bne.n	800d942 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	f7ff fce5 	bl	800d30c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	3301      	adds	r3, #1
 800d946:	60fb      	str	r3, [r7, #12]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b09      	cmp	r3, #9
 800d94c:	dddd      	ble.n	800d90a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d94e:	bf00      	nop
 800d950:	bf00      	nop
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20000580 	.word	0x20000580

0800d95c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d95c:	b5b0      	push	{r4, r5, r7, lr}
 800d95e:	b08a      	sub	sp, #40	; 0x28
 800d960:	af04      	add	r7, sp, #16
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d107      	bne.n	800d97c <etharp_input+0x20>
 800d96c:	4b3d      	ldr	r3, [pc, #244]	; (800da64 <etharp_input+0x108>)
 800d96e:	f240 228a 	movw	r2, #650	; 0x28a
 800d972:	493d      	ldr	r1, [pc, #244]	; (800da68 <etharp_input+0x10c>)
 800d974:	483d      	ldr	r0, [pc, #244]	; (800da6c <etharp_input+0x110>)
 800d976:	f001 ffd1 	bl	800f91c <iprintf>
 800d97a:	e06f      	b.n	800da5c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	881b      	ldrh	r3, [r3, #0]
 800d986:	b29b      	uxth	r3, r3
 800d988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d98c:	d10c      	bne.n	800d9a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d992:	2b06      	cmp	r3, #6
 800d994:	d108      	bne.n	800d9a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	d104      	bne.n	800d9a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	885b      	ldrh	r3, [r3, #2]
 800d9a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d9a4:	2b08      	cmp	r3, #8
 800d9a6:	d003      	beq.n	800d9b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7f8 fec7 	bl	800673c <pbuf_free>
    return;
 800d9ae:	e055      	b.n	800da5c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	330e      	adds	r3, #14
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	3318      	adds	r3, #24
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d102      	bne.n	800d9d0 <etharp_input+0x74>
    for_us = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	75fb      	strb	r3, [r7, #23]
 800d9ce:	e009      	b.n	800d9e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	bf0c      	ite	eq
 800d9dc:	2301      	moveq	r3, #1
 800d9de:	2300      	movne	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f103 0208 	add.w	r2, r3, #8
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <etharp_input+0x98>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e000      	b.n	800d9f6 <etharp_input+0x9a>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	f107 010c 	add.w	r1, r7, #12
 800d9fa:	6838      	ldr	r0, [r7, #0]
 800d9fc:	f7ff fed8 	bl	800d7b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	88db      	ldrh	r3, [r3, #6]
 800da04:	b29b      	uxth	r3, r3
 800da06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da0a:	d003      	beq.n	800da14 <etharp_input+0xb8>
 800da0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da10:	d01e      	beq.n	800da50 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800da12:	e020      	b.n	800da56 <etharp_input+0xfa>
      if (for_us) {
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d01c      	beq.n	800da54 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	3208      	adds	r2, #8
        etharp_raw(netif,
 800da34:	2102      	movs	r1, #2
 800da36:	9103      	str	r1, [sp, #12]
 800da38:	f107 010c 	add.w	r1, r7, #12
 800da3c:	9102      	str	r1, [sp, #8]
 800da3e:	9201      	str	r2, [sp, #4]
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	462b      	mov	r3, r5
 800da44:	4622      	mov	r2, r4
 800da46:	4601      	mov	r1, r0
 800da48:	6838      	ldr	r0, [r7, #0]
 800da4a:	f000 faeb 	bl	800e024 <etharp_raw>
      break;
 800da4e:	e001      	b.n	800da54 <etharp_input+0xf8>
      break;
 800da50:	bf00      	nop
 800da52:	e000      	b.n	800da56 <etharp_input+0xfa>
      break;
 800da54:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f7f8 fe70 	bl	800673c <pbuf_free>
}
 800da5c:	3718      	adds	r7, #24
 800da5e:	46bd      	mov	sp, r7
 800da60:	bdb0      	pop	{r4, r5, r7, pc}
 800da62:	bf00      	nop
 800da64:	08013250 	.word	0x08013250
 800da68:	080133a0 	.word	0x080133a0
 800da6c:	080132c8 	.word	0x080132c8

0800da70 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af02      	add	r7, sp, #8
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	4613      	mov	r3, r2
 800da7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800da7e:	79fa      	ldrb	r2, [r7, #7]
 800da80:	4944      	ldr	r1, [pc, #272]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800da82:	4613      	mov	r3, r2
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	4413      	add	r3, r2
 800da88:	00db      	lsls	r3, r3, #3
 800da8a:	440b      	add	r3, r1
 800da8c:	3314      	adds	r3, #20
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d806      	bhi.n	800daa2 <etharp_output_to_arp_index+0x32>
 800da94:	4b40      	ldr	r3, [pc, #256]	; (800db98 <etharp_output_to_arp_index+0x128>)
 800da96:	f240 22ee 	movw	r2, #750	; 0x2ee
 800da9a:	4940      	ldr	r1, [pc, #256]	; (800db9c <etharp_output_to_arp_index+0x12c>)
 800da9c:	4840      	ldr	r0, [pc, #256]	; (800dba0 <etharp_output_to_arp_index+0x130>)
 800da9e:	f001 ff3d 	bl	800f91c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800daa2:	79fa      	ldrb	r2, [r7, #7]
 800daa4:	493b      	ldr	r1, [pc, #236]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800daa6:	4613      	mov	r3, r2
 800daa8:	005b      	lsls	r3, r3, #1
 800daaa:	4413      	add	r3, r2
 800daac:	00db      	lsls	r3, r3, #3
 800daae:	440b      	add	r3, r1
 800dab0:	3314      	adds	r3, #20
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d153      	bne.n	800db60 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dab8:	79fa      	ldrb	r2, [r7, #7]
 800daba:	4936      	ldr	r1, [pc, #216]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800dabc:	4613      	mov	r3, r2
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	4413      	add	r3, r2
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	440b      	add	r3, r1
 800dac6:	3312      	adds	r3, #18
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dace:	d919      	bls.n	800db04 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dad0:	79fa      	ldrb	r2, [r7, #7]
 800dad2:	4613      	mov	r3, r2
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	4413      	add	r3, r2
 800dad8:	00db      	lsls	r3, r3, #3
 800dada:	4a2e      	ldr	r2, [pc, #184]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800dadc:	4413      	add	r3, r2
 800dade:	3304      	adds	r3, #4
 800dae0:	4619      	mov	r1, r3
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fb4c 	bl	800e180 <etharp_request>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d138      	bne.n	800db60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800daee:	79fa      	ldrb	r2, [r7, #7]
 800daf0:	4928      	ldr	r1, [pc, #160]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800daf2:	4613      	mov	r3, r2
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	4413      	add	r3, r2
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	440b      	add	r3, r1
 800dafc:	3314      	adds	r3, #20
 800dafe:	2203      	movs	r2, #3
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e02d      	b.n	800db60 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800db04:	79fa      	ldrb	r2, [r7, #7]
 800db06:	4923      	ldr	r1, [pc, #140]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800db08:	4613      	mov	r3, r2
 800db0a:	005b      	lsls	r3, r3, #1
 800db0c:	4413      	add	r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	440b      	add	r3, r1
 800db12:	3312      	adds	r3, #18
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800db1a:	d321      	bcc.n	800db60 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db1c:	79fa      	ldrb	r2, [r7, #7]
 800db1e:	4613      	mov	r3, r2
 800db20:	005b      	lsls	r3, r3, #1
 800db22:	4413      	add	r3, r2
 800db24:	00db      	lsls	r3, r3, #3
 800db26:	4a1b      	ldr	r2, [pc, #108]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800db28:	4413      	add	r3, r2
 800db2a:	1d19      	adds	r1, r3, #4
 800db2c:	79fa      	ldrb	r2, [r7, #7]
 800db2e:	4613      	mov	r3, r2
 800db30:	005b      	lsls	r3, r3, #1
 800db32:	4413      	add	r3, r2
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	3308      	adds	r3, #8
 800db38:	4a16      	ldr	r2, [pc, #88]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800db3a:	4413      	add	r3, r2
 800db3c:	3304      	adds	r3, #4
 800db3e:	461a      	mov	r2, r3
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f000 fafb 	bl	800e13c <etharp_request_dst>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d109      	bne.n	800db60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800db4c:	79fa      	ldrb	r2, [r7, #7]
 800db4e:	4911      	ldr	r1, [pc, #68]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800db50:	4613      	mov	r3, r2
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	4413      	add	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	440b      	add	r3, r1
 800db5a:	3314      	adds	r3, #20
 800db5c:	2203      	movs	r2, #3
 800db5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800db66:	79fa      	ldrb	r2, [r7, #7]
 800db68:	4613      	mov	r3, r2
 800db6a:	005b      	lsls	r3, r3, #1
 800db6c:	4413      	add	r3, r2
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	3308      	adds	r3, #8
 800db72:	4a08      	ldr	r2, [pc, #32]	; (800db94 <etharp_output_to_arp_index+0x124>)
 800db74:	4413      	add	r3, r2
 800db76:	3304      	adds	r3, #4
 800db78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db7c:	9200      	str	r2, [sp, #0]
 800db7e:	460a      	mov	r2, r1
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f001 fe3a 	bl	800f7fc <ethernet_output>
 800db88:	4603      	mov	r3, r0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	20000580 	.word	0x20000580
 800db98:	08013250 	.word	0x08013250
 800db9c:	080133c0 	.word	0x080133c0
 800dba0:	080132c8 	.word	0x080132c8

0800dba4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b08a      	sub	sp, #40	; 0x28
 800dba8:	af02      	add	r7, sp, #8
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d106      	bne.n	800dbc8 <etharp_output+0x24>
 800dbba:	4b73      	ldr	r3, [pc, #460]	; (800dd88 <etharp_output+0x1e4>)
 800dbbc:	f240 321e 	movw	r2, #798	; 0x31e
 800dbc0:	4972      	ldr	r1, [pc, #456]	; (800dd8c <etharp_output+0x1e8>)
 800dbc2:	4873      	ldr	r0, [pc, #460]	; (800dd90 <etharp_output+0x1ec>)
 800dbc4:	f001 feaa 	bl	800f91c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d106      	bne.n	800dbdc <etharp_output+0x38>
 800dbce:	4b6e      	ldr	r3, [pc, #440]	; (800dd88 <etharp_output+0x1e4>)
 800dbd0:	f240 321f 	movw	r2, #799	; 0x31f
 800dbd4:	496f      	ldr	r1, [pc, #444]	; (800dd94 <etharp_output+0x1f0>)
 800dbd6:	486e      	ldr	r0, [pc, #440]	; (800dd90 <etharp_output+0x1ec>)
 800dbd8:	f001 fea0 	bl	800f91c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d106      	bne.n	800dbf0 <etharp_output+0x4c>
 800dbe2:	4b69      	ldr	r3, [pc, #420]	; (800dd88 <etharp_output+0x1e4>)
 800dbe4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dbe8:	496b      	ldr	r1, [pc, #428]	; (800dd98 <etharp_output+0x1f4>)
 800dbea:	4869      	ldr	r0, [pc, #420]	; (800dd90 <etharp_output+0x1ec>)
 800dbec:	f001 fe96 	bl	800f91c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	68f9      	ldr	r1, [r7, #12]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 fef8 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dc02:	4b66      	ldr	r3, [pc, #408]	; (800dd9c <etharp_output+0x1f8>)
 800dc04:	61fb      	str	r3, [r7, #28]
 800dc06:	e0af      	b.n	800dd68 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc10:	2be0      	cmp	r3, #224	; 0xe0
 800dc12:	d118      	bne.n	800dc46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dc14:	2301      	movs	r3, #1
 800dc16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dc1c:	235e      	movs	r3, #94	; 0x5e
 800dc1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	3301      	adds	r3, #1
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3302      	adds	r3, #2
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	3303      	adds	r3, #3
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dc3e:	f107 0310 	add.w	r3, r7, #16
 800dc42:	61fb      	str	r3, [r7, #28]
 800dc44:	e090      	b.n	800dd68 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	405a      	eors	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3308      	adds	r3, #8
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4013      	ands	r3, r2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d012      	beq.n	800dc84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dc64:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d00b      	beq.n	800dc84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	330c      	adds	r3, #12
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d003      	beq.n	800dc7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	330c      	adds	r3, #12
 800dc7a:	61bb      	str	r3, [r7, #24]
 800dc7c:	e002      	b.n	800dc84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dc7e:	f06f 0303 	mvn.w	r3, #3
 800dc82:	e07d      	b.n	800dd80 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dc84:	4b46      	ldr	r3, [pc, #280]	; (800dda0 <etharp_output+0x1fc>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4a46      	ldr	r2, [pc, #280]	; (800dda4 <etharp_output+0x200>)
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	440b      	add	r3, r1
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	4413      	add	r3, r2
 800dc96:	3314      	adds	r3, #20
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d925      	bls.n	800dcea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dc9e:	4b40      	ldr	r3, [pc, #256]	; (800dda0 <etharp_output+0x1fc>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	4619      	mov	r1, r3
 800dca4:	4a3f      	ldr	r2, [pc, #252]	; (800dda4 <etharp_output+0x200>)
 800dca6:	460b      	mov	r3, r1
 800dca8:	005b      	lsls	r3, r3, #1
 800dcaa:	440b      	add	r3, r1
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	4413      	add	r3, r2
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d117      	bne.n	800dcea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	4b38      	ldr	r3, [pc, #224]	; (800dda0 <etharp_output+0x1fc>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	4937      	ldr	r1, [pc, #220]	; (800dda4 <etharp_output+0x200>)
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	005b      	lsls	r3, r3, #1
 800dcca:	4403      	add	r3, r0
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	440b      	add	r3, r1
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d108      	bne.n	800dcea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800dcd8:	4b31      	ldr	r3, [pc, #196]	; (800dda0 <etharp_output+0x1fc>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	68b9      	ldr	r1, [r7, #8]
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f7ff fec5 	bl	800da70 <etharp_output_to_arp_index>
 800dce6:	4603      	mov	r3, r0
 800dce8:	e04a      	b.n	800dd80 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dcea:	2300      	movs	r3, #0
 800dcec:	75fb      	strb	r3, [r7, #23]
 800dcee:	e031      	b.n	800dd54 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dcf0:	7dfa      	ldrb	r2, [r7, #23]
 800dcf2:	492c      	ldr	r1, [pc, #176]	; (800dda4 <etharp_output+0x200>)
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	4413      	add	r3, r2
 800dcfa:	00db      	lsls	r3, r3, #3
 800dcfc:	440b      	add	r3, r1
 800dcfe:	3314      	adds	r3, #20
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d923      	bls.n	800dd4e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800dd06:	7dfa      	ldrb	r2, [r7, #23]
 800dd08:	4926      	ldr	r1, [pc, #152]	; (800dda4 <etharp_output+0x200>)
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	005b      	lsls	r3, r3, #1
 800dd0e:	4413      	add	r3, r2
 800dd10:	00db      	lsls	r3, r3, #3
 800dd12:	440b      	add	r3, r1
 800dd14:	3308      	adds	r3, #8
 800dd16:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	d117      	bne.n	800dd4e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	6819      	ldr	r1, [r3, #0]
 800dd22:	7dfa      	ldrb	r2, [r7, #23]
 800dd24:	481f      	ldr	r0, [pc, #124]	; (800dda4 <etharp_output+0x200>)
 800dd26:	4613      	mov	r3, r2
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	4413      	add	r3, r2
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	4403      	add	r3, r0
 800dd30:	3304      	adds	r3, #4
 800dd32:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dd34:	4299      	cmp	r1, r3
 800dd36:	d10a      	bne.n	800dd4e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dd38:	4a19      	ldr	r2, [pc, #100]	; (800dda0 <etharp_output+0x1fc>)
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
 800dd3c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
 800dd40:	461a      	mov	r2, r3
 800dd42:	68b9      	ldr	r1, [r7, #8]
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff fe93 	bl	800da70 <etharp_output_to_arp_index>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	e018      	b.n	800dd80 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	3301      	adds	r3, #1
 800dd52:	75fb      	strb	r3, [r7, #23]
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	2b09      	cmp	r3, #9
 800dd58:	d9ca      	bls.n	800dcf0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	69b9      	ldr	r1, [r7, #24]
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f000 f822 	bl	800dda8 <etharp_query>
 800dd64:	4603      	mov	r3, r0
 800dd66:	e00b      	b.n	800dd80 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800dd6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	68b9      	ldr	r1, [r7, #8]
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f001 fd3f 	bl	800f7fc <ethernet_output>
 800dd7e:	4603      	mov	r3, r0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3720      	adds	r7, #32
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	08013250 	.word	0x08013250
 800dd8c:	080133a0 	.word	0x080133a0
 800dd90:	080132c8 	.word	0x080132c8
 800dd94:	080133f0 	.word	0x080133f0
 800dd98:	08013390 	.word	0x08013390
 800dd9c:	08013dcc 	.word	0x08013dcc
 800dda0:	20000670 	.word	0x20000670
 800dda4:	20000580 	.word	0x20000580

0800dda8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08c      	sub	sp, #48	; 0x30
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	3326      	adds	r3, #38	; 0x26
 800ddb8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ddba:	23ff      	movs	r3, #255	; 0xff
 800ddbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68f9      	ldr	r1, [r7, #12]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 fe0e 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10c      	bne.n	800ddf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ddde:	2be0      	cmp	r3, #224	; 0xe0
 800dde0:	d006      	beq.n	800ddf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d003      	beq.n	800ddf0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d102      	bne.n	800ddf6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ddf0:	f06f 030f 	mvn.w	r3, #15
 800ddf4:	e101      	b.n	800dffa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	68b8      	ldr	r0, [r7, #8]
 800ddfc:	f7ff fb60 	bl	800d4c0 <etharp_find_entry>
 800de00:	4603      	mov	r3, r0
 800de02:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800de04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	da02      	bge.n	800de12 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800de0c:	8a7b      	ldrh	r3, [r7, #18]
 800de0e:	b25b      	sxtb	r3, r3
 800de10:	e0f3      	b.n	800dffa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800de12:	8a7b      	ldrh	r3, [r7, #18]
 800de14:	2b7e      	cmp	r3, #126	; 0x7e
 800de16:	d906      	bls.n	800de26 <etharp_query+0x7e>
 800de18:	4b7a      	ldr	r3, [pc, #488]	; (800e004 <etharp_query+0x25c>)
 800de1a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800de1e:	497a      	ldr	r1, [pc, #488]	; (800e008 <etharp_query+0x260>)
 800de20:	487a      	ldr	r0, [pc, #488]	; (800e00c <etharp_query+0x264>)
 800de22:	f001 fd7b 	bl	800f91c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800de26:	8a7b      	ldrh	r3, [r7, #18]
 800de28:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800de2a:	7c7a      	ldrb	r2, [r7, #17]
 800de2c:	4978      	ldr	r1, [pc, #480]	; (800e010 <etharp_query+0x268>)
 800de2e:	4613      	mov	r3, r2
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	4413      	add	r3, r2
 800de34:	00db      	lsls	r3, r3, #3
 800de36:	440b      	add	r3, r1
 800de38:	3314      	adds	r3, #20
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d115      	bne.n	800de6c <etharp_query+0xc4>
    is_new_entry = 1;
 800de40:	2301      	movs	r3, #1
 800de42:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800de44:	7c7a      	ldrb	r2, [r7, #17]
 800de46:	4972      	ldr	r1, [pc, #456]	; (800e010 <etharp_query+0x268>)
 800de48:	4613      	mov	r3, r2
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	4413      	add	r3, r2
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	440b      	add	r3, r1
 800de52:	3314      	adds	r3, #20
 800de54:	2201      	movs	r2, #1
 800de56:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800de58:	7c7a      	ldrb	r2, [r7, #17]
 800de5a:	496d      	ldr	r1, [pc, #436]	; (800e010 <etharp_query+0x268>)
 800de5c:	4613      	mov	r3, r2
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	4413      	add	r3, r2
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	440b      	add	r3, r1
 800de66:	3308      	adds	r3, #8
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800de6c:	7c7a      	ldrb	r2, [r7, #17]
 800de6e:	4968      	ldr	r1, [pc, #416]	; (800e010 <etharp_query+0x268>)
 800de70:	4613      	mov	r3, r2
 800de72:	005b      	lsls	r3, r3, #1
 800de74:	4413      	add	r3, r2
 800de76:	00db      	lsls	r3, r3, #3
 800de78:	440b      	add	r3, r1
 800de7a:	3314      	adds	r3, #20
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d011      	beq.n	800dea6 <etharp_query+0xfe>
 800de82:	7c7a      	ldrb	r2, [r7, #17]
 800de84:	4962      	ldr	r1, [pc, #392]	; (800e010 <etharp_query+0x268>)
 800de86:	4613      	mov	r3, r2
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	4413      	add	r3, r2
 800de8c:	00db      	lsls	r3, r3, #3
 800de8e:	440b      	add	r3, r1
 800de90:	3314      	adds	r3, #20
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d806      	bhi.n	800dea6 <etharp_query+0xfe>
 800de98:	4b5a      	ldr	r3, [pc, #360]	; (800e004 <etharp_query+0x25c>)
 800de9a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800de9e:	495d      	ldr	r1, [pc, #372]	; (800e014 <etharp_query+0x26c>)
 800dea0:	485a      	ldr	r0, [pc, #360]	; (800e00c <etharp_query+0x264>)
 800dea2:	f001 fd3b 	bl	800f91c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d102      	bne.n	800deb2 <etharp_query+0x10a>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10c      	bne.n	800decc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800deb2:	68b9      	ldr	r1, [r7, #8]
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f000 f963 	bl	800e180 <etharp_request>
 800deba:	4603      	mov	r3, r0
 800debc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <etharp_query+0x124>
      return result;
 800dec6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800deca:	e096      	b.n	800dffa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d106      	bne.n	800dee0 <etharp_query+0x138>
 800ded2:	4b4c      	ldr	r3, [pc, #304]	; (800e004 <etharp_query+0x25c>)
 800ded4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ded8:	494f      	ldr	r1, [pc, #316]	; (800e018 <etharp_query+0x270>)
 800deda:	484c      	ldr	r0, [pc, #304]	; (800e00c <etharp_query+0x264>)
 800dedc:	f001 fd1e 	bl	800f91c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dee0:	7c7a      	ldrb	r2, [r7, #17]
 800dee2:	494b      	ldr	r1, [pc, #300]	; (800e010 <etharp_query+0x268>)
 800dee4:	4613      	mov	r3, r2
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	4413      	add	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	440b      	add	r3, r1
 800deee:	3314      	adds	r3, #20
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	2b01      	cmp	r3, #1
 800def4:	d917      	bls.n	800df26 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800def6:	4a49      	ldr	r2, [pc, #292]	; (800e01c <etharp_query+0x274>)
 800def8:	7c7b      	ldrb	r3, [r7, #17]
 800defa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800defc:	7c7a      	ldrb	r2, [r7, #17]
 800defe:	4613      	mov	r3, r2
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4413      	add	r3, r2
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	3308      	adds	r3, #8
 800df08:	4a41      	ldr	r2, [pc, #260]	; (800e010 <etharp_query+0x268>)
 800df0a:	4413      	add	r3, r2
 800df0c:	3304      	adds	r3, #4
 800df0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df12:	9200      	str	r2, [sp, #0]
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	6879      	ldr	r1, [r7, #4]
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f001 fc6f 	bl	800f7fc <ethernet_output>
 800df1e:	4603      	mov	r3, r0
 800df20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df24:	e067      	b.n	800dff6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800df26:	7c7a      	ldrb	r2, [r7, #17]
 800df28:	4939      	ldr	r1, [pc, #228]	; (800e010 <etharp_query+0x268>)
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	440b      	add	r3, r1
 800df34:	3314      	adds	r3, #20
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d15c      	bne.n	800dff6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800df3c:	2300      	movs	r3, #0
 800df3e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	61fb      	str	r3, [r7, #28]
    while (p) {
 800df44:	e01c      	b.n	800df80 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	895a      	ldrh	r2, [r3, #10]
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	891b      	ldrh	r3, [r3, #8]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d10a      	bne.n	800df68 <etharp_query+0x1c0>
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d006      	beq.n	800df68 <etharp_query+0x1c0>
 800df5a:	4b2a      	ldr	r3, [pc, #168]	; (800e004 <etharp_query+0x25c>)
 800df5c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800df60:	492f      	ldr	r1, [pc, #188]	; (800e020 <etharp_query+0x278>)
 800df62:	482a      	ldr	r0, [pc, #168]	; (800e00c <etharp_query+0x264>)
 800df64:	f001 fcda 	bl	800f91c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	7b1b      	ldrb	r3, [r3, #12]
 800df6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <etharp_query+0x1d2>
        copy_needed = 1;
 800df74:	2301      	movs	r3, #1
 800df76:	61bb      	str	r3, [r7, #24]
        break;
 800df78:	e005      	b.n	800df86 <etharp_query+0x1de>
      }
      p = p->next;
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d1df      	bne.n	800df46 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d007      	beq.n	800df9c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800df92:	200e      	movs	r0, #14
 800df94:	f7f8 fe2e 	bl	8006bf4 <pbuf_clone>
 800df98:	61f8      	str	r0, [r7, #28]
 800df9a:	e004      	b.n	800dfa6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800dfa0:	69f8      	ldr	r0, [r7, #28]
 800dfa2:	f7f8 fc6b 	bl	800687c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d021      	beq.n	800dff0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dfac:	7c7a      	ldrb	r2, [r7, #17]
 800dfae:	4918      	ldr	r1, [pc, #96]	; (800e010 <etharp_query+0x268>)
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	440b      	add	r3, r1
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00a      	beq.n	800dfd6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800dfc0:	7c7a      	ldrb	r2, [r7, #17]
 800dfc2:	4913      	ldr	r1, [pc, #76]	; (800e010 <etharp_query+0x268>)
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	4413      	add	r3, r2
 800dfca:	00db      	lsls	r3, r3, #3
 800dfcc:	440b      	add	r3, r1
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7f8 fbb3 	bl	800673c <pbuf_free>
      }
      arp_table[i].q = p;
 800dfd6:	7c7a      	ldrb	r2, [r7, #17]
 800dfd8:	490d      	ldr	r1, [pc, #52]	; (800e010 <etharp_query+0x268>)
 800dfda:	4613      	mov	r3, r2
 800dfdc:	005b      	lsls	r3, r3, #1
 800dfde:	4413      	add	r3, r2
 800dfe0:	00db      	lsls	r3, r3, #3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	69fa      	ldr	r2, [r7, #28]
 800dfe6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfee:	e002      	b.n	800dff6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800dff0:	23ff      	movs	r3, #255	; 0xff
 800dff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800dff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3728      	adds	r7, #40	; 0x28
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	08013250 	.word	0x08013250
 800e008:	080133fc 	.word	0x080133fc
 800e00c:	080132c8 	.word	0x080132c8
 800e010:	20000580 	.word	0x20000580
 800e014:	0801340c 	.word	0x0801340c
 800e018:	080133f0 	.word	0x080133f0
 800e01c:	20000670 	.word	0x20000670
 800e020:	08013434 	.word	0x08013434

0800e024 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08a      	sub	sp, #40	; 0x28
 800e028:	af02      	add	r7, sp, #8
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d106      	bne.n	800e04a <etharp_raw+0x26>
 800e03c:	4b3a      	ldr	r3, [pc, #232]	; (800e128 <etharp_raw+0x104>)
 800e03e:	f240 4257 	movw	r2, #1111	; 0x457
 800e042:	493a      	ldr	r1, [pc, #232]	; (800e12c <etharp_raw+0x108>)
 800e044:	483a      	ldr	r0, [pc, #232]	; (800e130 <etharp_raw+0x10c>)
 800e046:	f001 fc69 	bl	800f91c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e04a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e04e:	211c      	movs	r1, #28
 800e050:	200e      	movs	r0, #14
 800e052:	f7f8 f88f 	bl	8006174 <pbuf_alloc>
 800e056:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d102      	bne.n	800e064 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e062:	e05d      	b.n	800e120 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	895b      	ldrh	r3, [r3, #10]
 800e068:	2b1b      	cmp	r3, #27
 800e06a:	d806      	bhi.n	800e07a <etharp_raw+0x56>
 800e06c:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <etharp_raw+0x104>)
 800e06e:	f240 4262 	movw	r2, #1122	; 0x462
 800e072:	4930      	ldr	r1, [pc, #192]	; (800e134 <etharp_raw+0x110>)
 800e074:	482e      	ldr	r0, [pc, #184]	; (800e130 <etharp_raw+0x10c>)
 800e076:	f001 fc51 	bl	800f91c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	685b      	ldr	r3, [r3, #4]
 800e07e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e080:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e082:	4618      	mov	r0, r3
 800e084:	f7f7 f83c 	bl	8005100 <lwip_htons>
 800e088:	4603      	mov	r3, r0
 800e08a:	461a      	mov	r2, r3
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e096:	2b06      	cmp	r3, #6
 800e098:	d006      	beq.n	800e0a8 <etharp_raw+0x84>
 800e09a:	4b23      	ldr	r3, [pc, #140]	; (800e128 <etharp_raw+0x104>)
 800e09c:	f240 4269 	movw	r2, #1129	; 0x469
 800e0a0:	4925      	ldr	r1, [pc, #148]	; (800e138 <etharp_raw+0x114>)
 800e0a2:	4823      	ldr	r0, [pc, #140]	; (800e130 <etharp_raw+0x10c>)
 800e0a4:	f001 fc3a 	bl	800f91c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	2206      	movs	r2, #6
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f001 fc1d 	bl	800f8f0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	3312      	adds	r3, #18
 800e0ba:	2206      	movs	r2, #6
 800e0bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f001 fc16 	bl	800f8f0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	330e      	adds	r3, #14
 800e0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ca:	6812      	ldr	r2, [r2, #0]
 800e0cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	3318      	adds	r3, #24
 800e0d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0d4:	6812      	ldr	r2, [r2, #0]
 800e0d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	701a      	strb	r2, [r3, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f042 0201 	orr.w	r2, r2, #1
 800e0e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f042 0208 	orr.w	r2, r2, #8
 800e0ee:	709a      	strb	r2, [r3, #2]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	2206      	movs	r2, #6
 800e0f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2204      	movs	r2, #4
 800e0fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e100:	f640 0306 	movw	r3, #2054	; 0x806
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	69b9      	ldr	r1, [r7, #24]
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f001 fb75 	bl	800f7fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e112:	69b8      	ldr	r0, [r7, #24]
 800e114:	f7f8 fb12 	bl	800673c <pbuf_free>
  p = NULL;
 800e118:	2300      	movs	r3, #0
 800e11a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e11c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3720      	adds	r7, #32
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	08013250 	.word	0x08013250
 800e12c:	080133a0 	.word	0x080133a0
 800e130:	080132c8 	.word	0x080132c8
 800e134:	08013450 	.word	0x08013450
 800e138:	08013484 	.word	0x08013484

0800e13c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b088      	sub	sp, #32
 800e140:	af04      	add	r7, sp, #16
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e158:	2201      	movs	r2, #1
 800e15a:	9203      	str	r2, [sp, #12]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	9202      	str	r2, [sp, #8]
 800e160:	4a06      	ldr	r2, [pc, #24]	; (800e17c <etharp_request_dst+0x40>)
 800e162:	9201      	str	r2, [sp, #4]
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	4603      	mov	r3, r0
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f7ff ff5a 	bl	800e024 <etharp_raw>
 800e170:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	08013dd4 	.word	0x08013dd4

0800e180 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e18a:	4a05      	ldr	r2, [pc, #20]	; (800e1a0 <etharp_request+0x20>)
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff ffd4 	bl	800e13c <etharp_request_dst>
 800e194:	4603      	mov	r3, r0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	08013dcc 	.word	0x08013dcc

0800e1a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08e      	sub	sp, #56	; 0x38
 800e1a8:	af04      	add	r7, sp, #16
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e1ae:	4b79      	ldr	r3, [pc, #484]	; (800e394 <icmp_input+0x1f0>)
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	f003 030f 	and.w	r3, r3, #15
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1c6:	2b13      	cmp	r3, #19
 800e1c8:	f240 80cd 	bls.w	800e366 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	895b      	ldrh	r3, [r3, #10]
 800e1d0:	2b03      	cmp	r3, #3
 800e1d2:	f240 80ca 	bls.w	800e36a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e1e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 80b7 	beq.w	800e358 <icmp_input+0x1b4>
 800e1ea:	2b08      	cmp	r3, #8
 800e1ec:	f040 80b7 	bne.w	800e35e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e1f0:	4b69      	ldr	r3, [pc, #420]	; (800e398 <icmp_input+0x1f4>)
 800e1f2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e1f4:	4b67      	ldr	r3, [pc, #412]	; (800e394 <icmp_input+0x1f0>)
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1fc:	2be0      	cmp	r3, #224	; 0xe0
 800e1fe:	f000 80bb 	beq.w	800e378 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e202:	4b64      	ldr	r3, [pc, #400]	; (800e394 <icmp_input+0x1f0>)
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	4a63      	ldr	r2, [pc, #396]	; (800e394 <icmp_input+0x1f0>)
 800e208:	6812      	ldr	r2, [r2, #0]
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 fbed 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	f040 80b1 	bne.w	800e37c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	891b      	ldrh	r3, [r3, #8]
 800e21e:	2b07      	cmp	r3, #7
 800e220:	f240 80a5 	bls.w	800e36e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e226:	330e      	adds	r3, #14
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7f8 f9f0 	bl	8006610 <pbuf_add_header>
 800e230:	4603      	mov	r3, r0
 800e232:	2b00      	cmp	r3, #0
 800e234:	d04b      	beq.n	800e2ce <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	891a      	ldrh	r2, [r3, #8]
 800e23a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e23c:	4413      	add	r3, r2
 800e23e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	891b      	ldrh	r3, [r3, #8]
 800e244:	8b7a      	ldrh	r2, [r7, #26]
 800e246:	429a      	cmp	r2, r3
 800e248:	f0c0 809a 	bcc.w	800e380 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e24c:	8b7b      	ldrh	r3, [r7, #26]
 800e24e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e252:	4619      	mov	r1, r3
 800e254:	200e      	movs	r0, #14
 800e256:	f7f7 ff8d 	bl	8006174 <pbuf_alloc>
 800e25a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f000 8090 	beq.w	800e384 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	895b      	ldrh	r3, [r3, #10]
 800e268:	461a      	mov	r2, r3
 800e26a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e26c:	3308      	adds	r3, #8
 800e26e:	429a      	cmp	r2, r3
 800e270:	d203      	bcs.n	800e27a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e272:	6978      	ldr	r0, [r7, #20]
 800e274:	f7f8 fa62 	bl	800673c <pbuf_free>
          goto icmperr;
 800e278:	e085      	b.n	800e386 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e282:	4618      	mov	r0, r3
 800e284:	f001 fb34 	bl	800f8f0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e28a:	4619      	mov	r1, r3
 800e28c:	6978      	ldr	r0, [r7, #20]
 800e28e:	f7f8 f9cf 	bl	8006630 <pbuf_remove_header>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d009      	beq.n	800e2ac <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e298:	4b40      	ldr	r3, [pc, #256]	; (800e39c <icmp_input+0x1f8>)
 800e29a:	22b6      	movs	r2, #182	; 0xb6
 800e29c:	4940      	ldr	r1, [pc, #256]	; (800e3a0 <icmp_input+0x1fc>)
 800e29e:	4841      	ldr	r0, [pc, #260]	; (800e3a4 <icmp_input+0x200>)
 800e2a0:	f001 fb3c 	bl	800f91c <iprintf>
          pbuf_free(r);
 800e2a4:	6978      	ldr	r0, [r7, #20]
 800e2a6:	f7f8 fa49 	bl	800673c <pbuf_free>
          goto icmperr;
 800e2aa:	e06c      	b.n	800e386 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	6978      	ldr	r0, [r7, #20]
 800e2b0:	f7f8 fb5c 	bl	800696c <pbuf_copy>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e2ba:	6978      	ldr	r0, [r7, #20]
 800e2bc:	f7f8 fa3e 	bl	800673c <pbuf_free>
          goto icmperr;
 800e2c0:	e061      	b.n	800e386 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7f8 fa3a 	bl	800673c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	607b      	str	r3, [r7, #4]
 800e2cc:	e00f      	b.n	800e2ee <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e2ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2d0:	330e      	adds	r3, #14
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f8 f9ab 	bl	8006630 <pbuf_remove_header>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d006      	beq.n	800e2ee <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e2e0:	4b2e      	ldr	r3, [pc, #184]	; (800e39c <icmp_input+0x1f8>)
 800e2e2:	22c7      	movs	r2, #199	; 0xc7
 800e2e4:	4930      	ldr	r1, [pc, #192]	; (800e3a8 <icmp_input+0x204>)
 800e2e6:	482f      	ldr	r0, [pc, #188]	; (800e3a4 <icmp_input+0x200>)
 800e2e8:	f001 fb18 	bl	800f91c <iprintf>
          goto icmperr;
 800e2ec:	e04b      	b.n	800e386 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e2f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7f8 f989 	bl	8006610 <pbuf_add_header>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d12b      	bne.n	800e35c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e312:	4b20      	ldr	r3, [pc, #128]	; (800e394 <icmp_input+0x1f0>)
 800e314:	691a      	ldr	r2, [r3, #16]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	2200      	movs	r2, #0
 800e324:	709a      	strb	r2, [r3, #2]
 800e326:	2200      	movs	r2, #0
 800e328:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	22ff      	movs	r2, #255	; 0xff
 800e32e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2200      	movs	r2, #0
 800e334:	729a      	strb	r2, [r3, #10]
 800e336:	2200      	movs	r2, #0
 800e338:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	9302      	str	r3, [sp, #8]
 800e33e:	2301      	movs	r3, #1
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	2300      	movs	r3, #0
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	23ff      	movs	r3, #255	; 0xff
 800e348:	2200      	movs	r2, #0
 800e34a:	69f9      	ldr	r1, [r7, #28]
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fa75 	bl	800e83c <ip4_output_if>
 800e352:	4603      	mov	r3, r0
 800e354:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e356:	e001      	b.n	800e35c <icmp_input+0x1b8>
      break;
 800e358:	bf00      	nop
 800e35a:	e000      	b.n	800e35e <icmp_input+0x1ba>
      break;
 800e35c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7f8 f9ec 	bl	800673c <pbuf_free>
  return;
 800e364:	e013      	b.n	800e38e <icmp_input+0x1ea>
    goto lenerr;
 800e366:	bf00      	nop
 800e368:	e002      	b.n	800e370 <icmp_input+0x1cc>
    goto lenerr;
 800e36a:	bf00      	nop
 800e36c:	e000      	b.n	800e370 <icmp_input+0x1cc>
        goto lenerr;
 800e36e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7f8 f9e3 	bl	800673c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e376:	e00a      	b.n	800e38e <icmp_input+0x1ea>
        goto icmperr;
 800e378:	bf00      	nop
 800e37a:	e004      	b.n	800e386 <icmp_input+0x1e2>
        goto icmperr;
 800e37c:	bf00      	nop
 800e37e:	e002      	b.n	800e386 <icmp_input+0x1e2>
          goto icmperr;
 800e380:	bf00      	nop
 800e382:	e000      	b.n	800e386 <icmp_input+0x1e2>
          goto icmperr;
 800e384:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7f8 f9d8 	bl	800673c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e38c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e38e:	3728      	adds	r7, #40	; 0x28
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	200037c4 	.word	0x200037c4
 800e398:	200037d8 	.word	0x200037d8
 800e39c:	080134c8 	.word	0x080134c8
 800e3a0:	08013500 	.word	0x08013500
 800e3a4:	08013538 	.word	0x08013538
 800e3a8:	08013560 	.word	0x08013560

0800e3ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e3b8:	78fb      	ldrb	r3, [r7, #3]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	2103      	movs	r1, #3
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f814 	bl	800e3ec <icmp_send_response>
}
 800e3c4:	bf00      	nop
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	460b      	mov	r3, r1
 800e3d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e3d8:	78fb      	ldrb	r3, [r7, #3]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	210b      	movs	r1, #11
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 f804 	bl	800e3ec <icmp_send_response>
}
 800e3e4:	bf00      	nop
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08c      	sub	sp, #48	; 0x30
 800e3f0:	af04      	add	r7, sp, #16
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	70fb      	strb	r3, [r7, #3]
 800e3f8:	4613      	mov	r3, r2
 800e3fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e3fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e400:	2124      	movs	r1, #36	; 0x24
 800e402:	2022      	movs	r0, #34	; 0x22
 800e404:	f7f7 feb6 	bl	8006174 <pbuf_alloc>
 800e408:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d04c      	beq.n	800e4aa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	895b      	ldrh	r3, [r3, #10]
 800e414:	2b23      	cmp	r3, #35	; 0x23
 800e416:	d806      	bhi.n	800e426 <icmp_send_response+0x3a>
 800e418:	4b26      	ldr	r3, [pc, #152]	; (800e4b4 <icmp_send_response+0xc8>)
 800e41a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e41e:	4926      	ldr	r1, [pc, #152]	; (800e4b8 <icmp_send_response+0xcc>)
 800e420:	4826      	ldr	r0, [pc, #152]	; (800e4bc <icmp_send_response+0xd0>)
 800e422:	f001 fa7b 	bl	800f91c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	78fa      	ldrb	r2, [r7, #3]
 800e436:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	78ba      	ldrb	r2, [r7, #2]
 800e43c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	2200      	movs	r2, #0
 800e442:	711a      	strb	r2, [r3, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	2200      	movs	r2, #0
 800e44c:	719a      	strb	r2, [r3, #6]
 800e44e:	2200      	movs	r2, #0
 800e450:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	f103 0008 	add.w	r0, r3, #8
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	221c      	movs	r2, #28
 800e460:	4619      	mov	r1, r3
 800e462:	f001 fa45 	bl	800f8f0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e46c:	f107 030c 	add.w	r3, r7, #12
 800e470:	4618      	mov	r0, r3
 800e472:	f000 f825 	bl	800e4c0 <ip4_route>
 800e476:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d011      	beq.n	800e4a2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	2200      	movs	r2, #0
 800e482:	709a      	strb	r2, [r3, #2]
 800e484:	2200      	movs	r2, #0
 800e486:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e488:	f107 020c 	add.w	r2, r7, #12
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	9302      	str	r3, [sp, #8]
 800e490:	2301      	movs	r3, #1
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	2300      	movs	r3, #0
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	23ff      	movs	r3, #255	; 0xff
 800e49a:	2100      	movs	r1, #0
 800e49c:	69f8      	ldr	r0, [r7, #28]
 800e49e:	f000 f9cd 	bl	800e83c <ip4_output_if>
  }
  pbuf_free(q);
 800e4a2:	69f8      	ldr	r0, [r7, #28]
 800e4a4:	f7f8 f94a 	bl	800673c <pbuf_free>
 800e4a8:	e000      	b.n	800e4ac <icmp_send_response+0xc0>
    return;
 800e4aa:	bf00      	nop
}
 800e4ac:	3720      	adds	r7, #32
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	080134c8 	.word	0x080134c8
 800e4b8:	08013594 	.word	0x08013594
 800e4bc:	08013538 	.word	0x08013538

0800e4c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e4c8:	4b33      	ldr	r3, [pc, #204]	; (800e598 <ip4_route+0xd8>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	60fb      	str	r3, [r7, #12]
 800e4ce:	e036      	b.n	800e53e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4d6:	f003 0301 	and.w	r3, r3, #1
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d02b      	beq.n	800e538 <ip4_route+0x78>
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4e6:	089b      	lsrs	r3, r3, #2
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d022      	beq.n	800e538 <ip4_route+0x78>
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01d      	beq.n	800e538 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3304      	adds	r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	405a      	eors	r2, r3
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3308      	adds	r3, #8
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	4013      	ands	r3, r2
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	e038      	b.n	800e58a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d108      	bne.n	800e538 <ip4_route+0x78>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	330c      	adds	r3, #12
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	429a      	cmp	r2, r3
 800e532:	d101      	bne.n	800e538 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	e028      	b.n	800e58a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	60fb      	str	r3, [r7, #12]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1c5      	bne.n	800e4d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e544:	4b15      	ldr	r3, [pc, #84]	; (800e59c <ip4_route+0xdc>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d01a      	beq.n	800e582 <ip4_route+0xc2>
 800e54c:	4b13      	ldr	r3, [pc, #76]	; (800e59c <ip4_route+0xdc>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e554:	f003 0301 	and.w	r3, r3, #1
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d012      	beq.n	800e582 <ip4_route+0xc2>
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <ip4_route+0xdc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e564:	f003 0304 	and.w	r3, r3, #4
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00a      	beq.n	800e582 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e56c:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <ip4_route+0xdc>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3304      	adds	r3, #4
 800e572:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e574:	2b00      	cmp	r3, #0
 800e576:	d004      	beq.n	800e582 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b7f      	cmp	r3, #127	; 0x7f
 800e580:	d101      	bne.n	800e586 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e582:	2300      	movs	r3, #0
 800e584:	e001      	b.n	800e58a <ip4_route+0xca>
  }

  return netif_default;
 800e586:	4b05      	ldr	r3, [pc, #20]	; (800e59c <ip4_route+0xdc>)
 800e588:	681b      	ldr	r3, [r3, #0]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	20006cf8 	.word	0x20006cf8
 800e59c:	20006cfc 	.word	0x20006cfc

0800e5a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5ae:	f003 0301 	and.w	r3, r3, #1
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d016      	beq.n	800e5e6 <ip4_input_accept+0x46>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d011      	beq.n	800e5e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e5c2:	4b0b      	ldr	r3, [pc, #44]	; (800e5f0 <ip4_input_accept+0x50>)
 800e5c4:	695a      	ldr	r2, [r3, #20]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d008      	beq.n	800e5e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <ip4_input_accept+0x50>)
 800e5d2:	695b      	ldr	r3, [r3, #20]
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f000 fa08 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800e5dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	200037c4 	.word	0x200037c4

0800e5f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	091b      	lsrs	r3, r3, #4
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d004      	beq.n	800e61a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7f8 f893 	bl	800673c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e616:	2300      	movs	r3, #0
 800e618:	e107      	b.n	800e82a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	f003 030f 	and.w	r3, r3, #15
 800e622:	b2db      	uxtb	r3, r3
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	b2db      	uxtb	r3, r3
 800e628:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	885b      	ldrh	r3, [r3, #2]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	4618      	mov	r0, r3
 800e632:	f7f6 fd65 	bl	8005100 <lwip_htons>
 800e636:	4603      	mov	r3, r0
 800e638:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	891b      	ldrh	r3, [r3, #8]
 800e63e:	89ba      	ldrh	r2, [r7, #12]
 800e640:	429a      	cmp	r2, r3
 800e642:	d204      	bcs.n	800e64e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e644:	89bb      	ldrh	r3, [r7, #12]
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7f7 fef1 	bl	8006430 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	895b      	ldrh	r3, [r3, #10]
 800e652:	89fa      	ldrh	r2, [r7, #14]
 800e654:	429a      	cmp	r2, r3
 800e656:	d807      	bhi.n	800e668 <ip4_input+0x74>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	891b      	ldrh	r3, [r3, #8]
 800e65c:	89ba      	ldrh	r2, [r7, #12]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d802      	bhi.n	800e668 <ip4_input+0x74>
 800e662:	89fb      	ldrh	r3, [r7, #14]
 800e664:	2b13      	cmp	r3, #19
 800e666:	d804      	bhi.n	800e672 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7f8 f867 	bl	800673c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	e0db      	b.n	800e82a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	691b      	ldr	r3, [r3, #16]
 800e676:	4a6f      	ldr	r2, [pc, #444]	; (800e834 <ip4_input+0x240>)
 800e678:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	4a6d      	ldr	r2, [pc, #436]	; (800e834 <ip4_input+0x240>)
 800e680:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e682:	4b6c      	ldr	r3, [pc, #432]	; (800e834 <ip4_input+0x240>)
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e68a:	2be0      	cmp	r3, #224	; 0xe0
 800e68c:	d112      	bne.n	800e6b4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e694:	f003 0301 	and.w	r3, r3, #1
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d007      	beq.n	800e6ae <ip4_input+0xba>
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <ip4_input+0xba>
      netif = inp;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	613b      	str	r3, [r7, #16]
 800e6ac:	e02a      	b.n	800e704 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	613b      	str	r3, [r7, #16]
 800e6b2:	e027      	b.n	800e704 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e6b4:	6838      	ldr	r0, [r7, #0]
 800e6b6:	f7ff ff73 	bl	800e5a0 <ip4_input_accept>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d002      	beq.n	800e6c6 <ip4_input+0xd2>
      netif = inp;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	613b      	str	r3, [r7, #16]
 800e6c4:	e01e      	b.n	800e704 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e6ca:	4b5a      	ldr	r3, [pc, #360]	; (800e834 <ip4_input+0x240>)
 800e6cc:	695b      	ldr	r3, [r3, #20]
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b7f      	cmp	r3, #127	; 0x7f
 800e6d2:	d017      	beq.n	800e704 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e6d4:	4b58      	ldr	r3, [pc, #352]	; (800e838 <ip4_input+0x244>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	613b      	str	r3, [r7, #16]
 800e6da:	e00e      	b.n	800e6fa <ip4_input+0x106>
          if (netif == inp) {
 800e6dc:	693a      	ldr	r2, [r7, #16]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d006      	beq.n	800e6f2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e6e4:	6938      	ldr	r0, [r7, #16]
 800e6e6:	f7ff ff5b 	bl	800e5a0 <ip4_input_accept>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d108      	bne.n	800e702 <ip4_input+0x10e>
 800e6f0:	e000      	b.n	800e6f4 <ip4_input+0x100>
            continue;
 800e6f2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	613b      	str	r3, [r7, #16]
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1ed      	bne.n	800e6dc <ip4_input+0xe8>
 800e700:	e000      	b.n	800e704 <ip4_input+0x110>
            break;
 800e702:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e704:	4b4b      	ldr	r3, [pc, #300]	; (800e834 <ip4_input+0x240>)
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	6839      	ldr	r1, [r7, #0]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 f96e 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e716:	4b47      	ldr	r3, [pc, #284]	; (800e834 <ip4_input+0x240>)
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e71e:	2be0      	cmp	r3, #224	; 0xe0
 800e720:	d104      	bne.n	800e72c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f7f8 f80a 	bl	800673c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	e07e      	b.n	800e82a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d104      	bne.n	800e73c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7f8 f802 	bl	800673c <pbuf_free>
    return ERR_OK;
 800e738:	2300      	movs	r3, #0
 800e73a:	e076      	b.n	800e82a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	88db      	ldrh	r3, [r3, #6]
 800e740:	b29b      	uxth	r3, r3
 800e742:	461a      	mov	r2, r3
 800e744:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e748:	4013      	ands	r3, r2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00b      	beq.n	800e766 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fc92 	bl	800f078 <ip4_reass>
 800e754:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d101      	bne.n	800e760 <ip4_input+0x16c>
      return ERR_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	e064      	b.n	800e82a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e766:	4a33      	ldr	r2, [pc, #204]	; (800e834 <ip4_input+0x240>)
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e76c:	4a31      	ldr	r2, [pc, #196]	; (800e834 <ip4_input+0x240>)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e772:	4a30      	ldr	r2, [pc, #192]	; (800e834 <ip4_input+0x240>)
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	f003 030f 	and.w	r3, r3, #15
 800e780:	b2db      	uxtb	r3, r3
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	b2db      	uxtb	r3, r3
 800e786:	b29a      	uxth	r2, r3
 800e788:	4b2a      	ldr	r3, [pc, #168]	; (800e834 <ip4_input+0x240>)
 800e78a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e78c:	89fb      	ldrh	r3, [r7, #14]
 800e78e:	4619      	mov	r1, r3
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7f7 ff4d 	bl	8006630 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	7a5b      	ldrb	r3, [r3, #9]
 800e79a:	2b11      	cmp	r3, #17
 800e79c:	d006      	beq.n	800e7ac <ip4_input+0x1b8>
 800e79e:	2b11      	cmp	r3, #17
 800e7a0:	dc13      	bgt.n	800e7ca <ip4_input+0x1d6>
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d00c      	beq.n	800e7c0 <ip4_input+0x1cc>
 800e7a6:	2b06      	cmp	r3, #6
 800e7a8:	d005      	beq.n	800e7b6 <ip4_input+0x1c2>
 800e7aa:	e00e      	b.n	800e7ca <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7fe fc68 	bl	800d084 <udp_input>
        break;
 800e7b4:	e026      	b.n	800e804 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e7b6:	6839      	ldr	r1, [r7, #0]
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7fa f88d 	bl	80088d8 <tcp_input>
        break;
 800e7be:	e021      	b.n	800e804 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7ff fcee 	bl	800e1a4 <icmp_input>
        break;
 800e7c8:	e01c      	b.n	800e804 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e7ca:	4b1a      	ldr	r3, [pc, #104]	; (800e834 <ip4_input+0x240>)
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	6939      	ldr	r1, [r7, #16]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f000 f90b 	bl	800e9ec <ip4_addr_isbroadcast_u32>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10f      	bne.n	800e7fc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e7dc:	4b15      	ldr	r3, [pc, #84]	; (800e834 <ip4_input+0x240>)
 800e7de:	695b      	ldr	r3, [r3, #20]
 800e7e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e7e4:	2be0      	cmp	r3, #224	; 0xe0
 800e7e6:	d009      	beq.n	800e7fc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e7e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7f7 ff91 	bl	8006716 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e7f4:	2102      	movs	r1, #2
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff fdd8 	bl	800e3ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7f7 ff9d 	bl	800673c <pbuf_free>
        break;
 800e802:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e804:	4b0b      	ldr	r3, [pc, #44]	; (800e834 <ip4_input+0x240>)
 800e806:	2200      	movs	r2, #0
 800e808:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e80a:	4b0a      	ldr	r3, [pc, #40]	; (800e834 <ip4_input+0x240>)
 800e80c:	2200      	movs	r2, #0
 800e80e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e810:	4b08      	ldr	r3, [pc, #32]	; (800e834 <ip4_input+0x240>)
 800e812:	2200      	movs	r2, #0
 800e814:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e816:	4b07      	ldr	r3, [pc, #28]	; (800e834 <ip4_input+0x240>)
 800e818:	2200      	movs	r2, #0
 800e81a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <ip4_input+0x240>)
 800e81e:	2200      	movs	r2, #0
 800e820:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e822:	4b04      	ldr	r3, [pc, #16]	; (800e834 <ip4_input+0x240>)
 800e824:	2200      	movs	r2, #0
 800e826:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3718      	adds	r7, #24
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	200037c4 	.word	0x200037c4
 800e838:	20006cf8 	.word	0x20006cf8

0800e83c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08a      	sub	sp, #40	; 0x28
 800e840:	af04      	add	r7, sp, #16
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d009      	beq.n	800e868 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d003      	beq.n	800e862 <ip4_output_if+0x26>
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d102      	bne.n	800e868 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	3304      	adds	r3, #4
 800e866:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e868:	78fa      	ldrb	r2, [r7, #3]
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	9302      	str	r3, [sp, #8]
 800e86e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e872:	9301      	str	r3, [sp, #4]
 800e874:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	4613      	mov	r3, r2
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	6979      	ldr	r1, [r7, #20]
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f000 f805 	bl	800e890 <ip4_output_if_src>
 800e886:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b088      	sub	sp, #32
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	7b9b      	ldrb	r3, [r3, #14]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d006      	beq.n	800e8b4 <ip4_output_if_src+0x24>
 800e8a6:	4b4b      	ldr	r3, [pc, #300]	; (800e9d4 <ip4_output_if_src+0x144>)
 800e8a8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e8ac:	494a      	ldr	r1, [pc, #296]	; (800e9d8 <ip4_output_if_src+0x148>)
 800e8ae:	484b      	ldr	r0, [pc, #300]	; (800e9dc <ip4_output_if_src+0x14c>)
 800e8b0:	f001 f834 	bl	800f91c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d060      	beq.n	800e97c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e8ba:	2314      	movs	r3, #20
 800e8bc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e8be:	2114      	movs	r1, #20
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f7f7 fea5 	bl	8006610 <pbuf_add_header>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e8cc:	f06f 0301 	mvn.w	r3, #1
 800e8d0:	e07c      	b.n	800e9cc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	895b      	ldrh	r3, [r3, #10]
 800e8dc:	2b13      	cmp	r3, #19
 800e8de:	d806      	bhi.n	800e8ee <ip4_output_if_src+0x5e>
 800e8e0:	4b3c      	ldr	r3, [pc, #240]	; (800e9d4 <ip4_output_if_src+0x144>)
 800e8e2:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e8e6:	493e      	ldr	r1, [pc, #248]	; (800e9e0 <ip4_output_if_src+0x150>)
 800e8e8:	483c      	ldr	r0, [pc, #240]	; (800e9dc <ip4_output_if_src+0x14c>)
 800e8ea:	f001 f817 	bl	800f91c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	78fa      	ldrb	r2, [r7, #3]
 800e8f2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e8fa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e904:	8b7b      	ldrh	r3, [r7, #26]
 800e906:	089b      	lsrs	r3, r3, #2
 800e908:	b29b      	uxth	r3, r3
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e910:	b2da      	uxtb	r2, r3
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e91c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	891b      	ldrh	r3, [r3, #8]
 800e922:	4618      	mov	r0, r3
 800e924:	f7f6 fbec 	bl	8005100 <lwip_htons>
 800e928:	4603      	mov	r3, r0
 800e92a:	461a      	mov	r2, r3
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	2200      	movs	r2, #0
 800e934:	719a      	strb	r2, [r3, #6]
 800e936:	2200      	movs	r2, #0
 800e938:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e93a:	4b2a      	ldr	r3, [pc, #168]	; (800e9e4 <ip4_output_if_src+0x154>)
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7f6 fbde 	bl	8005100 <lwip_htons>
 800e944:	4603      	mov	r3, r0
 800e946:	461a      	mov	r2, r3
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e94c:	4b25      	ldr	r3, [pc, #148]	; (800e9e4 <ip4_output_if_src+0x154>)
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	3301      	adds	r3, #1
 800e952:	b29a      	uxth	r2, r3
 800e954:	4b23      	ldr	r3, [pc, #140]	; (800e9e4 <ip4_output_if_src+0x154>)
 800e956:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d104      	bne.n	800e968 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e95e:	4b22      	ldr	r3, [pc, #136]	; (800e9e8 <ip4_output_if_src+0x158>)
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	60da      	str	r2, [r3, #12]
 800e966:	e003      	b.n	800e970 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	2200      	movs	r2, #0
 800e974:	729a      	strb	r2, [r3, #10]
 800e976:	2200      	movs	r2, #0
 800e978:	72da      	strb	r2, [r3, #11]
 800e97a:	e00f      	b.n	800e99c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	895b      	ldrh	r3, [r3, #10]
 800e980:	2b13      	cmp	r3, #19
 800e982:	d802      	bhi.n	800e98a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e984:	f06f 0301 	mvn.w	r3, #1
 800e988:	e020      	b.n	800e9cc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e996:	f107 0314 	add.w	r3, r7, #20
 800e99a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00c      	beq.n	800e9be <ip4_output_if_src+0x12e>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	891a      	ldrh	r2, [r3, #8]
 800e9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d906      	bls.n	800e9be <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f000 fd4d 	bl	800f454 <ip4_frag>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	e006      	b.n	800e9cc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	68f9      	ldr	r1, [r7, #12]
 800e9c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9c8:	4798      	blx	r3
 800e9ca:	4603      	mov	r3, r0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3720      	adds	r7, #32
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	080135c0 	.word	0x080135c0
 800e9d8:	080135f4 	.word	0x080135f4
 800e9dc:	08013600 	.word	0x08013600
 800e9e0:	08013628 	.word	0x08013628
 800e9e4:	20000672 	.word	0x20000672
 800e9e8:	08013dc8 	.word	0x08013dc8

0800e9ec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea00:	d002      	beq.n	800ea08 <ip4_addr_isbroadcast_u32+0x1c>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d101      	bne.n	800ea0c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	e02a      	b.n	800ea62 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea12:	f003 0302 	and.w	r3, r3, #2
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e021      	b.n	800ea62 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	3304      	adds	r3, #4
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d101      	bne.n	800ea2e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	e019      	b.n	800ea62 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	3304      	adds	r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	405a      	eors	r2, r3
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	3308      	adds	r3, #8
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4013      	ands	r3, r2
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10d      	bne.n	800ea60 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	3308      	adds	r3, #8
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	43da      	mvns	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	3308      	adds	r3, #8
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d101      	bne.n	800ea60 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e000      	b.n	800ea62 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ea60:	2300      	movs	r3, #0
  }
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
	...

0800ea70 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ea7a:	4b12      	ldr	r3, [pc, #72]	; (800eac4 <ip_reass_tmr+0x54>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ea80:	e018      	b.n	800eab4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	7fdb      	ldrb	r3, [r3, #31]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00b      	beq.n	800eaa2 <ip_reass_tmr+0x32>
      r->timer--;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	7fdb      	ldrb	r3, [r3, #31]
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	60fb      	str	r3, [r7, #12]
 800eaa0:	e008      	b.n	800eab4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800eaac:	68b9      	ldr	r1, [r7, #8]
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f000 f80a 	bl	800eac8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e3      	bne.n	800ea82 <ip_reass_tmr+0x12>
    }
  }
}
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	20000674 	.word	0x20000674

0800eac8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b088      	sub	sp, #32
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d105      	bne.n	800eaea <ip_reass_free_complete_datagram+0x22>
 800eade:	4b45      	ldr	r3, [pc, #276]	; (800ebf4 <ip_reass_free_complete_datagram+0x12c>)
 800eae0:	22ab      	movs	r2, #171	; 0xab
 800eae2:	4945      	ldr	r1, [pc, #276]	; (800ebf8 <ip_reass_free_complete_datagram+0x130>)
 800eae4:	4845      	ldr	r0, [pc, #276]	; (800ebfc <ip_reass_free_complete_datagram+0x134>)
 800eae6:	f000 ff19 	bl	800f91c <iprintf>
  if (prev != NULL) {
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d00a      	beq.n	800eb06 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d005      	beq.n	800eb06 <ip_reass_free_complete_datagram+0x3e>
 800eafa:	4b3e      	ldr	r3, [pc, #248]	; (800ebf4 <ip_reass_free_complete_datagram+0x12c>)
 800eafc:	22ad      	movs	r2, #173	; 0xad
 800eafe:	4940      	ldr	r1, [pc, #256]	; (800ec00 <ip_reass_free_complete_datagram+0x138>)
 800eb00:	483e      	ldr	r0, [pc, #248]	; (800ebfc <ip_reass_free_complete_datagram+0x134>)
 800eb02:	f000 ff0b 	bl	800f91c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	889b      	ldrh	r3, [r3, #4]
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d12a      	bne.n	800eb6e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	6858      	ldr	r0, [r3, #4]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3308      	adds	r3, #8
 800eb2e:	2214      	movs	r2, #20
 800eb30:	4619      	mov	r1, r3
 800eb32:	f000 fedd 	bl	800f8f0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800eb36:	2101      	movs	r1, #1
 800eb38:	69b8      	ldr	r0, [r7, #24]
 800eb3a:	f7ff fc47 	bl	800e3cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800eb3e:	69b8      	ldr	r0, [r7, #24]
 800eb40:	f7f7 fe84 	bl	800684c <pbuf_clen>
 800eb44:	4603      	mov	r3, r0
 800eb46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eb48:	8bfa      	ldrh	r2, [r7, #30]
 800eb4a:	8a7b      	ldrh	r3, [r7, #18]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb52:	db05      	blt.n	800eb60 <ip_reass_free_complete_datagram+0x98>
 800eb54:	4b27      	ldr	r3, [pc, #156]	; (800ebf4 <ip_reass_free_complete_datagram+0x12c>)
 800eb56:	22bc      	movs	r2, #188	; 0xbc
 800eb58:	492a      	ldr	r1, [pc, #168]	; (800ec04 <ip_reass_free_complete_datagram+0x13c>)
 800eb5a:	4828      	ldr	r0, [pc, #160]	; (800ebfc <ip_reass_free_complete_datagram+0x134>)
 800eb5c:	f000 fede 	bl	800f91c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800eb60:	8bfa      	ldrh	r2, [r7, #30]
 800eb62:	8a7b      	ldrh	r3, [r7, #18]
 800eb64:	4413      	add	r3, r2
 800eb66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800eb68:	69b8      	ldr	r0, [r7, #24]
 800eb6a:	f7f7 fde7 	bl	800673c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800eb74:	e01f      	b.n	800ebb6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7f7 fe60 	bl	800684c <pbuf_clen>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eb90:	8bfa      	ldrh	r2, [r7, #30]
 800eb92:	8a7b      	ldrh	r3, [r7, #18]
 800eb94:	4413      	add	r3, r2
 800eb96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb9a:	db05      	blt.n	800eba8 <ip_reass_free_complete_datagram+0xe0>
 800eb9c:	4b15      	ldr	r3, [pc, #84]	; (800ebf4 <ip_reass_free_complete_datagram+0x12c>)
 800eb9e:	22cc      	movs	r2, #204	; 0xcc
 800eba0:	4918      	ldr	r1, [pc, #96]	; (800ec04 <ip_reass_free_complete_datagram+0x13c>)
 800eba2:	4816      	ldr	r0, [pc, #88]	; (800ebfc <ip_reass_free_complete_datagram+0x134>)
 800eba4:	f000 feba 	bl	800f91c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800eba8:	8bfa      	ldrh	r2, [r7, #30]
 800ebaa:	8a7b      	ldrh	r3, [r7, #18]
 800ebac:	4413      	add	r3, r2
 800ebae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f7f7 fdc3 	bl	800673c <pbuf_free>
  while (p != NULL) {
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1dc      	bne.n	800eb76 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f8c2 	bl	800ed48 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ebc4:	4b10      	ldr	r3, [pc, #64]	; (800ec08 <ip_reass_free_complete_datagram+0x140>)
 800ebc6:	881b      	ldrh	r3, [r3, #0]
 800ebc8:	8bfa      	ldrh	r2, [r7, #30]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d905      	bls.n	800ebda <ip_reass_free_complete_datagram+0x112>
 800ebce:	4b09      	ldr	r3, [pc, #36]	; (800ebf4 <ip_reass_free_complete_datagram+0x12c>)
 800ebd0:	22d2      	movs	r2, #210	; 0xd2
 800ebd2:	490e      	ldr	r1, [pc, #56]	; (800ec0c <ip_reass_free_complete_datagram+0x144>)
 800ebd4:	4809      	ldr	r0, [pc, #36]	; (800ebfc <ip_reass_free_complete_datagram+0x134>)
 800ebd6:	f000 fea1 	bl	800f91c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ebda:	4b0b      	ldr	r3, [pc, #44]	; (800ec08 <ip_reass_free_complete_datagram+0x140>)
 800ebdc:	881a      	ldrh	r2, [r3, #0]
 800ebde:	8bfb      	ldrh	r3, [r7, #30]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	4b08      	ldr	r3, [pc, #32]	; (800ec08 <ip_reass_free_complete_datagram+0x140>)
 800ebe6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ebe8:	8bfb      	ldrh	r3, [r7, #30]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3720      	adds	r7, #32
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08013658 	.word	0x08013658
 800ebf8:	08013694 	.word	0x08013694
 800ebfc:	080136a0 	.word	0x080136a0
 800ec00:	080136c8 	.word	0x080136c8
 800ec04:	080136dc 	.word	0x080136dc
 800ec08:	20000678 	.word	0x20000678
 800ec0c:	080136fc 	.word	0x080136fc

0800ec10 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08a      	sub	sp, #40	; 0x28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ec2e:	4b28      	ldr	r3, [pc, #160]	; (800ecd0 <ip_reass_remove_oldest_datagram+0xc0>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ec34:	e030      	b.n	800ec98 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ec36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec38:	695a      	ldr	r2, [r3, #20]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d10c      	bne.n	800ec5c <ip_reass_remove_oldest_datagram+0x4c>
 800ec42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec44:	699a      	ldr	r2, [r3, #24]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d106      	bne.n	800ec5c <ip_reass_remove_oldest_datagram+0x4c>
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec50:	899a      	ldrh	r2, [r3, #12]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	889b      	ldrh	r3, [r3, #4]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d014      	beq.n	800ec86 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ec62:	6a3b      	ldr	r3, [r7, #32]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d104      	bne.n	800ec72 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	61bb      	str	r3, [r7, #24]
 800ec70:	e009      	b.n	800ec86 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	7fda      	ldrb	r2, [r3, #31]
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	7fdb      	ldrb	r3, [r3, #31]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d803      	bhi.n	800ec86 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec80:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1cb      	bne.n	800ec36 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d008      	beq.n	800ecb6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800eca4:	69b9      	ldr	r1, [r7, #24]
 800eca6:	6a38      	ldr	r0, [r7, #32]
 800eca8:	f7ff ff0e 	bl	800eac8 <ip_reass_free_complete_datagram>
 800ecac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ecb6:	697a      	ldr	r2, [r7, #20]
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	da02      	bge.n	800ecc4 <ip_reass_remove_oldest_datagram+0xb4>
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	dcac      	bgt.n	800ec1e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ecc4:	697b      	ldr	r3, [r7, #20]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3728      	adds	r7, #40	; 0x28
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	20000674 	.word	0x20000674

0800ecd4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ecde:	2004      	movs	r0, #4
 800ece0:	f7f6 fece 	bl	8005a80 <memp_malloc>
 800ece4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d110      	bne.n	800ed0e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff ff8e 	bl	800ec10 <ip_reass_remove_oldest_datagram>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	dc03      	bgt.n	800ed04 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ecfc:	2004      	movs	r0, #4
 800ecfe:	f7f6 febf 	bl	8005a80 <memp_malloc>
 800ed02:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e016      	b.n	800ed3c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ed0e:	2220      	movs	r2, #32
 800ed10:	2100      	movs	r1, #0
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f000 fdfa 	bl	800f90c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	220f      	movs	r2, #15
 800ed1c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ed1e:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <ip_reass_enqueue_new_datagram+0x70>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ed26:	4a07      	ldr	r2, [pc, #28]	; (800ed44 <ip_reass_enqueue_new_datagram+0x70>)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3308      	adds	r3, #8
 800ed30:	2214      	movs	r2, #20
 800ed32:	6879      	ldr	r1, [r7, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f000 fddb 	bl	800f8f0 <memcpy>
  return ipr;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20000674 	.word	0x20000674

0800ed48 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ed52:	4b10      	ldr	r3, [pc, #64]	; (800ed94 <ip_reass_dequeue_datagram+0x4c>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d104      	bne.n	800ed66 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a0c      	ldr	r2, [pc, #48]	; (800ed94 <ip_reass_dequeue_datagram+0x4c>)
 800ed62:	6013      	str	r3, [r2, #0]
 800ed64:	e00d      	b.n	800ed82 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <ip_reass_dequeue_datagram+0x32>
 800ed6c:	4b0a      	ldr	r3, [pc, #40]	; (800ed98 <ip_reass_dequeue_datagram+0x50>)
 800ed6e:	f240 1245 	movw	r2, #325	; 0x145
 800ed72:	490a      	ldr	r1, [pc, #40]	; (800ed9c <ip_reass_dequeue_datagram+0x54>)
 800ed74:	480a      	ldr	r0, [pc, #40]	; (800eda0 <ip_reass_dequeue_datagram+0x58>)
 800ed76:	f000 fdd1 	bl	800f91c <iprintf>
    prev->next = ipr->next;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ed82:	6879      	ldr	r1, [r7, #4]
 800ed84:	2004      	movs	r0, #4
 800ed86:	f7f6 fec7 	bl	8005b18 <memp_free>
}
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	20000674 	.word	0x20000674
 800ed98:	08013658 	.word	0x08013658
 800ed9c:	08013720 	.word	0x08013720
 800eda0:	080136a0 	.word	0x080136a0

0800eda4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b08c      	sub	sp, #48	; 0x30
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800edb4:	2301      	movs	r3, #1
 800edb6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	885b      	ldrh	r3, [r3, #2]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7f6 f99b 	bl	8005100 <lwip_htons>
 800edca:	4603      	mov	r3, r0
 800edcc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	f003 030f 	and.w	r3, r3, #15
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800eddc:	7e7b      	ldrb	r3, [r7, #25]
 800edde:	b29b      	uxth	r3, r3
 800ede0:	8b7a      	ldrh	r2, [r7, #26]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d202      	bcs.n	800edec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ede6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edea:	e135      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800edec:	7e7b      	ldrb	r3, [r7, #25]
 800edee:	b29b      	uxth	r3, r3
 800edf0:	8b7a      	ldrh	r2, [r7, #26]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	88db      	ldrh	r3, [r3, #6]
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7f6 f97f 	bl	8005100 <lwip_htons>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	00db      	lsls	r3, r3, #3
 800ee0c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	2200      	movs	r2, #0
 800ee18:	701a      	strb	r2, [r3, #0]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	705a      	strb	r2, [r3, #1]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	709a      	strb	r2, [r3, #2]
 800ee22:	2200      	movs	r2, #0
 800ee24:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	8afa      	ldrh	r2, [r7, #22]
 800ee2a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ee2c:	8afa      	ldrh	r2, [r7, #22]
 800ee2e:	8b7b      	ldrh	r3, [r7, #26]
 800ee30:	4413      	add	r3, r2
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee36:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ee38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3a:	88db      	ldrh	r3, [r3, #6]
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	8afa      	ldrh	r2, [r7, #22]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d902      	bls.n	800ee4a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee48:	e106      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee50:	e068      	b.n	800ef24 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ee58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5a:	889b      	ldrh	r3, [r3, #4]
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	889b      	ldrh	r3, [r3, #4]
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d235      	bcs.n	800eed4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ee6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d020      	beq.n	800eeb6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee76:	889b      	ldrh	r3, [r3, #4]
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	88db      	ldrh	r3, [r3, #6]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d307      	bcc.n	800ee94 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	88db      	ldrh	r3, [r3, #6]
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	889b      	ldrh	r3, [r3, #4]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d902      	bls.n	800ee9a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ee94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee98:	e0de      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800eea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea2:	88db      	ldrh	r3, [r3, #6]
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	889b      	ldrh	r3, [r3, #4]
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d03d      	beq.n	800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800eeb4:	e03a      	b.n	800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800eeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb8:	88db      	ldrh	r3, [r3, #6]
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	889b      	ldrh	r3, [r3, #4]
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d902      	bls.n	800eecc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeca:	e0c5      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	605a      	str	r2, [r3, #4]
      break;
 800eed2:	e02b      	b.n	800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	889b      	ldrh	r3, [r3, #4]
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	889b      	ldrh	r3, [r3, #4]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d102      	bne.n	800eeea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eee8:	e0b6      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	889b      	ldrh	r3, [r3, #4]
 800eeee:	b29a      	uxth	r2, r3
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	88db      	ldrh	r3, [r3, #6]
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d202      	bcs.n	800ef00 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eefe:	e0ab      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d009      	beq.n	800ef1a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	88db      	ldrh	r3, [r3, #6]
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	889b      	ldrh	r3, [r3, #4]
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d001      	beq.n	800ef1a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d193      	bne.n	800ee52 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ef2a:	e000      	b.n	800ef2e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ef2c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d12d      	bne.n	800ef90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ef34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d01c      	beq.n	800ef74 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	88db      	ldrh	r3, [r3, #6]
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef42:	889b      	ldrh	r3, [r3, #4]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d906      	bls.n	800ef58 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ef4a:	4b45      	ldr	r3, [pc, #276]	; (800f060 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ef4c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ef50:	4944      	ldr	r1, [pc, #272]	; (800f064 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ef52:	4845      	ldr	r0, [pc, #276]	; (800f068 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ef54:	f000 fce2 	bl	800f91c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ef58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ef5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef60:	88db      	ldrh	r3, [r3, #6]
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	889b      	ldrh	r3, [r3, #4]
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d010      	beq.n	800ef90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	623b      	str	r3, [r7, #32]
 800ef72:	e00d      	b.n	800ef90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d006      	beq.n	800ef8a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ef7c:	4b38      	ldr	r3, [pc, #224]	; (800f060 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ef7e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ef82:	493a      	ldr	r1, [pc, #232]	; (800f06c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ef84:	4838      	ldr	r0, [pc, #224]	; (800f068 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ef86:	f000 fcc9 	bl	800f91c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68ba      	ldr	r2, [r7, #8]
 800ef8e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d105      	bne.n	800efa2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	7f9b      	ldrb	r3, [r3, #30]
 800ef9a:	f003 0301 	and.w	r3, r3, #1
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d059      	beq.n	800f056 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800efa2:	6a3b      	ldr	r3, [r7, #32]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d04f      	beq.n	800f048 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d006      	beq.n	800efbe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	889b      	ldrh	r3, [r3, #4]
 800efb8:	b29b      	uxth	r3, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d002      	beq.n	800efc4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	623b      	str	r3, [r7, #32]
 800efc2:	e041      	b.n	800f048 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800efce:	e012      	b.n	800eff6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800efd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd8:	88db      	ldrh	r3, [r3, #6]
 800efda:	b29a      	uxth	r2, r3
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efde:	889b      	ldrh	r3, [r3, #4]
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d002      	beq.n	800efec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	623b      	str	r3, [r7, #32]
            break;
 800efea:	e007      	b.n	800effc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d1e9      	bne.n	800efd0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800effc:	6a3b      	ldr	r3, [r7, #32]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d022      	beq.n	800f048 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f00a:	4b15      	ldr	r3, [pc, #84]	; (800f060 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f00c:	f240 12df 	movw	r2, #479	; 0x1df
 800f010:	4917      	ldr	r1, [pc, #92]	; (800f070 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f012:	4815      	ldr	r0, [pc, #84]	; (800f068 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f014:	f000 fc82 	bl	800f91c <iprintf>
          LWIP_ASSERT("sanity check",
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f020:	429a      	cmp	r2, r3
 800f022:	d106      	bne.n	800f032 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f024:	4b0e      	ldr	r3, [pc, #56]	; (800f060 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f026:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f02a:	4911      	ldr	r1, [pc, #68]	; (800f070 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f02c:	480e      	ldr	r0, [pc, #56]	; (800f068 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f02e:	f000 fc75 	bl	800f91c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d006      	beq.n	800f048 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f03a:	4b09      	ldr	r3, [pc, #36]	; (800f060 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f03c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f040:	490c      	ldr	r1, [pc, #48]	; (800f074 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f042:	4809      	ldr	r0, [pc, #36]	; (800f068 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f044:	f000 fc6a 	bl	800f91c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f048:	6a3b      	ldr	r3, [r7, #32]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	bf14      	ite	ne
 800f04e:	2301      	movne	r3, #1
 800f050:	2300      	moveq	r3, #0
 800f052:	b2db      	uxtb	r3, r3
 800f054:	e000      	b.n	800f058 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3730      	adds	r7, #48	; 0x30
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	08013658 	.word	0x08013658
 800f064:	0801373c 	.word	0x0801373c
 800f068:	080136a0 	.word	0x080136a0
 800f06c:	0801375c 	.word	0x0801375c
 800f070:	08013794 	.word	0x08013794
 800f074:	080137a4 	.word	0x080137a4

0800f078 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08e      	sub	sp, #56	; 0x38
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	f003 030f 	and.w	r3, r3, #15
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	b2db      	uxtb	r3, r3
 800f094:	2b14      	cmp	r3, #20
 800f096:	f040 8167 	bne.w	800f368 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09c:	88db      	ldrh	r3, [r3, #6]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7f6 f82d 	bl	8005100 <lwip_htons>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	885b      	ldrh	r3, [r3, #2]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7f6 f821 	bl	8005100 <lwip_htons>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	f003 030f 	and.w	r3, r3, #15
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f0d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	f0c0 8146 	bcc.w	800f36c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f0e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7f7 fbad 	bl	800684c <pbuf_clen>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f0f6:	4b9f      	ldr	r3, [pc, #636]	; (800f374 <ip4_reass+0x2fc>)
 800f0f8:	881b      	ldrh	r3, [r3, #0]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	8c3b      	ldrh	r3, [r7, #32]
 800f0fe:	4413      	add	r3, r2
 800f100:	2b0a      	cmp	r3, #10
 800f102:	dd10      	ble.n	800f126 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f104:	8c3b      	ldrh	r3, [r7, #32]
 800f106:	4619      	mov	r1, r3
 800f108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f10a:	f7ff fd81 	bl	800ec10 <ip_reass_remove_oldest_datagram>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 812d 	beq.w	800f370 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f116:	4b97      	ldr	r3, [pc, #604]	; (800f374 <ip4_reass+0x2fc>)
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	461a      	mov	r2, r3
 800f11c:	8c3b      	ldrh	r3, [r7, #32]
 800f11e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f120:	2b0a      	cmp	r3, #10
 800f122:	f300 8125 	bgt.w	800f370 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f126:	4b94      	ldr	r3, [pc, #592]	; (800f378 <ip4_reass+0x300>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	633b      	str	r3, [r7, #48]	; 0x30
 800f12c:	e015      	b.n	800f15a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f130:	695a      	ldr	r2, [r3, #20]
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	429a      	cmp	r2, r3
 800f138:	d10c      	bne.n	800f154 <ip4_reass+0xdc>
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	699a      	ldr	r2, [r3, #24]
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	691b      	ldr	r3, [r3, #16]
 800f142:	429a      	cmp	r2, r3
 800f144:	d106      	bne.n	800f154 <ip4_reass+0xdc>
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	899a      	ldrh	r2, [r3, #12]
 800f14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14c:	889b      	ldrh	r3, [r3, #4]
 800f14e:	b29b      	uxth	r3, r3
 800f150:	429a      	cmp	r2, r3
 800f152:	d006      	beq.n	800f162 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	633b      	str	r3, [r7, #48]	; 0x30
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1e6      	bne.n	800f12e <ip4_reass+0xb6>
 800f160:	e000      	b.n	800f164 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f162:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	2b00      	cmp	r3, #0
 800f168:	d109      	bne.n	800f17e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f16a:	8c3b      	ldrh	r3, [r7, #32]
 800f16c:	4619      	mov	r1, r3
 800f16e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f170:	f7ff fdb0 	bl	800ecd4 <ip_reass_enqueue_new_datagram>
 800f174:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d11c      	bne.n	800f1b6 <ip4_reass+0x13e>
      goto nullreturn;
 800f17c:	e109      	b.n	800f392 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f180:	88db      	ldrh	r3, [r3, #6]
 800f182:	b29b      	uxth	r3, r3
 800f184:	4618      	mov	r0, r3
 800f186:	f7f5 ffbb 	bl	8005100 <lwip_htons>
 800f18a:	4603      	mov	r3, r0
 800f18c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f190:	2b00      	cmp	r3, #0
 800f192:	d110      	bne.n	800f1b6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	89db      	ldrh	r3, [r3, #14]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7f5 ffb1 	bl	8005100 <lwip_htons>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d006      	beq.n	800f1b6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	2214      	movs	r2, #20
 800f1ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 fb9d 	bl	800f8f0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b8:	88db      	ldrh	r3, [r3, #6]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	f003 0320 	and.w	r3, r3, #32
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	bf0c      	ite	eq
 800f1c4:	2301      	moveq	r3, #1
 800f1c6:	2300      	movne	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00e      	beq.n	800f1f0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f1d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1d6:	4413      	add	r3, r2
 800f1d8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f1da:	8b7a      	ldrh	r2, [r7, #26]
 800f1dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	f0c0 80a0 	bcc.w	800f324 <ip4_reass+0x2ac>
 800f1e4:	8b7b      	ldrh	r3, [r7, #26]
 800f1e6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	f200 809a 	bhi.w	800f324 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f1f0:	69fa      	ldr	r2, [r7, #28]
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1f6:	f7ff fdd5 	bl	800eda4 <ip_reass_chain_frag_into_datagram_and_validate>
 800f1fa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f202:	f000 8091 	beq.w	800f328 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f206:	4b5b      	ldr	r3, [pc, #364]	; (800f374 <ip4_reass+0x2fc>)
 800f208:	881a      	ldrh	r2, [r3, #0]
 800f20a:	8c3b      	ldrh	r3, [r7, #32]
 800f20c:	4413      	add	r3, r2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	4b58      	ldr	r3, [pc, #352]	; (800f374 <ip4_reass+0x2fc>)
 800f212:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00d      	beq.n	800f236 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f21a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f21c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f21e:	4413      	add	r3, r2
 800f220:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f224:	8a7a      	ldrh	r2, [r7, #18]
 800f226:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	7f9b      	ldrb	r3, [r3, #30]
 800f22c:	f043 0301 	orr.w	r3, r3, #1
 800f230:	b2da      	uxtb	r2, r3
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d171      	bne.n	800f320 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	8b9b      	ldrh	r3, [r3, #28]
 800f240:	3314      	adds	r3, #20
 800f242:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	3308      	adds	r3, #8
 800f25a:	2214      	movs	r2, #20
 800f25c:	4619      	mov	r1, r3
 800f25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f260:	f000 fb46 	bl	800f8f0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f264:	8a3b      	ldrh	r3, [r7, #16]
 800f266:	4618      	mov	r0, r3
 800f268:	f7f5 ff4a 	bl	8005100 <lwip_htons>
 800f26c:	4603      	mov	r3, r0
 800f26e:	461a      	mov	r2, r3
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	2200      	movs	r2, #0
 800f278:	719a      	strb	r2, [r3, #6]
 800f27a:	2200      	movs	r2, #0
 800f27c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f280:	2200      	movs	r2, #0
 800f282:	729a      	strb	r2, [r3, #10]
 800f284:	2200      	movs	r2, #0
 800f286:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f28e:	e00d      	b.n	800f2ac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f296:	2114      	movs	r1, #20
 800f298:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f29a:	f7f7 f9c9 	bl	8006630 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f29e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7f7 fb0d 	bl	80068c0 <pbuf_cat>
      r = iprh->next_pbuf;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1ee      	bne.n	800f290 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f2b2:	4b31      	ldr	r3, [pc, #196]	; (800f378 <ip4_reass+0x300>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d102      	bne.n	800f2c2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2c0:	e010      	b.n	800f2e4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f2c2:	4b2d      	ldr	r3, [pc, #180]	; (800f378 <ip4_reass+0x300>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2c8:	e007      	b.n	800f2da <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d006      	beq.n	800f2e2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1f4      	bne.n	800f2ca <ip4_reass+0x252>
 800f2e0:	e000      	b.n	800f2e4 <ip4_reass+0x26c>
          break;
 800f2e2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f2e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2e8:	f7ff fd2e 	bl	800ed48 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7f7 faad 	bl	800684c <pbuf_clen>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f2f6:	4b1f      	ldr	r3, [pc, #124]	; (800f374 <ip4_reass+0x2fc>)
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	8c3a      	ldrh	r2, [r7, #32]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d906      	bls.n	800f30e <ip4_reass+0x296>
 800f300:	4b1e      	ldr	r3, [pc, #120]	; (800f37c <ip4_reass+0x304>)
 800f302:	f240 229b 	movw	r2, #667	; 0x29b
 800f306:	491e      	ldr	r1, [pc, #120]	; (800f380 <ip4_reass+0x308>)
 800f308:	481e      	ldr	r0, [pc, #120]	; (800f384 <ip4_reass+0x30c>)
 800f30a:	f000 fb07 	bl	800f91c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f30e:	4b19      	ldr	r3, [pc, #100]	; (800f374 <ip4_reass+0x2fc>)
 800f310:	881a      	ldrh	r2, [r3, #0]
 800f312:	8c3b      	ldrh	r3, [r7, #32]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	b29a      	uxth	r2, r3
 800f318:	4b16      	ldr	r3, [pc, #88]	; (800f374 <ip4_reass+0x2fc>)
 800f31a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	e03c      	b.n	800f39a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f320:	2300      	movs	r3, #0
 800f322:	e03a      	b.n	800f39a <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f324:	bf00      	nop
 800f326:	e000      	b.n	800f32a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f328:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d106      	bne.n	800f33e <ip4_reass+0x2c6>
 800f330:	4b12      	ldr	r3, [pc, #72]	; (800f37c <ip4_reass+0x304>)
 800f332:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f336:	4914      	ldr	r1, [pc, #80]	; (800f388 <ip4_reass+0x310>)
 800f338:	4812      	ldr	r0, [pc, #72]	; (800f384 <ip4_reass+0x30c>)
 800f33a:	f000 faef 	bl	800f91c <iprintf>
  if (ipr->p == NULL) {
 800f33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d124      	bne.n	800f390 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f346:	4b0c      	ldr	r3, [pc, #48]	; (800f378 <ip4_reass+0x300>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d006      	beq.n	800f35e <ip4_reass+0x2e6>
 800f350:	4b0a      	ldr	r3, [pc, #40]	; (800f37c <ip4_reass+0x304>)
 800f352:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f356:	490d      	ldr	r1, [pc, #52]	; (800f38c <ip4_reass+0x314>)
 800f358:	480a      	ldr	r0, [pc, #40]	; (800f384 <ip4_reass+0x30c>)
 800f35a:	f000 fadf 	bl	800f91c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f35e:	2100      	movs	r1, #0
 800f360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f362:	f7ff fcf1 	bl	800ed48 <ip_reass_dequeue_datagram>
 800f366:	e014      	b.n	800f392 <ip4_reass+0x31a>
    goto nullreturn;
 800f368:	bf00      	nop
 800f36a:	e012      	b.n	800f392 <ip4_reass+0x31a>
    goto nullreturn;
 800f36c:	bf00      	nop
 800f36e:	e010      	b.n	800f392 <ip4_reass+0x31a>
      goto nullreturn;
 800f370:	bf00      	nop
 800f372:	e00e      	b.n	800f392 <ip4_reass+0x31a>
 800f374:	20000678 	.word	0x20000678
 800f378:	20000674 	.word	0x20000674
 800f37c:	08013658 	.word	0x08013658
 800f380:	080137c8 	.word	0x080137c8
 800f384:	080136a0 	.word	0x080136a0
 800f388:	080137e4 	.word	0x080137e4
 800f38c:	080137f0 	.word	0x080137f0
  }

nullreturn:
 800f390:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7f7 f9d2 	bl	800673c <pbuf_free>
  return NULL;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3738      	adds	r7, #56	; 0x38
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop

0800f3a4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f3a8:	2005      	movs	r0, #5
 800f3aa:	f7f6 fb69 	bl	8005a80 <memp_malloc>
 800f3ae:	4603      	mov	r3, r0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f3c2:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f3c4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f3c8:	4906      	ldr	r1, [pc, #24]	; (800f3e4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f3ca:	4807      	ldr	r0, [pc, #28]	; (800f3e8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f3cc:	f000 faa6 	bl	800f91c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f3d0:	6879      	ldr	r1, [r7, #4]
 800f3d2:	2005      	movs	r0, #5
 800f3d4:	f7f6 fba0 	bl	8005b18 <memp_free>
}
 800f3d8:	bf00      	nop
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	08013658 	.word	0x08013658
 800f3e4:	08013810 	.word	0x08013810
 800f3e8:	080136a0 	.word	0x080136a0

0800f3ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d106      	bne.n	800f40c <ipfrag_free_pbuf_custom+0x20>
 800f3fe:	4b11      	ldr	r3, [pc, #68]	; (800f444 <ipfrag_free_pbuf_custom+0x58>)
 800f400:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f404:	4910      	ldr	r1, [pc, #64]	; (800f448 <ipfrag_free_pbuf_custom+0x5c>)
 800f406:	4811      	ldr	r0, [pc, #68]	; (800f44c <ipfrag_free_pbuf_custom+0x60>)
 800f408:	f000 fa88 	bl	800f91c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	429a      	cmp	r2, r3
 800f412:	d006      	beq.n	800f422 <ipfrag_free_pbuf_custom+0x36>
 800f414:	4b0b      	ldr	r3, [pc, #44]	; (800f444 <ipfrag_free_pbuf_custom+0x58>)
 800f416:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f41a:	490d      	ldr	r1, [pc, #52]	; (800f450 <ipfrag_free_pbuf_custom+0x64>)
 800f41c:	480b      	ldr	r0, [pc, #44]	; (800f44c <ipfrag_free_pbuf_custom+0x60>)
 800f41e:	f000 fa7d 	bl	800f91c <iprintf>
  if (pcr->original != NULL) {
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d004      	beq.n	800f434 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	695b      	ldr	r3, [r3, #20]
 800f42e:	4618      	mov	r0, r3
 800f430:	f7f7 f984 	bl	800673c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7ff ffbd 	bl	800f3b4 <ip_frag_free_pbuf_custom_ref>
}
 800f43a:	bf00      	nop
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	08013658 	.word	0x08013658
 800f448:	0801381c 	.word	0x0801381c
 800f44c:	080136a0 	.word	0x080136a0
 800f450:	08013828 	.word	0x08013828

0800f454 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b094      	sub	sp, #80	; 0x50
 800f458:	af02      	add	r7, sp, #8
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f460:	2300      	movs	r3, #0
 800f462:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f46a:	3b14      	subs	r3, #20
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	da00      	bge.n	800f472 <ip4_frag+0x1e>
 800f470:	3307      	adds	r3, #7
 800f472:	10db      	asrs	r3, r3, #3
 800f474:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f476:	2314      	movs	r3, #20
 800f478:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f482:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	f003 030f 	and.w	r3, r3, #15
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b14      	cmp	r3, #20
 800f494:	d002      	beq.n	800f49c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f496:	f06f 0305 	mvn.w	r3, #5
 800f49a:	e110      	b.n	800f6be <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	895b      	ldrh	r3, [r3, #10]
 800f4a0:	2b13      	cmp	r3, #19
 800f4a2:	d809      	bhi.n	800f4b8 <ip4_frag+0x64>
 800f4a4:	4b88      	ldr	r3, [pc, #544]	; (800f6c8 <ip4_frag+0x274>)
 800f4a6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f4aa:	4988      	ldr	r1, [pc, #544]	; (800f6cc <ip4_frag+0x278>)
 800f4ac:	4888      	ldr	r0, [pc, #544]	; (800f6d0 <ip4_frag+0x27c>)
 800f4ae:	f000 fa35 	bl	800f91c <iprintf>
 800f4b2:	f06f 0305 	mvn.w	r3, #5
 800f4b6:	e102      	b.n	800f6be <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	88db      	ldrh	r3, [r3, #6]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7f5 fe1e 	bl	8005100 <lwip_htons>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f4c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f4d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	891b      	ldrh	r3, [r3, #8]
 800f4de:	3b14      	subs	r3, #20
 800f4e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f4e4:	e0e1      	b.n	800f6aa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f4e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	bf28      	it	cs
 800f4f4:	4613      	movcs	r3, r2
 800f4f6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f4f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f4fc:	2114      	movs	r1, #20
 800f4fe:	200e      	movs	r0, #14
 800f500:	f7f6 fe38 	bl	8006174 <pbuf_alloc>
 800f504:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f000 80d5 	beq.w	800f6b8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	895b      	ldrh	r3, [r3, #10]
 800f512:	2b13      	cmp	r3, #19
 800f514:	d806      	bhi.n	800f524 <ip4_frag+0xd0>
 800f516:	4b6c      	ldr	r3, [pc, #432]	; (800f6c8 <ip4_frag+0x274>)
 800f518:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f51c:	496d      	ldr	r1, [pc, #436]	; (800f6d4 <ip4_frag+0x280>)
 800f51e:	486c      	ldr	r0, [pc, #432]	; (800f6d0 <ip4_frag+0x27c>)
 800f520:	f000 f9fc 	bl	800f91c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	2214      	movs	r2, #20
 800f52a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 f9df 	bl	800f8f0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f538:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f53a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f53e:	e064      	b.n	800f60a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	895a      	ldrh	r2, [r3, #10]
 800f544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	895b      	ldrh	r3, [r3, #10]
 800f54e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f550:	429a      	cmp	r2, r3
 800f552:	d906      	bls.n	800f562 <ip4_frag+0x10e>
 800f554:	4b5c      	ldr	r3, [pc, #368]	; (800f6c8 <ip4_frag+0x274>)
 800f556:	f240 322d 	movw	r2, #813	; 0x32d
 800f55a:	495f      	ldr	r1, [pc, #380]	; (800f6d8 <ip4_frag+0x284>)
 800f55c:	485c      	ldr	r0, [pc, #368]	; (800f6d0 <ip4_frag+0x27c>)
 800f55e:	f000 f9dd 	bl	800f91c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f562:	8bfa      	ldrh	r2, [r7, #30]
 800f564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f568:	4293      	cmp	r3, r2
 800f56a:	bf28      	it	cs
 800f56c:	4613      	movcs	r3, r2
 800f56e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f572:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f576:	2b00      	cmp	r3, #0
 800f578:	d105      	bne.n	800f586 <ip4_frag+0x132>
        poff = 0;
 800f57a:	2300      	movs	r3, #0
 800f57c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	60fb      	str	r3, [r7, #12]
        continue;
 800f584:	e041      	b.n	800f60a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f586:	f7ff ff0d 	bl	800f3a4 <ip_frag_alloc_pbuf_custom_ref>
 800f58a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d103      	bne.n	800f59a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f592:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f594:	f7f7 f8d2 	bl	800673c <pbuf_free>
        goto memerr;
 800f598:	e08f      	b.n	800f6ba <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f59a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f5a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f5a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f5ac:	9201      	str	r2, [sp, #4]
 800f5ae:	9300      	str	r3, [sp, #0]
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	2241      	movs	r2, #65	; 0x41
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	f7f6 ff07 	bl	80063c8 <pbuf_alloced_custom>
 800f5ba:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f5c2:	69b8      	ldr	r0, [r7, #24]
 800f5c4:	f7ff fef6 	bl	800f3b4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f5c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5ca:	f7f7 f8b7 	bl	800673c <pbuf_free>
        goto memerr;
 800f5ce:	e074      	b.n	800f6ba <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f7f7 f953 	bl	800687c <pbuf_ref>
      pcr->original = p;
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	4a3f      	ldr	r2, [pc, #252]	; (800f6dc <ip4_frag+0x288>)
 800f5e0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f5e2:	6979      	ldr	r1, [r7, #20]
 800f5e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5e6:	f7f7 f96b 	bl	80068c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f5ea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f5ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f5f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d004      	beq.n	800f60a <ip4_frag+0x1b6>
        poff = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f60a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d196      	bne.n	800f540 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f612:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f614:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f618:	4413      	add	r3, r2
 800f61a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f620:	f1a3 0213 	sub.w	r2, r3, #19
 800f624:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f628:	429a      	cmp	r2, r3
 800f62a:	bfcc      	ite	gt
 800f62c:	2301      	movgt	r3, #1
 800f62e:	2300      	movle	r3, #0
 800f630:	b2db      	uxtb	r3, r3
 800f632:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f634:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f63c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f63e:	6a3b      	ldr	r3, [r7, #32]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <ip4_frag+0x1f6>
 800f644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d003      	beq.n	800f652 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f64a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f64c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f650:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f652:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f654:	4618      	mov	r0, r3
 800f656:	f7f5 fd53 	bl	8005100 <lwip_htons>
 800f65a:	4603      	mov	r3, r0
 800f65c:	461a      	mov	r2, r3
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f662:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f664:	3314      	adds	r3, #20
 800f666:	b29b      	uxth	r3, r3
 800f668:	4618      	mov	r0, r3
 800f66a:	f7f5 fd49 	bl	8005100 <lwip_htons>
 800f66e:	4603      	mov	r3, r0
 800f670:	461a      	mov	r2, r3
 800f672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f674:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	2200      	movs	r2, #0
 800f67a:	729a      	strb	r2, [r3, #10]
 800f67c:	2200      	movs	r2, #0
 800f67e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f688:	68b8      	ldr	r0, [r7, #8]
 800f68a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f68e:	f7f7 f855 	bl	800673c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f692:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f696:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f69e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f6a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f6a4:	4413      	add	r3, r2
 800f6a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f6aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f47f af19 	bne.w	800f4e6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	e002      	b.n	800f6be <ip4_frag+0x26a>
      goto memerr;
 800f6b8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f6ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3748      	adds	r7, #72	; 0x48
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	08013658 	.word	0x08013658
 800f6cc:	08013834 	.word	0x08013834
 800f6d0:	080136a0 	.word	0x080136a0
 800f6d4:	08013850 	.word	0x08013850
 800f6d8:	08013870 	.word	0x08013870
 800f6dc:	0800f3ed 	.word	0x0800f3ed

0800f6e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f6ea:	230e      	movs	r3, #14
 800f6ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	895b      	ldrh	r3, [r3, #10]
 800f6f2:	2b0e      	cmp	r3, #14
 800f6f4:	d96e      	bls.n	800f7d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	7bdb      	ldrb	r3, [r3, #15]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d106      	bne.n	800f70c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f704:	3301      	adds	r3, #1
 800f706:	b2da      	uxtb	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	7b1a      	ldrb	r2, [r3, #12]
 800f716:	7b5b      	ldrb	r3, [r3, #13]
 800f718:	021b      	lsls	r3, r3, #8
 800f71a:	4313      	orrs	r3, r2
 800f71c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d023      	beq.n	800f772 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d10f      	bne.n	800f752 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	785b      	ldrb	r3, [r3, #1]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d11b      	bne.n	800f772 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f73e:	2b5e      	cmp	r3, #94	; 0x5e
 800f740:	d117      	bne.n	800f772 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	7b5b      	ldrb	r3, [r3, #13]
 800f746:	f043 0310 	orr.w	r3, r3, #16
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	735a      	strb	r2, [r3, #13]
 800f750:	e00f      	b.n	800f772 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2206      	movs	r2, #6
 800f756:	4928      	ldr	r1, [pc, #160]	; (800f7f8 <ethernet_input+0x118>)
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 f8bb 	bl	800f8d4 <memcmp>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d106      	bne.n	800f772 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	7b5b      	ldrb	r3, [r3, #13]
 800f768:	f043 0308 	orr.w	r3, r3, #8
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f772:	89fb      	ldrh	r3, [r7, #14]
 800f774:	2b08      	cmp	r3, #8
 800f776:	d003      	beq.n	800f780 <ethernet_input+0xa0>
 800f778:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f77c:	d014      	beq.n	800f7a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f77e:	e032      	b.n	800f7e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f786:	f003 0308 	and.w	r3, r3, #8
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d024      	beq.n	800f7d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f78e:	8afb      	ldrh	r3, [r7, #22]
 800f790:	4619      	mov	r1, r3
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f7f6 ff4c 	bl	8006630 <pbuf_remove_header>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d11e      	bne.n	800f7dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f79e:	6839      	ldr	r1, [r7, #0]
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fe ff27 	bl	800e5f4 <ip4_input>
      break;
 800f7a6:	e013      	b.n	800f7d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f7ae:	f003 0308 	and.w	r3, r3, #8
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d014      	beq.n	800f7e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f7b6:	8afb      	ldrh	r3, [r7, #22]
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7f6 ff38 	bl	8006630 <pbuf_remove_header>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10e      	bne.n	800f7e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7fe f8c7 	bl	800d95c <etharp_input>
      break;
 800f7ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	e00c      	b.n	800f7ee <ethernet_input+0x10e>
    goto free_and_return;
 800f7d4:	bf00      	nop
 800f7d6:	e006      	b.n	800f7e6 <ethernet_input+0x106>
        goto free_and_return;
 800f7d8:	bf00      	nop
 800f7da:	e004      	b.n	800f7e6 <ethernet_input+0x106>
        goto free_and_return;
 800f7dc:	bf00      	nop
 800f7de:	e002      	b.n	800f7e6 <ethernet_input+0x106>
        goto free_and_return;
 800f7e0:	bf00      	nop
 800f7e2:	e000      	b.n	800f7e6 <ethernet_input+0x106>
        goto free_and_return;
 800f7e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7f6 ffa8 	bl	800673c <pbuf_free>
  return ERR_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	08013dcc 	.word	0x08013dcc

0800f7fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
 800f808:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f80a:	8c3b      	ldrh	r3, [r7, #32]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7f5 fc77 	bl	8005100 <lwip_htons>
 800f812:	4603      	mov	r3, r0
 800f814:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f816:	210e      	movs	r1, #14
 800f818:	68b8      	ldr	r0, [r7, #8]
 800f81a:	f7f6 fef9 	bl	8006610 <pbuf_add_header>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d125      	bne.n	800f870 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	8afa      	ldrh	r2, [r7, #22]
 800f82e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	2206      	movs	r2, #6
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	4618      	mov	r0, r3
 800f838:	f000 f85a 	bl	800f8f0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	3306      	adds	r3, #6
 800f840:	2206      	movs	r2, #6
 800f842:	6879      	ldr	r1, [r7, #4]
 800f844:	4618      	mov	r0, r3
 800f846:	f000 f853 	bl	800f8f0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f850:	2b06      	cmp	r3, #6
 800f852:	d006      	beq.n	800f862 <ethernet_output+0x66>
 800f854:	4b0a      	ldr	r3, [pc, #40]	; (800f880 <ethernet_output+0x84>)
 800f856:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f85a:	490a      	ldr	r1, [pc, #40]	; (800f884 <ethernet_output+0x88>)
 800f85c:	480a      	ldr	r0, [pc, #40]	; (800f888 <ethernet_output+0x8c>)
 800f85e:	f000 f85d 	bl	800f91c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	699b      	ldr	r3, [r3, #24]
 800f866:	68b9      	ldr	r1, [r7, #8]
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	4798      	blx	r3
 800f86c:	4603      	mov	r3, r0
 800f86e:	e002      	b.n	800f876 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f870:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f872:	f06f 0301 	mvn.w	r3, #1
}
 800f876:	4618      	mov	r0, r3
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	08013880 	.word	0x08013880
 800f884:	080138b8 	.word	0x080138b8
 800f888:	080138ec 	.word	0x080138ec

0800f88c <__libc_init_array>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	4d0d      	ldr	r5, [pc, #52]	; (800f8c4 <__libc_init_array+0x38>)
 800f890:	4c0d      	ldr	r4, [pc, #52]	; (800f8c8 <__libc_init_array+0x3c>)
 800f892:	1b64      	subs	r4, r4, r5
 800f894:	10a4      	asrs	r4, r4, #2
 800f896:	2600      	movs	r6, #0
 800f898:	42a6      	cmp	r6, r4
 800f89a:	d109      	bne.n	800f8b0 <__libc_init_array+0x24>
 800f89c:	4d0b      	ldr	r5, [pc, #44]	; (800f8cc <__libc_init_array+0x40>)
 800f89e:	4c0c      	ldr	r4, [pc, #48]	; (800f8d0 <__libc_init_array+0x44>)
 800f8a0:	f001 f87e 	bl	80109a0 <_init>
 800f8a4:	1b64      	subs	r4, r4, r5
 800f8a6:	10a4      	asrs	r4, r4, #2
 800f8a8:	2600      	movs	r6, #0
 800f8aa:	42a6      	cmp	r6, r4
 800f8ac:	d105      	bne.n	800f8ba <__libc_init_array+0x2e>
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8b4:	4798      	blx	r3
 800f8b6:	3601      	adds	r6, #1
 800f8b8:	e7ee      	b.n	800f898 <__libc_init_array+0xc>
 800f8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8be:	4798      	blx	r3
 800f8c0:	3601      	adds	r6, #1
 800f8c2:	e7f2      	b.n	800f8aa <__libc_init_array+0x1e>
 800f8c4:	08013f30 	.word	0x08013f30
 800f8c8:	08013f30 	.word	0x08013f30
 800f8cc:	08013f30 	.word	0x08013f30
 800f8d0:	08013f34 	.word	0x08013f34

0800f8d4 <memcmp>:
 800f8d4:	b530      	push	{r4, r5, lr}
 800f8d6:	3901      	subs	r1, #1
 800f8d8:	2400      	movs	r4, #0
 800f8da:	42a2      	cmp	r2, r4
 800f8dc:	d101      	bne.n	800f8e2 <memcmp+0xe>
 800f8de:	2000      	movs	r0, #0
 800f8e0:	e005      	b.n	800f8ee <memcmp+0x1a>
 800f8e2:	5d03      	ldrb	r3, [r0, r4]
 800f8e4:	3401      	adds	r4, #1
 800f8e6:	5d0d      	ldrb	r5, [r1, r4]
 800f8e8:	42ab      	cmp	r3, r5
 800f8ea:	d0f6      	beq.n	800f8da <memcmp+0x6>
 800f8ec:	1b58      	subs	r0, r3, r5
 800f8ee:	bd30      	pop	{r4, r5, pc}

0800f8f0 <memcpy>:
 800f8f0:	440a      	add	r2, r1
 800f8f2:	4291      	cmp	r1, r2
 800f8f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f8f8:	d100      	bne.n	800f8fc <memcpy+0xc>
 800f8fa:	4770      	bx	lr
 800f8fc:	b510      	push	{r4, lr}
 800f8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f902:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f906:	4291      	cmp	r1, r2
 800f908:	d1f9      	bne.n	800f8fe <memcpy+0xe>
 800f90a:	bd10      	pop	{r4, pc}

0800f90c <memset>:
 800f90c:	4402      	add	r2, r0
 800f90e:	4603      	mov	r3, r0
 800f910:	4293      	cmp	r3, r2
 800f912:	d100      	bne.n	800f916 <memset+0xa>
 800f914:	4770      	bx	lr
 800f916:	f803 1b01 	strb.w	r1, [r3], #1
 800f91a:	e7f9      	b.n	800f910 <memset+0x4>

0800f91c <iprintf>:
 800f91c:	b40f      	push	{r0, r1, r2, r3}
 800f91e:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <iprintf+0x2c>)
 800f920:	b513      	push	{r0, r1, r4, lr}
 800f922:	681c      	ldr	r4, [r3, #0]
 800f924:	b124      	cbz	r4, 800f930 <iprintf+0x14>
 800f926:	69a3      	ldr	r3, [r4, #24]
 800f928:	b913      	cbnz	r3, 800f930 <iprintf+0x14>
 800f92a:	4620      	mov	r0, r4
 800f92c:	f000 f8ec 	bl	800fb08 <__sinit>
 800f930:	ab05      	add	r3, sp, #20
 800f932:	9a04      	ldr	r2, [sp, #16]
 800f934:	68a1      	ldr	r1, [r4, #8]
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 fa73 	bl	800fe24 <_vfiprintf_r>
 800f93e:	b002      	add	sp, #8
 800f940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f944:	b004      	add	sp, #16
 800f946:	4770      	bx	lr
 800f948:	20000028 	.word	0x20000028

0800f94c <rand>:
 800f94c:	4b17      	ldr	r3, [pc, #92]	; (800f9ac <rand+0x60>)
 800f94e:	b510      	push	{r4, lr}
 800f950:	681c      	ldr	r4, [r3, #0]
 800f952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f954:	b9b3      	cbnz	r3, 800f984 <rand+0x38>
 800f956:	2018      	movs	r0, #24
 800f958:	f000 f988 	bl	800fc6c <malloc>
 800f95c:	63a0      	str	r0, [r4, #56]	; 0x38
 800f95e:	b928      	cbnz	r0, 800f96c <rand+0x20>
 800f960:	4602      	mov	r2, r0
 800f962:	4b13      	ldr	r3, [pc, #76]	; (800f9b0 <rand+0x64>)
 800f964:	4813      	ldr	r0, [pc, #76]	; (800f9b4 <rand+0x68>)
 800f966:	214e      	movs	r1, #78	; 0x4e
 800f968:	f000 f858 	bl	800fa1c <__assert_func>
 800f96c:	4a12      	ldr	r2, [pc, #72]	; (800f9b8 <rand+0x6c>)
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <rand+0x70>)
 800f970:	e9c0 2300 	strd	r2, r3, [r0]
 800f974:	4b12      	ldr	r3, [pc, #72]	; (800f9c0 <rand+0x74>)
 800f976:	6083      	str	r3, [r0, #8]
 800f978:	230b      	movs	r3, #11
 800f97a:	8183      	strh	r3, [r0, #12]
 800f97c:	2201      	movs	r2, #1
 800f97e:	2300      	movs	r3, #0
 800f980:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f984:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f986:	480f      	ldr	r0, [pc, #60]	; (800f9c4 <rand+0x78>)
 800f988:	690a      	ldr	r2, [r1, #16]
 800f98a:	694b      	ldr	r3, [r1, #20]
 800f98c:	4c0e      	ldr	r4, [pc, #56]	; (800f9c8 <rand+0x7c>)
 800f98e:	4350      	muls	r0, r2
 800f990:	fb04 0003 	mla	r0, r4, r3, r0
 800f994:	fba2 3404 	umull	r3, r4, r2, r4
 800f998:	1c5a      	adds	r2, r3, #1
 800f99a:	4404      	add	r4, r0
 800f99c:	f144 0000 	adc.w	r0, r4, #0
 800f9a0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800f9a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f9a8:	bd10      	pop	{r4, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20000028 	.word	0x20000028
 800f9b0:	08013de0 	.word	0x08013de0
 800f9b4:	08013df7 	.word	0x08013df7
 800f9b8:	abcd330e 	.word	0xabcd330e
 800f9bc:	e66d1234 	.word	0xe66d1234
 800f9c0:	0005deec 	.word	0x0005deec
 800f9c4:	5851f42d 	.word	0x5851f42d
 800f9c8:	4c957f2d 	.word	0x4c957f2d

0800f9cc <strchr>:
 800f9cc:	b2c9      	uxtb	r1, r1
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9d4:	b11a      	cbz	r2, 800f9de <strchr+0x12>
 800f9d6:	428a      	cmp	r2, r1
 800f9d8:	d1f9      	bne.n	800f9ce <strchr+0x2>
 800f9da:	4618      	mov	r0, r3
 800f9dc:	4770      	bx	lr
 800f9de:	2900      	cmp	r1, #0
 800f9e0:	bf18      	it	ne
 800f9e2:	2300      	movne	r3, #0
 800f9e4:	e7f9      	b.n	800f9da <strchr+0xe>

0800f9e6 <strcpy>:
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9ec:	f803 2b01 	strb.w	r2, [r3], #1
 800f9f0:	2a00      	cmp	r2, #0
 800f9f2:	d1f9      	bne.n	800f9e8 <strcpy+0x2>
 800f9f4:	4770      	bx	lr

0800f9f6 <strncmp>:
 800f9f6:	b510      	push	{r4, lr}
 800f9f8:	b16a      	cbz	r2, 800fa16 <strncmp+0x20>
 800f9fa:	3901      	subs	r1, #1
 800f9fc:	1884      	adds	r4, r0, r2
 800f9fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fa02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d103      	bne.n	800fa12 <strncmp+0x1c>
 800fa0a:	42a0      	cmp	r0, r4
 800fa0c:	d001      	beq.n	800fa12 <strncmp+0x1c>
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1f5      	bne.n	800f9fe <strncmp+0x8>
 800fa12:	1a98      	subs	r0, r3, r2
 800fa14:	bd10      	pop	{r4, pc}
 800fa16:	4610      	mov	r0, r2
 800fa18:	e7fc      	b.n	800fa14 <strncmp+0x1e>
	...

0800fa1c <__assert_func>:
 800fa1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa1e:	4614      	mov	r4, r2
 800fa20:	461a      	mov	r2, r3
 800fa22:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <__assert_func+0x2c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4605      	mov	r5, r0
 800fa28:	68d8      	ldr	r0, [r3, #12]
 800fa2a:	b14c      	cbz	r4, 800fa40 <__assert_func+0x24>
 800fa2c:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <__assert_func+0x30>)
 800fa2e:	9100      	str	r1, [sp, #0]
 800fa30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa34:	4906      	ldr	r1, [pc, #24]	; (800fa50 <__assert_func+0x34>)
 800fa36:	462b      	mov	r3, r5
 800fa38:	f000 f8e4 	bl	800fc04 <fiprintf>
 800fa3c:	f000 fddc 	bl	80105f8 <abort>
 800fa40:	4b04      	ldr	r3, [pc, #16]	; (800fa54 <__assert_func+0x38>)
 800fa42:	461c      	mov	r4, r3
 800fa44:	e7f3      	b.n	800fa2e <__assert_func+0x12>
 800fa46:	bf00      	nop
 800fa48:	20000028 	.word	0x20000028
 800fa4c:	08013e56 	.word	0x08013e56
 800fa50:	08013e63 	.word	0x08013e63
 800fa54:	08013e91 	.word	0x08013e91

0800fa58 <std>:
 800fa58:	2300      	movs	r3, #0
 800fa5a:	b510      	push	{r4, lr}
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	e9c0 3300 	strd	r3, r3, [r0]
 800fa62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa66:	6083      	str	r3, [r0, #8]
 800fa68:	8181      	strh	r1, [r0, #12]
 800fa6a:	6643      	str	r3, [r0, #100]	; 0x64
 800fa6c:	81c2      	strh	r2, [r0, #14]
 800fa6e:	6183      	str	r3, [r0, #24]
 800fa70:	4619      	mov	r1, r3
 800fa72:	2208      	movs	r2, #8
 800fa74:	305c      	adds	r0, #92	; 0x5c
 800fa76:	f7ff ff49 	bl	800f90c <memset>
 800fa7a:	4b05      	ldr	r3, [pc, #20]	; (800fa90 <std+0x38>)
 800fa7c:	6263      	str	r3, [r4, #36]	; 0x24
 800fa7e:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <std+0x3c>)
 800fa80:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa82:	4b05      	ldr	r3, [pc, #20]	; (800fa98 <std+0x40>)
 800fa84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa86:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <std+0x44>)
 800fa88:	6224      	str	r4, [r4, #32]
 800fa8a:	6323      	str	r3, [r4, #48]	; 0x30
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	bf00      	nop
 800fa90:	080103cd 	.word	0x080103cd
 800fa94:	080103ef 	.word	0x080103ef
 800fa98:	08010427 	.word	0x08010427
 800fa9c:	0801044b 	.word	0x0801044b

0800faa0 <_cleanup_r>:
 800faa0:	4901      	ldr	r1, [pc, #4]	; (800faa8 <_cleanup_r+0x8>)
 800faa2:	f000 b8c1 	b.w	800fc28 <_fwalk_reent>
 800faa6:	bf00      	nop
 800faa8:	08010735 	.word	0x08010735

0800faac <__sfmoreglue>:
 800faac:	b570      	push	{r4, r5, r6, lr}
 800faae:	1e4a      	subs	r2, r1, #1
 800fab0:	2568      	movs	r5, #104	; 0x68
 800fab2:	4355      	muls	r5, r2
 800fab4:	460e      	mov	r6, r1
 800fab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800faba:	f000 f92f 	bl	800fd1c <_malloc_r>
 800fabe:	4604      	mov	r4, r0
 800fac0:	b140      	cbz	r0, 800fad4 <__sfmoreglue+0x28>
 800fac2:	2100      	movs	r1, #0
 800fac4:	e9c0 1600 	strd	r1, r6, [r0]
 800fac8:	300c      	adds	r0, #12
 800faca:	60a0      	str	r0, [r4, #8]
 800facc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fad0:	f7ff ff1c 	bl	800f90c <memset>
 800fad4:	4620      	mov	r0, r4
 800fad6:	bd70      	pop	{r4, r5, r6, pc}

0800fad8 <__sfp_lock_acquire>:
 800fad8:	4801      	ldr	r0, [pc, #4]	; (800fae0 <__sfp_lock_acquire+0x8>)
 800fada:	f000 b8c5 	b.w	800fc68 <__retarget_lock_acquire_recursive>
 800fade:	bf00      	nop
 800fae0:	20006d30 	.word	0x20006d30

0800fae4 <__sfp_lock_release>:
 800fae4:	4801      	ldr	r0, [pc, #4]	; (800faec <__sfp_lock_release+0x8>)
 800fae6:	f000 b8c0 	b.w	800fc6a <__retarget_lock_release_recursive>
 800faea:	bf00      	nop
 800faec:	20006d30 	.word	0x20006d30

0800faf0 <__sinit_lock_acquire>:
 800faf0:	4801      	ldr	r0, [pc, #4]	; (800faf8 <__sinit_lock_acquire+0x8>)
 800faf2:	f000 b8b9 	b.w	800fc68 <__retarget_lock_acquire_recursive>
 800faf6:	bf00      	nop
 800faf8:	20006d2b 	.word	0x20006d2b

0800fafc <__sinit_lock_release>:
 800fafc:	4801      	ldr	r0, [pc, #4]	; (800fb04 <__sinit_lock_release+0x8>)
 800fafe:	f000 b8b4 	b.w	800fc6a <__retarget_lock_release_recursive>
 800fb02:	bf00      	nop
 800fb04:	20006d2b 	.word	0x20006d2b

0800fb08 <__sinit>:
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	f7ff fff0 	bl	800faf0 <__sinit_lock_acquire>
 800fb10:	69a3      	ldr	r3, [r4, #24]
 800fb12:	b11b      	cbz	r3, 800fb1c <__sinit+0x14>
 800fb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb18:	f7ff bff0 	b.w	800fafc <__sinit_lock_release>
 800fb1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fb20:	6523      	str	r3, [r4, #80]	; 0x50
 800fb22:	4b13      	ldr	r3, [pc, #76]	; (800fb70 <__sinit+0x68>)
 800fb24:	4a13      	ldr	r2, [pc, #76]	; (800fb74 <__sinit+0x6c>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb2a:	42a3      	cmp	r3, r4
 800fb2c:	bf04      	itt	eq
 800fb2e:	2301      	moveq	r3, #1
 800fb30:	61a3      	streq	r3, [r4, #24]
 800fb32:	4620      	mov	r0, r4
 800fb34:	f000 f820 	bl	800fb78 <__sfp>
 800fb38:	6060      	str	r0, [r4, #4]
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f000 f81c 	bl	800fb78 <__sfp>
 800fb40:	60a0      	str	r0, [r4, #8]
 800fb42:	4620      	mov	r0, r4
 800fb44:	f000 f818 	bl	800fb78 <__sfp>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	60e0      	str	r0, [r4, #12]
 800fb4c:	2104      	movs	r1, #4
 800fb4e:	6860      	ldr	r0, [r4, #4]
 800fb50:	f7ff ff82 	bl	800fa58 <std>
 800fb54:	68a0      	ldr	r0, [r4, #8]
 800fb56:	2201      	movs	r2, #1
 800fb58:	2109      	movs	r1, #9
 800fb5a:	f7ff ff7d 	bl	800fa58 <std>
 800fb5e:	68e0      	ldr	r0, [r4, #12]
 800fb60:	2202      	movs	r2, #2
 800fb62:	2112      	movs	r1, #18
 800fb64:	f7ff ff78 	bl	800fa58 <std>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	61a3      	str	r3, [r4, #24]
 800fb6c:	e7d2      	b.n	800fb14 <__sinit+0xc>
 800fb6e:	bf00      	nop
 800fb70:	08013ddc 	.word	0x08013ddc
 800fb74:	0800faa1 	.word	0x0800faa1

0800fb78 <__sfp>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	f7ff ffac 	bl	800fad8 <__sfp_lock_acquire>
 800fb80:	4b1e      	ldr	r3, [pc, #120]	; (800fbfc <__sfp+0x84>)
 800fb82:	681e      	ldr	r6, [r3, #0]
 800fb84:	69b3      	ldr	r3, [r6, #24]
 800fb86:	b913      	cbnz	r3, 800fb8e <__sfp+0x16>
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f7ff ffbd 	bl	800fb08 <__sinit>
 800fb8e:	3648      	adds	r6, #72	; 0x48
 800fb90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	d503      	bpl.n	800fba0 <__sfp+0x28>
 800fb98:	6833      	ldr	r3, [r6, #0]
 800fb9a:	b30b      	cbz	r3, 800fbe0 <__sfp+0x68>
 800fb9c:	6836      	ldr	r6, [r6, #0]
 800fb9e:	e7f7      	b.n	800fb90 <__sfp+0x18>
 800fba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fba4:	b9d5      	cbnz	r5, 800fbdc <__sfp+0x64>
 800fba6:	4b16      	ldr	r3, [pc, #88]	; (800fc00 <__sfp+0x88>)
 800fba8:	60e3      	str	r3, [r4, #12]
 800fbaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fbae:	6665      	str	r5, [r4, #100]	; 0x64
 800fbb0:	f000 f859 	bl	800fc66 <__retarget_lock_init_recursive>
 800fbb4:	f7ff ff96 	bl	800fae4 <__sfp_lock_release>
 800fbb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fbbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fbc0:	6025      	str	r5, [r4, #0]
 800fbc2:	61a5      	str	r5, [r4, #24]
 800fbc4:	2208      	movs	r2, #8
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fbcc:	f7ff fe9e 	bl	800f90c <memset>
 800fbd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fbd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fbd8:	4620      	mov	r0, r4
 800fbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbdc:	3468      	adds	r4, #104	; 0x68
 800fbde:	e7d9      	b.n	800fb94 <__sfp+0x1c>
 800fbe0:	2104      	movs	r1, #4
 800fbe2:	4638      	mov	r0, r7
 800fbe4:	f7ff ff62 	bl	800faac <__sfmoreglue>
 800fbe8:	4604      	mov	r4, r0
 800fbea:	6030      	str	r0, [r6, #0]
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d1d5      	bne.n	800fb9c <__sfp+0x24>
 800fbf0:	f7ff ff78 	bl	800fae4 <__sfp_lock_release>
 800fbf4:	230c      	movs	r3, #12
 800fbf6:	603b      	str	r3, [r7, #0]
 800fbf8:	e7ee      	b.n	800fbd8 <__sfp+0x60>
 800fbfa:	bf00      	nop
 800fbfc:	08013ddc 	.word	0x08013ddc
 800fc00:	ffff0001 	.word	0xffff0001

0800fc04 <fiprintf>:
 800fc04:	b40e      	push	{r1, r2, r3}
 800fc06:	b503      	push	{r0, r1, lr}
 800fc08:	4601      	mov	r1, r0
 800fc0a:	ab03      	add	r3, sp, #12
 800fc0c:	4805      	ldr	r0, [pc, #20]	; (800fc24 <fiprintf+0x20>)
 800fc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc12:	6800      	ldr	r0, [r0, #0]
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	f000 f905 	bl	800fe24 <_vfiprintf_r>
 800fc1a:	b002      	add	sp, #8
 800fc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc20:	b003      	add	sp, #12
 800fc22:	4770      	bx	lr
 800fc24:	20000028 	.word	0x20000028

0800fc28 <_fwalk_reent>:
 800fc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	4688      	mov	r8, r1
 800fc30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc34:	2700      	movs	r7, #0
 800fc36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc3a:	f1b9 0901 	subs.w	r9, r9, #1
 800fc3e:	d505      	bpl.n	800fc4c <_fwalk_reent+0x24>
 800fc40:	6824      	ldr	r4, [r4, #0]
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	d1f7      	bne.n	800fc36 <_fwalk_reent+0xe>
 800fc46:	4638      	mov	r0, r7
 800fc48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc4c:	89ab      	ldrh	r3, [r5, #12]
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d907      	bls.n	800fc62 <_fwalk_reent+0x3a>
 800fc52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc56:	3301      	adds	r3, #1
 800fc58:	d003      	beq.n	800fc62 <_fwalk_reent+0x3a>
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	47c0      	blx	r8
 800fc60:	4307      	orrs	r7, r0
 800fc62:	3568      	adds	r5, #104	; 0x68
 800fc64:	e7e9      	b.n	800fc3a <_fwalk_reent+0x12>

0800fc66 <__retarget_lock_init_recursive>:
 800fc66:	4770      	bx	lr

0800fc68 <__retarget_lock_acquire_recursive>:
 800fc68:	4770      	bx	lr

0800fc6a <__retarget_lock_release_recursive>:
 800fc6a:	4770      	bx	lr

0800fc6c <malloc>:
 800fc6c:	4b02      	ldr	r3, [pc, #8]	; (800fc78 <malloc+0xc>)
 800fc6e:	4601      	mov	r1, r0
 800fc70:	6818      	ldr	r0, [r3, #0]
 800fc72:	f000 b853 	b.w	800fd1c <_malloc_r>
 800fc76:	bf00      	nop
 800fc78:	20000028 	.word	0x20000028

0800fc7c <_free_r>:
 800fc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc7e:	2900      	cmp	r1, #0
 800fc80:	d048      	beq.n	800fd14 <_free_r+0x98>
 800fc82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc86:	9001      	str	r0, [sp, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f1a1 0404 	sub.w	r4, r1, #4
 800fc8e:	bfb8      	it	lt
 800fc90:	18e4      	addlt	r4, r4, r3
 800fc92:	f000 fe01 	bl	8010898 <__malloc_lock>
 800fc96:	4a20      	ldr	r2, [pc, #128]	; (800fd18 <_free_r+0x9c>)
 800fc98:	9801      	ldr	r0, [sp, #4]
 800fc9a:	6813      	ldr	r3, [r2, #0]
 800fc9c:	4615      	mov	r5, r2
 800fc9e:	b933      	cbnz	r3, 800fcae <_free_r+0x32>
 800fca0:	6063      	str	r3, [r4, #4]
 800fca2:	6014      	str	r4, [r2, #0]
 800fca4:	b003      	add	sp, #12
 800fca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcaa:	f000 bdfb 	b.w	80108a4 <__malloc_unlock>
 800fcae:	42a3      	cmp	r3, r4
 800fcb0:	d90b      	bls.n	800fcca <_free_r+0x4e>
 800fcb2:	6821      	ldr	r1, [r4, #0]
 800fcb4:	1862      	adds	r2, r4, r1
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	bf04      	itt	eq
 800fcba:	681a      	ldreq	r2, [r3, #0]
 800fcbc:	685b      	ldreq	r3, [r3, #4]
 800fcbe:	6063      	str	r3, [r4, #4]
 800fcc0:	bf04      	itt	eq
 800fcc2:	1852      	addeq	r2, r2, r1
 800fcc4:	6022      	streq	r2, [r4, #0]
 800fcc6:	602c      	str	r4, [r5, #0]
 800fcc8:	e7ec      	b.n	800fca4 <_free_r+0x28>
 800fcca:	461a      	mov	r2, r3
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	b10b      	cbz	r3, 800fcd4 <_free_r+0x58>
 800fcd0:	42a3      	cmp	r3, r4
 800fcd2:	d9fa      	bls.n	800fcca <_free_r+0x4e>
 800fcd4:	6811      	ldr	r1, [r2, #0]
 800fcd6:	1855      	adds	r5, r2, r1
 800fcd8:	42a5      	cmp	r5, r4
 800fcda:	d10b      	bne.n	800fcf4 <_free_r+0x78>
 800fcdc:	6824      	ldr	r4, [r4, #0]
 800fcde:	4421      	add	r1, r4
 800fce0:	1854      	adds	r4, r2, r1
 800fce2:	42a3      	cmp	r3, r4
 800fce4:	6011      	str	r1, [r2, #0]
 800fce6:	d1dd      	bne.n	800fca4 <_free_r+0x28>
 800fce8:	681c      	ldr	r4, [r3, #0]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	6053      	str	r3, [r2, #4]
 800fcee:	4421      	add	r1, r4
 800fcf0:	6011      	str	r1, [r2, #0]
 800fcf2:	e7d7      	b.n	800fca4 <_free_r+0x28>
 800fcf4:	d902      	bls.n	800fcfc <_free_r+0x80>
 800fcf6:	230c      	movs	r3, #12
 800fcf8:	6003      	str	r3, [r0, #0]
 800fcfa:	e7d3      	b.n	800fca4 <_free_r+0x28>
 800fcfc:	6825      	ldr	r5, [r4, #0]
 800fcfe:	1961      	adds	r1, r4, r5
 800fd00:	428b      	cmp	r3, r1
 800fd02:	bf04      	itt	eq
 800fd04:	6819      	ldreq	r1, [r3, #0]
 800fd06:	685b      	ldreq	r3, [r3, #4]
 800fd08:	6063      	str	r3, [r4, #4]
 800fd0a:	bf04      	itt	eq
 800fd0c:	1949      	addeq	r1, r1, r5
 800fd0e:	6021      	streq	r1, [r4, #0]
 800fd10:	6054      	str	r4, [r2, #4]
 800fd12:	e7c7      	b.n	800fca4 <_free_r+0x28>
 800fd14:	b003      	add	sp, #12
 800fd16:	bd30      	pop	{r4, r5, pc}
 800fd18:	2000067c 	.word	0x2000067c

0800fd1c <_malloc_r>:
 800fd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd1e:	1ccd      	adds	r5, r1, #3
 800fd20:	f025 0503 	bic.w	r5, r5, #3
 800fd24:	3508      	adds	r5, #8
 800fd26:	2d0c      	cmp	r5, #12
 800fd28:	bf38      	it	cc
 800fd2a:	250c      	movcc	r5, #12
 800fd2c:	2d00      	cmp	r5, #0
 800fd2e:	4606      	mov	r6, r0
 800fd30:	db01      	blt.n	800fd36 <_malloc_r+0x1a>
 800fd32:	42a9      	cmp	r1, r5
 800fd34:	d903      	bls.n	800fd3e <_malloc_r+0x22>
 800fd36:	230c      	movs	r3, #12
 800fd38:	6033      	str	r3, [r6, #0]
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd3e:	f000 fdab 	bl	8010898 <__malloc_lock>
 800fd42:	4921      	ldr	r1, [pc, #132]	; (800fdc8 <_malloc_r+0xac>)
 800fd44:	680a      	ldr	r2, [r1, #0]
 800fd46:	4614      	mov	r4, r2
 800fd48:	b99c      	cbnz	r4, 800fd72 <_malloc_r+0x56>
 800fd4a:	4f20      	ldr	r7, [pc, #128]	; (800fdcc <_malloc_r+0xb0>)
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	b923      	cbnz	r3, 800fd5a <_malloc_r+0x3e>
 800fd50:	4621      	mov	r1, r4
 800fd52:	4630      	mov	r0, r6
 800fd54:	f000 fb2a 	bl	80103ac <_sbrk_r>
 800fd58:	6038      	str	r0, [r7, #0]
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	f000 fb25 	bl	80103ac <_sbrk_r>
 800fd62:	1c43      	adds	r3, r0, #1
 800fd64:	d123      	bne.n	800fdae <_malloc_r+0x92>
 800fd66:	230c      	movs	r3, #12
 800fd68:	6033      	str	r3, [r6, #0]
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f000 fd9a 	bl	80108a4 <__malloc_unlock>
 800fd70:	e7e3      	b.n	800fd3a <_malloc_r+0x1e>
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	1b5b      	subs	r3, r3, r5
 800fd76:	d417      	bmi.n	800fda8 <_malloc_r+0x8c>
 800fd78:	2b0b      	cmp	r3, #11
 800fd7a:	d903      	bls.n	800fd84 <_malloc_r+0x68>
 800fd7c:	6023      	str	r3, [r4, #0]
 800fd7e:	441c      	add	r4, r3
 800fd80:	6025      	str	r5, [r4, #0]
 800fd82:	e004      	b.n	800fd8e <_malloc_r+0x72>
 800fd84:	6863      	ldr	r3, [r4, #4]
 800fd86:	42a2      	cmp	r2, r4
 800fd88:	bf0c      	ite	eq
 800fd8a:	600b      	streq	r3, [r1, #0]
 800fd8c:	6053      	strne	r3, [r2, #4]
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 fd88 	bl	80108a4 <__malloc_unlock>
 800fd94:	f104 000b 	add.w	r0, r4, #11
 800fd98:	1d23      	adds	r3, r4, #4
 800fd9a:	f020 0007 	bic.w	r0, r0, #7
 800fd9e:	1ac2      	subs	r2, r0, r3
 800fda0:	d0cc      	beq.n	800fd3c <_malloc_r+0x20>
 800fda2:	1a1b      	subs	r3, r3, r0
 800fda4:	50a3      	str	r3, [r4, r2]
 800fda6:	e7c9      	b.n	800fd3c <_malloc_r+0x20>
 800fda8:	4622      	mov	r2, r4
 800fdaa:	6864      	ldr	r4, [r4, #4]
 800fdac:	e7cc      	b.n	800fd48 <_malloc_r+0x2c>
 800fdae:	1cc4      	adds	r4, r0, #3
 800fdb0:	f024 0403 	bic.w	r4, r4, #3
 800fdb4:	42a0      	cmp	r0, r4
 800fdb6:	d0e3      	beq.n	800fd80 <_malloc_r+0x64>
 800fdb8:	1a21      	subs	r1, r4, r0
 800fdba:	4630      	mov	r0, r6
 800fdbc:	f000 faf6 	bl	80103ac <_sbrk_r>
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d1dd      	bne.n	800fd80 <_malloc_r+0x64>
 800fdc4:	e7cf      	b.n	800fd66 <_malloc_r+0x4a>
 800fdc6:	bf00      	nop
 800fdc8:	2000067c 	.word	0x2000067c
 800fdcc:	20000680 	.word	0x20000680

0800fdd0 <__sfputc_r>:
 800fdd0:	6893      	ldr	r3, [r2, #8]
 800fdd2:	3b01      	subs	r3, #1
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	b410      	push	{r4}
 800fdd8:	6093      	str	r3, [r2, #8]
 800fdda:	da08      	bge.n	800fdee <__sfputc_r+0x1e>
 800fddc:	6994      	ldr	r4, [r2, #24]
 800fdde:	42a3      	cmp	r3, r4
 800fde0:	db01      	blt.n	800fde6 <__sfputc_r+0x16>
 800fde2:	290a      	cmp	r1, #10
 800fde4:	d103      	bne.n	800fdee <__sfputc_r+0x1e>
 800fde6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdea:	f000 bb33 	b.w	8010454 <__swbuf_r>
 800fdee:	6813      	ldr	r3, [r2, #0]
 800fdf0:	1c58      	adds	r0, r3, #1
 800fdf2:	6010      	str	r0, [r2, #0]
 800fdf4:	7019      	strb	r1, [r3, #0]
 800fdf6:	4608      	mov	r0, r1
 800fdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <__sfputs_r>:
 800fdfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe00:	4606      	mov	r6, r0
 800fe02:	460f      	mov	r7, r1
 800fe04:	4614      	mov	r4, r2
 800fe06:	18d5      	adds	r5, r2, r3
 800fe08:	42ac      	cmp	r4, r5
 800fe0a:	d101      	bne.n	800fe10 <__sfputs_r+0x12>
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	e007      	b.n	800fe20 <__sfputs_r+0x22>
 800fe10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe14:	463a      	mov	r2, r7
 800fe16:	4630      	mov	r0, r6
 800fe18:	f7ff ffda 	bl	800fdd0 <__sfputc_r>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d1f3      	bne.n	800fe08 <__sfputs_r+0xa>
 800fe20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe24 <_vfiprintf_r>:
 800fe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe28:	460d      	mov	r5, r1
 800fe2a:	b09d      	sub	sp, #116	; 0x74
 800fe2c:	4614      	mov	r4, r2
 800fe2e:	4698      	mov	r8, r3
 800fe30:	4606      	mov	r6, r0
 800fe32:	b118      	cbz	r0, 800fe3c <_vfiprintf_r+0x18>
 800fe34:	6983      	ldr	r3, [r0, #24]
 800fe36:	b90b      	cbnz	r3, 800fe3c <_vfiprintf_r+0x18>
 800fe38:	f7ff fe66 	bl	800fb08 <__sinit>
 800fe3c:	4b89      	ldr	r3, [pc, #548]	; (8010064 <_vfiprintf_r+0x240>)
 800fe3e:	429d      	cmp	r5, r3
 800fe40:	d11b      	bne.n	800fe7a <_vfiprintf_r+0x56>
 800fe42:	6875      	ldr	r5, [r6, #4]
 800fe44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe46:	07d9      	lsls	r1, r3, #31
 800fe48:	d405      	bmi.n	800fe56 <_vfiprintf_r+0x32>
 800fe4a:	89ab      	ldrh	r3, [r5, #12]
 800fe4c:	059a      	lsls	r2, r3, #22
 800fe4e:	d402      	bmi.n	800fe56 <_vfiprintf_r+0x32>
 800fe50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe52:	f7ff ff09 	bl	800fc68 <__retarget_lock_acquire_recursive>
 800fe56:	89ab      	ldrh	r3, [r5, #12]
 800fe58:	071b      	lsls	r3, r3, #28
 800fe5a:	d501      	bpl.n	800fe60 <_vfiprintf_r+0x3c>
 800fe5c:	692b      	ldr	r3, [r5, #16]
 800fe5e:	b9eb      	cbnz	r3, 800fe9c <_vfiprintf_r+0x78>
 800fe60:	4629      	mov	r1, r5
 800fe62:	4630      	mov	r0, r6
 800fe64:	f000 fb5a 	bl	801051c <__swsetup_r>
 800fe68:	b1c0      	cbz	r0, 800fe9c <_vfiprintf_r+0x78>
 800fe6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe6c:	07dc      	lsls	r4, r3, #31
 800fe6e:	d50e      	bpl.n	800fe8e <_vfiprintf_r+0x6a>
 800fe70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe74:	b01d      	add	sp, #116	; 0x74
 800fe76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe7a:	4b7b      	ldr	r3, [pc, #492]	; (8010068 <_vfiprintf_r+0x244>)
 800fe7c:	429d      	cmp	r5, r3
 800fe7e:	d101      	bne.n	800fe84 <_vfiprintf_r+0x60>
 800fe80:	68b5      	ldr	r5, [r6, #8]
 800fe82:	e7df      	b.n	800fe44 <_vfiprintf_r+0x20>
 800fe84:	4b79      	ldr	r3, [pc, #484]	; (801006c <_vfiprintf_r+0x248>)
 800fe86:	429d      	cmp	r5, r3
 800fe88:	bf08      	it	eq
 800fe8a:	68f5      	ldreq	r5, [r6, #12]
 800fe8c:	e7da      	b.n	800fe44 <_vfiprintf_r+0x20>
 800fe8e:	89ab      	ldrh	r3, [r5, #12]
 800fe90:	0598      	lsls	r0, r3, #22
 800fe92:	d4ed      	bmi.n	800fe70 <_vfiprintf_r+0x4c>
 800fe94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe96:	f7ff fee8 	bl	800fc6a <__retarget_lock_release_recursive>
 800fe9a:	e7e9      	b.n	800fe70 <_vfiprintf_r+0x4c>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	9309      	str	r3, [sp, #36]	; 0x24
 800fea0:	2320      	movs	r3, #32
 800fea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fea6:	f8cd 800c 	str.w	r8, [sp, #12]
 800feaa:	2330      	movs	r3, #48	; 0x30
 800feac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010070 <_vfiprintf_r+0x24c>
 800feb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feb4:	f04f 0901 	mov.w	r9, #1
 800feb8:	4623      	mov	r3, r4
 800feba:	469a      	mov	sl, r3
 800febc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fec0:	b10a      	cbz	r2, 800fec6 <_vfiprintf_r+0xa2>
 800fec2:	2a25      	cmp	r2, #37	; 0x25
 800fec4:	d1f9      	bne.n	800feba <_vfiprintf_r+0x96>
 800fec6:	ebba 0b04 	subs.w	fp, sl, r4
 800feca:	d00b      	beq.n	800fee4 <_vfiprintf_r+0xc0>
 800fecc:	465b      	mov	r3, fp
 800fece:	4622      	mov	r2, r4
 800fed0:	4629      	mov	r1, r5
 800fed2:	4630      	mov	r0, r6
 800fed4:	f7ff ff93 	bl	800fdfe <__sfputs_r>
 800fed8:	3001      	adds	r0, #1
 800feda:	f000 80aa 	beq.w	8010032 <_vfiprintf_r+0x20e>
 800fede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fee0:	445a      	add	r2, fp
 800fee2:	9209      	str	r2, [sp, #36]	; 0x24
 800fee4:	f89a 3000 	ldrb.w	r3, [sl]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 80a2 	beq.w	8010032 <_vfiprintf_r+0x20e>
 800feee:	2300      	movs	r3, #0
 800fef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fef8:	f10a 0a01 	add.w	sl, sl, #1
 800fefc:	9304      	str	r3, [sp, #16]
 800fefe:	9307      	str	r3, [sp, #28]
 800ff00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff04:	931a      	str	r3, [sp, #104]	; 0x68
 800ff06:	4654      	mov	r4, sl
 800ff08:	2205      	movs	r2, #5
 800ff0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff0e:	4858      	ldr	r0, [pc, #352]	; (8010070 <_vfiprintf_r+0x24c>)
 800ff10:	f7f0 f976 	bl	8000200 <memchr>
 800ff14:	9a04      	ldr	r2, [sp, #16]
 800ff16:	b9d8      	cbnz	r0, 800ff50 <_vfiprintf_r+0x12c>
 800ff18:	06d1      	lsls	r1, r2, #27
 800ff1a:	bf44      	itt	mi
 800ff1c:	2320      	movmi	r3, #32
 800ff1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff22:	0713      	lsls	r3, r2, #28
 800ff24:	bf44      	itt	mi
 800ff26:	232b      	movmi	r3, #43	; 0x2b
 800ff28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ff30:	2b2a      	cmp	r3, #42	; 0x2a
 800ff32:	d015      	beq.n	800ff60 <_vfiprintf_r+0x13c>
 800ff34:	9a07      	ldr	r2, [sp, #28]
 800ff36:	4654      	mov	r4, sl
 800ff38:	2000      	movs	r0, #0
 800ff3a:	f04f 0c0a 	mov.w	ip, #10
 800ff3e:	4621      	mov	r1, r4
 800ff40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff44:	3b30      	subs	r3, #48	; 0x30
 800ff46:	2b09      	cmp	r3, #9
 800ff48:	d94e      	bls.n	800ffe8 <_vfiprintf_r+0x1c4>
 800ff4a:	b1b0      	cbz	r0, 800ff7a <_vfiprintf_r+0x156>
 800ff4c:	9207      	str	r2, [sp, #28]
 800ff4e:	e014      	b.n	800ff7a <_vfiprintf_r+0x156>
 800ff50:	eba0 0308 	sub.w	r3, r0, r8
 800ff54:	fa09 f303 	lsl.w	r3, r9, r3
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	9304      	str	r3, [sp, #16]
 800ff5c:	46a2      	mov	sl, r4
 800ff5e:	e7d2      	b.n	800ff06 <_vfiprintf_r+0xe2>
 800ff60:	9b03      	ldr	r3, [sp, #12]
 800ff62:	1d19      	adds	r1, r3, #4
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	9103      	str	r1, [sp, #12]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	bfbb      	ittet	lt
 800ff6c:	425b      	neglt	r3, r3
 800ff6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ff72:	9307      	strge	r3, [sp, #28]
 800ff74:	9307      	strlt	r3, [sp, #28]
 800ff76:	bfb8      	it	lt
 800ff78:	9204      	strlt	r2, [sp, #16]
 800ff7a:	7823      	ldrb	r3, [r4, #0]
 800ff7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ff7e:	d10c      	bne.n	800ff9a <_vfiprintf_r+0x176>
 800ff80:	7863      	ldrb	r3, [r4, #1]
 800ff82:	2b2a      	cmp	r3, #42	; 0x2a
 800ff84:	d135      	bne.n	800fff2 <_vfiprintf_r+0x1ce>
 800ff86:	9b03      	ldr	r3, [sp, #12]
 800ff88:	1d1a      	adds	r2, r3, #4
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	9203      	str	r2, [sp, #12]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	bfb8      	it	lt
 800ff92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ff96:	3402      	adds	r4, #2
 800ff98:	9305      	str	r3, [sp, #20]
 800ff9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010080 <_vfiprintf_r+0x25c>
 800ff9e:	7821      	ldrb	r1, [r4, #0]
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	4650      	mov	r0, sl
 800ffa4:	f7f0 f92c 	bl	8000200 <memchr>
 800ffa8:	b140      	cbz	r0, 800ffbc <_vfiprintf_r+0x198>
 800ffaa:	2340      	movs	r3, #64	; 0x40
 800ffac:	eba0 000a 	sub.w	r0, r0, sl
 800ffb0:	fa03 f000 	lsl.w	r0, r3, r0
 800ffb4:	9b04      	ldr	r3, [sp, #16]
 800ffb6:	4303      	orrs	r3, r0
 800ffb8:	3401      	adds	r4, #1
 800ffba:	9304      	str	r3, [sp, #16]
 800ffbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc0:	482c      	ldr	r0, [pc, #176]	; (8010074 <_vfiprintf_r+0x250>)
 800ffc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffc6:	2206      	movs	r2, #6
 800ffc8:	f7f0 f91a 	bl	8000200 <memchr>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d03f      	beq.n	8010050 <_vfiprintf_r+0x22c>
 800ffd0:	4b29      	ldr	r3, [pc, #164]	; (8010078 <_vfiprintf_r+0x254>)
 800ffd2:	bb1b      	cbnz	r3, 801001c <_vfiprintf_r+0x1f8>
 800ffd4:	9b03      	ldr	r3, [sp, #12]
 800ffd6:	3307      	adds	r3, #7
 800ffd8:	f023 0307 	bic.w	r3, r3, #7
 800ffdc:	3308      	adds	r3, #8
 800ffde:	9303      	str	r3, [sp, #12]
 800ffe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe2:	443b      	add	r3, r7
 800ffe4:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe6:	e767      	b.n	800feb8 <_vfiprintf_r+0x94>
 800ffe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffec:	460c      	mov	r4, r1
 800ffee:	2001      	movs	r0, #1
 800fff0:	e7a5      	b.n	800ff3e <_vfiprintf_r+0x11a>
 800fff2:	2300      	movs	r3, #0
 800fff4:	3401      	adds	r4, #1
 800fff6:	9305      	str	r3, [sp, #20]
 800fff8:	4619      	mov	r1, r3
 800fffa:	f04f 0c0a 	mov.w	ip, #10
 800fffe:	4620      	mov	r0, r4
 8010000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010004:	3a30      	subs	r2, #48	; 0x30
 8010006:	2a09      	cmp	r2, #9
 8010008:	d903      	bls.n	8010012 <_vfiprintf_r+0x1ee>
 801000a:	2b00      	cmp	r3, #0
 801000c:	d0c5      	beq.n	800ff9a <_vfiprintf_r+0x176>
 801000e:	9105      	str	r1, [sp, #20]
 8010010:	e7c3      	b.n	800ff9a <_vfiprintf_r+0x176>
 8010012:	fb0c 2101 	mla	r1, ip, r1, r2
 8010016:	4604      	mov	r4, r0
 8010018:	2301      	movs	r3, #1
 801001a:	e7f0      	b.n	800fffe <_vfiprintf_r+0x1da>
 801001c:	ab03      	add	r3, sp, #12
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	462a      	mov	r2, r5
 8010022:	4b16      	ldr	r3, [pc, #88]	; (801007c <_vfiprintf_r+0x258>)
 8010024:	a904      	add	r1, sp, #16
 8010026:	4630      	mov	r0, r6
 8010028:	f3af 8000 	nop.w
 801002c:	4607      	mov	r7, r0
 801002e:	1c78      	adds	r0, r7, #1
 8010030:	d1d6      	bne.n	800ffe0 <_vfiprintf_r+0x1bc>
 8010032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010034:	07d9      	lsls	r1, r3, #31
 8010036:	d405      	bmi.n	8010044 <_vfiprintf_r+0x220>
 8010038:	89ab      	ldrh	r3, [r5, #12]
 801003a:	059a      	lsls	r2, r3, #22
 801003c:	d402      	bmi.n	8010044 <_vfiprintf_r+0x220>
 801003e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010040:	f7ff fe13 	bl	800fc6a <__retarget_lock_release_recursive>
 8010044:	89ab      	ldrh	r3, [r5, #12]
 8010046:	065b      	lsls	r3, r3, #25
 8010048:	f53f af12 	bmi.w	800fe70 <_vfiprintf_r+0x4c>
 801004c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801004e:	e711      	b.n	800fe74 <_vfiprintf_r+0x50>
 8010050:	ab03      	add	r3, sp, #12
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	462a      	mov	r2, r5
 8010056:	4b09      	ldr	r3, [pc, #36]	; (801007c <_vfiprintf_r+0x258>)
 8010058:	a904      	add	r1, sp, #16
 801005a:	4630      	mov	r0, r6
 801005c:	f000 f880 	bl	8010160 <_printf_i>
 8010060:	e7e4      	b.n	801002c <_vfiprintf_r+0x208>
 8010062:	bf00      	nop
 8010064:	08013eb4 	.word	0x08013eb4
 8010068:	08013ed4 	.word	0x08013ed4
 801006c:	08013e94 	.word	0x08013e94
 8010070:	08013ef4 	.word	0x08013ef4
 8010074:	08013efe 	.word	0x08013efe
 8010078:	00000000 	.word	0x00000000
 801007c:	0800fdff 	.word	0x0800fdff
 8010080:	08013efa 	.word	0x08013efa

08010084 <_printf_common>:
 8010084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010088:	4616      	mov	r6, r2
 801008a:	4699      	mov	r9, r3
 801008c:	688a      	ldr	r2, [r1, #8]
 801008e:	690b      	ldr	r3, [r1, #16]
 8010090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010094:	4293      	cmp	r3, r2
 8010096:	bfb8      	it	lt
 8010098:	4613      	movlt	r3, r2
 801009a:	6033      	str	r3, [r6, #0]
 801009c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100a0:	4607      	mov	r7, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	b10a      	cbz	r2, 80100aa <_printf_common+0x26>
 80100a6:	3301      	adds	r3, #1
 80100a8:	6033      	str	r3, [r6, #0]
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	0699      	lsls	r1, r3, #26
 80100ae:	bf42      	ittt	mi
 80100b0:	6833      	ldrmi	r3, [r6, #0]
 80100b2:	3302      	addmi	r3, #2
 80100b4:	6033      	strmi	r3, [r6, #0]
 80100b6:	6825      	ldr	r5, [r4, #0]
 80100b8:	f015 0506 	ands.w	r5, r5, #6
 80100bc:	d106      	bne.n	80100cc <_printf_common+0x48>
 80100be:	f104 0a19 	add.w	sl, r4, #25
 80100c2:	68e3      	ldr	r3, [r4, #12]
 80100c4:	6832      	ldr	r2, [r6, #0]
 80100c6:	1a9b      	subs	r3, r3, r2
 80100c8:	42ab      	cmp	r3, r5
 80100ca:	dc26      	bgt.n	801011a <_printf_common+0x96>
 80100cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100d0:	1e13      	subs	r3, r2, #0
 80100d2:	6822      	ldr	r2, [r4, #0]
 80100d4:	bf18      	it	ne
 80100d6:	2301      	movne	r3, #1
 80100d8:	0692      	lsls	r2, r2, #26
 80100da:	d42b      	bmi.n	8010134 <_printf_common+0xb0>
 80100dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100e0:	4649      	mov	r1, r9
 80100e2:	4638      	mov	r0, r7
 80100e4:	47c0      	blx	r8
 80100e6:	3001      	adds	r0, #1
 80100e8:	d01e      	beq.n	8010128 <_printf_common+0xa4>
 80100ea:	6823      	ldr	r3, [r4, #0]
 80100ec:	68e5      	ldr	r5, [r4, #12]
 80100ee:	6832      	ldr	r2, [r6, #0]
 80100f0:	f003 0306 	and.w	r3, r3, #6
 80100f4:	2b04      	cmp	r3, #4
 80100f6:	bf08      	it	eq
 80100f8:	1aad      	subeq	r5, r5, r2
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	6922      	ldr	r2, [r4, #16]
 80100fe:	bf0c      	ite	eq
 8010100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010104:	2500      	movne	r5, #0
 8010106:	4293      	cmp	r3, r2
 8010108:	bfc4      	itt	gt
 801010a:	1a9b      	subgt	r3, r3, r2
 801010c:	18ed      	addgt	r5, r5, r3
 801010e:	2600      	movs	r6, #0
 8010110:	341a      	adds	r4, #26
 8010112:	42b5      	cmp	r5, r6
 8010114:	d11a      	bne.n	801014c <_printf_common+0xc8>
 8010116:	2000      	movs	r0, #0
 8010118:	e008      	b.n	801012c <_printf_common+0xa8>
 801011a:	2301      	movs	r3, #1
 801011c:	4652      	mov	r2, sl
 801011e:	4649      	mov	r1, r9
 8010120:	4638      	mov	r0, r7
 8010122:	47c0      	blx	r8
 8010124:	3001      	adds	r0, #1
 8010126:	d103      	bne.n	8010130 <_printf_common+0xac>
 8010128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801012c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010130:	3501      	adds	r5, #1
 8010132:	e7c6      	b.n	80100c2 <_printf_common+0x3e>
 8010134:	18e1      	adds	r1, r4, r3
 8010136:	1c5a      	adds	r2, r3, #1
 8010138:	2030      	movs	r0, #48	; 0x30
 801013a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801013e:	4422      	add	r2, r4
 8010140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010148:	3302      	adds	r3, #2
 801014a:	e7c7      	b.n	80100dc <_printf_common+0x58>
 801014c:	2301      	movs	r3, #1
 801014e:	4622      	mov	r2, r4
 8010150:	4649      	mov	r1, r9
 8010152:	4638      	mov	r0, r7
 8010154:	47c0      	blx	r8
 8010156:	3001      	adds	r0, #1
 8010158:	d0e6      	beq.n	8010128 <_printf_common+0xa4>
 801015a:	3601      	adds	r6, #1
 801015c:	e7d9      	b.n	8010112 <_printf_common+0x8e>
	...

08010160 <_printf_i>:
 8010160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010164:	460c      	mov	r4, r1
 8010166:	4691      	mov	r9, r2
 8010168:	7e27      	ldrb	r7, [r4, #24]
 801016a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801016c:	2f78      	cmp	r7, #120	; 0x78
 801016e:	4680      	mov	r8, r0
 8010170:	469a      	mov	sl, r3
 8010172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010176:	d807      	bhi.n	8010188 <_printf_i+0x28>
 8010178:	2f62      	cmp	r7, #98	; 0x62
 801017a:	d80a      	bhi.n	8010192 <_printf_i+0x32>
 801017c:	2f00      	cmp	r7, #0
 801017e:	f000 80d8 	beq.w	8010332 <_printf_i+0x1d2>
 8010182:	2f58      	cmp	r7, #88	; 0x58
 8010184:	f000 80a3 	beq.w	80102ce <_printf_i+0x16e>
 8010188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801018c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010190:	e03a      	b.n	8010208 <_printf_i+0xa8>
 8010192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010196:	2b15      	cmp	r3, #21
 8010198:	d8f6      	bhi.n	8010188 <_printf_i+0x28>
 801019a:	a001      	add	r0, pc, #4	; (adr r0, 80101a0 <_printf_i+0x40>)
 801019c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80101a0:	080101f9 	.word	0x080101f9
 80101a4:	0801020d 	.word	0x0801020d
 80101a8:	08010189 	.word	0x08010189
 80101ac:	08010189 	.word	0x08010189
 80101b0:	08010189 	.word	0x08010189
 80101b4:	08010189 	.word	0x08010189
 80101b8:	0801020d 	.word	0x0801020d
 80101bc:	08010189 	.word	0x08010189
 80101c0:	08010189 	.word	0x08010189
 80101c4:	08010189 	.word	0x08010189
 80101c8:	08010189 	.word	0x08010189
 80101cc:	08010319 	.word	0x08010319
 80101d0:	0801023d 	.word	0x0801023d
 80101d4:	080102fb 	.word	0x080102fb
 80101d8:	08010189 	.word	0x08010189
 80101dc:	08010189 	.word	0x08010189
 80101e0:	0801033b 	.word	0x0801033b
 80101e4:	08010189 	.word	0x08010189
 80101e8:	0801023d 	.word	0x0801023d
 80101ec:	08010189 	.word	0x08010189
 80101f0:	08010189 	.word	0x08010189
 80101f4:	08010303 	.word	0x08010303
 80101f8:	680b      	ldr	r3, [r1, #0]
 80101fa:	1d1a      	adds	r2, r3, #4
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	600a      	str	r2, [r1, #0]
 8010200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010208:	2301      	movs	r3, #1
 801020a:	e0a3      	b.n	8010354 <_printf_i+0x1f4>
 801020c:	6825      	ldr	r5, [r4, #0]
 801020e:	6808      	ldr	r0, [r1, #0]
 8010210:	062e      	lsls	r6, r5, #24
 8010212:	f100 0304 	add.w	r3, r0, #4
 8010216:	d50a      	bpl.n	801022e <_printf_i+0xce>
 8010218:	6805      	ldr	r5, [r0, #0]
 801021a:	600b      	str	r3, [r1, #0]
 801021c:	2d00      	cmp	r5, #0
 801021e:	da03      	bge.n	8010228 <_printf_i+0xc8>
 8010220:	232d      	movs	r3, #45	; 0x2d
 8010222:	426d      	negs	r5, r5
 8010224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010228:	485e      	ldr	r0, [pc, #376]	; (80103a4 <_printf_i+0x244>)
 801022a:	230a      	movs	r3, #10
 801022c:	e019      	b.n	8010262 <_printf_i+0x102>
 801022e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010232:	6805      	ldr	r5, [r0, #0]
 8010234:	600b      	str	r3, [r1, #0]
 8010236:	bf18      	it	ne
 8010238:	b22d      	sxthne	r5, r5
 801023a:	e7ef      	b.n	801021c <_printf_i+0xbc>
 801023c:	680b      	ldr	r3, [r1, #0]
 801023e:	6825      	ldr	r5, [r4, #0]
 8010240:	1d18      	adds	r0, r3, #4
 8010242:	6008      	str	r0, [r1, #0]
 8010244:	0628      	lsls	r0, r5, #24
 8010246:	d501      	bpl.n	801024c <_printf_i+0xec>
 8010248:	681d      	ldr	r5, [r3, #0]
 801024a:	e002      	b.n	8010252 <_printf_i+0xf2>
 801024c:	0669      	lsls	r1, r5, #25
 801024e:	d5fb      	bpl.n	8010248 <_printf_i+0xe8>
 8010250:	881d      	ldrh	r5, [r3, #0]
 8010252:	4854      	ldr	r0, [pc, #336]	; (80103a4 <_printf_i+0x244>)
 8010254:	2f6f      	cmp	r7, #111	; 0x6f
 8010256:	bf0c      	ite	eq
 8010258:	2308      	moveq	r3, #8
 801025a:	230a      	movne	r3, #10
 801025c:	2100      	movs	r1, #0
 801025e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010262:	6866      	ldr	r6, [r4, #4]
 8010264:	60a6      	str	r6, [r4, #8]
 8010266:	2e00      	cmp	r6, #0
 8010268:	bfa2      	ittt	ge
 801026a:	6821      	ldrge	r1, [r4, #0]
 801026c:	f021 0104 	bicge.w	r1, r1, #4
 8010270:	6021      	strge	r1, [r4, #0]
 8010272:	b90d      	cbnz	r5, 8010278 <_printf_i+0x118>
 8010274:	2e00      	cmp	r6, #0
 8010276:	d04d      	beq.n	8010314 <_printf_i+0x1b4>
 8010278:	4616      	mov	r6, r2
 801027a:	fbb5 f1f3 	udiv	r1, r5, r3
 801027e:	fb03 5711 	mls	r7, r3, r1, r5
 8010282:	5dc7      	ldrb	r7, [r0, r7]
 8010284:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010288:	462f      	mov	r7, r5
 801028a:	42bb      	cmp	r3, r7
 801028c:	460d      	mov	r5, r1
 801028e:	d9f4      	bls.n	801027a <_printf_i+0x11a>
 8010290:	2b08      	cmp	r3, #8
 8010292:	d10b      	bne.n	80102ac <_printf_i+0x14c>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	07df      	lsls	r7, r3, #31
 8010298:	d508      	bpl.n	80102ac <_printf_i+0x14c>
 801029a:	6923      	ldr	r3, [r4, #16]
 801029c:	6861      	ldr	r1, [r4, #4]
 801029e:	4299      	cmp	r1, r3
 80102a0:	bfde      	ittt	le
 80102a2:	2330      	movle	r3, #48	; 0x30
 80102a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102a8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80102ac:	1b92      	subs	r2, r2, r6
 80102ae:	6122      	str	r2, [r4, #16]
 80102b0:	f8cd a000 	str.w	sl, [sp]
 80102b4:	464b      	mov	r3, r9
 80102b6:	aa03      	add	r2, sp, #12
 80102b8:	4621      	mov	r1, r4
 80102ba:	4640      	mov	r0, r8
 80102bc:	f7ff fee2 	bl	8010084 <_printf_common>
 80102c0:	3001      	adds	r0, #1
 80102c2:	d14c      	bne.n	801035e <_printf_i+0x1fe>
 80102c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102c8:	b004      	add	sp, #16
 80102ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102ce:	4835      	ldr	r0, [pc, #212]	; (80103a4 <_printf_i+0x244>)
 80102d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	680e      	ldr	r6, [r1, #0]
 80102d8:	061f      	lsls	r7, r3, #24
 80102da:	f856 5b04 	ldr.w	r5, [r6], #4
 80102de:	600e      	str	r6, [r1, #0]
 80102e0:	d514      	bpl.n	801030c <_printf_i+0x1ac>
 80102e2:	07d9      	lsls	r1, r3, #31
 80102e4:	bf44      	itt	mi
 80102e6:	f043 0320 	orrmi.w	r3, r3, #32
 80102ea:	6023      	strmi	r3, [r4, #0]
 80102ec:	b91d      	cbnz	r5, 80102f6 <_printf_i+0x196>
 80102ee:	6823      	ldr	r3, [r4, #0]
 80102f0:	f023 0320 	bic.w	r3, r3, #32
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	2310      	movs	r3, #16
 80102f8:	e7b0      	b.n	801025c <_printf_i+0xfc>
 80102fa:	6823      	ldr	r3, [r4, #0]
 80102fc:	f043 0320 	orr.w	r3, r3, #32
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	2378      	movs	r3, #120	; 0x78
 8010304:	4828      	ldr	r0, [pc, #160]	; (80103a8 <_printf_i+0x248>)
 8010306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801030a:	e7e3      	b.n	80102d4 <_printf_i+0x174>
 801030c:	065e      	lsls	r6, r3, #25
 801030e:	bf48      	it	mi
 8010310:	b2ad      	uxthmi	r5, r5
 8010312:	e7e6      	b.n	80102e2 <_printf_i+0x182>
 8010314:	4616      	mov	r6, r2
 8010316:	e7bb      	b.n	8010290 <_printf_i+0x130>
 8010318:	680b      	ldr	r3, [r1, #0]
 801031a:	6826      	ldr	r6, [r4, #0]
 801031c:	6960      	ldr	r0, [r4, #20]
 801031e:	1d1d      	adds	r5, r3, #4
 8010320:	600d      	str	r5, [r1, #0]
 8010322:	0635      	lsls	r5, r6, #24
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	d501      	bpl.n	801032c <_printf_i+0x1cc>
 8010328:	6018      	str	r0, [r3, #0]
 801032a:	e002      	b.n	8010332 <_printf_i+0x1d2>
 801032c:	0671      	lsls	r1, r6, #25
 801032e:	d5fb      	bpl.n	8010328 <_printf_i+0x1c8>
 8010330:	8018      	strh	r0, [r3, #0]
 8010332:	2300      	movs	r3, #0
 8010334:	6123      	str	r3, [r4, #16]
 8010336:	4616      	mov	r6, r2
 8010338:	e7ba      	b.n	80102b0 <_printf_i+0x150>
 801033a:	680b      	ldr	r3, [r1, #0]
 801033c:	1d1a      	adds	r2, r3, #4
 801033e:	600a      	str	r2, [r1, #0]
 8010340:	681e      	ldr	r6, [r3, #0]
 8010342:	6862      	ldr	r2, [r4, #4]
 8010344:	2100      	movs	r1, #0
 8010346:	4630      	mov	r0, r6
 8010348:	f7ef ff5a 	bl	8000200 <memchr>
 801034c:	b108      	cbz	r0, 8010352 <_printf_i+0x1f2>
 801034e:	1b80      	subs	r0, r0, r6
 8010350:	6060      	str	r0, [r4, #4]
 8010352:	6863      	ldr	r3, [r4, #4]
 8010354:	6123      	str	r3, [r4, #16]
 8010356:	2300      	movs	r3, #0
 8010358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801035c:	e7a8      	b.n	80102b0 <_printf_i+0x150>
 801035e:	6923      	ldr	r3, [r4, #16]
 8010360:	4632      	mov	r2, r6
 8010362:	4649      	mov	r1, r9
 8010364:	4640      	mov	r0, r8
 8010366:	47d0      	blx	sl
 8010368:	3001      	adds	r0, #1
 801036a:	d0ab      	beq.n	80102c4 <_printf_i+0x164>
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	079b      	lsls	r3, r3, #30
 8010370:	d413      	bmi.n	801039a <_printf_i+0x23a>
 8010372:	68e0      	ldr	r0, [r4, #12]
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	4298      	cmp	r0, r3
 8010378:	bfb8      	it	lt
 801037a:	4618      	movlt	r0, r3
 801037c:	e7a4      	b.n	80102c8 <_printf_i+0x168>
 801037e:	2301      	movs	r3, #1
 8010380:	4632      	mov	r2, r6
 8010382:	4649      	mov	r1, r9
 8010384:	4640      	mov	r0, r8
 8010386:	47d0      	blx	sl
 8010388:	3001      	adds	r0, #1
 801038a:	d09b      	beq.n	80102c4 <_printf_i+0x164>
 801038c:	3501      	adds	r5, #1
 801038e:	68e3      	ldr	r3, [r4, #12]
 8010390:	9903      	ldr	r1, [sp, #12]
 8010392:	1a5b      	subs	r3, r3, r1
 8010394:	42ab      	cmp	r3, r5
 8010396:	dcf2      	bgt.n	801037e <_printf_i+0x21e>
 8010398:	e7eb      	b.n	8010372 <_printf_i+0x212>
 801039a:	2500      	movs	r5, #0
 801039c:	f104 0619 	add.w	r6, r4, #25
 80103a0:	e7f5      	b.n	801038e <_printf_i+0x22e>
 80103a2:	bf00      	nop
 80103a4:	08013f05 	.word	0x08013f05
 80103a8:	08013f16 	.word	0x08013f16

080103ac <_sbrk_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d06      	ldr	r5, [pc, #24]	; (80103c8 <_sbrk_r+0x1c>)
 80103b0:	2300      	movs	r3, #0
 80103b2:	4604      	mov	r4, r0
 80103b4:	4608      	mov	r0, r1
 80103b6:	602b      	str	r3, [r5, #0]
 80103b8:	f7f0 fd3a 	bl	8000e30 <_sbrk>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	d102      	bne.n	80103c6 <_sbrk_r+0x1a>
 80103c0:	682b      	ldr	r3, [r5, #0]
 80103c2:	b103      	cbz	r3, 80103c6 <_sbrk_r+0x1a>
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	20006d24 	.word	0x20006d24

080103cc <__sread>:
 80103cc:	b510      	push	{r4, lr}
 80103ce:	460c      	mov	r4, r1
 80103d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d4:	f000 fa6c 	bl	80108b0 <_read_r>
 80103d8:	2800      	cmp	r0, #0
 80103da:	bfab      	itete	ge
 80103dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103de:	89a3      	ldrhlt	r3, [r4, #12]
 80103e0:	181b      	addge	r3, r3, r0
 80103e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103e6:	bfac      	ite	ge
 80103e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80103ea:	81a3      	strhlt	r3, [r4, #12]
 80103ec:	bd10      	pop	{r4, pc}

080103ee <__swrite>:
 80103ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f2:	461f      	mov	r7, r3
 80103f4:	898b      	ldrh	r3, [r1, #12]
 80103f6:	05db      	lsls	r3, r3, #23
 80103f8:	4605      	mov	r5, r0
 80103fa:	460c      	mov	r4, r1
 80103fc:	4616      	mov	r6, r2
 80103fe:	d505      	bpl.n	801040c <__swrite+0x1e>
 8010400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010404:	2302      	movs	r3, #2
 8010406:	2200      	movs	r2, #0
 8010408:	f000 f9d0 	bl	80107ac <_lseek_r>
 801040c:	89a3      	ldrh	r3, [r4, #12]
 801040e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010416:	81a3      	strh	r3, [r4, #12]
 8010418:	4632      	mov	r2, r6
 801041a:	463b      	mov	r3, r7
 801041c:	4628      	mov	r0, r5
 801041e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010422:	f000 b869 	b.w	80104f8 <_write_r>

08010426 <__sseek>:
 8010426:	b510      	push	{r4, lr}
 8010428:	460c      	mov	r4, r1
 801042a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801042e:	f000 f9bd 	bl	80107ac <_lseek_r>
 8010432:	1c43      	adds	r3, r0, #1
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	bf15      	itete	ne
 8010438:	6560      	strne	r0, [r4, #84]	; 0x54
 801043a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801043e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010442:	81a3      	strheq	r3, [r4, #12]
 8010444:	bf18      	it	ne
 8010446:	81a3      	strhne	r3, [r4, #12]
 8010448:	bd10      	pop	{r4, pc}

0801044a <__sclose>:
 801044a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044e:	f000 b8db 	b.w	8010608 <_close_r>
	...

08010454 <__swbuf_r>:
 8010454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010456:	460e      	mov	r6, r1
 8010458:	4614      	mov	r4, r2
 801045a:	4605      	mov	r5, r0
 801045c:	b118      	cbz	r0, 8010466 <__swbuf_r+0x12>
 801045e:	6983      	ldr	r3, [r0, #24]
 8010460:	b90b      	cbnz	r3, 8010466 <__swbuf_r+0x12>
 8010462:	f7ff fb51 	bl	800fb08 <__sinit>
 8010466:	4b21      	ldr	r3, [pc, #132]	; (80104ec <__swbuf_r+0x98>)
 8010468:	429c      	cmp	r4, r3
 801046a:	d12b      	bne.n	80104c4 <__swbuf_r+0x70>
 801046c:	686c      	ldr	r4, [r5, #4]
 801046e:	69a3      	ldr	r3, [r4, #24]
 8010470:	60a3      	str	r3, [r4, #8]
 8010472:	89a3      	ldrh	r3, [r4, #12]
 8010474:	071a      	lsls	r2, r3, #28
 8010476:	d52f      	bpl.n	80104d8 <__swbuf_r+0x84>
 8010478:	6923      	ldr	r3, [r4, #16]
 801047a:	b36b      	cbz	r3, 80104d8 <__swbuf_r+0x84>
 801047c:	6923      	ldr	r3, [r4, #16]
 801047e:	6820      	ldr	r0, [r4, #0]
 8010480:	1ac0      	subs	r0, r0, r3
 8010482:	6963      	ldr	r3, [r4, #20]
 8010484:	b2f6      	uxtb	r6, r6
 8010486:	4283      	cmp	r3, r0
 8010488:	4637      	mov	r7, r6
 801048a:	dc04      	bgt.n	8010496 <__swbuf_r+0x42>
 801048c:	4621      	mov	r1, r4
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f950 	bl	8010734 <_fflush_r>
 8010494:	bb30      	cbnz	r0, 80104e4 <__swbuf_r+0x90>
 8010496:	68a3      	ldr	r3, [r4, #8]
 8010498:	3b01      	subs	r3, #1
 801049a:	60a3      	str	r3, [r4, #8]
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	1c5a      	adds	r2, r3, #1
 80104a0:	6022      	str	r2, [r4, #0]
 80104a2:	701e      	strb	r6, [r3, #0]
 80104a4:	6963      	ldr	r3, [r4, #20]
 80104a6:	3001      	adds	r0, #1
 80104a8:	4283      	cmp	r3, r0
 80104aa:	d004      	beq.n	80104b6 <__swbuf_r+0x62>
 80104ac:	89a3      	ldrh	r3, [r4, #12]
 80104ae:	07db      	lsls	r3, r3, #31
 80104b0:	d506      	bpl.n	80104c0 <__swbuf_r+0x6c>
 80104b2:	2e0a      	cmp	r6, #10
 80104b4:	d104      	bne.n	80104c0 <__swbuf_r+0x6c>
 80104b6:	4621      	mov	r1, r4
 80104b8:	4628      	mov	r0, r5
 80104ba:	f000 f93b 	bl	8010734 <_fflush_r>
 80104be:	b988      	cbnz	r0, 80104e4 <__swbuf_r+0x90>
 80104c0:	4638      	mov	r0, r7
 80104c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104c4:	4b0a      	ldr	r3, [pc, #40]	; (80104f0 <__swbuf_r+0x9c>)
 80104c6:	429c      	cmp	r4, r3
 80104c8:	d101      	bne.n	80104ce <__swbuf_r+0x7a>
 80104ca:	68ac      	ldr	r4, [r5, #8]
 80104cc:	e7cf      	b.n	801046e <__swbuf_r+0x1a>
 80104ce:	4b09      	ldr	r3, [pc, #36]	; (80104f4 <__swbuf_r+0xa0>)
 80104d0:	429c      	cmp	r4, r3
 80104d2:	bf08      	it	eq
 80104d4:	68ec      	ldreq	r4, [r5, #12]
 80104d6:	e7ca      	b.n	801046e <__swbuf_r+0x1a>
 80104d8:	4621      	mov	r1, r4
 80104da:	4628      	mov	r0, r5
 80104dc:	f000 f81e 	bl	801051c <__swsetup_r>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	d0cb      	beq.n	801047c <__swbuf_r+0x28>
 80104e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80104e8:	e7ea      	b.n	80104c0 <__swbuf_r+0x6c>
 80104ea:	bf00      	nop
 80104ec:	08013eb4 	.word	0x08013eb4
 80104f0:	08013ed4 	.word	0x08013ed4
 80104f4:	08013e94 	.word	0x08013e94

080104f8 <_write_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d07      	ldr	r5, [pc, #28]	; (8010518 <_write_r+0x20>)
 80104fc:	4604      	mov	r4, r0
 80104fe:	4608      	mov	r0, r1
 8010500:	4611      	mov	r1, r2
 8010502:	2200      	movs	r2, #0
 8010504:	602a      	str	r2, [r5, #0]
 8010506:	461a      	mov	r2, r3
 8010508:	f7f0 fc41 	bl	8000d8e <_write>
 801050c:	1c43      	adds	r3, r0, #1
 801050e:	d102      	bne.n	8010516 <_write_r+0x1e>
 8010510:	682b      	ldr	r3, [r5, #0]
 8010512:	b103      	cbz	r3, 8010516 <_write_r+0x1e>
 8010514:	6023      	str	r3, [r4, #0]
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	20006d24 	.word	0x20006d24

0801051c <__swsetup_r>:
 801051c:	4b32      	ldr	r3, [pc, #200]	; (80105e8 <__swsetup_r+0xcc>)
 801051e:	b570      	push	{r4, r5, r6, lr}
 8010520:	681d      	ldr	r5, [r3, #0]
 8010522:	4606      	mov	r6, r0
 8010524:	460c      	mov	r4, r1
 8010526:	b125      	cbz	r5, 8010532 <__swsetup_r+0x16>
 8010528:	69ab      	ldr	r3, [r5, #24]
 801052a:	b913      	cbnz	r3, 8010532 <__swsetup_r+0x16>
 801052c:	4628      	mov	r0, r5
 801052e:	f7ff faeb 	bl	800fb08 <__sinit>
 8010532:	4b2e      	ldr	r3, [pc, #184]	; (80105ec <__swsetup_r+0xd0>)
 8010534:	429c      	cmp	r4, r3
 8010536:	d10f      	bne.n	8010558 <__swsetup_r+0x3c>
 8010538:	686c      	ldr	r4, [r5, #4]
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010540:	0719      	lsls	r1, r3, #28
 8010542:	d42c      	bmi.n	801059e <__swsetup_r+0x82>
 8010544:	06dd      	lsls	r5, r3, #27
 8010546:	d411      	bmi.n	801056c <__swsetup_r+0x50>
 8010548:	2309      	movs	r3, #9
 801054a:	6033      	str	r3, [r6, #0]
 801054c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010556:	e03e      	b.n	80105d6 <__swsetup_r+0xba>
 8010558:	4b25      	ldr	r3, [pc, #148]	; (80105f0 <__swsetup_r+0xd4>)
 801055a:	429c      	cmp	r4, r3
 801055c:	d101      	bne.n	8010562 <__swsetup_r+0x46>
 801055e:	68ac      	ldr	r4, [r5, #8]
 8010560:	e7eb      	b.n	801053a <__swsetup_r+0x1e>
 8010562:	4b24      	ldr	r3, [pc, #144]	; (80105f4 <__swsetup_r+0xd8>)
 8010564:	429c      	cmp	r4, r3
 8010566:	bf08      	it	eq
 8010568:	68ec      	ldreq	r4, [r5, #12]
 801056a:	e7e6      	b.n	801053a <__swsetup_r+0x1e>
 801056c:	0758      	lsls	r0, r3, #29
 801056e:	d512      	bpl.n	8010596 <__swsetup_r+0x7a>
 8010570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010572:	b141      	cbz	r1, 8010586 <__swsetup_r+0x6a>
 8010574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010578:	4299      	cmp	r1, r3
 801057a:	d002      	beq.n	8010582 <__swsetup_r+0x66>
 801057c:	4630      	mov	r0, r6
 801057e:	f7ff fb7d 	bl	800fc7c <_free_r>
 8010582:	2300      	movs	r3, #0
 8010584:	6363      	str	r3, [r4, #52]	; 0x34
 8010586:	89a3      	ldrh	r3, [r4, #12]
 8010588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801058c:	81a3      	strh	r3, [r4, #12]
 801058e:	2300      	movs	r3, #0
 8010590:	6063      	str	r3, [r4, #4]
 8010592:	6923      	ldr	r3, [r4, #16]
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	89a3      	ldrh	r3, [r4, #12]
 8010598:	f043 0308 	orr.w	r3, r3, #8
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	6923      	ldr	r3, [r4, #16]
 80105a0:	b94b      	cbnz	r3, 80105b6 <__swsetup_r+0x9a>
 80105a2:	89a3      	ldrh	r3, [r4, #12]
 80105a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105ac:	d003      	beq.n	80105b6 <__swsetup_r+0x9a>
 80105ae:	4621      	mov	r1, r4
 80105b0:	4630      	mov	r0, r6
 80105b2:	f000 f931 	bl	8010818 <__smakebuf_r>
 80105b6:	89a0      	ldrh	r0, [r4, #12]
 80105b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105bc:	f010 0301 	ands.w	r3, r0, #1
 80105c0:	d00a      	beq.n	80105d8 <__swsetup_r+0xbc>
 80105c2:	2300      	movs	r3, #0
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	6963      	ldr	r3, [r4, #20]
 80105c8:	425b      	negs	r3, r3
 80105ca:	61a3      	str	r3, [r4, #24]
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	b943      	cbnz	r3, 80105e2 <__swsetup_r+0xc6>
 80105d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105d4:	d1ba      	bne.n	801054c <__swsetup_r+0x30>
 80105d6:	bd70      	pop	{r4, r5, r6, pc}
 80105d8:	0781      	lsls	r1, r0, #30
 80105da:	bf58      	it	pl
 80105dc:	6963      	ldrpl	r3, [r4, #20]
 80105de:	60a3      	str	r3, [r4, #8]
 80105e0:	e7f4      	b.n	80105cc <__swsetup_r+0xb0>
 80105e2:	2000      	movs	r0, #0
 80105e4:	e7f7      	b.n	80105d6 <__swsetup_r+0xba>
 80105e6:	bf00      	nop
 80105e8:	20000028 	.word	0x20000028
 80105ec:	08013eb4 	.word	0x08013eb4
 80105f0:	08013ed4 	.word	0x08013ed4
 80105f4:	08013e94 	.word	0x08013e94

080105f8 <abort>:
 80105f8:	b508      	push	{r3, lr}
 80105fa:	2006      	movs	r0, #6
 80105fc:	f000 f992 	bl	8010924 <raise>
 8010600:	2001      	movs	r0, #1
 8010602:	f7f0 fb9d 	bl	8000d40 <_exit>
	...

08010608 <_close_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4d06      	ldr	r5, [pc, #24]	; (8010624 <_close_r+0x1c>)
 801060c:	2300      	movs	r3, #0
 801060e:	4604      	mov	r4, r0
 8010610:	4608      	mov	r0, r1
 8010612:	602b      	str	r3, [r5, #0]
 8010614:	f7f0 fbd7 	bl	8000dc6 <_close>
 8010618:	1c43      	adds	r3, r0, #1
 801061a:	d102      	bne.n	8010622 <_close_r+0x1a>
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	b103      	cbz	r3, 8010622 <_close_r+0x1a>
 8010620:	6023      	str	r3, [r4, #0]
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	20006d24 	.word	0x20006d24

08010628 <__sflush_r>:
 8010628:	898a      	ldrh	r2, [r1, #12]
 801062a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801062e:	4605      	mov	r5, r0
 8010630:	0710      	lsls	r0, r2, #28
 8010632:	460c      	mov	r4, r1
 8010634:	d458      	bmi.n	80106e8 <__sflush_r+0xc0>
 8010636:	684b      	ldr	r3, [r1, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	dc05      	bgt.n	8010648 <__sflush_r+0x20>
 801063c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801063e:	2b00      	cmp	r3, #0
 8010640:	dc02      	bgt.n	8010648 <__sflush_r+0x20>
 8010642:	2000      	movs	r0, #0
 8010644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801064a:	2e00      	cmp	r6, #0
 801064c:	d0f9      	beq.n	8010642 <__sflush_r+0x1a>
 801064e:	2300      	movs	r3, #0
 8010650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010654:	682f      	ldr	r7, [r5, #0]
 8010656:	602b      	str	r3, [r5, #0]
 8010658:	d032      	beq.n	80106c0 <__sflush_r+0x98>
 801065a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801065c:	89a3      	ldrh	r3, [r4, #12]
 801065e:	075a      	lsls	r2, r3, #29
 8010660:	d505      	bpl.n	801066e <__sflush_r+0x46>
 8010662:	6863      	ldr	r3, [r4, #4]
 8010664:	1ac0      	subs	r0, r0, r3
 8010666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010668:	b10b      	cbz	r3, 801066e <__sflush_r+0x46>
 801066a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801066c:	1ac0      	subs	r0, r0, r3
 801066e:	2300      	movs	r3, #0
 8010670:	4602      	mov	r2, r0
 8010672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010674:	6a21      	ldr	r1, [r4, #32]
 8010676:	4628      	mov	r0, r5
 8010678:	47b0      	blx	r6
 801067a:	1c43      	adds	r3, r0, #1
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	d106      	bne.n	801068e <__sflush_r+0x66>
 8010680:	6829      	ldr	r1, [r5, #0]
 8010682:	291d      	cmp	r1, #29
 8010684:	d82c      	bhi.n	80106e0 <__sflush_r+0xb8>
 8010686:	4a2a      	ldr	r2, [pc, #168]	; (8010730 <__sflush_r+0x108>)
 8010688:	40ca      	lsrs	r2, r1
 801068a:	07d6      	lsls	r6, r2, #31
 801068c:	d528      	bpl.n	80106e0 <__sflush_r+0xb8>
 801068e:	2200      	movs	r2, #0
 8010690:	6062      	str	r2, [r4, #4]
 8010692:	04d9      	lsls	r1, r3, #19
 8010694:	6922      	ldr	r2, [r4, #16]
 8010696:	6022      	str	r2, [r4, #0]
 8010698:	d504      	bpl.n	80106a4 <__sflush_r+0x7c>
 801069a:	1c42      	adds	r2, r0, #1
 801069c:	d101      	bne.n	80106a2 <__sflush_r+0x7a>
 801069e:	682b      	ldr	r3, [r5, #0]
 80106a0:	b903      	cbnz	r3, 80106a4 <__sflush_r+0x7c>
 80106a2:	6560      	str	r0, [r4, #84]	; 0x54
 80106a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106a6:	602f      	str	r7, [r5, #0]
 80106a8:	2900      	cmp	r1, #0
 80106aa:	d0ca      	beq.n	8010642 <__sflush_r+0x1a>
 80106ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106b0:	4299      	cmp	r1, r3
 80106b2:	d002      	beq.n	80106ba <__sflush_r+0x92>
 80106b4:	4628      	mov	r0, r5
 80106b6:	f7ff fae1 	bl	800fc7c <_free_r>
 80106ba:	2000      	movs	r0, #0
 80106bc:	6360      	str	r0, [r4, #52]	; 0x34
 80106be:	e7c1      	b.n	8010644 <__sflush_r+0x1c>
 80106c0:	6a21      	ldr	r1, [r4, #32]
 80106c2:	2301      	movs	r3, #1
 80106c4:	4628      	mov	r0, r5
 80106c6:	47b0      	blx	r6
 80106c8:	1c41      	adds	r1, r0, #1
 80106ca:	d1c7      	bne.n	801065c <__sflush_r+0x34>
 80106cc:	682b      	ldr	r3, [r5, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d0c4      	beq.n	801065c <__sflush_r+0x34>
 80106d2:	2b1d      	cmp	r3, #29
 80106d4:	d001      	beq.n	80106da <__sflush_r+0xb2>
 80106d6:	2b16      	cmp	r3, #22
 80106d8:	d101      	bne.n	80106de <__sflush_r+0xb6>
 80106da:	602f      	str	r7, [r5, #0]
 80106dc:	e7b1      	b.n	8010642 <__sflush_r+0x1a>
 80106de:	89a3      	ldrh	r3, [r4, #12]
 80106e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e4:	81a3      	strh	r3, [r4, #12]
 80106e6:	e7ad      	b.n	8010644 <__sflush_r+0x1c>
 80106e8:	690f      	ldr	r7, [r1, #16]
 80106ea:	2f00      	cmp	r7, #0
 80106ec:	d0a9      	beq.n	8010642 <__sflush_r+0x1a>
 80106ee:	0793      	lsls	r3, r2, #30
 80106f0:	680e      	ldr	r6, [r1, #0]
 80106f2:	bf08      	it	eq
 80106f4:	694b      	ldreq	r3, [r1, #20]
 80106f6:	600f      	str	r7, [r1, #0]
 80106f8:	bf18      	it	ne
 80106fa:	2300      	movne	r3, #0
 80106fc:	eba6 0807 	sub.w	r8, r6, r7
 8010700:	608b      	str	r3, [r1, #8]
 8010702:	f1b8 0f00 	cmp.w	r8, #0
 8010706:	dd9c      	ble.n	8010642 <__sflush_r+0x1a>
 8010708:	6a21      	ldr	r1, [r4, #32]
 801070a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801070c:	4643      	mov	r3, r8
 801070e:	463a      	mov	r2, r7
 8010710:	4628      	mov	r0, r5
 8010712:	47b0      	blx	r6
 8010714:	2800      	cmp	r0, #0
 8010716:	dc06      	bgt.n	8010726 <__sflush_r+0xfe>
 8010718:	89a3      	ldrh	r3, [r4, #12]
 801071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801071e:	81a3      	strh	r3, [r4, #12]
 8010720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010724:	e78e      	b.n	8010644 <__sflush_r+0x1c>
 8010726:	4407      	add	r7, r0
 8010728:	eba8 0800 	sub.w	r8, r8, r0
 801072c:	e7e9      	b.n	8010702 <__sflush_r+0xda>
 801072e:	bf00      	nop
 8010730:	20400001 	.word	0x20400001

08010734 <_fflush_r>:
 8010734:	b538      	push	{r3, r4, r5, lr}
 8010736:	690b      	ldr	r3, [r1, #16]
 8010738:	4605      	mov	r5, r0
 801073a:	460c      	mov	r4, r1
 801073c:	b913      	cbnz	r3, 8010744 <_fflush_r+0x10>
 801073e:	2500      	movs	r5, #0
 8010740:	4628      	mov	r0, r5
 8010742:	bd38      	pop	{r3, r4, r5, pc}
 8010744:	b118      	cbz	r0, 801074e <_fflush_r+0x1a>
 8010746:	6983      	ldr	r3, [r0, #24]
 8010748:	b90b      	cbnz	r3, 801074e <_fflush_r+0x1a>
 801074a:	f7ff f9dd 	bl	800fb08 <__sinit>
 801074e:	4b14      	ldr	r3, [pc, #80]	; (80107a0 <_fflush_r+0x6c>)
 8010750:	429c      	cmp	r4, r3
 8010752:	d11b      	bne.n	801078c <_fflush_r+0x58>
 8010754:	686c      	ldr	r4, [r5, #4]
 8010756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d0ef      	beq.n	801073e <_fflush_r+0xa>
 801075e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010760:	07d0      	lsls	r0, r2, #31
 8010762:	d404      	bmi.n	801076e <_fflush_r+0x3a>
 8010764:	0599      	lsls	r1, r3, #22
 8010766:	d402      	bmi.n	801076e <_fflush_r+0x3a>
 8010768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801076a:	f7ff fa7d 	bl	800fc68 <__retarget_lock_acquire_recursive>
 801076e:	4628      	mov	r0, r5
 8010770:	4621      	mov	r1, r4
 8010772:	f7ff ff59 	bl	8010628 <__sflush_r>
 8010776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010778:	07da      	lsls	r2, r3, #31
 801077a:	4605      	mov	r5, r0
 801077c:	d4e0      	bmi.n	8010740 <_fflush_r+0xc>
 801077e:	89a3      	ldrh	r3, [r4, #12]
 8010780:	059b      	lsls	r3, r3, #22
 8010782:	d4dd      	bmi.n	8010740 <_fflush_r+0xc>
 8010784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010786:	f7ff fa70 	bl	800fc6a <__retarget_lock_release_recursive>
 801078a:	e7d9      	b.n	8010740 <_fflush_r+0xc>
 801078c:	4b05      	ldr	r3, [pc, #20]	; (80107a4 <_fflush_r+0x70>)
 801078e:	429c      	cmp	r4, r3
 8010790:	d101      	bne.n	8010796 <_fflush_r+0x62>
 8010792:	68ac      	ldr	r4, [r5, #8]
 8010794:	e7df      	b.n	8010756 <_fflush_r+0x22>
 8010796:	4b04      	ldr	r3, [pc, #16]	; (80107a8 <_fflush_r+0x74>)
 8010798:	429c      	cmp	r4, r3
 801079a:	bf08      	it	eq
 801079c:	68ec      	ldreq	r4, [r5, #12]
 801079e:	e7da      	b.n	8010756 <_fflush_r+0x22>
 80107a0:	08013eb4 	.word	0x08013eb4
 80107a4:	08013ed4 	.word	0x08013ed4
 80107a8:	08013e94 	.word	0x08013e94

080107ac <_lseek_r>:
 80107ac:	b538      	push	{r3, r4, r5, lr}
 80107ae:	4d07      	ldr	r5, [pc, #28]	; (80107cc <_lseek_r+0x20>)
 80107b0:	4604      	mov	r4, r0
 80107b2:	4608      	mov	r0, r1
 80107b4:	4611      	mov	r1, r2
 80107b6:	2200      	movs	r2, #0
 80107b8:	602a      	str	r2, [r5, #0]
 80107ba:	461a      	mov	r2, r3
 80107bc:	f7f0 fb2a 	bl	8000e14 <_lseek>
 80107c0:	1c43      	adds	r3, r0, #1
 80107c2:	d102      	bne.n	80107ca <_lseek_r+0x1e>
 80107c4:	682b      	ldr	r3, [r5, #0]
 80107c6:	b103      	cbz	r3, 80107ca <_lseek_r+0x1e>
 80107c8:	6023      	str	r3, [r4, #0]
 80107ca:	bd38      	pop	{r3, r4, r5, pc}
 80107cc:	20006d24 	.word	0x20006d24

080107d0 <__swhatbuf_r>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	460e      	mov	r6, r1
 80107d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107d8:	2900      	cmp	r1, #0
 80107da:	b096      	sub	sp, #88	; 0x58
 80107dc:	4614      	mov	r4, r2
 80107de:	461d      	mov	r5, r3
 80107e0:	da07      	bge.n	80107f2 <__swhatbuf_r+0x22>
 80107e2:	2300      	movs	r3, #0
 80107e4:	602b      	str	r3, [r5, #0]
 80107e6:	89b3      	ldrh	r3, [r6, #12]
 80107e8:	061a      	lsls	r2, r3, #24
 80107ea:	d410      	bmi.n	801080e <__swhatbuf_r+0x3e>
 80107ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f0:	e00e      	b.n	8010810 <__swhatbuf_r+0x40>
 80107f2:	466a      	mov	r2, sp
 80107f4:	f000 f8b2 	bl	801095c <_fstat_r>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	dbf2      	blt.n	80107e2 <__swhatbuf_r+0x12>
 80107fc:	9a01      	ldr	r2, [sp, #4]
 80107fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010802:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010806:	425a      	negs	r2, r3
 8010808:	415a      	adcs	r2, r3
 801080a:	602a      	str	r2, [r5, #0]
 801080c:	e7ee      	b.n	80107ec <__swhatbuf_r+0x1c>
 801080e:	2340      	movs	r3, #64	; 0x40
 8010810:	2000      	movs	r0, #0
 8010812:	6023      	str	r3, [r4, #0]
 8010814:	b016      	add	sp, #88	; 0x58
 8010816:	bd70      	pop	{r4, r5, r6, pc}

08010818 <__smakebuf_r>:
 8010818:	898b      	ldrh	r3, [r1, #12]
 801081a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801081c:	079d      	lsls	r5, r3, #30
 801081e:	4606      	mov	r6, r0
 8010820:	460c      	mov	r4, r1
 8010822:	d507      	bpl.n	8010834 <__smakebuf_r+0x1c>
 8010824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	6123      	str	r3, [r4, #16]
 801082c:	2301      	movs	r3, #1
 801082e:	6163      	str	r3, [r4, #20]
 8010830:	b002      	add	sp, #8
 8010832:	bd70      	pop	{r4, r5, r6, pc}
 8010834:	ab01      	add	r3, sp, #4
 8010836:	466a      	mov	r2, sp
 8010838:	f7ff ffca 	bl	80107d0 <__swhatbuf_r>
 801083c:	9900      	ldr	r1, [sp, #0]
 801083e:	4605      	mov	r5, r0
 8010840:	4630      	mov	r0, r6
 8010842:	f7ff fa6b 	bl	800fd1c <_malloc_r>
 8010846:	b948      	cbnz	r0, 801085c <__smakebuf_r+0x44>
 8010848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801084c:	059a      	lsls	r2, r3, #22
 801084e:	d4ef      	bmi.n	8010830 <__smakebuf_r+0x18>
 8010850:	f023 0303 	bic.w	r3, r3, #3
 8010854:	f043 0302 	orr.w	r3, r3, #2
 8010858:	81a3      	strh	r3, [r4, #12]
 801085a:	e7e3      	b.n	8010824 <__smakebuf_r+0xc>
 801085c:	4b0d      	ldr	r3, [pc, #52]	; (8010894 <__smakebuf_r+0x7c>)
 801085e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010860:	89a3      	ldrh	r3, [r4, #12]
 8010862:	6020      	str	r0, [r4, #0]
 8010864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010868:	81a3      	strh	r3, [r4, #12]
 801086a:	9b00      	ldr	r3, [sp, #0]
 801086c:	6163      	str	r3, [r4, #20]
 801086e:	9b01      	ldr	r3, [sp, #4]
 8010870:	6120      	str	r0, [r4, #16]
 8010872:	b15b      	cbz	r3, 801088c <__smakebuf_r+0x74>
 8010874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010878:	4630      	mov	r0, r6
 801087a:	f000 f881 	bl	8010980 <_isatty_r>
 801087e:	b128      	cbz	r0, 801088c <__smakebuf_r+0x74>
 8010880:	89a3      	ldrh	r3, [r4, #12]
 8010882:	f023 0303 	bic.w	r3, r3, #3
 8010886:	f043 0301 	orr.w	r3, r3, #1
 801088a:	81a3      	strh	r3, [r4, #12]
 801088c:	89a0      	ldrh	r0, [r4, #12]
 801088e:	4305      	orrs	r5, r0
 8010890:	81a5      	strh	r5, [r4, #12]
 8010892:	e7cd      	b.n	8010830 <__smakebuf_r+0x18>
 8010894:	0800faa1 	.word	0x0800faa1

08010898 <__malloc_lock>:
 8010898:	4801      	ldr	r0, [pc, #4]	; (80108a0 <__malloc_lock+0x8>)
 801089a:	f7ff b9e5 	b.w	800fc68 <__retarget_lock_acquire_recursive>
 801089e:	bf00      	nop
 80108a0:	20006d2c 	.word	0x20006d2c

080108a4 <__malloc_unlock>:
 80108a4:	4801      	ldr	r0, [pc, #4]	; (80108ac <__malloc_unlock+0x8>)
 80108a6:	f7ff b9e0 	b.w	800fc6a <__retarget_lock_release_recursive>
 80108aa:	bf00      	nop
 80108ac:	20006d2c 	.word	0x20006d2c

080108b0 <_read_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d07      	ldr	r5, [pc, #28]	; (80108d0 <_read_r+0x20>)
 80108b4:	4604      	mov	r4, r0
 80108b6:	4608      	mov	r0, r1
 80108b8:	4611      	mov	r1, r2
 80108ba:	2200      	movs	r2, #0
 80108bc:	602a      	str	r2, [r5, #0]
 80108be:	461a      	mov	r2, r3
 80108c0:	f7f0 fa48 	bl	8000d54 <_read>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	d102      	bne.n	80108ce <_read_r+0x1e>
 80108c8:	682b      	ldr	r3, [r5, #0]
 80108ca:	b103      	cbz	r3, 80108ce <_read_r+0x1e>
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	20006d24 	.word	0x20006d24

080108d4 <_raise_r>:
 80108d4:	291f      	cmp	r1, #31
 80108d6:	b538      	push	{r3, r4, r5, lr}
 80108d8:	4604      	mov	r4, r0
 80108da:	460d      	mov	r5, r1
 80108dc:	d904      	bls.n	80108e8 <_raise_r+0x14>
 80108de:	2316      	movs	r3, #22
 80108e0:	6003      	str	r3, [r0, #0]
 80108e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108e6:	bd38      	pop	{r3, r4, r5, pc}
 80108e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108ea:	b112      	cbz	r2, 80108f2 <_raise_r+0x1e>
 80108ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108f0:	b94b      	cbnz	r3, 8010906 <_raise_r+0x32>
 80108f2:	4620      	mov	r0, r4
 80108f4:	f000 f830 	bl	8010958 <_getpid_r>
 80108f8:	462a      	mov	r2, r5
 80108fa:	4601      	mov	r1, r0
 80108fc:	4620      	mov	r0, r4
 80108fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010902:	f000 b817 	b.w	8010934 <_kill_r>
 8010906:	2b01      	cmp	r3, #1
 8010908:	d00a      	beq.n	8010920 <_raise_r+0x4c>
 801090a:	1c59      	adds	r1, r3, #1
 801090c:	d103      	bne.n	8010916 <_raise_r+0x42>
 801090e:	2316      	movs	r3, #22
 8010910:	6003      	str	r3, [r0, #0]
 8010912:	2001      	movs	r0, #1
 8010914:	e7e7      	b.n	80108e6 <_raise_r+0x12>
 8010916:	2400      	movs	r4, #0
 8010918:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801091c:	4628      	mov	r0, r5
 801091e:	4798      	blx	r3
 8010920:	2000      	movs	r0, #0
 8010922:	e7e0      	b.n	80108e6 <_raise_r+0x12>

08010924 <raise>:
 8010924:	4b02      	ldr	r3, [pc, #8]	; (8010930 <raise+0xc>)
 8010926:	4601      	mov	r1, r0
 8010928:	6818      	ldr	r0, [r3, #0]
 801092a:	f7ff bfd3 	b.w	80108d4 <_raise_r>
 801092e:	bf00      	nop
 8010930:	20000028 	.word	0x20000028

08010934 <_kill_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	4d07      	ldr	r5, [pc, #28]	; (8010954 <_kill_r+0x20>)
 8010938:	2300      	movs	r3, #0
 801093a:	4604      	mov	r4, r0
 801093c:	4608      	mov	r0, r1
 801093e:	4611      	mov	r1, r2
 8010940:	602b      	str	r3, [r5, #0]
 8010942:	f7f0 f9eb 	bl	8000d1c <_kill>
 8010946:	1c43      	adds	r3, r0, #1
 8010948:	d102      	bne.n	8010950 <_kill_r+0x1c>
 801094a:	682b      	ldr	r3, [r5, #0]
 801094c:	b103      	cbz	r3, 8010950 <_kill_r+0x1c>
 801094e:	6023      	str	r3, [r4, #0]
 8010950:	bd38      	pop	{r3, r4, r5, pc}
 8010952:	bf00      	nop
 8010954:	20006d24 	.word	0x20006d24

08010958 <_getpid_r>:
 8010958:	f7f0 b9d8 	b.w	8000d0c <_getpid>

0801095c <_fstat_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d07      	ldr	r5, [pc, #28]	; (801097c <_fstat_r+0x20>)
 8010960:	2300      	movs	r3, #0
 8010962:	4604      	mov	r4, r0
 8010964:	4608      	mov	r0, r1
 8010966:	4611      	mov	r1, r2
 8010968:	602b      	str	r3, [r5, #0]
 801096a:	f7f0 fa38 	bl	8000dde <_fstat>
 801096e:	1c43      	adds	r3, r0, #1
 8010970:	d102      	bne.n	8010978 <_fstat_r+0x1c>
 8010972:	682b      	ldr	r3, [r5, #0]
 8010974:	b103      	cbz	r3, 8010978 <_fstat_r+0x1c>
 8010976:	6023      	str	r3, [r4, #0]
 8010978:	bd38      	pop	{r3, r4, r5, pc}
 801097a:	bf00      	nop
 801097c:	20006d24 	.word	0x20006d24

08010980 <_isatty_r>:
 8010980:	b538      	push	{r3, r4, r5, lr}
 8010982:	4d06      	ldr	r5, [pc, #24]	; (801099c <_isatty_r+0x1c>)
 8010984:	2300      	movs	r3, #0
 8010986:	4604      	mov	r4, r0
 8010988:	4608      	mov	r0, r1
 801098a:	602b      	str	r3, [r5, #0]
 801098c:	f7f0 fa37 	bl	8000dfe <_isatty>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d102      	bne.n	801099a <_isatty_r+0x1a>
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	b103      	cbz	r3, 801099a <_isatty_r+0x1a>
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	bd38      	pop	{r3, r4, r5, pc}
 801099c:	20006d24 	.word	0x20006d24

080109a0 <_init>:
 80109a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a2:	bf00      	nop
 80109a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109a6:	bc08      	pop	{r3}
 80109a8:	469e      	mov	lr, r3
 80109aa:	4770      	bx	lr

080109ac <_fini>:
 80109ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ae:	bf00      	nop
 80109b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109b2:	bc08      	pop	{r3}
 80109b4:	469e      	mov	lr, r3
 80109b6:	4770      	bx	lr
