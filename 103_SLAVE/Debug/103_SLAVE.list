
103_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003518  08003518  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003518  08003518  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003518  08003518  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  08003590  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003590  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6fd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddf  00000000  00000000  0002c796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018822  00000000  00000000  0002fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c303  00000000  00000000  000484b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2a4  00000000  00000000  000547b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfa59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003954  00000000  00000000  000dfaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003418 	.word	0x08003418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003418 	.word	0x08003418

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b08b      	sub	sp, #44	; 0x2c
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb35 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f859 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8d3 	bl	8000304 <MX_GPIO_Init>
  MX_SPI2_Init();
 800015e:	f000 f89b 	bl	8000298 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t TX_Data[10] = {10,11,12,13,14,15,16,17,18,19};
  uint8_t TX_Data[] = "Hi from SLAVE!";
 8000162:	4b26      	ldr	r3, [pc, #152]	; (80001fc <main+0xb0>)
 8000164:	f107 0418 	add.w	r4, r7, #24
 8000168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016a:	c407      	stmia	r4!, {r0, r1, r2}
 800016c:	8023      	strh	r3, [r4, #0]
 800016e:	3402      	adds	r4, #2
 8000170:	0c1b      	lsrs	r3, r3, #16
 8000172:	7023      	strb	r3, [r4, #0]
  uint8_t RX_Data[18] = {0};
 8000174:	2300      	movs	r3, #0
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	f107 0308 	add.w	r3, r7, #8
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	819a      	strh	r2, [r3, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800018c:	481c      	ldr	r0, [pc, #112]	; (8000200 <main+0xb4>)
 800018e:	f000 fdad 	bl	8000cec <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS во время передачи пин должен быть LOW
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000198:	4819      	ldr	r0, [pc, #100]	; (8000200 <main+0xb4>)
 800019a:	f000 fda7 	bl	8000cec <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi2, RX_Data, sizeof(RX_Data), 5000);
 800019e:	1d39      	adds	r1, r7, #4
 80001a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80001a4:	2212      	movs	r2, #18
 80001a6:	4817      	ldr	r0, [pc, #92]	; (8000204 <main+0xb8>)
 80001a8:	f001 fbae 	bl	8001908 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CS по окончании передачи пин должен быть HIGH
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b2:	4813      	ldr	r0, [pc, #76]	; (8000200 <main+0xb4>)
 80001b4:	f000 fd9a 	bl	8000cec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS во время передачи пин должен быть LOW
 80001b8:	2200      	movs	r2, #0
 80001ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001be:	4810      	ldr	r0, [pc, #64]	; (8000200 <main+0xb4>)
 80001c0:	f000 fd94 	bl	8000cec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, TX_Data, sizeof(TX_Data), 5000);
 80001c4:	f107 0118 	add.w	r1, r7, #24
 80001c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80001cc:	220f      	movs	r2, #15
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <main+0xb8>)
 80001d0:	f001 fa5e 	bl	8001690 <HAL_SPI_Transmit>
		while (hspi2.State == HAL_SPI_STATE_BUSY);  // Ждем пока закончитася передача.
 80001d4:	bf00      	nop
 80001d6:	4b0b      	ldr	r3, [pc, #44]	; (8000204 <main+0xb8>)
 80001d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b02      	cmp	r3, #2
 80001e0:	d0f9      	beq.n	80001d6 <main+0x8a>
		//while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);// Ждем завершения передачи SPI, прежде чем начать следующую передачу
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); // CS по окончании передачи пин должен быть HIGH
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <main+0xb4>)
 80001ea:	f000 fd7f 	bl	8000cec <HAL_GPIO_WritePin>
		printf("\n Resive data is: %s\n", RX_Data);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <main+0xbc>)
 80001f4:	f002 f9b0 	bl	8002558 <iprintf>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS во время передачи пин должен быть LOW
 80001f8:	e7cb      	b.n	8000192 <main+0x46>
 80001fa:	bf00      	nop
 80001fc:	08003448 	.word	0x08003448
 8000200:	40010c00 	.word	0x40010c00
 8000204:	20000098 	.word	0x20000098
 8000208:	08003430 	.word	0x08003430

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f994 	bl	8002548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022e:	2301      	movs	r3, #1
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fd61 	bl	8000d1c <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000260:	f000 f8ae 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ffcc 	bl	800121c <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028a:	f000 f899 	bl	80003c0 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <MX_SPI2_Init+0x64>)
 800029e:	4a18      	ldr	r2, [pc, #96]	; (8000300 <MX_SPI2_Init+0x68>)
 80002a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <MX_SPI2_Init+0x64>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <MX_SPI2_Init+0x64>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ae:	4b13      	ldr	r3, [pc, #76]	; (80002fc <MX_SPI2_Init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <MX_SPI2_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_SPI2_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <MX_SPI2_Init+0x64>)
 80002c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_SPI2_Init+0x64>)
 80002ca:	2220      	movs	r2, #32
 80002cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <MX_SPI2_Init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_SPI2_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <MX_SPI2_Init+0x64>)
 80002dc:	2200      	movs	r2, #0
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_SPI2_Init+0x64>)
 80002e2:	220a      	movs	r2, #10
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_SPI2_Init+0x64>)
 80002e8:	f001 f94e 	bl	8001588 <HAL_SPI_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80002f2:	f000 f865 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000098 	.word	0x20000098
 8000300:	40003800 	.word	0x40003800

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <MX_GPIO_Init+0x90>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <MX_GPIO_Init+0x90>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0308 	and.w	r3, r3, #8
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <MX_GPIO_Init+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000366:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_GPIO_Init+0x94>)
 8000368:	f000 fcc0 	bl	8000cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800036c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037a:	2303      	movs	r3, #3
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_GPIO_Init+0x94>)
 8000386:	f000 fb2d 	bl	80009e4 <HAL_GPIO_Init>

}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40010c00 	.word	0x40010c00

0800039c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d101      	bne.n	80003b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ae:	f000 fa1d 	bl	80007ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40000800 	.word	0x40000800

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <HAL_MspInit+0x5c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a14      	ldr	r2, [pc, #80]	; (8000428 <HAL_MspInit+0x5c>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x5c>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <HAL_MspInit+0x5c>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_MspInit+0x60>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_MspInit+0x60>)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	40010000 	.word	0x40010000

08000430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <HAL_SPI_MspInit+0x8c>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d131      	bne.n	80004b4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 8000456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800045a:	61d3      	str	r3, [r2, #28]
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_SPI_MspInit+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000480:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000484:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <HAL_SPI_MspInit+0x94>)
 8000496:	f000 faa5 	bl	80009e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800049a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <HAL_SPI_MspInit+0x94>)
 80004b0:	f000 fa98 	bl	80009e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40003800 	.word	0x40003800
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010c00 	.word	0x40010c00

080004c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80004d8:	2200      	movs	r2, #0
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	201e      	movs	r0, #30
 80004de:	f000 fa56 	bl	800098e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004e2:	201e      	movs	r0, #30
 80004e4:	f000 fa6f 	bl	80009c6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004e8:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <HAL_InitTick+0xa0>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <HAL_InitTick+0xa0>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	61d3      	str	r3, [r2, #28]
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <HAL_InitTick+0xa0>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000500:	f107 0210 	add.w	r2, r7, #16
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f000 ffee 	bl	80014ec <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000510:	f000 ffd8 	bl	80014c4 <HAL_RCC_GetPCLK1Freq>
 8000514:	4603      	mov	r3, r0
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <HAL_InitTick+0xa4>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9b      	lsrs	r3, r3, #18
 8000524:	3b01      	subs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_InitTick+0xa8>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <HAL_InitTick+0xac>)
 800052c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <HAL_InitTick+0xa8>)
 8000530:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000534:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_InitTick+0xa8>)
 8000538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800053a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_InitTick+0xa8>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <HAL_InitTick+0xa8>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000548:	4809      	ldr	r0, [pc, #36]	; (8000570 <HAL_InitTick+0xa8>)
 800054a:	f001 fd89 	bl	8002060 <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d104      	bne.n	800055e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <HAL_InitTick+0xa8>)
 8000556:	f001 fddb 	bl	8002110 <HAL_TIM_Base_Start_IT>
 800055a:	4603      	mov	r3, r0
 800055c:	e000      	b.n	8000560 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3730      	adds	r7, #48	; 0x30
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	431bde83 	.word	0x431bde83
 8000570:	200000f0 	.word	0x200000f0
 8000574:	40000800 	.word	0x40000800

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <TIM4_IRQHandler+0x10>)
 80005ce:	f001 fdf1 	bl	80021b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000f0 	.word	0x200000f0

080005dc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <ITM_SendChar+0x44>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <ITM_SendChar+0x44>)
 80005ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <ITM_SendChar+0x48>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <ITM_SendChar+0x48>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005fe:	bf00      	nop
 8000600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f8      	beq.n	8000600 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800060e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	e000edfc 	.word	0xe000edfc
 8000624:	e0000e00 	.word	0xe0000e00

08000628 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e00a      	b.n	8000650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800063a:	f3af 8000 	nop.w
 800063e:	4601      	mov	r1, r0
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	b2ca      	uxtb	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbf0      	blt.n	800063a <_read+0x12>
	}

return len;
 8000658:	687b      	ldr	r3, [r7, #4]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e009      	b.n	8000688 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++); // И пропишем наш код для printf
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffad 	bl	80005dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	429a      	cmp	r2, r3
 800068e:	dbf1      	blt.n	8000674 <_write+0x12>
		//LCD_SEND // Если подключен LCD
		//UART_SET // Если подключен UART
	}
	return len;
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <_close>:

int _close(int file)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	return -1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c0:	605a      	str	r2, [r3, #4]
	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <_isatty>:

int _isatty(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
	return 1;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
	return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <_sbrk+0x5c>)
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_sbrk+0x60>)
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <_sbrk+0x64>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <_sbrk+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d207      	bcs.n	800073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800072c:	f001 fee2 	bl	80024f4 <__errno>
 8000730:	4603      	mov	r3, r0
 8000732:	220c      	movs	r2, #12
 8000734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073a:	e009      	b.n	8000750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <_sbrk+0x64>)
 800074c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20005000 	.word	0x20005000
 800075c:	00000400 	.word	0x00000400
 8000760:	2000008c 	.word	0x2000008c
 8000764:	20000150 	.word	0x20000150

08000768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffe5 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f001 feaf 	bl	8002500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fcd3 	bl	800014c <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b0:	08003520 	.word	0x08003520
  ldr r2, =_sbss
 80007b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007b8:	2000014c 	.word	0x2000014c

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f8d1 	bl	8000978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	200f      	movs	r0, #15
 80007d8:	f7ff fe76 	bl	80004c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fdf6 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <HAL_IncTick+0x1c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x20>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <HAL_IncTick+0x20>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000008 	.word	0x20000008
 800080c:	20000138 	.word	0x20000138

08000810 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <HAL_GetTick+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000138 	.word	0x20000138

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <__NVIC_EnableIRQ+0x34>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ff4f 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff64 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ffb2 	bl	8000914 <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff81 	bl	80008c0 <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff57 	bl	8000888 <__NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f6:	e169      	b.n	8000ccc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f8:	2201      	movs	r2, #1
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	f040 8158 	bne.w	8000cc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a9a      	ldr	r2, [pc, #616]	; (8000c84 <HAL_GPIO_Init+0x2a0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d05e      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a20:	4a98      	ldr	r2, [pc, #608]	; (8000c84 <HAL_GPIO_Init+0x2a0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d875      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a26:	4a98      	ldr	r2, [pc, #608]	; (8000c88 <HAL_GPIO_Init+0x2a4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d058      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a2c:	4a96      	ldr	r2, [pc, #600]	; (8000c88 <HAL_GPIO_Init+0x2a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d86f      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a32:	4a96      	ldr	r2, [pc, #600]	; (8000c8c <HAL_GPIO_Init+0x2a8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d052      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a38:	4a94      	ldr	r2, [pc, #592]	; (8000c8c <HAL_GPIO_Init+0x2a8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d869      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a3e:	4a94      	ldr	r2, [pc, #592]	; (8000c90 <HAL_GPIO_Init+0x2ac>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d04c      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a44:	4a92      	ldr	r2, [pc, #584]	; (8000c90 <HAL_GPIO_Init+0x2ac>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d863      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a4a:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d046      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
 8000a50:	4a90      	ldr	r2, [pc, #576]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d85d      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d82a      	bhi.n	8000ab0 <HAL_GPIO_Init+0xcc>
 8000a5a:	2b12      	cmp	r3, #18
 8000a5c:	d859      	bhi.n	8000b12 <HAL_GPIO_Init+0x12e>
 8000a5e:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <HAL_GPIO_Init+0x80>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000adf 	.word	0x08000adf
 8000a68:	08000ab9 	.word	0x08000ab9
 8000a6c:	08000acb 	.word	0x08000acb
 8000a70:	08000b0d 	.word	0x08000b0d
 8000a74:	08000b13 	.word	0x08000b13
 8000a78:	08000b13 	.word	0x08000b13
 8000a7c:	08000b13 	.word	0x08000b13
 8000a80:	08000b13 	.word	0x08000b13
 8000a84:	08000b13 	.word	0x08000b13
 8000a88:	08000b13 	.word	0x08000b13
 8000a8c:	08000b13 	.word	0x08000b13
 8000a90:	08000b13 	.word	0x08000b13
 8000a94:	08000b13 	.word	0x08000b13
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000b13 	.word	0x08000b13
 8000aa0:	08000b13 	.word	0x08000b13
 8000aa4:	08000b13 	.word	0x08000b13
 8000aa8:	08000ac1 	.word	0x08000ac1
 8000aac:	08000ad5 	.word	0x08000ad5
 8000ab0:	4a79      	ldr	r2, [pc, #484]	; (8000c98 <HAL_GPIO_Init+0x2b4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab6:	e02c      	b.n	8000b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e029      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e024      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	3308      	adds	r3, #8
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e01f      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	623b      	str	r3, [r7, #32]
          break;
 8000adc:	e01a      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d102      	bne.n	8000aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	623b      	str	r3, [r7, #32]
          break;
 8000aea:	e013      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d105      	bne.n	8000b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	611a      	str	r2, [r3, #16]
          break;
 8000afe:	e009      	b.n	8000b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b00:	2308      	movs	r3, #8
 8000b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	69fa      	ldr	r2, [r7, #28]
 8000b08:	615a      	str	r2, [r3, #20]
          break;
 8000b0a:	e003      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x130>
          break;
 8000b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2bff      	cmp	r3, #255	; 0xff
 8000b18:	d801      	bhi.n	8000b1e <HAL_GPIO_Init+0x13a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	e001      	b.n	8000b22 <HAL_GPIO_Init+0x13e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3304      	adds	r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2bff      	cmp	r3, #255	; 0xff
 8000b28:	d802      	bhi.n	8000b30 <HAL_GPIO_Init+0x14c>
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	e002      	b.n	8000b36 <HAL_GPIO_Init+0x152>
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	3b08      	subs	r3, #8
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	401a      	ands	r2, r3
 8000b48:	6a39      	ldr	r1, [r7, #32]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	431a      	orrs	r2, r3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 80b1 	beq.w	8000cc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b64:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a4c      	ldr	r2, [pc, #304]	; (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <HAL_GPIO_Init+0x2b8>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b7c:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <HAL_GPIO_Init+0x2bc>)
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3302      	adds	r3, #2
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	220f      	movs	r2, #15
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a40      	ldr	r2, [pc, #256]	; (8000ca4 <HAL_GPIO_Init+0x2c0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d013      	beq.n	8000bd0 <HAL_GPIO_Init+0x1ec>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a3f      	ldr	r2, [pc, #252]	; (8000ca8 <HAL_GPIO_Init+0x2c4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d00d      	beq.n	8000bcc <HAL_GPIO_Init+0x1e8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <HAL_GPIO_Init+0x2c8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d007      	beq.n	8000bc8 <HAL_GPIO_Init+0x1e4>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3d      	ldr	r2, [pc, #244]	; (8000cb0 <HAL_GPIO_Init+0x2cc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d101      	bne.n	8000bc4 <HAL_GPIO_Init+0x1e0>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e004      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <HAL_GPIO_Init+0x1ee>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd4:	f002 0203 	and.w	r2, r2, #3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4093      	lsls	r3, r2
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000be2:	492f      	ldr	r1, [pc, #188]	; (8000ca0 <HAL_GPIO_Init+0x2bc>)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	492c      	ldr	r1, [pc, #176]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	600b      	str	r3, [r1, #0]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4928      	ldr	r1, [pc, #160]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	604b      	str	r3, [r1, #4]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	491e      	ldr	r1, [pc, #120]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	4918      	ldr	r1, [pc, #96]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4914      	ldr	r1, [pc, #80]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d021      	beq.n	8000cb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
 8000c80:	e021      	b.n	8000cc6 <HAL_GPIO_Init+0x2e2>
 8000c82:	bf00      	nop
 8000c84:	10320000 	.word	0x10320000
 8000c88:	10310000 	.word	0x10310000
 8000c8c:	10220000 	.word	0x10220000
 8000c90:	10210000 	.word	0x10210000
 8000c94:	10120000 	.word	0x10120000
 8000c98:	10110000 	.word	0x10110000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40010c00 	.word	0x40010c00
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40011400 	.word	0x40011400
 8000cb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_GPIO_Init+0x304>)
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <HAL_GPIO_Init+0x304>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	3301      	adds	r3, #1
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f47f ae8e 	bne.w	80009f8 <HAL_GPIO_Init+0x14>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	372c      	adds	r7, #44	; 0x2c
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cfc:	787b      	ldrb	r3, [r7, #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d08:	e003      	b.n	8000d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	041a      	lsls	r2, r3, #16
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	611a      	str	r2, [r3, #16]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e26c      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8087 	beq.w	8000e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d3c:	4b92      	ldr	r3, [pc, #584]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d00c      	beq.n	8000d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d48:	4b8f      	ldr	r3, [pc, #572]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d112      	bne.n	8000d7a <HAL_RCC_OscConfig+0x5e>
 8000d54:	4b8c      	ldr	r3, [pc, #560]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d60:	d10b      	bne.n	8000d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d62:	4b89      	ldr	r3, [pc, #548]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d06c      	beq.n	8000e48 <HAL_RCC_OscConfig+0x12c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d168      	bne.n	8000e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e246      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d82:	d106      	bne.n	8000d92 <HAL_RCC_OscConfig+0x76>
 8000d84:	4b80      	ldr	r3, [pc, #512]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a7f      	ldr	r2, [pc, #508]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e02e      	b.n	8000df0 <HAL_RCC_OscConfig+0xd4>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x98>
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a7a      	ldr	r2, [pc, #488]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a77      	ldr	r2, [pc, #476]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e01d      	b.n	8000df0 <HAL_RCC_OscConfig+0xd4>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0xbc>
 8000dbe:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a71      	ldr	r2, [pc, #452]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	4b6f      	ldr	r3, [pc, #444]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a6e      	ldr	r2, [pc, #440]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e00b      	b.n	8000df0 <HAL_RCC_OscConfig+0xd4>
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a6a      	ldr	r2, [pc, #424]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a67      	ldr	r2, [pc, #412]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d013      	beq.n	8000e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fd0a 	bl	8000810 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e00:	f7ff fd06 	bl	8000810 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b64      	cmp	r3, #100	; 0x64
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e1fa      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e12:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0xe4>
 8000e1e:	e014      	b.n	8000e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fcf6 	bl	8000810 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fcf2 	bl	8000810 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1e6      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f0      	bne.n	8000e28 <HAL_RCC_OscConfig+0x10c>
 8000e46:	e000      	b.n	8000e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d063      	beq.n	8000f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e56:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e62:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	2b08      	cmp	r3, #8
 8000e6c:	d11c      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x18c>
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d116      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_RCC_OscConfig+0x176>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d001      	beq.n	8000e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e1ba      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4939      	ldr	r1, [pc, #228]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea6:	e03a      	b.n	8000f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d020      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_RCC_OscConfig+0x270>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fcab 	bl	8000810 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fca7 	bl	8000810 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e19b      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4927      	ldr	r1, [pc, #156]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
 8000ef0:	e015      	b.n	8000f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <HAL_RCC_OscConfig+0x270>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc8a 	bl	8000810 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff fc86 	bl	8000810 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e17a      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f0      	bne.n	8000f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d03a      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d019      	beq.n	8000f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_RCC_OscConfig+0x274>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc6a 	bl	8000810 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc66 	bl	8000810 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e15a      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 faf4 	bl	800154c <RCC_Delay>
 8000f64:	e01c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc50 	bl	8000810 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f72:	e00f      	b.n	8000f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc4c 	bl	8000810 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d908      	bls.n	8000f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e140      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	42420000 	.word	0x42420000
 8000f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f94:	4b9e      	ldr	r3, [pc, #632]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1e9      	bne.n	8000f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 80a6 	beq.w	80010fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb2:	4b97      	ldr	r3, [pc, #604]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10d      	bne.n	8000fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b94      	ldr	r3, [pc, #592]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a93      	ldr	r2, [pc, #588]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b91      	ldr	r3, [pc, #580]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fda:	4b8e      	ldr	r3, [pc, #568]	; (8001214 <HAL_RCC_OscConfig+0x4f8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d118      	bne.n	8001018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe6:	4b8b      	ldr	r3, [pc, #556]	; (8001214 <HAL_RCC_OscConfig+0x4f8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a8a      	ldr	r2, [pc, #552]	; (8001214 <HAL_RCC_OscConfig+0x4f8>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fc0d 	bl	8000810 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ffa:	f7ff fc09 	bl	8000810 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b64      	cmp	r3, #100	; 0x64
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0fd      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100c:	4b81      	ldr	r3, [pc, #516]	; (8001214 <HAL_RCC_OscConfig+0x4f8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d106      	bne.n	800102e <HAL_RCC_OscConfig+0x312>
 8001020:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6213      	str	r3, [r2, #32]
 800102c:	e02d      	b.n	800108a <HAL_RCC_OscConfig+0x36e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x334>
 8001036:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a75      	ldr	r2, [pc, #468]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6213      	str	r3, [r2, #32]
 800104e:	e01c      	b.n	800108a <HAL_RCC_OscConfig+0x36e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b05      	cmp	r3, #5
 8001056:	d10c      	bne.n	8001072 <HAL_RCC_OscConfig+0x356>
 8001058:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a6c      	ldr	r2, [pc, #432]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a69      	ldr	r2, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6213      	str	r3, [r2, #32]
 8001070:	e00b      	b.n	800108a <HAL_RCC_OscConfig+0x36e>
 8001072:	4b67      	ldr	r3, [pc, #412]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a66      	ldr	r2, [pc, #408]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	4b64      	ldr	r3, [pc, #400]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a63      	ldr	r2, [pc, #396]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d015      	beq.n	80010be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fbbd 	bl	8000810 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109a:	f7ff fbb9 	bl	8000810 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e0ab      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b0:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0ee      	beq.n	800109a <HAL_RCC_OscConfig+0x37e>
 80010bc:	e014      	b.n	80010e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010be:	f7ff fba7 	bl	8000810 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fba3 	bl	8000810 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e095      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010dc:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ee      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d105      	bne.n	80010fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a47      	ldr	r2, [pc, #284]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8081 	beq.w	8001206 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001104:	4b42      	ldr	r3, [pc, #264]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d061      	beq.n	80011d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d146      	bne.n	80011a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_RCC_OscConfig+0x4fc>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fb77 	bl	8000810 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001126:	f7ff fb73 	bl	8000810 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e067      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001138:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114c:	d108      	bne.n	8001160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	492d      	ldr	r1, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001160:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a19      	ldr	r1, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	430b      	orrs	r3, r1
 8001172:	4927      	ldr	r1, [pc, #156]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_RCC_OscConfig+0x4fc>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fb47 	bl	8000810 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fb43 	bl	8000810 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e037      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x46a>
 80011a4:	e02f      	b.n	8001206 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_RCC_OscConfig+0x4fc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fb30 	bl	8000810 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff fb2c 	bl	8000810 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e020      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x498>
 80011d2:	e018      	b.n	8001206 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e013      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x4f4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d106      	bne.n	8001202 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fe:	429a      	cmp	r2, r3
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	40007000 	.word	0x40007000
 8001218:	42420060 	.word	0x42420060

0800121c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0d0      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d910      	bls.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0207 	bic.w	r2, r3, #7
 8001246:	4965      	ldr	r1, [pc, #404]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0b8      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800129a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	494d      	ldr	r1, [pc, #308]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d040      	beq.n	800133c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e07f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e073      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06b      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 0203 	bic.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4936      	ldr	r1, [pc, #216]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130c:	f7ff fa80 	bl	8000810 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	e00a      	b.n	800132a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7ff fa7c 	bl	8000810 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e053      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 020c 	and.w	r2, r3, #12
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d1eb      	bne.n	8001314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d210      	bcs.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4922      	ldr	r1, [pc, #136]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e032      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4916      	ldr	r1, [pc, #88]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013aa:	f000 f821 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	490a      	ldr	r1, [pc, #40]	; (80013e4 <HAL_RCC_ClockConfig+0x1c8>)
 80013bc:	5ccb      	ldrb	r3, [r1, r3]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1cc>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_ClockConfig+0x1d0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f87c 	bl	80004c8 <HAL_InitTick>

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08003468 	.word	0x08003468
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	b490      	push	{r4, r7}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013f8:	1d3c      	adds	r4, r7, #4
 80013fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001400:	f240 2301 	movw	r3, #513	; 0x201
 8001404:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b04      	cmp	r3, #4
 8001428:	d002      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x40>
 800142a:	2b08      	cmp	r3, #8
 800142c:	d003      	beq.n	8001436 <HAL_RCC_GetSysClockFreq+0x46>
 800142e:	e02d      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001432:	623b      	str	r3, [r7, #32]
      break;
 8001434:	e02d      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001442:	4413      	add	r3, r2
 8001444:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001448:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	0c5b      	lsrs	r3, r3, #17
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001462:	4413      	add	r3, r2
 8001464:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001468:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800146e:	fb02 f203 	mul.w	r2, r2, r3
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	e004      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001480:	fb02 f303 	mul.w	r3, r2, r3
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	623b      	str	r3, [r7, #32]
      break;
 800148a:	e002      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148e:	623b      	str	r3, [r7, #32]
      break;
 8001490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001492:	6a3b      	ldr	r3, [r7, #32]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bc90      	pop	{r4, r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	08003458 	.word	0x08003458
 80014a4:	40021000 	.word	0x40021000
 80014a8:	007a1200 	.word	0x007a1200
 80014ac:	003d0900 	.word	0x003d0900

080014b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000000 	.word	0x20000000

080014c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c8:	f7ff fff2 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4903      	ldr	r1, [pc, #12]	; (80014e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014da:	5ccb      	ldrb	r3, [r1, r3]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08003478 	.word	0x08003478

080014ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	220f      	movs	r2, #15
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_RCC_GetClockConfig+0x58>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_RCC_GetClockConfig+0x58>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_GetClockConfig+0x58>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_RCC_GetClockConfig+0x58>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	08db      	lsrs	r3, r3, #3
 8001526:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_GetClockConfig+0x5c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40022000 	.word	0x40022000

0800154c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <RCC_Delay+0x34>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <RCC_Delay+0x38>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001568:	bf00      	nop
  }
  while (Delay --);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	60fa      	str	r2, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f9      	bne.n	8001568 <RCC_Delay+0x1c>
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000000 	.word	0x20000000
 8001584:	10624dd3 	.word	0x10624dd3

08001588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e076      	b.n	8001688 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d108      	bne.n	80015b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015aa:	d009      	beq.n	80015c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
 80015b2:	e005      	b.n	80015c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7fe ff28 	bl	8000430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001644:	ea42 0103 	orr.w	r1, r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	0c1a      	lsrs	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f002 0204 	and.w	r2, r2, #4
 8001666:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69da      	ldr	r2, [r3, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001676:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_SPI_Transmit+0x22>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e126      	b.n	8001900 <HAL_SPI_Transmit+0x270>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80016ba:	f7ff f8a9 	bl	8000810 <HAL_GetTick>
 80016be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d002      	beq.n	80016d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
 80016d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80016d4:	e10b      	b.n	80018ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_SPI_Transmit+0x52>
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80016e6:	e102      	b.n	80018ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2203      	movs	r2, #3
 80016ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	88fa      	ldrh	r2, [r7, #6]
 8001706:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800172e:	d10f      	bne.n	8001750 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800173e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800174e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d007      	beq.n	800176e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001776:	d14b      	bne.n	8001810 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_SPI_Transmit+0xf6>
 8001780:	8afb      	ldrh	r3, [r7, #22]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d13e      	bne.n	8001804 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	1c9a      	adds	r2, r3, #2
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017aa:	e02b      	b.n	8001804 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d112      	bne.n	80017e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	1c9a      	adds	r2, r3, #2
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80017de:	e011      	b.n	8001804 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017e0:	f7ff f816 	bl	8000810 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d803      	bhi.n	80017f8 <HAL_SPI_Transmit+0x168>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f6:	d102      	bne.n	80017fe <HAL_SPI_Transmit+0x16e>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001802:	e074      	b.n	80018ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001808:	b29b      	uxth	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ce      	bne.n	80017ac <HAL_SPI_Transmit+0x11c>
 800180e:	e04c      	b.n	80018aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_SPI_Transmit+0x18e>
 8001818:	8afb      	ldrh	r3, [r7, #22]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d140      	bne.n	80018a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	330c      	adds	r3, #12
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001844:	e02c      	b.n	80018a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b02      	cmp	r3, #2
 8001852:	d113      	bne.n	800187c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	330c      	adds	r3, #12
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	86da      	strh	r2, [r3, #54]	; 0x36
 800187a:	e011      	b.n	80018a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800187c:	f7fe ffc8 	bl	8000810 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d803      	bhi.n	8001894 <HAL_SPI_Transmit+0x204>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001892:	d102      	bne.n	800189a <HAL_SPI_Transmit+0x20a>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800189e:	e026      	b.n	80018ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1cd      	bne.n	8001846 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fbb8 	bl	8002024 <SPI_EndRxTxTransaction>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2220      	movs	r2, #32
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	77fb      	strb	r3, [r7, #31]
 80018ea:	e000      	b.n	80018ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80018ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001924:	d112      	bne.n	800194c <HAL_SPI_Receive+0x44>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10e      	bne.n	800194c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2204      	movs	r2, #4
 8001932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001936:	88fa      	ldrh	r2, [r7, #6]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f8f1 	bl	8001b2a <HAL_SPI_TransmitReceive>
 8001948:	4603      	mov	r3, r0
 800194a:	e0ea      	b.n	8001b22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_SPI_Receive+0x52>
 8001956:	2302      	movs	r3, #2
 8001958:	e0e3      	b.n	8001b22 <HAL_SPI_Receive+0x21a>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001962:	f7fe ff55 	bl	8000810 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001974:	2302      	movs	r3, #2
 8001976:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001978:	e0ca      	b.n	8001b10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_Receive+0x7e>
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    goto error;
 800198a:	e0c1      	b.n	8001b10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2204      	movs	r2, #4
 8001990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d2:	d10f      	bne.n	80019f4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d007      	beq.n	8001a12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d162      	bne.n	8001ae0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a1a:	e02e      	b.n	8001a7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d115      	bne.n	8001a56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f103 020c 	add.w	r2, r3, #12
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a54:	e011      	b.n	8001a7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a56:	f7fe fedb 	bl	8000810 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d803      	bhi.n	8001a6e <HAL_SPI_Receive+0x166>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a6c:	d102      	bne.n	8001a74 <HAL_SPI_Receive+0x16c>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a78:	e04a      	b.n	8001b10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1cb      	bne.n	8001a1c <HAL_SPI_Receive+0x114>
 8001a84:	e031      	b.n	8001aea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d113      	bne.n	8001abc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	1c9a      	adds	r2, r3, #2
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001aba:	e011      	b.n	8001ae0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001abc:	f7fe fea8 	bl	8000810 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d803      	bhi.n	8001ad4 <HAL_SPI_Receive+0x1cc>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad2:	d102      	bne.n	8001ada <HAL_SPI_Receive+0x1d2>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ade:	e017      	b.n	8001b10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1cd      	bne.n	8001a86 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fa46 	bl	8001f80 <SPI_EndRxTransaction>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	75fb      	strb	r3, [r7, #23]
 8001b0c:	e000      	b.n	8001b10 <HAL_SPI_Receive+0x208>
  }

error :
 8001b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b08c      	sub	sp, #48	; 0x30
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_SPI_TransmitReceive+0x26>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e18a      	b.n	8001e66 <HAL_SPI_TransmitReceive+0x33c>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b58:	f7fe fe5a 	bl	8000810 <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d00f      	beq.n	8001b9a <HAL_SPI_TransmitReceive+0x70>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b80:	d107      	bne.n	8001b92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_SPI_TransmitReceive+0x68>
 8001b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d003      	beq.n	8001b9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
 8001b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b98:	e15b      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_SPI_TransmitReceive+0x82>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_SPI_TransmitReceive+0x82>
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d103      	bne.n	8001bb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bb2:	e14e      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d003      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	887a      	ldrh	r2, [r7, #2]
 8001bde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c08:	2b40      	cmp	r3, #64	; 0x40
 8001c0a:	d007      	beq.n	8001c1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c24:	d178      	bne.n	8001d18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_SPI_TransmitReceive+0x10a>
 8001c2e:	8b7b      	ldrh	r3, [r7, #26]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d166      	bne.n	8001d02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	1c9a      	adds	r2, r3, #2
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c58:	e053      	b.n	8001d02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d11b      	bne.n	8001ca0 <HAL_SPI_TransmitReceive+0x176>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_SPI_TransmitReceive+0x176>
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d113      	bne.n	8001ca0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	1c9a      	adds	r2, r3, #2
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d119      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x1b8>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d014      	beq.n	8001ce2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	1c9a      	adds	r2, r3, #2
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ce2:	f7fe fd95 	bl	8000810 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d807      	bhi.n	8001d02 <HAL_SPI_TransmitReceive+0x1d8>
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf8:	d003      	beq.n	8001d02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d00:	e0a7      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1a6      	bne.n	8001c5a <HAL_SPI_TransmitReceive+0x130>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1a1      	bne.n	8001c5a <HAL_SPI_TransmitReceive+0x130>
 8001d16:	e07c      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_SPI_TransmitReceive+0x1fc>
 8001d20:	8b7b      	ldrh	r3, [r7, #26]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d16b      	bne.n	8001dfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d4c:	e057      	b.n	8001dfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d11c      	bne.n	8001d96 <HAL_SPI_TransmitReceive+0x26c>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d017      	beq.n	8001d96 <HAL_SPI_TransmitReceive+0x26c>
 8001d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d114      	bne.n	8001d96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	330c      	adds	r3, #12
 8001d76:	7812      	ldrb	r2, [r2, #0]
 8001d78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d119      	bne.n	8001dd8 <HAL_SPI_TransmitReceive+0x2ae>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d014      	beq.n	8001dd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dd8:	f7fe fd1a 	bl	8000810 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d803      	bhi.n	8001df0 <HAL_SPI_TransmitReceive+0x2c6>
 8001de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dee:	d102      	bne.n	8001df6 <HAL_SPI_TransmitReceive+0x2cc>
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001dfc:	e029      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1a2      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x224>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d19d      	bne.n	8001d4e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f904 	bl	8002024 <SPI_EndRxTxTransaction>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e2e:	e010      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	e000      	b.n	8001e52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e80:	f7fe fcc6 	bl	8000810 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e90:	f7fe fcbe 	bl	8000810 <HAL_GetTick>
 8001e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	015b      	lsls	r3, r3, #5
 8001e9c:	0d1b      	lsrs	r3, r3, #20
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ea6:	e054      	b.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eae:	d050      	beq.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eb0:	f7fe fcae 	bl	8000810 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d902      	bls.n	8001ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d13d      	bne.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ede:	d111      	bne.n	8001f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee8:	d004      	beq.n	8001ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d107      	bne.n	8001f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0c:	d10f      	bne.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e017      	b.n	8001f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d19b      	bne.n	8001ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000

08001f80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f94:	d111      	bne.n	8001fba <SPI_EndRxTransaction+0x3a>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f9e:	d004      	beq.n	8001faa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	d107      	bne.n	8001fba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fc2:	d117      	bne.n	8001ff4 <SPI_EndRxTransaction+0x74>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fcc:	d112      	bne.n	8001ff4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff ff49 	bl	8001e70 <SPI_WaitFlagStateUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01a      	beq.n	800201a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e013      	b.n	800201c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f7ff ff36 	bl	8001e70 <SPI_WaitFlagStateUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e000      	b.n	800201c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2200      	movs	r2, #0
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff ff18 	bl	8001e70 <SPI_WaitFlagStateUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0220 	orr.w	r2, r3, #32
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e000      	b.n	8002058 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e041      	b.n	80020f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f839 	bl	80020fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3304      	adds	r3, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f000 f9b4 	bl	800240c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d001      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e03a      	b.n	800219e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d009      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_TIM_Base_Start_IT+0x9c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d111      	bne.n	800218c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b06      	cmp	r3, #6
 8002178:	d010      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	e007      	b.n	800219c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800

080021b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0202 	mvn.w	r2, #2
 80021e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8ed 	bl	80023d6 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8e0 	bl	80023c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8ef 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b04      	cmp	r3, #4
 800221c:	d122      	bne.n	8002264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d11b      	bne.n	8002264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0204 	mvn.w	r2, #4
 8002234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c3 	bl	80023d6 <HAL_TIM_IC_CaptureCallback>
 8002250:	e005      	b.n	800225e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8b6 	bl	80023c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f8c5 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b08      	cmp	r3, #8
 8002270:	d122      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b08      	cmp	r3, #8
 800227e:	d11b      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0208 	mvn.w	r2, #8
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f899 	bl	80023d6 <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f88c 	bl	80023c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f89b 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d122      	bne.n	800230c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d11b      	bne.n	800230c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0210 	mvn.w	r2, #16
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2208      	movs	r2, #8
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f86f 	bl	80023d6 <HAL_TIM_IC_CaptureCallback>
 80022f8:	e005      	b.n	8002306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f862 	bl	80023c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f871 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0201 	mvn.w	r2, #1
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe f832 	bl	800039c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b80      	cmp	r3, #128	; 0x80
 8002344:	d10e      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d107      	bne.n	8002364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800235c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f8bf 	bl	80024e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d107      	bne.n	8002390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f835 	bl	80023fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b20      	cmp	r3, #32
 800239c:	d10e      	bne.n	80023bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0220 	mvn.w	r2, #32
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f88a 	bl	80024d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <TIM_Base_SetConfig+0xb8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00b      	beq.n	800243c <TIM_Base_SetConfig+0x30>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242a:	d007      	beq.n	800243c <TIM_Base_SetConfig+0x30>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <TIM_Base_SetConfig+0xbc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0x30>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a25      	ldr	r2, [pc, #148]	; (80024cc <TIM_Base_SetConfig+0xc0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <TIM_Base_SetConfig+0xb8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00b      	beq.n	800246e <TIM_Base_SetConfig+0x62>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0x62>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <TIM_Base_SetConfig+0xbc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0x62>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <TIM_Base_SetConfig+0xc0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d108      	bne.n	8002480 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <TIM_Base_SetConfig+0xb8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	615a      	str	r2, [r3, #20]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800

080024d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <__errno>:
 80024f4:	4b01      	ldr	r3, [pc, #4]	; (80024fc <__errno+0x8>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	2000000c 	.word	0x2000000c

08002500 <__libc_init_array>:
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	2600      	movs	r6, #0
 8002504:	4d0c      	ldr	r5, [pc, #48]	; (8002538 <__libc_init_array+0x38>)
 8002506:	4c0d      	ldr	r4, [pc, #52]	; (800253c <__libc_init_array+0x3c>)
 8002508:	1b64      	subs	r4, r4, r5
 800250a:	10a4      	asrs	r4, r4, #2
 800250c:	42a6      	cmp	r6, r4
 800250e:	d109      	bne.n	8002524 <__libc_init_array+0x24>
 8002510:	f000 ff82 	bl	8003418 <_init>
 8002514:	2600      	movs	r6, #0
 8002516:	4d0a      	ldr	r5, [pc, #40]	; (8002540 <__libc_init_array+0x40>)
 8002518:	4c0a      	ldr	r4, [pc, #40]	; (8002544 <__libc_init_array+0x44>)
 800251a:	1b64      	subs	r4, r4, r5
 800251c:	10a4      	asrs	r4, r4, #2
 800251e:	42a6      	cmp	r6, r4
 8002520:	d105      	bne.n	800252e <__libc_init_array+0x2e>
 8002522:	bd70      	pop	{r4, r5, r6, pc}
 8002524:	f855 3b04 	ldr.w	r3, [r5], #4
 8002528:	4798      	blx	r3
 800252a:	3601      	adds	r6, #1
 800252c:	e7ee      	b.n	800250c <__libc_init_array+0xc>
 800252e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002532:	4798      	blx	r3
 8002534:	3601      	adds	r6, #1
 8002536:	e7f2      	b.n	800251e <__libc_init_array+0x1e>
 8002538:	08003518 	.word	0x08003518
 800253c:	08003518 	.word	0x08003518
 8002540:	08003518 	.word	0x08003518
 8002544:	0800351c 	.word	0x0800351c

08002548 <memset>:
 8002548:	4603      	mov	r3, r0
 800254a:	4402      	add	r2, r0
 800254c:	4293      	cmp	r3, r2
 800254e:	d100      	bne.n	8002552 <memset+0xa>
 8002550:	4770      	bx	lr
 8002552:	f803 1b01 	strb.w	r1, [r3], #1
 8002556:	e7f9      	b.n	800254c <memset+0x4>

08002558 <iprintf>:
 8002558:	b40f      	push	{r0, r1, r2, r3}
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <iprintf+0x2c>)
 800255c:	b513      	push	{r0, r1, r4, lr}
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	b124      	cbz	r4, 800256c <iprintf+0x14>
 8002562:	69a3      	ldr	r3, [r4, #24]
 8002564:	b913      	cbnz	r3, 800256c <iprintf+0x14>
 8002566:	4620      	mov	r0, r4
 8002568:	f000 f866 	bl	8002638 <__sinit>
 800256c:	ab05      	add	r3, sp, #20
 800256e:	4620      	mov	r0, r4
 8002570:	9a04      	ldr	r2, [sp, #16]
 8002572:	68a1      	ldr	r1, [r4, #8]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f000 f981 	bl	800287c <_vfiprintf_r>
 800257a:	b002      	add	sp, #8
 800257c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002580:	b004      	add	sp, #16
 8002582:	4770      	bx	lr
 8002584:	2000000c 	.word	0x2000000c

08002588 <std>:
 8002588:	2300      	movs	r3, #0
 800258a:	b510      	push	{r4, lr}
 800258c:	4604      	mov	r4, r0
 800258e:	e9c0 3300 	strd	r3, r3, [r0]
 8002592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002596:	6083      	str	r3, [r0, #8]
 8002598:	8181      	strh	r1, [r0, #12]
 800259a:	6643      	str	r3, [r0, #100]	; 0x64
 800259c:	81c2      	strh	r2, [r0, #14]
 800259e:	6183      	str	r3, [r0, #24]
 80025a0:	4619      	mov	r1, r3
 80025a2:	2208      	movs	r2, #8
 80025a4:	305c      	adds	r0, #92	; 0x5c
 80025a6:	f7ff ffcf 	bl	8002548 <memset>
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <std+0x38>)
 80025ac:	6224      	str	r4, [r4, #32]
 80025ae:	6263      	str	r3, [r4, #36]	; 0x24
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <std+0x3c>)
 80025b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <std+0x40>)
 80025b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <std+0x44>)
 80025ba:	6323      	str	r3, [r4, #48]	; 0x30
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	bf00      	nop
 80025c0:	08002e29 	.word	0x08002e29
 80025c4:	08002e4b 	.word	0x08002e4b
 80025c8:	08002e83 	.word	0x08002e83
 80025cc:	08002ea7 	.word	0x08002ea7

080025d0 <_cleanup_r>:
 80025d0:	4901      	ldr	r1, [pc, #4]	; (80025d8 <_cleanup_r+0x8>)
 80025d2:	f000 b8af 	b.w	8002734 <_fwalk_reent>
 80025d6:	bf00      	nop
 80025d8:	08003181 	.word	0x08003181

080025dc <__sfmoreglue>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	2568      	movs	r5, #104	; 0x68
 80025e0:	1e4a      	subs	r2, r1, #1
 80025e2:	4355      	muls	r5, r2
 80025e4:	460e      	mov	r6, r1
 80025e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025ea:	f000 f8c5 	bl	8002778 <_malloc_r>
 80025ee:	4604      	mov	r4, r0
 80025f0:	b140      	cbz	r0, 8002604 <__sfmoreglue+0x28>
 80025f2:	2100      	movs	r1, #0
 80025f4:	e9c0 1600 	strd	r1, r6, [r0]
 80025f8:	300c      	adds	r0, #12
 80025fa:	60a0      	str	r0, [r4, #8]
 80025fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002600:	f7ff ffa2 	bl	8002548 <memset>
 8002604:	4620      	mov	r0, r4
 8002606:	bd70      	pop	{r4, r5, r6, pc}

08002608 <__sfp_lock_acquire>:
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <__sfp_lock_acquire+0x8>)
 800260a:	f000 b8b3 	b.w	8002774 <__retarget_lock_acquire_recursive>
 800260e:	bf00      	nop
 8002610:	20000144 	.word	0x20000144

08002614 <__sfp_lock_release>:
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <__sfp_lock_release+0x8>)
 8002616:	f000 b8ae 	b.w	8002776 <__retarget_lock_release_recursive>
 800261a:	bf00      	nop
 800261c:	20000144 	.word	0x20000144

08002620 <__sinit_lock_acquire>:
 8002620:	4801      	ldr	r0, [pc, #4]	; (8002628 <__sinit_lock_acquire+0x8>)
 8002622:	f000 b8a7 	b.w	8002774 <__retarget_lock_acquire_recursive>
 8002626:	bf00      	nop
 8002628:	2000013f 	.word	0x2000013f

0800262c <__sinit_lock_release>:
 800262c:	4801      	ldr	r0, [pc, #4]	; (8002634 <__sinit_lock_release+0x8>)
 800262e:	f000 b8a2 	b.w	8002776 <__retarget_lock_release_recursive>
 8002632:	bf00      	nop
 8002634:	2000013f 	.word	0x2000013f

08002638 <__sinit>:
 8002638:	b510      	push	{r4, lr}
 800263a:	4604      	mov	r4, r0
 800263c:	f7ff fff0 	bl	8002620 <__sinit_lock_acquire>
 8002640:	69a3      	ldr	r3, [r4, #24]
 8002642:	b11b      	cbz	r3, 800264c <__sinit+0x14>
 8002644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002648:	f7ff bff0 	b.w	800262c <__sinit_lock_release>
 800264c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002650:	6523      	str	r3, [r4, #80]	; 0x50
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <__sinit+0x68>)
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <__sinit+0x6c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	62a2      	str	r2, [r4, #40]	; 0x28
 800265a:	42a3      	cmp	r3, r4
 800265c:	bf08      	it	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	4620      	mov	r0, r4
 8002662:	bf08      	it	eq
 8002664:	61a3      	streq	r3, [r4, #24]
 8002666:	f000 f81f 	bl	80026a8 <__sfp>
 800266a:	6060      	str	r0, [r4, #4]
 800266c:	4620      	mov	r0, r4
 800266e:	f000 f81b 	bl	80026a8 <__sfp>
 8002672:	60a0      	str	r0, [r4, #8]
 8002674:	4620      	mov	r0, r4
 8002676:	f000 f817 	bl	80026a8 <__sfp>
 800267a:	2200      	movs	r2, #0
 800267c:	2104      	movs	r1, #4
 800267e:	60e0      	str	r0, [r4, #12]
 8002680:	6860      	ldr	r0, [r4, #4]
 8002682:	f7ff ff81 	bl	8002588 <std>
 8002686:	2201      	movs	r2, #1
 8002688:	2109      	movs	r1, #9
 800268a:	68a0      	ldr	r0, [r4, #8]
 800268c:	f7ff ff7c 	bl	8002588 <std>
 8002690:	2202      	movs	r2, #2
 8002692:	2112      	movs	r1, #18
 8002694:	68e0      	ldr	r0, [r4, #12]
 8002696:	f7ff ff77 	bl	8002588 <std>
 800269a:	2301      	movs	r3, #1
 800269c:	61a3      	str	r3, [r4, #24]
 800269e:	e7d1      	b.n	8002644 <__sinit+0xc>
 80026a0:	08003480 	.word	0x08003480
 80026a4:	080025d1 	.word	0x080025d1

080026a8 <__sfp>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	4607      	mov	r7, r0
 80026ac:	f7ff ffac 	bl	8002608 <__sfp_lock_acquire>
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <__sfp+0x84>)
 80026b2:	681e      	ldr	r6, [r3, #0]
 80026b4:	69b3      	ldr	r3, [r6, #24]
 80026b6:	b913      	cbnz	r3, 80026be <__sfp+0x16>
 80026b8:	4630      	mov	r0, r6
 80026ba:	f7ff ffbd 	bl	8002638 <__sinit>
 80026be:	3648      	adds	r6, #72	; 0x48
 80026c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	d503      	bpl.n	80026d0 <__sfp+0x28>
 80026c8:	6833      	ldr	r3, [r6, #0]
 80026ca:	b30b      	cbz	r3, 8002710 <__sfp+0x68>
 80026cc:	6836      	ldr	r6, [r6, #0]
 80026ce:	e7f7      	b.n	80026c0 <__sfp+0x18>
 80026d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026d4:	b9d5      	cbnz	r5, 800270c <__sfp+0x64>
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <__sfp+0x88>)
 80026d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026dc:	60e3      	str	r3, [r4, #12]
 80026de:	6665      	str	r5, [r4, #100]	; 0x64
 80026e0:	f000 f847 	bl	8002772 <__retarget_lock_init_recursive>
 80026e4:	f7ff ff96 	bl	8002614 <__sfp_lock_release>
 80026e8:	2208      	movs	r2, #8
 80026ea:	4629      	mov	r1, r5
 80026ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026f4:	6025      	str	r5, [r4, #0]
 80026f6:	61a5      	str	r5, [r4, #24]
 80026f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026fc:	f7ff ff24 	bl	8002548 <memset>
 8002700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002708:	4620      	mov	r0, r4
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800270c:	3468      	adds	r4, #104	; 0x68
 800270e:	e7d9      	b.n	80026c4 <__sfp+0x1c>
 8002710:	2104      	movs	r1, #4
 8002712:	4638      	mov	r0, r7
 8002714:	f7ff ff62 	bl	80025dc <__sfmoreglue>
 8002718:	4604      	mov	r4, r0
 800271a:	6030      	str	r0, [r6, #0]
 800271c:	2800      	cmp	r0, #0
 800271e:	d1d5      	bne.n	80026cc <__sfp+0x24>
 8002720:	f7ff ff78 	bl	8002614 <__sfp_lock_release>
 8002724:	230c      	movs	r3, #12
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	e7ee      	b.n	8002708 <__sfp+0x60>
 800272a:	bf00      	nop
 800272c:	08003480 	.word	0x08003480
 8002730:	ffff0001 	.word	0xffff0001

08002734 <_fwalk_reent>:
 8002734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002738:	4606      	mov	r6, r0
 800273a:	4688      	mov	r8, r1
 800273c:	2700      	movs	r7, #0
 800273e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002746:	f1b9 0901 	subs.w	r9, r9, #1
 800274a:	d505      	bpl.n	8002758 <_fwalk_reent+0x24>
 800274c:	6824      	ldr	r4, [r4, #0]
 800274e:	2c00      	cmp	r4, #0
 8002750:	d1f7      	bne.n	8002742 <_fwalk_reent+0xe>
 8002752:	4638      	mov	r0, r7
 8002754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002758:	89ab      	ldrh	r3, [r5, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d907      	bls.n	800276e <_fwalk_reent+0x3a>
 800275e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002762:	3301      	adds	r3, #1
 8002764:	d003      	beq.n	800276e <_fwalk_reent+0x3a>
 8002766:	4629      	mov	r1, r5
 8002768:	4630      	mov	r0, r6
 800276a:	47c0      	blx	r8
 800276c:	4307      	orrs	r7, r0
 800276e:	3568      	adds	r5, #104	; 0x68
 8002770:	e7e9      	b.n	8002746 <_fwalk_reent+0x12>

08002772 <__retarget_lock_init_recursive>:
 8002772:	4770      	bx	lr

08002774 <__retarget_lock_acquire_recursive>:
 8002774:	4770      	bx	lr

08002776 <__retarget_lock_release_recursive>:
 8002776:	4770      	bx	lr

08002778 <_malloc_r>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	1ccd      	adds	r5, r1, #3
 800277c:	f025 0503 	bic.w	r5, r5, #3
 8002780:	3508      	adds	r5, #8
 8002782:	2d0c      	cmp	r5, #12
 8002784:	bf38      	it	cc
 8002786:	250c      	movcc	r5, #12
 8002788:	2d00      	cmp	r5, #0
 800278a:	4606      	mov	r6, r0
 800278c:	db01      	blt.n	8002792 <_malloc_r+0x1a>
 800278e:	42a9      	cmp	r1, r5
 8002790:	d903      	bls.n	800279a <_malloc_r+0x22>
 8002792:	230c      	movs	r3, #12
 8002794:	6033      	str	r3, [r6, #0]
 8002796:	2000      	movs	r0, #0
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279a:	f000 fdb1 	bl	8003300 <__malloc_lock>
 800279e:	4921      	ldr	r1, [pc, #132]	; (8002824 <_malloc_r+0xac>)
 80027a0:	680a      	ldr	r2, [r1, #0]
 80027a2:	4614      	mov	r4, r2
 80027a4:	b99c      	cbnz	r4, 80027ce <_malloc_r+0x56>
 80027a6:	4f20      	ldr	r7, [pc, #128]	; (8002828 <_malloc_r+0xb0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b923      	cbnz	r3, 80027b6 <_malloc_r+0x3e>
 80027ac:	4621      	mov	r1, r4
 80027ae:	4630      	mov	r0, r6
 80027b0:	f000 fb2a 	bl	8002e08 <_sbrk_r>
 80027b4:	6038      	str	r0, [r7, #0]
 80027b6:	4629      	mov	r1, r5
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 fb25 	bl	8002e08 <_sbrk_r>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	d123      	bne.n	800280a <_malloc_r+0x92>
 80027c2:	230c      	movs	r3, #12
 80027c4:	4630      	mov	r0, r6
 80027c6:	6033      	str	r3, [r6, #0]
 80027c8:	f000 fda0 	bl	800330c <__malloc_unlock>
 80027cc:	e7e3      	b.n	8002796 <_malloc_r+0x1e>
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	1b5b      	subs	r3, r3, r5
 80027d2:	d417      	bmi.n	8002804 <_malloc_r+0x8c>
 80027d4:	2b0b      	cmp	r3, #11
 80027d6:	d903      	bls.n	80027e0 <_malloc_r+0x68>
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	441c      	add	r4, r3
 80027dc:	6025      	str	r5, [r4, #0]
 80027de:	e004      	b.n	80027ea <_malloc_r+0x72>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	42a2      	cmp	r2, r4
 80027e4:	bf0c      	ite	eq
 80027e6:	600b      	streq	r3, [r1, #0]
 80027e8:	6053      	strne	r3, [r2, #4]
 80027ea:	4630      	mov	r0, r6
 80027ec:	f000 fd8e 	bl	800330c <__malloc_unlock>
 80027f0:	f104 000b 	add.w	r0, r4, #11
 80027f4:	1d23      	adds	r3, r4, #4
 80027f6:	f020 0007 	bic.w	r0, r0, #7
 80027fa:	1ac2      	subs	r2, r0, r3
 80027fc:	d0cc      	beq.n	8002798 <_malloc_r+0x20>
 80027fe:	1a1b      	subs	r3, r3, r0
 8002800:	50a3      	str	r3, [r4, r2]
 8002802:	e7c9      	b.n	8002798 <_malloc_r+0x20>
 8002804:	4622      	mov	r2, r4
 8002806:	6864      	ldr	r4, [r4, #4]
 8002808:	e7cc      	b.n	80027a4 <_malloc_r+0x2c>
 800280a:	1cc4      	adds	r4, r0, #3
 800280c:	f024 0403 	bic.w	r4, r4, #3
 8002810:	42a0      	cmp	r0, r4
 8002812:	d0e3      	beq.n	80027dc <_malloc_r+0x64>
 8002814:	1a21      	subs	r1, r4, r0
 8002816:	4630      	mov	r0, r6
 8002818:	f000 faf6 	bl	8002e08 <_sbrk_r>
 800281c:	3001      	adds	r0, #1
 800281e:	d1dd      	bne.n	80027dc <_malloc_r+0x64>
 8002820:	e7cf      	b.n	80027c2 <_malloc_r+0x4a>
 8002822:	bf00      	nop
 8002824:	20000090 	.word	0x20000090
 8002828:	20000094 	.word	0x20000094

0800282c <__sfputc_r>:
 800282c:	6893      	ldr	r3, [r2, #8]
 800282e:	b410      	push	{r4}
 8002830:	3b01      	subs	r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	6093      	str	r3, [r2, #8]
 8002836:	da07      	bge.n	8002848 <__sfputc_r+0x1c>
 8002838:	6994      	ldr	r4, [r2, #24]
 800283a:	42a3      	cmp	r3, r4
 800283c:	db01      	blt.n	8002842 <__sfputc_r+0x16>
 800283e:	290a      	cmp	r1, #10
 8002840:	d102      	bne.n	8002848 <__sfputc_r+0x1c>
 8002842:	bc10      	pop	{r4}
 8002844:	f000 bb34 	b.w	8002eb0 <__swbuf_r>
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	1c58      	adds	r0, r3, #1
 800284c:	6010      	str	r0, [r2, #0]
 800284e:	7019      	strb	r1, [r3, #0]
 8002850:	4608      	mov	r0, r1
 8002852:	bc10      	pop	{r4}
 8002854:	4770      	bx	lr

08002856 <__sfputs_r>:
 8002856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002858:	4606      	mov	r6, r0
 800285a:	460f      	mov	r7, r1
 800285c:	4614      	mov	r4, r2
 800285e:	18d5      	adds	r5, r2, r3
 8002860:	42ac      	cmp	r4, r5
 8002862:	d101      	bne.n	8002868 <__sfputs_r+0x12>
 8002864:	2000      	movs	r0, #0
 8002866:	e007      	b.n	8002878 <__sfputs_r+0x22>
 8002868:	463a      	mov	r2, r7
 800286a:	4630      	mov	r0, r6
 800286c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002870:	f7ff ffdc 	bl	800282c <__sfputc_r>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d1f3      	bne.n	8002860 <__sfputs_r+0xa>
 8002878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800287c <_vfiprintf_r>:
 800287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002880:	460d      	mov	r5, r1
 8002882:	4614      	mov	r4, r2
 8002884:	4698      	mov	r8, r3
 8002886:	4606      	mov	r6, r0
 8002888:	b09d      	sub	sp, #116	; 0x74
 800288a:	b118      	cbz	r0, 8002894 <_vfiprintf_r+0x18>
 800288c:	6983      	ldr	r3, [r0, #24]
 800288e:	b90b      	cbnz	r3, 8002894 <_vfiprintf_r+0x18>
 8002890:	f7ff fed2 	bl	8002638 <__sinit>
 8002894:	4b89      	ldr	r3, [pc, #548]	; (8002abc <_vfiprintf_r+0x240>)
 8002896:	429d      	cmp	r5, r3
 8002898:	d11b      	bne.n	80028d2 <_vfiprintf_r+0x56>
 800289a:	6875      	ldr	r5, [r6, #4]
 800289c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800289e:	07d9      	lsls	r1, r3, #31
 80028a0:	d405      	bmi.n	80028ae <_vfiprintf_r+0x32>
 80028a2:	89ab      	ldrh	r3, [r5, #12]
 80028a4:	059a      	lsls	r2, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_vfiprintf_r+0x32>
 80028a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028aa:	f7ff ff63 	bl	8002774 <__retarget_lock_acquire_recursive>
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	d501      	bpl.n	80028b8 <_vfiprintf_r+0x3c>
 80028b4:	692b      	ldr	r3, [r5, #16]
 80028b6:	b9eb      	cbnz	r3, 80028f4 <_vfiprintf_r+0x78>
 80028b8:	4629      	mov	r1, r5
 80028ba:	4630      	mov	r0, r6
 80028bc:	f000 fb5c 	bl	8002f78 <__swsetup_r>
 80028c0:	b1c0      	cbz	r0, 80028f4 <_vfiprintf_r+0x78>
 80028c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028c4:	07dc      	lsls	r4, r3, #31
 80028c6:	d50e      	bpl.n	80028e6 <_vfiprintf_r+0x6a>
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028cc:	b01d      	add	sp, #116	; 0x74
 80028ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028d2:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <_vfiprintf_r+0x244>)
 80028d4:	429d      	cmp	r5, r3
 80028d6:	d101      	bne.n	80028dc <_vfiprintf_r+0x60>
 80028d8:	68b5      	ldr	r5, [r6, #8]
 80028da:	e7df      	b.n	800289c <_vfiprintf_r+0x20>
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <_vfiprintf_r+0x248>)
 80028de:	429d      	cmp	r5, r3
 80028e0:	bf08      	it	eq
 80028e2:	68f5      	ldreq	r5, [r6, #12]
 80028e4:	e7da      	b.n	800289c <_vfiprintf_r+0x20>
 80028e6:	89ab      	ldrh	r3, [r5, #12]
 80028e8:	0598      	lsls	r0, r3, #22
 80028ea:	d4ed      	bmi.n	80028c8 <_vfiprintf_r+0x4c>
 80028ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028ee:	f7ff ff42 	bl	8002776 <__retarget_lock_release_recursive>
 80028f2:	e7e9      	b.n	80028c8 <_vfiprintf_r+0x4c>
 80028f4:	2300      	movs	r3, #0
 80028f6:	9309      	str	r3, [sp, #36]	; 0x24
 80028f8:	2320      	movs	r3, #32
 80028fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028fe:	2330      	movs	r3, #48	; 0x30
 8002900:	f04f 0901 	mov.w	r9, #1
 8002904:	f8cd 800c 	str.w	r8, [sp, #12]
 8002908:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ac8 <_vfiprintf_r+0x24c>
 800290c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002910:	4623      	mov	r3, r4
 8002912:	469a      	mov	sl, r3
 8002914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002918:	b10a      	cbz	r2, 800291e <_vfiprintf_r+0xa2>
 800291a:	2a25      	cmp	r2, #37	; 0x25
 800291c:	d1f9      	bne.n	8002912 <_vfiprintf_r+0x96>
 800291e:	ebba 0b04 	subs.w	fp, sl, r4
 8002922:	d00b      	beq.n	800293c <_vfiprintf_r+0xc0>
 8002924:	465b      	mov	r3, fp
 8002926:	4622      	mov	r2, r4
 8002928:	4629      	mov	r1, r5
 800292a:	4630      	mov	r0, r6
 800292c:	f7ff ff93 	bl	8002856 <__sfputs_r>
 8002930:	3001      	adds	r0, #1
 8002932:	f000 80aa 	beq.w	8002a8a <_vfiprintf_r+0x20e>
 8002936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002938:	445a      	add	r2, fp
 800293a:	9209      	str	r2, [sp, #36]	; 0x24
 800293c:	f89a 3000 	ldrb.w	r3, [sl]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a2 	beq.w	8002a8a <_vfiprintf_r+0x20e>
 8002946:	2300      	movs	r3, #0
 8002948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800294c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002950:	f10a 0a01 	add.w	sl, sl, #1
 8002954:	9304      	str	r3, [sp, #16]
 8002956:	9307      	str	r3, [sp, #28]
 8002958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800295c:	931a      	str	r3, [sp, #104]	; 0x68
 800295e:	4654      	mov	r4, sl
 8002960:	2205      	movs	r2, #5
 8002962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002966:	4858      	ldr	r0, [pc, #352]	; (8002ac8 <_vfiprintf_r+0x24c>)
 8002968:	f000 fcbc 	bl	80032e4 <memchr>
 800296c:	9a04      	ldr	r2, [sp, #16]
 800296e:	b9d8      	cbnz	r0, 80029a8 <_vfiprintf_r+0x12c>
 8002970:	06d1      	lsls	r1, r2, #27
 8002972:	bf44      	itt	mi
 8002974:	2320      	movmi	r3, #32
 8002976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800297a:	0713      	lsls	r3, r2, #28
 800297c:	bf44      	itt	mi
 800297e:	232b      	movmi	r3, #43	; 0x2b
 8002980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002984:	f89a 3000 	ldrb.w	r3, [sl]
 8002988:	2b2a      	cmp	r3, #42	; 0x2a
 800298a:	d015      	beq.n	80029b8 <_vfiprintf_r+0x13c>
 800298c:	4654      	mov	r4, sl
 800298e:	2000      	movs	r0, #0
 8002990:	f04f 0c0a 	mov.w	ip, #10
 8002994:	9a07      	ldr	r2, [sp, #28]
 8002996:	4621      	mov	r1, r4
 8002998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800299c:	3b30      	subs	r3, #48	; 0x30
 800299e:	2b09      	cmp	r3, #9
 80029a0:	d94e      	bls.n	8002a40 <_vfiprintf_r+0x1c4>
 80029a2:	b1b0      	cbz	r0, 80029d2 <_vfiprintf_r+0x156>
 80029a4:	9207      	str	r2, [sp, #28]
 80029a6:	e014      	b.n	80029d2 <_vfiprintf_r+0x156>
 80029a8:	eba0 0308 	sub.w	r3, r0, r8
 80029ac:	fa09 f303 	lsl.w	r3, r9, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	46a2      	mov	sl, r4
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	e7d2      	b.n	800295e <_vfiprintf_r+0xe2>
 80029b8:	9b03      	ldr	r3, [sp, #12]
 80029ba:	1d19      	adds	r1, r3, #4
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	9103      	str	r1, [sp, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bfbb      	ittet	lt
 80029c4:	425b      	neglt	r3, r3
 80029c6:	f042 0202 	orrlt.w	r2, r2, #2
 80029ca:	9307      	strge	r3, [sp, #28]
 80029cc:	9307      	strlt	r3, [sp, #28]
 80029ce:	bfb8      	it	lt
 80029d0:	9204      	strlt	r2, [sp, #16]
 80029d2:	7823      	ldrb	r3, [r4, #0]
 80029d4:	2b2e      	cmp	r3, #46	; 0x2e
 80029d6:	d10c      	bne.n	80029f2 <_vfiprintf_r+0x176>
 80029d8:	7863      	ldrb	r3, [r4, #1]
 80029da:	2b2a      	cmp	r3, #42	; 0x2a
 80029dc:	d135      	bne.n	8002a4a <_vfiprintf_r+0x1ce>
 80029de:	9b03      	ldr	r3, [sp, #12]
 80029e0:	3402      	adds	r4, #2
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	9203      	str	r2, [sp, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfb8      	it	lt
 80029ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029f0:	9305      	str	r3, [sp, #20]
 80029f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002ad8 <_vfiprintf_r+0x25c>
 80029f6:	2203      	movs	r2, #3
 80029f8:	4650      	mov	r0, sl
 80029fa:	7821      	ldrb	r1, [r4, #0]
 80029fc:	f000 fc72 	bl	80032e4 <memchr>
 8002a00:	b140      	cbz	r0, 8002a14 <_vfiprintf_r+0x198>
 8002a02:	2340      	movs	r3, #64	; 0x40
 8002a04:	eba0 000a 	sub.w	r0, r0, sl
 8002a08:	fa03 f000 	lsl.w	r0, r3, r0
 8002a0c:	9b04      	ldr	r3, [sp, #16]
 8002a0e:	3401      	adds	r4, #1
 8002a10:	4303      	orrs	r3, r0
 8002a12:	9304      	str	r3, [sp, #16]
 8002a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a18:	2206      	movs	r2, #6
 8002a1a:	482c      	ldr	r0, [pc, #176]	; (8002acc <_vfiprintf_r+0x250>)
 8002a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a20:	f000 fc60 	bl	80032e4 <memchr>
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d03f      	beq.n	8002aa8 <_vfiprintf_r+0x22c>
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <_vfiprintf_r+0x254>)
 8002a2a:	bb1b      	cbnz	r3, 8002a74 <_vfiprintf_r+0x1f8>
 8002a2c:	9b03      	ldr	r3, [sp, #12]
 8002a2e:	3307      	adds	r3, #7
 8002a30:	f023 0307 	bic.w	r3, r3, #7
 8002a34:	3308      	adds	r3, #8
 8002a36:	9303      	str	r3, [sp, #12]
 8002a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a3a:	443b      	add	r3, r7
 8002a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a3e:	e767      	b.n	8002910 <_vfiprintf_r+0x94>
 8002a40:	460c      	mov	r4, r1
 8002a42:	2001      	movs	r0, #1
 8002a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a48:	e7a5      	b.n	8002996 <_vfiprintf_r+0x11a>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f04f 0c0a 	mov.w	ip, #10
 8002a50:	4619      	mov	r1, r3
 8002a52:	3401      	adds	r4, #1
 8002a54:	9305      	str	r3, [sp, #20]
 8002a56:	4620      	mov	r0, r4
 8002a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a5c:	3a30      	subs	r2, #48	; 0x30
 8002a5e:	2a09      	cmp	r2, #9
 8002a60:	d903      	bls.n	8002a6a <_vfiprintf_r+0x1ee>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0c5      	beq.n	80029f2 <_vfiprintf_r+0x176>
 8002a66:	9105      	str	r1, [sp, #20]
 8002a68:	e7c3      	b.n	80029f2 <_vfiprintf_r+0x176>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a72:	e7f0      	b.n	8002a56 <_vfiprintf_r+0x1da>
 8002a74:	ab03      	add	r3, sp, #12
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	462a      	mov	r2, r5
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <_vfiprintf_r+0x258>)
 8002a7e:	a904      	add	r1, sp, #16
 8002a80:	f3af 8000 	nop.w
 8002a84:	4607      	mov	r7, r0
 8002a86:	1c78      	adds	r0, r7, #1
 8002a88:	d1d6      	bne.n	8002a38 <_vfiprintf_r+0x1bc>
 8002a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a8c:	07d9      	lsls	r1, r3, #31
 8002a8e:	d405      	bmi.n	8002a9c <_vfiprintf_r+0x220>
 8002a90:	89ab      	ldrh	r3, [r5, #12]
 8002a92:	059a      	lsls	r2, r3, #22
 8002a94:	d402      	bmi.n	8002a9c <_vfiprintf_r+0x220>
 8002a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a98:	f7ff fe6d 	bl	8002776 <__retarget_lock_release_recursive>
 8002a9c:	89ab      	ldrh	r3, [r5, #12]
 8002a9e:	065b      	lsls	r3, r3, #25
 8002aa0:	f53f af12 	bmi.w	80028c8 <_vfiprintf_r+0x4c>
 8002aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aa6:	e711      	b.n	80028cc <_vfiprintf_r+0x50>
 8002aa8:	ab03      	add	r3, sp, #12
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	462a      	mov	r2, r5
 8002aae:	4630      	mov	r0, r6
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <_vfiprintf_r+0x258>)
 8002ab2:	a904      	add	r1, sp, #16
 8002ab4:	f000 f882 	bl	8002bbc <_printf_i>
 8002ab8:	e7e4      	b.n	8002a84 <_vfiprintf_r+0x208>
 8002aba:	bf00      	nop
 8002abc:	080034a4 	.word	0x080034a4
 8002ac0:	080034c4 	.word	0x080034c4
 8002ac4:	08003484 	.word	0x08003484
 8002ac8:	080034e4 	.word	0x080034e4
 8002acc:	080034ee 	.word	0x080034ee
 8002ad0:	00000000 	.word	0x00000000
 8002ad4:	08002857 	.word	0x08002857
 8002ad8:	080034ea 	.word	0x080034ea

08002adc <_printf_common>:
 8002adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae0:	4616      	mov	r6, r2
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	688a      	ldr	r2, [r1, #8]
 8002ae6:	690b      	ldr	r3, [r1, #16]
 8002ae8:	4607      	mov	r7, r0
 8002aea:	4293      	cmp	r3, r2
 8002aec:	bfb8      	it	lt
 8002aee:	4613      	movlt	r3, r2
 8002af0:	6033      	str	r3, [r6, #0]
 8002af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002af6:	460c      	mov	r4, r1
 8002af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002afc:	b10a      	cbz	r2, 8002b02 <_printf_common+0x26>
 8002afe:	3301      	adds	r3, #1
 8002b00:	6033      	str	r3, [r6, #0]
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	0699      	lsls	r1, r3, #26
 8002b06:	bf42      	ittt	mi
 8002b08:	6833      	ldrmi	r3, [r6, #0]
 8002b0a:	3302      	addmi	r3, #2
 8002b0c:	6033      	strmi	r3, [r6, #0]
 8002b0e:	6825      	ldr	r5, [r4, #0]
 8002b10:	f015 0506 	ands.w	r5, r5, #6
 8002b14:	d106      	bne.n	8002b24 <_printf_common+0x48>
 8002b16:	f104 0a19 	add.w	sl, r4, #25
 8002b1a:	68e3      	ldr	r3, [r4, #12]
 8002b1c:	6832      	ldr	r2, [r6, #0]
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	42ab      	cmp	r3, r5
 8002b22:	dc28      	bgt.n	8002b76 <_printf_common+0x9a>
 8002b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b28:	1e13      	subs	r3, r2, #0
 8002b2a:	6822      	ldr	r2, [r4, #0]
 8002b2c:	bf18      	it	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	0692      	lsls	r2, r2, #26
 8002b32:	d42d      	bmi.n	8002b90 <_printf_common+0xb4>
 8002b34:	4649      	mov	r1, r9
 8002b36:	4638      	mov	r0, r7
 8002b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b3c:	47c0      	blx	r8
 8002b3e:	3001      	adds	r0, #1
 8002b40:	d020      	beq.n	8002b84 <_printf_common+0xa8>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	68e5      	ldr	r5, [r4, #12]
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf18      	it	ne
 8002b4e:	2500      	movne	r5, #0
 8002b50:	6832      	ldr	r2, [r6, #0]
 8002b52:	f04f 0600 	mov.w	r6, #0
 8002b56:	68a3      	ldr	r3, [r4, #8]
 8002b58:	bf08      	it	eq
 8002b5a:	1aad      	subeq	r5, r5, r2
 8002b5c:	6922      	ldr	r2, [r4, #16]
 8002b5e:	bf08      	it	eq
 8002b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bfc4      	itt	gt
 8002b68:	1a9b      	subgt	r3, r3, r2
 8002b6a:	18ed      	addgt	r5, r5, r3
 8002b6c:	341a      	adds	r4, #26
 8002b6e:	42b5      	cmp	r5, r6
 8002b70:	d11a      	bne.n	8002ba8 <_printf_common+0xcc>
 8002b72:	2000      	movs	r0, #0
 8002b74:	e008      	b.n	8002b88 <_printf_common+0xac>
 8002b76:	2301      	movs	r3, #1
 8002b78:	4652      	mov	r2, sl
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	4638      	mov	r0, r7
 8002b7e:	47c0      	blx	r8
 8002b80:	3001      	adds	r0, #1
 8002b82:	d103      	bne.n	8002b8c <_printf_common+0xb0>
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	e7c4      	b.n	8002b1a <_printf_common+0x3e>
 8002b90:	2030      	movs	r0, #48	; 0x30
 8002b92:	18e1      	adds	r1, r4, r3
 8002b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b9e:	4422      	add	r2, r4
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ba6:	e7c5      	b.n	8002b34 <_printf_common+0x58>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4622      	mov	r2, r4
 8002bac:	4649      	mov	r1, r9
 8002bae:	4638      	mov	r0, r7
 8002bb0:	47c0      	blx	r8
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	d0e6      	beq.n	8002b84 <_printf_common+0xa8>
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7d9      	b.n	8002b6e <_printf_common+0x92>
	...

08002bbc <_printf_i>:
 8002bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	7e27      	ldrb	r7, [r4, #24]
 8002bc4:	4691      	mov	r9, r2
 8002bc6:	2f78      	cmp	r7, #120	; 0x78
 8002bc8:	4680      	mov	r8, r0
 8002bca:	469a      	mov	sl, r3
 8002bcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bd2:	d807      	bhi.n	8002be4 <_printf_i+0x28>
 8002bd4:	2f62      	cmp	r7, #98	; 0x62
 8002bd6:	d80a      	bhi.n	8002bee <_printf_i+0x32>
 8002bd8:	2f00      	cmp	r7, #0
 8002bda:	f000 80d9 	beq.w	8002d90 <_printf_i+0x1d4>
 8002bde:	2f58      	cmp	r7, #88	; 0x58
 8002be0:	f000 80a4 	beq.w	8002d2c <_printf_i+0x170>
 8002be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bec:	e03a      	b.n	8002c64 <_printf_i+0xa8>
 8002bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bf2:	2b15      	cmp	r3, #21
 8002bf4:	d8f6      	bhi.n	8002be4 <_printf_i+0x28>
 8002bf6:	a001      	add	r0, pc, #4	; (adr r0, 8002bfc <_printf_i+0x40>)
 8002bf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002c69 	.word	0x08002c69
 8002c04:	08002be5 	.word	0x08002be5
 8002c08:	08002be5 	.word	0x08002be5
 8002c0c:	08002be5 	.word	0x08002be5
 8002c10:	08002be5 	.word	0x08002be5
 8002c14:	08002c69 	.word	0x08002c69
 8002c18:	08002be5 	.word	0x08002be5
 8002c1c:	08002be5 	.word	0x08002be5
 8002c20:	08002be5 	.word	0x08002be5
 8002c24:	08002be5 	.word	0x08002be5
 8002c28:	08002d77 	.word	0x08002d77
 8002c2c:	08002c99 	.word	0x08002c99
 8002c30:	08002d59 	.word	0x08002d59
 8002c34:	08002be5 	.word	0x08002be5
 8002c38:	08002be5 	.word	0x08002be5
 8002c3c:	08002d99 	.word	0x08002d99
 8002c40:	08002be5 	.word	0x08002be5
 8002c44:	08002c99 	.word	0x08002c99
 8002c48:	08002be5 	.word	0x08002be5
 8002c4c:	08002be5 	.word	0x08002be5
 8002c50:	08002d61 	.word	0x08002d61
 8002c54:	680b      	ldr	r3, [r1, #0]
 8002c56:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c5a:	1d1a      	adds	r2, r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	600a      	str	r2, [r1, #0]
 8002c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0a4      	b.n	8002db2 <_printf_i+0x1f6>
 8002c68:	6825      	ldr	r5, [r4, #0]
 8002c6a:	6808      	ldr	r0, [r1, #0]
 8002c6c:	062e      	lsls	r6, r5, #24
 8002c6e:	f100 0304 	add.w	r3, r0, #4
 8002c72:	d50a      	bpl.n	8002c8a <_printf_i+0xce>
 8002c74:	6805      	ldr	r5, [r0, #0]
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	2d00      	cmp	r5, #0
 8002c7a:	da03      	bge.n	8002c84 <_printf_i+0xc8>
 8002c7c:	232d      	movs	r3, #45	; 0x2d
 8002c7e:	426d      	negs	r5, r5
 8002c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c84:	230a      	movs	r3, #10
 8002c86:	485e      	ldr	r0, [pc, #376]	; (8002e00 <_printf_i+0x244>)
 8002c88:	e019      	b.n	8002cbe <_printf_i+0x102>
 8002c8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c8e:	6805      	ldr	r5, [r0, #0]
 8002c90:	600b      	str	r3, [r1, #0]
 8002c92:	bf18      	it	ne
 8002c94:	b22d      	sxthne	r5, r5
 8002c96:	e7ef      	b.n	8002c78 <_printf_i+0xbc>
 8002c98:	680b      	ldr	r3, [r1, #0]
 8002c9a:	6825      	ldr	r5, [r4, #0]
 8002c9c:	1d18      	adds	r0, r3, #4
 8002c9e:	6008      	str	r0, [r1, #0]
 8002ca0:	0628      	lsls	r0, r5, #24
 8002ca2:	d501      	bpl.n	8002ca8 <_printf_i+0xec>
 8002ca4:	681d      	ldr	r5, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <_printf_i+0xf2>
 8002ca8:	0669      	lsls	r1, r5, #25
 8002caa:	d5fb      	bpl.n	8002ca4 <_printf_i+0xe8>
 8002cac:	881d      	ldrh	r5, [r3, #0]
 8002cae:	2f6f      	cmp	r7, #111	; 0x6f
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2308      	moveq	r3, #8
 8002cb4:	230a      	movne	r3, #10
 8002cb6:	4852      	ldr	r0, [pc, #328]	; (8002e00 <_printf_i+0x244>)
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cbe:	6866      	ldr	r6, [r4, #4]
 8002cc0:	2e00      	cmp	r6, #0
 8002cc2:	bfa8      	it	ge
 8002cc4:	6821      	ldrge	r1, [r4, #0]
 8002cc6:	60a6      	str	r6, [r4, #8]
 8002cc8:	bfa4      	itt	ge
 8002cca:	f021 0104 	bicge.w	r1, r1, #4
 8002cce:	6021      	strge	r1, [r4, #0]
 8002cd0:	b90d      	cbnz	r5, 8002cd6 <_printf_i+0x11a>
 8002cd2:	2e00      	cmp	r6, #0
 8002cd4:	d04d      	beq.n	8002d72 <_printf_i+0x1b6>
 8002cd6:	4616      	mov	r6, r2
 8002cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8002ce0:	5dc7      	ldrb	r7, [r0, r7]
 8002ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ce6:	462f      	mov	r7, r5
 8002ce8:	42bb      	cmp	r3, r7
 8002cea:	460d      	mov	r5, r1
 8002cec:	d9f4      	bls.n	8002cd8 <_printf_i+0x11c>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d10b      	bne.n	8002d0a <_printf_i+0x14e>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	07df      	lsls	r7, r3, #31
 8002cf6:	d508      	bpl.n	8002d0a <_printf_i+0x14e>
 8002cf8:	6923      	ldr	r3, [r4, #16]
 8002cfa:	6861      	ldr	r1, [r4, #4]
 8002cfc:	4299      	cmp	r1, r3
 8002cfe:	bfde      	ittt	le
 8002d00:	2330      	movle	r3, #48	; 0x30
 8002d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d06:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002d0a:	1b92      	subs	r2, r2, r6
 8002d0c:	6122      	str	r2, [r4, #16]
 8002d0e:	464b      	mov	r3, r9
 8002d10:	4621      	mov	r1, r4
 8002d12:	4640      	mov	r0, r8
 8002d14:	f8cd a000 	str.w	sl, [sp]
 8002d18:	aa03      	add	r2, sp, #12
 8002d1a:	f7ff fedf 	bl	8002adc <_printf_common>
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d14c      	bne.n	8002dbc <_printf_i+0x200>
 8002d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d26:	b004      	add	sp, #16
 8002d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d2c:	4834      	ldr	r0, [pc, #208]	; (8002e00 <_printf_i+0x244>)
 8002d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d32:	680e      	ldr	r6, [r1, #0]
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d3a:	061f      	lsls	r7, r3, #24
 8002d3c:	600e      	str	r6, [r1, #0]
 8002d3e:	d514      	bpl.n	8002d6a <_printf_i+0x1ae>
 8002d40:	07d9      	lsls	r1, r3, #31
 8002d42:	bf44      	itt	mi
 8002d44:	f043 0320 	orrmi.w	r3, r3, #32
 8002d48:	6023      	strmi	r3, [r4, #0]
 8002d4a:	b91d      	cbnz	r5, 8002d54 <_printf_i+0x198>
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	f023 0320 	bic.w	r3, r3, #32
 8002d52:	6023      	str	r3, [r4, #0]
 8002d54:	2310      	movs	r3, #16
 8002d56:	e7af      	b.n	8002cb8 <_printf_i+0xfc>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	6023      	str	r3, [r4, #0]
 8002d60:	2378      	movs	r3, #120	; 0x78
 8002d62:	4828      	ldr	r0, [pc, #160]	; (8002e04 <_printf_i+0x248>)
 8002d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d68:	e7e3      	b.n	8002d32 <_printf_i+0x176>
 8002d6a:	065e      	lsls	r6, r3, #25
 8002d6c:	bf48      	it	mi
 8002d6e:	b2ad      	uxthmi	r5, r5
 8002d70:	e7e6      	b.n	8002d40 <_printf_i+0x184>
 8002d72:	4616      	mov	r6, r2
 8002d74:	e7bb      	b.n	8002cee <_printf_i+0x132>
 8002d76:	680b      	ldr	r3, [r1, #0]
 8002d78:	6826      	ldr	r6, [r4, #0]
 8002d7a:	1d1d      	adds	r5, r3, #4
 8002d7c:	6960      	ldr	r0, [r4, #20]
 8002d7e:	600d      	str	r5, [r1, #0]
 8002d80:	0635      	lsls	r5, r6, #24
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	d501      	bpl.n	8002d8a <_printf_i+0x1ce>
 8002d86:	6018      	str	r0, [r3, #0]
 8002d88:	e002      	b.n	8002d90 <_printf_i+0x1d4>
 8002d8a:	0671      	lsls	r1, r6, #25
 8002d8c:	d5fb      	bpl.n	8002d86 <_printf_i+0x1ca>
 8002d8e:	8018      	strh	r0, [r3, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	4616      	mov	r6, r2
 8002d94:	6123      	str	r3, [r4, #16]
 8002d96:	e7ba      	b.n	8002d0e <_printf_i+0x152>
 8002d98:	680b      	ldr	r3, [r1, #0]
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	600a      	str	r2, [r1, #0]
 8002d9e:	681e      	ldr	r6, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4630      	mov	r0, r6
 8002da4:	6862      	ldr	r2, [r4, #4]
 8002da6:	f000 fa9d 	bl	80032e4 <memchr>
 8002daa:	b108      	cbz	r0, 8002db0 <_printf_i+0x1f4>
 8002dac:	1b80      	subs	r0, r0, r6
 8002dae:	6060      	str	r0, [r4, #4]
 8002db0:	6863      	ldr	r3, [r4, #4]
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	2300      	movs	r3, #0
 8002db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dba:	e7a8      	b.n	8002d0e <_printf_i+0x152>
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	6923      	ldr	r3, [r4, #16]
 8002dc4:	47d0      	blx	sl
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	d0ab      	beq.n	8002d22 <_printf_i+0x166>
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	079b      	lsls	r3, r3, #30
 8002dce:	d413      	bmi.n	8002df8 <_printf_i+0x23c>
 8002dd0:	68e0      	ldr	r0, [r4, #12]
 8002dd2:	9b03      	ldr	r3, [sp, #12]
 8002dd4:	4298      	cmp	r0, r3
 8002dd6:	bfb8      	it	lt
 8002dd8:	4618      	movlt	r0, r3
 8002dda:	e7a4      	b.n	8002d26 <_printf_i+0x16a>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4632      	mov	r2, r6
 8002de0:	4649      	mov	r1, r9
 8002de2:	4640      	mov	r0, r8
 8002de4:	47d0      	blx	sl
 8002de6:	3001      	adds	r0, #1
 8002de8:	d09b      	beq.n	8002d22 <_printf_i+0x166>
 8002dea:	3501      	adds	r5, #1
 8002dec:	68e3      	ldr	r3, [r4, #12]
 8002dee:	9903      	ldr	r1, [sp, #12]
 8002df0:	1a5b      	subs	r3, r3, r1
 8002df2:	42ab      	cmp	r3, r5
 8002df4:	dcf2      	bgt.n	8002ddc <_printf_i+0x220>
 8002df6:	e7eb      	b.n	8002dd0 <_printf_i+0x214>
 8002df8:	2500      	movs	r5, #0
 8002dfa:	f104 0619 	add.w	r6, r4, #25
 8002dfe:	e7f5      	b.n	8002dec <_printf_i+0x230>
 8002e00:	080034f5 	.word	0x080034f5
 8002e04:	08003506 	.word	0x08003506

08002e08 <_sbrk_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	4d05      	ldr	r5, [pc, #20]	; (8002e24 <_sbrk_r+0x1c>)
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f7fd fc72 	bl	80006fc <_sbrk>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_sbrk_r+0x1a>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_sbrk_r+0x1a>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	20000148 	.word	0x20000148

08002e28 <__sread>:
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e30:	f000 fabe 	bl	80033b0 <_read_r>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	bfab      	itete	ge
 8002e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e3c:	181b      	addge	r3, r3, r0
 8002e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e42:	bfac      	ite	ge
 8002e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e46:	81a3      	strhlt	r3, [r4, #12]
 8002e48:	bd10      	pop	{r4, pc}

08002e4a <__swrite>:
 8002e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	461f      	mov	r7, r3
 8002e50:	898b      	ldrh	r3, [r1, #12]
 8002e52:	4605      	mov	r5, r0
 8002e54:	05db      	lsls	r3, r3, #23
 8002e56:	460c      	mov	r4, r1
 8002e58:	4616      	mov	r6, r2
 8002e5a:	d505      	bpl.n	8002e68 <__swrite+0x1e>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e64:	f000 f9c8 	bl	80031f8 <_lseek_r>
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e70:	81a3      	strh	r3, [r4, #12]
 8002e72:	4628      	mov	r0, r5
 8002e74:	463b      	mov	r3, r7
 8002e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7e:	f000 b869 	b.w	8002f54 <_write_r>

08002e82 <__sseek>:
 8002e82:	b510      	push	{r4, lr}
 8002e84:	460c      	mov	r4, r1
 8002e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8a:	f000 f9b5 	bl	80031f8 <_lseek_r>
 8002e8e:	1c43      	adds	r3, r0, #1
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	bf15      	itete	ne
 8002e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e9e:	81a3      	strheq	r3, [r4, #12]
 8002ea0:	bf18      	it	ne
 8002ea2:	81a3      	strhne	r3, [r4, #12]
 8002ea4:	bd10      	pop	{r4, pc}

08002ea6 <__sclose>:
 8002ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eaa:	f000 b8d3 	b.w	8003054 <_close_r>
	...

08002eb0 <__swbuf_r>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	460e      	mov	r6, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	b118      	cbz	r0, 8002ec2 <__swbuf_r+0x12>
 8002eba:	6983      	ldr	r3, [r0, #24]
 8002ebc:	b90b      	cbnz	r3, 8002ec2 <__swbuf_r+0x12>
 8002ebe:	f7ff fbbb 	bl	8002638 <__sinit>
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <__swbuf_r+0x98>)
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d12b      	bne.n	8002f20 <__swbuf_r+0x70>
 8002ec8:	686c      	ldr	r4, [r5, #4]
 8002eca:	69a3      	ldr	r3, [r4, #24]
 8002ecc:	60a3      	str	r3, [r4, #8]
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	071a      	lsls	r2, r3, #28
 8002ed2:	d52f      	bpl.n	8002f34 <__swbuf_r+0x84>
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	b36b      	cbz	r3, 8002f34 <__swbuf_r+0x84>
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	b2f6      	uxtb	r6, r6
 8002ede:	1ac0      	subs	r0, r0, r3
 8002ee0:	6963      	ldr	r3, [r4, #20]
 8002ee2:	4637      	mov	r7, r6
 8002ee4:	4283      	cmp	r3, r0
 8002ee6:	dc04      	bgt.n	8002ef2 <__swbuf_r+0x42>
 8002ee8:	4621      	mov	r1, r4
 8002eea:	4628      	mov	r0, r5
 8002eec:	f000 f948 	bl	8003180 <_fflush_r>
 8002ef0:	bb30      	cbnz	r0, 8002f40 <__swbuf_r+0x90>
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60a3      	str	r3, [r4, #8]
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	6022      	str	r2, [r4, #0]
 8002f00:	701e      	strb	r6, [r3, #0]
 8002f02:	6963      	ldr	r3, [r4, #20]
 8002f04:	4283      	cmp	r3, r0
 8002f06:	d004      	beq.n	8002f12 <__swbuf_r+0x62>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	07db      	lsls	r3, r3, #31
 8002f0c:	d506      	bpl.n	8002f1c <__swbuf_r+0x6c>
 8002f0e:	2e0a      	cmp	r6, #10
 8002f10:	d104      	bne.n	8002f1c <__swbuf_r+0x6c>
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f933 	bl	8003180 <_fflush_r>
 8002f1a:	b988      	cbnz	r0, 8002f40 <__swbuf_r+0x90>
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <__swbuf_r+0x9c>)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	d101      	bne.n	8002f2a <__swbuf_r+0x7a>
 8002f26:	68ac      	ldr	r4, [r5, #8]
 8002f28:	e7cf      	b.n	8002eca <__swbuf_r+0x1a>
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <__swbuf_r+0xa0>)
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	bf08      	it	eq
 8002f30:	68ec      	ldreq	r4, [r5, #12]
 8002f32:	e7ca      	b.n	8002eca <__swbuf_r+0x1a>
 8002f34:	4621      	mov	r1, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 f81e 	bl	8002f78 <__swsetup_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0cb      	beq.n	8002ed8 <__swbuf_r+0x28>
 8002f40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f44:	e7ea      	b.n	8002f1c <__swbuf_r+0x6c>
 8002f46:	bf00      	nop
 8002f48:	080034a4 	.word	0x080034a4
 8002f4c:	080034c4 	.word	0x080034c4
 8002f50:	08003484 	.word	0x08003484

08002f54 <_write_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4604      	mov	r4, r0
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4d05      	ldr	r5, [pc, #20]	; (8002f74 <_write_r+0x20>)
 8002f60:	602a      	str	r2, [r5, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7fd fb7d 	bl	8000662 <_write>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d102      	bne.n	8002f72 <_write_r+0x1e>
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	b103      	cbz	r3, 8002f72 <_write_r+0x1e>
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	20000148 	.word	0x20000148

08002f78 <__swsetup_r>:
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <__swsetup_r+0xcc>)
 8002f7a:	b570      	push	{r4, r5, r6, lr}
 8002f7c:	681d      	ldr	r5, [r3, #0]
 8002f7e:	4606      	mov	r6, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	b125      	cbz	r5, 8002f8e <__swsetup_r+0x16>
 8002f84:	69ab      	ldr	r3, [r5, #24]
 8002f86:	b913      	cbnz	r3, 8002f8e <__swsetup_r+0x16>
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f7ff fb55 	bl	8002638 <__sinit>
 8002f8e:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <__swsetup_r+0xd0>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d10f      	bne.n	8002fb4 <__swsetup_r+0x3c>
 8002f94:	686c      	ldr	r4, [r5, #4]
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f9c:	0719      	lsls	r1, r3, #28
 8002f9e:	d42c      	bmi.n	8002ffa <__swsetup_r+0x82>
 8002fa0:	06dd      	lsls	r5, r3, #27
 8002fa2:	d411      	bmi.n	8002fc8 <__swsetup_r+0x50>
 8002fa4:	2309      	movs	r3, #9
 8002fa6:	6033      	str	r3, [r6, #0]
 8002fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	e03e      	b.n	8003032 <__swsetup_r+0xba>
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <__swsetup_r+0xd4>)
 8002fb6:	429c      	cmp	r4, r3
 8002fb8:	d101      	bne.n	8002fbe <__swsetup_r+0x46>
 8002fba:	68ac      	ldr	r4, [r5, #8]
 8002fbc:	e7eb      	b.n	8002f96 <__swsetup_r+0x1e>
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <__swsetup_r+0xd8>)
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	bf08      	it	eq
 8002fc4:	68ec      	ldreq	r4, [r5, #12]
 8002fc6:	e7e6      	b.n	8002f96 <__swsetup_r+0x1e>
 8002fc8:	0758      	lsls	r0, r3, #29
 8002fca:	d512      	bpl.n	8002ff2 <__swsetup_r+0x7a>
 8002fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fce:	b141      	cbz	r1, 8002fe2 <__swsetup_r+0x6a>
 8002fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	d002      	beq.n	8002fde <__swsetup_r+0x66>
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f000 f99d 	bl	8003318 <_free_r>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8002fe2:	89a3      	ldrh	r3, [r4, #12]
 8002fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	2300      	movs	r3, #0
 8002fec:	6063      	str	r3, [r4, #4]
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f043 0308 	orr.w	r3, r3, #8
 8002ff8:	81a3      	strh	r3, [r4, #12]
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	b94b      	cbnz	r3, 8003012 <__swsetup_r+0x9a>
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003008:	d003      	beq.n	8003012 <__swsetup_r+0x9a>
 800300a:	4621      	mov	r1, r4
 800300c:	4630      	mov	r0, r6
 800300e:	f000 f929 	bl	8003264 <__smakebuf_r>
 8003012:	89a0      	ldrh	r0, [r4, #12]
 8003014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003018:	f010 0301 	ands.w	r3, r0, #1
 800301c:	d00a      	beq.n	8003034 <__swsetup_r+0xbc>
 800301e:	2300      	movs	r3, #0
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	425b      	negs	r3, r3
 8003026:	61a3      	str	r3, [r4, #24]
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	b943      	cbnz	r3, 800303e <__swsetup_r+0xc6>
 800302c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003030:	d1ba      	bne.n	8002fa8 <__swsetup_r+0x30>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	0781      	lsls	r1, r0, #30
 8003036:	bf58      	it	pl
 8003038:	6963      	ldrpl	r3, [r4, #20]
 800303a:	60a3      	str	r3, [r4, #8]
 800303c:	e7f4      	b.n	8003028 <__swsetup_r+0xb0>
 800303e:	2000      	movs	r0, #0
 8003040:	e7f7      	b.n	8003032 <__swsetup_r+0xba>
 8003042:	bf00      	nop
 8003044:	2000000c 	.word	0x2000000c
 8003048:	080034a4 	.word	0x080034a4
 800304c:	080034c4 	.word	0x080034c4
 8003050:	08003484 	.word	0x08003484

08003054 <_close_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	2300      	movs	r3, #0
 8003058:	4d05      	ldr	r5, [pc, #20]	; (8003070 <_close_r+0x1c>)
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	f7fd fb1b 	bl	800069a <_close>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_close_r+0x1a>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_close_r+0x1a>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	20000148 	.word	0x20000148

08003074 <__sflush_r>:
 8003074:	898a      	ldrh	r2, [r1, #12]
 8003076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307a:	4605      	mov	r5, r0
 800307c:	0710      	lsls	r0, r2, #28
 800307e:	460c      	mov	r4, r1
 8003080:	d458      	bmi.n	8003134 <__sflush_r+0xc0>
 8003082:	684b      	ldr	r3, [r1, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	dc05      	bgt.n	8003094 <__sflush_r+0x20>
 8003088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	dc02      	bgt.n	8003094 <__sflush_r+0x20>
 800308e:	2000      	movs	r0, #0
 8003090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003096:	2e00      	cmp	r6, #0
 8003098:	d0f9      	beq.n	800308e <__sflush_r+0x1a>
 800309a:	2300      	movs	r3, #0
 800309c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030a0:	682f      	ldr	r7, [r5, #0]
 80030a2:	602b      	str	r3, [r5, #0]
 80030a4:	d032      	beq.n	800310c <__sflush_r+0x98>
 80030a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	075a      	lsls	r2, r3, #29
 80030ac:	d505      	bpl.n	80030ba <__sflush_r+0x46>
 80030ae:	6863      	ldr	r3, [r4, #4]
 80030b0:	1ac0      	subs	r0, r0, r3
 80030b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030b4:	b10b      	cbz	r3, 80030ba <__sflush_r+0x46>
 80030b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b8:	1ac0      	subs	r0, r0, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	4602      	mov	r2, r0
 80030be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030c0:	4628      	mov	r0, r5
 80030c2:	6a21      	ldr	r1, [r4, #32]
 80030c4:	47b0      	blx	r6
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	d106      	bne.n	80030da <__sflush_r+0x66>
 80030cc:	6829      	ldr	r1, [r5, #0]
 80030ce:	291d      	cmp	r1, #29
 80030d0:	d82c      	bhi.n	800312c <__sflush_r+0xb8>
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <__sflush_r+0x108>)
 80030d4:	40ca      	lsrs	r2, r1
 80030d6:	07d6      	lsls	r6, r2, #31
 80030d8:	d528      	bpl.n	800312c <__sflush_r+0xb8>
 80030da:	2200      	movs	r2, #0
 80030dc:	6062      	str	r2, [r4, #4]
 80030de:	6922      	ldr	r2, [r4, #16]
 80030e0:	04d9      	lsls	r1, r3, #19
 80030e2:	6022      	str	r2, [r4, #0]
 80030e4:	d504      	bpl.n	80030f0 <__sflush_r+0x7c>
 80030e6:	1c42      	adds	r2, r0, #1
 80030e8:	d101      	bne.n	80030ee <__sflush_r+0x7a>
 80030ea:	682b      	ldr	r3, [r5, #0]
 80030ec:	b903      	cbnz	r3, 80030f0 <__sflush_r+0x7c>
 80030ee:	6560      	str	r0, [r4, #84]	; 0x54
 80030f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030f2:	602f      	str	r7, [r5, #0]
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d0ca      	beq.n	800308e <__sflush_r+0x1a>
 80030f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030fc:	4299      	cmp	r1, r3
 80030fe:	d002      	beq.n	8003106 <__sflush_r+0x92>
 8003100:	4628      	mov	r0, r5
 8003102:	f000 f909 	bl	8003318 <_free_r>
 8003106:	2000      	movs	r0, #0
 8003108:	6360      	str	r0, [r4, #52]	; 0x34
 800310a:	e7c1      	b.n	8003090 <__sflush_r+0x1c>
 800310c:	6a21      	ldr	r1, [r4, #32]
 800310e:	2301      	movs	r3, #1
 8003110:	4628      	mov	r0, r5
 8003112:	47b0      	blx	r6
 8003114:	1c41      	adds	r1, r0, #1
 8003116:	d1c7      	bne.n	80030a8 <__sflush_r+0x34>
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0c4      	beq.n	80030a8 <__sflush_r+0x34>
 800311e:	2b1d      	cmp	r3, #29
 8003120:	d001      	beq.n	8003126 <__sflush_r+0xb2>
 8003122:	2b16      	cmp	r3, #22
 8003124:	d101      	bne.n	800312a <__sflush_r+0xb6>
 8003126:	602f      	str	r7, [r5, #0]
 8003128:	e7b1      	b.n	800308e <__sflush_r+0x1a>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003130:	81a3      	strh	r3, [r4, #12]
 8003132:	e7ad      	b.n	8003090 <__sflush_r+0x1c>
 8003134:	690f      	ldr	r7, [r1, #16]
 8003136:	2f00      	cmp	r7, #0
 8003138:	d0a9      	beq.n	800308e <__sflush_r+0x1a>
 800313a:	0793      	lsls	r3, r2, #30
 800313c:	bf18      	it	ne
 800313e:	2300      	movne	r3, #0
 8003140:	680e      	ldr	r6, [r1, #0]
 8003142:	bf08      	it	eq
 8003144:	694b      	ldreq	r3, [r1, #20]
 8003146:	eba6 0807 	sub.w	r8, r6, r7
 800314a:	600f      	str	r7, [r1, #0]
 800314c:	608b      	str	r3, [r1, #8]
 800314e:	f1b8 0f00 	cmp.w	r8, #0
 8003152:	dd9c      	ble.n	800308e <__sflush_r+0x1a>
 8003154:	4643      	mov	r3, r8
 8003156:	463a      	mov	r2, r7
 8003158:	4628      	mov	r0, r5
 800315a:	6a21      	ldr	r1, [r4, #32]
 800315c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800315e:	47b0      	blx	r6
 8003160:	2800      	cmp	r0, #0
 8003162:	dc06      	bgt.n	8003172 <__sflush_r+0xfe>
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800316a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800316e:	81a3      	strh	r3, [r4, #12]
 8003170:	e78e      	b.n	8003090 <__sflush_r+0x1c>
 8003172:	4407      	add	r7, r0
 8003174:	eba8 0800 	sub.w	r8, r8, r0
 8003178:	e7e9      	b.n	800314e <__sflush_r+0xda>
 800317a:	bf00      	nop
 800317c:	20400001 	.word	0x20400001

08003180 <_fflush_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	690b      	ldr	r3, [r1, #16]
 8003184:	4605      	mov	r5, r0
 8003186:	460c      	mov	r4, r1
 8003188:	b913      	cbnz	r3, 8003190 <_fflush_r+0x10>
 800318a:	2500      	movs	r5, #0
 800318c:	4628      	mov	r0, r5
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	b118      	cbz	r0, 800319a <_fflush_r+0x1a>
 8003192:	6983      	ldr	r3, [r0, #24]
 8003194:	b90b      	cbnz	r3, 800319a <_fflush_r+0x1a>
 8003196:	f7ff fa4f 	bl	8002638 <__sinit>
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <_fflush_r+0x6c>)
 800319c:	429c      	cmp	r4, r3
 800319e:	d11b      	bne.n	80031d8 <_fflush_r+0x58>
 80031a0:	686c      	ldr	r4, [r5, #4]
 80031a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ef      	beq.n	800318a <_fflush_r+0xa>
 80031aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031ac:	07d0      	lsls	r0, r2, #31
 80031ae:	d404      	bmi.n	80031ba <_fflush_r+0x3a>
 80031b0:	0599      	lsls	r1, r3, #22
 80031b2:	d402      	bmi.n	80031ba <_fflush_r+0x3a>
 80031b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031b6:	f7ff fadd 	bl	8002774 <__retarget_lock_acquire_recursive>
 80031ba:	4628      	mov	r0, r5
 80031bc:	4621      	mov	r1, r4
 80031be:	f7ff ff59 	bl	8003074 <__sflush_r>
 80031c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031c4:	4605      	mov	r5, r0
 80031c6:	07da      	lsls	r2, r3, #31
 80031c8:	d4e0      	bmi.n	800318c <_fflush_r+0xc>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	059b      	lsls	r3, r3, #22
 80031ce:	d4dd      	bmi.n	800318c <_fflush_r+0xc>
 80031d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031d2:	f7ff fad0 	bl	8002776 <__retarget_lock_release_recursive>
 80031d6:	e7d9      	b.n	800318c <_fflush_r+0xc>
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <_fflush_r+0x70>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d101      	bne.n	80031e2 <_fflush_r+0x62>
 80031de:	68ac      	ldr	r4, [r5, #8]
 80031e0:	e7df      	b.n	80031a2 <_fflush_r+0x22>
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <_fflush_r+0x74>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	bf08      	it	eq
 80031e8:	68ec      	ldreq	r4, [r5, #12]
 80031ea:	e7da      	b.n	80031a2 <_fflush_r+0x22>
 80031ec:	080034a4 	.word	0x080034a4
 80031f0:	080034c4 	.word	0x080034c4
 80031f4:	08003484 	.word	0x08003484

080031f8 <_lseek_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	2200      	movs	r2, #0
 8003202:	4d05      	ldr	r5, [pc, #20]	; (8003218 <_lseek_r+0x20>)
 8003204:	602a      	str	r2, [r5, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	f7fd fa6b 	bl	80006e2 <_lseek>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d102      	bne.n	8003216 <_lseek_r+0x1e>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	b103      	cbz	r3, 8003216 <_lseek_r+0x1e>
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	20000148 	.word	0x20000148

0800321c <__swhatbuf_r>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	460e      	mov	r6, r1
 8003220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003224:	4614      	mov	r4, r2
 8003226:	2900      	cmp	r1, #0
 8003228:	461d      	mov	r5, r3
 800322a:	b096      	sub	sp, #88	; 0x58
 800322c:	da07      	bge.n	800323e <__swhatbuf_r+0x22>
 800322e:	2300      	movs	r3, #0
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	89b3      	ldrh	r3, [r6, #12]
 8003234:	061a      	lsls	r2, r3, #24
 8003236:	d410      	bmi.n	800325a <__swhatbuf_r+0x3e>
 8003238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323c:	e00e      	b.n	800325c <__swhatbuf_r+0x40>
 800323e:	466a      	mov	r2, sp
 8003240:	f000 f8c8 	bl	80033d4 <_fstat_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	dbf2      	blt.n	800322e <__swhatbuf_r+0x12>
 8003248:	9a01      	ldr	r2, [sp, #4]
 800324a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800324e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003252:	425a      	negs	r2, r3
 8003254:	415a      	adcs	r2, r3
 8003256:	602a      	str	r2, [r5, #0]
 8003258:	e7ee      	b.n	8003238 <__swhatbuf_r+0x1c>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	2000      	movs	r0, #0
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	b016      	add	sp, #88	; 0x58
 8003262:	bd70      	pop	{r4, r5, r6, pc}

08003264 <__smakebuf_r>:
 8003264:	898b      	ldrh	r3, [r1, #12]
 8003266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003268:	079d      	lsls	r5, r3, #30
 800326a:	4606      	mov	r6, r0
 800326c:	460c      	mov	r4, r1
 800326e:	d507      	bpl.n	8003280 <__smakebuf_r+0x1c>
 8003270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	6123      	str	r3, [r4, #16]
 8003278:	2301      	movs	r3, #1
 800327a:	6163      	str	r3, [r4, #20]
 800327c:	b002      	add	sp, #8
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	466a      	mov	r2, sp
 8003282:	ab01      	add	r3, sp, #4
 8003284:	f7ff ffca 	bl	800321c <__swhatbuf_r>
 8003288:	9900      	ldr	r1, [sp, #0]
 800328a:	4605      	mov	r5, r0
 800328c:	4630      	mov	r0, r6
 800328e:	f7ff fa73 	bl	8002778 <_malloc_r>
 8003292:	b948      	cbnz	r0, 80032a8 <__smakebuf_r+0x44>
 8003294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003298:	059a      	lsls	r2, r3, #22
 800329a:	d4ef      	bmi.n	800327c <__smakebuf_r+0x18>
 800329c:	f023 0303 	bic.w	r3, r3, #3
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	e7e3      	b.n	8003270 <__smakebuf_r+0xc>
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <__smakebuf_r+0x7c>)
 80032aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	6020      	str	r0, [r4, #0]
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	81a3      	strh	r3, [r4, #12]
 80032b6:	9b00      	ldr	r3, [sp, #0]
 80032b8:	6120      	str	r0, [r4, #16]
 80032ba:	6163      	str	r3, [r4, #20]
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	b15b      	cbz	r3, 80032d8 <__smakebuf_r+0x74>
 80032c0:	4630      	mov	r0, r6
 80032c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032c6:	f000 f897 	bl	80033f8 <_isatty_r>
 80032ca:	b128      	cbz	r0, 80032d8 <__smakebuf_r+0x74>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	89a0      	ldrh	r0, [r4, #12]
 80032da:	4305      	orrs	r5, r0
 80032dc:	81a5      	strh	r5, [r4, #12]
 80032de:	e7cd      	b.n	800327c <__smakebuf_r+0x18>
 80032e0:	080025d1 	.word	0x080025d1

080032e4 <memchr>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	b510      	push	{r4, lr}
 80032e8:	b2c9      	uxtb	r1, r1
 80032ea:	4402      	add	r2, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	d101      	bne.n	80032f6 <memchr+0x12>
 80032f2:	2000      	movs	r0, #0
 80032f4:	e003      	b.n	80032fe <memchr+0x1a>
 80032f6:	7804      	ldrb	r4, [r0, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	428c      	cmp	r4, r1
 80032fc:	d1f6      	bne.n	80032ec <memchr+0x8>
 80032fe:	bd10      	pop	{r4, pc}

08003300 <__malloc_lock>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__malloc_lock+0x8>)
 8003302:	f7ff ba37 	b.w	8002774 <__retarget_lock_acquire_recursive>
 8003306:	bf00      	nop
 8003308:	20000140 	.word	0x20000140

0800330c <__malloc_unlock>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__malloc_unlock+0x8>)
 800330e:	f7ff ba32 	b.w	8002776 <__retarget_lock_release_recursive>
 8003312:	bf00      	nop
 8003314:	20000140 	.word	0x20000140

08003318 <_free_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	2900      	cmp	r1, #0
 800331e:	d043      	beq.n	80033a8 <_free_r+0x90>
 8003320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003324:	1f0c      	subs	r4, r1, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfb8      	it	lt
 800332a:	18e4      	addlt	r4, r4, r3
 800332c:	f7ff ffe8 	bl	8003300 <__malloc_lock>
 8003330:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <_free_r+0x94>)
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	4610      	mov	r0, r2
 8003336:	b933      	cbnz	r3, 8003346 <_free_r+0x2e>
 8003338:	6063      	str	r3, [r4, #4]
 800333a:	6014      	str	r4, [r2, #0]
 800333c:	4628      	mov	r0, r5
 800333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003342:	f7ff bfe3 	b.w	800330c <__malloc_unlock>
 8003346:	42a3      	cmp	r3, r4
 8003348:	d90a      	bls.n	8003360 <_free_r+0x48>
 800334a:	6821      	ldr	r1, [r4, #0]
 800334c:	1862      	adds	r2, r4, r1
 800334e:	4293      	cmp	r3, r2
 8003350:	bf01      	itttt	eq
 8003352:	681a      	ldreq	r2, [r3, #0]
 8003354:	685b      	ldreq	r3, [r3, #4]
 8003356:	1852      	addeq	r2, r2, r1
 8003358:	6022      	streq	r2, [r4, #0]
 800335a:	6063      	str	r3, [r4, #4]
 800335c:	6004      	str	r4, [r0, #0]
 800335e:	e7ed      	b.n	800333c <_free_r+0x24>
 8003360:	461a      	mov	r2, r3
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b10b      	cbz	r3, 800336a <_free_r+0x52>
 8003366:	42a3      	cmp	r3, r4
 8003368:	d9fa      	bls.n	8003360 <_free_r+0x48>
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	1850      	adds	r0, r2, r1
 800336e:	42a0      	cmp	r0, r4
 8003370:	d10b      	bne.n	800338a <_free_r+0x72>
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	4401      	add	r1, r0
 8003376:	1850      	adds	r0, r2, r1
 8003378:	4283      	cmp	r3, r0
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	d1de      	bne.n	800333c <_free_r+0x24>
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4401      	add	r1, r0
 8003384:	6011      	str	r1, [r2, #0]
 8003386:	6053      	str	r3, [r2, #4]
 8003388:	e7d8      	b.n	800333c <_free_r+0x24>
 800338a:	d902      	bls.n	8003392 <_free_r+0x7a>
 800338c:	230c      	movs	r3, #12
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	e7d4      	b.n	800333c <_free_r+0x24>
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	1821      	adds	r1, r4, r0
 8003396:	428b      	cmp	r3, r1
 8003398:	bf01      	itttt	eq
 800339a:	6819      	ldreq	r1, [r3, #0]
 800339c:	685b      	ldreq	r3, [r3, #4]
 800339e:	1809      	addeq	r1, r1, r0
 80033a0:	6021      	streq	r1, [r4, #0]
 80033a2:	6063      	str	r3, [r4, #4]
 80033a4:	6054      	str	r4, [r2, #4]
 80033a6:	e7c9      	b.n	800333c <_free_r+0x24>
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
 80033aa:	bf00      	nop
 80033ac:	20000090 	.word	0x20000090

080033b0 <_read_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	2200      	movs	r2, #0
 80033ba:	4d05      	ldr	r5, [pc, #20]	; (80033d0 <_read_r+0x20>)
 80033bc:	602a      	str	r2, [r5, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7fd f932 	bl	8000628 <_read>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_read_r+0x1e>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_read_r+0x1e>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000148 	.word	0x20000148

080033d4 <_fstat_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	2300      	movs	r3, #0
 80033d8:	4d06      	ldr	r5, [pc, #24]	; (80033f4 <_fstat_r+0x20>)
 80033da:	4604      	mov	r4, r0
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	602b      	str	r3, [r5, #0]
 80033e2:	f7fd f965 	bl	80006b0 <_fstat>
 80033e6:	1c43      	adds	r3, r0, #1
 80033e8:	d102      	bne.n	80033f0 <_fstat_r+0x1c>
 80033ea:	682b      	ldr	r3, [r5, #0]
 80033ec:	b103      	cbz	r3, 80033f0 <_fstat_r+0x1c>
 80033ee:	6023      	str	r3, [r4, #0]
 80033f0:	bd38      	pop	{r3, r4, r5, pc}
 80033f2:	bf00      	nop
 80033f4:	20000148 	.word	0x20000148

080033f8 <_isatty_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	2300      	movs	r3, #0
 80033fc:	4d05      	ldr	r5, [pc, #20]	; (8003414 <_isatty_r+0x1c>)
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd f963 	bl	80006ce <_isatty>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_isatty_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_isatty_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	20000148 	.word	0x20000148

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
