
FreeRTOS_priority_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d70  08005d70  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005d70  08005d70  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d70  08005d70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad8  20000074  08005dec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  08005dec  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f4b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031af  00000000  00000000  00035fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f19  00000000  00000000  0003b790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe2  00000000  00000000  0003f6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095744  00000000  00000000  0005368b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8dcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  000e8e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bd8 	.word	0x08005bd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005bd8 	.word	0x08005bd8

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_write>:
static void MX_USART3_UART_Init(void);
void Start_ON_Task(void *argument);
void Start_OFF_Task(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	60f8      	str	r0, [r7, #12]
 80001a4:	60b9      	str	r1, [r7, #8]
 80001a6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	2332      	movs	r3, #50	; 0x32
 80001ae:	68b9      	ldr	r1, [r7, #8]
 80001b0:	480c      	ldr	r0, [pc, #48]	; (80001e4 <_write+0x48>)
 80001b2:	f001 fd32 	bl	8001c1a <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001b6:	2300      	movs	r3, #0
 80001b8:	617b      	str	r3, [r7, #20]
 80001ba:	e009      	b.n	80001d0 <_write+0x34>
		ITM_SendChar(*ptr++);
 80001bc:	68bb      	ldr	r3, [r7, #8]
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	60ba      	str	r2, [r7, #8]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	4618      	mov	r0, r3
 80001c6:	f7ff ffc3 	bl	8000150 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	3301      	adds	r3, #1
 80001ce:	617b      	str	r3, [r7, #20]
 80001d0:	697a      	ldr	r2, [r7, #20]
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	dbf1      	blt.n	80001bc <_write+0x20>
	}
	return len;
 80001d8:	687b      	ldr	r3, [r7, #4]
}
 80001da:	4618      	mov	r0, r3
 80001dc:	3718      	adds	r7, #24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000098 	.word	0x20000098

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ec:	f000 fb86 	bl	80008fc <HAL_Init>

  /* USER CODE BEGIN Init */
	T = HAL_GetTick();
 80001f0:	f000 fbac 	bl	800094c <HAL_GetTick>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a10      	ldr	r2, [pc, #64]	; (8000238 <main+0x50>)
 80001f8:	6013      	str	r3, [r2, #0]
	flag = 1;
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <main+0x54>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f82a 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f898 	bl	8000338 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000208:	f000 f86c 	bl	80002e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800020c:	f001 fe70 	bl	8001ef0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of my_ON_Task */
  my_ON_TaskHandle = osThreadNew(Start_ON_Task, NULL, &my_ON_Task_attributes);
 8000210:	4a0b      	ldr	r2, [pc, #44]	; (8000240 <main+0x58>)
 8000212:	2100      	movs	r1, #0
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <main+0x5c>)
 8000216:	f001 fed1 	bl	8001fbc <osThreadNew>
 800021a:	4603      	mov	r3, r0
 800021c:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <main+0x60>)
 800021e:	6013      	str	r3, [r2, #0]

  /* creation of my_OFF_Task */
  my_OFF_TaskHandle = osThreadNew(Start_OFF_Task, NULL, &my_OFF_Task_attributes);
 8000220:	4a0a      	ldr	r2, [pc, #40]	; (800024c <main+0x64>)
 8000222:	2100      	movs	r1, #0
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <main+0x68>)
 8000226:	f001 fec9 	bl	8001fbc <osThreadNew>
 800022a:	4603      	mov	r3, r0
 800022c:	4a09      	ldr	r2, [pc, #36]	; (8000254 <main+0x6c>)
 800022e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000230:	f001 fe90 	bl	8001f54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000234:	e7fe      	b.n	8000234 <main+0x4c>
 8000236:	bf00      	nop
 8000238:	20000094 	.word	0x20000094
 800023c:	20000090 	.word	0x20000090
 8000240:	08005c78 	.word	0x08005c78
 8000244:	080003e9 	.word	0x080003e9
 8000248:	200000dc 	.word	0x200000dc
 800024c:	08005c9c 	.word	0x08005c9c
 8000250:	08000441 	.word	0x08000441
 8000254:	200000e0 	.word	0x200000e0

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f004 fd31 	bl	8004cce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028c:	2302      	movs	r3, #2
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000296:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fdd9 	bl	8000e58 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ac:	f000 f94e 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f846 	bl	800135c <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d6:	f000 f939 	bl	800054c <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	; 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_USART3_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_USART3_UART_Init+0x4c>)
 800031c:	f001 fc30 	bl	8001b80 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f911 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000098 	.word	0x20000098
 8000334:	40004800 	.word	0x40004800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a23      	ldr	r2, [pc, #140]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0308 	and.w	r3, r3, #8
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <MX_GPIO_Init+0xa8>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	480c      	ldr	r0, [pc, #48]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003b4:	f000 fd38 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_GPIO_Init+0xac>)
 80003d2:	f000 fba5 	bl	8000b20 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000

080003e8 <Start_ON_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ON_Task */
void Start_ON_Task(void *argument)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (flag == 1) {
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <Start_ON_Task+0x48>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d012      	beq.n	800041e <Start_ON_Task+0x36>
			if (HAL_GetTick() - T >= 250) {
 80003f8:	f000 faa8 	bl	800094c <HAL_GetTick>
 80003fc:	4602      	mov	r2, r0
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <Start_ON_Task+0x4c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	2bf9      	cmp	r3, #249	; 0xf9
 8000406:	d90a      	bls.n	800041e <Start_ON_Task+0x36>
				flag = 0;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <Start_ON_Task+0x48>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 800040e:	f000 fa9d 	bl	800094c <HAL_GetTick>
 8000412:	4603      	mov	r3, r0
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <Start_ON_Task+0x4c>)
 8000416:	6013      	str	r3, [r2, #0]
				printf("LED is ON \r\n");
 8000418:	4807      	ldr	r0, [pc, #28]	; (8000438 <Start_ON_Task+0x50>)
 800041a:	f004 fd7b 	bl	8004f14 <puts>
			}
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, flag);
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <Start_ON_Task+0x48>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <Start_ON_Task+0x54>)
 800042a:	f000 fcfd 	bl	8000e28 <HAL_GPIO_WritePin>
		if (flag == 1) {
 800042e:	e7df      	b.n	80003f0 <Start_ON_Task+0x8>
 8000430:	20000090 	.word	0x20000090
 8000434:	20000094 	.word	0x20000094
 8000438:	08005c08 	.word	0x08005c08
 800043c:	40011000 	.word	0x40011000

08000440 <Start_OFF_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_OFF_Task */
void Start_OFF_Task(void *argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_OFF_Task */
	/* Infinite loop */
	for (;;) {
		if (uxTaskPriorityGet(my_ON_TaskHandle) == osPriorityLow) {
 8000448:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <Start_OFF_Task+0xc8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fe37 	bl	80030c0 <uxTaskPriorityGet>
 8000452:	4603      	mov	r3, r0
 8000454:	2b08      	cmp	r3, #8
 8000456:	d11d      	bne.n	8000494 <Start_OFF_Task+0x54>
			printf("'ON_Task' has priority is 'LOW' k =  %d\r\n", k);
 8000458:	4b2c      	ldr	r3, [pc, #176]	; (800050c <Start_OFF_Task+0xcc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4619      	mov	r1, r3
 800045e:	482c      	ldr	r0, [pc, #176]	; (8000510 <Start_OFF_Task+0xd0>)
 8000460:	f004 fcd2 	bl	8004e08 <iprintf>
			if (k >=5) {
 8000464:	4b29      	ldr	r3, [pc, #164]	; (800050c <Start_OFF_Task+0xcc>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b04      	cmp	r3, #4
 800046a:	d908      	bls.n	800047e <Start_OFF_Task+0x3e>
				vTaskPrioritySet(my_ON_TaskHandle, osPriorityNormal);
 800046c:	4b26      	ldr	r3, [pc, #152]	; (8000508 <Start_OFF_Task+0xc8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2118      	movs	r1, #24
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fe3e 	bl	80030f4 <vTaskPrioritySet>
				k = 0;
 8000478:	4b24      	ldr	r3, [pc, #144]	; (800050c <Start_OFF_Task+0xcc>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
			}
			k++;
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <Start_OFF_Task+0xcc>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	3301      	adds	r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b21      	ldr	r3, [pc, #132]	; (800050c <Start_OFF_Task+0xcc>)
 8000488:	701a      	strb	r2, [r3, #0]
			osDelay(500);
 800048a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800048e:	f001 fe3f 	bl	8002110 <osDelay>
 8000492:	e7d9      	b.n	8000448 <Start_OFF_Task+0x8>
		} else {

			if (flag == 0) {
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <Start_OFF_Task+0xd4>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	f083 0301 	eor.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d028      	beq.n	80004f4 <Start_OFF_Task+0xb4>
				if (HAL_GetTick() - T >= 250) {
 80004a2:	f000 fa53 	bl	800094c <HAL_GetTick>
 80004a6:	4602      	mov	r2, r0
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <Start_OFF_Task+0xd8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	2bf9      	cmp	r3, #249	; 0xf9
 80004b0:	d920      	bls.n	80004f4 <Start_OFF_Task+0xb4>
					flag = 1;
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <Start_OFF_Task+0xd4>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
					T = HAL_GetTick();
 80004b8:	f000 fa48 	bl	800094c <HAL_GetTick>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <Start_OFF_Task+0xd8>)
 80004c0:	6013      	str	r3, [r2, #0]
					printf("LED is OFF %d\r\n",i);
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <Start_OFF_Task+0xdc>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	4619      	mov	r1, r3
 80004c8:	4815      	ldr	r0, [pc, #84]	; (8000520 <Start_OFF_Task+0xe0>)
 80004ca:	f004 fc9d 	bl	8004e08 <iprintf>
					if (i >=5) {
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <Start_OFF_Task+0xdc>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d908      	bls.n	80004e8 <Start_OFF_Task+0xa8>
						vTaskPrioritySet(my_ON_TaskHandle, osPriorityLow);
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <Start_OFF_Task+0xc8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2108      	movs	r1, #8
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 fe09 	bl	80030f4 <vTaskPrioritySet>
						i = 0;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <Start_OFF_Task+0xdc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
					}
					i++;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <Start_OFF_Task+0xdc>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <Start_OFF_Task+0xdc>)
 80004f2:	701a      	strb	r2, [r3, #0]
				}
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, flag);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <Start_OFF_Task+0xd4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <Start_OFF_Task+0xe4>)
 8000500:	f000 fc92 	bl	8000e28 <HAL_GPIO_WritePin>
		if (uxTaskPriorityGet(my_ON_TaskHandle) == osPriorityLow) {
 8000504:	e7a0      	b.n	8000448 <Start_OFF_Task+0x8>
 8000506:	bf00      	nop
 8000508:	200000dc 	.word	0x200000dc
 800050c:	20000092 	.word	0x20000092
 8000510:	08005c14 	.word	0x08005c14
 8000514:	20000090 	.word	0x20000090
 8000518:	20000094 	.word	0x20000094
 800051c:	20000091 	.word	0x20000091
 8000520:	08005c40 	.word	0x08005c40
 8000524:	40011000 	.word	0x40011000

08000528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d101      	bne.n	800053e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800053a:	f000 f9f5 	bl	8000928 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40000800 	.word	0x40000800

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <HAL_MspInit+0x68>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <HAL_MspInit+0x68>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x68>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x68>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <HAL_MspInit+0x68>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x68>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	210f      	movs	r1, #15
 8000592:	f06f 0001 	mvn.w	r0, #1
 8000596:	f000 fa98 	bl	8000aca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x6c>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x6c>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <HAL_UART_MspInit+0x8c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d131      	bne.n	800064c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_UART_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_UART_MspInit+0x90>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_UART_MspInit+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_UART_MspInit+0x94>)
 800062e:	f000 fa77 	bl	8000b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_UART_MspInit+0x94>)
 8000648:	f000 fa6a 	bl	8000b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40004800 	.word	0x40004800
 8000658:	40021000 	.word	0x40021000
 800065c:	40010c00 	.word	0x40010c00

08000660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	; 0x38
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <HAL_InitTick+0xe8>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a33      	ldr	r2, [pc, #204]	; (8000748 <HAL_InitTick+0xe8>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <HAL_InitTick+0xe8>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800068e:	f107 0210 	add.w	r2, r7, #16
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f000 ffd9 	bl	8001650 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d103      	bne.n	80006b0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a8:	f000 ffaa 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 80006ac:	6378      	str	r0, [r7, #52]	; 0x34
 80006ae:	e004      	b.n	80006ba <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006b0:	f000 ffa6 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 80006b4:	4603      	mov	r3, r0
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006bc:	4a23      	ldr	r2, [pc, #140]	; (800074c <HAL_InitTick+0xec>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	0c9b      	lsrs	r3, r3, #18
 80006c4:	3b01      	subs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <HAL_InitTick+0xf0>)
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <HAL_InitTick+0xf4>)
 80006cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <HAL_InitTick+0xf0>)
 80006d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <HAL_InitTick+0xf0>)
 80006d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006da:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <HAL_InitTick+0xf0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_InitTick+0xf0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <HAL_InitTick+0xf0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006ee:	4818      	ldr	r0, [pc, #96]	; (8000750 <HAL_InitTick+0xf0>)
 80006f0:	f000 fffc 	bl	80016ec <HAL_TIM_Base_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d11b      	bne.n	800073a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <HAL_InitTick+0xf0>)
 8000704:	f001 f84a 	bl	800179c <HAL_TIM_Base_Start_IT>
 8000708:	4603      	mov	r3, r0
 800070a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800070e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000712:	2b00      	cmp	r3, #0
 8000714:	d111      	bne.n	800073a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000716:	201e      	movs	r0, #30
 8000718:	f000 f9f3 	bl	8000b02 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b0f      	cmp	r3, #15
 8000720:	d808      	bhi.n	8000734 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000722:	2200      	movs	r2, #0
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	201e      	movs	r0, #30
 8000728:	f000 f9cf 	bl	8000aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_InitTick+0xf8>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	e002      	b.n	800073a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800073a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800073e:	4618      	mov	r0, r3
 8000740:	3738      	adds	r7, #56	; 0x38
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	431bde83 	.word	0x431bde83
 8000750:	200000e4 	.word	0x200000e4
 8000754:	40000800 	.word	0x40000800
 8000758:	20000004 	.word	0x20000004

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
	...

08000788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <TIM4_IRQHandler+0x10>)
 800078e:	f001 f857 	bl	8001840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000e4 	.word	0x200000e4

0800079c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
  }

  return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007fc:	605a      	str	r2, [r3, #4]
  return 0;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <_isatty>:

int _isatty(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800081e:	b480      	push	{r7}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
	...

08000838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <_sbrk+0x5c>)
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <_sbrk+0x60>)
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x64>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <_sbrk+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d207      	bcs.n	8000878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000868:	f004 f900 	bl	8004a6c <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	220c      	movs	r2, #12
 8000870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000876:	e009      	b.n	800088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <_sbrk+0x64>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20005000 	.word	0x20005000
 8000898:	00000400 	.word	0x00000400
 800089c:	2000012c 	.word	0x2000012c
 80008a0:	20001b50 	.word	0x20001b50

080008a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008d6:	f7ff ffe5 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f004 f9c3 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008de:	f7ff fc83 	bl	80001e8 <main>
  bx lr
 80008e2:	4770      	bx	lr
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008ec:	08005d78 	.word	0x08005d78
  ldr r2, =_sbss
 80008f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008f4:	20001b4c 	.word	0x20001b4c

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>
	...

080008fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_Init+0x28>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_Init+0x28>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f8d1 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	200f      	movs	r0, #15
 8000914:	f7ff fea4 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff fe1e 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_IncTick+0x20>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000008 	.word	0x20000008
 8000948:	20000130 	.word	0x20000130

0800094c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000130 	.word	0x20000130

08000960 <__NVIC_SetPriorityGrouping>:
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4906      	ldr	r1, [pc, #24]	; (80009f8 <__NVIC_EnableIRQ+0x34>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff4f 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff64 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ffb2 	bl	8000a50 <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff81 	bl	80009fc <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff57 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b08b      	sub	sp, #44	; 0x2c
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	e169      	b.n	8000e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b34:	2201      	movs	r2, #1
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8158 	bne.w	8000e02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a9a      	ldr	r2, [pc, #616]	; (8000dc0 <HAL_GPIO_Init+0x2a0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d05e      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b5c:	4a98      	ldr	r2, [pc, #608]	; (8000dc0 <HAL_GPIO_Init+0x2a0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d875      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b62:	4a98      	ldr	r2, [pc, #608]	; (8000dc4 <HAL_GPIO_Init+0x2a4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d058      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b68:	4a96      	ldr	r2, [pc, #600]	; (8000dc4 <HAL_GPIO_Init+0x2a4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d86f      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b6e:	4a96      	ldr	r2, [pc, #600]	; (8000dc8 <HAL_GPIO_Init+0x2a8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d052      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b74:	4a94      	ldr	r2, [pc, #592]	; (8000dc8 <HAL_GPIO_Init+0x2a8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d869      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b7a:	4a94      	ldr	r2, [pc, #592]	; (8000dcc <HAL_GPIO_Init+0x2ac>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d04c      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b80:	4a92      	ldr	r2, [pc, #584]	; (8000dcc <HAL_GPIO_Init+0x2ac>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d863      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b86:	4a92      	ldr	r2, [pc, #584]	; (8000dd0 <HAL_GPIO_Init+0x2b0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d046      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a90      	ldr	r2, [pc, #576]	; (8000dd0 <HAL_GPIO_Init+0x2b0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d85d      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b92:	2b12      	cmp	r3, #18
 8000b94:	d82a      	bhi.n	8000bec <HAL_GPIO_Init+0xcc>
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d859      	bhi.n	8000c4e <HAL_GPIO_Init+0x12e>
 8000b9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <HAL_GPIO_Init+0x80>)
 8000b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba0:	08000c1b 	.word	0x08000c1b
 8000ba4:	08000bf5 	.word	0x08000bf5
 8000ba8:	08000c07 	.word	0x08000c07
 8000bac:	08000c49 	.word	0x08000c49
 8000bb0:	08000c4f 	.word	0x08000c4f
 8000bb4:	08000c4f 	.word	0x08000c4f
 8000bb8:	08000c4f 	.word	0x08000c4f
 8000bbc:	08000c4f 	.word	0x08000c4f
 8000bc0:	08000c4f 	.word	0x08000c4f
 8000bc4:	08000c4f 	.word	0x08000c4f
 8000bc8:	08000c4f 	.word	0x08000c4f
 8000bcc:	08000c4f 	.word	0x08000c4f
 8000bd0:	08000c4f 	.word	0x08000c4f
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c4f 	.word	0x08000c4f
 8000bdc:	08000c4f 	.word	0x08000c4f
 8000be0:	08000c4f 	.word	0x08000c4f
 8000be4:	08000bfd 	.word	0x08000bfd
 8000be8:	08000c11 	.word	0x08000c11
 8000bec:	4a79      	ldr	r2, [pc, #484]	; (8000dd4 <HAL_GPIO_Init+0x2b4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d013      	beq.n	8000c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf2:	e02c      	b.n	8000c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e029      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	3304      	adds	r3, #4
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e024      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e01f      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	330c      	adds	r3, #12
 8000c16:	623b      	str	r3, [r7, #32]
          break;
 8000c18:	e01a      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c22:	2304      	movs	r3, #4
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e013      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d105      	bne.n	8000c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	611a      	str	r2, [r3, #16]
          break;
 8000c3a:	e009      	b.n	8000c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	615a      	str	r2, [r3, #20]
          break;
 8000c46:	e003      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x130>
          break;
 8000c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	2bff      	cmp	r3, #255	; 0xff
 8000c54:	d801      	bhi.n	8000c5a <HAL_GPIO_Init+0x13a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	e001      	b.n	8000c5e <HAL_GPIO_Init+0x13e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2bff      	cmp	r3, #255	; 0xff
 8000c64:	d802      	bhi.n	8000c6c <HAL_GPIO_Init+0x14c>
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x152>
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	3b08      	subs	r3, #8
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	210f      	movs	r1, #15
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	401a      	ands	r2, r3
 8000c84:	6a39      	ldr	r1, [r7, #32]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 80b1 	beq.w	8000e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	; (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <HAL_GPIO_Init+0x2b8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb8:	4a48      	ldr	r2, [pc, #288]	; (8000ddc <HAL_GPIO_Init+0x2bc>)
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a40      	ldr	r2, [pc, #256]	; (8000de0 <HAL_GPIO_Init+0x2c0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d013      	beq.n	8000d0c <HAL_GPIO_Init+0x1ec>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3f      	ldr	r2, [pc, #252]	; (8000de4 <HAL_GPIO_Init+0x2c4>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d00d      	beq.n	8000d08 <HAL_GPIO_Init+0x1e8>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3e      	ldr	r2, [pc, #248]	; (8000de8 <HAL_GPIO_Init+0x2c8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <HAL_GPIO_Init+0x1e4>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <HAL_GPIO_Init+0x2cc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d101      	bne.n	8000d00 <HAL_GPIO_Init+0x1e0>
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e006      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d00:	2304      	movs	r3, #4
 8000d02:	e004      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <HAL_GPIO_Init+0x1ee>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d10:	f002 0203 	and.w	r2, r2, #3
 8000d14:	0092      	lsls	r2, r2, #2
 8000d16:	4093      	lsls	r3, r2
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1e:	492f      	ldr	r1, [pc, #188]	; (8000ddc <HAL_GPIO_Init+0x2bc>)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	492c      	ldr	r1, [pc, #176]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	600b      	str	r3, [r1, #0]
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4928      	ldr	r1, [pc, #160]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	4922      	ldr	r1, [pc, #136]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	491e      	ldr	r1, [pc, #120]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	4918      	ldr	r1, [pc, #96]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4914      	ldr	r1, [pc, #80]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d021      	beq.n	8000df4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	490e      	ldr	r1, [pc, #56]	; (8000df0 <HAL_GPIO_Init+0x2d0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60cb      	str	r3, [r1, #12]
 8000dbc:	e021      	b.n	8000e02 <HAL_GPIO_Init+0x2e2>
 8000dbe:	bf00      	nop
 8000dc0:	10320000 	.word	0x10320000
 8000dc4:	10310000 	.word	0x10310000
 8000dc8:	10220000 	.word	0x10220000
 8000dcc:	10210000 	.word	0x10210000
 8000dd0:	10120000 	.word	0x10120000
 8000dd4:	10110000 	.word	0x10110000
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	40011000 	.word	0x40011000
 8000dec:	40011400 	.word	0x40011400
 8000df0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_GPIO_Init+0x304>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4909      	ldr	r1, [pc, #36]	; (8000e24 <HAL_GPIO_Init+0x304>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f47f ae8e 	bne.w	8000b34 <HAL_GPIO_Init+0x14>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	372c      	adds	r7, #44	; 0x2c
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	4613      	mov	r3, r2
 8000e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e38:	787b      	ldrb	r3, [r7, #1]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e44:	e003      	b.n	8000e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	041a      	lsls	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	611a      	str	r2, [r3, #16]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e272      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8087 	beq.w	8000f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e78:	4b92      	ldr	r3, [pc, #584]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d00c      	beq.n	8000e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e84:	4b8f      	ldr	r3, [pc, #572]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d112      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x5e>
 8000e90:	4b8c      	ldr	r3, [pc, #560]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9e:	4b89      	ldr	r3, [pc, #548]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d06c      	beq.n	8000f84 <HAL_RCC_OscConfig+0x12c>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d168      	bne.n	8000f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e24c      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x76>
 8000ec0:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a7f      	ldr	r2, [pc, #508]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e02e      	b.n	8000f2c <HAL_RCC_OscConfig+0xd4>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x98>
 8000ed6:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a7a      	ldr	r2, [pc, #488]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b78      	ldr	r3, [pc, #480]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a77      	ldr	r2, [pc, #476]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e01d      	b.n	8000f2c <HAL_RCC_OscConfig+0xd4>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0xbc>
 8000efa:	4b72      	ldr	r3, [pc, #456]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a71      	ldr	r2, [pc, #452]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a6e      	ldr	r2, [pc, #440]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e00b      	b.n	8000f2c <HAL_RCC_OscConfig+0xd4>
 8000f14:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a6a      	ldr	r2, [pc, #424]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a67      	ldr	r2, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fd0a 	bl	800094c <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fd06 	bl	800094c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e200      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0xe4>
 8000f5a:	e014      	b.n	8000f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fcf6 	bl	800094c <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fcf2 	bl	800094c <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e1ec      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x10c>
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d063      	beq.n	800105a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f92:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 030c 	and.w	r3, r3, #12
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00b      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f9e:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d11c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x18c>
 8000faa:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d116      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb6:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <HAL_RCC_OscConfig+0x176>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d001      	beq.n	8000fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e1c0      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4939      	ldr	r1, [pc, #228]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe2:	e03a      	b.n	800105a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fcab 	bl	800094c <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fca7 	bl	800094c <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e1a1      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4927      	ldr	r1, [pc, #156]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8001028:	4313      	orrs	r3, r2
 800102a:	600b      	str	r3, [r1, #0]
 800102c:	e015      	b.n	800105a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fc8a 	bl	800094c <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103c:	f7ff fc86 	bl	800094c <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e180      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d03a      	beq.n	80010dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d019      	beq.n	80010a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_RCC_OscConfig+0x274>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001074:	f7ff fc6a 	bl	800094c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fc66 	bl	800094c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e160      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_RCC_OscConfig+0x26c>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f000 fb08 	bl	80016b0 <RCC_Delay>
 80010a0:	e01c      	b.n	80010dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_RCC_OscConfig+0x274>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc50 	bl	800094c <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ae:	e00f      	b.n	80010d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc4c 	bl	800094c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d908      	bls.n	80010d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e146      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	42420000 	.word	0x42420000
 80010cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d0:	4b92      	ldr	r3, [pc, #584]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e9      	bne.n	80010b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a6 	beq.w	8001236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ee:	4b8b      	ldr	r3, [pc, #556]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10d      	bne.n	8001116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b88      	ldr	r3, [pc, #544]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a87      	ldr	r2, [pc, #540]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b85      	ldr	r3, [pc, #532]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001112:	2301      	movs	r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001116:	4b82      	ldr	r3, [pc, #520]	; (8001320 <HAL_RCC_OscConfig+0x4c8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	2b00      	cmp	r3, #0
 8001120:	d118      	bne.n	8001154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001122:	4b7f      	ldr	r3, [pc, #508]	; (8001320 <HAL_RCC_OscConfig+0x4c8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a7e      	ldr	r2, [pc, #504]	; (8001320 <HAL_RCC_OscConfig+0x4c8>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112e:	f7ff fc0d 	bl	800094c <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001136:	f7ff fc09 	bl	800094c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e103      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x4c8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d106      	bne.n	800116a <HAL_RCC_OscConfig+0x312>
 800115c:	4b6f      	ldr	r3, [pc, #444]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4a6e      	ldr	r2, [pc, #440]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6213      	str	r3, [r2, #32]
 8001168:	e02d      	b.n	80011c6 <HAL_RCC_OscConfig+0x36e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x334>
 8001172:	4b6a      	ldr	r3, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a69      	ldr	r2, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6213      	str	r3, [r2, #32]
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a66      	ldr	r2, [pc, #408]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001184:	f023 0304 	bic.w	r3, r3, #4
 8001188:	6213      	str	r3, [r2, #32]
 800118a:	e01c      	b.n	80011c6 <HAL_RCC_OscConfig+0x36e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d10c      	bne.n	80011ae <HAL_RCC_OscConfig+0x356>
 8001194:	4b61      	ldr	r3, [pc, #388]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a60      	ldr	r2, [pc, #384]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6213      	str	r3, [r2, #32]
 80011a0:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4a5d      	ldr	r2, [pc, #372]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6213      	str	r3, [r2, #32]
 80011ac:	e00b      	b.n	80011c6 <HAL_RCC_OscConfig+0x36e>
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a5a      	ldr	r2, [pc, #360]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	4b58      	ldr	r3, [pc, #352]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a57      	ldr	r2, [pc, #348]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d015      	beq.n	80011fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fbbd 	bl	800094c <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fbb9 	bl	800094c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0b1      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0ee      	beq.n	80011d6 <HAL_RCC_OscConfig+0x37e>
 80011f8:	e014      	b.n	8001224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fba7 	bl	800094c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001202:	f7ff fba3 	bl	800094c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e09b      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	4b40      	ldr	r3, [pc, #256]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1ee      	bne.n	8001202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d105      	bne.n	8001236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a3b      	ldr	r2, [pc, #236]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8087 	beq.w	800134e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001240:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d061      	beq.n	8001310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d146      	bne.n	80012e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_RCC_OscConfig+0x4cc>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fb77 	bl	800094c <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff fb73 	bl	800094c <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e06d      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d108      	bne.n	800129c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4921      	ldr	r1, [pc, #132]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129c:	4b1f      	ldr	r3, [pc, #124]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a19      	ldr	r1, [r3, #32]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	430b      	orrs	r3, r1
 80012ae:	491b      	ldr	r1, [pc, #108]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_RCC_OscConfig+0x4cc>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb47 	bl	800094c <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff fb43 	bl	800094c <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e03d      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x46a>
 80012e0:	e035      	b.n	800134e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_RCC_OscConfig+0x4cc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb30 	bl	800094c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fb2c 	bl	800094c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e026      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_RCC_OscConfig+0x4c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x498>
 800130e:	e01e      	b.n	800134e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d107      	bne.n	8001328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e019      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
 800131c:	40021000 	.word	0x40021000
 8001320:	40007000 	.word	0x40007000
 8001324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_OscConfig+0x500>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0d0      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4b6a      	ldr	r3, [pc, #424]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d910      	bls.n	80013a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b67      	ldr	r3, [pc, #412]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4965      	ldr	r1, [pc, #404]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0b8      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b50      	ldr	r3, [pc, #320]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	494d      	ldr	r1, [pc, #308]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d040      	beq.n	800147c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d115      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e07f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141a:	4b41      	ldr	r3, [pc, #260]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e073      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142a:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e06b      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f023 0203 	bic.w	r2, r3, #3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4936      	ldr	r1, [pc, #216]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800144c:	f7ff fa7e 	bl	800094c <HAL_GetTick>
 8001450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001452:	e00a      	b.n	800146a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001454:	f7ff fa7a 	bl	800094c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e053      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 020c 	and.w	r2, r3, #12
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	429a      	cmp	r2, r3
 800147a:	d1eb      	bne.n	8001454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d210      	bcs.n	80014ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 0207 	bic.w	r2, r3, #7
 8001492:	4922      	ldr	r1, [pc, #136]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e032      	b.n	8001512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4916      	ldr	r1, [pc, #88]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ea:	f000 f821 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 80014ee:	4602      	mov	r2, r0
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <HAL_RCC_ClockConfig+0x1c8>)
 80014fc:	5ccb      	ldrb	r3, [r1, r3]
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <HAL_RCC_ClockConfig+0x1cc>)
 8001504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RCC_ClockConfig+0x1d0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f8a8 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000
 8001520:	40021000 	.word	0x40021000
 8001524:	08005cc0 	.word	0x08005cc0
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001530:	b490      	push	{r4, r7}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <HAL_RCC_GetSysClockFreq+0xac>)
 8001538:	1d3c      	adds	r4, r7, #4
 800153a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800153c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001540:	f240 2301 	movw	r3, #513	; 0x201
 8001544:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b04      	cmp	r3, #4
 8001568:	d002      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x40>
 800156a:	2b08      	cmp	r3, #8
 800156c:	d003      	beq.n	8001576 <HAL_RCC_GetSysClockFreq+0x46>
 800156e:	e02b      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001572:	623b      	str	r3, [r7, #32]
      break;
 8001574:	e02b      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	0c9b      	lsrs	r3, r3, #18
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3328      	adds	r3, #40	; 0x28
 8001580:	443b      	add	r3, r7
 8001582:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001586:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	0c5b      	lsrs	r3, r3, #17
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	3328      	adds	r3, #40	; 0x28
 800159e:	443b      	add	r3, r7
 80015a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015aa:	fb03 f202 	mul.w	r2, r3, r2
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	e004      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	623b      	str	r3, [r7, #32]
      break;
 80015c6:	e002      	b.n	80015ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ca:	623b      	str	r3, [r7, #32]
      break;
 80015cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ce:	6a3b      	ldr	r3, [r7, #32]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc90      	pop	{r4, r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	08005c50 	.word	0x08005c50
 80015e0:	40021000 	.word	0x40021000
 80015e4:	007a1200 	.word	0x007a1200
 80015e8:	003d0900 	.word	0x003d0900

080015ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <HAL_RCC_GetHCLKFreq+0x10>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000000 	.word	0x20000000

08001600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001604:	f7ff fff2 	bl	80015ec <HAL_RCC_GetHCLKFreq>
 8001608:	4602      	mov	r2, r0
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	4903      	ldr	r1, [pc, #12]	; (8001624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001616:	5ccb      	ldrb	r3, [r1, r3]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	08005cd0 	.word	0x08005cd0

08001628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800162c:	f7ff ffde 	bl	80015ec <HAL_RCC_GetHCLKFreq>
 8001630:	4602      	mov	r2, r0
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	0adb      	lsrs	r3, r3, #11
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	4903      	ldr	r1, [pc, #12]	; (800164c <HAL_RCC_GetPCLK2Freq+0x24>)
 800163e:	5ccb      	ldrb	r3, [r1, r3]
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001644:	4618      	mov	r0, r3
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	08005cd0 	.word	0x08005cd0

08001650 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	220f      	movs	r2, #15
 800165e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_GetClockConfig+0x58>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCC_GetClockConfig+0x58>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_GetClockConfig+0x58>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_RCC_GetClockConfig+0x58>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_GetClockConfig+0x5c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0207 	and.w	r2, r3, #7
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40022000 	.word	0x40022000

080016b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <RCC_Delay+0x34>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <RCC_Delay+0x38>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0a5b      	lsrs	r3, r3, #9
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016cc:	bf00      	nop
  }
  while (Delay --);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	60fa      	str	r2, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f9      	bne.n	80016cc <RCC_Delay+0x1c>
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000000 	.word	0x20000000
 80016e8:	10624dd3 	.word	0x10624dd3

080016ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e041      	b.n	8001782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f839 	bl	800178a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f000 f9b4 	bl	8001a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d001      	beq.n	80017b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e03a      	b.n	800182a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2202      	movs	r2, #2
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_TIM_Base_Start_IT+0x98>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00e      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x58>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017de:	d009      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x58>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_TIM_Base_Start_IT+0x9c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d004      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x58>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_TIM_Base_Start_IT+0xa0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b06      	cmp	r3, #6
 8001804:	d010      	beq.n	8001828 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001816:	e007      	b.n	8001828 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40000400 	.word	0x40000400
 800183c:	40000800 	.word	0x40000800

08001840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d122      	bne.n	800189c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b02      	cmp	r3, #2
 8001862:	d11b      	bne.n	800189c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0202 	mvn.w	r2, #2
 800186c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8ed 	bl	8001a62 <HAL_TIM_IC_CaptureCallback>
 8001888:	e005      	b.n	8001896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f8e0 	bl	8001a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8ef 	bl	8001a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d122      	bne.n	80018f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d11b      	bne.n	80018f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f06f 0204 	mvn.w	r2, #4
 80018c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2202      	movs	r2, #2
 80018c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8c3 	bl	8001a62 <HAL_TIM_IC_CaptureCallback>
 80018dc:	e005      	b.n	80018ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8b6 	bl	8001a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f8c5 	bl	8001a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d122      	bne.n	8001944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b08      	cmp	r3, #8
 800190a:	d11b      	bne.n	8001944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 0208 	mvn.w	r2, #8
 8001914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2204      	movs	r2, #4
 800191a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f899 	bl	8001a62 <HAL_TIM_IC_CaptureCallback>
 8001930:	e005      	b.n	800193e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f88c 	bl	8001a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f89b 	bl	8001a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b10      	cmp	r3, #16
 8001950:	d122      	bne.n	8001998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b10      	cmp	r3, #16
 800195e:	d11b      	bne.n	8001998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0210 	mvn.w	r2, #16
 8001968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2208      	movs	r2, #8
 800196e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f86f 	bl	8001a62 <HAL_TIM_IC_CaptureCallback>
 8001984:	e005      	b.n	8001992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f862 	bl	8001a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f871 	bl	8001a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10e      	bne.n	80019c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0201 	mvn.w	r2, #1
 80019bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fdb2 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ce:	2b80      	cmp	r3, #128	; 0x80
 80019d0:	d10e      	bne.n	80019f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d107      	bne.n	80019f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f8bf 	bl	8001b6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	2b40      	cmp	r3, #64	; 0x40
 80019fc:	d10e      	bne.n	8001a1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d107      	bne.n	8001a1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f835 	bl	8001a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d10e      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b20      	cmp	r3, #32
 8001a36:	d107      	bne.n	8001a48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0220 	mvn.w	r2, #32
 8001a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f88a 	bl	8001b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <TIM_Base_SetConfig+0xb8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00b      	beq.n	8001ac8 <TIM_Base_SetConfig+0x30>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab6:	d007      	beq.n	8001ac8 <TIM_Base_SetConfig+0x30>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <TIM_Base_SetConfig+0xbc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <TIM_Base_SetConfig+0x30>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	; (8001b58 <TIM_Base_SetConfig+0xc0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d108      	bne.n	8001ada <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <TIM_Base_SetConfig+0xb8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00b      	beq.n	8001afa <TIM_Base_SetConfig+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae8:	d007      	beq.n	8001afa <TIM_Base_SetConfig+0x62>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <TIM_Base_SetConfig+0xbc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d003      	beq.n	8001afa <TIM_Base_SetConfig+0x62>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <TIM_Base_SetConfig+0xc0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d108      	bne.n	8001b0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <TIM_Base_SetConfig+0xb8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d103      	bne.n	8001b40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	615a      	str	r2, [r3, #20]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800

08001b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e03f      	b.n	8001c12 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fd0e 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2224      	movs	r2, #36	; 0x24
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f905 	bl	8001dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b08a      	sub	sp, #40	; 0x28
 8001c1e:	af02      	add	r7, sp, #8
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d17c      	bne.n	8001d34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_UART_Transmit+0x2c>
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e075      	b.n	8001d36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_UART_Transmit+0x3e>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e06e      	b.n	8001d36 <HAL_UART_Transmit+0x11c>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2221      	movs	r2, #33	; 0x21
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe fe6d 	bl	800094c <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c88:	d108      	bne.n	8001c9c <HAL_UART_Transmit+0x82>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d104      	bne.n	8001c9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	e003      	b.n	8001ca4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001cac:	e02a      	b.n	8001d04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f840 	bl	8001d3e <UART_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e036      	b.n	8001d36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e007      	b.n	8001cf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1cf      	bne.n	8001cae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f810 	bl	8001d3e <UART_WaitOnFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e006      	b.n	8001d36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d4e:	e02c      	b.n	8001daa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d56:	d028      	beq.n	8001daa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8001d5e:	f7fe fdf5 	bl	800094c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d21d      	bcs.n	8001daa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e00f      	b.n	8001dca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d0c3      	beq.n	8001d50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e0e:	f023 030c 	bic.w	r3, r3, #12
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699a      	ldr	r2, [r3, #24]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <UART_SetConfig+0x114>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d103      	bne.n	8001e44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e3c:	f7ff fbf4 	bl	8001628 <HAL_RCC_GetPCLK2Freq>
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	e002      	b.n	8001e4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e44:	f7ff fbdc 	bl	8001600 <HAL_RCC_GetPCLK1Freq>
 8001e48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009a      	lsls	r2, r3, #2
 8001e54:	441a      	add	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <UART_SetConfig+0x118>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	0119      	lsls	r1, r3, #4
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <UART_SetConfig+0x118>)
 8001e82:	fba3 0302 	umull	r0, r3, r3, r2
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2064      	movs	r0, #100	; 0x64
 8001e8a:	fb00 f303 	mul.w	r3, r0, r3
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	3332      	adds	r3, #50	; 0x32
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <UART_SetConfig+0x118>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	4419      	add	r1, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009a      	lsls	r2, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <UART_SetConfig+0x118>)
 8001eba:	fba3 0302 	umull	r0, r3, r3, r2
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2064      	movs	r0, #100	; 0x64
 8001ec2:	fb00 f303 	mul.w	r3, r0, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	3332      	adds	r3, #50	; 0x32
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <UART_SetConfig+0x118>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	f003 020f 	and.w	r2, r3, #15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	440a      	add	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	51eb851f 	.word	0x51eb851f

08001ef0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ef6:	f3ef 8305 	mrs	r3, IPSR
 8001efa:	60bb      	str	r3, [r7, #8]
  return(result);
 8001efc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f02:	f3ef 8310 	mrs	r3, PRIMASK
 8001f06:	607b      	str	r3, [r7, #4]
  return(result);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <osKernelInitialize+0x32>
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <osKernelInitialize+0x60>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d109      	bne.n	8001f2a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f16:	f3ef 8311 	mrs	r3, BASEPRI
 8001f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001f22:	f06f 0305 	mvn.w	r3, #5
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e00c      	b.n	8001f44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <osKernelInitialize+0x60>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <osKernelInitialize+0x60>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e002      	b.n	8001f44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f44:	68fb      	ldr	r3, [r7, #12]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000134 	.word	0x20000134

08001f54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f5a:	f3ef 8305 	mrs	r3, IPSR
 8001f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f66:	f3ef 8310 	mrs	r3, PRIMASK
 8001f6a:	607b      	str	r3, [r7, #4]
  return(result);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <osKernelStart+0x32>
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <osKernelStart+0x64>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d109      	bne.n	8001f8e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8001f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001f86:	f06f 0305 	mvn.w	r3, #5
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e00e      	b.n	8001fac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <osKernelStart+0x64>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <osKernelStart+0x64>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001f9c:	f001 f94c 	bl	8003238 <vTaskStartScheduler>
      stat = osOK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e002      	b.n	8001fac <osKernelStart+0x58>
    } else {
      stat = osError;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001faa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000134 	.word	0x20000134

08001fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b092      	sub	sp, #72	; 0x48
 8001fc0:	af04      	add	r7, sp, #16
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fcc:	f3ef 8305 	mrs	r3, IPSR
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 8094 	bne.w	8002102 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fda:	f3ef 8310 	mrs	r3, PRIMASK
 8001fde:	623b      	str	r3, [r7, #32]
  return(result);
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 808d 	bne.w	8002102 <osThreadNew+0x146>
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <osThreadNew+0x150>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d106      	bne.n	8001ffe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8001ff4:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f040 8082 	bne.w	8002102 <osThreadNew+0x146>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d07e      	beq.n	8002102 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002008:	2318      	movs	r3, #24
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800200c:	2300      	movs	r3, #0
 800200e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002010:	f107 031b 	add.w	r3, r7, #27
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d045      	beq.n	80020ae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <osThreadNew+0x74>
        name = attr->name;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <osThreadNew+0x9a>
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	2b38      	cmp	r3, #56	; 0x38
 8002048:	d805      	bhi.n	8002056 <osThreadNew+0x9a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <osThreadNew+0x9e>
        return (NULL);
 8002056:	2300      	movs	r3, #0
 8002058:	e054      	b.n	8002104 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00e      	beq.n	8002090 <osThreadNew+0xd4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2bbb      	cmp	r3, #187	; 0xbb
 8002078:	d90a      	bls.n	8002090 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <osThreadNew+0xd4>
        mem = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
 800208e:	e010      	b.n	80020b2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10c      	bne.n	80020b2 <osThreadNew+0xf6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d108      	bne.n	80020b2 <osThreadNew+0xf6>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d104      	bne.n	80020b2 <osThreadNew+0xf6>
          mem = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ac:	e001      	b.n	80020b2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d110      	bne.n	80020da <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020c0:	9202      	str	r2, [sp, #8]
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fe12 	bl	8002cf8 <xTaskCreateStatic>
 80020d4:	4603      	mov	r3, r0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e013      	b.n	8002102 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d110      	bne.n	8002102 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fe5c 	bl	8002db0 <xTaskCreate>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d001      	beq.n	8002102 <osThreadNew+0x146>
          hTask = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002102:	697b      	ldr	r3, [r7, #20]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3738      	adds	r7, #56	; 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000134 	.word	0x20000134

08002110 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002118:	f3ef 8305 	mrs	r3, IPSR
 800211c:	613b      	str	r3, [r7, #16]
  return(result);
 800211e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002124:	f3ef 8310 	mrs	r3, PRIMASK
 8002128:	60fb      	str	r3, [r7, #12]
  return(result);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <osDelay+0x34>
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <osDelay+0x58>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d109      	bne.n	800214c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002138:	f3ef 8311 	mrs	r3, BASEPRI
 800213c:	60bb      	str	r3, [r7, #8]
  return(result);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <osDelay+0x3c>
    stat = osErrorISR;
 8002144:	f06f 0305 	mvn.w	r3, #5
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e007      	b.n	800215c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 ff7e 	bl	8003058 <vTaskDelay>
    }
  }

  return (stat);
 800215c:	697b      	ldr	r3, [r7, #20]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000134 	.word	0x20000134

0800216c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4a06      	ldr	r2, [pc, #24]	; (8002194 <vApplicationGetIdleTaskMemory+0x28>)
 800217c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <vApplicationGetIdleTaskMemory+0x2c>)
 8002182:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	20000138 	.word	0x20000138
 8002198:	200001f4 	.word	0x200001f4

0800219c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80021ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <vApplicationGetTimerTaskMemory+0x30>)
 80021b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	200003f4 	.word	0x200003f4
 80021cc:	200004b0 	.word	0x200004b0

080021d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 0208 	add.w	r2, r3, #8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0208 	add.w	r2, r3, #8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f103 0208 	add.w	r2, r3, #8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002282:	d103      	bne.n	800228c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e00c      	b.n	80022a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3308      	adds	r3, #8
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e002      	b.n	800229a <vListInsert+0x2e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d2f6      	bcs.n	8002294 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6892      	ldr	r2, [r2, #8]
 80022f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6852      	ldr	r2, [r2, #4]
 80022fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d103      	bne.n	8002310 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
	...

08002330 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002356:	bf00      	nop
 8002358:	e7fe      	b.n	8002358 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800235a:	f002 f8af 	bl	80044bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	441a      	add	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	3b01      	subs	r3, #1
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	441a      	add	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	22ff      	movs	r2, #255	; 0xff
 800239e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	22ff      	movs	r2, #255	; 0xff
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d114      	bne.n	80023da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01a      	beq.n	80023ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3310      	adds	r3, #16
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 f9d7 	bl	8003770 <xTaskRemoveFromEventList>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <xQueueGenericReset+0xcc>)
 80023ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	e009      	b.n	80023ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3310      	adds	r3, #16
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fef6 	bl	80021d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3324      	adds	r3, #36	; 0x24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fef1 	bl	80021d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023ee:	f002 f895 	bl	800451c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	e000ed04 	.word	0xe000ed04

08002400 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <xQueueGenericCreateStatic+0x52>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <xQueueGenericCreateStatic+0x56>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <xQueueGenericCreateStatic+0x58>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	623b      	str	r3, [r7, #32]
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <xQueueGenericCreateStatic+0x7e>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <xQueueGenericCreateStatic+0x82>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <xQueueGenericCreateStatic+0x84>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	61fb      	str	r3, [r7, #28]
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800249e:	2350      	movs	r3, #80	; 0x50
 80024a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b50      	cmp	r3, #80	; 0x50
 80024a6:	d00a      	beq.n	80024be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	61bb      	str	r3, [r7, #24]
}
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00d      	beq.n	80024e4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024d0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f805 	bl	80024ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3730      	adds	r7, #48	; 0x30
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e002      	b.n	8002510 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800251c:	2101      	movs	r1, #1
 800251e:	69b8      	ldr	r0, [r7, #24]
 8002520:	f7ff ff06 	bl	8002330 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <xQueueGenericSend+0x32>
	__asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <xQueueGenericSend+0x40>
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <xQueueGenericSend+0x44>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <xQueueGenericSend+0x46>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <xQueueGenericSend+0x60>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002590:	bf00      	nop
 8002592:	e7fe      	b.n	8002592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d103      	bne.n	80025a2 <xQueueGenericSend+0x6e>
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <xQueueGenericSend+0x72>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <xQueueGenericSend+0x74>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	623b      	str	r3, [r7, #32]
}
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025c2:	f001 fa9b 	bl	8003afc <xTaskGetSchedulerState>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <xQueueGenericSend+0x9e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <xQueueGenericSend+0xa2>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueGenericSend+0xa4>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	61fb      	str	r3, [r7, #28]
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025f2:	f001 ff63 	bl	80044bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <xQueueGenericSend+0xd4>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d129      	bne.n	800265c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800260e:	f000 fa07 	bl	8002a20 <prvCopyDataToQueue>
 8002612:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	3324      	adds	r3, #36	; 0x24
 8002620:	4618      	mov	r0, r3
 8002622:	f001 f8a5 	bl	8003770 <xTaskRemoveFromEventList>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800262c:	4b3f      	ldr	r3, [pc, #252]	; (800272c <xQueueGenericSend+0x1f8>)
 800262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	e00a      	b.n	8002654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <xQueueGenericSend+0x1f8>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002654:	f001 ff62 	bl	800451c <vPortExitCritical>
				return pdPASS;
 8002658:	2301      	movs	r3, #1
 800265a:	e063      	b.n	8002724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002662:	f001 ff5b 	bl	800451c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002666:	2300      	movs	r3, #0
 8002668:	e05c      	b.n	8002724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f8df 	bl	8003838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800267a:	2301      	movs	r3, #1
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800267e:	f001 ff4d 	bl	800451c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002682:	f000 fe49 	bl	8003318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002686:	f001 ff19 	bl	80044bc <vPortEnterCritical>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002690:	b25b      	sxtb	r3, r3
 8002692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002696:	d103      	bne.n	80026a0 <xQueueGenericSend+0x16c>
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ac:	d103      	bne.n	80026b6 <xQueueGenericSend+0x182>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b6:	f001 ff31 	bl	800451c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026ba:	1d3a      	adds	r2, r7, #4
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f8ce 	bl	8003864 <xTaskCheckForTimeOut>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d124      	bne.n	8002718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d0:	f000 fa9e 	bl	8002c10 <prvIsQueueFull>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d018      	beq.n	800270c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	3310      	adds	r3, #16
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fff4 	bl	80036d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f000 fa29 	bl	8002b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026ee:	f000 fe21 	bl	8003334 <xTaskResumeAll>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f af7c 	bne.w	80025f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <xQueueGenericSend+0x1f8>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	e772      	b.n	80025f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800270c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800270e:	f000 fa17 	bl	8002b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002712:	f000 fe0f 	bl	8003334 <xTaskResumeAll>
 8002716:	e76c      	b.n	80025f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800271a:	f000 fa11 	bl	8002b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800271e:	f000 fe09 	bl	8003334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002722:	2300      	movs	r3, #0
		}
	}
}
 8002724:	4618      	mov	r0, r3
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
}
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <xQueueGenericSendFromISR+0x3c>
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <xQueueGenericSendFromISR+0x40>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <xQueueGenericSendFromISR+0x42>
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	623b      	str	r3, [r7, #32]
}
 8002788:	bf00      	nop
 800278a:	e7fe      	b.n	800278a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d103      	bne.n	800279a <xQueueGenericSendFromISR+0x6a>
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <xQueueGenericSendFromISR+0x6e>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <xQueueGenericSendFromISR+0x70>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	61fb      	str	r3, [r7, #28]
}
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027ba:	f001 ff41 	bl	8004640 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027be:	f3ef 8211 	mrs	r2, BASEPRI
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	61ba      	str	r2, [r7, #24]
 80027d4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027d6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <xQueueGenericSendFromISR+0xbc>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d12c      	bne.n	8002846 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fc:	f000 f910 	bl	8002a20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002800:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002808:	d112      	bne.n	8002830 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	4618      	mov	r0, r3
 8002818:	f000 ffaa 	bl	8003770 <xTaskRemoveFromEventList>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e007      	b.n	8002840 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002830:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002834:	3301      	adds	r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	b25a      	sxtb	r2, r3
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002840:	2301      	movs	r3, #1
 8002842:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002844:	e001      	b.n	800284a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002854:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002858:	4618      	mov	r0, r3
 800285a:	3738      	adds	r7, #56	; 0x38
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	; 0x30
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <xQueueReceive+0x30>
	__asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	623b      	str	r3, [r7, #32]
}
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <xQueueReceive+0x3e>
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <xQueueReceive+0x42>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueReceive+0x44>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueReceive+0x5e>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	61fb      	str	r3, [r7, #28]
}
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028be:	f001 f91d 	bl	8003afc <xTaskGetSchedulerState>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <xQueueReceive+0x6e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <xQueueReceive+0x72>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <xQueueReceive+0x74>
 80028d2:	2300      	movs	r3, #0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <xQueueReceive+0x8e>
	__asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	61bb      	str	r3, [r7, #24]
}
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ee:	f001 fde5 	bl	80044bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01f      	beq.n	800293e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002902:	f000 f8f7 	bl	8002af4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00f      	beq.n	8002936 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	3310      	adds	r3, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f000 ff28 	bl	8003770 <xTaskRemoveFromEventList>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <xQueueReceive+0x1bc>)
 8002928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002936:	f001 fdf1 	bl	800451c <vPortExitCritical>
				return pdPASS;
 800293a:	2301      	movs	r3, #1
 800293c:	e069      	b.n	8002a12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002944:	f001 fdea 	bl	800451c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002948:	2300      	movs	r3, #0
 800294a:	e062      	b.n	8002a12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f000 ff6e 	bl	8003838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002960:	f001 fddc 	bl	800451c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002964:	f000 fcd8 	bl	8003318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002968:	f001 fda8 	bl	80044bc <vPortEnterCritical>
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002978:	d103      	bne.n	8002982 <xQueueReceive+0x122>
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002988:	b25b      	sxtb	r3, r3
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298e:	d103      	bne.n	8002998 <xQueueReceive+0x138>
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002998:	f001 fdc0 	bl	800451c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 ff5d 	bl	8003864 <xTaskCheckForTimeOut>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d123      	bne.n	80029f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f917 	bl	8002be4 <prvIsQueueEmpty>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d017      	beq.n	80029ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	3324      	adds	r3, #36	; 0x24
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fe83 	bl	80036d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029cc:	f000 f8b8 	bl	8002b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029d0:	f000 fcb0 	bl	8003334 <xTaskResumeAll>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d189      	bne.n	80028ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <xQueueReceive+0x1bc>)
 80029dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	e780      	b.n	80028ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ee:	f000 f8a7 	bl	8002b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029f2:	f000 fc9f 	bl	8003334 <xTaskResumeAll>
 80029f6:	e77a      	b.n	80028ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fa:	f000 f8a1 	bl	8002b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029fe:	f000 fc99 	bl	8003334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a04:	f000 f8ee 	bl	8002be4 <prvIsQueueEmpty>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f43f af6f 	beq.w	80028ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3730      	adds	r7, #48	; 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000ed04 	.word	0xe000ed04

08002a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d14d      	bne.n	8002ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f874 	bl	8003b38 <xTaskPriorityDisinherit>
 8002a50:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	e043      	b.n	8002ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d119      	bne.n	8002a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6898      	ldr	r0, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	f002 f921 	bl	8004cb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d32b      	bcc.n	8002ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	e026      	b.n	8002ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68d8      	ldr	r0, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	f002 f907 	bl	8004cb2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	425b      	negs	r3, r3
 8002aae:	441a      	add	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	425b      	negs	r3, r3
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d105      	bne.n	8002ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002aea:	697b      	ldr	r3, [r7, #20]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	441a      	add	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d303      	bcc.n	8002b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68d9      	ldr	r1, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	461a      	mov	r2, r3
 8002b32:	6838      	ldr	r0, [r7, #0]
 8002b34:	f002 f8bd 	bl	8004cb2 <memcpy>
	}
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b48:	f001 fcb8 	bl	80044bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b54:	e011      	b.n	8002b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3324      	adds	r3, #36	; 0x24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fe04 	bl	8003770 <xTaskRemoveFromEventList>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b6e:	f000 fedb 	bl	8003928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dce9      	bgt.n	8002b56 <prvUnlockQueue+0x16>
 8002b82:	e000      	b.n	8002b86 <prvUnlockQueue+0x46>
					break;
 8002b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b8e:	f001 fcc5 	bl	800451c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b92:	f001 fc93 	bl	80044bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b9e:	e011      	b.n	8002bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3310      	adds	r3, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fddf 	bl	8003770 <xTaskRemoveFromEventList>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002bb8:	f000 feb6 	bl	8003928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	dce9      	bgt.n	8002ba0 <prvUnlockQueue+0x60>
 8002bcc:	e000      	b.n	8002bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002bd8:	f001 fca0 	bl	800451c <vPortExitCritical>
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bec:	f001 fc66 	bl	80044bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e001      	b.n	8002c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c02:	f001 fc8b 	bl	800451c <vPortExitCritical>

	return xReturn;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c18:	f001 fc50 	bl	80044bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d102      	bne.n	8002c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e001      	b.n	8002c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c32:	f001 fc73 	bl	800451c <vPortExitCritical>

	return xReturn;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e014      	b.n	8002c7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c50:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <vQueueAddToRegistry+0x4c>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c5c:	490b      	ldr	r1, [pc, #44]	; (8002c8c <vQueueAddToRegistry+0x4c>)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <vQueueAddToRegistry+0x4c>)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c72:	e006      	b.n	8002c82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3301      	adds	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d9e7      	bls.n	8002c50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	200008b0 	.word	0x200008b0

08002c90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ca0:	f001 fc0c 	bl	80044bc <vPortEnterCritical>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002caa:	b25b      	sxtb	r3, r3
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb0:	d103      	bne.n	8002cba <vQueueWaitForMessageRestricted+0x2a>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc6:	d103      	bne.n	8002cd0 <vQueueWaitForMessageRestricted+0x40>
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd0:	f001 fc24 	bl	800451c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3324      	adds	r3, #36	; 0x24
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fd17 	bl	8003718 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f7ff ff28 	bl	8002b40 <prvUnlockQueue>
	}
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08e      	sub	sp, #56	; 0x38
 8002cfc:	af04      	add	r7, sp, #16
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	623b      	str	r3, [r7, #32]
}
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <xTaskCreateStatic+0x46>
	__asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	61fb      	str	r3, [r7, #28]
}
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d3e:	23bc      	movs	r3, #188	; 0xbc
 8002d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2bbc      	cmp	r3, #188	; 0xbc
 8002d46:	d00a      	beq.n	8002d5e <xTaskCreateStatic+0x66>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61bb      	str	r3, [r7, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01e      	beq.n	8002da2 <xTaskCreateStatic+0xaa>
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01b      	beq.n	8002da2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9303      	str	r3, [sp, #12]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f851 	bl	8002e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d9c:	f000 f8ec 	bl	8002f78 <prvAddNewTaskToReadyList>
 8002da0:	e001      	b.n	8002da6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002da6:	697b      	ldr	r3, [r7, #20]
	}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 fc79 	bl	80046bc <pvPortMalloc>
 8002dca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00e      	beq.n	8002df0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dd2:	20bc      	movs	r0, #188	; 0xbc
 8002dd4:	f001 fc72 	bl	80046bc <pvPortMalloc>
 8002dd8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
 8002de6:	e005      	b.n	8002df4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f001 fd2b 	bl	8004844 <vPortFree>
 8002dee:	e001      	b.n	8002df4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d017      	beq.n	8002e2a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9303      	str	r3, [sp, #12]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f80f 	bl	8002e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e1e:	69f8      	ldr	r0, [r7, #28]
 8002e20:	f000 f8aa 	bl	8002f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	e002      	b.n	8002e30 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e30:	69bb      	ldr	r3, [r7, #24]
	}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	461a      	mov	r2, r3
 8002e54:	21a5      	movs	r1, #165	; 0xa5
 8002e56:	f001 ff3a 	bl	8004cce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e64:	3b01      	subs	r3, #1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f023 0307 	bic.w	r3, r3, #7
 8002e72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	617b      	str	r3, [r7, #20]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	e012      	b.n	8002ec0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	7819      	ldrb	r1, [r3, #0]
 8002ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3334      	adds	r3, #52	; 0x34
 8002eaa:	460a      	mov	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	d9e9      	bls.n	8002e9a <prvInitialiseNewTask+0x5e>
 8002ec6:	e000      	b.n	8002eca <prvInitialiseNewTask+0x8e>
		{
			break;
 8002ec8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	2b37      	cmp	r3, #55	; 0x37
 8002ed6:	d901      	bls.n	8002edc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ed8:	2337      	movs	r3, #55	; 0x37
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	2200      	movs	r2, #0
 8002eec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff f98b 	bl	800220e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	3318      	adds	r3, #24
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f986 	bl	800220e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	3354      	adds	r3, #84	; 0x54
 8002f2c:	2260      	movs	r2, #96	; 0x60
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f001 fecc 	bl	8004cce <memset>
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <prvInitialiseNewTask+0x130>)
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <prvInitialiseNewTask+0x134>)
 8002f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <prvInitialiseNewTask+0x138>)
 8002f46:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	69b8      	ldr	r0, [r7, #24]
 8002f4e:	f001 f9c7 	bl	80042e0 <pxPortInitialiseStack>
 8002f52:	4602      	mov	r2, r0
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f64:	bf00      	nop
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	08005cf8 	.word	0x08005cf8
 8002f70:	08005d18 	.word	0x08005d18
 8002f74:	08005cd8 	.word	0x08005cd8

08002f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f80:	f001 fa9c 	bl	80044bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <prvAddNewTaskToReadyList+0xc4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a2c      	ldr	r2, [pc, #176]	; (800303c <prvAddNewTaskToReadyList+0xc4>)
 8002f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <prvAddNewTaskToReadyList+0xc4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d110      	bne.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fa4:	f000 fce4 	bl	8003970 <prvInitialiseTaskLists>
 8002fa8:	e00d      	b.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <prvAddNewTaskToReadyList+0xcc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d802      	bhi.n	8002fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <prvAddNewTaskToReadyList+0xd0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <prvAddNewTaskToReadyList+0xd0>)
 8002fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <prvAddNewTaskToReadyList+0xd0>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <prvAddNewTaskToReadyList+0xd4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d903      	bls.n	8002fec <prvAddNewTaskToReadyList+0x74>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <prvAddNewTaskToReadyList+0xd4>)
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4a15      	ldr	r2, [pc, #84]	; (8003050 <prvAddNewTaskToReadyList+0xd8>)
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7ff f90f 	bl	8002226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003008:	f001 fa88 	bl	800451c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <prvAddNewTaskToReadyList+0xcc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <prvAddNewTaskToReadyList+0xc8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	429a      	cmp	r2, r3
 8003020:	d207      	bcs.n	8003032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <prvAddNewTaskToReadyList+0xdc>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000dc4 	.word	0x20000dc4
 8003040:	200008f0 	.word	0x200008f0
 8003044:	20000dd0 	.word	0x20000dd0
 8003048:	20000de0 	.word	0x20000de0
 800304c:	20000dcc 	.word	0x20000dcc
 8003050:	200008f4 	.word	0x200008f4
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d017      	beq.n	800309a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <vTaskDelay+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <vTaskDelay+0x30>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60bb      	str	r3, [r7, #8]
}
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003088:	f000 f946 	bl	8003318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800308c:	2100      	movs	r1, #0
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fdc0 	bl	8003c14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003094:	f000 f94e 	bl	8003334 <xTaskResumeAll>
 8003098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <vTaskDelay+0x64>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000dec 	.word	0x20000dec
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80030c8:	f001 f9f8 	bl	80044bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <uxTaskPriorityGet+0x18>
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <uxTaskPriorityGet+0x30>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e000      	b.n	80030da <uxTaskPriorityGet+0x1a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80030e2:	f001 fa1b 	bl	800451c <vPortExitCritical>

		return uxReturn;
 80030e6:	68bb      	ldr	r3, [r7, #8]
	}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200008f0 	.word	0x200008f0

080030f4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b37      	cmp	r3, #55	; 0x37
 8003106:	d90a      	bls.n	800311e <vTaskPrioritySet+0x2a>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60fb      	str	r3, [r7, #12]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b37      	cmp	r3, #55	; 0x37
 8003122:	d901      	bls.n	8003128 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003124:	2337      	movs	r3, #55	; 0x37
 8003126:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003128:	f001 f9c8 	bl	80044bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <vTaskPrioritySet+0x44>
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <vTaskPrioritySet+0x134>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	e000      	b.n	800313a <vTaskPrioritySet+0x46>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d068      	beq.n	800321c <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	429a      	cmp	r2, r3
 8003150:	d90d      	bls.n	800316e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8003152:	4b35      	ldr	r3, [pc, #212]	; (8003228 <vTaskPrioritySet+0x134>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	429a      	cmp	r2, r3
 800315a:	d00f      	beq.n	800317c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800315c:	4b32      	ldr	r3, [pc, #200]	; (8003228 <vTaskPrioritySet+0x134>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d309      	bcc.n	800317c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e006      	b.n	800317c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <vTaskPrioritySet+0x134>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d101      	bne.n	800317c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003178:	2301      	movs	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	429a      	cmp	r2, r3
 800318c:	d102      	bne.n	8003194 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db04      	blt.n	80031ac <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6959      	ldr	r1, [r3, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <vTaskPrioritySet+0x138>)
 80031bc:	4413      	add	r3, r2
 80031be:	4299      	cmp	r1, r3
 80031c0:	d101      	bne.n	80031c6 <vTaskPrioritySet+0xd2>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <vTaskPrioritySet+0xd4>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01c      	beq.n	8003206 <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f883 	bl	80022dc <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <vTaskPrioritySet+0x13c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d903      	bls.n	80031ea <vTaskPrioritySet+0xf6>
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <vTaskPrioritySet+0x13c>)
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <vTaskPrioritySet+0x138>)
 80031f8:	441a      	add	r2, r3
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7ff f810 	bl	8002226 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <vTaskPrioritySet+0x140>)
 800320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800321c:	f001 f97e 	bl	800451c <vPortExitCritical>
	}
 8003220:	bf00      	nop
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200008f0 	.word	0x200008f0
 800322c:	200008f4 	.word	0x200008f4
 8003230:	20000dcc 	.word	0x20000dcc
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	; 0x28
 800323c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003246:	463a      	mov	r2, r7
 8003248:	1d39      	adds	r1, r7, #4
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe ff8c 	bl	800216c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	9202      	str	r2, [sp, #8]
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	460a      	mov	r2, r1
 8003266:	4924      	ldr	r1, [pc, #144]	; (80032f8 <vTaskStartScheduler+0xc0>)
 8003268:	4824      	ldr	r0, [pc, #144]	; (80032fc <vTaskStartScheduler+0xc4>)
 800326a:	f7ff fd45 	bl	8002cf8 <xTaskCreateStatic>
 800326e:	4603      	mov	r3, r0
 8003270:	4a23      	ldr	r2, [pc, #140]	; (8003300 <vTaskStartScheduler+0xc8>)
 8003272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003274:	4b22      	ldr	r3, [pc, #136]	; (8003300 <vTaskStartScheduler+0xc8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800327c:	2301      	movs	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e001      	b.n	8003286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800328c:	f000 fd16 	bl	8003cbc <xTimerCreateTimerTask>
 8003290:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11b      	bne.n	80032d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	613b      	str	r3, [r7, #16]
}
 80032aa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <vTaskStartScheduler+0xcc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3354      	adds	r3, #84	; 0x54
 80032b2:	4a15      	ldr	r2, [pc, #84]	; (8003308 <vTaskStartScheduler+0xd0>)
 80032b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <vTaskStartScheduler+0xd4>)
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <vTaskStartScheduler+0xd8>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <vTaskStartScheduler+0xdc>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80032ca:	f001 f885 	bl	80043d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80032ce:	e00e      	b.n	80032ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d6:	d10a      	bne.n	80032ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60fb      	str	r3, [r7, #12]
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <vTaskStartScheduler+0xb4>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	08005c60 	.word	0x08005c60
 80032fc:	08003941 	.word	0x08003941
 8003300:	20000de8 	.word	0x20000de8
 8003304:	200008f0 	.word	0x200008f0
 8003308:	20000010 	.word	0x20000010
 800330c:	20000de4 	.word	0x20000de4
 8003310:	20000dd0 	.word	0x20000dd0
 8003314:	20000dc8 	.word	0x20000dc8

08003318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <vTaskSuspendAll+0x18>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a03      	ldr	r2, [pc, #12]	; (8003330 <vTaskSuspendAll+0x18>)
 8003324:	6013      	str	r3, [r2, #0]
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000dec 	.word	0x20000dec

08003334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003342:	4b42      	ldr	r3, [pc, #264]	; (800344c <xTaskResumeAll+0x118>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <xTaskResumeAll+0x2c>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	603b      	str	r3, [r7, #0]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003360:	f001 f8ac 	bl	80044bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <xTaskResumeAll+0x118>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3b01      	subs	r3, #1
 800336a:	4a38      	ldr	r2, [pc, #224]	; (800344c <xTaskResumeAll+0x118>)
 800336c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <xTaskResumeAll+0x118>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d162      	bne.n	800343c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <xTaskResumeAll+0x11c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d05e      	beq.n	800343c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337e:	e02f      	b.n	80033e0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <xTaskResumeAll+0x120>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3318      	adds	r3, #24
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ffa5 	bl	80022dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ffa0 	bl	80022dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <xTaskResumeAll+0x124>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d903      	bls.n	80033b0 <xTaskResumeAll+0x7c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <xTaskResumeAll+0x124>)
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4a27      	ldr	r2, [pc, #156]	; (800345c <xTaskResumeAll+0x128>)
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	4610      	mov	r0, r2
 80033c8:	f7fe ff2d 	bl	8002226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4b23      	ldr	r3, [pc, #140]	; (8003460 <xTaskResumeAll+0x12c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <xTaskResumeAll+0x130>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <xTaskResumeAll+0x120>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1cb      	bne.n	8003380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033ee:	f000 fb61 	bl	8003ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <xTaskResumeAll+0x134>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d010      	beq.n	8003420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033fe:	f000 f845 	bl	800348c <xTaskIncrementTick>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <xTaskResumeAll+0x130>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3b01      	subs	r3, #1
 8003412:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f1      	bne.n	80033fe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <xTaskResumeAll+0x134>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <xTaskResumeAll+0x130>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <xTaskResumeAll+0x138>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800343c:	f001 f86e 	bl	800451c <vPortExitCritical>

	return xAlreadyYielded;
 8003440:	68bb      	ldr	r3, [r7, #8]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000dec 	.word	0x20000dec
 8003450:	20000dc4 	.word	0x20000dc4
 8003454:	20000d84 	.word	0x20000d84
 8003458:	20000dcc 	.word	0x20000dcc
 800345c:	200008f4 	.word	0x200008f4
 8003460:	200008f0 	.word	0x200008f0
 8003464:	20000dd8 	.word	0x20000dd8
 8003468:	20000dd4 	.word	0x20000dd4
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <xTaskGetTickCount+0x18>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800347c:	687b      	ldr	r3, [r7, #4]
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	20000dc8 	.word	0x20000dc8

0800348c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003496:	4b51      	ldr	r3, [pc, #324]	; (80035dc <xTaskIncrementTick+0x150>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 808e 	bne.w	80035bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <xTaskIncrementTick+0x154>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <xTaskIncrementTick+0x154>)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d120      	bne.n	80034f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <xTaskIncrementTick+0x158>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	603b      	str	r3, [r7, #0]
}
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xTaskIncrementTick+0x46>
 80034d4:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <xTaskIncrementTick+0x158>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <xTaskIncrementTick+0x15c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <xTaskIncrementTick+0x158>)
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4a41      	ldr	r2, [pc, #260]	; (80035e8 <xTaskIncrementTick+0x15c>)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b40      	ldr	r3, [pc, #256]	; (80035ec <xTaskIncrementTick+0x160>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <xTaskIncrementTick+0x160>)
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	f000 fadf 	bl	8003ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034f6:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <xTaskIncrementTick+0x164>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d34e      	bcc.n	800359e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003500:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <xTaskIncrementTick+0x158>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <xTaskIncrementTick+0x82>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <xTaskIncrementTick+0x84>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <xTaskIncrementTick+0x164>)
 8003516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351a:	601a      	str	r2, [r3, #0]
					break;
 800351c:	e03f      	b.n	800359e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <xTaskIncrementTick+0x158>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d203      	bcs.n	800353e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003536:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <xTaskIncrementTick+0x164>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6013      	str	r3, [r2, #0]
						break;
 800353c:	e02f      	b.n	800359e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe feca 	bl	80022dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3318      	adds	r3, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f7fe fec1 	bl	80022dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <xTaskIncrementTick+0x168>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d903      	bls.n	800356e <xTaskIncrementTick+0xe2>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <xTaskIncrementTick+0x168>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <xTaskIncrementTick+0x16c>)
 800357c:	441a      	add	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f7fe fe4e 	bl	8002226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <xTaskIncrementTick+0x170>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b3      	bcc.n	8003500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800359c:	e7b0      	b.n	8003500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <xTaskIncrementTick+0x170>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4914      	ldr	r1, [pc, #80]	; (80035f8 <xTaskIncrementTick+0x16c>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d907      	bls.n	80035c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e004      	b.n	80035c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <xTaskIncrementTick+0x174>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <xTaskIncrementTick+0x174>)
 80035c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <xTaskIncrementTick+0x178>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80035d2:	697b      	ldr	r3, [r7, #20]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000dec 	.word	0x20000dec
 80035e0:	20000dc8 	.word	0x20000dc8
 80035e4:	20000d7c 	.word	0x20000d7c
 80035e8:	20000d80 	.word	0x20000d80
 80035ec:	20000ddc 	.word	0x20000ddc
 80035f0:	20000de4 	.word	0x20000de4
 80035f4:	20000dcc 	.word	0x20000dcc
 80035f8:	200008f4 	.word	0x200008f4
 80035fc:	200008f0 	.word	0x200008f0
 8003600:	20000dd4 	.word	0x20000dd4
 8003604:	20000dd8 	.word	0x20000dd8

08003608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800360e:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <vTaskSwitchContext+0xb0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <vTaskSwitchContext+0xb4>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800361c:	e046      	b.n	80036ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <vTaskSwitchContext+0xb4>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003624:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <vTaskSwitchContext+0xb8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e010      	b.n	800364e <vTaskSwitchContext+0x46>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <vTaskSwitchContext+0x40>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	607b      	str	r3, [r7, #4]
}
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <vTaskSwitchContext+0x3e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3b01      	subs	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	491d      	ldr	r1, [pc, #116]	; (80036c4 <vTaskSwitchContext+0xbc>)
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0e4      	beq.n	800362c <vTaskSwitchContext+0x24>
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <vTaskSwitchContext+0xbc>)
 800366e:	4413      	add	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3308      	adds	r3, #8
 8003684:	429a      	cmp	r2, r3
 8003686:	d104      	bne.n	8003692 <vTaskSwitchContext+0x8a>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <vTaskSwitchContext+0xc0>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <vTaskSwitchContext+0xb8>)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <vTaskSwitchContext+0xc0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3354      	adds	r3, #84	; 0x54
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <vTaskSwitchContext+0xc4>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000dec 	.word	0x20000dec
 80036bc:	20000dd8 	.word	0x20000dd8
 80036c0:	20000dcc 	.word	0x20000dcc
 80036c4:	200008f4 	.word	0x200008f4
 80036c8:	200008f0 	.word	0x200008f0
 80036cc:	20000010 	.word	0x20000010

080036d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	60fb      	str	r3, [r7, #12]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <vTaskPlaceOnEventList+0x44>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3318      	adds	r3, #24
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe fdb4 	bl	800226c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003704:	2101      	movs	r1, #1
 8003706:	6838      	ldr	r0, [r7, #0]
 8003708:	f000 fa84 	bl	8003c14 <prvAddCurrentTaskToDelayedList>
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200008f0 	.word	0x200008f0

08003718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	617b      	str	r3, [r7, #20]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <vTaskPlaceOnEventListRestricted+0x54>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3318      	adds	r3, #24
 8003746:	4619      	mov	r1, r3
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7fe fd6c 	bl	8002226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003758:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	68b8      	ldr	r0, [r7, #8]
 800375e:	f000 fa59 	bl	8003c14 <prvAddCurrentTaskToDelayedList>
	}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200008f0 	.word	0x200008f0

08003770 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	60fb      	str	r3, [r7, #12]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	3318      	adds	r3, #24
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fd9b 	bl	80022dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <xTaskRemoveFromEventList+0xb0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11d      	bne.n	80037ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fd92 	bl	80022dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <xTaskRemoveFromEventList+0xb4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d903      	bls.n	80037cc <xTaskRemoveFromEventList+0x5c>
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a16      	ldr	r2, [pc, #88]	; (8003824 <xTaskRemoveFromEventList+0xb4>)
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <xTaskRemoveFromEventList+0xb8>)
 80037da:	441a      	add	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	3304      	adds	r3, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f7fe fd1f 	bl	8002226 <vListInsertEnd>
 80037e8:	e005      	b.n	80037f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3318      	adds	r3, #24
 80037ee:	4619      	mov	r1, r3
 80037f0:	480e      	ldr	r0, [pc, #56]	; (800382c <xTaskRemoveFromEventList+0xbc>)
 80037f2:	f7fe fd18 	bl	8002226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <xTaskRemoveFromEventList+0xc0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d905      	bls.n	8003810 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <xTaskRemoveFromEventList+0xc4>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e001      	b.n	8003814 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003814:	697b      	ldr	r3, [r7, #20]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000dec 	.word	0x20000dec
 8003824:	20000dcc 	.word	0x20000dcc
 8003828:	200008f4 	.word	0x200008f4
 800382c:	20000d84 	.word	0x20000d84
 8003830:	200008f0 	.word	0x200008f0
 8003834:	20000dd8 	.word	0x20000dd8

08003838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <vTaskInternalSetTimeOutState+0x24>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <vTaskInternalSetTimeOutState+0x28>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000ddc 	.word	0x20000ddc
 8003860:	20000dc8 	.word	0x20000dc8

08003864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	613b      	str	r3, [r7, #16]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60fb      	str	r3, [r7, #12]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80038a6:	f000 fe09 	bl	80044bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <xTaskCheckForTimeOut+0xbc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	d102      	bne.n	80038ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e023      	b.n	8003912 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <xTaskCheckForTimeOut+0xc0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d007      	beq.n	80038e6 <xTaskCheckForTimeOut+0x82>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e015      	b.n	8003912 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d20b      	bcs.n	8003908 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad2      	subs	r2, r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff9b 	bl	8003838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e004      	b.n	8003912 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800390e:	2301      	movs	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003912:	f000 fe03 	bl	800451c <vPortExitCritical>

	return xReturn;
 8003916:	69fb      	ldr	r3, [r7, #28]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000dc8 	.word	0x20000dc8
 8003924:	20000ddc 	.word	0x20000ddc

08003928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <vTaskMissedYield+0x14>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000dd8 	.word	0x20000dd8

08003940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003948:	f000 f852 	bl	80039f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <prvIdleTask+0x28>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d9f9      	bls.n	8003948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <prvIdleTask+0x2c>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003964:	e7f0      	b.n	8003948 <prvIdleTask+0x8>
 8003966:	bf00      	nop
 8003968:	200008f4 	.word	0x200008f4
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	e00c      	b.n	8003996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <prvInitialiseTaskLists+0x60>)
 8003988:	4413      	add	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fc20 	bl	80021d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3301      	adds	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b37      	cmp	r3, #55	; 0x37
 800399a:	d9ef      	bls.n	800397c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <prvInitialiseTaskLists+0x64>)
 800399e:	f7fe fc17 	bl	80021d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039a2:	480d      	ldr	r0, [pc, #52]	; (80039d8 <prvInitialiseTaskLists+0x68>)
 80039a4:	f7fe fc14 	bl	80021d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <prvInitialiseTaskLists+0x6c>)
 80039aa:	f7fe fc11 	bl	80021d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039ae:	480c      	ldr	r0, [pc, #48]	; (80039e0 <prvInitialiseTaskLists+0x70>)
 80039b0:	f7fe fc0e 	bl	80021d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039b4:	480b      	ldr	r0, [pc, #44]	; (80039e4 <prvInitialiseTaskLists+0x74>)
 80039b6:	f7fe fc0b 	bl	80021d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <prvInitialiseTaskLists+0x78>)
 80039bc:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <prvInitialiseTaskLists+0x64>)
 80039be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <prvInitialiseTaskLists+0x7c>)
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <prvInitialiseTaskLists+0x68>)
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200008f4 	.word	0x200008f4
 80039d4:	20000d54 	.word	0x20000d54
 80039d8:	20000d68 	.word	0x20000d68
 80039dc:	20000d84 	.word	0x20000d84
 80039e0:	20000d98 	.word	0x20000d98
 80039e4:	20000db0 	.word	0x20000db0
 80039e8:	20000d7c 	.word	0x20000d7c
 80039ec:	20000d80 	.word	0x20000d80

080039f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039f6:	e019      	b.n	8003a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039f8:	f000 fd60 	bl	80044bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <prvCheckTasksWaitingTermination+0x50>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fc67 	bl	80022dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <prvCheckTasksWaitingTermination+0x54>)
 8003a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <prvCheckTasksWaitingTermination+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <prvCheckTasksWaitingTermination+0x58>)
 8003a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a22:	f000 fd7b 	bl	800451c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f810 	bl	8003a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <prvCheckTasksWaitingTermination+0x58>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e1      	bne.n	80039f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000d98 	.word	0x20000d98
 8003a44:	20000dc4 	.word	0x20000dc4
 8003a48:	20000dac 	.word	0x20000dac

08003a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3354      	adds	r3, #84	; 0x54
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fa71 	bl	8004f40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d108      	bne.n	8003a7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fee9 	bl	8004844 <vPortFree>
				vPortFree( pxTCB );
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fee6 	bl	8004844 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a78:	e018      	b.n	8003aac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d103      	bne.n	8003a8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fedd 	bl	8004844 <vPortFree>
	}
 8003a8a:	e00f      	b.n	8003aac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d00a      	beq.n	8003aac <prvDeleteTCB+0x60>
	__asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	60fb      	str	r3, [r7, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	e7fe      	b.n	8003aaa <prvDeleteTCB+0x5e>
	}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <prvResetNextTaskUnblockTime+0x40>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <prvResetNextTaskUnblockTime+0x14>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <prvResetNextTaskUnblockTime+0x16>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <prvResetNextTaskUnblockTime+0x44>)
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ad4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ad6:	e008      	b.n	8003aea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <prvResetNextTaskUnblockTime+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <prvResetNextTaskUnblockTime+0x44>)
 8003ae8:	6013      	str	r3, [r2, #0]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	20000d7c 	.word	0x20000d7c
 8003af8:	20000de4 	.word	0x20000de4

08003afc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <xTaskGetSchedulerState+0x34>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	e008      	b.n	8003b22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <xTaskGetSchedulerState+0x38>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	e001      	b.n	8003b22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b22:	687b      	ldr	r3, [r7, #4]
	}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000dd0 	.word	0x20000dd0
 8003b34:	20000dec 	.word	0x20000dec

08003b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d056      	beq.n	8003bfc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <xTaskPriorityDisinherit+0xd0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d00a      	beq.n	8003b6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	60fb      	str	r3, [r7, #12]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60bb      	str	r3, [r7, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d02c      	beq.n	8003bfc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d128      	bne.n	8003bfc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fb94 	bl	80022dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <xTaskPriorityDisinherit+0xd4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <xTaskPriorityDisinherit+0xa4>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <xTaskPriorityDisinherit+0xd4>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <xTaskPriorityDisinherit+0xd8>)
 8003bea:	441a      	add	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe fb17 	bl	8002226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bfc:	697b      	ldr	r3, [r7, #20]
	}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200008f0 	.word	0x200008f0
 8003c0c:	20000dcc 	.word	0x20000dcc
 8003c10:	200008f4 	.word	0x200008f4

08003c14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c1e:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c24:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fb56 	bl	80022dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c36:	d10a      	bne.n	8003c4e <prvAddCurrentTaskToDelayedList+0x3a>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4819      	ldr	r0, [pc, #100]	; (8003cac <prvAddCurrentTaskToDelayedList+0x98>)
 8003c48:	f7fe faed 	bl	8002226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c4c:	e026      	b.n	8003c9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d209      	bcs.n	8003c7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7fe fafa 	bl	800226c <vListInsert>
}
 8003c78:	e010      	b.n	8003c9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fe faf0 	bl	800226c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d202      	bcs.n	8003c9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c96:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000dc8 	.word	0x20000dc8
 8003ca8:	200008f0 	.word	0x200008f0
 8003cac:	20000db0 	.word	0x20000db0
 8003cb0:	20000d80 	.word	0x20000d80
 8003cb4:	20000d7c 	.word	0x20000d7c
 8003cb8:	20000de4 	.word	0x20000de4

08003cbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003cc6:	f000 facb 	bl	8004260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003cca:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <xTimerCreateTimerTask+0x80>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d021      	beq.n	8003d16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cda:	1d3a      	adds	r2, r7, #4
 8003cdc:	f107 0108 	add.w	r1, r7, #8
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fa59 	bl	800219c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	9202      	str	r2, [sp, #8]
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	4910      	ldr	r1, [pc, #64]	; (8003d40 <xTimerCreateTimerTask+0x84>)
 8003cfe:	4811      	ldr	r0, [pc, #68]	; (8003d44 <xTimerCreateTimerTask+0x88>)
 8003d00:	f7fe fffa 	bl	8002cf8 <xTaskCreateStatic>
 8003d04:	4603      	mov	r3, r0
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <xTimerCreateTimerTask+0x8c>)
 8003d08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <xTimerCreateTimerTask+0x8c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	613b      	str	r3, [r7, #16]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d32:	697b      	ldr	r3, [r7, #20]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000e20 	.word	0x20000e20
 8003d40:	08005c68 	.word	0x08005c68
 8003d44:	08003e69 	.word	0x08003e69
 8003d48:	20000e24 	.word	0x20000e24

08003d4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	623b      	str	r3, [r7, #32]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02a      	beq.n	8003dd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	dc18      	bgt.n	8003dc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d94:	f7ff feb2 	bl	8003afc <xTaskGetSchedulerState>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	f107 0110 	add.w	r1, r7, #16
 8003da6:	2300      	movs	r3, #0
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	f7fe fbc3 	bl	8002534 <xQueueGenericSend>
 8003dae:	6278      	str	r0, [r7, #36]	; 0x24
 8003db0:	e012      	b.n	8003dd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	f107 0110 	add.w	r1, r7, #16
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f7fe fbb9 	bl	8002534 <xQueueGenericSend>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8003dc4:	e008      	b.n	8003dd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <xTimerGenericCommand+0x98>)
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	f107 0110 	add.w	r1, r7, #16
 8003dce:	2300      	movs	r3, #0
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	f7fe fcad 	bl	8002730 <xQueueGenericSendFromISR>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000e20 	.word	0x20000e20

08003de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df2:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <prvProcessExpiredTimer+0x7c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fa6b 	bl	80022dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d122      	bne.n	8003e54 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	18d1      	adds	r1, r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f000 f8c8 	bl	8003fb0 <prvInsertTimerInActiveList>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6978      	ldr	r0, [r7, #20]
 8003e32:	f7ff ff8b 	bl	8003d4c <xTimerGenericCommand>
 8003e36:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	60fb      	str	r3, [r7, #12]
}
 8003e50:	bf00      	nop
 8003e52:	e7fe      	b.n	8003e52 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	4798      	blx	r3
}
 8003e5c:	bf00      	nop
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000e18 	.word	0x20000e18

08003e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f857 	bl	8003f28 <prvGetNextExpireTime>
 8003e7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f803 	bl	8003e8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e86:	f000 f8d5 	bl	8004034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e8a:	e7f1      	b.n	8003e70 <prvTimerTask+0x8>

08003e8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e96:	f7ff fa3f 	bl	8003318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f866 	bl	8003f70 <prvSampleTimeNow>
 8003ea4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d130      	bne.n	8003f0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <prvProcessTimerOrBlockTask+0x3c>
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d806      	bhi.n	8003ec8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003eba:	f7ff fa3b 	bl	8003334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff91 	bl	8003de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ec6:	e024      	b.n	8003f12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <prvProcessTimerOrBlockTask+0x90>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <prvProcessTimerOrBlockTask+0x94>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	4619      	mov	r1, r3
 8003eee:	f7fe fecf 	bl	8002c90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ef2:	f7ff fa1f 	bl	8003334 <xTaskResumeAll>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <prvProcessTimerOrBlockTask+0x98>)
 8003efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	f3bf 8f6f 	isb	sy
}
 8003f0c:	e001      	b.n	8003f12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f0e:	f7ff fa11 	bl	8003334 <xTaskResumeAll>
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000e1c 	.word	0x20000e1c
 8003f20:	20000e20 	.word	0x20000e20
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <prvGetNextExpireTime+0x44>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <prvGetNextExpireTime+0x44>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e001      	b.n	8003f5e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000e18 	.word	0x20000e18

08003f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f78:	f7ff fa7a 	bl	8003470 <xTaskGetTickCount>
 8003f7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <prvSampleTimeNow+0x3c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d205      	bcs.n	8003f94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f88:	f000 f908 	bl	800419c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e002      	b.n	8003f9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f9a:	4a04      	ldr	r2, [pc, #16]	; (8003fac <prvSampleTimeNow+0x3c>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000e28 	.word	0x20000e28

08003fb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d812      	bhi.n	8003ffc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e01b      	b.n	8004022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <prvInsertTimerInActiveList+0x7c>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7fe f939 	bl	800226c <vListInsert>
 8003ffa:	e012      	b.n	8004022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d206      	bcs.n	8004012 <prvInsertTimerInActiveList+0x62>
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e007      	b.n	8004022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <prvInsertTimerInActiveList+0x80>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7fe f925 	bl	800226c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004022:	697b      	ldr	r3, [r7, #20]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000e1c 	.word	0x20000e1c
 8004030:	20000e18 	.word	0x20000e18

08004034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08e      	sub	sp, #56	; 0x38
 8004038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800403a:	e09d      	b.n	8004178 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da18      	bge.n	8004074 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	3304      	adds	r3, #4
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	61fb      	str	r3, [r7, #28]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406a:	6850      	ldr	r0, [r2, #4]
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	4611      	mov	r1, r2
 8004072:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db7d      	blt.n	8004176 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	3304      	adds	r3, #4
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe f926 	bl	80022dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004090:	463b      	mov	r3, r7
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ff6c 	bl	8003f70 <prvSampleTimeNow>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b09      	cmp	r3, #9
 800409e:	d86b      	bhi.n	8004178 <prvProcessReceivedCommands+0x144>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <prvProcessReceivedCommands+0x74>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040d1 	.word	0x080040d1
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d1 	.word	0x080040d1
 80040b4:	08004179 	.word	0x08004179
 80040b8:	0800412d 	.word	0x0800412d
 80040bc:	08004165 	.word	0x08004165
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d1 	.word	0x080040d1
 80040c8:	08004179 	.word	0x08004179
 80040cc:	0800412d 	.word	0x0800412d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	18d1      	adds	r1, r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040de:	f7ff ff67 	bl	8003fb0 <prvInsertTimerInActiveList>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d047      	beq.n	8004178 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d13f      	bne.n	8004178 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	441a      	add	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	2100      	movs	r1, #0
 8004108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410a:	f7ff fe1f 	bl	8003d4c <xTimerGenericCommand>
 800410e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d130      	bne.n	8004178 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	61bb      	str	r3, [r7, #24]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	617b      	str	r3, [r7, #20]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	699a      	ldr	r2, [r3, #24]
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	18d1      	adds	r1, r2, r3
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415e:	f7ff ff27 	bl	8003fb0 <prvInsertTimerInActiveList>
					break;
 8004162:	e009      	b.n	8004178 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004170:	f000 fb68 	bl	8004844 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004174:	e000      	b.n	8004178 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004176:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <prvProcessReceivedCommands+0x164>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	1d39      	adds	r1, r7, #4
 800417e:	2200      	movs	r2, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fb6d 	bl	8002860 <xQueueReceive>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	f47f af57 	bne.w	800403c <prvProcessReceivedCommands+0x8>
	}
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	3730      	adds	r7, #48	; 0x30
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000e20 	.word	0x20000e20

0800419c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041a2:	e045      	b.n	8004230 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <prvSwitchTimerLists+0xbc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041ae:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <prvSwitchTimerLists+0xbc>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f88d 	bl	80022dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d12e      	bne.n	8004230 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d90e      	bls.n	8004202 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <prvSwitchTimerLists+0xbc>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f7fe f836 	bl	800226c <vListInsert>
 8004200:	e016      	b.n	8004230 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004202:	2300      	movs	r3, #0
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	2100      	movs	r1, #0
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fd9d 	bl	8003d4c <xTimerGenericCommand>
 8004212:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <prvSwitchTimerLists+0x94>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	603b      	str	r3, [r7, #0]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <prvSwitchTimerLists+0xbc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1b4      	bne.n	80041a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <prvSwitchTimerLists+0xbc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <prvSwitchTimerLists+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <prvSwitchTimerLists+0xbc>)
 8004246:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <prvSwitchTimerLists+0xc0>)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000e18 	.word	0x20000e18
 800425c:	20000e1c 	.word	0x20000e1c

08004260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004266:	f000 f929 	bl	80044bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d120      	bne.n	80042b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004272:	4814      	ldr	r0, [pc, #80]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 8004274:	f7fd ffac 	bl	80021d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004278:	4813      	ldr	r0, [pc, #76]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 800427a:	f7fd ffa9 	bl	80021d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <prvCheckForValidListAndQueue+0x6c>)
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 8004282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <prvCheckForValidListAndQueue+0x70>)
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800428a:	2300      	movs	r3, #0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <prvCheckForValidListAndQueue+0x74>)
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <prvCheckForValidListAndQueue+0x78>)
 8004292:	2110      	movs	r1, #16
 8004294:	200a      	movs	r0, #10
 8004296:	f7fe f8b3 	bl	8002400 <xQueueGenericCreateStatic>
 800429a:	4603      	mov	r3, r0
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 800429e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	490b      	ldr	r1, [pc, #44]	; (80042dc <prvCheckForValidListAndQueue+0x7c>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fcc6 	bl	8002c40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042b4:	f000 f932 	bl	800451c <vPortExitCritical>
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000e20 	.word	0x20000e20
 80042c4:	20000df0 	.word	0x20000df0
 80042c8:	20000e04 	.word	0x20000e04
 80042cc:	20000e18 	.word	0x20000e18
 80042d0:	20000e1c 	.word	0x20000e1c
 80042d4:	20000ecc 	.word	0x20000ecc
 80042d8:	20000e2c 	.word	0x20000e2c
 80042dc:	08005c70 	.word	0x08005c70

080042e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3b04      	subs	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b04      	subs	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <pxPortInitialiseStack+0x54>)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b14      	subs	r3, #20
 800431a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b20      	subs	r3, #32
 8004326:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	08004339 	.word	0x08004339

08004338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <prvTaskExitError+0x54>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434a:	d00a      	beq.n	8004362 <prvTaskExitError+0x2a>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	60fb      	str	r3, [r7, #12]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <prvTaskExitError+0x28>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60bb      	str	r3, [r7, #8]
}
 8004374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004376:	bf00      	nop
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0fc      	beq.n	8004378 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000000c 	.word	0x2000000c

08004390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <pxCurrentTCBConst2>)
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	6808      	ldr	r0, [r1, #0]
 8004396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800439a:	f380 8809 	msr	PSP, r0
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8811 	msr	BASEPRI, r0
 80043aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80043ae:	4770      	bx	lr

080043b0 <pxCurrentTCBConst2>:
 80043b0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043b8:	4806      	ldr	r0, [pc, #24]	; (80043d4 <prvPortStartFirstTask+0x1c>)
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	f380 8808 	msr	MSP, r0
 80043c2:	b662      	cpsie	i
 80043c4:	b661      	cpsie	f
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	df00      	svc	0
 80043d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043d2:	bf00      	nop
 80043d4:	e000ed08 	.word	0xe000ed08

080043d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043de:	4b32      	ldr	r3, [pc, #200]	; (80044a8 <xPortStartScheduler+0xd0>)
 80043e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	22ff      	movs	r2, #255	; 0xff
 80043ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <xPortStartScheduler+0xd4>)
 8004404:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004406:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004408:	2207      	movs	r2, #7
 800440a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800440c:	e009      	b.n	8004422 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800440e:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3b01      	subs	r3, #1
 8004414:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004416:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d0ef      	beq.n	800440e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1c3 0307 	rsb	r3, r3, #7
 8004436:	2b04      	cmp	r3, #4
 8004438:	d00a      	beq.n	8004450 <xPortStartScheduler+0x78>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60bb      	str	r3, [r7, #8]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004458:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <xPortStartScheduler+0xd8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <xPortStartScheduler+0xd8>)
 8004464:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800446e:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <xPortStartScheduler+0xdc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <xPortStartScheduler+0xdc>)
 8004474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <xPortStartScheduler+0xdc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <xPortStartScheduler+0xdc>)
 8004480:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004484:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004486:	f000 f8b9 	bl	80045fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <xPortStartScheduler+0xe0>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004490:	f7ff ff92 	bl	80043b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004494:	f7ff f8b8 	bl	8003608 <vTaskSwitchContext>
	prvTaskExitError();
 8004498:	f7ff ff4e 	bl	8004338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	e000e400 	.word	0xe000e400
 80044ac:	20000f1c 	.word	0x20000f1c
 80044b0:	20000f20 	.word	0x20000f20
 80044b4:	e000ed20 	.word	0xe000ed20
 80044b8:	2000000c 	.word	0x2000000c

080044bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
}
 80044d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <vPortEnterCritical+0x58>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <vPortEnterCritical+0x58>)
 80044de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <vPortEnterCritical+0x58>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10f      	bne.n	8004508 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <vPortEnterCritical+0x5c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <vPortEnterCritical+0x4c>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	603b      	str	r3, [r7, #0]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <vPortEnterCritical+0x4a>
	}
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <vPortExitCritical+0x4c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <vPortExitCritical+0x24>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	607b      	str	r3, [r7, #4]
}
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <vPortExitCritical+0x4c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3b01      	subs	r3, #1
 8004546:	4a08      	ldr	r2, [pc, #32]	; (8004568 <vPortExitCritical+0x4c>)
 8004548:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <vPortExitCritical+0x4c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <vPortExitCritical+0x42>
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f383 8811 	msr	BASEPRI, r3
}
 800455c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	2000000c 	.word	0x2000000c
 800456c:	00000000 	.word	0x00000000

08004570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004570:	f3ef 8009 	mrs	r0, PSP
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <pxCurrentTCBConst>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004580:	6010      	str	r0, [r2, #0]
 8004582:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004586:	f04f 0050 	mov.w	r0, #80	; 0x50
 800458a:	f380 8811 	msr	BASEPRI, r0
 800458e:	f7ff f83b 	bl	8003608 <vTaskSwitchContext>
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8811 	msr	BASEPRI, r0
 800459a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6808      	ldr	r0, [r1, #0]
 80045a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045a6:	f380 8809 	msr	PSP, r0
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	4770      	bx	lr

080045b0 <pxCurrentTCBConst>:
 80045b0:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d2:	f7fe ff5b 	bl	800348c <xTaskIncrementTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <SysTick_Handler+0x40>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f383 8811 	msr	BASEPRI, r3
}
 80045ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <vPortSetupTimerInterrupt+0x30>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <vPortSetupTimerInterrupt+0x38>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a09      	ldr	r2, [pc, #36]	; (8004638 <vPortSetupTimerInterrupt+0x3c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	4a08      	ldr	r2, [pc, #32]	; (800463c <vPortSetupTimerInterrupt+0x40>)
 800461a:	3b01      	subs	r3, #1
 800461c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800461e:	4b03      	ldr	r3, [pc, #12]	; (800462c <vPortSetupTimerInterrupt+0x30>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr
 800462c:	e000e010 	.word	0xe000e010
 8004630:	e000e018 	.word	0xe000e018
 8004634:	20000000 	.word	0x20000000
 8004638:	10624dd3 	.word	0x10624dd3
 800463c:	e000e014 	.word	0xe000e014

08004640 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004646:	f3ef 8305 	mrs	r3, IPSR
 800464a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b0f      	cmp	r3, #15
 8004650:	d914      	bls.n	800467c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004652:	4a16      	ldr	r2, [pc, #88]	; (80046ac <vPortValidateInterruptPriority+0x6c>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800465c:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <vPortValidateInterruptPriority+0x70>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	7afa      	ldrb	r2, [r7, #11]
 8004662:	429a      	cmp	r2, r3
 8004664:	d20a      	bcs.n	800467c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	607b      	str	r3, [r7, #4]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <vPortValidateInterruptPriority+0x74>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <vPortValidateInterruptPriority+0x78>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d90a      	bls.n	80046a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	603b      	str	r3, [r7, #0]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <vPortValidateInterruptPriority+0x60>
	}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	e000e3f0 	.word	0xe000e3f0
 80046b0:	20000f1c 	.word	0x20000f1c
 80046b4:	e000ed0c 	.word	0xe000ed0c
 80046b8:	20000f20 	.word	0x20000f20

080046bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046c8:	f7fe fe26 	bl	8003318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046cc:	4b58      	ldr	r3, [pc, #352]	; (8004830 <pvPortMalloc+0x174>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046d4:	f000 f910 	bl	80048f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046d8:	4b56      	ldr	r3, [pc, #344]	; (8004834 <pvPortMalloc+0x178>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 808e 	bne.w	8004802 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01d      	beq.n	8004728 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046ec:	2208      	movs	r2, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d014      	beq.n	8004728 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	3308      	adds	r3, #8
 8004706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <pvPortMalloc+0x6c>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	617b      	str	r3, [r7, #20]
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d069      	beq.n	8004802 <pvPortMalloc+0x146>
 800472e:	4b42      	ldr	r3, [pc, #264]	; (8004838 <pvPortMalloc+0x17c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	d864      	bhi.n	8004802 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004738:	4b40      	ldr	r3, [pc, #256]	; (800483c <pvPortMalloc+0x180>)
 800473a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800473c:	4b3f      	ldr	r3, [pc, #252]	; (800483c <pvPortMalloc+0x180>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004742:	e004      	b.n	800474e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	429a      	cmp	r2, r3
 8004756:	d903      	bls.n	8004760 <pvPortMalloc+0xa4>
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f1      	bne.n	8004744 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004760:	4b33      	ldr	r3, [pc, #204]	; (8004830 <pvPortMalloc+0x174>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	429a      	cmp	r2, r3
 8004768:	d04b      	beq.n	8004802 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2208      	movs	r2, #8
 8004770:	4413      	add	r3, r2
 8004772:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	2308      	movs	r3, #8
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	429a      	cmp	r2, r3
 800478a:	d91f      	bls.n	80047cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <pvPortMalloc+0xf8>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	613b      	str	r3, [r7, #16]
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047c6:	69b8      	ldr	r0, [r7, #24]
 80047c8:	f000 f8f8 	bl	80049bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <pvPortMalloc+0x17c>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <pvPortMalloc+0x17c>)
 80047d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <pvPortMalloc+0x17c>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <pvPortMalloc+0x184>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d203      	bcs.n	80047ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <pvPortMalloc+0x17c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <pvPortMalloc+0x184>)
 80047ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <pvPortMalloc+0x178>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004802:	f7fe fd97 	bl	8003334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <pvPortMalloc+0x16a>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <pvPortMalloc+0x168>
	return pvReturn;
 8004826:	69fb      	ldr	r3, [r7, #28]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20001b2c 	.word	0x20001b2c
 8004834:	20001b38 	.word	0x20001b38
 8004838:	20001b30 	.word	0x20001b30
 800483c:	20001b24 	.word	0x20001b24
 8004840:	20001b34 	.word	0x20001b34

08004844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d048      	beq.n	80048e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004856:	2308      	movs	r3, #8
 8004858:	425b      	negs	r3, r3
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4413      	add	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <vPortFree+0xac>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <vPortFree+0x44>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <vPortFree+0x62>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60bb      	str	r3, [r7, #8]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <vPortFree+0xac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d019      	beq.n	80048e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <vPortFree+0xac>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	401a      	ands	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048cc:	f7fe fd24 	bl	8003318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <vPortFree+0xb0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4413      	add	r3, r2
 80048da:	4a06      	ldr	r2, [pc, #24]	; (80048f4 <vPortFree+0xb0>)
 80048dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048de:	6938      	ldr	r0, [r7, #16]
 80048e0:	f000 f86c 	bl	80049bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048e4:	f7fe fd26 	bl	8003334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20001b38 	.word	0x20001b38
 80048f4:	20001b30 	.word	0x20001b30

080048f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004902:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <prvHeapInit+0xac>)
 8004906:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00c      	beq.n	800492c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3307      	adds	r3, #7
 8004916:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <prvHeapInit+0xac>)
 8004928:	4413      	add	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004930:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <prvHeapInit+0xb0>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <prvHeapInit+0xb0>)
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004944:	2208      	movs	r2, #8
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0307 	bic.w	r3, r3, #7
 8004952:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <prvHeapInit+0xb4>)
 8004958:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800495a:	4b14      	ldr	r3, [pc, #80]	; (80049ac <prvHeapInit+0xb4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <prvHeapInit+0xb4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <prvHeapInit+0xb4>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <prvHeapInit+0xb8>)
 8004986:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <prvHeapInit+0xbc>)
 800498e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004990:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <prvHeapInit+0xc0>)
 8004992:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004996:	601a      	str	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000f24 	.word	0x20000f24
 80049a8:	20001b24 	.word	0x20001b24
 80049ac:	20001b2c 	.word	0x20001b2c
 80049b0:	20001b34 	.word	0x20001b34
 80049b4:	20001b30 	.word	0x20001b30
 80049b8:	20001b38 	.word	0x20001b38

080049bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <prvInsertBlockIntoFreeList+0xa8>)
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <prvInsertBlockIntoFreeList+0x14>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d8f7      	bhi.n	80049ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4413      	add	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d108      	bne.n	80049fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	441a      	add	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d118      	bne.n	8004a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <prvInsertBlockIntoFreeList+0xac>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d00d      	beq.n	8004a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	441a      	add	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e008      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <prvInsertBlockIntoFreeList+0xac>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e003      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d002      	beq.n	8004a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	20001b24 	.word	0x20001b24
 8004a68:	20001b2c 	.word	0x20001b2c

08004a6c <__errno>:
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <__errno+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000010 	.word	0x20000010

08004a78 <std>:
 8004a78:	2300      	movs	r3, #0
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a86:	6083      	str	r3, [r0, #8]
 8004a88:	8181      	strh	r1, [r0, #12]
 8004a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a8c:	81c2      	strh	r2, [r0, #14]
 8004a8e:	6183      	str	r3, [r0, #24]
 8004a90:	4619      	mov	r1, r3
 8004a92:	2208      	movs	r2, #8
 8004a94:	305c      	adds	r0, #92	; 0x5c
 8004a96:	f000 f91a 	bl	8004cce <memset>
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <std+0x38>)
 8004a9c:	6224      	str	r4, [r4, #32]
 8004a9e:	6263      	str	r3, [r4, #36]	; 0x24
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <std+0x3c>)
 8004aa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <std+0x40>)
 8004aa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <std+0x44>)
 8004aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	08005019 	.word	0x08005019
 8004ab4:	0800503b 	.word	0x0800503b
 8004ab8:	08005073 	.word	0x08005073
 8004abc:	08005097 	.word	0x08005097

08004ac0 <_cleanup_r>:
 8004ac0:	4901      	ldr	r1, [pc, #4]	; (8004ac8 <_cleanup_r+0x8>)
 8004ac2:	f000 b8af 	b.w	8004c24 <_fwalk_reent>
 8004ac6:	bf00      	nop
 8004ac8:	08005369 	.word	0x08005369

08004acc <__sfmoreglue>:
 8004acc:	2268      	movs	r2, #104	; 0x68
 8004ace:	b570      	push	{r4, r5, r6, lr}
 8004ad0:	1e4d      	subs	r5, r1, #1
 8004ad2:	4355      	muls	r5, r2
 8004ad4:	460e      	mov	r6, r1
 8004ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ada:	f000 f921 	bl	8004d20 <_malloc_r>
 8004ade:	4604      	mov	r4, r0
 8004ae0:	b140      	cbz	r0, 8004af4 <__sfmoreglue+0x28>
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ae8:	300c      	adds	r0, #12
 8004aea:	60a0      	str	r0, [r4, #8]
 8004aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004af0:	f000 f8ed 	bl	8004cce <memset>
 8004af4:	4620      	mov	r0, r4
 8004af6:	bd70      	pop	{r4, r5, r6, pc}

08004af8 <__sfp_lock_acquire>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__sfp_lock_acquire+0x8>)
 8004afa:	f000 b8d8 	b.w	8004cae <__retarget_lock_acquire_recursive>
 8004afe:	bf00      	nop
 8004b00:	20001b3d 	.word	0x20001b3d

08004b04 <__sfp_lock_release>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__sfp_lock_release+0x8>)
 8004b06:	f000 b8d3 	b.w	8004cb0 <__retarget_lock_release_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	20001b3d 	.word	0x20001b3d

08004b10 <__sinit_lock_acquire>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__sinit_lock_acquire+0x8>)
 8004b12:	f000 b8cc 	b.w	8004cae <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20001b3e 	.word	0x20001b3e

08004b1c <__sinit_lock_release>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <__sinit_lock_release+0x8>)
 8004b1e:	f000 b8c7 	b.w	8004cb0 <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20001b3e 	.word	0x20001b3e

08004b28 <__sinit>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	f7ff fff0 	bl	8004b10 <__sinit_lock_acquire>
 8004b30:	69a3      	ldr	r3, [r4, #24]
 8004b32:	b11b      	cbz	r3, 8004b3c <__sinit+0x14>
 8004b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b38:	f7ff bff0 	b.w	8004b1c <__sinit_lock_release>
 8004b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b40:	6523      	str	r3, [r4, #80]	; 0x50
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <__sinit+0x68>)
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <__sinit+0x6c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	bf08      	it	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	4620      	mov	r0, r4
 8004b52:	bf08      	it	eq
 8004b54:	61a3      	streq	r3, [r4, #24]
 8004b56:	f000 f81f 	bl	8004b98 <__sfp>
 8004b5a:	6060      	str	r0, [r4, #4]
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 f81b 	bl	8004b98 <__sfp>
 8004b62:	60a0      	str	r0, [r4, #8]
 8004b64:	4620      	mov	r0, r4
 8004b66:	f000 f817 	bl	8004b98 <__sfp>
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	60e0      	str	r0, [r4, #12]
 8004b70:	6860      	ldr	r0, [r4, #4]
 8004b72:	f7ff ff81 	bl	8004a78 <std>
 8004b76:	2201      	movs	r2, #1
 8004b78:	2109      	movs	r1, #9
 8004b7a:	68a0      	ldr	r0, [r4, #8]
 8004b7c:	f7ff ff7c 	bl	8004a78 <std>
 8004b80:	2202      	movs	r2, #2
 8004b82:	2112      	movs	r1, #18
 8004b84:	68e0      	ldr	r0, [r4, #12]
 8004b86:	f7ff ff77 	bl	8004a78 <std>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61a3      	str	r3, [r4, #24]
 8004b8e:	e7d1      	b.n	8004b34 <__sinit+0xc>
 8004b90:	08005d38 	.word	0x08005d38
 8004b94:	08004ac1 	.word	0x08004ac1

08004b98 <__sfp>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	f7ff ffac 	bl	8004af8 <__sfp_lock_acquire>
 8004ba0:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <__sfp+0x84>)
 8004ba2:	681e      	ldr	r6, [r3, #0]
 8004ba4:	69b3      	ldr	r3, [r6, #24]
 8004ba6:	b913      	cbnz	r3, 8004bae <__sfp+0x16>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7ff ffbd 	bl	8004b28 <__sinit>
 8004bae:	3648      	adds	r6, #72	; 0x48
 8004bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	d503      	bpl.n	8004bc0 <__sfp+0x28>
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	b30b      	cbz	r3, 8004c00 <__sfp+0x68>
 8004bbc:	6836      	ldr	r6, [r6, #0]
 8004bbe:	e7f7      	b.n	8004bb0 <__sfp+0x18>
 8004bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bc4:	b9d5      	cbnz	r5, 8004bfc <__sfp+0x64>
 8004bc6:	4b16      	ldr	r3, [pc, #88]	; (8004c20 <__sfp+0x88>)
 8004bc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bcc:	60e3      	str	r3, [r4, #12]
 8004bce:	6665      	str	r5, [r4, #100]	; 0x64
 8004bd0:	f000 f86c 	bl	8004cac <__retarget_lock_init_recursive>
 8004bd4:	f7ff ff96 	bl	8004b04 <__sfp_lock_release>
 8004bd8:	2208      	movs	r2, #8
 8004bda:	4629      	mov	r1, r5
 8004bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004be4:	6025      	str	r5, [r4, #0]
 8004be6:	61a5      	str	r5, [r4, #24]
 8004be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bec:	f000 f86f 	bl	8004cce <memset>
 8004bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfc:	3468      	adds	r4, #104	; 0x68
 8004bfe:	e7d9      	b.n	8004bb4 <__sfp+0x1c>
 8004c00:	2104      	movs	r1, #4
 8004c02:	4638      	mov	r0, r7
 8004c04:	f7ff ff62 	bl	8004acc <__sfmoreglue>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	6030      	str	r0, [r6, #0]
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d1d5      	bne.n	8004bbc <__sfp+0x24>
 8004c10:	f7ff ff78 	bl	8004b04 <__sfp_lock_release>
 8004c14:	230c      	movs	r3, #12
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	e7ee      	b.n	8004bf8 <__sfp+0x60>
 8004c1a:	bf00      	nop
 8004c1c:	08005d38 	.word	0x08005d38
 8004c20:	ffff0001 	.word	0xffff0001

08004c24 <_fwalk_reent>:
 8004c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c28:	4606      	mov	r6, r0
 8004c2a:	4688      	mov	r8, r1
 8004c2c:	2700      	movs	r7, #0
 8004c2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c36:	f1b9 0901 	subs.w	r9, r9, #1
 8004c3a:	d505      	bpl.n	8004c48 <_fwalk_reent+0x24>
 8004c3c:	6824      	ldr	r4, [r4, #0]
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	d1f7      	bne.n	8004c32 <_fwalk_reent+0xe>
 8004c42:	4638      	mov	r0, r7
 8004c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c48:	89ab      	ldrh	r3, [r5, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d907      	bls.n	8004c5e <_fwalk_reent+0x3a>
 8004c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c52:	3301      	adds	r3, #1
 8004c54:	d003      	beq.n	8004c5e <_fwalk_reent+0x3a>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4630      	mov	r0, r6
 8004c5a:	47c0      	blx	r8
 8004c5c:	4307      	orrs	r7, r0
 8004c5e:	3568      	adds	r5, #104	; 0x68
 8004c60:	e7e9      	b.n	8004c36 <_fwalk_reent+0x12>
	...

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	2600      	movs	r6, #0
 8004c68:	4d0c      	ldr	r5, [pc, #48]	; (8004c9c <__libc_init_array+0x38>)
 8004c6a:	4c0d      	ldr	r4, [pc, #52]	; (8004ca0 <__libc_init_array+0x3c>)
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	42a6      	cmp	r6, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	f000 ffb0 	bl	8005bd8 <_init>
 8004c78:	2600      	movs	r6, #0
 8004c7a:	4d0a      	ldr	r5, [pc, #40]	; (8004ca4 <__libc_init_array+0x40>)
 8004c7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ca8 <__libc_init_array+0x44>)
 8004c7e:	1b64      	subs	r4, r4, r5
 8004c80:	10a4      	asrs	r4, r4, #2
 8004c82:	42a6      	cmp	r6, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8c:	4798      	blx	r3
 8004c8e:	3601      	adds	r6, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c96:	4798      	blx	r3
 8004c98:	3601      	adds	r6, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	08005d70 	.word	0x08005d70
 8004ca0:	08005d70 	.word	0x08005d70
 8004ca4:	08005d70 	.word	0x08005d70
 8004ca8:	08005d74 	.word	0x08005d74

08004cac <__retarget_lock_init_recursive>:
 8004cac:	4770      	bx	lr

08004cae <__retarget_lock_acquire_recursive>:
 8004cae:	4770      	bx	lr

08004cb0 <__retarget_lock_release_recursive>:
 8004cb0:	4770      	bx	lr

08004cb2 <memcpy>:
 8004cb2:	440a      	add	r2, r1
 8004cb4:	4291      	cmp	r1, r2
 8004cb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004cba:	d100      	bne.n	8004cbe <memcpy+0xc>
 8004cbc:	4770      	bx	lr
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cc4:	4291      	cmp	r1, r2
 8004cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cca:	d1f9      	bne.n	8004cc0 <memcpy+0xe>
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <memset>:
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d100      	bne.n	8004cd8 <memset+0xa>
 8004cd6:	4770      	bx	lr
 8004cd8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cdc:	e7f9      	b.n	8004cd2 <memset+0x4>
	...

08004ce0 <sbrk_aligned>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4e0e      	ldr	r6, [pc, #56]	; (8004d1c <sbrk_aligned+0x3c>)
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	6831      	ldr	r1, [r6, #0]
 8004ce8:	4605      	mov	r5, r0
 8004cea:	b911      	cbnz	r1, 8004cf2 <sbrk_aligned+0x12>
 8004cec:	f000 f984 	bl	8004ff8 <_sbrk_r>
 8004cf0:	6030      	str	r0, [r6, #0]
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f97f 	bl	8004ff8 <_sbrk_r>
 8004cfa:	1c43      	adds	r3, r0, #1
 8004cfc:	d00a      	beq.n	8004d14 <sbrk_aligned+0x34>
 8004cfe:	1cc4      	adds	r4, r0, #3
 8004d00:	f024 0403 	bic.w	r4, r4, #3
 8004d04:	42a0      	cmp	r0, r4
 8004d06:	d007      	beq.n	8004d18 <sbrk_aligned+0x38>
 8004d08:	1a21      	subs	r1, r4, r0
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 f974 	bl	8004ff8 <_sbrk_r>
 8004d10:	3001      	adds	r0, #1
 8004d12:	d101      	bne.n	8004d18 <sbrk_aligned+0x38>
 8004d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d18:	4620      	mov	r0, r4
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	20001b44 	.word	0x20001b44

08004d20 <_malloc_r>:
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	1ccd      	adds	r5, r1, #3
 8004d26:	f025 0503 	bic.w	r5, r5, #3
 8004d2a:	3508      	adds	r5, #8
 8004d2c:	2d0c      	cmp	r5, #12
 8004d2e:	bf38      	it	cc
 8004d30:	250c      	movcc	r5, #12
 8004d32:	2d00      	cmp	r5, #0
 8004d34:	4607      	mov	r7, r0
 8004d36:	db01      	blt.n	8004d3c <_malloc_r+0x1c>
 8004d38:	42a9      	cmp	r1, r5
 8004d3a:	d905      	bls.n	8004d48 <_malloc_r+0x28>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	2600      	movs	r6, #0
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4630      	mov	r0, r6
 8004d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d48:	4e2e      	ldr	r6, [pc, #184]	; (8004e04 <_malloc_r+0xe4>)
 8004d4a:	f000 fbc1 	bl	80054d0 <__malloc_lock>
 8004d4e:	6833      	ldr	r3, [r6, #0]
 8004d50:	461c      	mov	r4, r3
 8004d52:	bb34      	cbnz	r4, 8004da2 <_malloc_r+0x82>
 8004d54:	4629      	mov	r1, r5
 8004d56:	4638      	mov	r0, r7
 8004d58:	f7ff ffc2 	bl	8004ce0 <sbrk_aligned>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	4604      	mov	r4, r0
 8004d60:	d14d      	bne.n	8004dfe <_malloc_r+0xde>
 8004d62:	6834      	ldr	r4, [r6, #0]
 8004d64:	4626      	mov	r6, r4
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	d140      	bne.n	8004dec <_malloc_r+0xcc>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4638      	mov	r0, r7
 8004d70:	eb04 0803 	add.w	r8, r4, r3
 8004d74:	f000 f940 	bl	8004ff8 <_sbrk_r>
 8004d78:	4580      	cmp	r8, r0
 8004d7a:	d13a      	bne.n	8004df2 <_malloc_r+0xd2>
 8004d7c:	6821      	ldr	r1, [r4, #0]
 8004d7e:	3503      	adds	r5, #3
 8004d80:	1a6d      	subs	r5, r5, r1
 8004d82:	f025 0503 	bic.w	r5, r5, #3
 8004d86:	3508      	adds	r5, #8
 8004d88:	2d0c      	cmp	r5, #12
 8004d8a:	bf38      	it	cc
 8004d8c:	250c      	movcc	r5, #12
 8004d8e:	4638      	mov	r0, r7
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7ff ffa5 	bl	8004ce0 <sbrk_aligned>
 8004d96:	3001      	adds	r0, #1
 8004d98:	d02b      	beq.n	8004df2 <_malloc_r+0xd2>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	442b      	add	r3, r5
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	e00e      	b.n	8004dc0 <_malloc_r+0xa0>
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	1b52      	subs	r2, r2, r5
 8004da6:	d41e      	bmi.n	8004de6 <_malloc_r+0xc6>
 8004da8:	2a0b      	cmp	r2, #11
 8004daa:	d916      	bls.n	8004dda <_malloc_r+0xba>
 8004dac:	1961      	adds	r1, r4, r5
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	6025      	str	r5, [r4, #0]
 8004db2:	bf18      	it	ne
 8004db4:	6059      	strne	r1, [r3, #4]
 8004db6:	6863      	ldr	r3, [r4, #4]
 8004db8:	bf08      	it	eq
 8004dba:	6031      	streq	r1, [r6, #0]
 8004dbc:	5162      	str	r2, [r4, r5]
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f104 060b 	add.w	r6, r4, #11
 8004dc6:	f000 fb89 	bl	80054dc <__malloc_unlock>
 8004dca:	f026 0607 	bic.w	r6, r6, #7
 8004dce:	1d23      	adds	r3, r4, #4
 8004dd0:	1af2      	subs	r2, r6, r3
 8004dd2:	d0b6      	beq.n	8004d42 <_malloc_r+0x22>
 8004dd4:	1b9b      	subs	r3, r3, r6
 8004dd6:	50a3      	str	r3, [r4, r2]
 8004dd8:	e7b3      	b.n	8004d42 <_malloc_r+0x22>
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	bf0c      	ite	eq
 8004de0:	6032      	streq	r2, [r6, #0]
 8004de2:	605a      	strne	r2, [r3, #4]
 8004de4:	e7ec      	b.n	8004dc0 <_malloc_r+0xa0>
 8004de6:	4623      	mov	r3, r4
 8004de8:	6864      	ldr	r4, [r4, #4]
 8004dea:	e7b2      	b.n	8004d52 <_malloc_r+0x32>
 8004dec:	4634      	mov	r4, r6
 8004dee:	6876      	ldr	r6, [r6, #4]
 8004df0:	e7b9      	b.n	8004d66 <_malloc_r+0x46>
 8004df2:	230c      	movs	r3, #12
 8004df4:	4638      	mov	r0, r7
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	f000 fb70 	bl	80054dc <__malloc_unlock>
 8004dfc:	e7a1      	b.n	8004d42 <_malloc_r+0x22>
 8004dfe:	6025      	str	r5, [r4, #0]
 8004e00:	e7de      	b.n	8004dc0 <_malloc_r+0xa0>
 8004e02:	bf00      	nop
 8004e04:	20001b40 	.word	0x20001b40

08004e08 <iprintf>:
 8004e08:	b40f      	push	{r0, r1, r2, r3}
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <iprintf+0x2c>)
 8004e0c:	b513      	push	{r0, r1, r4, lr}
 8004e0e:	681c      	ldr	r4, [r3, #0]
 8004e10:	b124      	cbz	r4, 8004e1c <iprintf+0x14>
 8004e12:	69a3      	ldr	r3, [r4, #24]
 8004e14:	b913      	cbnz	r3, 8004e1c <iprintf+0x14>
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff fe86 	bl	8004b28 <__sinit>
 8004e1c:	ab05      	add	r3, sp, #20
 8004e1e:	4620      	mov	r0, r4
 8004e20:	9a04      	ldr	r2, [sp, #16]
 8004e22:	68a1      	ldr	r1, [r4, #8]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	f000 fbcf 	bl	80055c8 <_vfiprintf_r>
 8004e2a:	b002      	add	sp, #8
 8004e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e30:	b004      	add	sp, #16
 8004e32:	4770      	bx	lr
 8004e34:	20000010 	.word	0x20000010

08004e38 <_puts_r>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	460e      	mov	r6, r1
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b118      	cbz	r0, 8004e48 <_puts_r+0x10>
 8004e40:	6983      	ldr	r3, [r0, #24]
 8004e42:	b90b      	cbnz	r3, 8004e48 <_puts_r+0x10>
 8004e44:	f7ff fe70 	bl	8004b28 <__sinit>
 8004e48:	69ab      	ldr	r3, [r5, #24]
 8004e4a:	68ac      	ldr	r4, [r5, #8]
 8004e4c:	b913      	cbnz	r3, 8004e54 <_puts_r+0x1c>
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7ff fe6a 	bl	8004b28 <__sinit>
 8004e54:	4b2c      	ldr	r3, [pc, #176]	; (8004f08 <_puts_r+0xd0>)
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d120      	bne.n	8004e9c <_puts_r+0x64>
 8004e5a:	686c      	ldr	r4, [r5, #4]
 8004e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d405      	bmi.n	8004e6e <_puts_r+0x36>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	0598      	lsls	r0, r3, #22
 8004e66:	d402      	bmi.n	8004e6e <_puts_r+0x36>
 8004e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e6a:	f7ff ff20 	bl	8004cae <__retarget_lock_acquire_recursive>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	0719      	lsls	r1, r3, #28
 8004e72:	d51d      	bpl.n	8004eb0 <_puts_r+0x78>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	b1db      	cbz	r3, 8004eb0 <_puts_r+0x78>
 8004e78:	3e01      	subs	r6, #1
 8004e7a:	68a3      	ldr	r3, [r4, #8]
 8004e7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60a3      	str	r3, [r4, #8]
 8004e84:	bb39      	cbnz	r1, 8004ed6 <_puts_r+0x9e>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	da38      	bge.n	8004efc <_puts_r+0xc4>
 8004e8a:	4622      	mov	r2, r4
 8004e8c:	210a      	movs	r1, #10
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f906 	bl	80050a0 <__swbuf_r>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d011      	beq.n	8004ebc <_puts_r+0x84>
 8004e98:	250a      	movs	r5, #10
 8004e9a:	e011      	b.n	8004ec0 <_puts_r+0x88>
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <_puts_r+0xd4>)
 8004e9e:	429c      	cmp	r4, r3
 8004ea0:	d101      	bne.n	8004ea6 <_puts_r+0x6e>
 8004ea2:	68ac      	ldr	r4, [r5, #8]
 8004ea4:	e7da      	b.n	8004e5c <_puts_r+0x24>
 8004ea6:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <_puts_r+0xd8>)
 8004ea8:	429c      	cmp	r4, r3
 8004eaa:	bf08      	it	eq
 8004eac:	68ec      	ldreq	r4, [r5, #12]
 8004eae:	e7d5      	b.n	8004e5c <_puts_r+0x24>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f958 	bl	8005168 <__swsetup_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d0dd      	beq.n	8004e78 <_puts_r+0x40>
 8004ebc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ec2:	07da      	lsls	r2, r3, #31
 8004ec4:	d405      	bmi.n	8004ed2 <_puts_r+0x9a>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	059b      	lsls	r3, r3, #22
 8004eca:	d402      	bmi.n	8004ed2 <_puts_r+0x9a>
 8004ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ece:	f7ff feef 	bl	8004cb0 <__retarget_lock_release_recursive>
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da04      	bge.n	8004ee4 <_puts_r+0xac>
 8004eda:	69a2      	ldr	r2, [r4, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	dc06      	bgt.n	8004eee <_puts_r+0xb6>
 8004ee0:	290a      	cmp	r1, #10
 8004ee2:	d004      	beq.n	8004eee <_puts_r+0xb6>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	6022      	str	r2, [r4, #0]
 8004eea:	7019      	strb	r1, [r3, #0]
 8004eec:	e7c5      	b.n	8004e7a <_puts_r+0x42>
 8004eee:	4622      	mov	r2, r4
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 f8d5 	bl	80050a0 <__swbuf_r>
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d1bf      	bne.n	8004e7a <_puts_r+0x42>
 8004efa:	e7df      	b.n	8004ebc <_puts_r+0x84>
 8004efc:	250a      	movs	r5, #10
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	701d      	strb	r5, [r3, #0]
 8004f06:	e7db      	b.n	8004ec0 <_puts_r+0x88>
 8004f08:	08005cf8 	.word	0x08005cf8
 8004f0c:	08005d18 	.word	0x08005d18
 8004f10:	08005cd8 	.word	0x08005cd8

08004f14 <puts>:
 8004f14:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <puts+0xc>)
 8004f16:	4601      	mov	r1, r0
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f7ff bf8d 	b.w	8004e38 <_puts_r>
 8004f1e:	bf00      	nop
 8004f20:	20000010 	.word	0x20000010

08004f24 <cleanup_glue>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	460c      	mov	r4, r1
 8004f28:	6809      	ldr	r1, [r1, #0]
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	b109      	cbz	r1, 8004f32 <cleanup_glue+0xe>
 8004f2e:	f7ff fff9 	bl	8004f24 <cleanup_glue>
 8004f32:	4621      	mov	r1, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f3a:	f000 bad5 	b.w	80054e8 <_free_r>
	...

08004f40 <_reclaim_reent>:
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <_reclaim_reent+0xb4>)
 8004f42:	b570      	push	{r4, r5, r6, lr}
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4604      	mov	r4, r0
 8004f48:	4283      	cmp	r3, r0
 8004f4a:	d051      	beq.n	8004ff0 <_reclaim_reent+0xb0>
 8004f4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f4e:	b143      	cbz	r3, 8004f62 <_reclaim_reent+0x22>
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d14a      	bne.n	8004fec <_reclaim_reent+0xac>
 8004f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	b111      	cbz	r1, 8004f62 <_reclaim_reent+0x22>
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f000 fac3 	bl	80054e8 <_free_r>
 8004f62:	6961      	ldr	r1, [r4, #20]
 8004f64:	b111      	cbz	r1, 8004f6c <_reclaim_reent+0x2c>
 8004f66:	4620      	mov	r0, r4
 8004f68:	f000 fabe 	bl	80054e8 <_free_r>
 8004f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f6e:	b111      	cbz	r1, 8004f76 <_reclaim_reent+0x36>
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fab9 	bl	80054e8 <_free_r>
 8004f76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f78:	b111      	cbz	r1, 8004f80 <_reclaim_reent+0x40>
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fab4 	bl	80054e8 <_free_r>
 8004f80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f82:	b111      	cbz	r1, 8004f8a <_reclaim_reent+0x4a>
 8004f84:	4620      	mov	r0, r4
 8004f86:	f000 faaf 	bl	80054e8 <_free_r>
 8004f8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f8c:	b111      	cbz	r1, 8004f94 <_reclaim_reent+0x54>
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 faaa 	bl	80054e8 <_free_r>
 8004f94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f96:	b111      	cbz	r1, 8004f9e <_reclaim_reent+0x5e>
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 faa5 	bl	80054e8 <_free_r>
 8004f9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004fa0:	b111      	cbz	r1, 8004fa8 <_reclaim_reent+0x68>
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 faa0 	bl	80054e8 <_free_r>
 8004fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004faa:	b111      	cbz	r1, 8004fb2 <_reclaim_reent+0x72>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 fa9b 	bl	80054e8 <_free_r>
 8004fb2:	69a3      	ldr	r3, [r4, #24]
 8004fb4:	b1e3      	cbz	r3, 8004ff0 <_reclaim_reent+0xb0>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fba:	4798      	blx	r3
 8004fbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fbe:	b1b9      	cbz	r1, 8004ff0 <_reclaim_reent+0xb0>
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fc6:	f7ff bfad 	b.w	8004f24 <cleanup_glue>
 8004fca:	5949      	ldr	r1, [r1, r5]
 8004fcc:	b941      	cbnz	r1, 8004fe0 <_reclaim_reent+0xa0>
 8004fce:	3504      	adds	r5, #4
 8004fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd2:	2d80      	cmp	r5, #128	; 0x80
 8004fd4:	68d9      	ldr	r1, [r3, #12]
 8004fd6:	d1f8      	bne.n	8004fca <_reclaim_reent+0x8a>
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 fa85 	bl	80054e8 <_free_r>
 8004fde:	e7ba      	b.n	8004f56 <_reclaim_reent+0x16>
 8004fe0:	680e      	ldr	r6, [r1, #0]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 fa80 	bl	80054e8 <_free_r>
 8004fe8:	4631      	mov	r1, r6
 8004fea:	e7ef      	b.n	8004fcc <_reclaim_reent+0x8c>
 8004fec:	2500      	movs	r5, #0
 8004fee:	e7ef      	b.n	8004fd0 <_reclaim_reent+0x90>
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000010 	.word	0x20000010

08004ff8 <_sbrk_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4d05      	ldr	r5, [pc, #20]	; (8005014 <_sbrk_r+0x1c>)
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	f7fb fc18 	bl	8000838 <_sbrk>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_sbrk_r+0x1a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_sbrk_r+0x1a>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20001b48 	.word	0x20001b48

08005018 <__sread>:
 8005018:	b510      	push	{r4, lr}
 800501a:	460c      	mov	r4, r1
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	f000 fd98 	bl	8005b54 <_read_r>
 8005024:	2800      	cmp	r0, #0
 8005026:	bfab      	itete	ge
 8005028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800502a:	89a3      	ldrhlt	r3, [r4, #12]
 800502c:	181b      	addge	r3, r3, r0
 800502e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005032:	bfac      	ite	ge
 8005034:	6563      	strge	r3, [r4, #84]	; 0x54
 8005036:	81a3      	strhlt	r3, [r4, #12]
 8005038:	bd10      	pop	{r4, pc}

0800503a <__swrite>:
 800503a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503e:	461f      	mov	r7, r3
 8005040:	898b      	ldrh	r3, [r1, #12]
 8005042:	4605      	mov	r5, r0
 8005044:	05db      	lsls	r3, r3, #23
 8005046:	460c      	mov	r4, r1
 8005048:	4616      	mov	r6, r2
 800504a:	d505      	bpl.n	8005058 <__swrite+0x1e>
 800504c:	2302      	movs	r3, #2
 800504e:	2200      	movs	r2, #0
 8005050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005054:	f000 f9c4 	bl	80053e0 <_lseek_r>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	4632      	mov	r2, r6
 800505c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	4628      	mov	r0, r5
 8005064:	463b      	mov	r3, r7
 8005066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800506a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506e:	f000 b869 	b.w	8005144 <_write_r>

08005072 <__sseek>:
 8005072:	b510      	push	{r4, lr}
 8005074:	460c      	mov	r4, r1
 8005076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507a:	f000 f9b1 	bl	80053e0 <_lseek_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	bf15      	itete	ne
 8005084:	6560      	strne	r0, [r4, #84]	; 0x54
 8005086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800508a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800508e:	81a3      	strheq	r3, [r4, #12]
 8005090:	bf18      	it	ne
 8005092:	81a3      	strhne	r3, [r4, #12]
 8005094:	bd10      	pop	{r4, pc}

08005096 <__sclose>:
 8005096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509a:	f000 b8d3 	b.w	8005244 <_close_r>
	...

080050a0 <__swbuf_r>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	460e      	mov	r6, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	4605      	mov	r5, r0
 80050a8:	b118      	cbz	r0, 80050b2 <__swbuf_r+0x12>
 80050aa:	6983      	ldr	r3, [r0, #24]
 80050ac:	b90b      	cbnz	r3, 80050b2 <__swbuf_r+0x12>
 80050ae:	f7ff fd3b 	bl	8004b28 <__sinit>
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <__swbuf_r+0x98>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d12b      	bne.n	8005110 <__swbuf_r+0x70>
 80050b8:	686c      	ldr	r4, [r5, #4]
 80050ba:	69a3      	ldr	r3, [r4, #24]
 80050bc:	60a3      	str	r3, [r4, #8]
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	071a      	lsls	r2, r3, #28
 80050c2:	d52f      	bpl.n	8005124 <__swbuf_r+0x84>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	b36b      	cbz	r3, 8005124 <__swbuf_r+0x84>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	b2f6      	uxtb	r6, r6
 80050ce:	1ac0      	subs	r0, r0, r3
 80050d0:	6963      	ldr	r3, [r4, #20]
 80050d2:	4637      	mov	r7, r6
 80050d4:	4283      	cmp	r3, r0
 80050d6:	dc04      	bgt.n	80050e2 <__swbuf_r+0x42>
 80050d8:	4621      	mov	r1, r4
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 f944 	bl	8005368 <_fflush_r>
 80050e0:	bb30      	cbnz	r0, 8005130 <__swbuf_r+0x90>
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	3001      	adds	r0, #1
 80050e6:	3b01      	subs	r3, #1
 80050e8:	60a3      	str	r3, [r4, #8]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	6022      	str	r2, [r4, #0]
 80050f0:	701e      	strb	r6, [r3, #0]
 80050f2:	6963      	ldr	r3, [r4, #20]
 80050f4:	4283      	cmp	r3, r0
 80050f6:	d004      	beq.n	8005102 <__swbuf_r+0x62>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	07db      	lsls	r3, r3, #31
 80050fc:	d506      	bpl.n	800510c <__swbuf_r+0x6c>
 80050fe:	2e0a      	cmp	r6, #10
 8005100:	d104      	bne.n	800510c <__swbuf_r+0x6c>
 8005102:	4621      	mov	r1, r4
 8005104:	4628      	mov	r0, r5
 8005106:	f000 f92f 	bl	8005368 <_fflush_r>
 800510a:	b988      	cbnz	r0, 8005130 <__swbuf_r+0x90>
 800510c:	4638      	mov	r0, r7
 800510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <__swbuf_r+0x9c>)
 8005112:	429c      	cmp	r4, r3
 8005114:	d101      	bne.n	800511a <__swbuf_r+0x7a>
 8005116:	68ac      	ldr	r4, [r5, #8]
 8005118:	e7cf      	b.n	80050ba <__swbuf_r+0x1a>
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <__swbuf_r+0xa0>)
 800511c:	429c      	cmp	r4, r3
 800511e:	bf08      	it	eq
 8005120:	68ec      	ldreq	r4, [r5, #12]
 8005122:	e7ca      	b.n	80050ba <__swbuf_r+0x1a>
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f81e 	bl	8005168 <__swsetup_r>
 800512c:	2800      	cmp	r0, #0
 800512e:	d0cb      	beq.n	80050c8 <__swbuf_r+0x28>
 8005130:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005134:	e7ea      	b.n	800510c <__swbuf_r+0x6c>
 8005136:	bf00      	nop
 8005138:	08005cf8 	.word	0x08005cf8
 800513c:	08005d18 	.word	0x08005d18
 8005140:	08005cd8 	.word	0x08005cd8

08005144 <_write_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	2200      	movs	r2, #0
 800514e:	4d05      	ldr	r5, [pc, #20]	; (8005164 <_write_r+0x20>)
 8005150:	602a      	str	r2, [r5, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	f7fb f822 	bl	800019c <_write>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_write_r+0x1e>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_write_r+0x1e>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20001b48 	.word	0x20001b48

08005168 <__swsetup_r>:
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <__swsetup_r+0xcc>)
 800516a:	b570      	push	{r4, r5, r6, lr}
 800516c:	681d      	ldr	r5, [r3, #0]
 800516e:	4606      	mov	r6, r0
 8005170:	460c      	mov	r4, r1
 8005172:	b125      	cbz	r5, 800517e <__swsetup_r+0x16>
 8005174:	69ab      	ldr	r3, [r5, #24]
 8005176:	b913      	cbnz	r3, 800517e <__swsetup_r+0x16>
 8005178:	4628      	mov	r0, r5
 800517a:	f7ff fcd5 	bl	8004b28 <__sinit>
 800517e:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <__swsetup_r+0xd0>)
 8005180:	429c      	cmp	r4, r3
 8005182:	d10f      	bne.n	80051a4 <__swsetup_r+0x3c>
 8005184:	686c      	ldr	r4, [r5, #4]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800518c:	0719      	lsls	r1, r3, #28
 800518e:	d42c      	bmi.n	80051ea <__swsetup_r+0x82>
 8005190:	06dd      	lsls	r5, r3, #27
 8005192:	d411      	bmi.n	80051b8 <__swsetup_r+0x50>
 8005194:	2309      	movs	r3, #9
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800519c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	e03e      	b.n	8005222 <__swsetup_r+0xba>
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <__swsetup_r+0xd4>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d101      	bne.n	80051ae <__swsetup_r+0x46>
 80051aa:	68ac      	ldr	r4, [r5, #8]
 80051ac:	e7eb      	b.n	8005186 <__swsetup_r+0x1e>
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <__swsetup_r+0xd8>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	bf08      	it	eq
 80051b4:	68ec      	ldreq	r4, [r5, #12]
 80051b6:	e7e6      	b.n	8005186 <__swsetup_r+0x1e>
 80051b8:	0758      	lsls	r0, r3, #29
 80051ba:	d512      	bpl.n	80051e2 <__swsetup_r+0x7a>
 80051bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051be:	b141      	cbz	r1, 80051d2 <__swsetup_r+0x6a>
 80051c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d002      	beq.n	80051ce <__swsetup_r+0x66>
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f98d 	bl	80054e8 <_free_r>
 80051ce:	2300      	movs	r3, #0
 80051d0:	6363      	str	r3, [r4, #52]	; 0x34
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	2300      	movs	r3, #0
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	b94b      	cbnz	r3, 8005202 <__swsetup_r+0x9a>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f8:	d003      	beq.n	8005202 <__swsetup_r+0x9a>
 80051fa:	4621      	mov	r1, r4
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 f927 	bl	8005450 <__smakebuf_r>
 8005202:	89a0      	ldrh	r0, [r4, #12]
 8005204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005208:	f010 0301 	ands.w	r3, r0, #1
 800520c:	d00a      	beq.n	8005224 <__swsetup_r+0xbc>
 800520e:	2300      	movs	r3, #0
 8005210:	60a3      	str	r3, [r4, #8]
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	425b      	negs	r3, r3
 8005216:	61a3      	str	r3, [r4, #24]
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	b943      	cbnz	r3, 800522e <__swsetup_r+0xc6>
 800521c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005220:	d1ba      	bne.n	8005198 <__swsetup_r+0x30>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	0781      	lsls	r1, r0, #30
 8005226:	bf58      	it	pl
 8005228:	6963      	ldrpl	r3, [r4, #20]
 800522a:	60a3      	str	r3, [r4, #8]
 800522c:	e7f4      	b.n	8005218 <__swsetup_r+0xb0>
 800522e:	2000      	movs	r0, #0
 8005230:	e7f7      	b.n	8005222 <__swsetup_r+0xba>
 8005232:	bf00      	nop
 8005234:	20000010 	.word	0x20000010
 8005238:	08005cf8 	.word	0x08005cf8
 800523c:	08005d18 	.word	0x08005d18
 8005240:	08005cd8 	.word	0x08005cd8

08005244 <_close_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	2300      	movs	r3, #0
 8005248:	4d05      	ldr	r5, [pc, #20]	; (8005260 <_close_r+0x1c>)
 800524a:	4604      	mov	r4, r0
 800524c:	4608      	mov	r0, r1
 800524e:	602b      	str	r3, [r5, #0]
 8005250:	f7fb fac1 	bl	80007d6 <_close>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_close_r+0x1a>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_close_r+0x1a>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	20001b48 	.word	0x20001b48

08005264 <__sflush_r>:
 8005264:	898a      	ldrh	r2, [r1, #12]
 8005266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005268:	4605      	mov	r5, r0
 800526a:	0710      	lsls	r0, r2, #28
 800526c:	460c      	mov	r4, r1
 800526e:	d457      	bmi.n	8005320 <__sflush_r+0xbc>
 8005270:	684b      	ldr	r3, [r1, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	dc04      	bgt.n	8005280 <__sflush_r+0x1c>
 8005276:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc01      	bgt.n	8005280 <__sflush_r+0x1c>
 800527c:	2000      	movs	r0, #0
 800527e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005282:	2e00      	cmp	r6, #0
 8005284:	d0fa      	beq.n	800527c <__sflush_r+0x18>
 8005286:	2300      	movs	r3, #0
 8005288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800528c:	682f      	ldr	r7, [r5, #0]
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	d032      	beq.n	80052f8 <__sflush_r+0x94>
 8005292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	075a      	lsls	r2, r3, #29
 8005298:	d505      	bpl.n	80052a6 <__sflush_r+0x42>
 800529a:	6863      	ldr	r3, [r4, #4]
 800529c:	1ac0      	subs	r0, r0, r3
 800529e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052a0:	b10b      	cbz	r3, 80052a6 <__sflush_r+0x42>
 80052a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a4:	1ac0      	subs	r0, r0, r3
 80052a6:	2300      	movs	r3, #0
 80052a8:	4602      	mov	r2, r0
 80052aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ac:	4628      	mov	r0, r5
 80052ae:	6a21      	ldr	r1, [r4, #32]
 80052b0:	47b0      	blx	r6
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	d106      	bne.n	80052c6 <__sflush_r+0x62>
 80052b8:	6829      	ldr	r1, [r5, #0]
 80052ba:	291d      	cmp	r1, #29
 80052bc:	d82c      	bhi.n	8005318 <__sflush_r+0xb4>
 80052be:	4a29      	ldr	r2, [pc, #164]	; (8005364 <__sflush_r+0x100>)
 80052c0:	40ca      	lsrs	r2, r1
 80052c2:	07d6      	lsls	r6, r2, #31
 80052c4:	d528      	bpl.n	8005318 <__sflush_r+0xb4>
 80052c6:	2200      	movs	r2, #0
 80052c8:	6062      	str	r2, [r4, #4]
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	04d9      	lsls	r1, r3, #19
 80052ce:	6022      	str	r2, [r4, #0]
 80052d0:	d504      	bpl.n	80052dc <__sflush_r+0x78>
 80052d2:	1c42      	adds	r2, r0, #1
 80052d4:	d101      	bne.n	80052da <__sflush_r+0x76>
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	b903      	cbnz	r3, 80052dc <__sflush_r+0x78>
 80052da:	6560      	str	r0, [r4, #84]	; 0x54
 80052dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052de:	602f      	str	r7, [r5, #0]
 80052e0:	2900      	cmp	r1, #0
 80052e2:	d0cb      	beq.n	800527c <__sflush_r+0x18>
 80052e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e8:	4299      	cmp	r1, r3
 80052ea:	d002      	beq.n	80052f2 <__sflush_r+0x8e>
 80052ec:	4628      	mov	r0, r5
 80052ee:	f000 f8fb 	bl	80054e8 <_free_r>
 80052f2:	2000      	movs	r0, #0
 80052f4:	6360      	str	r0, [r4, #52]	; 0x34
 80052f6:	e7c2      	b.n	800527e <__sflush_r+0x1a>
 80052f8:	6a21      	ldr	r1, [r4, #32]
 80052fa:	2301      	movs	r3, #1
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b0      	blx	r6
 8005300:	1c41      	adds	r1, r0, #1
 8005302:	d1c7      	bne.n	8005294 <__sflush_r+0x30>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c4      	beq.n	8005294 <__sflush_r+0x30>
 800530a:	2b1d      	cmp	r3, #29
 800530c:	d001      	beq.n	8005312 <__sflush_r+0xae>
 800530e:	2b16      	cmp	r3, #22
 8005310:	d101      	bne.n	8005316 <__sflush_r+0xb2>
 8005312:	602f      	str	r7, [r5, #0]
 8005314:	e7b2      	b.n	800527c <__sflush_r+0x18>
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	e7ae      	b.n	800527e <__sflush_r+0x1a>
 8005320:	690f      	ldr	r7, [r1, #16]
 8005322:	2f00      	cmp	r7, #0
 8005324:	d0aa      	beq.n	800527c <__sflush_r+0x18>
 8005326:	0793      	lsls	r3, r2, #30
 8005328:	bf18      	it	ne
 800532a:	2300      	movne	r3, #0
 800532c:	680e      	ldr	r6, [r1, #0]
 800532e:	bf08      	it	eq
 8005330:	694b      	ldreq	r3, [r1, #20]
 8005332:	1bf6      	subs	r6, r6, r7
 8005334:	600f      	str	r7, [r1, #0]
 8005336:	608b      	str	r3, [r1, #8]
 8005338:	2e00      	cmp	r6, #0
 800533a:	dd9f      	ble.n	800527c <__sflush_r+0x18>
 800533c:	4633      	mov	r3, r6
 800533e:	463a      	mov	r2, r7
 8005340:	4628      	mov	r0, r5
 8005342:	6a21      	ldr	r1, [r4, #32]
 8005344:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005348:	47e0      	blx	ip
 800534a:	2800      	cmp	r0, #0
 800534c:	dc06      	bgt.n	800535c <__sflush_r+0xf8>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	e790      	b.n	800527e <__sflush_r+0x1a>
 800535c:	4407      	add	r7, r0
 800535e:	1a36      	subs	r6, r6, r0
 8005360:	e7ea      	b.n	8005338 <__sflush_r+0xd4>
 8005362:	bf00      	nop
 8005364:	20400001 	.word	0x20400001

08005368 <_fflush_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	4605      	mov	r5, r0
 800536e:	460c      	mov	r4, r1
 8005370:	b913      	cbnz	r3, 8005378 <_fflush_r+0x10>
 8005372:	2500      	movs	r5, #0
 8005374:	4628      	mov	r0, r5
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	b118      	cbz	r0, 8005382 <_fflush_r+0x1a>
 800537a:	6983      	ldr	r3, [r0, #24]
 800537c:	b90b      	cbnz	r3, 8005382 <_fflush_r+0x1a>
 800537e:	f7ff fbd3 	bl	8004b28 <__sinit>
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <_fflush_r+0x6c>)
 8005384:	429c      	cmp	r4, r3
 8005386:	d11b      	bne.n	80053c0 <_fflush_r+0x58>
 8005388:	686c      	ldr	r4, [r5, #4]
 800538a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ef      	beq.n	8005372 <_fflush_r+0xa>
 8005392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005394:	07d0      	lsls	r0, r2, #31
 8005396:	d404      	bmi.n	80053a2 <_fflush_r+0x3a>
 8005398:	0599      	lsls	r1, r3, #22
 800539a:	d402      	bmi.n	80053a2 <_fflush_r+0x3a>
 800539c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539e:	f7ff fc86 	bl	8004cae <__retarget_lock_acquire_recursive>
 80053a2:	4628      	mov	r0, r5
 80053a4:	4621      	mov	r1, r4
 80053a6:	f7ff ff5d 	bl	8005264 <__sflush_r>
 80053aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ac:	4605      	mov	r5, r0
 80053ae:	07da      	lsls	r2, r3, #31
 80053b0:	d4e0      	bmi.n	8005374 <_fflush_r+0xc>
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	059b      	lsls	r3, r3, #22
 80053b6:	d4dd      	bmi.n	8005374 <_fflush_r+0xc>
 80053b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ba:	f7ff fc79 	bl	8004cb0 <__retarget_lock_release_recursive>
 80053be:	e7d9      	b.n	8005374 <_fflush_r+0xc>
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <_fflush_r+0x70>)
 80053c2:	429c      	cmp	r4, r3
 80053c4:	d101      	bne.n	80053ca <_fflush_r+0x62>
 80053c6:	68ac      	ldr	r4, [r5, #8]
 80053c8:	e7df      	b.n	800538a <_fflush_r+0x22>
 80053ca:	4b04      	ldr	r3, [pc, #16]	; (80053dc <_fflush_r+0x74>)
 80053cc:	429c      	cmp	r4, r3
 80053ce:	bf08      	it	eq
 80053d0:	68ec      	ldreq	r4, [r5, #12]
 80053d2:	e7da      	b.n	800538a <_fflush_r+0x22>
 80053d4:	08005cf8 	.word	0x08005cf8
 80053d8:	08005d18 	.word	0x08005d18
 80053dc:	08005cd8 	.word	0x08005cd8

080053e0 <_lseek_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	2200      	movs	r2, #0
 80053ea:	4d05      	ldr	r5, [pc, #20]	; (8005400 <_lseek_r+0x20>)
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fb fa15 	bl	800081e <_lseek>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_lseek_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_lseek_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20001b48 	.word	0x20001b48

08005404 <__swhatbuf_r>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	460e      	mov	r6, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	4614      	mov	r4, r2
 800540e:	2900      	cmp	r1, #0
 8005410:	461d      	mov	r5, r3
 8005412:	b096      	sub	sp, #88	; 0x58
 8005414:	da08      	bge.n	8005428 <__swhatbuf_r+0x24>
 8005416:	2200      	movs	r2, #0
 8005418:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	061a      	lsls	r2, r3, #24
 8005420:	d410      	bmi.n	8005444 <__swhatbuf_r+0x40>
 8005422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005426:	e00e      	b.n	8005446 <__swhatbuf_r+0x42>
 8005428:	466a      	mov	r2, sp
 800542a:	f000 fba5 	bl	8005b78 <_fstat_r>
 800542e:	2800      	cmp	r0, #0
 8005430:	dbf1      	blt.n	8005416 <__swhatbuf_r+0x12>
 8005432:	9a01      	ldr	r2, [sp, #4]
 8005434:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005438:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800543c:	425a      	negs	r2, r3
 800543e:	415a      	adcs	r2, r3
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	e7ee      	b.n	8005422 <__swhatbuf_r+0x1e>
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	2000      	movs	r0, #0
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	b016      	add	sp, #88	; 0x58
 800544c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005450 <__smakebuf_r>:
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005454:	079d      	lsls	r5, r3, #30
 8005456:	4606      	mov	r6, r0
 8005458:	460c      	mov	r4, r1
 800545a:	d507      	bpl.n	800546c <__smakebuf_r+0x1c>
 800545c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	2301      	movs	r3, #1
 8005466:	6163      	str	r3, [r4, #20]
 8005468:	b002      	add	sp, #8
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	466a      	mov	r2, sp
 800546e:	ab01      	add	r3, sp, #4
 8005470:	f7ff ffc8 	bl	8005404 <__swhatbuf_r>
 8005474:	9900      	ldr	r1, [sp, #0]
 8005476:	4605      	mov	r5, r0
 8005478:	4630      	mov	r0, r6
 800547a:	f7ff fc51 	bl	8004d20 <_malloc_r>
 800547e:	b948      	cbnz	r0, 8005494 <__smakebuf_r+0x44>
 8005480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005484:	059a      	lsls	r2, r3, #22
 8005486:	d4ef      	bmi.n	8005468 <__smakebuf_r+0x18>
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	f043 0302 	orr.w	r3, r3, #2
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	e7e3      	b.n	800545c <__smakebuf_r+0xc>
 8005494:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <__smakebuf_r+0x7c>)
 8005496:	62b3      	str	r3, [r6, #40]	; 0x28
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	6020      	str	r0, [r4, #0]
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	9b00      	ldr	r3, [sp, #0]
 80054a4:	6120      	str	r0, [r4, #16]
 80054a6:	6163      	str	r3, [r4, #20]
 80054a8:	9b01      	ldr	r3, [sp, #4]
 80054aa:	b15b      	cbz	r3, 80054c4 <__smakebuf_r+0x74>
 80054ac:	4630      	mov	r0, r6
 80054ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b2:	f000 fb73 	bl	8005b9c <_isatty_r>
 80054b6:	b128      	cbz	r0, 80054c4 <__smakebuf_r+0x74>
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	89a0      	ldrh	r0, [r4, #12]
 80054c6:	4305      	orrs	r5, r0
 80054c8:	81a5      	strh	r5, [r4, #12]
 80054ca:	e7cd      	b.n	8005468 <__smakebuf_r+0x18>
 80054cc:	08004ac1 	.word	0x08004ac1

080054d0 <__malloc_lock>:
 80054d0:	4801      	ldr	r0, [pc, #4]	; (80054d8 <__malloc_lock+0x8>)
 80054d2:	f7ff bbec 	b.w	8004cae <__retarget_lock_acquire_recursive>
 80054d6:	bf00      	nop
 80054d8:	20001b3c 	.word	0x20001b3c

080054dc <__malloc_unlock>:
 80054dc:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__malloc_unlock+0x8>)
 80054de:	f7ff bbe7 	b.w	8004cb0 <__retarget_lock_release_recursive>
 80054e2:	bf00      	nop
 80054e4:	20001b3c 	.word	0x20001b3c

080054e8 <_free_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4605      	mov	r5, r0
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d040      	beq.n	8005572 <_free_r+0x8a>
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f0c      	subs	r4, r1, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfb8      	it	lt
 80054fa:	18e4      	addlt	r4, r4, r3
 80054fc:	f7ff ffe8 	bl	80054d0 <__malloc_lock>
 8005500:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <_free_r+0x8c>)
 8005502:	6813      	ldr	r3, [r2, #0]
 8005504:	b933      	cbnz	r3, 8005514 <_free_r+0x2c>
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	6014      	str	r4, [r2, #0]
 800550a:	4628      	mov	r0, r5
 800550c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005510:	f7ff bfe4 	b.w	80054dc <__malloc_unlock>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d908      	bls.n	800552a <_free_r+0x42>
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	1821      	adds	r1, r4, r0
 800551c:	428b      	cmp	r3, r1
 800551e:	bf01      	itttt	eq
 8005520:	6819      	ldreq	r1, [r3, #0]
 8005522:	685b      	ldreq	r3, [r3, #4]
 8005524:	1809      	addeq	r1, r1, r0
 8005526:	6021      	streq	r1, [r4, #0]
 8005528:	e7ed      	b.n	8005506 <_free_r+0x1e>
 800552a:	461a      	mov	r2, r3
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	b10b      	cbz	r3, 8005534 <_free_r+0x4c>
 8005530:	42a3      	cmp	r3, r4
 8005532:	d9fa      	bls.n	800552a <_free_r+0x42>
 8005534:	6811      	ldr	r1, [r2, #0]
 8005536:	1850      	adds	r0, r2, r1
 8005538:	42a0      	cmp	r0, r4
 800553a:	d10b      	bne.n	8005554 <_free_r+0x6c>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	4401      	add	r1, r0
 8005540:	1850      	adds	r0, r2, r1
 8005542:	4283      	cmp	r3, r0
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	d1e0      	bne.n	800550a <_free_r+0x22>
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4401      	add	r1, r0
 800554e:	6011      	str	r1, [r2, #0]
 8005550:	6053      	str	r3, [r2, #4]
 8005552:	e7da      	b.n	800550a <_free_r+0x22>
 8005554:	d902      	bls.n	800555c <_free_r+0x74>
 8005556:	230c      	movs	r3, #12
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	e7d6      	b.n	800550a <_free_r+0x22>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	1821      	adds	r1, r4, r0
 8005560:	428b      	cmp	r3, r1
 8005562:	bf01      	itttt	eq
 8005564:	6819      	ldreq	r1, [r3, #0]
 8005566:	685b      	ldreq	r3, [r3, #4]
 8005568:	1809      	addeq	r1, r1, r0
 800556a:	6021      	streq	r1, [r4, #0]
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	6054      	str	r4, [r2, #4]
 8005570:	e7cb      	b.n	800550a <_free_r+0x22>
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	20001b40 	.word	0x20001b40

08005578 <__sfputc_r>:
 8005578:	6893      	ldr	r3, [r2, #8]
 800557a:	b410      	push	{r4}
 800557c:	3b01      	subs	r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	6093      	str	r3, [r2, #8]
 8005582:	da07      	bge.n	8005594 <__sfputc_r+0x1c>
 8005584:	6994      	ldr	r4, [r2, #24]
 8005586:	42a3      	cmp	r3, r4
 8005588:	db01      	blt.n	800558e <__sfputc_r+0x16>
 800558a:	290a      	cmp	r1, #10
 800558c:	d102      	bne.n	8005594 <__sfputc_r+0x1c>
 800558e:	bc10      	pop	{r4}
 8005590:	f7ff bd86 	b.w	80050a0 <__swbuf_r>
 8005594:	6813      	ldr	r3, [r2, #0]
 8005596:	1c58      	adds	r0, r3, #1
 8005598:	6010      	str	r0, [r2, #0]
 800559a:	7019      	strb	r1, [r3, #0]
 800559c:	4608      	mov	r0, r1
 800559e:	bc10      	pop	{r4}
 80055a0:	4770      	bx	lr

080055a2 <__sfputs_r>:
 80055a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a4:	4606      	mov	r6, r0
 80055a6:	460f      	mov	r7, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	18d5      	adds	r5, r2, r3
 80055ac:	42ac      	cmp	r4, r5
 80055ae:	d101      	bne.n	80055b4 <__sfputs_r+0x12>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e007      	b.n	80055c4 <__sfputs_r+0x22>
 80055b4:	463a      	mov	r2, r7
 80055b6:	4630      	mov	r0, r6
 80055b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055bc:	f7ff ffdc 	bl	8005578 <__sfputc_r>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d1f3      	bne.n	80055ac <__sfputs_r+0xa>
 80055c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c8 <_vfiprintf_r>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	460d      	mov	r5, r1
 80055ce:	4614      	mov	r4, r2
 80055d0:	4698      	mov	r8, r3
 80055d2:	4606      	mov	r6, r0
 80055d4:	b09d      	sub	sp, #116	; 0x74
 80055d6:	b118      	cbz	r0, 80055e0 <_vfiprintf_r+0x18>
 80055d8:	6983      	ldr	r3, [r0, #24]
 80055da:	b90b      	cbnz	r3, 80055e0 <_vfiprintf_r+0x18>
 80055dc:	f7ff faa4 	bl	8004b28 <__sinit>
 80055e0:	4b89      	ldr	r3, [pc, #548]	; (8005808 <_vfiprintf_r+0x240>)
 80055e2:	429d      	cmp	r5, r3
 80055e4:	d11b      	bne.n	800561e <_vfiprintf_r+0x56>
 80055e6:	6875      	ldr	r5, [r6, #4]
 80055e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ea:	07d9      	lsls	r1, r3, #31
 80055ec:	d405      	bmi.n	80055fa <_vfiprintf_r+0x32>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	059a      	lsls	r2, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_vfiprintf_r+0x32>
 80055f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055f6:	f7ff fb5a 	bl	8004cae <__retarget_lock_acquire_recursive>
 80055fa:	89ab      	ldrh	r3, [r5, #12]
 80055fc:	071b      	lsls	r3, r3, #28
 80055fe:	d501      	bpl.n	8005604 <_vfiprintf_r+0x3c>
 8005600:	692b      	ldr	r3, [r5, #16]
 8005602:	b9eb      	cbnz	r3, 8005640 <_vfiprintf_r+0x78>
 8005604:	4629      	mov	r1, r5
 8005606:	4630      	mov	r0, r6
 8005608:	f7ff fdae 	bl	8005168 <__swsetup_r>
 800560c:	b1c0      	cbz	r0, 8005640 <_vfiprintf_r+0x78>
 800560e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005610:	07dc      	lsls	r4, r3, #31
 8005612:	d50e      	bpl.n	8005632 <_vfiprintf_r+0x6a>
 8005614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005618:	b01d      	add	sp, #116	; 0x74
 800561a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561e:	4b7b      	ldr	r3, [pc, #492]	; (800580c <_vfiprintf_r+0x244>)
 8005620:	429d      	cmp	r5, r3
 8005622:	d101      	bne.n	8005628 <_vfiprintf_r+0x60>
 8005624:	68b5      	ldr	r5, [r6, #8]
 8005626:	e7df      	b.n	80055e8 <_vfiprintf_r+0x20>
 8005628:	4b79      	ldr	r3, [pc, #484]	; (8005810 <_vfiprintf_r+0x248>)
 800562a:	429d      	cmp	r5, r3
 800562c:	bf08      	it	eq
 800562e:	68f5      	ldreq	r5, [r6, #12]
 8005630:	e7da      	b.n	80055e8 <_vfiprintf_r+0x20>
 8005632:	89ab      	ldrh	r3, [r5, #12]
 8005634:	0598      	lsls	r0, r3, #22
 8005636:	d4ed      	bmi.n	8005614 <_vfiprintf_r+0x4c>
 8005638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800563a:	f7ff fb39 	bl	8004cb0 <__retarget_lock_release_recursive>
 800563e:	e7e9      	b.n	8005614 <_vfiprintf_r+0x4c>
 8005640:	2300      	movs	r3, #0
 8005642:	9309      	str	r3, [sp, #36]	; 0x24
 8005644:	2320      	movs	r3, #32
 8005646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800564a:	2330      	movs	r3, #48	; 0x30
 800564c:	f04f 0901 	mov.w	r9, #1
 8005650:	f8cd 800c 	str.w	r8, [sp, #12]
 8005654:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005814 <_vfiprintf_r+0x24c>
 8005658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800565c:	4623      	mov	r3, r4
 800565e:	469a      	mov	sl, r3
 8005660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005664:	b10a      	cbz	r2, 800566a <_vfiprintf_r+0xa2>
 8005666:	2a25      	cmp	r2, #37	; 0x25
 8005668:	d1f9      	bne.n	800565e <_vfiprintf_r+0x96>
 800566a:	ebba 0b04 	subs.w	fp, sl, r4
 800566e:	d00b      	beq.n	8005688 <_vfiprintf_r+0xc0>
 8005670:	465b      	mov	r3, fp
 8005672:	4622      	mov	r2, r4
 8005674:	4629      	mov	r1, r5
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff ff93 	bl	80055a2 <__sfputs_r>
 800567c:	3001      	adds	r0, #1
 800567e:	f000 80aa 	beq.w	80057d6 <_vfiprintf_r+0x20e>
 8005682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005684:	445a      	add	r2, fp
 8005686:	9209      	str	r2, [sp, #36]	; 0x24
 8005688:	f89a 3000 	ldrb.w	r3, [sl]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a2 	beq.w	80057d6 <_vfiprintf_r+0x20e>
 8005692:	2300      	movs	r3, #0
 8005694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569c:	f10a 0a01 	add.w	sl, sl, #1
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	9307      	str	r3, [sp, #28]
 80056a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a8:	931a      	str	r3, [sp, #104]	; 0x68
 80056aa:	4654      	mov	r4, sl
 80056ac:	2205      	movs	r2, #5
 80056ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b2:	4858      	ldr	r0, [pc, #352]	; (8005814 <_vfiprintf_r+0x24c>)
 80056b4:	f000 fa82 	bl	8005bbc <memchr>
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	b9d8      	cbnz	r0, 80056f4 <_vfiprintf_r+0x12c>
 80056bc:	06d1      	lsls	r1, r2, #27
 80056be:	bf44      	itt	mi
 80056c0:	2320      	movmi	r3, #32
 80056c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c6:	0713      	lsls	r3, r2, #28
 80056c8:	bf44      	itt	mi
 80056ca:	232b      	movmi	r3, #43	; 0x2b
 80056cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d0:	f89a 3000 	ldrb.w	r3, [sl]
 80056d4:	2b2a      	cmp	r3, #42	; 0x2a
 80056d6:	d015      	beq.n	8005704 <_vfiprintf_r+0x13c>
 80056d8:	4654      	mov	r4, sl
 80056da:	2000      	movs	r0, #0
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	9a07      	ldr	r2, [sp, #28]
 80056e2:	4621      	mov	r1, r4
 80056e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e8:	3b30      	subs	r3, #48	; 0x30
 80056ea:	2b09      	cmp	r3, #9
 80056ec:	d94e      	bls.n	800578c <_vfiprintf_r+0x1c4>
 80056ee:	b1b0      	cbz	r0, 800571e <_vfiprintf_r+0x156>
 80056f0:	9207      	str	r2, [sp, #28]
 80056f2:	e014      	b.n	800571e <_vfiprintf_r+0x156>
 80056f4:	eba0 0308 	sub.w	r3, r0, r8
 80056f8:	fa09 f303 	lsl.w	r3, r9, r3
 80056fc:	4313      	orrs	r3, r2
 80056fe:	46a2      	mov	sl, r4
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	e7d2      	b.n	80056aa <_vfiprintf_r+0xe2>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	1d19      	adds	r1, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	9103      	str	r1, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfbb      	ittet	lt
 8005710:	425b      	neglt	r3, r3
 8005712:	f042 0202 	orrlt.w	r2, r2, #2
 8005716:	9307      	strge	r3, [sp, #28]
 8005718:	9307      	strlt	r3, [sp, #28]
 800571a:	bfb8      	it	lt
 800571c:	9204      	strlt	r2, [sp, #16]
 800571e:	7823      	ldrb	r3, [r4, #0]
 8005720:	2b2e      	cmp	r3, #46	; 0x2e
 8005722:	d10c      	bne.n	800573e <_vfiprintf_r+0x176>
 8005724:	7863      	ldrb	r3, [r4, #1]
 8005726:	2b2a      	cmp	r3, #42	; 0x2a
 8005728:	d135      	bne.n	8005796 <_vfiprintf_r+0x1ce>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	3402      	adds	r4, #2
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	9203      	str	r2, [sp, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	bfb8      	it	lt
 8005738:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800573c:	9305      	str	r3, [sp, #20]
 800573e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005818 <_vfiprintf_r+0x250>
 8005742:	2203      	movs	r2, #3
 8005744:	4650      	mov	r0, sl
 8005746:	7821      	ldrb	r1, [r4, #0]
 8005748:	f000 fa38 	bl	8005bbc <memchr>
 800574c:	b140      	cbz	r0, 8005760 <_vfiprintf_r+0x198>
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	eba0 000a 	sub.w	r0, r0, sl
 8005754:	fa03 f000 	lsl.w	r0, r3, r0
 8005758:	9b04      	ldr	r3, [sp, #16]
 800575a:	3401      	adds	r4, #1
 800575c:	4303      	orrs	r3, r0
 800575e:	9304      	str	r3, [sp, #16]
 8005760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005764:	2206      	movs	r2, #6
 8005766:	482d      	ldr	r0, [pc, #180]	; (800581c <_vfiprintf_r+0x254>)
 8005768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800576c:	f000 fa26 	bl	8005bbc <memchr>
 8005770:	2800      	cmp	r0, #0
 8005772:	d03f      	beq.n	80057f4 <_vfiprintf_r+0x22c>
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <_vfiprintf_r+0x258>)
 8005776:	bb1b      	cbnz	r3, 80057c0 <_vfiprintf_r+0x1f8>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	3307      	adds	r3, #7
 800577c:	f023 0307 	bic.w	r3, r3, #7
 8005780:	3308      	adds	r3, #8
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	443b      	add	r3, r7
 8005788:	9309      	str	r3, [sp, #36]	; 0x24
 800578a:	e767      	b.n	800565c <_vfiprintf_r+0x94>
 800578c:	460c      	mov	r4, r1
 800578e:	2001      	movs	r0, #1
 8005790:	fb0c 3202 	mla	r2, ip, r2, r3
 8005794:	e7a5      	b.n	80056e2 <_vfiprintf_r+0x11a>
 8005796:	2300      	movs	r3, #0
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4619      	mov	r1, r3
 800579e:	3401      	adds	r4, #1
 80057a0:	9305      	str	r3, [sp, #20]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a8:	3a30      	subs	r2, #48	; 0x30
 80057aa:	2a09      	cmp	r2, #9
 80057ac:	d903      	bls.n	80057b6 <_vfiprintf_r+0x1ee>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0c5      	beq.n	800573e <_vfiprintf_r+0x176>
 80057b2:	9105      	str	r1, [sp, #20]
 80057b4:	e7c3      	b.n	800573e <_vfiprintf_r+0x176>
 80057b6:	4604      	mov	r4, r0
 80057b8:	2301      	movs	r3, #1
 80057ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80057be:	e7f0      	b.n	80057a2 <_vfiprintf_r+0x1da>
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462a      	mov	r2, r5
 80057c6:	4630      	mov	r0, r6
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <_vfiprintf_r+0x25c>)
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	f3af 8000 	nop.w
 80057d0:	4607      	mov	r7, r0
 80057d2:	1c78      	adds	r0, r7, #1
 80057d4:	d1d6      	bne.n	8005784 <_vfiprintf_r+0x1bc>
 80057d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057d8:	07d9      	lsls	r1, r3, #31
 80057da:	d405      	bmi.n	80057e8 <_vfiprintf_r+0x220>
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	059a      	lsls	r2, r3, #22
 80057e0:	d402      	bmi.n	80057e8 <_vfiprintf_r+0x220>
 80057e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e4:	f7ff fa64 	bl	8004cb0 <__retarget_lock_release_recursive>
 80057e8:	89ab      	ldrh	r3, [r5, #12]
 80057ea:	065b      	lsls	r3, r3, #25
 80057ec:	f53f af12 	bmi.w	8005614 <_vfiprintf_r+0x4c>
 80057f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057f2:	e711      	b.n	8005618 <_vfiprintf_r+0x50>
 80057f4:	ab03      	add	r3, sp, #12
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4630      	mov	r0, r6
 80057fc:	4b09      	ldr	r3, [pc, #36]	; (8005824 <_vfiprintf_r+0x25c>)
 80057fe:	a904      	add	r1, sp, #16
 8005800:	f000 f882 	bl	8005908 <_printf_i>
 8005804:	e7e4      	b.n	80057d0 <_vfiprintf_r+0x208>
 8005806:	bf00      	nop
 8005808:	08005cf8 	.word	0x08005cf8
 800580c:	08005d18 	.word	0x08005d18
 8005810:	08005cd8 	.word	0x08005cd8
 8005814:	08005d3c 	.word	0x08005d3c
 8005818:	08005d42 	.word	0x08005d42
 800581c:	08005d46 	.word	0x08005d46
 8005820:	00000000 	.word	0x00000000
 8005824:	080055a3 	.word	0x080055a3

08005828 <_printf_common>:
 8005828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	4616      	mov	r6, r2
 800582e:	4699      	mov	r9, r3
 8005830:	688a      	ldr	r2, [r1, #8]
 8005832:	690b      	ldr	r3, [r1, #16]
 8005834:	4607      	mov	r7, r0
 8005836:	4293      	cmp	r3, r2
 8005838:	bfb8      	it	lt
 800583a:	4613      	movlt	r3, r2
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005842:	460c      	mov	r4, r1
 8005844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005848:	b10a      	cbz	r2, 800584e <_printf_common+0x26>
 800584a:	3301      	adds	r3, #1
 800584c:	6033      	str	r3, [r6, #0]
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	0699      	lsls	r1, r3, #26
 8005852:	bf42      	ittt	mi
 8005854:	6833      	ldrmi	r3, [r6, #0]
 8005856:	3302      	addmi	r3, #2
 8005858:	6033      	strmi	r3, [r6, #0]
 800585a:	6825      	ldr	r5, [r4, #0]
 800585c:	f015 0506 	ands.w	r5, r5, #6
 8005860:	d106      	bne.n	8005870 <_printf_common+0x48>
 8005862:	f104 0a19 	add.w	sl, r4, #25
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	6832      	ldr	r2, [r6, #0]
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	42ab      	cmp	r3, r5
 800586e:	dc28      	bgt.n	80058c2 <_printf_common+0x9a>
 8005870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005874:	1e13      	subs	r3, r2, #0
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	bf18      	it	ne
 800587a:	2301      	movne	r3, #1
 800587c:	0692      	lsls	r2, r2, #26
 800587e:	d42d      	bmi.n	80058dc <_printf_common+0xb4>
 8005880:	4649      	mov	r1, r9
 8005882:	4638      	mov	r0, r7
 8005884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005888:	47c0      	blx	r8
 800588a:	3001      	adds	r0, #1
 800588c:	d020      	beq.n	80058d0 <_printf_common+0xa8>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	68e5      	ldr	r5, [r4, #12]
 8005892:	f003 0306 	and.w	r3, r3, #6
 8005896:	2b04      	cmp	r3, #4
 8005898:	bf18      	it	ne
 800589a:	2500      	movne	r5, #0
 800589c:	6832      	ldr	r2, [r6, #0]
 800589e:	f04f 0600 	mov.w	r6, #0
 80058a2:	68a3      	ldr	r3, [r4, #8]
 80058a4:	bf08      	it	eq
 80058a6:	1aad      	subeq	r5, r5, r2
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	bf08      	it	eq
 80058ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b0:	4293      	cmp	r3, r2
 80058b2:	bfc4      	itt	gt
 80058b4:	1a9b      	subgt	r3, r3, r2
 80058b6:	18ed      	addgt	r5, r5, r3
 80058b8:	341a      	adds	r4, #26
 80058ba:	42b5      	cmp	r5, r6
 80058bc:	d11a      	bne.n	80058f4 <_printf_common+0xcc>
 80058be:	2000      	movs	r0, #0
 80058c0:	e008      	b.n	80058d4 <_printf_common+0xac>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4652      	mov	r2, sl
 80058c6:	4649      	mov	r1, r9
 80058c8:	4638      	mov	r0, r7
 80058ca:	47c0      	blx	r8
 80058cc:	3001      	adds	r0, #1
 80058ce:	d103      	bne.n	80058d8 <_printf_common+0xb0>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d8:	3501      	adds	r5, #1
 80058da:	e7c4      	b.n	8005866 <_printf_common+0x3e>
 80058dc:	2030      	movs	r0, #48	; 0x30
 80058de:	18e1      	adds	r1, r4, r3
 80058e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ea:	4422      	add	r2, r4
 80058ec:	3302      	adds	r3, #2
 80058ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f2:	e7c5      	b.n	8005880 <_printf_common+0x58>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4622      	mov	r2, r4
 80058f8:	4649      	mov	r1, r9
 80058fa:	4638      	mov	r0, r7
 80058fc:	47c0      	blx	r8
 80058fe:	3001      	adds	r0, #1
 8005900:	d0e6      	beq.n	80058d0 <_printf_common+0xa8>
 8005902:	3601      	adds	r6, #1
 8005904:	e7d9      	b.n	80058ba <_printf_common+0x92>
	...

08005908 <_printf_i>:
 8005908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	7e0f      	ldrb	r7, [r1, #24]
 800590e:	4691      	mov	r9, r2
 8005910:	2f78      	cmp	r7, #120	; 0x78
 8005912:	4680      	mov	r8, r0
 8005914:	460c      	mov	r4, r1
 8005916:	469a      	mov	sl, r3
 8005918:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800591a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800591e:	d807      	bhi.n	8005930 <_printf_i+0x28>
 8005920:	2f62      	cmp	r7, #98	; 0x62
 8005922:	d80a      	bhi.n	800593a <_printf_i+0x32>
 8005924:	2f00      	cmp	r7, #0
 8005926:	f000 80d9 	beq.w	8005adc <_printf_i+0x1d4>
 800592a:	2f58      	cmp	r7, #88	; 0x58
 800592c:	f000 80a4 	beq.w	8005a78 <_printf_i+0x170>
 8005930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005938:	e03a      	b.n	80059b0 <_printf_i+0xa8>
 800593a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800593e:	2b15      	cmp	r3, #21
 8005940:	d8f6      	bhi.n	8005930 <_printf_i+0x28>
 8005942:	a101      	add	r1, pc, #4	; (adr r1, 8005948 <_printf_i+0x40>)
 8005944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005948:	080059a1 	.word	0x080059a1
 800594c:	080059b5 	.word	0x080059b5
 8005950:	08005931 	.word	0x08005931
 8005954:	08005931 	.word	0x08005931
 8005958:	08005931 	.word	0x08005931
 800595c:	08005931 	.word	0x08005931
 8005960:	080059b5 	.word	0x080059b5
 8005964:	08005931 	.word	0x08005931
 8005968:	08005931 	.word	0x08005931
 800596c:	08005931 	.word	0x08005931
 8005970:	08005931 	.word	0x08005931
 8005974:	08005ac3 	.word	0x08005ac3
 8005978:	080059e5 	.word	0x080059e5
 800597c:	08005aa5 	.word	0x08005aa5
 8005980:	08005931 	.word	0x08005931
 8005984:	08005931 	.word	0x08005931
 8005988:	08005ae5 	.word	0x08005ae5
 800598c:	08005931 	.word	0x08005931
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005931 	.word	0x08005931
 8005998:	08005931 	.word	0x08005931
 800599c:	08005aad 	.word	0x08005aad
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	1d1a      	adds	r2, r3, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	602a      	str	r2, [r5, #0]
 80059a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0a4      	b.n	8005afe <_printf_i+0x1f6>
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	6829      	ldr	r1, [r5, #0]
 80059b8:	0606      	lsls	r6, r0, #24
 80059ba:	f101 0304 	add.w	r3, r1, #4
 80059be:	d50a      	bpl.n	80059d6 <_printf_i+0xce>
 80059c0:	680e      	ldr	r6, [r1, #0]
 80059c2:	602b      	str	r3, [r5, #0]
 80059c4:	2e00      	cmp	r6, #0
 80059c6:	da03      	bge.n	80059d0 <_printf_i+0xc8>
 80059c8:	232d      	movs	r3, #45	; 0x2d
 80059ca:	4276      	negs	r6, r6
 80059cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d0:	230a      	movs	r3, #10
 80059d2:	485e      	ldr	r0, [pc, #376]	; (8005b4c <_printf_i+0x244>)
 80059d4:	e019      	b.n	8005a0a <_printf_i+0x102>
 80059d6:	680e      	ldr	r6, [r1, #0]
 80059d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	bf18      	it	ne
 80059e0:	b236      	sxthne	r6, r6
 80059e2:	e7ef      	b.n	80059c4 <_printf_i+0xbc>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	6820      	ldr	r0, [r4, #0]
 80059e8:	1d19      	adds	r1, r3, #4
 80059ea:	6029      	str	r1, [r5, #0]
 80059ec:	0601      	lsls	r1, r0, #24
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0xec>
 80059f0:	681e      	ldr	r6, [r3, #0]
 80059f2:	e002      	b.n	80059fa <_printf_i+0xf2>
 80059f4:	0646      	lsls	r6, r0, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0xe8>
 80059f8:	881e      	ldrh	r6, [r3, #0]
 80059fa:	2f6f      	cmp	r7, #111	; 0x6f
 80059fc:	bf0c      	ite	eq
 80059fe:	2308      	moveq	r3, #8
 8005a00:	230a      	movne	r3, #10
 8005a02:	4852      	ldr	r0, [pc, #328]	; (8005b4c <_printf_i+0x244>)
 8005a04:	2100      	movs	r1, #0
 8005a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a0a:	6865      	ldr	r5, [r4, #4]
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	bfa8      	it	ge
 8005a10:	6821      	ldrge	r1, [r4, #0]
 8005a12:	60a5      	str	r5, [r4, #8]
 8005a14:	bfa4      	itt	ge
 8005a16:	f021 0104 	bicge.w	r1, r1, #4
 8005a1a:	6021      	strge	r1, [r4, #0]
 8005a1c:	b90e      	cbnz	r6, 8005a22 <_printf_i+0x11a>
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	d04d      	beq.n	8005abe <_printf_i+0x1b6>
 8005a22:	4615      	mov	r5, r2
 8005a24:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a28:	fb03 6711 	mls	r7, r3, r1, r6
 8005a2c:	5dc7      	ldrb	r7, [r0, r7]
 8005a2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a32:	4637      	mov	r7, r6
 8005a34:	42bb      	cmp	r3, r7
 8005a36:	460e      	mov	r6, r1
 8005a38:	d9f4      	bls.n	8005a24 <_printf_i+0x11c>
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d10b      	bne.n	8005a56 <_printf_i+0x14e>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	07de      	lsls	r6, r3, #31
 8005a42:	d508      	bpl.n	8005a56 <_printf_i+0x14e>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	6861      	ldr	r1, [r4, #4]
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	bfde      	ittt	le
 8005a4c:	2330      	movle	r3, #48	; 0x30
 8005a4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a52:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a56:	1b52      	subs	r2, r2, r5
 8005a58:	6122      	str	r2, [r4, #16]
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4640      	mov	r0, r8
 8005a60:	f8cd a000 	str.w	sl, [sp]
 8005a64:	aa03      	add	r2, sp, #12
 8005a66:	f7ff fedf 	bl	8005828 <_printf_common>
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d14c      	bne.n	8005b08 <_printf_i+0x200>
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a72:	b004      	add	sp, #16
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a78:	4834      	ldr	r0, [pc, #208]	; (8005b4c <_printf_i+0x244>)
 8005a7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a7e:	6829      	ldr	r1, [r5, #0]
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a86:	6029      	str	r1, [r5, #0]
 8005a88:	061d      	lsls	r5, r3, #24
 8005a8a:	d514      	bpl.n	8005ab6 <_printf_i+0x1ae>
 8005a8c:	07df      	lsls	r7, r3, #31
 8005a8e:	bf44      	itt	mi
 8005a90:	f043 0320 	orrmi.w	r3, r3, #32
 8005a94:	6023      	strmi	r3, [r4, #0]
 8005a96:	b91e      	cbnz	r6, 8005aa0 <_printf_i+0x198>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	f023 0320 	bic.w	r3, r3, #32
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	e7af      	b.n	8005a04 <_printf_i+0xfc>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	f043 0320 	orr.w	r3, r3, #32
 8005aaa:	6023      	str	r3, [r4, #0]
 8005aac:	2378      	movs	r3, #120	; 0x78
 8005aae:	4828      	ldr	r0, [pc, #160]	; (8005b50 <_printf_i+0x248>)
 8005ab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ab4:	e7e3      	b.n	8005a7e <_printf_i+0x176>
 8005ab6:	0659      	lsls	r1, r3, #25
 8005ab8:	bf48      	it	mi
 8005aba:	b2b6      	uxthmi	r6, r6
 8005abc:	e7e6      	b.n	8005a8c <_printf_i+0x184>
 8005abe:	4615      	mov	r5, r2
 8005ac0:	e7bb      	b.n	8005a3a <_printf_i+0x132>
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	6826      	ldr	r6, [r4, #0]
 8005ac6:	1d18      	adds	r0, r3, #4
 8005ac8:	6961      	ldr	r1, [r4, #20]
 8005aca:	6028      	str	r0, [r5, #0]
 8005acc:	0635      	lsls	r5, r6, #24
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	d501      	bpl.n	8005ad6 <_printf_i+0x1ce>
 8005ad2:	6019      	str	r1, [r3, #0]
 8005ad4:	e002      	b.n	8005adc <_printf_i+0x1d4>
 8005ad6:	0670      	lsls	r0, r6, #25
 8005ad8:	d5fb      	bpl.n	8005ad2 <_printf_i+0x1ca>
 8005ada:	8019      	strh	r1, [r3, #0]
 8005adc:	2300      	movs	r3, #0
 8005ade:	4615      	mov	r5, r2
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	e7ba      	b.n	8005a5a <_printf_i+0x152>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	1d1a      	adds	r2, r3, #4
 8005aea:	602a      	str	r2, [r5, #0]
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	6862      	ldr	r2, [r4, #4]
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 f863 	bl	8005bbc <memchr>
 8005af6:	b108      	cbz	r0, 8005afc <_printf_i+0x1f4>
 8005af8:	1b40      	subs	r0, r0, r5
 8005afa:	6060      	str	r0, [r4, #4]
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	6123      	str	r3, [r4, #16]
 8005b00:	2300      	movs	r3, #0
 8005b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b06:	e7a8      	b.n	8005a5a <_printf_i+0x152>
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	47d0      	blx	sl
 8005b12:	3001      	adds	r0, #1
 8005b14:	d0ab      	beq.n	8005a6e <_printf_i+0x166>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	079b      	lsls	r3, r3, #30
 8005b1a:	d413      	bmi.n	8005b44 <_printf_i+0x23c>
 8005b1c:	68e0      	ldr	r0, [r4, #12]
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	4298      	cmp	r0, r3
 8005b22:	bfb8      	it	lt
 8005b24:	4618      	movlt	r0, r3
 8005b26:	e7a4      	b.n	8005a72 <_printf_i+0x16a>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	4640      	mov	r0, r8
 8005b30:	47d0      	blx	sl
 8005b32:	3001      	adds	r0, #1
 8005b34:	d09b      	beq.n	8005a6e <_printf_i+0x166>
 8005b36:	3501      	adds	r5, #1
 8005b38:	68e3      	ldr	r3, [r4, #12]
 8005b3a:	9903      	ldr	r1, [sp, #12]
 8005b3c:	1a5b      	subs	r3, r3, r1
 8005b3e:	42ab      	cmp	r3, r5
 8005b40:	dcf2      	bgt.n	8005b28 <_printf_i+0x220>
 8005b42:	e7eb      	b.n	8005b1c <_printf_i+0x214>
 8005b44:	2500      	movs	r5, #0
 8005b46:	f104 0619 	add.w	r6, r4, #25
 8005b4a:	e7f5      	b.n	8005b38 <_printf_i+0x230>
 8005b4c:	08005d4d 	.word	0x08005d4d
 8005b50:	08005d5e 	.word	0x08005d5e

08005b54 <_read_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4d05      	ldr	r5, [pc, #20]	; (8005b74 <_read_r+0x20>)
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f7fa fe1a 	bl	800079c <_read>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_read_r+0x1e>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_read_r+0x1e>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	20001b48 	.word	0x20001b48

08005b78 <_fstat_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_fstat_r+0x20>)
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	f7fa fe31 	bl	80007ec <_fstat>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d102      	bne.n	8005b94 <_fstat_r+0x1c>
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	b103      	cbz	r3, 8005b94 <_fstat_r+0x1c>
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20001b48 	.word	0x20001b48

08005b9c <_isatty_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4d05      	ldr	r5, [pc, #20]	; (8005bb8 <_isatty_r+0x1c>)
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fa fe2f 	bl	800080a <_isatty>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_isatty_r+0x1a>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_isatty_r+0x1a>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20001b48 	.word	0x20001b48

08005bbc <memchr>:
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	b2c9      	uxtb	r1, r1
 8005bc2:	4402      	add	r2, r0
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	d101      	bne.n	8005bce <memchr+0x12>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e003      	b.n	8005bd6 <memchr+0x1a>
 8005bce:	7804      	ldrb	r4, [r0, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	428c      	cmp	r4, r1
 8005bd4:	d1f6      	bne.n	8005bc4 <memchr+0x8>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
