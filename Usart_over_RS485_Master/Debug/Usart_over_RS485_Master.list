
Usart_over_RS485_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000414c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e8  080043e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f0  080043f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000110  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001036b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210b  00000000  00000000  0003040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00032518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  00033208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002203b  00000000  00000000  00033e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb29  00000000  00000000  00055e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc6df  00000000  00000000  00064994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131073  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dac  00000000  00000000  001310c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042c4 	.word	0x080042c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080042c4 	.word	0x080042c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc36 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f882 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f914 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8e8 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // По дефолту откоючаем LED
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	4836      	ldr	r0, [pc, #216]	; (800065c <main+0xf4>)
 8000582:	f000 ffb9 	bl	80014f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_SET); // Enable pin always HIGH as Master writes data to Slave
 8000586:	2201      	movs	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	4835      	ldr	r0, [pc, #212]	; (8000660 <main+0xf8>)
 800058c:	f000 ffb4 	bl	80014f8 <HAL_GPIO_WritePin>
  printf("Aplication is runing! \n\r");
 8000590:	4834      	ldr	r0, [pc, #208]	; (8000664 <main+0xfc>)
 8000592:	f002 ff41 	bl	8003418 <iprintf>

	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); // Флаг IDLE
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <main+0x100>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <main+0x100>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f042 0210 	orr.w	r2, r2, #16
 80005a4:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size); // Запуск према данных
 80005a6:	2240      	movs	r2, #64	; 0x40
 80005a8:	4930      	ldr	r1, [pc, #192]	; (800066c <main+0x104>)
 80005aa:	482f      	ldr	r0, [pc, #188]	; (8000668 <main+0x100>)
 80005ac:	f001 ffa4 	bl	80024f8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) { // Усли нажали на кнопку то LED is ON.
 80005b0:	2101      	movs	r1, #1
 80005b2:	482a      	ldr	r0, [pc, #168]	; (800065c <main+0xf4>)
 80005b4:	f000 ff88 	bl	80014c8 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d01f      	beq.n	80005fe <main+0x96>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	4826      	ldr	r0, [pc, #152]	; (800065c <main+0xf4>)
 80005c4:	f000 ff98 	bl	80014f8 <HAL_GPIO_WritePin>
			if (huart2.gState != HAL_UART_STATE_BUSY_TX) {
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <main+0x100>)
 80005ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b21      	cmp	r3, #33	; 0x21
 80005d2:	d014      	beq.n	80005fe <main+0x96>
				memset(rx_buffer, '\0', sizeof(rx_buffer)); // Очистка массива в сокете т.е. 'rx_buffer'
 80005d4:	2240      	movs	r2, #64	; 0x40
 80005d6:	2100      	movs	r1, #0
 80005d8:	4824      	ldr	r0, [pc, #144]	; (800066c <main+0x104>)
 80005da:	f002 ff15 	bl	8003408 <memset>
				*rx_buffer = '7';
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <main+0x104>)
 80005e0:	2237      	movs	r2, #55	; 0x37
 80005e2:	701a      	strb	r2, [r3, #0]
				rx_buffer_len = sizeof(*rx_buffer);
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <main+0x108>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, rx_buffer, rx_buffer_len);
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <main+0x108>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	491e      	ldr	r1, [pc, #120]	; (800066c <main+0x104>)
 80005f2:	481d      	ldr	r0, [pc, #116]	; (8000668 <main+0x100>)
 80005f4:	f001 ff3b 	bl	800246e <HAL_UART_Transmit_IT>
				flag = 1;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <main+0x10c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
			}
		}

		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && flag == 1) {// Усли нажали на кнопку то LED is ON.
 80005fe:	2101      	movs	r1, #1
 8000600:	4816      	ldr	r0, [pc, #88]	; (800065c <main+0xf4>)
 8000602:	f000 ff61 	bl	80014c8 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d123      	bne.n	8000654 <main+0xec>
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <main+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d11f      	bne.n	8000654 <main+0xec>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2102      	movs	r1, #2
 8000618:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0xf4>)
 800061a:	f000 ff6d 	bl	80014f8 <HAL_GPIO_WritePin>
			if (huart2.gState != HAL_UART_STATE_BUSY_TX) {
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <main+0x100>)
 8000620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b21      	cmp	r3, #33	; 0x21
 8000628:	d014      	beq.n	8000654 <main+0xec>
				memset(rx_buffer, '\0', sizeof(rx_buffer)); // Очистка массива в сокете т.е. 'rx_buffer'
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	2100      	movs	r1, #0
 800062e:	480f      	ldr	r0, [pc, #60]	; (800066c <main+0x104>)
 8000630:	f002 feea 	bl	8003408 <memset>
				*rx_buffer = '8';
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <main+0x104>)
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	701a      	strb	r2, [r3, #0]
				rx_buffer_len = sizeof(*rx_buffer);
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <main+0x108>)
 800063c:	2201      	movs	r2, #1
 800063e:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, rx_buffer, rx_buffer_len);
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0x108>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <main+0x104>)
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <main+0x100>)
 800064a:	f001 ff10 	bl	800246e <HAL_UART_Transmit_IT>
				flag = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <main+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_Delay(100);
 8000654:	2064      	movs	r0, #100	; 0x64
 8000656:	f000 fc03 	bl	8000e60 <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) { // Усли нажали на кнопку то LED is ON.
 800065a:	e7a9      	b.n	80005b0 <main+0x48>
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400
 8000664:	080042dc 	.word	0x080042dc
 8000668:	200000dc 	.word	0x200000dc
 800066c:	2000008c 	.word	0x2000008c
 8000670:	20000120 	.word	0x20000120
 8000674:	200000cc 	.word	0x200000cc

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f002 febe 	bl	8003408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ec:	23a8      	movs	r3, #168	; 0xa8
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 ff15 	bl	800152c <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f970 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f976 	bl	8001a1c <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 f959 	bl	80009ec <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f001 fe26 	bl	80023d4 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f92d 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000dc 	.word	0x200000dc
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a27      	ldr	r2, [pc, #156]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <MX_GPIO_Init+0xd8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_GPIO_Init+0xd8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	481b      	ldr	r0, [pc, #108]	; (800087c <MX_GPIO_Init+0xdc>)
 8000810:	f000 fe72 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	4819      	ldr	r0, [pc, #100]	; (8000880 <MX_GPIO_Init+0xe0>)
 800081a:	f000 fe6d 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0xdc>)
 8000832:	f000 fcad 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000836:	2302      	movs	r3, #2
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4619      	mov	r1, r3
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0xdc>)
 800084e:	f000 fc9f 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_GPIO_Init+0xe0>)
 800086a:	f000 fc91 	bl	8001190 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020400 	.word	0x40020400

08000884 <HAL_UART_IDLE_Callback>:

/* USER CODE BEGIN 4 */
/*------------------------Callback для флага IDLE---------------------------------------*/
void HAL_UART_IDLE_Callback(UART_HandleTypeDef *huart) { // Эта функция отслеживает окончание передачи!
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //проверка, из нужного ли uart пришли данные
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d14d      	bne.n	8000930 <HAL_UART_IDLE_Callback+0xac>
		printf("IDLE = OK\n\r");
 8000894:	4829      	ldr	r0, [pc, #164]	; (800093c <HAL_UART_IDLE_Callback+0xb8>)
 8000896:	f002 fdbf 	bl	8003418 <iprintf>
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE); // Что бы писало один раз "IDLE = OK"
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0210 	bic.w	r2, r2, #16
 80008a8:	60da      	str	r2, [r3, #12]
		rx_buffer_len = rx_buffer_size - huart->RxXferCount;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <HAL_UART_IDLE_Callback+0xbc>)
 80008b8:	801a      	strh	r2, [r3, #0]

		/*----------Действия с входящими данными, что получили то и отправляем!-----------*/
		if (huart2.gState != HAL_UART_STATE_BUSY_TX) {
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 80008bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b21      	cmp	r3, #33	; 0x21
 80008c4:	d019      	beq.n	80008fa <HAL_UART_IDLE_Callback+0x76>
			HAL_UART_Transmit_IT(&huart2, rx_buffer, rx_buffer_len);
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_UART_IDLE_Callback+0xbc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	491d      	ldr	r1, [pc, #116]	; (8000944 <HAL_UART_IDLE_Callback+0xc0>)
 80008ce:	481a      	ldr	r0, [pc, #104]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 80008d0:	f001 fdcd 	bl	800246e <HAL_UART_Transmit_IT>
			if (*rx_buffer == '1') { // Если прилитела 1-ка то включаем светодиод!
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_UART_IDLE_Callback+0xc0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b31      	cmp	r3, #49	; 0x31
 80008da:	d105      	bne.n	80008e8 <HAL_UART_IDLE_Callback+0x64>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2102      	movs	r1, #2
 80008e0:	4819      	ldr	r0, [pc, #100]	; (8000948 <HAL_UART_IDLE_Callback+0xc4>)
 80008e2:	f000 fe09 	bl	80014f8 <HAL_GPIO_WritePin>
 80008e6:	e008      	b.n	80008fa <HAL_UART_IDLE_Callback+0x76>
			} else if (*rx_buffer == '0') { // Если прилитела 0-к то отключаем светодиод!
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_UART_IDLE_Callback+0xc0>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b30      	cmp	r3, #48	; 0x30
 80008ee:	d104      	bne.n	80008fa <HAL_UART_IDLE_Callback+0x76>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2102      	movs	r1, #2
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <HAL_UART_IDLE_Callback+0xc4>)
 80008f6:	f000 fdff 	bl	80014f8 <HAL_GPIO_WritePin>
			}
		} else {
		}
		/*----------основные действия с входящими данными-----------*/
		HAL_UART_AbortReceive_IT(&huart2);      // Без этих 2-х строк,
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 80008fc:	f001 fe2c 	bl	8002558 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2); // работать будет только один раз!
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0210 	orr.w	r2, r2, #16
 8000924:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size);
 8000926:	2240      	movs	r2, #64	; 0x40
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <HAL_UART_IDLE_Callback+0xc0>)
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <HAL_UART_IDLE_Callback+0xb4>)
 800092c:	f001 fde4 	bl	80024f8 <HAL_UART_Receive_IT>
	}
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000dc 	.word	0x200000dc
 800093c:	080042f8 	.word	0x080042f8
 8000940:	20000120 	.word	0x20000120
 8000944:	2000008c 	.word	0x2000008c
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_UART_RxCpltCallback>:

/*------------------------UART RxCpltCallback---------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) { //проверка, из нужного ли uart пришли данные
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d128      	bne.n	80009ae <HAL_UART_RxCpltCallback+0x62>
		printf("RxCpltCallback = OK\n\r");
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <HAL_UART_RxCpltCallback+0x70>)
 800095e:	f002 fd5b 	bl	8003418 <iprintf>
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f022 0210 	bic.w	r2, r2, #16
 8000970:	60da      	str	r2, [r3, #12]

		printf("rx_buffer is overflow! \n\r"); // Если объем данных превышает размер буфера для входных данных будет сообщение!
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <HAL_UART_RxCpltCallback+0x74>)
 8000974:	f002 fd50 	bl	8003418 <iprintf>

		HAL_UART_AbortReceive_IT(&huart2); // Нужно, что бы не суммировало сообщения! Без этих 3-х строк,
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 800097a:	f001 fded 	bl	8002558 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2); // работать будет только один раз!
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE); // Сбрасываем флаг IDLE
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0210 	orr.w	r2, r2, #16
 80009a2:	60da      	str	r2, [r3, #12]

		HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size);// Снова в режим приёма.
 80009a4:	2240      	movs	r2, #64	; 0x40
 80009a6:	4907      	ldr	r1, [pc, #28]	; (80009c4 <HAL_UART_RxCpltCallback+0x78>)
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <HAL_UART_RxCpltCallback+0x6c>)
 80009aa:	f001 fda5 	bl	80024f8 <HAL_UART_Receive_IT>
	}
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000dc 	.word	0x200000dc
 80009bc:	08004304 	.word	0x08004304
 80009c0:	0800431c 	.word	0x0800431c
 80009c4:	2000008c 	.word	0x2000008c

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 fa21 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40002000 	.word	0x40002000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_UART_MspInit+0x94>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d133      	bne.n	8000ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_UART_MspInit+0x98>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_UART_MspInit+0x9c>)
 8000abe:	f000 fb67 	bl	8001190 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2026      	movs	r0, #38	; 0x26
 8000ac8:	f000 faa6 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000acc:	2026      	movs	r0, #38	; 0x26
 8000ace:	f000 fabf 	bl	8001050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	202d      	movs	r0, #45	; 0x2d
 8000afe:	f000 fa8b 	bl	8001018 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b02:	202d      	movs	r0, #45	; 0x2d
 8000b04:	f000 faa4 	bl	8001050 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f970 	bl	8001e14 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b34:	f001 f946 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0c9b      	lsrs	r3, r3, #18
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_InitTick+0xac>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_InitTick+0xb0>)
 8000b50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_InitTick+0xac>)
 8000b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_InitTick+0xac>)
 8000b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_InitTick+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_InitTick+0xac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_InitTick+0xac>)
 8000b6e:	f001 f983 	bl	8001e78 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d104      	bne.n	8000b82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <HAL_InitTick+0xac>)
 8000b7a:	f001 f9d7 	bl	8001f2c <HAL_TIM_Base_Start_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	20000124 	.word	0x20000124
 8000b98:	40002000 	.word	0x40002000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <USART2_IRQHandler+0x10>)
 8000bfa:	f001 fd5f 	bl	80026bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000dc 	.word	0x200000dc

08000c08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c0e:	f001 f9fd 	bl	800200c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000124 	.word	0x20000124

08000c1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e00a      	b.n	8000c44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2e:	f3af 8000 	nop.w
 8000c32:	4601      	mov	r1, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	b2ca      	uxtb	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf0      	blt.n	8000c2e <_read+0x12>
	}

return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e009      	b.n	8000c7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf1      	blt.n	8000c68 <_write+0x12>
	}
	return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_close>:

int _close(int file)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_isatty>:

int _isatty(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f002 fb44 	bl	80033b4 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	200000d0 	.word	0x200000d0
 8000d60:	20000180 	.word	0x20000180

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fb03 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fbd5 	bl	8000568 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dcc:	080043f8 	.word	0x080043f8
  ldr r2, =_sbss
 8000dd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dd4:	20000180 	.word	0x20000180

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8fc 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fe6c 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fdf2 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	2000016c 	.word	0x2000016c

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000016c 	.word	0x2000016c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800107a:	f7ff fee5 	bl	8000e48 <HAL_GetTick>
 800107e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d008      	beq.n	800109e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e052      	b.n	8001144 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0216 	bic.w	r2, r2, #22
 80010ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <HAL_DMA_Abort+0x62>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0208 	bic.w	r2, r2, #8
 80010dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ee:	e013      	b.n	8001118 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010f0:	f7ff feaa 	bl	8000e48 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d90c      	bls.n	8001118 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2220      	movs	r2, #32
 8001102:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e015      	b.n	8001144 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1e4      	bne.n	80010f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112a:	223f      	movs	r2, #63	; 0x3f
 800112c:	409a      	lsls	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d004      	beq.n	800116a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00c      	b.n	8001184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2205      	movs	r2, #5
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e16b      	b.n	8001484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 815a 	bne.w	800147e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80b4 	beq.w	800147e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5f      	ldr	r2, [pc, #380]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <HAL_GPIO_Init+0x310>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x314>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x318>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x31c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x20a>
 8001396:	2307      	movs	r3, #7
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139a:	2308      	movs	r3, #8
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x310>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fa:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae90 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e264      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d075      	beq.n	8001636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	4ba3      	ldr	r3, [pc, #652]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b04      	cmp	r3, #4
 8001554:	d00c      	beq.n	8001570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001556:	4ba0      	ldr	r3, [pc, #640]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d112      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b9d      	ldr	r3, [pc, #628]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800156e:	d10b      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4b99      	ldr	r3, [pc, #612]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d05b      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d157      	bne.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e23f      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x74>
 8001592:	4b91      	ldr	r3, [pc, #580]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a90      	ldr	r2, [pc, #576]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x98>
 80015aa:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a8a      	ldr	r2, [pc, #552]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b88      	ldr	r3, [pc, #544]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a87      	ldr	r2, [pc, #540]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015c4:	4b84      	ldr	r3, [pc, #528]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a83      	ldr	r2, [pc, #524]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc30 	bl	8000e48 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc2c 	bl	8000e48 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e204      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b76      	ldr	r3, [pc, #472]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xc0>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fc1c 	bl	8000e48 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fc18 	bl	8000e48 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1f0      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b6c      	ldr	r3, [pc, #432]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x152>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1c4      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4952      	ldr	r1, [pc, #328]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fbd1 	bl	8000e48 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fbcd 	bl	8000e48 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a5      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4940      	ldr	r1, [pc, #256]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x2b0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fbb0 	bl	8000e48 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fbac 	bl	8000e48 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e184      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d030      	beq.n	8001778 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d016      	beq.n	800174c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_RCC_OscConfig+0x2b4>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fb90 	bl	8000e48 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fb8c 	bl	8000e48 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e164      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x200>
 800174a:	e015      	b.n	8001778 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x2b4>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fb79 	bl	8000e48 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175a:	f7ff fb75 	bl	8000e48 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e14d      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a0 	beq.w	80018c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_OscConfig+0x2b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d121      	bne.n	8001806 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_RCC_OscConfig+0x2b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_RCC_OscConfig+0x2b8>)
 80017c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb3b 	bl	8000e48 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	e011      	b.n	80017fa <HAL_RCC_OscConfig+0x2ce>
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	42470000 	.word	0x42470000
 80017e0:	42470e80 	.word	0x42470e80
 80017e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e8:	f7ff fb2e 	bl	8000e48 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e106      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fa:	4b85      	ldr	r3, [pc, #532]	; (8001a10 <HAL_RCC_OscConfig+0x4e4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d106      	bne.n	800181c <HAL_RCC_OscConfig+0x2f0>
 800180e:	4b81      	ldr	r3, [pc, #516]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a80      	ldr	r2, [pc, #512]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	e01c      	b.n	8001856 <HAL_RCC_OscConfig+0x32a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x312>
 8001824:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a7a      	ldr	r2, [pc, #488]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	4b78      	ldr	r3, [pc, #480]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a77      	ldr	r2, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0x32a>
 800183e:	4b75      	ldr	r3, [pc, #468]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a74      	ldr	r2, [pc, #464]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b72      	ldr	r3, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a71      	ldr	r2, [pc, #452]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d015      	beq.n	800188a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff faf3 	bl	8000e48 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff faef 	bl	8000e48 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0c5      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ee      	beq.n	8001866 <HAL_RCC_OscConfig+0x33a>
 8001888:	e014      	b.n	80018b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff fadd 	bl	8000e48 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fad9 	bl	8000e48 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0af      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	4b5a      	ldr	r3, [pc, #360]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a55      	ldr	r2, [pc, #340]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 80018c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 809b 	beq.w	8001a06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d05c      	beq.n	8001996 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d141      	bne.n	8001968 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_RCC_OscConfig+0x4ec>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff faad 	bl	8000e48 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff faa9 	bl	8000e48 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e081      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69da      	ldr	r2, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	019b      	lsls	r3, r3, #6
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	061b      	lsls	r3, r3, #24
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193a:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_OscConfig+0x4ec>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fa82 	bl	8000e48 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fa7e 	bl	8000e48 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e056      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x41c>
 8001966:	e04e      	b.n	8001a06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_OscConfig+0x4ec>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fa6b 	bl	8000e48 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff fa67 	bl	8000e48 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e03f      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001988:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x44a>
 8001994:	e037      	b.n	8001a06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e032      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d028      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d11a      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019da:	4293      	cmp	r3, r2
 80019dc:	d111      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40007000 	.word	0x40007000
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470060 	.word	0x42470060

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0cc      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d90c      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0b8      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	494d      	ldr	r1, [pc, #308]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d044      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d119      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e067      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4934      	ldr	r1, [pc, #208]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff f99c 	bl	8000e48 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff f998 	bl	8000e48 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e04f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d20c      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e032      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4916      	ldr	r1, [pc, #88]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba2:	f000 f821 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	490a      	ldr	r1, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	5ccb      	ldrb	r3, [r1, r3]
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe ff90 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08004338 	.word	0x08004338
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d00d      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f200 80bd 	bhi.w	8001d8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1a:	e0b7      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c1e:	60bb      	str	r3, [r7, #8]
       break;
 8001c20:	e0b7      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c24:	60bb      	str	r3, [r7, #8]
      break;
 8001c26:	e0b4      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c28:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d04d      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	461a      	mov	r2, r3
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	ea02 0800 	and.w	r8, r2, r0
 8001c56:	ea03 0901 	and.w	r9, r3, r1
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c6c:	0142      	lsls	r2, r0, #5
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	ebb0 0008 	subs.w	r0, r0, r8
 8001c76:	eb61 0109 	sbc.w	r1, r1, r9
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c88:	0182      	lsls	r2, r0, #6
 8001c8a:	1a12      	subs	r2, r2, r0
 8001c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	00d9      	lsls	r1, r3, #3
 8001c9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c9e:	00d0      	lsls	r0, r2, #3
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	eb12 0208 	adds.w	r2, r2, r8
 8001ca8:	eb43 0309 	adc.w	r3, r3, r9
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0259      	lsls	r1, r3, #9
 8001cb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cba:	0250      	lsls	r0, r2, #9
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	f7fe fad0 	bl	8000270 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e04a      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cda:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	ea02 0400 	and.w	r4, r2, r0
 8001cf2:	ea03 0501 	and.w	r5, r3, r1
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	014b      	lsls	r3, r1, #5
 8001d04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d08:	0142      	lsls	r2, r0, #5
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	1b00      	subs	r0, r0, r4
 8001d10:	eb61 0105 	sbc.w	r1, r1, r5
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	018b      	lsls	r3, r1, #6
 8001d1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d22:	0182      	lsls	r2, r0, #6
 8001d24:	1a12      	subs	r2, r2, r0
 8001d26:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2a:	f04f 0000 	mov.w	r0, #0
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	00d9      	lsls	r1, r3, #3
 8001d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d38:	00d0      	lsls	r0, r2, #3
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	1912      	adds	r2, r2, r4
 8001d40:	eb45 0303 	adc.w	r3, r5, r3
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0299      	lsls	r1, r3, #10
 8001d4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d52:	0290      	lsls	r0, r2, #10
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f7fe fa84 	bl	8000270 <__aeabi_uldivmod>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	60bb      	str	r3, [r7, #8]
      break;
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d8e:	60bb      	str	r3, [r7, #8]
      break;
 8001d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d92:	68bb      	ldr	r3, [r7, #8]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	007a1200 	.word	0x007a1200

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	08004348 	.word	0x08004348

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffdc 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08004348 	.word	0x08004348

08001e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	220f      	movs	r2, #15
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_GetClockConfig+0x60>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0207 	and.w	r2, r3, #7
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e041      	b.n	8001f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f839 	bl	8001f16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 f9d8 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d001      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e04e      	b.n	8001fe2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d022      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6e:	d01d      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d018      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d013      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00e      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d004      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0x80>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d111      	bne.n	8001fd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d010      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fce:	e007      	b.n	8001fe0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40010400 	.word	0x40010400
 8002004:	40014000 	.word	0x40014000
 8002008:	40001800 	.word	0x40001800

0800200c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0202 	mvn.w	r2, #2
 8002038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8ee 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8e0 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8f1 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d122      	bne.n	80020bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b04      	cmp	r3, #4
 8002082:	d11b      	bne.n	80020bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0204 	mvn.w	r2, #4
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8c4 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 80020a8:	e005      	b.n	80020b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8b6 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f8c7 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d122      	bne.n	8002110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d11b      	bne.n	8002110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0208 	mvn.w	r2, #8
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f89a 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f88c 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f89d 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b10      	cmp	r3, #16
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b10      	cmp	r3, #16
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0210 	mvn.w	r2, #16
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2208      	movs	r2, #8
 800213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f870 	bl	8002230 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f862 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f873 	bl	8002244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0201 	mvn.w	r2, #1
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fc1c 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f902 	bl	80023c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b40      	cmp	r3, #64	; 0x40
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f838 	bl	8002258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b20      	cmp	r3, #32
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0220 	mvn.w	r2, #32
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8cc 	bl	80023ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a40      	ldr	r2, [pc, #256]	; (8002380 <TIM_Base_SetConfig+0x114>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d00f      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <TIM_Base_SetConfig+0x118>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00b      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <TIM_Base_SetConfig+0x11c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d007      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3b      	ldr	r2, [pc, #236]	; (800238c <TIM_Base_SetConfig+0x120>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <TIM_Base_SetConfig+0x124>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2f      	ldr	r2, [pc, #188]	; (8002380 <TIM_Base_SetConfig+0x114>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d02b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d027      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2c      	ldr	r2, [pc, #176]	; (8002384 <TIM_Base_SetConfig+0x118>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d023      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <TIM_Base_SetConfig+0x11c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2a      	ldr	r2, [pc, #168]	; (800238c <TIM_Base_SetConfig+0x120>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <TIM_Base_SetConfig+0x124>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d017      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <TIM_Base_SetConfig+0x128>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <TIM_Base_SetConfig+0x12c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00f      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a26      	ldr	r2, [pc, #152]	; (800239c <TIM_Base_SetConfig+0x130>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <TIM_Base_SetConfig+0x134>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <TIM_Base_SetConfig+0x138>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <TIM_Base_SetConfig+0x13c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <TIM_Base_SetConfig+0x114>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d003      	beq.n	8002364 <TIM_Base_SetConfig+0xf8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <TIM_Base_SetConfig+0x124>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d103      	bne.n	800236c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	615a      	str	r2, [r3, #20]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40010400 	.word	0x40010400
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800
 80023a0:	40001800 	.word	0x40001800
 80023a4:	40001c00 	.word	0x40001c00
 80023a8:	40002000 	.word	0x40002000

080023ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e03f      	b.n	8002466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fb24 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fe03 	bl	8003024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	d130      	bne.n	80024ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_UART_Transmit_IT+0x26>
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e029      	b.n	80024ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Transmit_IT+0x38>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e022      	b.n	80024ec <HAL_UART_Transmit_IT+0x7e>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2221      	movs	r2, #33	; 0x21
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	d11d      	bne.n	800254e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_UART_Receive_IT+0x26>
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e016      	b.n	8002550 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_UART_Receive_IT+0x38>
 800252c:	2302      	movs	r3, #2
 800252e:	e00f      	b.n	8002550 <HAL_UART_Receive_IT+0x58>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	461a      	mov	r2, r3
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fb81 	bl	8002c4c <UART_Start_Receive_IT>
 800254a:	4603      	mov	r3, r0
 800254c:	e000      	b.n	8002550 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b09a      	sub	sp, #104	; 0x68
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256a:	e853 3f00 	ldrex	r3, [r3]
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002572:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002576:	667b      	str	r3, [r7, #100]	; 0x64
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	330c      	adds	r3, #12
 800257e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002580:	657a      	str	r2, [r7, #84]	; 0x54
 8002582:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002588:	e841 2300 	strex	r3, r2, [r1]
 800258c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	e853 3f00 	ldrex	r3, [r3]
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	663b      	str	r3, [r7, #96]	; 0x60
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3314      	adds	r3, #20
 80025b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b4:	643a      	str	r2, [r7, #64]	; 0x40
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025bc:	e841 2300 	strex	r3, r2, [r1]
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	61fb      	str	r3, [r7, #28]
   return(result);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80025f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d13f      	bne.n	8002692 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	60bb      	str	r3, [r7, #8]
   return(result);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002628:	65bb      	str	r3, [r7, #88]	; 0x58
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002632:	61ba      	str	r2, [r7, #24]
 8002634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	6979      	ldr	r1, [r7, #20]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	613b      	str	r3, [r7, #16]
   return(result);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e5      	bne.n	8002612 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	2b00      	cmp	r3, #0
 800264c:	d013      	beq.n	8002676 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_UART_AbortReceive_IT+0x160>)
 8002654:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd76 	bl	800114c <HAL_DMA_Abort_IT>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d022      	beq.n	80026ac <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002670:	4610      	mov	r0, r2
 8002672:	4798      	blx	r3
 8002674:	e01a      	b.n	80026ac <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fac8 	bl	8002c20 <HAL_UART_AbortReceiveCpltCallback>
 8002690:	e00c      	b.n	80026ac <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 faba 	bl	8002c20 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3768      	adds	r7, #104	; 0x68
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	08002daf 	.word	0x08002daf

080026bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0ba      	sub	sp, #232	; 0xe8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_UART_IRQHandler+0x66>
 800270e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fbc7 	bl	8002eae <UART_Receive_IT>
      return;
 8002720:	e266      	b.n	8002bf0 <HAL_UART_IRQHandler+0x534>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80de 	beq.w	80028e8 <HAL_UART_IRQHandler+0x22c>
 800272c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80d1 	beq.w	80028e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_UART_IRQHandler+0xae>
 8002752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800276a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0xd2>
 8002776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_UART_IRQHandler+0xf6>
 800279a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d011      	beq.n	80027e2 <HAL_UART_IRQHandler+0x126>
 80027be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0208 	orr.w	r2, r3, #8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 81fd 	beq.w	8002be6 <HAL_UART_IRQHandler+0x52a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_UART_IRQHandler+0x14e>
 80027f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fb52 	bl	8002eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <HAL_UART_IRQHandler+0x17a>
 800282e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d04f      	beq.n	80028d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa42 	bl	8002cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b40      	cmp	r3, #64	; 0x40
 8002848:	d141      	bne.n	80028ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3314      	adds	r3, #20
 8002850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800287a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800288e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1d9      	bne.n	800284a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	2b00      	cmp	r3, #0
 800289c:	d013      	beq.n	80028c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	4a7d      	ldr	r2, [pc, #500]	; (8002a98 <HAL_UART_IRQHandler+0x3dc>)
 80028a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc4e 	bl	800114c <HAL_DMA_Abort_IT>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c0:	4610      	mov	r0, r2
 80028c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	e00e      	b.n	80028e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f9a0 	bl	8002c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	e00a      	b.n	80028e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f99c 	bl	8002c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d4:	e006      	b.n	80028e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f998 	bl	8002c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028e2:	e180      	b.n	8002be6 <HAL_UART_IRQHandler+0x52a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e4:	bf00      	nop
    return;
 80028e6:	e17e      	b.n	8002be6 <HAL_UART_IRQHandler+0x52a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	f040 814a 	bne.w	8002b86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8143 	beq.w	8002b86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 813c 	beq.w	8002b86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	f040 80b4 	bne.w	8002a9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8150 	beq.w	8002bea <HAL_UART_IRQHandler+0x52e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800294e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002952:	429a      	cmp	r2, r3
 8002954:	f080 8149 	bcs.w	8002bea <HAL_UART_IRQHandler+0x52e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800295e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	f000 8088 	beq.w	8002a7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800297c:	e853 3f00 	ldrex	r3, [r3]
 8002980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800299a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800299e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029aa:	e841 2300 	strex	r3, r2, [r1]
 80029ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1d9      	bne.n	800296e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3314      	adds	r3, #20
 80029da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e1      	bne.n	80029ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3314      	adds	r3, #20
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e3      	bne.n	80029f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a60:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e3      	bne.n	8002a3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe faf7 	bl	800106c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f8d0 	bl	8002c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a94:	e0a9      	b.n	8002bea <HAL_UART_IRQHandler+0x52e>
 8002a96:	bf00      	nop
 8002a98:	08002d87 	.word	0x08002d87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 809b 	beq.w	8002bee <HAL_UART_IRQHandler+0x532>
          && (nb_rx_data > 0U))
 8002ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8096 	beq.w	8002bee <HAL_UART_IRQHandler+0x532>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ae6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ae8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aee:	e841 2300 	strex	r3, r2, [r1]
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1e3      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	623b      	str	r3, [r7, #32]
   return(result);
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e3      	bne.n	8002afa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0310 	bic.w	r3, r3, #16
 8002b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b64:	61fa      	str	r2, [r7, #28]
 8002b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	69b9      	ldr	r1, [r7, #24]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	e841 2300 	strex	r3, r2, [r1]
 8002b70:	617b      	str	r3, [r7, #20]
   return(result);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e3      	bne.n	8002b40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f858 	bl	8002c34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b84:	e033      	b.n	8002bee <HAL_UART_IRQHandler+0x532>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x4ea>
 8002b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f91d 	bl	8002dde <UART_Transmit_IT>
    return;
 8002ba4:	e024      	b.n	8002bf0 <HAL_UART_IRQHandler+0x534>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x50a>
 8002bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x50a>
  {
    UART_EndTransmit_IT(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f95d 	bl	8002e7e <UART_EndTransmit_IT>
    return;
 8002bc4:	e014      	b.n	8002bf0 <HAL_UART_IRQHandler+0x534>
  }
  /* UART IDLE interrupt end --------------------------------------------*/
    if (((isrflags & USART_SR_IDLE) != RESET) && ((cr1its & USART_CR1_IDLEIE) != RESET))
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x534>
 8002bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x534>
    {
    	HAL_UART_IDLE_Callback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd fe50 	bl	8000884 <HAL_UART_IDLE_Callback>
      return;
 8002be4:	e004      	b.n	8002bf0 <HAL_UART_IRQHandler+0x534>
    return;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <HAL_UART_IRQHandler+0x534>
      return;
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <HAL_UART_IRQHandler+0x534>
      return;
 8002bee:	bf00      	nop
    }
}
 8002bf0:	37e8      	adds	r7, #232	; 0xe8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop

08002bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2222      	movs	r2, #34	; 0x22
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c90:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0220 	orr.w	r2, r2, #32
 8002cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b095      	sub	sp, #84	; 0x54
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce8:	643a      	str	r2, [r7, #64]	; 0x40
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e5      	bne.n	8002cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3314      	adds	r3, #20
 8002d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d119      	bne.n	8002d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d58:	61ba      	str	r2, [r7, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	613b      	str	r3, [r7, #16]
   return(result);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d7a:	bf00      	nop
 8002d7c:	3754      	adds	r7, #84	; 0x54
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff ff33 	bl	8002c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff ff25 	bl	8002c20 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b21      	cmp	r3, #33	; 0x21
 8002df0:	d13e      	bne.n	8002e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfa:	d114      	bne.n	8002e26 <UART_Transmit_IT+0x48>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d110      	bne.n	8002e26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	621a      	str	r2, [r3, #32]
 8002e24:	e008      	b.n	8002e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	1c59      	adds	r1, r3, #1
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6211      	str	r1, [r2, #32]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4619      	mov	r1, r3
 8002e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10f      	bne.n	8002e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
  }
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff feaa 	bl	8002bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b08c      	sub	sp, #48	; 0x30
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b22      	cmp	r3, #34	; 0x22
 8002ec0:	f040 80ab 	bne.w	800301a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d117      	bne.n	8002efe <UART_Receive_IT+0x50>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d113      	bne.n	8002efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
 8002efc:	e026      	b.n	8002f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d007      	beq.n	8002f22 <UART_Receive_IT+0x74>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <UART_Receive_IT+0x82>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	e008      	b.n	8002f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d15a      	bne.n	8003016 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0220 	bic.w	r2, r2, #32
 8002f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d135      	bne.n	800300c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f023 0310 	bic.w	r3, r3, #16
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	623a      	str	r2, [r7, #32]
 8002fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	69f9      	ldr	r1, [r7, #28]
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d10a      	bne.n	8002ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fe15 	bl	8002c34 <HAL_UARTEx_RxEventCallback>
 800300a:	e002      	b.n	8003012 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fd fc9d 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e002      	b.n	800301c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3730      	adds	r7, #48	; 0x30
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	b09f      	sub	sp, #124	; 0x7c
 800302a:	af00      	add	r7, sp, #0
 800302c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	68d9      	ldr	r1, [r3, #12]
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	ea40 0301 	orr.w	r3, r0, r1
 8003044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	431a      	orrs	r2, r3
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4313      	orrs	r3, r2
 800305c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003068:	f021 010c 	bic.w	r1, r1, #12
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003072:	430b      	orrs	r3, r1
 8003074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	6999      	ldr	r1, [r3, #24]
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	ea40 0301 	orr.w	r3, r0, r1
 800308c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4bc5      	ldr	r3, [pc, #788]	; (80033a8 <UART_SetConfig+0x384>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d004      	beq.n	80030a2 <UART_SetConfig+0x7e>
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4bc3      	ldr	r3, [pc, #780]	; (80033ac <UART_SetConfig+0x388>)
 800309e:	429a      	cmp	r2, r3
 80030a0:	d103      	bne.n	80030aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a2:	f7fe fea3 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 80030a6:	6778      	str	r0, [r7, #116]	; 0x74
 80030a8:	e002      	b.n	80030b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030aa:	f7fe fe8b 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80030ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	f040 80b6 	bne.w	8003228 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030be:	461c      	mov	r4, r3
 80030c0:	f04f 0500 	mov.w	r5, #0
 80030c4:	4622      	mov	r2, r4
 80030c6:	462b      	mov	r3, r5
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	6439      	str	r1, [r7, #64]	; 0x40
 80030cc:	415b      	adcs	r3, r3
 80030ce:	647b      	str	r3, [r7, #68]	; 0x44
 80030d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030d4:	1912      	adds	r2, r2, r4
 80030d6:	eb45 0303 	adc.w	r3, r5, r3
 80030da:	f04f 0000 	mov.w	r0, #0
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	00d9      	lsls	r1, r3, #3
 80030e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e8:	00d0      	lsls	r0, r2, #3
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	1911      	adds	r1, r2, r4
 80030f0:	6639      	str	r1, [r7, #96]	; 0x60
 80030f2:	416b      	adcs	r3, r5
 80030f4:	667b      	str	r3, [r7, #100]	; 0x64
 80030f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	1891      	adds	r1, r2, r2
 8003102:	63b9      	str	r1, [r7, #56]	; 0x38
 8003104:	415b      	adcs	r3, r3
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800310c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003110:	f7fd f8ae 	bl	8000270 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4ba5      	ldr	r3, [pc, #660]	; (80033b0 <UART_SetConfig+0x38c>)
 800311a:	fba3 2302 	umull	r2, r3, r3, r2
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	011e      	lsls	r6, r3, #4
 8003122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003124:	461c      	mov	r4, r3
 8003126:	f04f 0500 	mov.w	r5, #0
 800312a:	4622      	mov	r2, r4
 800312c:	462b      	mov	r3, r5
 800312e:	1891      	adds	r1, r2, r2
 8003130:	6339      	str	r1, [r7, #48]	; 0x30
 8003132:	415b      	adcs	r3, r3
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
 8003136:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800313a:	1912      	adds	r2, r2, r4
 800313c:	eb45 0303 	adc.w	r3, r5, r3
 8003140:	f04f 0000 	mov.w	r0, #0
 8003144:	f04f 0100 	mov.w	r1, #0
 8003148:	00d9      	lsls	r1, r3, #3
 800314a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314e:	00d0      	lsls	r0, r2, #3
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	1911      	adds	r1, r2, r4
 8003156:	65b9      	str	r1, [r7, #88]	; 0x58
 8003158:	416b      	adcs	r3, r5
 800315a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	461a      	mov	r2, r3
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	1891      	adds	r1, r2, r2
 8003168:	62b9      	str	r1, [r7, #40]	; 0x28
 800316a:	415b      	adcs	r3, r3
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003172:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003176:	f7fd f87b 	bl	8000270 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4b8c      	ldr	r3, [pc, #560]	; (80033b0 <UART_SetConfig+0x38c>)
 8003180:	fba3 1302 	umull	r1, r3, r3, r2
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	2164      	movs	r1, #100	; 0x64
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	3332      	adds	r3, #50	; 0x32
 8003192:	4a87      	ldr	r2, [pc, #540]	; (80033b0 <UART_SetConfig+0x38c>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031a0:	441e      	add	r6, r3
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1894      	adds	r4, r2, r2
 80031b0:	623c      	str	r4, [r7, #32]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ba:	1812      	adds	r2, r2, r0
 80031bc:	eb41 0303 	adc.w	r3, r1, r3
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	00dd      	lsls	r5, r3, #3
 80031ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ce:	00d4      	lsls	r4, r2, #3
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	1814      	adds	r4, r2, r0
 80031d6:	653c      	str	r4, [r7, #80]	; 0x50
 80031d8:	414b      	adcs	r3, r1
 80031da:	657b      	str	r3, [r7, #84]	; 0x54
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	1891      	adds	r1, r2, r2
 80031e8:	61b9      	str	r1, [r7, #24]
 80031ea:	415b      	adcs	r3, r3
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031f6:	f7fd f83b 	bl	8000270 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <UART_SetConfig+0x38c>)
 8003200:	fba3 1302 	umull	r1, r3, r3, r2
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	2164      	movs	r1, #100	; 0x64
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	3332      	adds	r3, #50	; 0x32
 8003212:	4a67      	ldr	r2, [pc, #412]	; (80033b0 <UART_SetConfig+0x38c>)
 8003214:	fba2 2303 	umull	r2, r3, r2, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	f003 0207 	and.w	r2, r3, #7
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4432      	add	r2, r6
 8003224:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003226:	e0b9      	b.n	800339c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322a:	461c      	mov	r4, r3
 800322c:	f04f 0500 	mov.w	r5, #0
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	1891      	adds	r1, r2, r2
 8003236:	6139      	str	r1, [r7, #16]
 8003238:	415b      	adcs	r3, r3
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003240:	1912      	adds	r2, r2, r4
 8003242:	eb45 0303 	adc.w	r3, r5, r3
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	00d9      	lsls	r1, r3, #3
 8003250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003254:	00d0      	lsls	r0, r2, #3
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	eb12 0804 	adds.w	r8, r2, r4
 800325e:	eb43 0905 	adc.w	r9, r3, r5
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	008b      	lsls	r3, r1, #2
 8003276:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800327a:	0082      	lsls	r2, r0, #2
 800327c:	4640      	mov	r0, r8
 800327e:	4649      	mov	r1, r9
 8003280:	f7fc fff6 	bl	8000270 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <UART_SetConfig+0x38c>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	011e      	lsls	r6, r3, #4
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	4618      	mov	r0, r3
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	1894      	adds	r4, r2, r2
 80032a0:	60bc      	str	r4, [r7, #8]
 80032a2:	415b      	adcs	r3, r3
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032aa:	1812      	adds	r2, r2, r0
 80032ac:	eb41 0303 	adc.w	r3, r1, r3
 80032b0:	f04f 0400 	mov.w	r4, #0
 80032b4:	f04f 0500 	mov.w	r5, #0
 80032b8:	00dd      	lsls	r5, r3, #3
 80032ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032be:	00d4      	lsls	r4, r2, #3
 80032c0:	4622      	mov	r2, r4
 80032c2:	462b      	mov	r3, r5
 80032c4:	1814      	adds	r4, r2, r0
 80032c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80032c8:	414b      	adcs	r3, r1
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	008b      	lsls	r3, r1, #2
 80032e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032e4:	0082      	lsls	r2, r0, #2
 80032e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ea:	f7fc ffc1 	bl	8000270 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <UART_SetConfig+0x38c>)
 80032f4:	fba3 1302 	umull	r1, r3, r3, r2
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	2164      	movs	r1, #100	; 0x64
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	3332      	adds	r3, #50	; 0x32
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <UART_SetConfig+0x38c>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003312:	441e      	add	r6, r3
 8003314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003316:	4618      	mov	r0, r3
 8003318:	f04f 0100 	mov.w	r1, #0
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	1894      	adds	r4, r2, r2
 8003322:	603c      	str	r4, [r7, #0]
 8003324:	415b      	adcs	r3, r3
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332c:	1812      	adds	r2, r2, r0
 800332e:	eb41 0303 	adc.w	r3, r1, r3
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	f04f 0500 	mov.w	r5, #0
 800333a:	00dd      	lsls	r5, r3, #3
 800333c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003340:	00d4      	lsls	r4, r2, #3
 8003342:	4622      	mov	r2, r4
 8003344:	462b      	mov	r3, r5
 8003346:	eb12 0a00 	adds.w	sl, r2, r0
 800334a:	eb43 0b01 	adc.w	fp, r3, r1
 800334e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4618      	mov	r0, r3
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	008b      	lsls	r3, r1, #2
 8003362:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003366:	0082      	lsls	r2, r0, #2
 8003368:	4650      	mov	r0, sl
 800336a:	4659      	mov	r1, fp
 800336c:	f7fc ff80 	bl	8000270 <__aeabi_uldivmod>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <UART_SetConfig+0x38c>)
 8003376:	fba3 1302 	umull	r1, r3, r3, r2
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2164      	movs	r1, #100	; 0x64
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	3332      	adds	r3, #50	; 0x32
 8003388:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <UART_SetConfig+0x38c>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4432      	add	r2, r6
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	377c      	adds	r7, #124	; 0x7c
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a6:	bf00      	nop
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40011400 	.word	0x40011400
 80033b0:	51eb851f 	.word	0x51eb851f

080033b4 <__errno>:
 80033b4:	4b01      	ldr	r3, [pc, #4]	; (80033bc <__errno+0x8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4d0d      	ldr	r5, [pc, #52]	; (80033f8 <__libc_init_array+0x38>)
 80033c4:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <__libc_init_array+0x3c>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	2600      	movs	r6, #0
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	4d0b      	ldr	r5, [pc, #44]	; (8003400 <__libc_init_array+0x40>)
 80033d2:	4c0c      	ldr	r4, [pc, #48]	; (8003404 <__libc_init_array+0x44>)
 80033d4:	f000 ff76 	bl	80042c4 <_init>
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	2600      	movs	r6, #0
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	080043f0 	.word	0x080043f0
 80033fc:	080043f0 	.word	0x080043f0
 8003400:	080043f0 	.word	0x080043f0
 8003404:	080043f4 	.word	0x080043f4

08003408 <memset>:
 8003408:	4402      	add	r2, r0
 800340a:	4603      	mov	r3, r0
 800340c:	4293      	cmp	r3, r2
 800340e:	d100      	bne.n	8003412 <memset+0xa>
 8003410:	4770      	bx	lr
 8003412:	f803 1b01 	strb.w	r1, [r3], #1
 8003416:	e7f9      	b.n	800340c <memset+0x4>

08003418 <iprintf>:
 8003418:	b40f      	push	{r0, r1, r2, r3}
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <iprintf+0x2c>)
 800341c:	b513      	push	{r0, r1, r4, lr}
 800341e:	681c      	ldr	r4, [r3, #0]
 8003420:	b124      	cbz	r4, 800342c <iprintf+0x14>
 8003422:	69a3      	ldr	r3, [r4, #24]
 8003424:	b913      	cbnz	r3, 800342c <iprintf+0x14>
 8003426:	4620      	mov	r0, r4
 8003428:	f000 f866 	bl	80034f8 <__sinit>
 800342c:	ab05      	add	r3, sp, #20
 800342e:	9a04      	ldr	r2, [sp, #16]
 8003430:	68a1      	ldr	r1, [r4, #8]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	4620      	mov	r0, r4
 8003436:	f000 f983 	bl	8003740 <_vfiprintf_r>
 800343a:	b002      	add	sp, #8
 800343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003440:	b004      	add	sp, #16
 8003442:	4770      	bx	lr
 8003444:	2000000c 	.word	0x2000000c

08003448 <std>:
 8003448:	2300      	movs	r3, #0
 800344a:	b510      	push	{r4, lr}
 800344c:	4604      	mov	r4, r0
 800344e:	e9c0 3300 	strd	r3, r3, [r0]
 8003452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003456:	6083      	str	r3, [r0, #8]
 8003458:	8181      	strh	r1, [r0, #12]
 800345a:	6643      	str	r3, [r0, #100]	; 0x64
 800345c:	81c2      	strh	r2, [r0, #14]
 800345e:	6183      	str	r3, [r0, #24]
 8003460:	4619      	mov	r1, r3
 8003462:	2208      	movs	r2, #8
 8003464:	305c      	adds	r0, #92	; 0x5c
 8003466:	f7ff ffcf 	bl	8003408 <memset>
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <std+0x38>)
 800346c:	6263      	str	r3, [r4, #36]	; 0x24
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <std+0x3c>)
 8003470:	62a3      	str	r3, [r4, #40]	; 0x28
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <std+0x40>)
 8003474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <std+0x44>)
 8003478:	6224      	str	r4, [r4, #32]
 800347a:	6323      	str	r3, [r4, #48]	; 0x30
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	08003ce9 	.word	0x08003ce9
 8003484:	08003d0b 	.word	0x08003d0b
 8003488:	08003d43 	.word	0x08003d43
 800348c:	08003d67 	.word	0x08003d67

08003490 <_cleanup_r>:
 8003490:	4901      	ldr	r1, [pc, #4]	; (8003498 <_cleanup_r+0x8>)
 8003492:	f000 b8af 	b.w	80035f4 <_fwalk_reent>
 8003496:	bf00      	nop
 8003498:	08004041 	.word	0x08004041

0800349c <__sfmoreglue>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	1e4a      	subs	r2, r1, #1
 80034a0:	2568      	movs	r5, #104	; 0x68
 80034a2:	4355      	muls	r5, r2
 80034a4:	460e      	mov	r6, r1
 80034a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034aa:	f000 f8c5 	bl	8003638 <_malloc_r>
 80034ae:	4604      	mov	r4, r0
 80034b0:	b140      	cbz	r0, 80034c4 <__sfmoreglue+0x28>
 80034b2:	2100      	movs	r1, #0
 80034b4:	e9c0 1600 	strd	r1, r6, [r0]
 80034b8:	300c      	adds	r0, #12
 80034ba:	60a0      	str	r0, [r4, #8]
 80034bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034c0:	f7ff ffa2 	bl	8003408 <memset>
 80034c4:	4620      	mov	r0, r4
 80034c6:	bd70      	pop	{r4, r5, r6, pc}

080034c8 <__sfp_lock_acquire>:
 80034c8:	4801      	ldr	r0, [pc, #4]	; (80034d0 <__sfp_lock_acquire+0x8>)
 80034ca:	f000 b8b3 	b.w	8003634 <__retarget_lock_acquire_recursive>
 80034ce:	bf00      	nop
 80034d0:	20000178 	.word	0x20000178

080034d4 <__sfp_lock_release>:
 80034d4:	4801      	ldr	r0, [pc, #4]	; (80034dc <__sfp_lock_release+0x8>)
 80034d6:	f000 b8ae 	b.w	8003636 <__retarget_lock_release_recursive>
 80034da:	bf00      	nop
 80034dc:	20000178 	.word	0x20000178

080034e0 <__sinit_lock_acquire>:
 80034e0:	4801      	ldr	r0, [pc, #4]	; (80034e8 <__sinit_lock_acquire+0x8>)
 80034e2:	f000 b8a7 	b.w	8003634 <__retarget_lock_acquire_recursive>
 80034e6:	bf00      	nop
 80034e8:	20000173 	.word	0x20000173

080034ec <__sinit_lock_release>:
 80034ec:	4801      	ldr	r0, [pc, #4]	; (80034f4 <__sinit_lock_release+0x8>)
 80034ee:	f000 b8a2 	b.w	8003636 <__retarget_lock_release_recursive>
 80034f2:	bf00      	nop
 80034f4:	20000173 	.word	0x20000173

080034f8 <__sinit>:
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4604      	mov	r4, r0
 80034fc:	f7ff fff0 	bl	80034e0 <__sinit_lock_acquire>
 8003500:	69a3      	ldr	r3, [r4, #24]
 8003502:	b11b      	cbz	r3, 800350c <__sinit+0x14>
 8003504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003508:	f7ff bff0 	b.w	80034ec <__sinit_lock_release>
 800350c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003510:	6523      	str	r3, [r4, #80]	; 0x50
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <__sinit+0x68>)
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <__sinit+0x6c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	62a2      	str	r2, [r4, #40]	; 0x28
 800351a:	42a3      	cmp	r3, r4
 800351c:	bf04      	itt	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	61a3      	streq	r3, [r4, #24]
 8003522:	4620      	mov	r0, r4
 8003524:	f000 f820 	bl	8003568 <__sfp>
 8003528:	6060      	str	r0, [r4, #4]
 800352a:	4620      	mov	r0, r4
 800352c:	f000 f81c 	bl	8003568 <__sfp>
 8003530:	60a0      	str	r0, [r4, #8]
 8003532:	4620      	mov	r0, r4
 8003534:	f000 f818 	bl	8003568 <__sfp>
 8003538:	2200      	movs	r2, #0
 800353a:	60e0      	str	r0, [r4, #12]
 800353c:	2104      	movs	r1, #4
 800353e:	6860      	ldr	r0, [r4, #4]
 8003540:	f7ff ff82 	bl	8003448 <std>
 8003544:	68a0      	ldr	r0, [r4, #8]
 8003546:	2201      	movs	r2, #1
 8003548:	2109      	movs	r1, #9
 800354a:	f7ff ff7d 	bl	8003448 <std>
 800354e:	68e0      	ldr	r0, [r4, #12]
 8003550:	2202      	movs	r2, #2
 8003552:	2112      	movs	r1, #18
 8003554:	f7ff ff78 	bl	8003448 <std>
 8003558:	2301      	movs	r3, #1
 800355a:	61a3      	str	r3, [r4, #24]
 800355c:	e7d2      	b.n	8003504 <__sinit+0xc>
 800355e:	bf00      	nop
 8003560:	08004350 	.word	0x08004350
 8003564:	08003491 	.word	0x08003491

08003568 <__sfp>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	4607      	mov	r7, r0
 800356c:	f7ff ffac 	bl	80034c8 <__sfp_lock_acquire>
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <__sfp+0x84>)
 8003572:	681e      	ldr	r6, [r3, #0]
 8003574:	69b3      	ldr	r3, [r6, #24]
 8003576:	b913      	cbnz	r3, 800357e <__sfp+0x16>
 8003578:	4630      	mov	r0, r6
 800357a:	f7ff ffbd 	bl	80034f8 <__sinit>
 800357e:	3648      	adds	r6, #72	; 0x48
 8003580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003584:	3b01      	subs	r3, #1
 8003586:	d503      	bpl.n	8003590 <__sfp+0x28>
 8003588:	6833      	ldr	r3, [r6, #0]
 800358a:	b30b      	cbz	r3, 80035d0 <__sfp+0x68>
 800358c:	6836      	ldr	r6, [r6, #0]
 800358e:	e7f7      	b.n	8003580 <__sfp+0x18>
 8003590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003594:	b9d5      	cbnz	r5, 80035cc <__sfp+0x64>
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <__sfp+0x88>)
 8003598:	60e3      	str	r3, [r4, #12]
 800359a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800359e:	6665      	str	r5, [r4, #100]	; 0x64
 80035a0:	f000 f847 	bl	8003632 <__retarget_lock_init_recursive>
 80035a4:	f7ff ff96 	bl	80034d4 <__sfp_lock_release>
 80035a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035b0:	6025      	str	r5, [r4, #0]
 80035b2:	61a5      	str	r5, [r4, #24]
 80035b4:	2208      	movs	r2, #8
 80035b6:	4629      	mov	r1, r5
 80035b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035bc:	f7ff ff24 	bl	8003408 <memset>
 80035c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035c8:	4620      	mov	r0, r4
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035cc:	3468      	adds	r4, #104	; 0x68
 80035ce:	e7d9      	b.n	8003584 <__sfp+0x1c>
 80035d0:	2104      	movs	r1, #4
 80035d2:	4638      	mov	r0, r7
 80035d4:	f7ff ff62 	bl	800349c <__sfmoreglue>
 80035d8:	4604      	mov	r4, r0
 80035da:	6030      	str	r0, [r6, #0]
 80035dc:	2800      	cmp	r0, #0
 80035de:	d1d5      	bne.n	800358c <__sfp+0x24>
 80035e0:	f7ff ff78 	bl	80034d4 <__sfp_lock_release>
 80035e4:	230c      	movs	r3, #12
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	e7ee      	b.n	80035c8 <__sfp+0x60>
 80035ea:	bf00      	nop
 80035ec:	08004350 	.word	0x08004350
 80035f0:	ffff0001 	.word	0xffff0001

080035f4 <_fwalk_reent>:
 80035f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f8:	4606      	mov	r6, r0
 80035fa:	4688      	mov	r8, r1
 80035fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003600:	2700      	movs	r7, #0
 8003602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003606:	f1b9 0901 	subs.w	r9, r9, #1
 800360a:	d505      	bpl.n	8003618 <_fwalk_reent+0x24>
 800360c:	6824      	ldr	r4, [r4, #0]
 800360e:	2c00      	cmp	r4, #0
 8003610:	d1f7      	bne.n	8003602 <_fwalk_reent+0xe>
 8003612:	4638      	mov	r0, r7
 8003614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003618:	89ab      	ldrh	r3, [r5, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d907      	bls.n	800362e <_fwalk_reent+0x3a>
 800361e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003622:	3301      	adds	r3, #1
 8003624:	d003      	beq.n	800362e <_fwalk_reent+0x3a>
 8003626:	4629      	mov	r1, r5
 8003628:	4630      	mov	r0, r6
 800362a:	47c0      	blx	r8
 800362c:	4307      	orrs	r7, r0
 800362e:	3568      	adds	r5, #104	; 0x68
 8003630:	e7e9      	b.n	8003606 <_fwalk_reent+0x12>

08003632 <__retarget_lock_init_recursive>:
 8003632:	4770      	bx	lr

08003634 <__retarget_lock_acquire_recursive>:
 8003634:	4770      	bx	lr

08003636 <__retarget_lock_release_recursive>:
 8003636:	4770      	bx	lr

08003638 <_malloc_r>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	1ccd      	adds	r5, r1, #3
 800363c:	f025 0503 	bic.w	r5, r5, #3
 8003640:	3508      	adds	r5, #8
 8003642:	2d0c      	cmp	r5, #12
 8003644:	bf38      	it	cc
 8003646:	250c      	movcc	r5, #12
 8003648:	2d00      	cmp	r5, #0
 800364a:	4606      	mov	r6, r0
 800364c:	db01      	blt.n	8003652 <_malloc_r+0x1a>
 800364e:	42a9      	cmp	r1, r5
 8003650:	d903      	bls.n	800365a <_malloc_r+0x22>
 8003652:	230c      	movs	r3, #12
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	2000      	movs	r0, #0
 8003658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365a:	f000 fda3 	bl	80041a4 <__malloc_lock>
 800365e:	4921      	ldr	r1, [pc, #132]	; (80036e4 <_malloc_r+0xac>)
 8003660:	680a      	ldr	r2, [r1, #0]
 8003662:	4614      	mov	r4, r2
 8003664:	b99c      	cbnz	r4, 800368e <_malloc_r+0x56>
 8003666:	4f20      	ldr	r7, [pc, #128]	; (80036e8 <_malloc_r+0xb0>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	b923      	cbnz	r3, 8003676 <_malloc_r+0x3e>
 800366c:	4621      	mov	r1, r4
 800366e:	4630      	mov	r0, r6
 8003670:	f000 fb2a 	bl	8003cc8 <_sbrk_r>
 8003674:	6038      	str	r0, [r7, #0]
 8003676:	4629      	mov	r1, r5
 8003678:	4630      	mov	r0, r6
 800367a:	f000 fb25 	bl	8003cc8 <_sbrk_r>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d123      	bne.n	80036ca <_malloc_r+0x92>
 8003682:	230c      	movs	r3, #12
 8003684:	6033      	str	r3, [r6, #0]
 8003686:	4630      	mov	r0, r6
 8003688:	f000 fd92 	bl	80041b0 <__malloc_unlock>
 800368c:	e7e3      	b.n	8003656 <_malloc_r+0x1e>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	1b5b      	subs	r3, r3, r5
 8003692:	d417      	bmi.n	80036c4 <_malloc_r+0x8c>
 8003694:	2b0b      	cmp	r3, #11
 8003696:	d903      	bls.n	80036a0 <_malloc_r+0x68>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	441c      	add	r4, r3
 800369c:	6025      	str	r5, [r4, #0]
 800369e:	e004      	b.n	80036aa <_malloc_r+0x72>
 80036a0:	6863      	ldr	r3, [r4, #4]
 80036a2:	42a2      	cmp	r2, r4
 80036a4:	bf0c      	ite	eq
 80036a6:	600b      	streq	r3, [r1, #0]
 80036a8:	6053      	strne	r3, [r2, #4]
 80036aa:	4630      	mov	r0, r6
 80036ac:	f000 fd80 	bl	80041b0 <__malloc_unlock>
 80036b0:	f104 000b 	add.w	r0, r4, #11
 80036b4:	1d23      	adds	r3, r4, #4
 80036b6:	f020 0007 	bic.w	r0, r0, #7
 80036ba:	1ac2      	subs	r2, r0, r3
 80036bc:	d0cc      	beq.n	8003658 <_malloc_r+0x20>
 80036be:	1a1b      	subs	r3, r3, r0
 80036c0:	50a3      	str	r3, [r4, r2]
 80036c2:	e7c9      	b.n	8003658 <_malloc_r+0x20>
 80036c4:	4622      	mov	r2, r4
 80036c6:	6864      	ldr	r4, [r4, #4]
 80036c8:	e7cc      	b.n	8003664 <_malloc_r+0x2c>
 80036ca:	1cc4      	adds	r4, r0, #3
 80036cc:	f024 0403 	bic.w	r4, r4, #3
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	d0e3      	beq.n	800369c <_malloc_r+0x64>
 80036d4:	1a21      	subs	r1, r4, r0
 80036d6:	4630      	mov	r0, r6
 80036d8:	f000 faf6 	bl	8003cc8 <_sbrk_r>
 80036dc:	3001      	adds	r0, #1
 80036de:	d1dd      	bne.n	800369c <_malloc_r+0x64>
 80036e0:	e7cf      	b.n	8003682 <_malloc_r+0x4a>
 80036e2:	bf00      	nop
 80036e4:	200000d4 	.word	0x200000d4
 80036e8:	200000d8 	.word	0x200000d8

080036ec <__sfputc_r>:
 80036ec:	6893      	ldr	r3, [r2, #8]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	b410      	push	{r4}
 80036f4:	6093      	str	r3, [r2, #8]
 80036f6:	da08      	bge.n	800370a <__sfputc_r+0x1e>
 80036f8:	6994      	ldr	r4, [r2, #24]
 80036fa:	42a3      	cmp	r3, r4
 80036fc:	db01      	blt.n	8003702 <__sfputc_r+0x16>
 80036fe:	290a      	cmp	r1, #10
 8003700:	d103      	bne.n	800370a <__sfputc_r+0x1e>
 8003702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003706:	f000 bb33 	b.w	8003d70 <__swbuf_r>
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	1c58      	adds	r0, r3, #1
 800370e:	6010      	str	r0, [r2, #0]
 8003710:	7019      	strb	r1, [r3, #0]
 8003712:	4608      	mov	r0, r1
 8003714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003718:	4770      	bx	lr

0800371a <__sfputs_r>:
 800371a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371c:	4606      	mov	r6, r0
 800371e:	460f      	mov	r7, r1
 8003720:	4614      	mov	r4, r2
 8003722:	18d5      	adds	r5, r2, r3
 8003724:	42ac      	cmp	r4, r5
 8003726:	d101      	bne.n	800372c <__sfputs_r+0x12>
 8003728:	2000      	movs	r0, #0
 800372a:	e007      	b.n	800373c <__sfputs_r+0x22>
 800372c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003730:	463a      	mov	r2, r7
 8003732:	4630      	mov	r0, r6
 8003734:	f7ff ffda 	bl	80036ec <__sfputc_r>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d1f3      	bne.n	8003724 <__sfputs_r+0xa>
 800373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003740 <_vfiprintf_r>:
 8003740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003744:	460d      	mov	r5, r1
 8003746:	b09d      	sub	sp, #116	; 0x74
 8003748:	4614      	mov	r4, r2
 800374a:	4698      	mov	r8, r3
 800374c:	4606      	mov	r6, r0
 800374e:	b118      	cbz	r0, 8003758 <_vfiprintf_r+0x18>
 8003750:	6983      	ldr	r3, [r0, #24]
 8003752:	b90b      	cbnz	r3, 8003758 <_vfiprintf_r+0x18>
 8003754:	f7ff fed0 	bl	80034f8 <__sinit>
 8003758:	4b89      	ldr	r3, [pc, #548]	; (8003980 <_vfiprintf_r+0x240>)
 800375a:	429d      	cmp	r5, r3
 800375c:	d11b      	bne.n	8003796 <_vfiprintf_r+0x56>
 800375e:	6875      	ldr	r5, [r6, #4]
 8003760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003762:	07d9      	lsls	r1, r3, #31
 8003764:	d405      	bmi.n	8003772 <_vfiprintf_r+0x32>
 8003766:	89ab      	ldrh	r3, [r5, #12]
 8003768:	059a      	lsls	r2, r3, #22
 800376a:	d402      	bmi.n	8003772 <_vfiprintf_r+0x32>
 800376c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800376e:	f7ff ff61 	bl	8003634 <__retarget_lock_acquire_recursive>
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	071b      	lsls	r3, r3, #28
 8003776:	d501      	bpl.n	800377c <_vfiprintf_r+0x3c>
 8003778:	692b      	ldr	r3, [r5, #16]
 800377a:	b9eb      	cbnz	r3, 80037b8 <_vfiprintf_r+0x78>
 800377c:	4629      	mov	r1, r5
 800377e:	4630      	mov	r0, r6
 8003780:	f000 fb5a 	bl	8003e38 <__swsetup_r>
 8003784:	b1c0      	cbz	r0, 80037b8 <_vfiprintf_r+0x78>
 8003786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003788:	07dc      	lsls	r4, r3, #31
 800378a:	d50e      	bpl.n	80037aa <_vfiprintf_r+0x6a>
 800378c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003790:	b01d      	add	sp, #116	; 0x74
 8003792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003796:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <_vfiprintf_r+0x244>)
 8003798:	429d      	cmp	r5, r3
 800379a:	d101      	bne.n	80037a0 <_vfiprintf_r+0x60>
 800379c:	68b5      	ldr	r5, [r6, #8]
 800379e:	e7df      	b.n	8003760 <_vfiprintf_r+0x20>
 80037a0:	4b79      	ldr	r3, [pc, #484]	; (8003988 <_vfiprintf_r+0x248>)
 80037a2:	429d      	cmp	r5, r3
 80037a4:	bf08      	it	eq
 80037a6:	68f5      	ldreq	r5, [r6, #12]
 80037a8:	e7da      	b.n	8003760 <_vfiprintf_r+0x20>
 80037aa:	89ab      	ldrh	r3, [r5, #12]
 80037ac:	0598      	lsls	r0, r3, #22
 80037ae:	d4ed      	bmi.n	800378c <_vfiprintf_r+0x4c>
 80037b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037b2:	f7ff ff40 	bl	8003636 <__retarget_lock_release_recursive>
 80037b6:	e7e9      	b.n	800378c <_vfiprintf_r+0x4c>
 80037b8:	2300      	movs	r3, #0
 80037ba:	9309      	str	r3, [sp, #36]	; 0x24
 80037bc:	2320      	movs	r3, #32
 80037be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80037c6:	2330      	movs	r3, #48	; 0x30
 80037c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800398c <_vfiprintf_r+0x24c>
 80037cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037d0:	f04f 0901 	mov.w	r9, #1
 80037d4:	4623      	mov	r3, r4
 80037d6:	469a      	mov	sl, r3
 80037d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037dc:	b10a      	cbz	r2, 80037e2 <_vfiprintf_r+0xa2>
 80037de:	2a25      	cmp	r2, #37	; 0x25
 80037e0:	d1f9      	bne.n	80037d6 <_vfiprintf_r+0x96>
 80037e2:	ebba 0b04 	subs.w	fp, sl, r4
 80037e6:	d00b      	beq.n	8003800 <_vfiprintf_r+0xc0>
 80037e8:	465b      	mov	r3, fp
 80037ea:	4622      	mov	r2, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	4630      	mov	r0, r6
 80037f0:	f7ff ff93 	bl	800371a <__sfputs_r>
 80037f4:	3001      	adds	r0, #1
 80037f6:	f000 80aa 	beq.w	800394e <_vfiprintf_r+0x20e>
 80037fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037fc:	445a      	add	r2, fp
 80037fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003800:	f89a 3000 	ldrb.w	r3, [sl]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a2 	beq.w	800394e <_vfiprintf_r+0x20e>
 800380a:	2300      	movs	r3, #0
 800380c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003814:	f10a 0a01 	add.w	sl, sl, #1
 8003818:	9304      	str	r3, [sp, #16]
 800381a:	9307      	str	r3, [sp, #28]
 800381c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003820:	931a      	str	r3, [sp, #104]	; 0x68
 8003822:	4654      	mov	r4, sl
 8003824:	2205      	movs	r2, #5
 8003826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800382a:	4858      	ldr	r0, [pc, #352]	; (800398c <_vfiprintf_r+0x24c>)
 800382c:	f7fc fcd0 	bl	80001d0 <memchr>
 8003830:	9a04      	ldr	r2, [sp, #16]
 8003832:	b9d8      	cbnz	r0, 800386c <_vfiprintf_r+0x12c>
 8003834:	06d1      	lsls	r1, r2, #27
 8003836:	bf44      	itt	mi
 8003838:	2320      	movmi	r3, #32
 800383a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800383e:	0713      	lsls	r3, r2, #28
 8003840:	bf44      	itt	mi
 8003842:	232b      	movmi	r3, #43	; 0x2b
 8003844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003848:	f89a 3000 	ldrb.w	r3, [sl]
 800384c:	2b2a      	cmp	r3, #42	; 0x2a
 800384e:	d015      	beq.n	800387c <_vfiprintf_r+0x13c>
 8003850:	9a07      	ldr	r2, [sp, #28]
 8003852:	4654      	mov	r4, sl
 8003854:	2000      	movs	r0, #0
 8003856:	f04f 0c0a 	mov.w	ip, #10
 800385a:	4621      	mov	r1, r4
 800385c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003860:	3b30      	subs	r3, #48	; 0x30
 8003862:	2b09      	cmp	r3, #9
 8003864:	d94e      	bls.n	8003904 <_vfiprintf_r+0x1c4>
 8003866:	b1b0      	cbz	r0, 8003896 <_vfiprintf_r+0x156>
 8003868:	9207      	str	r2, [sp, #28]
 800386a:	e014      	b.n	8003896 <_vfiprintf_r+0x156>
 800386c:	eba0 0308 	sub.w	r3, r0, r8
 8003870:	fa09 f303 	lsl.w	r3, r9, r3
 8003874:	4313      	orrs	r3, r2
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	46a2      	mov	sl, r4
 800387a:	e7d2      	b.n	8003822 <_vfiprintf_r+0xe2>
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	1d19      	adds	r1, r3, #4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	9103      	str	r1, [sp, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	bfbb      	ittet	lt
 8003888:	425b      	neglt	r3, r3
 800388a:	f042 0202 	orrlt.w	r2, r2, #2
 800388e:	9307      	strge	r3, [sp, #28]
 8003890:	9307      	strlt	r3, [sp, #28]
 8003892:	bfb8      	it	lt
 8003894:	9204      	strlt	r2, [sp, #16]
 8003896:	7823      	ldrb	r3, [r4, #0]
 8003898:	2b2e      	cmp	r3, #46	; 0x2e
 800389a:	d10c      	bne.n	80038b6 <_vfiprintf_r+0x176>
 800389c:	7863      	ldrb	r3, [r4, #1]
 800389e:	2b2a      	cmp	r3, #42	; 0x2a
 80038a0:	d135      	bne.n	800390e <_vfiprintf_r+0x1ce>
 80038a2:	9b03      	ldr	r3, [sp, #12]
 80038a4:	1d1a      	adds	r2, r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	9203      	str	r2, [sp, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bfb8      	it	lt
 80038ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80038b2:	3402      	adds	r4, #2
 80038b4:	9305      	str	r3, [sp, #20]
 80038b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800399c <_vfiprintf_r+0x25c>
 80038ba:	7821      	ldrb	r1, [r4, #0]
 80038bc:	2203      	movs	r2, #3
 80038be:	4650      	mov	r0, sl
 80038c0:	f7fc fc86 	bl	80001d0 <memchr>
 80038c4:	b140      	cbz	r0, 80038d8 <_vfiprintf_r+0x198>
 80038c6:	2340      	movs	r3, #64	; 0x40
 80038c8:	eba0 000a 	sub.w	r0, r0, sl
 80038cc:	fa03 f000 	lsl.w	r0, r3, r0
 80038d0:	9b04      	ldr	r3, [sp, #16]
 80038d2:	4303      	orrs	r3, r0
 80038d4:	3401      	adds	r4, #1
 80038d6:	9304      	str	r3, [sp, #16]
 80038d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038dc:	482c      	ldr	r0, [pc, #176]	; (8003990 <_vfiprintf_r+0x250>)
 80038de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038e2:	2206      	movs	r2, #6
 80038e4:	f7fc fc74 	bl	80001d0 <memchr>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d03f      	beq.n	800396c <_vfiprintf_r+0x22c>
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <_vfiprintf_r+0x254>)
 80038ee:	bb1b      	cbnz	r3, 8003938 <_vfiprintf_r+0x1f8>
 80038f0:	9b03      	ldr	r3, [sp, #12]
 80038f2:	3307      	adds	r3, #7
 80038f4:	f023 0307 	bic.w	r3, r3, #7
 80038f8:	3308      	adds	r3, #8
 80038fa:	9303      	str	r3, [sp, #12]
 80038fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fe:	443b      	add	r3, r7
 8003900:	9309      	str	r3, [sp, #36]	; 0x24
 8003902:	e767      	b.n	80037d4 <_vfiprintf_r+0x94>
 8003904:	fb0c 3202 	mla	r2, ip, r2, r3
 8003908:	460c      	mov	r4, r1
 800390a:	2001      	movs	r0, #1
 800390c:	e7a5      	b.n	800385a <_vfiprintf_r+0x11a>
 800390e:	2300      	movs	r3, #0
 8003910:	3401      	adds	r4, #1
 8003912:	9305      	str	r3, [sp, #20]
 8003914:	4619      	mov	r1, r3
 8003916:	f04f 0c0a 	mov.w	ip, #10
 800391a:	4620      	mov	r0, r4
 800391c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003920:	3a30      	subs	r2, #48	; 0x30
 8003922:	2a09      	cmp	r2, #9
 8003924:	d903      	bls.n	800392e <_vfiprintf_r+0x1ee>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0c5      	beq.n	80038b6 <_vfiprintf_r+0x176>
 800392a:	9105      	str	r1, [sp, #20]
 800392c:	e7c3      	b.n	80038b6 <_vfiprintf_r+0x176>
 800392e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003932:	4604      	mov	r4, r0
 8003934:	2301      	movs	r3, #1
 8003936:	e7f0      	b.n	800391a <_vfiprintf_r+0x1da>
 8003938:	ab03      	add	r3, sp, #12
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	462a      	mov	r2, r5
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <_vfiprintf_r+0x258>)
 8003940:	a904      	add	r1, sp, #16
 8003942:	4630      	mov	r0, r6
 8003944:	f3af 8000 	nop.w
 8003948:	4607      	mov	r7, r0
 800394a:	1c78      	adds	r0, r7, #1
 800394c:	d1d6      	bne.n	80038fc <_vfiprintf_r+0x1bc>
 800394e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003950:	07d9      	lsls	r1, r3, #31
 8003952:	d405      	bmi.n	8003960 <_vfiprintf_r+0x220>
 8003954:	89ab      	ldrh	r3, [r5, #12]
 8003956:	059a      	lsls	r2, r3, #22
 8003958:	d402      	bmi.n	8003960 <_vfiprintf_r+0x220>
 800395a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395c:	f7ff fe6b 	bl	8003636 <__retarget_lock_release_recursive>
 8003960:	89ab      	ldrh	r3, [r5, #12]
 8003962:	065b      	lsls	r3, r3, #25
 8003964:	f53f af12 	bmi.w	800378c <_vfiprintf_r+0x4c>
 8003968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800396a:	e711      	b.n	8003790 <_vfiprintf_r+0x50>
 800396c:	ab03      	add	r3, sp, #12
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	462a      	mov	r2, r5
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <_vfiprintf_r+0x258>)
 8003974:	a904      	add	r1, sp, #16
 8003976:	4630      	mov	r0, r6
 8003978:	f000 f880 	bl	8003a7c <_printf_i>
 800397c:	e7e4      	b.n	8003948 <_vfiprintf_r+0x208>
 800397e:	bf00      	nop
 8003980:	08004374 	.word	0x08004374
 8003984:	08004394 	.word	0x08004394
 8003988:	08004354 	.word	0x08004354
 800398c:	080043b4 	.word	0x080043b4
 8003990:	080043be 	.word	0x080043be
 8003994:	00000000 	.word	0x00000000
 8003998:	0800371b 	.word	0x0800371b
 800399c:	080043ba 	.word	0x080043ba

080039a0 <_printf_common>:
 80039a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	4616      	mov	r6, r2
 80039a6:	4699      	mov	r9, r3
 80039a8:	688a      	ldr	r2, [r1, #8]
 80039aa:	690b      	ldr	r3, [r1, #16]
 80039ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	bfb8      	it	lt
 80039b4:	4613      	movlt	r3, r2
 80039b6:	6033      	str	r3, [r6, #0]
 80039b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039bc:	4607      	mov	r7, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	b10a      	cbz	r2, 80039c6 <_printf_common+0x26>
 80039c2:	3301      	adds	r3, #1
 80039c4:	6033      	str	r3, [r6, #0]
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	0699      	lsls	r1, r3, #26
 80039ca:	bf42      	ittt	mi
 80039cc:	6833      	ldrmi	r3, [r6, #0]
 80039ce:	3302      	addmi	r3, #2
 80039d0:	6033      	strmi	r3, [r6, #0]
 80039d2:	6825      	ldr	r5, [r4, #0]
 80039d4:	f015 0506 	ands.w	r5, r5, #6
 80039d8:	d106      	bne.n	80039e8 <_printf_common+0x48>
 80039da:	f104 0a19 	add.w	sl, r4, #25
 80039de:	68e3      	ldr	r3, [r4, #12]
 80039e0:	6832      	ldr	r2, [r6, #0]
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	42ab      	cmp	r3, r5
 80039e6:	dc26      	bgt.n	8003a36 <_printf_common+0x96>
 80039e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039ec:	1e13      	subs	r3, r2, #0
 80039ee:	6822      	ldr	r2, [r4, #0]
 80039f0:	bf18      	it	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	0692      	lsls	r2, r2, #26
 80039f6:	d42b      	bmi.n	8003a50 <_printf_common+0xb0>
 80039f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039fc:	4649      	mov	r1, r9
 80039fe:	4638      	mov	r0, r7
 8003a00:	47c0      	blx	r8
 8003a02:	3001      	adds	r0, #1
 8003a04:	d01e      	beq.n	8003a44 <_printf_common+0xa4>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	68e5      	ldr	r5, [r4, #12]
 8003a0a:	6832      	ldr	r2, [r6, #0]
 8003a0c:	f003 0306 	and.w	r3, r3, #6
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	bf08      	it	eq
 8003a14:	1aad      	subeq	r5, r5, r2
 8003a16:	68a3      	ldr	r3, [r4, #8]
 8003a18:	6922      	ldr	r2, [r4, #16]
 8003a1a:	bf0c      	ite	eq
 8003a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a20:	2500      	movne	r5, #0
 8003a22:	4293      	cmp	r3, r2
 8003a24:	bfc4      	itt	gt
 8003a26:	1a9b      	subgt	r3, r3, r2
 8003a28:	18ed      	addgt	r5, r5, r3
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	341a      	adds	r4, #26
 8003a2e:	42b5      	cmp	r5, r6
 8003a30:	d11a      	bne.n	8003a68 <_printf_common+0xc8>
 8003a32:	2000      	movs	r0, #0
 8003a34:	e008      	b.n	8003a48 <_printf_common+0xa8>
 8003a36:	2301      	movs	r3, #1
 8003a38:	4652      	mov	r2, sl
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	47c0      	blx	r8
 8003a40:	3001      	adds	r0, #1
 8003a42:	d103      	bne.n	8003a4c <_printf_common+0xac>
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	e7c6      	b.n	80039de <_printf_common+0x3e>
 8003a50:	18e1      	adds	r1, r4, r3
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	2030      	movs	r0, #48	; 0x30
 8003a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a5a:	4422      	add	r2, r4
 8003a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a64:	3302      	adds	r3, #2
 8003a66:	e7c7      	b.n	80039f8 <_printf_common+0x58>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	4638      	mov	r0, r7
 8003a70:	47c0      	blx	r8
 8003a72:	3001      	adds	r0, #1
 8003a74:	d0e6      	beq.n	8003a44 <_printf_common+0xa4>
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7d9      	b.n	8003a2e <_printf_common+0x8e>
	...

08003a7c <_printf_i>:
 8003a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	460c      	mov	r4, r1
 8003a82:	4691      	mov	r9, r2
 8003a84:	7e27      	ldrb	r7, [r4, #24]
 8003a86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a88:	2f78      	cmp	r7, #120	; 0x78
 8003a8a:	4680      	mov	r8, r0
 8003a8c:	469a      	mov	sl, r3
 8003a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a92:	d807      	bhi.n	8003aa4 <_printf_i+0x28>
 8003a94:	2f62      	cmp	r7, #98	; 0x62
 8003a96:	d80a      	bhi.n	8003aae <_printf_i+0x32>
 8003a98:	2f00      	cmp	r7, #0
 8003a9a:	f000 80d8 	beq.w	8003c4e <_printf_i+0x1d2>
 8003a9e:	2f58      	cmp	r7, #88	; 0x58
 8003aa0:	f000 80a3 	beq.w	8003bea <_printf_i+0x16e>
 8003aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003aac:	e03a      	b.n	8003b24 <_printf_i+0xa8>
 8003aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ab2:	2b15      	cmp	r3, #21
 8003ab4:	d8f6      	bhi.n	8003aa4 <_printf_i+0x28>
 8003ab6:	a001      	add	r0, pc, #4	; (adr r0, 8003abc <_printf_i+0x40>)
 8003ab8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003abc:	08003b15 	.word	0x08003b15
 8003ac0:	08003b29 	.word	0x08003b29
 8003ac4:	08003aa5 	.word	0x08003aa5
 8003ac8:	08003aa5 	.word	0x08003aa5
 8003acc:	08003aa5 	.word	0x08003aa5
 8003ad0:	08003aa5 	.word	0x08003aa5
 8003ad4:	08003b29 	.word	0x08003b29
 8003ad8:	08003aa5 	.word	0x08003aa5
 8003adc:	08003aa5 	.word	0x08003aa5
 8003ae0:	08003aa5 	.word	0x08003aa5
 8003ae4:	08003aa5 	.word	0x08003aa5
 8003ae8:	08003c35 	.word	0x08003c35
 8003aec:	08003b59 	.word	0x08003b59
 8003af0:	08003c17 	.word	0x08003c17
 8003af4:	08003aa5 	.word	0x08003aa5
 8003af8:	08003aa5 	.word	0x08003aa5
 8003afc:	08003c57 	.word	0x08003c57
 8003b00:	08003aa5 	.word	0x08003aa5
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003aa5 	.word	0x08003aa5
 8003b0c:	08003aa5 	.word	0x08003aa5
 8003b10:	08003c1f 	.word	0x08003c1f
 8003b14:	680b      	ldr	r3, [r1, #0]
 8003b16:	1d1a      	adds	r2, r3, #4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	600a      	str	r2, [r1, #0]
 8003b1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0a3      	b.n	8003c70 <_printf_i+0x1f4>
 8003b28:	6825      	ldr	r5, [r4, #0]
 8003b2a:	6808      	ldr	r0, [r1, #0]
 8003b2c:	062e      	lsls	r6, r5, #24
 8003b2e:	f100 0304 	add.w	r3, r0, #4
 8003b32:	d50a      	bpl.n	8003b4a <_printf_i+0xce>
 8003b34:	6805      	ldr	r5, [r0, #0]
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	da03      	bge.n	8003b44 <_printf_i+0xc8>
 8003b3c:	232d      	movs	r3, #45	; 0x2d
 8003b3e:	426d      	negs	r5, r5
 8003b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b44:	485e      	ldr	r0, [pc, #376]	; (8003cc0 <_printf_i+0x244>)
 8003b46:	230a      	movs	r3, #10
 8003b48:	e019      	b.n	8003b7e <_printf_i+0x102>
 8003b4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b4e:	6805      	ldr	r5, [r0, #0]
 8003b50:	600b      	str	r3, [r1, #0]
 8003b52:	bf18      	it	ne
 8003b54:	b22d      	sxthne	r5, r5
 8003b56:	e7ef      	b.n	8003b38 <_printf_i+0xbc>
 8003b58:	680b      	ldr	r3, [r1, #0]
 8003b5a:	6825      	ldr	r5, [r4, #0]
 8003b5c:	1d18      	adds	r0, r3, #4
 8003b5e:	6008      	str	r0, [r1, #0]
 8003b60:	0628      	lsls	r0, r5, #24
 8003b62:	d501      	bpl.n	8003b68 <_printf_i+0xec>
 8003b64:	681d      	ldr	r5, [r3, #0]
 8003b66:	e002      	b.n	8003b6e <_printf_i+0xf2>
 8003b68:	0669      	lsls	r1, r5, #25
 8003b6a:	d5fb      	bpl.n	8003b64 <_printf_i+0xe8>
 8003b6c:	881d      	ldrh	r5, [r3, #0]
 8003b6e:	4854      	ldr	r0, [pc, #336]	; (8003cc0 <_printf_i+0x244>)
 8003b70:	2f6f      	cmp	r7, #111	; 0x6f
 8003b72:	bf0c      	ite	eq
 8003b74:	2308      	moveq	r3, #8
 8003b76:	230a      	movne	r3, #10
 8003b78:	2100      	movs	r1, #0
 8003b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b7e:	6866      	ldr	r6, [r4, #4]
 8003b80:	60a6      	str	r6, [r4, #8]
 8003b82:	2e00      	cmp	r6, #0
 8003b84:	bfa2      	ittt	ge
 8003b86:	6821      	ldrge	r1, [r4, #0]
 8003b88:	f021 0104 	bicge.w	r1, r1, #4
 8003b8c:	6021      	strge	r1, [r4, #0]
 8003b8e:	b90d      	cbnz	r5, 8003b94 <_printf_i+0x118>
 8003b90:	2e00      	cmp	r6, #0
 8003b92:	d04d      	beq.n	8003c30 <_printf_i+0x1b4>
 8003b94:	4616      	mov	r6, r2
 8003b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003b9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ba4:	462f      	mov	r7, r5
 8003ba6:	42bb      	cmp	r3, r7
 8003ba8:	460d      	mov	r5, r1
 8003baa:	d9f4      	bls.n	8003b96 <_printf_i+0x11a>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d10b      	bne.n	8003bc8 <_printf_i+0x14c>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	07df      	lsls	r7, r3, #31
 8003bb4:	d508      	bpl.n	8003bc8 <_printf_i+0x14c>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	6861      	ldr	r1, [r4, #4]
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	bfde      	ittt	le
 8003bbe:	2330      	movle	r3, #48	; 0x30
 8003bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bc4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003bc8:	1b92      	subs	r2, r2, r6
 8003bca:	6122      	str	r2, [r4, #16]
 8003bcc:	f8cd a000 	str.w	sl, [sp]
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	aa03      	add	r2, sp, #12
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f7ff fee2 	bl	80039a0 <_printf_common>
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d14c      	bne.n	8003c7a <_printf_i+0x1fe>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be4:	b004      	add	sp, #16
 8003be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bea:	4835      	ldr	r0, [pc, #212]	; (8003cc0 <_printf_i+0x244>)
 8003bec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	680e      	ldr	r6, [r1, #0]
 8003bf4:	061f      	lsls	r7, r3, #24
 8003bf6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bfa:	600e      	str	r6, [r1, #0]
 8003bfc:	d514      	bpl.n	8003c28 <_printf_i+0x1ac>
 8003bfe:	07d9      	lsls	r1, r3, #31
 8003c00:	bf44      	itt	mi
 8003c02:	f043 0320 	orrmi.w	r3, r3, #32
 8003c06:	6023      	strmi	r3, [r4, #0]
 8003c08:	b91d      	cbnz	r5, 8003c12 <_printf_i+0x196>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	f023 0320 	bic.w	r3, r3, #32
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	2310      	movs	r3, #16
 8003c14:	e7b0      	b.n	8003b78 <_printf_i+0xfc>
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	2378      	movs	r3, #120	; 0x78
 8003c20:	4828      	ldr	r0, [pc, #160]	; (8003cc4 <_printf_i+0x248>)
 8003c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c26:	e7e3      	b.n	8003bf0 <_printf_i+0x174>
 8003c28:	065e      	lsls	r6, r3, #25
 8003c2a:	bf48      	it	mi
 8003c2c:	b2ad      	uxthmi	r5, r5
 8003c2e:	e7e6      	b.n	8003bfe <_printf_i+0x182>
 8003c30:	4616      	mov	r6, r2
 8003c32:	e7bb      	b.n	8003bac <_printf_i+0x130>
 8003c34:	680b      	ldr	r3, [r1, #0]
 8003c36:	6826      	ldr	r6, [r4, #0]
 8003c38:	6960      	ldr	r0, [r4, #20]
 8003c3a:	1d1d      	adds	r5, r3, #4
 8003c3c:	600d      	str	r5, [r1, #0]
 8003c3e:	0635      	lsls	r5, r6, #24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	d501      	bpl.n	8003c48 <_printf_i+0x1cc>
 8003c44:	6018      	str	r0, [r3, #0]
 8003c46:	e002      	b.n	8003c4e <_printf_i+0x1d2>
 8003c48:	0671      	lsls	r1, r6, #25
 8003c4a:	d5fb      	bpl.n	8003c44 <_printf_i+0x1c8>
 8003c4c:	8018      	strh	r0, [r3, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	4616      	mov	r6, r2
 8003c54:	e7ba      	b.n	8003bcc <_printf_i+0x150>
 8003c56:	680b      	ldr	r3, [r1, #0]
 8003c58:	1d1a      	adds	r2, r3, #4
 8003c5a:	600a      	str	r2, [r1, #0]
 8003c5c:	681e      	ldr	r6, [r3, #0]
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	2100      	movs	r1, #0
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7fc fab4 	bl	80001d0 <memchr>
 8003c68:	b108      	cbz	r0, 8003c6e <_printf_i+0x1f2>
 8003c6a:	1b80      	subs	r0, r0, r6
 8003c6c:	6060      	str	r0, [r4, #4]
 8003c6e:	6863      	ldr	r3, [r4, #4]
 8003c70:	6123      	str	r3, [r4, #16]
 8003c72:	2300      	movs	r3, #0
 8003c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c78:	e7a8      	b.n	8003bcc <_printf_i+0x150>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4649      	mov	r1, r9
 8003c80:	4640      	mov	r0, r8
 8003c82:	47d0      	blx	sl
 8003c84:	3001      	adds	r0, #1
 8003c86:	d0ab      	beq.n	8003be0 <_printf_i+0x164>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	079b      	lsls	r3, r3, #30
 8003c8c:	d413      	bmi.n	8003cb6 <_printf_i+0x23a>
 8003c8e:	68e0      	ldr	r0, [r4, #12]
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	4298      	cmp	r0, r3
 8003c94:	bfb8      	it	lt
 8003c96:	4618      	movlt	r0, r3
 8003c98:	e7a4      	b.n	8003be4 <_printf_i+0x168>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4640      	mov	r0, r8
 8003ca2:	47d0      	blx	sl
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d09b      	beq.n	8003be0 <_printf_i+0x164>
 8003ca8:	3501      	adds	r5, #1
 8003caa:	68e3      	ldr	r3, [r4, #12]
 8003cac:	9903      	ldr	r1, [sp, #12]
 8003cae:	1a5b      	subs	r3, r3, r1
 8003cb0:	42ab      	cmp	r3, r5
 8003cb2:	dcf2      	bgt.n	8003c9a <_printf_i+0x21e>
 8003cb4:	e7eb      	b.n	8003c8e <_printf_i+0x212>
 8003cb6:	2500      	movs	r5, #0
 8003cb8:	f104 0619 	add.w	r6, r4, #25
 8003cbc:	e7f5      	b.n	8003caa <_printf_i+0x22e>
 8003cbe:	bf00      	nop
 8003cc0:	080043c5 	.word	0x080043c5
 8003cc4:	080043d6 	.word	0x080043d6

08003cc8 <_sbrk_r>:
 8003cc8:	b538      	push	{r3, r4, r5, lr}
 8003cca:	4d06      	ldr	r5, [pc, #24]	; (8003ce4 <_sbrk_r+0x1c>)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	f7fd f810 	bl	8000cf8 <_sbrk>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d102      	bne.n	8003ce2 <_sbrk_r+0x1a>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	b103      	cbz	r3, 8003ce2 <_sbrk_r+0x1a>
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	2000017c 	.word	0x2000017c

08003ce8 <__sread>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	460c      	mov	r4, r1
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	f000 fab4 	bl	800425c <_read_r>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	bfab      	itete	ge
 8003cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8003cfc:	181b      	addge	r3, r3, r0
 8003cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d02:	bfac      	ite	ge
 8003d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d06:	81a3      	strhlt	r3, [r4, #12]
 8003d08:	bd10      	pop	{r4, pc}

08003d0a <__swrite>:
 8003d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0e:	461f      	mov	r7, r3
 8003d10:	898b      	ldrh	r3, [r1, #12]
 8003d12:	05db      	lsls	r3, r3, #23
 8003d14:	4605      	mov	r5, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	4616      	mov	r6, r2
 8003d1a:	d505      	bpl.n	8003d28 <__swrite+0x1e>
 8003d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d20:	2302      	movs	r3, #2
 8003d22:	2200      	movs	r2, #0
 8003d24:	f000 f9c8 	bl	80040b8 <_lseek_r>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	4632      	mov	r2, r6
 8003d36:	463b      	mov	r3, r7
 8003d38:	4628      	mov	r0, r5
 8003d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3e:	f000 b869 	b.w	8003e14 <_write_r>

08003d42 <__sseek>:
 8003d42:	b510      	push	{r4, lr}
 8003d44:	460c      	mov	r4, r1
 8003d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4a:	f000 f9b5 	bl	80040b8 <_lseek_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	bf15      	itete	ne
 8003d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d5e:	81a3      	strheq	r3, [r4, #12]
 8003d60:	bf18      	it	ne
 8003d62:	81a3      	strhne	r3, [r4, #12]
 8003d64:	bd10      	pop	{r4, pc}

08003d66 <__sclose>:
 8003d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6a:	f000 b8d3 	b.w	8003f14 <_close_r>
	...

08003d70 <__swbuf_r>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	460e      	mov	r6, r1
 8003d74:	4614      	mov	r4, r2
 8003d76:	4605      	mov	r5, r0
 8003d78:	b118      	cbz	r0, 8003d82 <__swbuf_r+0x12>
 8003d7a:	6983      	ldr	r3, [r0, #24]
 8003d7c:	b90b      	cbnz	r3, 8003d82 <__swbuf_r+0x12>
 8003d7e:	f7ff fbbb 	bl	80034f8 <__sinit>
 8003d82:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <__swbuf_r+0x98>)
 8003d84:	429c      	cmp	r4, r3
 8003d86:	d12b      	bne.n	8003de0 <__swbuf_r+0x70>
 8003d88:	686c      	ldr	r4, [r5, #4]
 8003d8a:	69a3      	ldr	r3, [r4, #24]
 8003d8c:	60a3      	str	r3, [r4, #8]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	071a      	lsls	r2, r3, #28
 8003d92:	d52f      	bpl.n	8003df4 <__swbuf_r+0x84>
 8003d94:	6923      	ldr	r3, [r4, #16]
 8003d96:	b36b      	cbz	r3, 8003df4 <__swbuf_r+0x84>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	6820      	ldr	r0, [r4, #0]
 8003d9c:	1ac0      	subs	r0, r0, r3
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	b2f6      	uxtb	r6, r6
 8003da2:	4283      	cmp	r3, r0
 8003da4:	4637      	mov	r7, r6
 8003da6:	dc04      	bgt.n	8003db2 <__swbuf_r+0x42>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f000 f948 	bl	8004040 <_fflush_r>
 8003db0:	bb30      	cbnz	r0, 8003e00 <__swbuf_r+0x90>
 8003db2:	68a3      	ldr	r3, [r4, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60a3      	str	r3, [r4, #8]
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	701e      	strb	r6, [r3, #0]
 8003dc0:	6963      	ldr	r3, [r4, #20]
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	4283      	cmp	r3, r0
 8003dc6:	d004      	beq.n	8003dd2 <__swbuf_r+0x62>
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	07db      	lsls	r3, r3, #31
 8003dcc:	d506      	bpl.n	8003ddc <__swbuf_r+0x6c>
 8003dce:	2e0a      	cmp	r6, #10
 8003dd0:	d104      	bne.n	8003ddc <__swbuf_r+0x6c>
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 f933 	bl	8004040 <_fflush_r>
 8003dda:	b988      	cbnz	r0, 8003e00 <__swbuf_r+0x90>
 8003ddc:	4638      	mov	r0, r7
 8003dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <__swbuf_r+0x9c>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d101      	bne.n	8003dea <__swbuf_r+0x7a>
 8003de6:	68ac      	ldr	r4, [r5, #8]
 8003de8:	e7cf      	b.n	8003d8a <__swbuf_r+0x1a>
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <__swbuf_r+0xa0>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	bf08      	it	eq
 8003df0:	68ec      	ldreq	r4, [r5, #12]
 8003df2:	e7ca      	b.n	8003d8a <__swbuf_r+0x1a>
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f81e 	bl	8003e38 <__swsetup_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d0cb      	beq.n	8003d98 <__swbuf_r+0x28>
 8003e00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e04:	e7ea      	b.n	8003ddc <__swbuf_r+0x6c>
 8003e06:	bf00      	nop
 8003e08:	08004374 	.word	0x08004374
 8003e0c:	08004394 	.word	0x08004394
 8003e10:	08004354 	.word	0x08004354

08003e14 <_write_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4d07      	ldr	r5, [pc, #28]	; (8003e34 <_write_r+0x20>)
 8003e18:	4604      	mov	r4, r0
 8003e1a:	4608      	mov	r0, r1
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	602a      	str	r2, [r5, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7fc ff17 	bl	8000c56 <_write>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_write_r+0x1e>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_write_r+0x1e>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	2000017c 	.word	0x2000017c

08003e38 <__swsetup_r>:
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <__swsetup_r+0xcc>)
 8003e3a:	b570      	push	{r4, r5, r6, lr}
 8003e3c:	681d      	ldr	r5, [r3, #0]
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	b125      	cbz	r5, 8003e4e <__swsetup_r+0x16>
 8003e44:	69ab      	ldr	r3, [r5, #24]
 8003e46:	b913      	cbnz	r3, 8003e4e <__swsetup_r+0x16>
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f7ff fb55 	bl	80034f8 <__sinit>
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <__swsetup_r+0xd0>)
 8003e50:	429c      	cmp	r4, r3
 8003e52:	d10f      	bne.n	8003e74 <__swsetup_r+0x3c>
 8003e54:	686c      	ldr	r4, [r5, #4]
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e5c:	0719      	lsls	r1, r3, #28
 8003e5e:	d42c      	bmi.n	8003eba <__swsetup_r+0x82>
 8003e60:	06dd      	lsls	r5, r3, #27
 8003e62:	d411      	bmi.n	8003e88 <__swsetup_r+0x50>
 8003e64:	2309      	movs	r3, #9
 8003e66:	6033      	str	r3, [r6, #0]
 8003e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e72:	e03e      	b.n	8003ef2 <__swsetup_r+0xba>
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <__swsetup_r+0xd4>)
 8003e76:	429c      	cmp	r4, r3
 8003e78:	d101      	bne.n	8003e7e <__swsetup_r+0x46>
 8003e7a:	68ac      	ldr	r4, [r5, #8]
 8003e7c:	e7eb      	b.n	8003e56 <__swsetup_r+0x1e>
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <__swsetup_r+0xd8>)
 8003e80:	429c      	cmp	r4, r3
 8003e82:	bf08      	it	eq
 8003e84:	68ec      	ldreq	r4, [r5, #12]
 8003e86:	e7e6      	b.n	8003e56 <__swsetup_r+0x1e>
 8003e88:	0758      	lsls	r0, r3, #29
 8003e8a:	d512      	bpl.n	8003eb2 <__swsetup_r+0x7a>
 8003e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e8e:	b141      	cbz	r1, 8003ea2 <__swsetup_r+0x6a>
 8003e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e94:	4299      	cmp	r1, r3
 8003e96:	d002      	beq.n	8003e9e <__swsetup_r+0x66>
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f000 f98f 	bl	80041bc <_free_r>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8003ea2:	89a3      	ldrh	r3, [r4, #12]
 8003ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ea8:	81a3      	strh	r3, [r4, #12]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	6063      	str	r3, [r4, #4]
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f043 0308 	orr.w	r3, r3, #8
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	b94b      	cbnz	r3, 8003ed2 <__swsetup_r+0x9a>
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d003      	beq.n	8003ed2 <__swsetup_r+0x9a>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f000 f929 	bl	8004124 <__smakebuf_r>
 8003ed2:	89a0      	ldrh	r0, [r4, #12]
 8003ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ed8:	f010 0301 	ands.w	r3, r0, #1
 8003edc:	d00a      	beq.n	8003ef4 <__swsetup_r+0xbc>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60a3      	str	r3, [r4, #8]
 8003ee2:	6963      	ldr	r3, [r4, #20]
 8003ee4:	425b      	negs	r3, r3
 8003ee6:	61a3      	str	r3, [r4, #24]
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	b943      	cbnz	r3, 8003efe <__swsetup_r+0xc6>
 8003eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ef0:	d1ba      	bne.n	8003e68 <__swsetup_r+0x30>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	0781      	lsls	r1, r0, #30
 8003ef6:	bf58      	it	pl
 8003ef8:	6963      	ldrpl	r3, [r4, #20]
 8003efa:	60a3      	str	r3, [r4, #8]
 8003efc:	e7f4      	b.n	8003ee8 <__swsetup_r+0xb0>
 8003efe:	2000      	movs	r0, #0
 8003f00:	e7f7      	b.n	8003ef2 <__swsetup_r+0xba>
 8003f02:	bf00      	nop
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	08004374 	.word	0x08004374
 8003f0c:	08004394 	.word	0x08004394
 8003f10:	08004354 	.word	0x08004354

08003f14 <_close_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d06      	ldr	r5, [pc, #24]	; (8003f30 <_close_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc feb5 	bl	8000c8e <_close>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_close_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_close_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	2000017c 	.word	0x2000017c

08003f34 <__sflush_r>:
 8003f34:	898a      	ldrh	r2, [r1, #12]
 8003f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	0710      	lsls	r0, r2, #28
 8003f3e:	460c      	mov	r4, r1
 8003f40:	d458      	bmi.n	8003ff4 <__sflush_r+0xc0>
 8003f42:	684b      	ldr	r3, [r1, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	dc05      	bgt.n	8003f54 <__sflush_r+0x20>
 8003f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	dc02      	bgt.n	8003f54 <__sflush_r+0x20>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f56:	2e00      	cmp	r6, #0
 8003f58:	d0f9      	beq.n	8003f4e <__sflush_r+0x1a>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f60:	682f      	ldr	r7, [r5, #0]
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	d032      	beq.n	8003fcc <__sflush_r+0x98>
 8003f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	075a      	lsls	r2, r3, #29
 8003f6c:	d505      	bpl.n	8003f7a <__sflush_r+0x46>
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	1ac0      	subs	r0, r0, r3
 8003f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f74:	b10b      	cbz	r3, 8003f7a <__sflush_r+0x46>
 8003f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f78:	1ac0      	subs	r0, r0, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	4628      	mov	r0, r5
 8003f84:	47b0      	blx	r6
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	d106      	bne.n	8003f9a <__sflush_r+0x66>
 8003f8c:	6829      	ldr	r1, [r5, #0]
 8003f8e:	291d      	cmp	r1, #29
 8003f90:	d82c      	bhi.n	8003fec <__sflush_r+0xb8>
 8003f92:	4a2a      	ldr	r2, [pc, #168]	; (800403c <__sflush_r+0x108>)
 8003f94:	40ca      	lsrs	r2, r1
 8003f96:	07d6      	lsls	r6, r2, #31
 8003f98:	d528      	bpl.n	8003fec <__sflush_r+0xb8>
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	6062      	str	r2, [r4, #4]
 8003f9e:	04d9      	lsls	r1, r3, #19
 8003fa0:	6922      	ldr	r2, [r4, #16]
 8003fa2:	6022      	str	r2, [r4, #0]
 8003fa4:	d504      	bpl.n	8003fb0 <__sflush_r+0x7c>
 8003fa6:	1c42      	adds	r2, r0, #1
 8003fa8:	d101      	bne.n	8003fae <__sflush_r+0x7a>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	b903      	cbnz	r3, 8003fb0 <__sflush_r+0x7c>
 8003fae:	6560      	str	r0, [r4, #84]	; 0x54
 8003fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fb2:	602f      	str	r7, [r5, #0]
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d0ca      	beq.n	8003f4e <__sflush_r+0x1a>
 8003fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	d002      	beq.n	8003fc6 <__sflush_r+0x92>
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f000 f8fb 	bl	80041bc <_free_r>
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8003fca:	e7c1      	b.n	8003f50 <__sflush_r+0x1c>
 8003fcc:	6a21      	ldr	r1, [r4, #32]
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b0      	blx	r6
 8003fd4:	1c41      	adds	r1, r0, #1
 8003fd6:	d1c7      	bne.n	8003f68 <__sflush_r+0x34>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0c4      	beq.n	8003f68 <__sflush_r+0x34>
 8003fde:	2b1d      	cmp	r3, #29
 8003fe0:	d001      	beq.n	8003fe6 <__sflush_r+0xb2>
 8003fe2:	2b16      	cmp	r3, #22
 8003fe4:	d101      	bne.n	8003fea <__sflush_r+0xb6>
 8003fe6:	602f      	str	r7, [r5, #0]
 8003fe8:	e7b1      	b.n	8003f4e <__sflush_r+0x1a>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	e7ad      	b.n	8003f50 <__sflush_r+0x1c>
 8003ff4:	690f      	ldr	r7, [r1, #16]
 8003ff6:	2f00      	cmp	r7, #0
 8003ff8:	d0a9      	beq.n	8003f4e <__sflush_r+0x1a>
 8003ffa:	0793      	lsls	r3, r2, #30
 8003ffc:	680e      	ldr	r6, [r1, #0]
 8003ffe:	bf08      	it	eq
 8004000:	694b      	ldreq	r3, [r1, #20]
 8004002:	600f      	str	r7, [r1, #0]
 8004004:	bf18      	it	ne
 8004006:	2300      	movne	r3, #0
 8004008:	eba6 0807 	sub.w	r8, r6, r7
 800400c:	608b      	str	r3, [r1, #8]
 800400e:	f1b8 0f00 	cmp.w	r8, #0
 8004012:	dd9c      	ble.n	8003f4e <__sflush_r+0x1a>
 8004014:	6a21      	ldr	r1, [r4, #32]
 8004016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004018:	4643      	mov	r3, r8
 800401a:	463a      	mov	r2, r7
 800401c:	4628      	mov	r0, r5
 800401e:	47b0      	blx	r6
 8004020:	2800      	cmp	r0, #0
 8004022:	dc06      	bgt.n	8004032 <__sflush_r+0xfe>
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	81a3      	strh	r3, [r4, #12]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004030:	e78e      	b.n	8003f50 <__sflush_r+0x1c>
 8004032:	4407      	add	r7, r0
 8004034:	eba8 0800 	sub.w	r8, r8, r0
 8004038:	e7e9      	b.n	800400e <__sflush_r+0xda>
 800403a:	bf00      	nop
 800403c:	20400001 	.word	0x20400001

08004040 <_fflush_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	690b      	ldr	r3, [r1, #16]
 8004044:	4605      	mov	r5, r0
 8004046:	460c      	mov	r4, r1
 8004048:	b913      	cbnz	r3, 8004050 <_fflush_r+0x10>
 800404a:	2500      	movs	r5, #0
 800404c:	4628      	mov	r0, r5
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	b118      	cbz	r0, 800405a <_fflush_r+0x1a>
 8004052:	6983      	ldr	r3, [r0, #24]
 8004054:	b90b      	cbnz	r3, 800405a <_fflush_r+0x1a>
 8004056:	f7ff fa4f 	bl	80034f8 <__sinit>
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <_fflush_r+0x6c>)
 800405c:	429c      	cmp	r4, r3
 800405e:	d11b      	bne.n	8004098 <_fflush_r+0x58>
 8004060:	686c      	ldr	r4, [r5, #4]
 8004062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ef      	beq.n	800404a <_fflush_r+0xa>
 800406a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800406c:	07d0      	lsls	r0, r2, #31
 800406e:	d404      	bmi.n	800407a <_fflush_r+0x3a>
 8004070:	0599      	lsls	r1, r3, #22
 8004072:	d402      	bmi.n	800407a <_fflush_r+0x3a>
 8004074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004076:	f7ff fadd 	bl	8003634 <__retarget_lock_acquire_recursive>
 800407a:	4628      	mov	r0, r5
 800407c:	4621      	mov	r1, r4
 800407e:	f7ff ff59 	bl	8003f34 <__sflush_r>
 8004082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004084:	07da      	lsls	r2, r3, #31
 8004086:	4605      	mov	r5, r0
 8004088:	d4e0      	bmi.n	800404c <_fflush_r+0xc>
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	059b      	lsls	r3, r3, #22
 800408e:	d4dd      	bmi.n	800404c <_fflush_r+0xc>
 8004090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004092:	f7ff fad0 	bl	8003636 <__retarget_lock_release_recursive>
 8004096:	e7d9      	b.n	800404c <_fflush_r+0xc>
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <_fflush_r+0x70>)
 800409a:	429c      	cmp	r4, r3
 800409c:	d101      	bne.n	80040a2 <_fflush_r+0x62>
 800409e:	68ac      	ldr	r4, [r5, #8]
 80040a0:	e7df      	b.n	8004062 <_fflush_r+0x22>
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <_fflush_r+0x74>)
 80040a4:	429c      	cmp	r4, r3
 80040a6:	bf08      	it	eq
 80040a8:	68ec      	ldreq	r4, [r5, #12]
 80040aa:	e7da      	b.n	8004062 <_fflush_r+0x22>
 80040ac:	08004374 	.word	0x08004374
 80040b0:	08004394 	.word	0x08004394
 80040b4:	08004354 	.word	0x08004354

080040b8 <_lseek_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d07      	ldr	r5, [pc, #28]	; (80040d8 <_lseek_r+0x20>)
 80040bc:	4604      	mov	r4, r0
 80040be:	4608      	mov	r0, r1
 80040c0:	4611      	mov	r1, r2
 80040c2:	2200      	movs	r2, #0
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7fc fe08 	bl	8000cdc <_lseek>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_lseek_r+0x1e>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_lseek_r+0x1e>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	2000017c 	.word	0x2000017c

080040dc <__swhatbuf_r>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	460e      	mov	r6, r1
 80040e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e4:	2900      	cmp	r1, #0
 80040e6:	b096      	sub	sp, #88	; 0x58
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	da07      	bge.n	80040fe <__swhatbuf_r+0x22>
 80040ee:	2300      	movs	r3, #0
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	89b3      	ldrh	r3, [r6, #12]
 80040f4:	061a      	lsls	r2, r3, #24
 80040f6:	d410      	bmi.n	800411a <__swhatbuf_r+0x3e>
 80040f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040fc:	e00e      	b.n	800411c <__swhatbuf_r+0x40>
 80040fe:	466a      	mov	r2, sp
 8004100:	f000 f8be 	bl	8004280 <_fstat_r>
 8004104:	2800      	cmp	r0, #0
 8004106:	dbf2      	blt.n	80040ee <__swhatbuf_r+0x12>
 8004108:	9a01      	ldr	r2, [sp, #4]
 800410a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800410e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004112:	425a      	negs	r2, r3
 8004114:	415a      	adcs	r2, r3
 8004116:	602a      	str	r2, [r5, #0]
 8004118:	e7ee      	b.n	80040f8 <__swhatbuf_r+0x1c>
 800411a:	2340      	movs	r3, #64	; 0x40
 800411c:	2000      	movs	r0, #0
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	b016      	add	sp, #88	; 0x58
 8004122:	bd70      	pop	{r4, r5, r6, pc}

08004124 <__smakebuf_r>:
 8004124:	898b      	ldrh	r3, [r1, #12]
 8004126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004128:	079d      	lsls	r5, r3, #30
 800412a:	4606      	mov	r6, r0
 800412c:	460c      	mov	r4, r1
 800412e:	d507      	bpl.n	8004140 <__smakebuf_r+0x1c>
 8004130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	6123      	str	r3, [r4, #16]
 8004138:	2301      	movs	r3, #1
 800413a:	6163      	str	r3, [r4, #20]
 800413c:	b002      	add	sp, #8
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	ab01      	add	r3, sp, #4
 8004142:	466a      	mov	r2, sp
 8004144:	f7ff ffca 	bl	80040dc <__swhatbuf_r>
 8004148:	9900      	ldr	r1, [sp, #0]
 800414a:	4605      	mov	r5, r0
 800414c:	4630      	mov	r0, r6
 800414e:	f7ff fa73 	bl	8003638 <_malloc_r>
 8004152:	b948      	cbnz	r0, 8004168 <__smakebuf_r+0x44>
 8004154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004158:	059a      	lsls	r2, r3, #22
 800415a:	d4ef      	bmi.n	800413c <__smakebuf_r+0x18>
 800415c:	f023 0303 	bic.w	r3, r3, #3
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	81a3      	strh	r3, [r4, #12]
 8004166:	e7e3      	b.n	8004130 <__smakebuf_r+0xc>
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <__smakebuf_r+0x7c>)
 800416a:	62b3      	str	r3, [r6, #40]	; 0x28
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	6020      	str	r0, [r4, #0]
 8004170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004174:	81a3      	strh	r3, [r4, #12]
 8004176:	9b00      	ldr	r3, [sp, #0]
 8004178:	6163      	str	r3, [r4, #20]
 800417a:	9b01      	ldr	r3, [sp, #4]
 800417c:	6120      	str	r0, [r4, #16]
 800417e:	b15b      	cbz	r3, 8004198 <__smakebuf_r+0x74>
 8004180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f88d 	bl	80042a4 <_isatty_r>
 800418a:	b128      	cbz	r0, 8004198 <__smakebuf_r+0x74>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	89a0      	ldrh	r0, [r4, #12]
 800419a:	4305      	orrs	r5, r0
 800419c:	81a5      	strh	r5, [r4, #12]
 800419e:	e7cd      	b.n	800413c <__smakebuf_r+0x18>
 80041a0:	08003491 	.word	0x08003491

080041a4 <__malloc_lock>:
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <__malloc_lock+0x8>)
 80041a6:	f7ff ba45 	b.w	8003634 <__retarget_lock_acquire_recursive>
 80041aa:	bf00      	nop
 80041ac:	20000174 	.word	0x20000174

080041b0 <__malloc_unlock>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__malloc_unlock+0x8>)
 80041b2:	f7ff ba40 	b.w	8003636 <__retarget_lock_release_recursive>
 80041b6:	bf00      	nop
 80041b8:	20000174 	.word	0x20000174

080041bc <_free_r>:
 80041bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041be:	2900      	cmp	r1, #0
 80041c0:	d048      	beq.n	8004254 <_free_r+0x98>
 80041c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c6:	9001      	str	r0, [sp, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f1a1 0404 	sub.w	r4, r1, #4
 80041ce:	bfb8      	it	lt
 80041d0:	18e4      	addlt	r4, r4, r3
 80041d2:	f7ff ffe7 	bl	80041a4 <__malloc_lock>
 80041d6:	4a20      	ldr	r2, [pc, #128]	; (8004258 <_free_r+0x9c>)
 80041d8:	9801      	ldr	r0, [sp, #4]
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	4615      	mov	r5, r2
 80041de:	b933      	cbnz	r3, 80041ee <_free_r+0x32>
 80041e0:	6063      	str	r3, [r4, #4]
 80041e2:	6014      	str	r4, [r2, #0]
 80041e4:	b003      	add	sp, #12
 80041e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041ea:	f7ff bfe1 	b.w	80041b0 <__malloc_unlock>
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	d90b      	bls.n	800420a <_free_r+0x4e>
 80041f2:	6821      	ldr	r1, [r4, #0]
 80041f4:	1862      	adds	r2, r4, r1
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bf04      	itt	eq
 80041fa:	681a      	ldreq	r2, [r3, #0]
 80041fc:	685b      	ldreq	r3, [r3, #4]
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	bf04      	itt	eq
 8004202:	1852      	addeq	r2, r2, r1
 8004204:	6022      	streq	r2, [r4, #0]
 8004206:	602c      	str	r4, [r5, #0]
 8004208:	e7ec      	b.n	80041e4 <_free_r+0x28>
 800420a:	461a      	mov	r2, r3
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b10b      	cbz	r3, 8004214 <_free_r+0x58>
 8004210:	42a3      	cmp	r3, r4
 8004212:	d9fa      	bls.n	800420a <_free_r+0x4e>
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	1855      	adds	r5, r2, r1
 8004218:	42a5      	cmp	r5, r4
 800421a:	d10b      	bne.n	8004234 <_free_r+0x78>
 800421c:	6824      	ldr	r4, [r4, #0]
 800421e:	4421      	add	r1, r4
 8004220:	1854      	adds	r4, r2, r1
 8004222:	42a3      	cmp	r3, r4
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	d1dd      	bne.n	80041e4 <_free_r+0x28>
 8004228:	681c      	ldr	r4, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6053      	str	r3, [r2, #4]
 800422e:	4421      	add	r1, r4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	e7d7      	b.n	80041e4 <_free_r+0x28>
 8004234:	d902      	bls.n	800423c <_free_r+0x80>
 8004236:	230c      	movs	r3, #12
 8004238:	6003      	str	r3, [r0, #0]
 800423a:	e7d3      	b.n	80041e4 <_free_r+0x28>
 800423c:	6825      	ldr	r5, [r4, #0]
 800423e:	1961      	adds	r1, r4, r5
 8004240:	428b      	cmp	r3, r1
 8004242:	bf04      	itt	eq
 8004244:	6819      	ldreq	r1, [r3, #0]
 8004246:	685b      	ldreq	r3, [r3, #4]
 8004248:	6063      	str	r3, [r4, #4]
 800424a:	bf04      	itt	eq
 800424c:	1949      	addeq	r1, r1, r5
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6054      	str	r4, [r2, #4]
 8004252:	e7c7      	b.n	80041e4 <_free_r+0x28>
 8004254:	b003      	add	sp, #12
 8004256:	bd30      	pop	{r4, r5, pc}
 8004258:	200000d4 	.word	0x200000d4

0800425c <_read_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4d07      	ldr	r5, [pc, #28]	; (800427c <_read_r+0x20>)
 8004260:	4604      	mov	r4, r0
 8004262:	4608      	mov	r0, r1
 8004264:	4611      	mov	r1, r2
 8004266:	2200      	movs	r2, #0
 8004268:	602a      	str	r2, [r5, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	f7fc fcd6 	bl	8000c1c <_read>
 8004270:	1c43      	adds	r3, r0, #1
 8004272:	d102      	bne.n	800427a <_read_r+0x1e>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	b103      	cbz	r3, 800427a <_read_r+0x1e>
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	2000017c 	.word	0x2000017c

08004280 <_fstat_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	4d07      	ldr	r5, [pc, #28]	; (80042a0 <_fstat_r+0x20>)
 8004284:	2300      	movs	r3, #0
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	f7fc fd0a 	bl	8000ca6 <_fstat>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	d102      	bne.n	800429c <_fstat_r+0x1c>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	b103      	cbz	r3, 800429c <_fstat_r+0x1c>
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	bd38      	pop	{r3, r4, r5, pc}
 800429e:	bf00      	nop
 80042a0:	2000017c 	.word	0x2000017c

080042a4 <_isatty_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4d06      	ldr	r5, [pc, #24]	; (80042c0 <_isatty_r+0x1c>)
 80042a8:	2300      	movs	r3, #0
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	f7fc fd09 	bl	8000cc6 <_isatty>
 80042b4:	1c43      	adds	r3, r0, #1
 80042b6:	d102      	bne.n	80042be <_isatty_r+0x1a>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	b103      	cbz	r3, 80042be <_isatty_r+0x1a>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	2000017c 	.word	0x2000017c

080042c4 <_init>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr

080042d0 <_fini>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr
