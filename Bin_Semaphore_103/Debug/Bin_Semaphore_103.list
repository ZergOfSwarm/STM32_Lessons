
Bin_Semaphore_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b24  08005b24  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b24  08005b24  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b24  08005b24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000074  08005ba0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000114c  08005ba0  0002114c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012eb2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f84  00000000  00000000  00032f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00035ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  000370c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2ae  00000000  00000000  00038180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001231d  00000000  00000000  0005242e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000944cf  00000000  00000000  0006474b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005244  00000000  00000000  000f8c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005958 	.word	0x08005958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005958 	.word	0x08005958

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000190:	f003 0301 	and.w	r3, r3, #1
 8000194:	2b00      	cmp	r3, #0
 8000196:	d013      	beq.n	80001c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000198:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800019c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d00b      	beq.n	80001c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001a8:	e000      	b.n	80001ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80001aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d0f9      	beq.n	80001aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	b2d2      	uxtb	r2, r2
 80001be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80001c0:	687b      	ldr	r3, [r7, #4]
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	370c      	adds	r7, #12
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <_write>:
void StartDefaultTask(void const *argument);
void Start_ON_Task(void const *argument);
void Start_OFF_Task(void const *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2332      	movs	r3, #50	; 0x32
 80001de:	68b9      	ldr	r1, [r7, #8]
 80001e0:	480c      	ldr	r0, [pc, #48]	; (8000214 <_write+0x48>)
 80001e2:	f001 fd96 	bl	8001d12 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
 80001ea:	e009      	b.n	8000200 <_write+0x34>
		ITM_SendChar(*ptr++);
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	1c5a      	adds	r2, r3, #1
 80001f0:	60ba      	str	r2, [r7, #8]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f7ff ffc3 	bl	8000180 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	3301      	adds	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	697a      	ldr	r2, [r7, #20]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	429a      	cmp	r2, r3
 8000206:	dbf1      	blt.n	80001ec <_write+0x20>
	}
	return len;
 8000208:	687b      	ldr	r3, [r7, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000034c 	.word	0x2000034c

08000218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b098      	sub	sp, #96	; 0x60
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021e:	f000 fbe9 	bl	80009f4 <HAL_Init>

	/* USER CODE BEGIN Init */
	T = HAL_GetTick();
 8000222:	f000 fc0f 	bl	8000a44 <HAL_GetTick>
 8000226:	4603      	mov	r3, r0
 8000228:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <main+0xbc>)
 800022a:	6013      	str	r3, [r2, #0]
	flag = 1;
 800022c:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <main+0xc0>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000232:	f000 f863 	bl	80002fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000236:	f000 f8d1 	bl	80003dc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800023a:	f000 f8a5 	bl	8000388 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("Hello world! \r\n");
 800023e:	4827      	ldr	r0, [pc, #156]	; (80002dc <main+0xc4>)
 8000240:	f004 fd28 	bl	8004c94 <puts>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of myBinarySem */
	osSemaphoreDef(myBinarySem);
 8000244:	2300      	movs	r3, #0
 8000246:	65bb      	str	r3, [r7, #88]	; 0x58
 8000248:	2300      	movs	r3, #0
 800024a:	65fb      	str	r3, [r7, #92]	; 0x5c
	myBinarySemHandle = osSemaphoreCreate(osSemaphore(myBinarySem), 1);
 800024c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000250:	2101      	movs	r1, #1
 8000252:	4618      	mov	r0, r3
 8000254:	f001 ff57 	bl	8002106 <osSemaphoreCreate>
 8000258:	4603      	mov	r3, r0
 800025a:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <main+0xc8>)
 800025c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 800025e:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <main+0xcc>)
 8000260:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000264:	461d      	mov	r5, r3
 8000266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800026e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000272:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f001 fee4 	bl	8002046 <osThreadCreate>
 800027e:	4603      	mov	r3, r0
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <main+0xd0>)
 8000282:	6013      	str	r3, [r2, #0]

	/* definition and creation of my_ON_Task */
	osThreadDef(my_ON_Task, Start_ON_Task, osPriorityNormal, 0, 128);
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <main+0xd4>)
 8000286:	f107 0420 	add.w	r4, r7, #32
 800028a:	461d      	mov	r5, r3
 800028c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	my_ON_TaskHandle = osThreadCreate(osThread(my_ON_Task), NULL);
 8000298:	f107 0320 	add.w	r3, r7, #32
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fed1 	bl	8002046 <osThreadCreate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <main+0xd8>)
 80002a8:	6013      	str	r3, [r2, #0]

	/* definition and creation of my_OFF_Task */
	osThreadDef(my_OFF_Task, Start_OFF_Task, osPriorityNormal, 0, 128);
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <main+0xdc>)
 80002ac:	1d3c      	adds	r4, r7, #4
 80002ae:	461d      	mov	r5, r3
 80002b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	my_OFF_TaskHandle = osThreadCreate(osThread(my_OFF_Task), NULL);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 fec0 	bl	8002046 <osThreadCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <main+0xe0>)
 80002ca:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80002cc:	f001 feb4 	bl	8002038 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002d0:	e7fe      	b.n	80002d0 <main+0xb8>
 80002d2:	bf00      	nop
 80002d4:	20000348 	.word	0x20000348
 80002d8:	20000344 	.word	0x20000344
 80002dc:	08005994 	.word	0x08005994
 80002e0:	2000039c 	.word	0x2000039c
 80002e4:	080059a4 	.word	0x080059a4
 80002e8:	20000390 	.word	0x20000390
 80002ec:	080059c0 	.word	0x080059c0
 80002f0:	20000394 	.word	0x20000394
 80002f4:	080059dc 	.word	0x080059dc
 80002f8:	20000398 	.word	0x20000398

080002fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b090      	sub	sp, #64	; 0x40
 8000300:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2228      	movs	r2, #40	; 0x28
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f004 fb9f 	bl	8004a4e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031e:	2301      	movs	r3, #1
 8000320:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000326:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800033a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000340:	f107 0318 	add.w	r3, r7, #24
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fe03 	bl	8000f50 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x58>
		Error_Handler();
 8000350:	f000 f978 	bl	8000644 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2302      	movs	r3, #2
 800035a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000364:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f870 	bl	8001454 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x82>
		Error_Handler();
 800037a:	f000 f963 	bl	8000644 <Error_Handler>
	}
}
 800037e:	bf00      	nop
 8000380:	3740      	adds	r7, #64	; 0x40
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 800038e:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <MX_USART3_UART_Init+0x50>)
 8000390:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 8000394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000398:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 80003ae:	220c      	movs	r2, #12
 80003b0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_USART3_UART_Init+0x4c>)
 80003c0:	f001 fc5a 	bl	8001c78 <HAL_UART_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80003ca:	f000 f93b 	bl	8000644 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000034c 	.word	0x2000034c
 80003d8:	40004800 	.word	0x40004800

080003dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b24      	ldr	r3, [pc, #144]	; (8000484 <MX_GPIO_Init+0xa8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a23      	ldr	r2, [pc, #140]	; (8000484 <MX_GPIO_Init+0xa8>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <MX_GPIO_Init+0xa8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <MX_GPIO_Init+0xa8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a1d      	ldr	r2, [pc, #116]	; (8000484 <MX_GPIO_Init+0xa8>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_GPIO_Init+0xa8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_GPIO_Init+0xa8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a17      	ldr	r2, [pc, #92]	; (8000484 <MX_GPIO_Init+0xa8>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_GPIO_Init+0xa8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_GPIO_Init+0xa8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <MX_GPIO_Init+0xa8>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_GPIO_Init+0xa8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000456:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_GPIO_Init+0xac>)
 8000458:	f000 fd62 	bl	8000f20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800045c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000460:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_GPIO_Init+0xac>)
 8000476:	f000 fbcf 	bl	8000c18 <HAL_GPIO_Init>

}
 800047a:	bf00      	nop
 800047c:	3720      	adds	r7, #32
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	40011000 	.word	0x40011000

0800048c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	printf("StartDefaultTask. \r\n");
 8000494:	4816      	ldr	r0, [pc, #88]	; (80004f0 <StartDefaultTask+0x64>)
 8000496:	f004 fbfd 	bl	8004c94 <puts>
	/* USER CODE BEGIN 5 */
	xSemaphoreTake(myBinarySemHandle, 0); // Инициализировали и отключили семафор.
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <StartDefaultTask+0x68>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 fa5f 	bl	8002964 <xQueueSemaphoreTake>
	int i, d = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for (;;) {
		d++;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3301      	adds	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
		while (i <= 3) {
 80004b0:	e00a      	b.n	80004c8 <StartDefaultTask+0x3c>
			printf("+++++++ %d\n", i);
 80004b2:	68f9      	ldr	r1, [r7, #12]
 80004b4:	4810      	ldr	r0, [pc, #64]	; (80004f8 <StartDefaultTask+0x6c>)
 80004b6:	f004 fb67 	bl	8004b88 <iprintf>
			osDelay(1000);
 80004ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004be:	f001 fe0e 	bl	80020de <osDelay>
			++i;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3301      	adds	r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
		while (i <= 3) {
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	ddf1      	ble.n	80004b2 <StartDefaultTask+0x26>
		}
		i = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
		if (d == 5) {
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	2b05      	cmp	r3, #5
 80004d6:	d1e8      	bne.n	80004aa <StartDefaultTask+0x1e>
			xSemaphoreGive(myBinarySemHandle); // 1
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <StartDefaultTask+0x68>)
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	2300      	movs	r3, #0
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 f8b3 	bl	800264c <xQueueGenericSend>
			vTaskSuspend(NULL); // Отключаем задачу "DefaultTask"
 80004e6:	2000      	movs	r0, #0
 80004e8:	f002 fec4 	bl	8003274 <vTaskSuspend>
		d++;
 80004ec:	e7dd      	b.n	80004aa <StartDefaultTask+0x1e>
 80004ee:	bf00      	nop
 80004f0:	080059f8 	.word	0x080059f8
 80004f4:	2000039c 	.word	0x2000039c
 80004f8:	08005a0c 	.word	0x08005a0c

080004fc <Start_ON_Task>:
 * @brief Function implementing the my_ON_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_ON_Task */
void Start_ON_Task(void const *argument) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_ON_Task */
	if (myBinarySemHandle != NULL) // Проверка существует семафор или нет.
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <Start_ON_Task+0x7c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d011      	beq.n	8000530 <Start_ON_Task+0x34>
	{
		if (osSemaphoreWait(myBinarySemHandle, osWaitForever) == osOK) //WAIT UNTIL A SEMAPHORE BECOMES AVAILABLE. БЛОКИРУЕМ КРИТИЧЕСКУЮ СЕКЦИЮ
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <Start_ON_Task+0x7c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fe29 	bl	800216c <osSemaphoreWait>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d107      	bne.n	8000530 <Start_ON_Task+0x34>
				{
			printf("tart_ON_Task. \r\n");
 8000520:	4816      	ldr	r0, [pc, #88]	; (800057c <Start_ON_Task+0x80>)
 8000522:	f004 fbb7 	bl	8004c94 <puts>
			osSemaphoreRelease(myBinarySemHandle); // Включаем a Semaphore token
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <Start_ON_Task+0x7c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fe6c 	bl	8002208 <osSemaphoreRelease>
		}
	}
	/* Infinite loop */
	for (;;) {
		if (flag == 0) {
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <Start_ON_Task+0x84>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d013      	beq.n	8000566 <Start_ON_Task+0x6a>
			if (HAL_GetTick() - T >= 500) {
 800053e:	f000 fa81 	bl	8000a44 <HAL_GetTick>
 8000542:	4602      	mov	r2, r0
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <Start_ON_Task+0x88>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800054e:	d30a      	bcc.n	8000566 <Start_ON_Task+0x6a>
				flag = 1;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <Start_ON_Task+0x84>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 8000556:	f000 fa75 	bl	8000a44 <HAL_GetTick>
 800055a:	4603      	mov	r3, r0
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <Start_ON_Task+0x88>)
 800055e:	6013      	str	r3, [r2, #0]
				printf("LED is ON. \r\n");
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <Start_ON_Task+0x8c>)
 8000562:	f004 fb97 	bl	8004c94 <puts>
			}
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, flag);
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <Start_ON_Task+0x84>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <Start_ON_Task+0x90>)
 8000572:	f000 fcd5 	bl	8000f20 <HAL_GPIO_WritePin>
		if (flag == 0) {
 8000576:	e7db      	b.n	8000530 <Start_ON_Task+0x34>
 8000578:	2000039c 	.word	0x2000039c
 800057c:	08005a18 	.word	0x08005a18
 8000580:	20000344 	.word	0x20000344
 8000584:	20000348 	.word	0x20000348
 8000588:	08005a28 	.word	0x08005a28
 800058c:	40011000 	.word	0x40011000

08000590 <Start_OFF_Task>:
 * @brief Function implementing the my_OFF_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_OFF_Task */
void Start_OFF_Task(void const *argument) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_OFF_Task */
	if (myBinarySemHandle != NULL) // Проверка существует семафор или нет.
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <Start_OFF_Task+0x78>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d011      	beq.n	80005c4 <Start_OFF_Task+0x34>
	{
		if (osSemaphoreWait(myBinarySemHandle, osWaitForever) == osOK) //WAIT UNTIL A SEMAPHORE BECOMES AVAILABLE. БЛОКИРУЕМ КРИТИЧЕСКУЮ СЕКЦИЮ
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <Start_OFF_Task+0x78>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fddf 	bl	800216c <osSemaphoreWait>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d107      	bne.n	80005c4 <Start_OFF_Task+0x34>
				{
			printf("tart_OFF_Task. \r\n");
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <Start_OFF_Task+0x7c>)
 80005b6:	f004 fb6d 	bl	8004c94 <puts>
			osSemaphoreRelease(myBinarySemHandle); // Включаем a Semaphore token
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <Start_OFF_Task+0x78>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fe22 	bl	8002208 <osSemaphoreRelease>
		}
	}
	/* Infinite loop */
	for (;;) {
		if (flag == 1) {
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <Start_OFF_Task+0x80>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <Start_OFF_Task+0x64>
			if (HAL_GetTick() - T >= 500) {
 80005cc:	f000 fa3a 	bl	8000a44 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <Start_OFF_Task+0x84>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005dc:	d30a      	bcc.n	80005f4 <Start_OFF_Task+0x64>
				flag = 0;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <Start_OFF_Task+0x80>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
				T = HAL_GetTick();
 80005e4:	f000 fa2e 	bl	8000a44 <HAL_GetTick>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <Start_OFF_Task+0x84>)
 80005ec:	6013      	str	r3, [r2, #0]
				printf("LED is OFF. \r\n");
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <Start_OFF_Task+0x88>)
 80005f0:	f004 fb50 	bl	8004c94 <puts>
			}
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, flag);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <Start_OFF_Task+0x80>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <Start_OFF_Task+0x8c>)
 8000600:	f000 fc8e 	bl	8000f20 <HAL_GPIO_WritePin>
		if (flag == 1) {
 8000604:	e7de      	b.n	80005c4 <Start_OFF_Task+0x34>
 8000606:	bf00      	nop
 8000608:	2000039c 	.word	0x2000039c
 800060c:	08005a38 	.word	0x08005a38
 8000610:	20000344 	.word	0x20000344
 8000614:	20000348 	.word	0x20000348
 8000618:	08005a4c 	.word	0x08005a4c
 800061c:	40011000 	.word	0x40011000

08000620 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000632:	f000 f9f5 	bl	8000a20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40000800 	.word	0x40000800

08000644 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_MspInit+0x68>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_MspInit+0x68>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_MspInit+0x68>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_MspInit+0x68>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <HAL_MspInit+0x68>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_MspInit+0x68>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	210f      	movs	r1, #15
 800068a:	f06f 0001 	mvn.w	r0, #1
 800068e:	f000 fa98 	bl	8000bc2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_MspInit+0x6c>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_MspInit+0x6c>)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <HAL_UART_MspInit+0x8c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d131      	bne.n	8000744 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ea:	61d3      	str	r3, [r2, #28]
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_UART_MspInit+0x90>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <HAL_UART_MspInit+0x94>)
 8000726:	f000 fa77 	bl	8000c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800072a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800072e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_UART_MspInit+0x94>)
 8000740:	f000 fa6a 	bl	8000c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40004800 	.word	0x40004800
 8000750:	40021000 	.word	0x40021000
 8000754:	40010c00 	.word	0x40010c00

08000758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08e      	sub	sp, #56	; 0x38
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <HAL_InitTick+0xe8>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <HAL_InitTick+0xe8>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <HAL_InitTick+0xe8>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000786:	f107 0210 	add.w	r2, r7, #16
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffd9 	bl	8001748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079c:	2b00      	cmp	r3, #0
 800079e:	d103      	bne.n	80007a8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007a0:	f000 ffaa 	bl	80016f8 <HAL_RCC_GetPCLK1Freq>
 80007a4:	6378      	str	r0, [r7, #52]	; 0x34
 80007a6:	e004      	b.n	80007b2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007a8:	f000 ffa6 	bl	80016f8 <HAL_RCC_GetPCLK1Freq>
 80007ac:	4603      	mov	r3, r0
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b4:	4a23      	ldr	r2, [pc, #140]	; (8000844 <HAL_InitTick+0xec>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	0c9b      	lsrs	r3, r3, #18
 80007bc:	3b01      	subs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <HAL_InitTick+0xf0>)
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <HAL_InitTick+0xf4>)
 80007c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <HAL_InitTick+0xf0>)
 80007c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007cc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_InitTick+0xf0>)
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_InitTick+0xf0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <HAL_InitTick+0xf0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_InitTick+0xf0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <HAL_InitTick+0xf0>)
 80007e8:	f000 fffc 	bl	80017e4 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d11b      	bne.n	8000832 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <HAL_InitTick+0xf0>)
 80007fc:	f001 f84a 	bl	8001894 <HAL_TIM_Base_Start_IT>
 8000800:	4603      	mov	r3, r0
 8000802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800080a:	2b00      	cmp	r3, #0
 800080c:	d111      	bne.n	8000832 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800080e:	201e      	movs	r0, #30
 8000810:	f000 f9f3 	bl	8000bfa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b0f      	cmp	r3, #15
 8000818:	d808      	bhi.n	800082c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800081a:	2200      	movs	r2, #0
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	201e      	movs	r0, #30
 8000820:	f000 f9cf 	bl	8000bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000824:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_InitTick+0xf8>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e002      	b.n	8000832 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000836:	4618      	mov	r0, r3
 8000838:	3738      	adds	r7, #56	; 0x38
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	431bde83 	.word	0x431bde83
 8000848:	200003a0 	.word	0x200003a0
 800084c:	40000800 	.word	0x40000800
 8000850:	20000004 	.word	0x20000004

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <TIM4_IRQHandler+0x10>)
 8000886:	f001 f857 	bl	8001938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200003a0 	.word	0x200003a0

08000894 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	e00a      	b.n	80008bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008a6:	f3af 8000 	nop.w
 80008aa:	4601      	mov	r1, r0
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	60ba      	str	r2, [r7, #8]
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf0      	blt.n	80008a6 <_read+0x12>
  }

  return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f4:	605a      	str	r2, [r3, #4]
  return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <_isatty>:

int _isatty(int file)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
	...

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f003 ff44 	bl	80047ec <__errno>
 8000964:	4603      	mov	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20005000 	.word	0x20005000
 8000990:	00000400 	.word	0x00000400
 8000994:	200003e8 	.word	0x200003e8
 8000998:	20001150 	.word	0x20001150

0800099c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ce:	f7ff ffe5 	bl	800099c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f004 f807 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fc1f 	bl	8000218 <main>
  bx lr
 80009da:	4770      	bx	lr
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009e4:	08005b2c 	.word	0x08005b2c
  ldr r2, =_sbss
 80009e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009ec:	2000114c 	.word	0x2000114c

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f8d1 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	200f      	movs	r0, #15
 8000a0c:	f7ff fea4 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff fe1e 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	200003ec 	.word	0x200003ec

08000a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	200003ec 	.word	0x200003ec

08000a58 <__NVIC_SetPriorityGrouping>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4906      	ldr	r1, [pc, #24]	; (8000af0 <__NVIC_EnableIRQ+0x34>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff4f 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff64 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ffb2 	bl	8000b48 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff81 	bl	8000af4 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff57 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	e169      	b.n	8000f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f040 8158 	bne.w	8000efa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4a9a      	ldr	r2, [pc, #616]	; (8000eb8 <HAL_GPIO_Init+0x2a0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d05e      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
 8000c54:	4a98      	ldr	r2, [pc, #608]	; (8000eb8 <HAL_GPIO_Init+0x2a0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d875      	bhi.n	8000d46 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a98      	ldr	r2, [pc, #608]	; (8000ebc <HAL_GPIO_Init+0x2a4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d058      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
 8000c60:	4a96      	ldr	r2, [pc, #600]	; (8000ebc <HAL_GPIO_Init+0x2a4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d86f      	bhi.n	8000d46 <HAL_GPIO_Init+0x12e>
 8000c66:	4a96      	ldr	r2, [pc, #600]	; (8000ec0 <HAL_GPIO_Init+0x2a8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d052      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
 8000c6c:	4a94      	ldr	r2, [pc, #592]	; (8000ec0 <HAL_GPIO_Init+0x2a8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d869      	bhi.n	8000d46 <HAL_GPIO_Init+0x12e>
 8000c72:	4a94      	ldr	r2, [pc, #592]	; (8000ec4 <HAL_GPIO_Init+0x2ac>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d04c      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
 8000c78:	4a92      	ldr	r2, [pc, #584]	; (8000ec4 <HAL_GPIO_Init+0x2ac>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d863      	bhi.n	8000d46 <HAL_GPIO_Init+0x12e>
 8000c7e:	4a92      	ldr	r2, [pc, #584]	; (8000ec8 <HAL_GPIO_Init+0x2b0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d046      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
 8000c84:	4a90      	ldr	r2, [pc, #576]	; (8000ec8 <HAL_GPIO_Init+0x2b0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d85d      	bhi.n	8000d46 <HAL_GPIO_Init+0x12e>
 8000c8a:	2b12      	cmp	r3, #18
 8000c8c:	d82a      	bhi.n	8000ce4 <HAL_GPIO_Init+0xcc>
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d859      	bhi.n	8000d46 <HAL_GPIO_Init+0x12e>
 8000c92:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <HAL_GPIO_Init+0x80>)
 8000c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c98:	08000d13 	.word	0x08000d13
 8000c9c:	08000ced 	.word	0x08000ced
 8000ca0:	08000cff 	.word	0x08000cff
 8000ca4:	08000d41 	.word	0x08000d41
 8000ca8:	08000d47 	.word	0x08000d47
 8000cac:	08000d47 	.word	0x08000d47
 8000cb0:	08000d47 	.word	0x08000d47
 8000cb4:	08000d47 	.word	0x08000d47
 8000cb8:	08000d47 	.word	0x08000d47
 8000cbc:	08000d47 	.word	0x08000d47
 8000cc0:	08000d47 	.word	0x08000d47
 8000cc4:	08000d47 	.word	0x08000d47
 8000cc8:	08000d47 	.word	0x08000d47
 8000ccc:	08000d47 	.word	0x08000d47
 8000cd0:	08000d47 	.word	0x08000d47
 8000cd4:	08000d47 	.word	0x08000d47
 8000cd8:	08000d47 	.word	0x08000d47
 8000cdc:	08000cf5 	.word	0x08000cf5
 8000ce0:	08000d09 	.word	0x08000d09
 8000ce4:	4a79      	ldr	r2, [pc, #484]	; (8000ecc <HAL_GPIO_Init+0x2b4>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cea:	e02c      	b.n	8000d46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e029      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e024      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	3308      	adds	r3, #8
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e01f      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	330c      	adds	r3, #12
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e01a      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	623b      	str	r3, [r7, #32]
          break;
 8000d1e:	e013      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d105      	bne.n	8000d34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	611a      	str	r2, [r3, #16]
          break;
 8000d32:	e009      	b.n	8000d48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d34:	2308      	movs	r3, #8
 8000d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	615a      	str	r2, [r3, #20]
          break;
 8000d3e:	e003      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
          break;
 8000d44:	e000      	b.n	8000d48 <HAL_GPIO_Init+0x130>
          break;
 8000d46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	2bff      	cmp	r3, #255	; 0xff
 8000d4c:	d801      	bhi.n	8000d52 <HAL_GPIO_Init+0x13a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	e001      	b.n	8000d56 <HAL_GPIO_Init+0x13e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3304      	adds	r3, #4
 8000d56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2bff      	cmp	r3, #255	; 0xff
 8000d5c:	d802      	bhi.n	8000d64 <HAL_GPIO_Init+0x14c>
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	e002      	b.n	8000d6a <HAL_GPIO_Init+0x152>
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	3b08      	subs	r3, #8
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	210f      	movs	r1, #15
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	6a39      	ldr	r1, [r7, #32]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	431a      	orrs	r2, r3
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80b1 	beq.w	8000efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_GPIO_Init+0x2b8>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <HAL_GPIO_Init+0x2b8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db0:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_GPIO_Init+0x2bc>)
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a40      	ldr	r2, [pc, #256]	; (8000ed8 <HAL_GPIO_Init+0x2c0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d013      	beq.n	8000e04 <HAL_GPIO_Init+0x1ec>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a3f      	ldr	r2, [pc, #252]	; (8000edc <HAL_GPIO_Init+0x2c4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d00d      	beq.n	8000e00 <HAL_GPIO_Init+0x1e8>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3e      	ldr	r2, [pc, #248]	; (8000ee0 <HAL_GPIO_Init+0x2c8>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0x1e4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3d      	ldr	r2, [pc, #244]	; (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d101      	bne.n	8000df8 <HAL_GPIO_Init+0x1e0>
 8000df4:	2303      	movs	r3, #3
 8000df6:	e006      	b.n	8000e06 <HAL_GPIO_Init+0x1ee>
 8000df8:	2304      	movs	r3, #4
 8000dfa:	e004      	b.n	8000e06 <HAL_GPIO_Init+0x1ee>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_Init+0x1ee>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <HAL_GPIO_Init+0x1ee>
 8000e04:	2300      	movs	r3, #0
 8000e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e08:	f002 0203 	and.w	r2, r2, #3
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	4093      	lsls	r3, r2
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e16:	492f      	ldr	r1, [pc, #188]	; (8000ed4 <HAL_GPIO_Init+0x2bc>)
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	492c      	ldr	r1, [pc, #176]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4928      	ldr	r1, [pc, #160]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4922      	ldr	r1, [pc, #136]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	491e      	ldr	r1, [pc, #120]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	4918      	ldr	r1, [pc, #96]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4914      	ldr	r1, [pc, #80]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d021      	beq.n	8000eec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60cb      	str	r3, [r1, #12]
 8000eb4:	e021      	b.n	8000efa <HAL_GPIO_Init+0x2e2>
 8000eb6:	bf00      	nop
 8000eb8:	10320000 	.word	0x10320000
 8000ebc:	10310000 	.word	0x10310000
 8000ec0:	10220000 	.word	0x10220000
 8000ec4:	10210000 	.word	0x10210000
 8000ec8:	10120000 	.word	0x10120000
 8000ecc:	10110000 	.word	0x10110000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40011400 	.word	0x40011400
 8000ee8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4909      	ldr	r1, [pc, #36]	; (8000f1c <HAL_GPIO_Init+0x304>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	3301      	adds	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f47f ae8e 	bne.w	8000c2c <HAL_GPIO_Init+0x14>
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	372c      	adds	r7, #44	; 0x2c
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f3c:	e003      	b.n	8000f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	611a      	str	r2, [r3, #16]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e272      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8087 	beq.w	800107e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f70:	4b92      	ldr	r3, [pc, #584]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d00c      	beq.n	8000f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f7c:	4b8f      	ldr	r3, [pc, #572]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d112      	bne.n	8000fae <HAL_RCC_OscConfig+0x5e>
 8000f88:	4b8c      	ldr	r3, [pc, #560]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d10b      	bne.n	8000fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f96:	4b89      	ldr	r3, [pc, #548]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d06c      	beq.n	800107c <HAL_RCC_OscConfig+0x12c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d168      	bne.n	800107c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e24c      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb6:	d106      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x76>
 8000fb8:	4b80      	ldr	r3, [pc, #512]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a7f      	ldr	r2, [pc, #508]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e02e      	b.n	8001024 <HAL_RCC_OscConfig+0xd4>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x98>
 8000fce:	4b7b      	ldr	r3, [pc, #492]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a7a      	ldr	r2, [pc, #488]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b78      	ldr	r3, [pc, #480]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a77      	ldr	r2, [pc, #476]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e01d      	b.n	8001024 <HAL_RCC_OscConfig+0xd4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0xbc>
 8000ff2:	4b72      	ldr	r3, [pc, #456]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a71      	ldr	r2, [pc, #452]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b6f      	ldr	r3, [pc, #444]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6e      	ldr	r2, [pc, #440]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0xd4>
 800100c:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a67      	ldr	r2, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800101e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fd0a 	bl	8000a44 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fd06 	bl	8000a44 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e200      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0xe4>
 8001052:	e014      	b.n	800107e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fcf6 	bl	8000a44 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fcf2 	bl	8000a44 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e1ec      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x10c>
 800107a:	e000      	b.n	800107e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d063      	beq.n	8001152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001096:	4b49      	ldr	r3, [pc, #292]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d11c      	bne.n	80010dc <HAL_RCC_OscConfig+0x18c>
 80010a2:	4b46      	ldr	r3, [pc, #280]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d116      	bne.n	80010dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_RCC_OscConfig+0x176>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e1c0      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c6:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4939      	ldr	r1, [pc, #228]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	e03a      	b.n	8001152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_RCC_OscConfig+0x270>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fcab 	bl	8000a44 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f2:	f7ff fca7 	bl	8000a44 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e1a1      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4927      	ldr	r1, [pc, #156]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_RCC_OscConfig+0x270>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fc8a 	bl	8000a44 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff fc86 	bl	8000a44 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e180      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d03a      	beq.n	80011d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d019      	beq.n	800119a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_RCC_OscConfig+0x274>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fc6a 	bl	8000a44 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fc66 	bl	8000a44 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e160      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_RCC_OscConfig+0x26c>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f000 fb08 	bl	80017a8 <RCC_Delay>
 8001198:	e01c      	b.n	80011d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_RCC_OscConfig+0x274>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fc50 	bl	8000a44 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a6:	e00f      	b.n	80011c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc4c 	bl	8000a44 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d908      	bls.n	80011c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e146      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	42420000 	.word	0x42420000
 80011c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	4b92      	ldr	r3, [pc, #584]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e9      	bne.n	80011a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80a6 	beq.w	800132e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10d      	bne.n	800120e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a87      	ldr	r2, [pc, #540]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120a:	2301      	movs	r3, #1
 800120c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d118      	bne.n	800124c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121a:	4b7f      	ldr	r3, [pc, #508]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a7e      	ldr	r2, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001226:	f7ff fc0d 	bl	8000a44 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122e:	f7ff fc09 	bl	8000a44 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b64      	cmp	r3, #100	; 0x64
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e103      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	4b75      	ldr	r3, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x4c8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x312>
 8001254:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6213      	str	r3, [r2, #32]
 8001260:	e02d      	b.n	80012be <HAL_RCC_OscConfig+0x36e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x334>
 800126a:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a69      	ldr	r2, [pc, #420]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a66      	ldr	r2, [pc, #408]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
 8001282:	e01c      	b.n	80012be <HAL_RCC_OscConfig+0x36e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b05      	cmp	r3, #5
 800128a:	d10c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x356>
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a60      	ldr	r2, [pc, #384]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4a5d      	ldr	r2, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6213      	str	r3, [r2, #32]
 80012a4:	e00b      	b.n	80012be <HAL_RCC_OscConfig+0x36e>
 80012a6:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a5a      	ldr	r2, [pc, #360]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d015      	beq.n	80012f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fbbd 	bl	8000a44 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fbb9 	bl	8000a44 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e0b1      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0ee      	beq.n	80012ce <HAL_RCC_OscConfig+0x37e>
 80012f0:	e014      	b.n	800131c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fba7 	bl	8000a44 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff fba3 	bl	8000a44 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	; 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e09b      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001310:	4b40      	ldr	r3, [pc, #256]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ee      	bne.n	80012fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d105      	bne.n	800132e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a3b      	ldr	r2, [pc, #236]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8087 	beq.w	8001446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b08      	cmp	r3, #8
 8001342:	d061      	beq.n	8001408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d146      	bne.n	80013da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_RCC_OscConfig+0x4cc>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fb77 	bl	8000a44 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff fb73 	bl	8000a44 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e06d      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001380:	d108      	bne.n	8001394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4921      	ldr	r1, [pc, #132]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a19      	ldr	r1, [r3, #32]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	430b      	orrs	r3, r1
 80013a6:	491b      	ldr	r1, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x4cc>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb47 	bl	8000a44 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fb43 	bl	8000a44 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e03d      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x46a>
 80013d8:	e035      	b.n	8001446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_RCC_OscConfig+0x4cc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb30 	bl	8000a44 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fb2c 	bl	8000a44 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e026      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x498>
 8001406:	e01e      	b.n	8001446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e019      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
 8001414:	40021000 	.word	0x40021000
 8001418:	40007000 	.word	0x40007000
 800141c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_OscConfig+0x500>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	429a      	cmp	r2, r3
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0d0      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d910      	bls.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	4965      	ldr	r1, [pc, #404]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0b8      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	494d      	ldr	r1, [pc, #308]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d040      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e073      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06b      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4936      	ldr	r1, [pc, #216]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fa7e 	bl	8000a44 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa7a 	bl	8000a44 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e053      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d210      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 0207 	bic.w	r2, r3, #7
 800158a:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e032      	b.n	800160a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e2:	f000 f821 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	5ccb      	ldrb	r3, [r1, r3]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1cc>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1d0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f8a8 	bl	8000758 <HAL_InitTick>

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000
 8001618:	40021000 	.word	0x40021000
 800161c:	08005a74 	.word	0x08005a74
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001628:	b490      	push	{r4, r7}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001630:	1d3c      	adds	r4, r7, #4
 8001632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001638:	f240 2301 	movw	r3, #513	; 0x201
 800163c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d002      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x40>
 8001662:	2b08      	cmp	r3, #8
 8001664:	d003      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x46>
 8001666:	e02b      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800166a:	623b      	str	r3, [r7, #32]
      break;
 800166c:	e02b      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3328      	adds	r3, #40	; 0x28
 8001678:	443b      	add	r3, r7
 800167a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800167e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d012      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0c5b      	lsrs	r3, r3, #17
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	3328      	adds	r3, #40	; 0x28
 8001696:	443b      	add	r3, r7
 8001698:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800169c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a2:	fb03 f202 	mul.w	r2, r3, r2
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	e004      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	623b      	str	r3, [r7, #32]
      break;
 80016be:	e002      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016c2:	623b      	str	r3, [r7, #32]
      break;
 80016c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc90      	pop	{r4, r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	08005a5c 	.word	0x08005a5c
 80016d8:	40021000 	.word	0x40021000
 80016dc:	007a1200 	.word	0x007a1200
 80016e0:	003d0900 	.word	0x003d0900

080016e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000000 	.word	0x20000000

080016f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016fc:	f7ff fff2 	bl	80016e4 <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	; (800171c <HAL_RCC_GetPCLK1Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	08005a84 	.word	0x08005a84

08001720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001724:	f7ff ffde 	bl	80016e4 <HAL_RCC_GetHCLKFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0adb      	lsrs	r3, r3, #11
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4903      	ldr	r1, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	08005a84 	.word	0x08005a84

08001748 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	220f      	movs	r2, #15
 8001756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_GetClockConfig+0x58>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_RCC_GetClockConfig+0x5c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0207 	and.w	r2, r3, #7
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40022000 	.word	0x40022000

080017a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <RCC_Delay+0x34>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <RCC_Delay+0x38>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0a5b      	lsrs	r3, r3, #9
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	fb02 f303 	mul.w	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017c4:	bf00      	nop
  }
  while (Delay --);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	60fa      	str	r2, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <RCC_Delay+0x1c>
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000000 	.word	0x20000000
 80017e0:	10624dd3 	.word	0x10624dd3

080017e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e041      	b.n	800187a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f839 	bl	8001882 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4610      	mov	r0, r2
 8001824:	f000 f9b4 	bl	8001b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d001      	beq.n	80018ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e03a      	b.n	8001922 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_TIM_Base_Start_IT+0x98>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00e      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x58>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d6:	d009      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x58>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_TIM_Base_Start_IT+0x9c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d004      	beq.n	80018ec <HAL_TIM_Base_Start_IT+0x58>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_TIM_Base_Start_IT+0xa0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d010      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0201 	orr.w	r2, r2, #1
 800190c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800190e:	e007      	b.n	8001920 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40000400 	.word	0x40000400
 8001934:	40000800 	.word	0x40000800

08001938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b02      	cmp	r3, #2
 800194c:	d122      	bne.n	8001994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b02      	cmp	r3, #2
 800195a:	d11b      	bne.n	8001994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0202 	mvn.w	r2, #2
 8001964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8ed 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 8001980:	e005      	b.n	800198e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f8e0 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8ef 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d122      	bne.n	80019e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d11b      	bne.n	80019e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0204 	mvn.w	r2, #4
 80019b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8c3 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 80019d4:	e005      	b.n	80019e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8b6 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f8c5 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d122      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d11b      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0208 	mvn.w	r2, #8
 8001a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2204      	movs	r2, #4
 8001a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f899 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 8001a28:	e005      	b.n	8001a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f88c 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f89b 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0310 	and.w	r3, r3, #16
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d122      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d11b      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0210 	mvn.w	r2, #16
 8001a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2208      	movs	r2, #8
 8001a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f86f 	bl	8001b5a <HAL_TIM_IC_CaptureCallback>
 8001a7c:	e005      	b.n	8001a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f862 	bl	8001b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f871 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10e      	bne.n	8001abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0201 	mvn.w	r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fdb2 	bl	8000620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac6:	2b80      	cmp	r3, #128	; 0x80
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad4:	2b80      	cmp	r3, #128	; 0x80
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8bf 	bl	8001c66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b40      	cmp	r3, #64	; 0x40
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f835 	bl	8001b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d107      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0220 	mvn.w	r2, #32
 8001b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f88a 	bl	8001c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a29      	ldr	r2, [pc, #164]	; (8001c48 <TIM_Base_SetConfig+0xb8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00b      	beq.n	8001bc0 <TIM_Base_SetConfig+0x30>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bae:	d007      	beq.n	8001bc0 <TIM_Base_SetConfig+0x30>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <TIM_Base_SetConfig+0xbc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <TIM_Base_SetConfig+0x30>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <TIM_Base_SetConfig+0xc0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d108      	bne.n	8001bd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <TIM_Base_SetConfig+0xb8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00b      	beq.n	8001bf2 <TIM_Base_SetConfig+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d007      	beq.n	8001bf2 <TIM_Base_SetConfig+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <TIM_Base_SetConfig+0xbc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d003      	beq.n	8001bf2 <TIM_Base_SetConfig+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <TIM_Base_SetConfig+0xc0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d108      	bne.n	8001c04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <TIM_Base_SetConfig+0xb8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d103      	bne.n	8001c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	615a      	str	r2, [r3, #20]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40000400 	.word	0x40000400
 8001c50:	40000800 	.word	0x40000800

08001c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e03f      	b.n	8001d0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7fe fd0e 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f905 	bl	8001ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b08a      	sub	sp, #40	; 0x28
 8001d16:	af02      	add	r7, sp, #8
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d17c      	bne.n	8001e2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_UART_Transmit+0x2c>
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e075      	b.n	8001e2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_UART_Transmit+0x3e>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e06e      	b.n	8001e2e <HAL_UART_Transmit+0x11c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2221      	movs	r2, #33	; 0x21
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d66:	f7fe fe6d 	bl	8000a44 <HAL_GetTick>
 8001d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d80:	d108      	bne.n	8001d94 <HAL_UART_Transmit+0x82>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e003      	b.n	8001d9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001da4:	e02a      	b.n	8001dfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f840 	bl	8001e36 <UART_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e036      	b.n	8001e2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10b      	bne.n	8001dde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e007      	b.n	8001dee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1cf      	bne.n	8001da6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2140      	movs	r1, #64	; 0x40
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f810 	bl	8001e36 <UART_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e006      	b.n	8001e2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e46:	e02c      	b.n	8001ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e4e:	d028      	beq.n	8001ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e56:	f7fe fdf5 	bl	8000a44 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d21d      	bcs.n	8001ea2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e00f      	b.n	8001ec2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d0c3      	beq.n	8001e48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f06:	f023 030c 	bic.w	r3, r3, #12
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <UART_SetConfig+0x114>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d103      	bne.n	8001f3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f34:	f7ff fbf4 	bl	8001720 <HAL_RCC_GetPCLK2Freq>
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	e002      	b.n	8001f42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f3c:	f7ff fbdc 	bl	80016f8 <HAL_RCC_GetPCLK1Freq>
 8001f40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	009a      	lsls	r2, r3, #2
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <UART_SetConfig+0x118>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	0119      	lsls	r1, r3, #4
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	009a      	lsls	r2, r3, #2
 8001f6c:	441a      	add	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <UART_SetConfig+0x118>)
 8001f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2064      	movs	r0, #100	; 0x64
 8001f82:	fb00 f303 	mul.w	r3, r0, r3
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	3332      	adds	r3, #50	; 0x32
 8001f8c:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <UART_SetConfig+0x118>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f98:	4419      	add	r1, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009a      	lsls	r2, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <UART_SetConfig+0x118>)
 8001fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2064      	movs	r0, #100	; 0x64
 8001fba:	fb00 f303 	mul.w	r3, r0, r3
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	3332      	adds	r3, #50	; 0x32
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <UART_SetConfig+0x118>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	440a      	add	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40013800 	.word	0x40013800
 8001fe4:	51eb851f 	.word	0x51eb851f

08001fe8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffa:	2b84      	cmp	r3, #132	; 0x84
 8001ffc:	d005      	beq.n	800200a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ffe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800201c:	f3ef 8305 	mrs	r3, IPSR
 8002020:	607b      	str	r3, [r7, #4]
  return(result);
 8002022:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800203c:	f001 f9ac 	bl	8003398 <vTaskStartScheduler>
  
  return osOK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}

08002046 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002048:	b089      	sub	sp, #36	; 0x24
 800204a:	af04      	add	r7, sp, #16
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <osThreadCreate+0x54>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01c      	beq.n	800209a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685c      	ldr	r4, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681d      	ldr	r5, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691e      	ldr	r6, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ffb8 	bl	8001fe8 <makeFreeRtosPriority>
 8002078:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002082:	9202      	str	r2, [sp, #8]
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	9100      	str	r1, [sp, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4632      	mov	r2, r6
 800208c:	4629      	mov	r1, r5
 800208e:	4620      	mov	r0, r4
 8002090:	f000 ff1b 	bl	8002eca <xTaskCreateStatic>
 8002094:	4603      	mov	r3, r0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e01c      	b.n	80020d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685c      	ldr	r4, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020a6:	b29e      	uxth	r6, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff9a 	bl	8001fe8 <makeFreeRtosPriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9200      	str	r2, [sp, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4632      	mov	r2, r6
 80020c2:	4629      	mov	r1, r5
 80020c4:	4620      	mov	r0, r4
 80020c6:	f000 ff5c 	bl	8002f82 <xTaskCreate>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <osDelay+0x16>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	e000      	b.n	80020f6 <osDelay+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 f888 	bl	800320c <vTaskDelay>
  
  return osOK;
 80020fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af02      	add	r7, sp, #8
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00f      	beq.n	8002138 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10a      	bne.n	8002134 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	9200      	str	r2, [sp, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2001      	movs	r0, #1
 800212c:	f000 f9ba 	bl	80024a4 <xQueueGenericCreateStatic>
 8002130:	4603      	mov	r3, r0
 8002132:	e016      	b.n	8002162 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	e014      	b.n	8002162 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d110      	bne.n	8002160 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800213e:	2203      	movs	r2, #3
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	f000 fa25 	bl	8002592 <xQueueGenericCreate>
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <osSemaphoreCreate+0x56>
 8002150:	2300      	movs	r3, #0
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa78 	bl	800264c <xQueueGenericSend>
      return sema;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	e000      	b.n	8002162 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002160:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	e03a      	b.n	80021fa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d103      	bne.n	8002198 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e009      	b.n	80021ac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <osSemaphoreWait+0x40>
      ticks = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80021ac:	f7ff ff33 	bl	8002016 <inHandlerMode>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d017      	beq.n	80021e6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	461a      	mov	r2, r3
 80021bc:	2100      	movs	r1, #0
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fcdc 	bl	8002b7c <xQueueReceiveFromISR>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d001      	beq.n	80021ce <osSemaphoreWait+0x62>
      return osErrorOS;
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	e015      	b.n	80021fa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d011      	beq.n	80021f8 <osSemaphoreWait+0x8c>
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <osSemaphoreWait+0x98>)
 80021d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	e008      	b.n	80021f8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fbbb 	bl	8002964 <xQueueSemaphoreTake>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80021f4:	23ff      	movs	r3, #255	; 0xff
 80021f6:	e000      	b.n	80021fa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000ed04 	.word	0xe000ed04

08002208 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002218:	f7ff fefd 	bl	8002016 <inHandlerMode>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fb0d 	bl	8002848 <xQueueGiveFromISR>
 800222e:	4603      	mov	r3, r0
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002234:	23ff      	movs	r3, #255	; 0xff
 8002236:	e017      	b.n	8002268 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d013      	beq.n	8002266 <osSemaphoreRelease+0x5e>
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <osSemaphoreRelease+0x68>)
 8002240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	f3bf 8f6f 	isb	sy
 800224e:	e00a      	b.n	8002266 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002250:	2300      	movs	r3, #0
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f9f8 	bl	800264c <xQueueGenericSend>
 800225c:	4603      	mov	r3, r0
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002262:	23ff      	movs	r3, #255	; 0xff
 8002264:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	e000ed04 	.word	0xe000ed04

08002274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0208 	add.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0208 	add.w	r2, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0208 	add.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	601a      	str	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002326:	d103      	bne.n	8002330 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e00c      	b.n	800234a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3308      	adds	r3, #8
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e002      	b.n	800233e <vListInsert+0x2e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d2f6      	bcs.n	8002338 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d103      	bne.n	80023b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023fe:	f001 ff1d 	bl	800423c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	3b01      	subs	r3, #1
 8002430:	68f9      	ldr	r1, [r7, #12]
 8002432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	441a      	add	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	22ff      	movs	r2, #255	; 0xff
 8002442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d114      	bne.n	800247e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01a      	beq.n	8002492 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3310      	adds	r3, #16
 8002460:	4618      	mov	r0, r3
 8002462:	f001 f9f1 	bl	8003848 <xTaskRemoveFromEventList>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d012      	beq.n	8002492 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <xQueueGenericReset+0xcc>)
 800246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	e009      	b.n	8002492 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3310      	adds	r3, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fef6 	bl	8002274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3324      	adds	r3, #36	; 0x24
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fef1 	bl	8002274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002492:	f001 ff03 	bl	800429c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000ed04 	.word	0xe000ed04

080024a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08e      	sub	sp, #56	; 0x38
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <xQueueGenericCreateStatic+0x52>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <xQueueGenericCreateStatic+0x56>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericCreateStatic+0x58>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	623b      	str	r3, [r7, #32]
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <xQueueGenericCreateStatic+0x7e>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <xQueueGenericCreateStatic+0x82>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <xQueueGenericCreateStatic+0x84>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10a      	bne.n	8002542 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	61fb      	str	r3, [r7, #28]
}
 800253e:	bf00      	nop
 8002540:	e7fe      	b.n	8002540 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002542:	2348      	movs	r3, #72	; 0x48
 8002544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b48      	cmp	r3, #72	; 0x48
 800254a:	d00a      	beq.n	8002562 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	61bb      	str	r3, [r7, #24]
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002574:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f843 	bl	800260e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800258a:	4618      	mov	r0, r3
 800258c:	3730      	adds	r7, #48	; 0x30
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	; 0x28
 8002596:	af02      	add	r7, sp, #8
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	4613      	mov	r3, r2
 800259e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <xQueueGenericCreate+0x2a>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	613b      	str	r3, [r7, #16]
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e004      	b.n	80025d2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3348      	adds	r3, #72	; 0x48
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 ff30 	bl	800443c <pvPortMalloc>
 80025dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00f      	beq.n	8002604 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	3348      	adds	r3, #72	; 0x48
 80025e8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f805 	bl	800260e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002604:	69bb      	ldr	r3, [r7, #24]
	}
 8002606:	4618      	mov	r0, r3
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e002      	b.n	8002630 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800263c:	2101      	movs	r1, #1
 800263e:	69b8      	ldr	r0, [r7, #24]
 8002640:	f7ff fec8 	bl	80023d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800265a:	2300      	movs	r3, #0
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <xQueueGenericSend+0x32>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <xQueueGenericSend+0x40>
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <xQueueGenericSend+0x44>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <xQueueGenericSend+0x46>
 8002690:	2300      	movs	r3, #0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <xQueueGenericSend+0x60>
	__asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d103      	bne.n	80026ba <xQueueGenericSend+0x6e>
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <xQueueGenericSend+0x72>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <xQueueGenericSend+0x74>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGenericSend+0x8e>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	623b      	str	r3, [r7, #32]
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026da:	f001 fa79 	bl	8003bd0 <xTaskGetSchedulerState>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <xQueueGenericSend+0x9e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <xQueueGenericSend+0xa2>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <xQueueGenericSend+0xa4>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <xQueueGenericSend+0xbe>
	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	61fb      	str	r3, [r7, #28]
}
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800270a:	f001 fd97 	bl	800423c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	429a      	cmp	r2, r3
 8002718:	d302      	bcc.n	8002720 <xQueueGenericSend+0xd4>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d129      	bne.n	8002774 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002726:	f000 fac0 	bl	8002caa <prvCopyDataToQueue>
 800272a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	3324      	adds	r3, #36	; 0x24
 8002738:	4618      	mov	r0, r3
 800273a:	f001 f885 	bl	8003848 <xTaskRemoveFromEventList>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002744:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <xQueueGenericSend+0x1f8>)
 8002746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	e00a      	b.n	800276c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800275c:	4b39      	ldr	r3, [pc, #228]	; (8002844 <xQueueGenericSend+0x1f8>)
 800275e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800276c:	f001 fd96 	bl	800429c <vPortExitCritical>
				return pdPASS;
 8002770:	2301      	movs	r3, #1
 8002772:	e063      	b.n	800283c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800277a:	f001 fd8f 	bl	800429c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800277e:	2300      	movs	r3, #0
 8002780:	e05c      	b.n	800283c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4618      	mov	r0, r3
 800278e:	f001 f8bd 	bl	800390c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002792:	2301      	movs	r3, #1
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002796:	f001 fd81 	bl	800429c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800279a:	f000 fe67 	bl	800346c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800279e:	f001 fd4d 	bl	800423c <vPortEnterCritical>
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ae:	d103      	bne.n	80027b8 <xQueueGenericSend+0x16c>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c4:	d103      	bne.n	80027ce <xQueueGenericSend+0x182>
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ce:	f001 fd65 	bl	800429c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d2:	1d3a      	adds	r2, r7, #4
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f8ac 	bl	8003938 <xTaskCheckForTimeOut>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d124      	bne.n	8002830 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e8:	f000 fb57 	bl	8002e9a <prvIsQueueFull>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	3310      	adds	r3, #16
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f800 	bl	8003800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002802:	f000 fae2 	bl	8002dca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002806:	f000 fe3f 	bl	8003488 <xTaskResumeAll>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f af7c 	bne.w	800270a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <xQueueGenericSend+0x1f8>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	e772      	b.n	800270a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002826:	f000 fad0 	bl	8002dca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282a:	f000 fe2d 	bl	8003488 <xTaskResumeAll>
 800282e:	e76c      	b.n	800270a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002832:	f000 faca 	bl	8002dca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002836:	f000 fe27 	bl	8003488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800283a:	2300      	movs	r3, #0
		}
	}
}
 800283c:	4618      	mov	r0, r3
 800283e:	3738      	adds	r7, #56	; 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08e      	sub	sp, #56	; 0x38
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	623b      	str	r3, [r7, #32]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <xQueueGiveFromISR+0x48>
	__asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	61fb      	str	r3, [r7, #28]
}
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <xQueueGiveFromISR+0x58>
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <xQueueGiveFromISR+0x5c>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <xQueueGiveFromISR+0x5e>
 80028a4:	2300      	movs	r3, #0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	61bb      	str	r3, [r7, #24]
}
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028c0:	f001 fd7e 	bl	80043c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028c4:	f3ef 8211 	mrs	r2, BASEPRI
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	617a      	str	r2, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d22b      	bcs.n	8002948 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002902:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290a:	d112      	bne.n	8002932 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	d016      	beq.n	8002942 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	3324      	adds	r3, #36	; 0x24
 8002918:	4618      	mov	r0, r3
 800291a:	f000 ff95 	bl	8003848 <xTaskRemoveFromEventList>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e007      	b.n	8002942 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002936:	3301      	adds	r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	b25a      	sxtb	r2, r3
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002942:	2301      	movs	r3, #1
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e001      	b.n	800294c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002948:	2300      	movs	r3, #0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002956:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800295a:	4618      	mov	r0, r3
 800295c:	3738      	adds	r7, #56	; 0x38
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	; 0x38
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800296e:	2300      	movs	r3, #0
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002976:	2300      	movs	r3, #0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	623b      	str	r3, [r7, #32]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61fb      	str	r3, [r7, #28]
}
 80029b0:	bf00      	nop
 80029b2:	e7fe      	b.n	80029b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029b4:	f001 f90c 	bl	8003bd0 <xTaskGetSchedulerState>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d102      	bne.n	80029c4 <xQueueSemaphoreTake+0x60>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <xQueueSemaphoreTake+0x64>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <xQueueSemaphoreTake+0x66>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	61bb      	str	r3, [r7, #24]
}
 80029e0:	bf00      	nop
 80029e2:	e7fe      	b.n	80029e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80029e4:	f001 fc2a 	bl	800423c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d024      	beq.n	8002a3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a04:	f001 faae 	bl	8003f64 <pvTaskIncrementMutexHeldCount>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00f      	beq.n	8002a36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	3310      	adds	r3, #16
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ff14 	bl	8003848 <xTaskRemoveFromEventList>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a26:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <xQueueSemaphoreTake+0x214>)
 8002a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a36:	f001 fc31 	bl	800429c <vPortExitCritical>
				return pdPASS;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e097      	b.n	8002b6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	617b      	str	r3, [r7, #20]
}
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a60:	f001 fc1c 	bl	800429c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e082      	b.n	8002b6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 ff4a 	bl	800390c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a7c:	f001 fc0e 	bl	800429c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a80:	f000 fcf4 	bl	800346c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a84:	f001 fbda 	bl	800423c <vPortEnterCritical>
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a94:	d103      	bne.n	8002a9e <xQueueSemaphoreTake+0x13a>
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aaa:	d103      	bne.n	8002ab4 <xQueueSemaphoreTake+0x150>
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab4:	f001 fbf2 	bl	800429c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ab8:	463a      	mov	r2, r7
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 ff39 	bl	8003938 <xTaskCheckForTimeOut>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d132      	bne.n	8002b32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ace:	f000 f9ce 	bl	8002e6e <prvIsQueueEmpty>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d026      	beq.n	8002b26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002ae0:	f001 fbac 	bl	800423c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f88f 	bl	8003c0c <xTaskPriorityInherit>
 8002aee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002af0:	f001 fbd4 	bl	800429c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	3324      	adds	r3, #36	; 0x24
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fe7f 	bl	8003800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b04:	f000 f961 	bl	8002dca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b08:	f000 fcbe 	bl	8003488 <xTaskResumeAll>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f47f af68 	bne.w	80029e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <xQueueSemaphoreTake+0x214>)
 8002b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	e75e      	b.n	80029e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b28:	f000 f94f 	bl	8002dca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b2c:	f000 fcac 	bl	8003488 <xTaskResumeAll>
 8002b30:	e758      	b.n	80029e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b34:	f000 f949 	bl	8002dca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b38:	f000 fca6 	bl	8003488 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b3e:	f000 f996 	bl	8002e6e <prvIsQueueEmpty>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f43f af4d 	beq.w	80029e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002b50:	f001 fb74 	bl	800423c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b56:	f000 f891 	bl	8002c7c <prvGetDisinheritPriorityAfterTimeout>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 f95e 	bl	8003e24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002b68:	f001 fb98 	bl	800429c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3738      	adds	r7, #56	; 0x38
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08e      	sub	sp, #56	; 0x38
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	623b      	str	r3, [r7, #32]
}
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <xQueueReceiveFromISR+0x3a>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <xQueueReceiveFromISR+0x3e>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueReceiveFromISR+0x40>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61fb      	str	r3, [r7, #28]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bd6:	f001 fbf3 	bl	80043c0 <vPortValidateInterruptPriority>
	__asm volatile
 8002bda:	f3ef 8211 	mrs	r2, BASEPRI
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	61ba      	str	r2, [r7, #24]
 8002bf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002bf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02f      	beq.n	8002c62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c10:	f000 f8b5 	bl	8002d7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d112      	bne.n	8002c4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	3310      	adds	r3, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fe08 	bl	8003848 <xTaskRemoveFromEventList>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e007      	b.n	8002c5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c50:	3301      	adds	r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	b25a      	sxtb	r2, r3
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c60:	e001      	b.n	8002c66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f383 8811 	msr	BASEPRI, r3
}
 8002c70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3738      	adds	r7, #56	; 0x38
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e001      	b.n	8002c9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
	}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d14d      	bne.n	8002d6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 f81f 	bl	8003d18 <xTaskPriorityDisinherit>
 8002cda:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e043      	b.n	8002d6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d119      	bne.n	8002d1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6898      	ldr	r0, [r3, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	f001 fe9c 	bl	8004a32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	441a      	add	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d32b      	bcc.n	8002d6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e026      	b.n	8002d6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	68d8      	ldr	r0, [r3, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	461a      	mov	r2, r3
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	f001 fe82 	bl	8004a32 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	425b      	negs	r3, r3
 8002d38:	441a      	add	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d207      	bcs.n	8002d5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	425b      	negs	r3, r3
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d105      	bne.n	8002d6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d74:	697b      	ldr	r3, [r7, #20]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d018      	beq.n	8002dc2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d303      	bcc.n	8002db2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68d9      	ldr	r1, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f001 fe38 	bl	8004a32 <memcpy>
	}
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002dd2:	f001 fa33 	bl	800423c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ddc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dde:	e011      	b.n	8002e04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3324      	adds	r3, #36	; 0x24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fd2b 	bl	8003848 <xTaskRemoveFromEventList>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002df8:	f000 fe00 	bl	80039fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	dce9      	bgt.n	8002de0 <prvUnlockQueue+0x16>
 8002e0c:	e000      	b.n	8002e10 <prvUnlockQueue+0x46>
					break;
 8002e0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e18:	f001 fa40 	bl	800429c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e1c:	f001 fa0e 	bl	800423c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e28:	e011      	b.n	8002e4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3310      	adds	r3, #16
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fd06 	bl	8003848 <xTaskRemoveFromEventList>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e42:	f000 fddb 	bl	80039fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	dce9      	bgt.n	8002e2a <prvUnlockQueue+0x60>
 8002e56:	e000      	b.n	8002e5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e62:	f001 fa1b 	bl	800429c <vPortExitCritical>
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e76:	f001 f9e1 	bl	800423c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e001      	b.n	8002e8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e8c:	f001 fa06 	bl	800429c <vPortExitCritical>

	return xReturn;
 8002e90:	68fb      	ldr	r3, [r7, #12]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ea2:	f001 f9cb 	bl	800423c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d102      	bne.n	8002eb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e001      	b.n	8002ebc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ebc:	f001 f9ee 	bl	800429c <vPortExitCritical>

	return xReturn;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08e      	sub	sp, #56	; 0x38
 8002ece:	af04      	add	r7, sp, #16
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	623b      	str	r3, [r7, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <xTaskCreateStatic+0x46>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	61fb      	str	r3, [r7, #28]
}
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f10:	23b4      	movs	r3, #180	; 0xb4
 8002f12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2bb4      	cmp	r3, #180	; 0xb4
 8002f18:	d00a      	beq.n	8002f30 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	61bb      	str	r3, [r7, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01e      	beq.n	8002f74 <xTaskCreateStatic+0xaa>
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9303      	str	r3, [sp, #12]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	9302      	str	r3, [sp, #8]
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f850 	bl	800300c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f6e:	f000 f8e3 	bl	8003138 <prvAddNewTaskToReadyList>
 8002f72:	e001      	b.n	8002f78 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f78:	697b      	ldr	r3, [r7, #20]
	}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b08c      	sub	sp, #48	; 0x30
 8002f86:	af04      	add	r7, sp, #16
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 fa50 	bl	800443c <pvPortMalloc>
 8002f9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002fa4:	20b4      	movs	r0, #180	; 0xb4
 8002fa6:	f001 fa49 	bl	800443c <pvPortMalloc>
 8002faa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb8:	e005      	b.n	8002fc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f001 fb02 	bl	80045c4 <vPortFree>
 8002fc0:	e001      	b.n	8002fc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d017      	beq.n	8002ffc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9303      	str	r3, [sp, #12]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f80e 	bl	800300c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ff0:	69f8      	ldr	r0, [r7, #28]
 8002ff2:	f000 f8a1 	bl	8003138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e002      	b.n	8003002 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003000:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003002:	69bb      	ldr	r3, [r7, #24]
	}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003024:	3b01      	subs	r3, #1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <prvInitialiseNewTask+0x48>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	617b      	str	r3, [r7, #20]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	e012      	b.n	8003080 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	7819      	ldrb	r1, [r3, #0]
 8003062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	3334      	adds	r3, #52	; 0x34
 800306a:	460a      	mov	r2, r1
 800306c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4413      	add	r3, r2
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3301      	adds	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d9e9      	bls.n	800305a <prvInitialiseNewTask+0x4e>
 8003086:	e000      	b.n	800308a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003088:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2b06      	cmp	r3, #6
 8003096:	d901      	bls.n	800309c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003098:	2306      	movs	r3, #6
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	2200      	movs	r2, #0
 80030ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	3304      	adds	r3, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f8fd 	bl	80022b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	3318      	adds	r3, #24
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f8f8 	bl	80022b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	f1c3 0207 	rsb	r2, r3, #7
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	334c      	adds	r3, #76	; 0x4c
 80030ec:	2260      	movs	r2, #96	; 0x60
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fcac 	bl	8004a4e <memset>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	4a0c      	ldr	r2, [pc, #48]	; (800312c <prvInitialiseNewTask+0x120>)
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <prvInitialiseNewTask+0x124>)
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <prvInitialiseNewTask+0x128>)
 8003106:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	69b8      	ldr	r0, [r7, #24]
 800310e:	f000 ffa3 	bl	8004058 <pxPortInitialiseStack>
 8003112:	4602      	mov	r2, r0
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003122:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003124:	bf00      	nop
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	08005aac 	.word	0x08005aac
 8003130:	08005acc 	.word	0x08005acc
 8003134:	08005a8c 	.word	0x08005a8c

08003138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003140:	f001 f87c 	bl	800423c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <prvAddNewTaskToReadyList+0xb8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <prvAddNewTaskToReadyList+0xb8>)
 800314c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <prvAddNewTaskToReadyList+0xbc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003156:	4a27      	ldr	r2, [pc, #156]	; (80031f4 <prvAddNewTaskToReadyList+0xbc>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <prvAddNewTaskToReadyList+0xb8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d110      	bne.n	8003186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003164:	f000 fc6e 	bl	8003a44 <prvInitialiseTaskLists>
 8003168:	e00d      	b.n	8003186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <prvAddNewTaskToReadyList+0xc0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <prvAddNewTaskToReadyList+0xbc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	429a      	cmp	r2, r3
 800317e:	d802      	bhi.n	8003186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003180:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <prvAddNewTaskToReadyList+0xbc>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <prvAddNewTaskToReadyList+0xc4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <prvAddNewTaskToReadyList+0xc4>)
 800318e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <prvAddNewTaskToReadyList+0xc8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	4a18      	ldr	r2, [pc, #96]	; (8003200 <prvAddNewTaskToReadyList+0xc8>)
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a15      	ldr	r2, [pc, #84]	; (8003204 <prvAddNewTaskToReadyList+0xcc>)
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7ff f886 	bl	80022ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031be:	f001 f86d 	bl	800429c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <prvAddNewTaskToReadyList+0xc0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <prvAddNewTaskToReadyList+0xbc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d207      	bcs.n	80031e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <prvAddNewTaskToReadyList+0xd0>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	200004f0 	.word	0x200004f0
 80031f4:	200003f0 	.word	0x200003f0
 80031f8:	200004fc 	.word	0x200004fc
 80031fc:	2000050c 	.word	0x2000050c
 8003200:	200004f8 	.word	0x200004f8
 8003204:	200003f4 	.word	0x200003f4
 8003208:	e000ed04 	.word	0xe000ed04

0800320c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d017      	beq.n	800324e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <vTaskDelay+0x60>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <vTaskDelay+0x30>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60bb      	str	r3, [r7, #8]
}
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800323c:	f000 f916 	bl	800346c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003240:	2100      	movs	r1, #0
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fea2 	bl	8003f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003248:	f000 f91e 	bl	8003488 <xTaskResumeAll>
 800324c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <vTaskDelay+0x64>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000518 	.word	0x20000518
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800327c:	f000 ffde 	bl	800423c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <vTaskSuspend+0x18>
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <vTaskSuspend+0x104>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	e000      	b.n	800328e <vTaskSuspend+0x1a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3304      	adds	r3, #4
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f873 	bl	8002380 <uxListRemove>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d115      	bne.n	80032cc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	4935      	ldr	r1, [pc, #212]	; (800337c <vTaskSuspend+0x108>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <vTaskSuspend+0x58>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2201      	movs	r2, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43da      	mvns	r2, r3
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <vTaskSuspend+0x10c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4013      	ands	r3, r2
 80032c8:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <vTaskSuspend+0x10c>)
 80032ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3318      	adds	r3, #24
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f851 	bl	8002380 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4827      	ldr	r0, [pc, #156]	; (8003384 <vTaskSuspend+0x110>)
 80032e6:	f7fe fff0 	bl	80022ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d103      	bne.n	80032fe <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80032fe:	f000 ffcd 	bl	800429c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003302:	4b21      	ldr	r3, [pc, #132]	; (8003388 <vTaskSuspend+0x114>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800330a:	f000 ff97 	bl	800423c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800330e:	f000 fc3b 	bl	8003b88 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003312:	f000 ffc3 	bl	800429c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <vTaskSuspend+0x104>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d127      	bne.n	8003370 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <vTaskSuspend+0x114>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <vTaskSuspend+0x118>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <vTaskSuspend+0xd2>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	60bb      	str	r3, [r7, #8]
}
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <vTaskSuspend+0x11c>)
 8003348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003356:	e00b      	b.n	8003370 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <vTaskSuspend+0x110>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <vTaskSuspend+0x120>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d103      	bne.n	800336c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <vTaskSuspend+0x104>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
	}
 800336a:	e001      	b.n	8003370 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800336c:	f000 f9e6 	bl	800373c <vTaskSwitchContext>
	}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200003f0 	.word	0x200003f0
 800337c:	200003f4 	.word	0x200003f4
 8003380:	200004f8 	.word	0x200004f8
 8003384:	200004dc 	.word	0x200004dc
 8003388:	200004fc 	.word	0x200004fc
 800338c:	20000518 	.word	0x20000518
 8003390:	e000ed04 	.word	0xe000ed04
 8003394:	200004f0 	.word	0x200004f0

08003398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033a6:	463a      	mov	r2, r7
 80033a8:	1d39      	adds	r1, r7, #4
 80033aa:	f107 0308 	add.w	r3, r7, #8
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fc fece 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033b4:	6839      	ldr	r1, [r7, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	9202      	str	r2, [sp, #8]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2300      	movs	r3, #0
 80033c4:	460a      	mov	r2, r1
 80033c6:	4921      	ldr	r1, [pc, #132]	; (800344c <vTaskStartScheduler+0xb4>)
 80033c8:	4821      	ldr	r0, [pc, #132]	; (8003450 <vTaskStartScheduler+0xb8>)
 80033ca:	f7ff fd7e 	bl	8002eca <xTaskCreateStatic>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <vTaskStartScheduler+0xbc>)
 80033d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <vTaskStartScheduler+0xbc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033dc:	2301      	movs	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e001      	b.n	80033e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d11b      	bne.n	8003424 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	613b      	str	r3, [r7, #16]
}
 80033fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <vTaskStartScheduler+0xc0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	334c      	adds	r3, #76	; 0x4c
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <vTaskStartScheduler+0xc4>)
 8003408:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <vTaskStartScheduler+0xc8>)
 800340c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003410:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <vTaskStartScheduler+0xcc>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <vTaskStartScheduler+0xd0>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800341e:	f000 fe9b 	bl	8004158 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003422:	e00e      	b.n	8003442 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342a:	d10a      	bne.n	8003442 <vTaskStartScheduler+0xaa>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60fb      	str	r3, [r7, #12]
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <vTaskStartScheduler+0xa8>
}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	08005a6c 	.word	0x08005a6c
 8003450:	08003a15 	.word	0x08003a15
 8003454:	20000514 	.word	0x20000514
 8003458:	200003f0 	.word	0x200003f0
 800345c:	20000010 	.word	0x20000010
 8003460:	20000510 	.word	0x20000510
 8003464:	200004fc 	.word	0x200004fc
 8003468:	200004f4 	.word	0x200004f4

0800346c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <vTaskSuspendAll+0x18>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	4a03      	ldr	r2, [pc, #12]	; (8003484 <vTaskSuspendAll+0x18>)
 8003478:	6013      	str	r3, [r2, #0]
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000518 	.word	0x20000518

08003488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003496:	4b41      	ldr	r3, [pc, #260]	; (800359c <xTaskResumeAll+0x114>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	603b      	str	r3, [r7, #0]
}
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034b4:	f000 fec2 	bl	800423c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034b8:	4b38      	ldr	r3, [pc, #224]	; (800359c <xTaskResumeAll+0x114>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3b01      	subs	r3, #1
 80034be:	4a37      	ldr	r2, [pc, #220]	; (800359c <xTaskResumeAll+0x114>)
 80034c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <xTaskResumeAll+0x114>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d161      	bne.n	800358e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ca:	4b35      	ldr	r3, [pc, #212]	; (80035a0 <xTaskResumeAll+0x118>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d05d      	beq.n	800358e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d2:	e02e      	b.n	8003532 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <xTaskResumeAll+0x11c>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3318      	adds	r3, #24
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe ff4d 	bl	8002380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe ff48 	bl	8002380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <xTaskResumeAll+0x120>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <xTaskResumeAll+0x120>)
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4a27      	ldr	r2, [pc, #156]	; (80035ac <xTaskResumeAll+0x124>)
 8003510:	441a      	add	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3304      	adds	r3, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f7fe fed6 	bl	80022ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <xTaskResumeAll+0x128>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <xTaskResumeAll+0x12c>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <xTaskResumeAll+0x11c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1cc      	bne.n	80034d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003540:	f000 fb22 	bl	8003b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <xTaskResumeAll+0x130>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003550:	f000 f836 	bl	80035c0 <xTaskIncrementTick>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <xTaskResumeAll+0x12c>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f1      	bne.n	8003550 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <xTaskResumeAll+0x130>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <xTaskResumeAll+0x12c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800357a:	2301      	movs	r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <xTaskResumeAll+0x134>)
 8003580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800358e:	f000 fe85 	bl	800429c <vPortExitCritical>

	return xAlreadyYielded;
 8003592:	68bb      	ldr	r3, [r7, #8]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000518 	.word	0x20000518
 80035a0:	200004f0 	.word	0x200004f0
 80035a4:	200004b0 	.word	0x200004b0
 80035a8:	200004f8 	.word	0x200004f8
 80035ac:	200003f4 	.word	0x200003f4
 80035b0:	200003f0 	.word	0x200003f0
 80035b4:	20000504 	.word	0x20000504
 80035b8:	20000500 	.word	0x20000500
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <xTaskIncrementTick+0x150>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 808d 	bne.w	80036ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <xTaskIncrementTick+0x154>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035dc:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <xTaskIncrementTick+0x154>)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d120      	bne.n	800362a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80035e8:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <xTaskIncrementTick+0x158>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <xTaskIncrementTick+0x48>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	603b      	str	r3, [r7, #0]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <xTaskIncrementTick+0x46>
 8003608:	4b43      	ldr	r3, [pc, #268]	; (8003718 <xTaskIncrementTick+0x158>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <xTaskIncrementTick+0x15c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a41      	ldr	r2, [pc, #260]	; (8003718 <xTaskIncrementTick+0x158>)
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4a41      	ldr	r2, [pc, #260]	; (800371c <xTaskIncrementTick+0x15c>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <xTaskIncrementTick+0x160>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a3f      	ldr	r2, [pc, #252]	; (8003720 <xTaskIncrementTick+0x160>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	f000 faaf 	bl	8003b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800362a:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <xTaskIncrementTick+0x164>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d34d      	bcc.n	80036d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003634:	4b38      	ldr	r3, [pc, #224]	; (8003718 <xTaskIncrementTick+0x158>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <xTaskIncrementTick+0x82>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <xTaskIncrementTick+0x84>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <xTaskIncrementTick+0x164>)
 800364a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800364e:	601a      	str	r2, [r3, #0]
					break;
 8003650:	e03e      	b.n	80036d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <xTaskIncrementTick+0x158>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	429a      	cmp	r2, r3
 8003668:	d203      	bcs.n	8003672 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800366a:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <xTaskIncrementTick+0x164>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6013      	str	r3, [r2, #0]
						break;
 8003670:	e02e      	b.n	80036d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3304      	adds	r3, #4
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fe82 	bl	8002380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3318      	adds	r3, #24
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe fe79 	bl	8002380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	4b24      	ldr	r3, [pc, #144]	; (8003728 <xTaskIncrementTick+0x168>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <xTaskIncrementTick+0x168>)
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4a1f      	ldr	r2, [pc, #124]	; (800372c <xTaskIncrementTick+0x16c>)
 80036ae:	441a      	add	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f7fe fe07 	bl	80022ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <xTaskIncrementTick+0x170>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d3b4      	bcc.n	8003634 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ce:	e7b1      	b.n	8003634 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <xTaskIncrementTick+0x170>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d6:	4915      	ldr	r1, [pc, #84]	; (800372c <xTaskIncrementTick+0x16c>)
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d907      	bls.n	80036f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80036e8:	2301      	movs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e004      	b.n	80036f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <xTaskIncrementTick+0x174>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <xTaskIncrementTick+0x174>)
 80036f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <xTaskIncrementTick+0x178>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003704:	697b      	ldr	r3, [r7, #20]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000518 	.word	0x20000518
 8003714:	200004f4 	.word	0x200004f4
 8003718:	200004a8 	.word	0x200004a8
 800371c:	200004ac 	.word	0x200004ac
 8003720:	20000508 	.word	0x20000508
 8003724:	20000510 	.word	0x20000510
 8003728:	200004f8 	.word	0x200004f8
 800372c:	200003f4 	.word	0x200003f4
 8003730:	200003f0 	.word	0x200003f0
 8003734:	20000500 	.word	0x20000500
 8003738:	20000504 	.word	0x20000504

0800373c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <vTaskSwitchContext+0xac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <vTaskSwitchContext+0xb0>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003750:	e044      	b.n	80037dc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <vTaskSwitchContext+0xb0>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <vTaskSwitchContext+0xb4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003766:	7afb      	ldrb	r3, [r7, #11]
 8003768:	f1c3 031f 	rsb	r3, r3, #31
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	4921      	ldr	r1, [pc, #132]	; (80037f4 <vTaskSwitchContext+0xb8>)
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	607b      	str	r3, [r7, #4]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <vTaskSwitchContext+0x5a>
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <vTaskSwitchContext+0xb8>)
 80037a4:	4413      	add	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	3308      	adds	r3, #8
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d104      	bne.n	80037c8 <vTaskSwitchContext+0x8c>
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <vTaskSwitchContext+0xbc>)
 80037d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <vTaskSwitchContext+0xbc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	334c      	adds	r3, #76	; 0x4c
 80037d8:	4a08      	ldr	r2, [pc, #32]	; (80037fc <vTaskSwitchContext+0xc0>)
 80037da:	6013      	str	r3, [r2, #0]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000518 	.word	0x20000518
 80037ec:	20000504 	.word	0x20000504
 80037f0:	200004f8 	.word	0x200004f8
 80037f4:	200003f4 	.word	0x200003f4
 80037f8:	200003f0 	.word	0x200003f0
 80037fc:	20000010 	.word	0x20000010

08003800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <vTaskPlaceOnEventList+0x44>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3318      	adds	r3, #24
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe fd6e 	bl	8002310 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003834:	2101      	movs	r1, #1
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	f000 fba8 	bl	8003f8c <prvAddCurrentTaskToDelayedList>
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200003f0 	.word	0x200003f0

08003848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	3318      	adds	r3, #24
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fd81 	bl	8002380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387e:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <xTaskRemoveFromEventList+0xac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11c      	bne.n	80038c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3304      	adds	r3, #4
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fd78 	bl	8002380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <xTaskRemoveFromEventList+0xb0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <xTaskRemoveFromEventList+0xb0>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <xTaskRemoveFromEventList+0xb4>)
 80038b0:	441a      	add	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe fd06 	bl	80022ca <vListInsertEnd>
 80038be:	e005      	b.n	80038cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4619      	mov	r1, r3
 80038c6:	480e      	ldr	r0, [pc, #56]	; (8003900 <xTaskRemoveFromEventList+0xb8>)
 80038c8:	f7fe fcff 	bl	80022ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <xTaskRemoveFromEventList+0xbc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d905      	bls.n	80038e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038da:	2301      	movs	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <xTaskRemoveFromEventList+0xc0>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e001      	b.n	80038ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038ea:	697b      	ldr	r3, [r7, #20]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000518 	.word	0x20000518
 80038f8:	200004f8 	.word	0x200004f8
 80038fc:	200003f4 	.word	0x200003f4
 8003900:	200004b0 	.word	0x200004b0
 8003904:	200003f0 	.word	0x200003f0
 8003908:	20000504 	.word	0x20000504

0800390c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <vTaskInternalSetTimeOutState+0x24>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <vTaskInternalSetTimeOutState+0x28>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	605a      	str	r2, [r3, #4]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000508 	.word	0x20000508
 8003934:	200004f4 	.word	0x200004f4

08003938 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60fb      	str	r3, [r7, #12]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800397a:	f000 fc5f 	bl	800423c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <xTaskCheckForTimeOut+0xbc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003996:	d102      	bne.n	800399e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e023      	b.n	80039e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <xTaskCheckForTimeOut+0xc0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d007      	beq.n	80039ba <xTaskCheckForTimeOut+0x82>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	e015      	b.n	80039e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d20b      	bcs.n	80039dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff9b 	bl	800390c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e004      	b.n	80039e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039e6:	f000 fc59 	bl	800429c <vPortExitCritical>

	return xReturn;
 80039ea:	69fb      	ldr	r3, [r7, #28]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	200004f4 	.word	0x200004f4
 80039f8:	20000508 	.word	0x20000508

080039fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <vTaskMissedYield+0x14>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000504 	.word	0x20000504

08003a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a1c:	f000 f852 	bl	8003ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <prvIdleTask+0x28>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d9f9      	bls.n	8003a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <prvIdleTask+0x2c>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a38:	e7f0      	b.n	8003a1c <prvIdleTask+0x8>
 8003a3a:	bf00      	nop
 8003a3c:	200003f4 	.word	0x200003f4
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	e00c      	b.n	8003a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <prvInitialiseTaskLists+0x60>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fc08 	bl	8002274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3301      	adds	r3, #1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d9ef      	bls.n	8003a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a70:	480d      	ldr	r0, [pc, #52]	; (8003aa8 <prvInitialiseTaskLists+0x64>)
 8003a72:	f7fe fbff 	bl	8002274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a76:	480d      	ldr	r0, [pc, #52]	; (8003aac <prvInitialiseTaskLists+0x68>)
 8003a78:	f7fe fbfc 	bl	8002274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <prvInitialiseTaskLists+0x6c>)
 8003a7e:	f7fe fbf9 	bl	8002274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a82:	480c      	ldr	r0, [pc, #48]	; (8003ab4 <prvInitialiseTaskLists+0x70>)
 8003a84:	f7fe fbf6 	bl	8002274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <prvInitialiseTaskLists+0x74>)
 8003a8a:	f7fe fbf3 	bl	8002274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <prvInitialiseTaskLists+0x78>)
 8003a90:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <prvInitialiseTaskLists+0x64>)
 8003a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <prvInitialiseTaskLists+0x7c>)
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <prvInitialiseTaskLists+0x68>)
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200003f4 	.word	0x200003f4
 8003aa8:	20000480 	.word	0x20000480
 8003aac:	20000494 	.word	0x20000494
 8003ab0:	200004b0 	.word	0x200004b0
 8003ab4:	200004c4 	.word	0x200004c4
 8003ab8:	200004dc 	.word	0x200004dc
 8003abc:	200004a8 	.word	0x200004a8
 8003ac0:	200004ac 	.word	0x200004ac

08003ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aca:	e019      	b.n	8003b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003acc:	f000 fbb6 	bl	800423c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <prvCheckTasksWaitingTermination+0x50>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fc4f 	bl	8002380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <prvCheckTasksWaitingTermination+0x54>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <prvCheckTasksWaitingTermination+0x54>)
 8003aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <prvCheckTasksWaitingTermination+0x58>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <prvCheckTasksWaitingTermination+0x58>)
 8003af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003af6:	f000 fbd1 	bl	800429c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f810 	bl	8003b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <prvCheckTasksWaitingTermination+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e1      	bne.n	8003acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200004c4 	.word	0x200004c4
 8003b18:	200004f0 	.word	0x200004f0
 8003b1c:	200004d8 	.word	0x200004d8

08003b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	334c      	adds	r3, #76	; 0x4c
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 f8c7 	bl	8004cc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d108      	bne.n	8003b4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fd3f 	bl	80045c4 <vPortFree>
				vPortFree( pxTCB );
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fd3c 	bl	80045c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b4c:	e018      	b.n	8003b80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d103      	bne.n	8003b60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fd33 	bl	80045c4 <vPortFree>
	}
 8003b5e:	e00f      	b.n	8003b80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d00a      	beq.n	8003b80 <prvDeleteTCB+0x60>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	60fb      	str	r3, [r7, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <prvDeleteTCB+0x5e>
	}
 8003b80:	bf00      	nop
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <prvResetNextTaskUnblockTime+0x40>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <prvResetNextTaskUnblockTime+0x14>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <prvResetNextTaskUnblockTime+0x16>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <prvResetNextTaskUnblockTime+0x44>)
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ba8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003baa:	e008      	b.n	8003bbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <prvResetNextTaskUnblockTime+0x40>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <prvResetNextTaskUnblockTime+0x44>)
 8003bbc:	6013      	str	r3, [r2, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	200004a8 	.word	0x200004a8
 8003bcc:	20000510 	.word	0x20000510

08003bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <xTaskGetSchedulerState+0x34>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bde:	2301      	movs	r3, #1
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	e008      	b.n	8003bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <xTaskGetSchedulerState+0x38>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d102      	bne.n	8003bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bec:	2302      	movs	r3, #2
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	e001      	b.n	8003bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bf6:	687b      	ldr	r3, [r7, #4]
	}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200004fc 	.word	0x200004fc
 8003c08:	20000518 	.word	0x20000518

08003c0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06e      	beq.n	8003d00 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <xTaskPriorityInherit+0x100>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d25e      	bcs.n	8003cee <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db06      	blt.n	8003c46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c38:	4b34      	ldr	r3, [pc, #208]	; (8003d0c <xTaskPriorityInherit+0x100>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	f1c3 0207 	rsb	r2, r3, #7
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6959      	ldr	r1, [r3, #20]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a2e      	ldr	r2, [pc, #184]	; (8003d10 <xTaskPriorityInherit+0x104>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	d101      	bne.n	8003c62 <xTaskPriorityInherit+0x56>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <xTaskPriorityInherit+0x58>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03a      	beq.n	8003cde <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fb87 	bl	8002380 <uxListRemove>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d115      	bne.n	8003ca4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	4924      	ldr	r1, [pc, #144]	; (8003d10 <xTaskPriorityInherit+0x104>)
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <xTaskPriorityInherit+0x98>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	2201      	movs	r2, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <xTaskPriorityInherit+0x108>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <xTaskPriorityInherit+0x108>)
 8003ca2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <xTaskPriorityInherit+0x100>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <xTaskPriorityInherit+0x108>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <xTaskPriorityInherit+0x108>)
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <xTaskPriorityInherit+0x104>)
 8003cce:	441a      	add	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7fe faf7 	bl	80022ca <vListInsertEnd>
 8003cdc:	e004      	b.n	8003ce8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <xTaskPriorityInherit+0x100>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e008      	b.n	8003d00 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <xTaskPriorityInherit+0x100>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d201      	bcs.n	8003d00 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d00:	68fb      	ldr	r3, [r7, #12]
	}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200003f0 	.word	0x200003f0
 8003d10:	200003f4 	.word	0x200003f4
 8003d14:	200004f8 	.word	0x200004f8

08003d18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d06e      	beq.n	8003e0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <xTaskPriorityDisinherit+0x100>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d00a      	beq.n	8003d4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60bb      	str	r3, [r7, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d044      	beq.n	8003e0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d140      	bne.n	8003e0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe faf6 	bl	8002380 <uxListRemove>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	491f      	ldr	r1, [pc, #124]	; (8003e1c <xTaskPriorityDisinherit+0x104>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskPriorityDisinherit+0xae>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2201      	movs	r2, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <xTaskPriorityDisinherit+0x108>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <xTaskPriorityDisinherit+0x108>)
 8003dc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f1c3 0207 	rsb	r2, r3, #7
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	2201      	movs	r2, #1
 8003de0:	409a      	lsls	r2, r3
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <xTaskPriorityDisinherit+0x108>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	4a0d      	ldr	r2, [pc, #52]	; (8003e20 <xTaskPriorityDisinherit+0x108>)
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <xTaskPriorityDisinherit+0x104>)
 8003dfa:	441a      	add	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f7fe fa61 	bl	80022ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e0c:	697b      	ldr	r3, [r7, #20]
	}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	200003f0 	.word	0x200003f0
 8003e1c:	200003f4 	.word	0x200003f4
 8003e20:	200004f8 	.word	0x200004f8

08003e24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8088 	beq.w	8003f4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	60fb      	str	r3, [r7, #12]
}
 8003e58:	bf00      	nop
 8003e5a:	e7fe      	b.n	8003e5a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d902      	bls.n	8003e6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e002      	b.n	8003e72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d068      	beq.n	8003f4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d163      	bne.n	8003f4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e86:	4b34      	ldr	r3, [pc, #208]	; (8003f58 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d10a      	bne.n	8003ea6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60bb      	str	r3, [r7, #8]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	db04      	blt.n	8003ec4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f1c3 0207 	rsb	r2, r3, #7
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4299      	cmp	r1, r3
 8003ed8:	d101      	bne.n	8003ede <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d034      	beq.n	8003f4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe fa49 	bl	8002380 <uxListRemove>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d115      	bne.n	8003f20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4918      	ldr	r1, [pc, #96]	; (8003f5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	2201      	movs	r2, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43da      	mvns	r2, r3
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f1e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	2201      	movs	r2, #1
 8003f26:	409a      	lsls	r2, r3
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003f40:	441a      	add	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fe f9be 	bl	80022ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f4e:	bf00      	nop
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200003f0 	.word	0x200003f0
 8003f5c:	200003f4 	.word	0x200003f4
 8003f60:	200004f8 	.word	0x200004f8

08003f64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f76:	3201      	adds	r2, #1
 8003f78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003f7a:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <pvTaskIncrementMutexHeldCount+0x24>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
	}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	200003f0 	.word	0x200003f0

08003f8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f96:	4b29      	ldr	r3, [pc, #164]	; (800403c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f9c:	4b28      	ldr	r3, [pc, #160]	; (8004040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe f9ec 	bl	8002380 <uxListRemove>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	4b21      	ldr	r3, [pc, #132]	; (8004044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	4a20      	ldr	r2, [pc, #128]	; (8004044 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fcc:	d10a      	bne.n	8003fe4 <prvAddCurrentTaskToDelayedList+0x58>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fd4:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4619      	mov	r1, r3
 8003fdc:	481a      	ldr	r0, [pc, #104]	; (8004048 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fde:	f7fe f974 	bl	80022ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fe2:	e026      	b.n	8004032 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d209      	bcs.n	8004010 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7fe f981 	bl	8002310 <vListInsert>
}
 800400e:	e010      	b.n	8004032 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7fe f977 	bl	8002310 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d202      	bcs.n	8004032 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800402c:	4a09      	ldr	r2, [pc, #36]	; (8004054 <prvAddCurrentTaskToDelayedList+0xc8>)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6013      	str	r3, [r2, #0]
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	200004f4 	.word	0x200004f4
 8004040:	200003f0 	.word	0x200003f0
 8004044:	200004f8 	.word	0x200004f8
 8004048:	200004dc 	.word	0x200004dc
 800404c:	200004ac 	.word	0x200004ac
 8004050:	200004a8 	.word	0x200004a8
 8004054:	20000510 	.word	0x20000510

08004058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3b04      	subs	r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b04      	subs	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0201 	bic.w	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b04      	subs	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <pxPortInitialiseStack+0x54>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3b14      	subs	r3, #20
 8004092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b20      	subs	r3, #32
 800409e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040a0:	68fb      	ldr	r3, [r7, #12]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	080040b1 	.word	0x080040b1

080040b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <prvTaskExitError+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c2:	d00a      	beq.n	80040da <prvTaskExitError+0x2a>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
}
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <prvTaskExitError+0x28>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
}
 80040ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ee:	bf00      	nop
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0fc      	beq.n	80040f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	2000000c 	.word	0x2000000c
	...

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	f04e 0e0d 	orr.w	lr, lr, #13
 800412e:	4770      	bx	lr

08004130 <pxCurrentTCBConst2>:
 8004130:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004138:	4806      	ldr	r0, [pc, #24]	; (8004154 <prvPortStartFirstTask+0x1c>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	b662      	cpsie	i
 8004144:	b661      	cpsie	f
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	df00      	svc	0
 8004150:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004152:	bf00      	nop
 8004154:	e000ed08 	.word	0xe000ed08

08004158 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415e:	4b32      	ldr	r3, [pc, #200]	; (8004228 <xPortStartScheduler+0xd0>)
 8004160:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4b2a      	ldr	r3, [pc, #168]	; (800422c <xPortStartScheduler+0xd4>)
 8004184:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004186:	4b2a      	ldr	r3, [pc, #168]	; (8004230 <xPortStartScheduler+0xd8>)
 8004188:	2207      	movs	r2, #7
 800418a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800418c:	e009      	b.n	80041a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800418e:	4b28      	ldr	r3, [pc, #160]	; (8004230 <xPortStartScheduler+0xd8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3b01      	subs	r3, #1
 8004194:	4a26      	ldr	r2, [pc, #152]	; (8004230 <xPortStartScheduler+0xd8>)
 8004196:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d0ef      	beq.n	800418e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <xPortStartScheduler+0xd8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d00a      	beq.n	80041d0 <xPortStartScheduler+0x78>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <xPortStartScheduler+0xd8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	4a16      	ldr	r2, [pc, #88]	; (8004230 <xPortStartScheduler+0xd8>)
 80041d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041da:	4b15      	ldr	r3, [pc, #84]	; (8004230 <xPortStartScheduler+0xd8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <xPortStartScheduler+0xd8>)
 80041e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <xPortStartScheduler+0xdc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a10      	ldr	r2, [pc, #64]	; (8004234 <xPortStartScheduler+0xdc>)
 80041f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041fa:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <xPortStartScheduler+0xdc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <xPortStartScheduler+0xdc>)
 8004200:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004204:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004206:	f000 f8b9 	bl	800437c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <xPortStartScheduler+0xe0>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004210:	f7ff ff92 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004214:	f7ff fa92 	bl	800373c <vTaskSwitchContext>
	prvTaskExitError();
 8004218:	f7ff ff4a 	bl	80040b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	e000e400 	.word	0xe000e400
 800422c:	2000051c 	.word	0x2000051c
 8004230:	20000520 	.word	0x20000520
 8004234:	e000ed20 	.word	0xe000ed20
 8004238:	2000000c 	.word	0x2000000c

0800423c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	607b      	str	r3, [r7, #4]
}
 8004254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <vPortEnterCritical+0x58>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <vPortEnterCritical+0x58>)
 800425e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <vPortEnterCritical+0x58>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10f      	bne.n	8004288 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <vPortEnterCritical+0x5c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <vPortEnterCritical+0x4c>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	603b      	str	r3, [r7, #0]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <vPortEnterCritical+0x4a>
	}
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000000c 	.word	0x2000000c
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <vPortExitCritical+0x4c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <vPortExitCritical+0x24>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	607b      	str	r3, [r7, #4]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <vPortExitCritical+0x4c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <vPortExitCritical+0x4c>)
 80042c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <vPortExitCritical+0x4c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <vPortExitCritical+0x42>
 80042d2:	2300      	movs	r3, #0
 80042d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f383 8811 	msr	BASEPRI, r3
}
 80042dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	00000000 	.word	0x00000000

080042f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042f0:	f3ef 8009 	mrs	r0, PSP
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <pxCurrentTCBConst>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004300:	6010      	str	r0, [r2, #0]
 8004302:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004306:	f04f 0050 	mov.w	r0, #80	; 0x50
 800430a:	f380 8811 	msr	BASEPRI, r0
 800430e:	f7ff fa15 	bl	800373c <vTaskSwitchContext>
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	6808      	ldr	r0, [r1, #0]
 8004322:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004326:	f380 8809 	msr	PSP, r0
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	4770      	bx	lr

08004330 <pxCurrentTCBConst>:
 8004330:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	607b      	str	r3, [r7, #4]
}
 8004350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004352:	f7ff f935 	bl	80035c0 <xTaskIncrementTick>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <SysTick_Handler+0x40>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	2300      	movs	r3, #0
 8004366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f383 8811 	msr	BASEPRI, r3
}
 800436e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <vPortSetupTimerInterrupt+0x30>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <vPortSetupTimerInterrupt+0x34>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <vPortSetupTimerInterrupt+0x38>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <vPortSetupTimerInterrupt+0x3c>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <vPortSetupTimerInterrupt+0x40>)
 800439a:	3b01      	subs	r3, #1
 800439c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800439e:	4b03      	ldr	r3, [pc, #12]	; (80043ac <vPortSetupTimerInterrupt+0x30>)
 80043a0:	2207      	movs	r2, #7
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	e000e010 	.word	0xe000e010
 80043b0:	e000e018 	.word	0xe000e018
 80043b4:	20000000 	.word	0x20000000
 80043b8:	10624dd3 	.word	0x10624dd3
 80043bc:	e000e014 	.word	0xe000e014

080043c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043c6:	f3ef 8305 	mrs	r3, IPSR
 80043ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	d914      	bls.n	80043fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <vPortValidateInterruptPriority+0x6c>)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043dc:	4b14      	ldr	r3, [pc, #80]	; (8004430 <vPortValidateInterruptPriority+0x70>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	7afa      	ldrb	r2, [r7, #11]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d20a      	bcs.n	80043fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	607b      	str	r3, [r7, #4]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <vPortValidateInterruptPriority+0x74>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <vPortValidateInterruptPriority+0x78>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d90a      	bls.n	8004422 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	603b      	str	r3, [r7, #0]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <vPortValidateInterruptPriority+0x60>
	}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	e000e3f0 	.word	0xe000e3f0
 8004430:	2000051c 	.word	0x2000051c
 8004434:	e000ed0c 	.word	0xe000ed0c
 8004438:	20000520 	.word	0x20000520

0800443c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004448:	f7ff f810 	bl	800346c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800444c:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <pvPortMalloc+0x174>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004454:	f000 f910 	bl	8004678 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004458:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <pvPortMalloc+0x178>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 808e 	bne.w	8004582 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01d      	beq.n	80044a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800446c:	2208      	movs	r2, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f023 0307 	bic.w	r3, r3, #7
 8004484:	3308      	adds	r3, #8
 8004486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <pvPortMalloc+0x6c>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	617b      	str	r3, [r7, #20]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d069      	beq.n	8004582 <pvPortMalloc+0x146>
 80044ae:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <pvPortMalloc+0x17c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d864      	bhi.n	8004582 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044b8:	4b40      	ldr	r3, [pc, #256]	; (80045bc <pvPortMalloc+0x180>)
 80044ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044bc:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <pvPortMalloc+0x180>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c2:	e004      	b.n	80044ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d903      	bls.n	80044e0 <pvPortMalloc+0xa4>
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f1      	bne.n	80044c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <pvPortMalloc+0x174>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d04b      	beq.n	8004582 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2208      	movs	r2, #8
 80044f0:	4413      	add	r3, r2
 80044f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	2308      	movs	r3, #8
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	429a      	cmp	r2, r3
 800450a:	d91f      	bls.n	800454c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <pvPortMalloc+0xf8>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	613b      	str	r3, [r7, #16]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004546:	69b8      	ldr	r0, [r7, #24]
 8004548:	f000 f8f8 	bl	800473c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <pvPortMalloc+0x17c>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <pvPortMalloc+0x17c>)
 8004558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <pvPortMalloc+0x17c>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <pvPortMalloc+0x184>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d203      	bcs.n	800456e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <pvPortMalloc+0x17c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <pvPortMalloc+0x184>)
 800456c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <pvPortMalloc+0x178>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	431a      	orrs	r2, r3
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004582:	f7fe ff81 	bl	8003488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <pvPortMalloc+0x16a>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60fb      	str	r3, [r7, #12]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <pvPortMalloc+0x168>
	return pvReturn;
 80045a6:	69fb      	ldr	r3, [r7, #28]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000112c 	.word	0x2000112c
 80045b4:	20001138 	.word	0x20001138
 80045b8:	20001130 	.word	0x20001130
 80045bc:	20001124 	.word	0x20001124
 80045c0:	20001134 	.word	0x20001134

080045c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d048      	beq.n	8004668 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045d6:	2308      	movs	r3, #8
 80045d8:	425b      	negs	r3, r3
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4413      	add	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	4b21      	ldr	r3, [pc, #132]	; (8004670 <vPortFree+0xac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10a      	bne.n	8004608 <vPortFree+0x44>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	60fb      	str	r3, [r7, #12]
}
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <vPortFree+0x62>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60bb      	str	r3, [r7, #8]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <vPortFree+0xac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d019      	beq.n	8004668 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d115      	bne.n	8004668 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortFree+0xac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800464c:	f7fe ff0e 	bl	800346c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <vPortFree+0xb0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4413      	add	r3, r2
 800465a:	4a06      	ldr	r2, [pc, #24]	; (8004674 <vPortFree+0xb0>)
 800465c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f000 f86c 	bl	800473c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004664:	f7fe ff10 	bl	8003488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20001138 	.word	0x20001138
 8004674:	20001130 	.word	0x20001130

08004678 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800467e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004682:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <prvHeapInit+0xac>)
 8004686:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <prvHeapInit+0xac>)
 80046a8:	4413      	add	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <prvHeapInit+0xb0>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046b6:	4b1c      	ldr	r3, [pc, #112]	; (8004728 <prvHeapInit+0xb0>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046c4:	2208      	movs	r2, #8
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a15      	ldr	r2, [pc, #84]	; (800472c <prvHeapInit+0xb4>)
 80046d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <prvHeapInit+0xb4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <prvHeapInit+0xb4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <prvHeapInit+0xb4>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <prvHeapInit+0xb8>)
 8004706:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a09      	ldr	r2, [pc, #36]	; (8004734 <prvHeapInit+0xbc>)
 800470e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <prvHeapInit+0xc0>)
 8004712:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000524 	.word	0x20000524
 8004728:	20001124 	.word	0x20001124
 800472c:	2000112c 	.word	0x2000112c
 8004730:	20001134 	.word	0x20001134
 8004734:	20001130 	.word	0x20001130
 8004738:	20001138 	.word	0x20001138

0800473c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <prvInsertBlockIntoFreeList+0xa8>)
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e002      	b.n	8004750 <prvInsertBlockIntoFreeList+0x14>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d8f7      	bhi.n	800474a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d108      	bne.n	800477e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	441a      	add	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d118      	bne.n	80047c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <prvInsertBlockIntoFreeList+0xac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d00d      	beq.n	80047ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e008      	b.n	80047cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <prvInsertBlockIntoFreeList+0xac>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e003      	b.n	80047cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d002      	beq.n	80047da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	20001124 	.word	0x20001124
 80047e8:	2000112c 	.word	0x2000112c

080047ec <__errno>:
 80047ec:	4b01      	ldr	r3, [pc, #4]	; (80047f4 <__errno+0x8>)
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000010 	.word	0x20000010

080047f8 <std>:
 80047f8:	2300      	movs	r3, #0
 80047fa:	b510      	push	{r4, lr}
 80047fc:	4604      	mov	r4, r0
 80047fe:	e9c0 3300 	strd	r3, r3, [r0]
 8004802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004806:	6083      	str	r3, [r0, #8]
 8004808:	8181      	strh	r1, [r0, #12]
 800480a:	6643      	str	r3, [r0, #100]	; 0x64
 800480c:	81c2      	strh	r2, [r0, #14]
 800480e:	6183      	str	r3, [r0, #24]
 8004810:	4619      	mov	r1, r3
 8004812:	2208      	movs	r2, #8
 8004814:	305c      	adds	r0, #92	; 0x5c
 8004816:	f000 f91a 	bl	8004a4e <memset>
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <std+0x38>)
 800481c:	6224      	str	r4, [r4, #32]
 800481e:	6263      	str	r3, [r4, #36]	; 0x24
 8004820:	4b04      	ldr	r3, [pc, #16]	; (8004834 <std+0x3c>)
 8004822:	62a3      	str	r3, [r4, #40]	; 0x28
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <std+0x40>)
 8004826:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <std+0x44>)
 800482a:	6323      	str	r3, [r4, #48]	; 0x30
 800482c:	bd10      	pop	{r4, pc}
 800482e:	bf00      	nop
 8004830:	08004d99 	.word	0x08004d99
 8004834:	08004dbb 	.word	0x08004dbb
 8004838:	08004df3 	.word	0x08004df3
 800483c:	08004e17 	.word	0x08004e17

08004840 <_cleanup_r>:
 8004840:	4901      	ldr	r1, [pc, #4]	; (8004848 <_cleanup_r+0x8>)
 8004842:	f000 b8af 	b.w	80049a4 <_fwalk_reent>
 8004846:	bf00      	nop
 8004848:	080050e9 	.word	0x080050e9

0800484c <__sfmoreglue>:
 800484c:	2268      	movs	r2, #104	; 0x68
 800484e:	b570      	push	{r4, r5, r6, lr}
 8004850:	1e4d      	subs	r5, r1, #1
 8004852:	4355      	muls	r5, r2
 8004854:	460e      	mov	r6, r1
 8004856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800485a:	f000 f921 	bl	8004aa0 <_malloc_r>
 800485e:	4604      	mov	r4, r0
 8004860:	b140      	cbz	r0, 8004874 <__sfmoreglue+0x28>
 8004862:	2100      	movs	r1, #0
 8004864:	e9c0 1600 	strd	r1, r6, [r0]
 8004868:	300c      	adds	r0, #12
 800486a:	60a0      	str	r0, [r4, #8]
 800486c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004870:	f000 f8ed 	bl	8004a4e <memset>
 8004874:	4620      	mov	r0, r4
 8004876:	bd70      	pop	{r4, r5, r6, pc}

08004878 <__sfp_lock_acquire>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__sfp_lock_acquire+0x8>)
 800487a:	f000 b8d8 	b.w	8004a2e <__retarget_lock_acquire_recursive>
 800487e:	bf00      	nop
 8004880:	2000113d 	.word	0x2000113d

08004884 <__sfp_lock_release>:
 8004884:	4801      	ldr	r0, [pc, #4]	; (800488c <__sfp_lock_release+0x8>)
 8004886:	f000 b8d3 	b.w	8004a30 <__retarget_lock_release_recursive>
 800488a:	bf00      	nop
 800488c:	2000113d 	.word	0x2000113d

08004890 <__sinit_lock_acquire>:
 8004890:	4801      	ldr	r0, [pc, #4]	; (8004898 <__sinit_lock_acquire+0x8>)
 8004892:	f000 b8cc 	b.w	8004a2e <__retarget_lock_acquire_recursive>
 8004896:	bf00      	nop
 8004898:	2000113e 	.word	0x2000113e

0800489c <__sinit_lock_release>:
 800489c:	4801      	ldr	r0, [pc, #4]	; (80048a4 <__sinit_lock_release+0x8>)
 800489e:	f000 b8c7 	b.w	8004a30 <__retarget_lock_release_recursive>
 80048a2:	bf00      	nop
 80048a4:	2000113e 	.word	0x2000113e

080048a8 <__sinit>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4604      	mov	r4, r0
 80048ac:	f7ff fff0 	bl	8004890 <__sinit_lock_acquire>
 80048b0:	69a3      	ldr	r3, [r4, #24]
 80048b2:	b11b      	cbz	r3, 80048bc <__sinit+0x14>
 80048b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b8:	f7ff bff0 	b.w	800489c <__sinit_lock_release>
 80048bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048c0:	6523      	str	r3, [r4, #80]	; 0x50
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <__sinit+0x68>)
 80048c4:	4a13      	ldr	r2, [pc, #76]	; (8004914 <__sinit+0x6c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	bf08      	it	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	4620      	mov	r0, r4
 80048d2:	bf08      	it	eq
 80048d4:	61a3      	streq	r3, [r4, #24]
 80048d6:	f000 f81f 	bl	8004918 <__sfp>
 80048da:	6060      	str	r0, [r4, #4]
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 f81b 	bl	8004918 <__sfp>
 80048e2:	60a0      	str	r0, [r4, #8]
 80048e4:	4620      	mov	r0, r4
 80048e6:	f000 f817 	bl	8004918 <__sfp>
 80048ea:	2200      	movs	r2, #0
 80048ec:	2104      	movs	r1, #4
 80048ee:	60e0      	str	r0, [r4, #12]
 80048f0:	6860      	ldr	r0, [r4, #4]
 80048f2:	f7ff ff81 	bl	80047f8 <std>
 80048f6:	2201      	movs	r2, #1
 80048f8:	2109      	movs	r1, #9
 80048fa:	68a0      	ldr	r0, [r4, #8]
 80048fc:	f7ff ff7c 	bl	80047f8 <std>
 8004900:	2202      	movs	r2, #2
 8004902:	2112      	movs	r1, #18
 8004904:	68e0      	ldr	r0, [r4, #12]
 8004906:	f7ff ff77 	bl	80047f8 <std>
 800490a:	2301      	movs	r3, #1
 800490c:	61a3      	str	r3, [r4, #24]
 800490e:	e7d1      	b.n	80048b4 <__sinit+0xc>
 8004910:	08005aec 	.word	0x08005aec
 8004914:	08004841 	.word	0x08004841

08004918 <__sfp>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	4607      	mov	r7, r0
 800491c:	f7ff ffac 	bl	8004878 <__sfp_lock_acquire>
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <__sfp+0x84>)
 8004922:	681e      	ldr	r6, [r3, #0]
 8004924:	69b3      	ldr	r3, [r6, #24]
 8004926:	b913      	cbnz	r3, 800492e <__sfp+0x16>
 8004928:	4630      	mov	r0, r6
 800492a:	f7ff ffbd 	bl	80048a8 <__sinit>
 800492e:	3648      	adds	r6, #72	; 0x48
 8004930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004934:	3b01      	subs	r3, #1
 8004936:	d503      	bpl.n	8004940 <__sfp+0x28>
 8004938:	6833      	ldr	r3, [r6, #0]
 800493a:	b30b      	cbz	r3, 8004980 <__sfp+0x68>
 800493c:	6836      	ldr	r6, [r6, #0]
 800493e:	e7f7      	b.n	8004930 <__sfp+0x18>
 8004940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004944:	b9d5      	cbnz	r5, 800497c <__sfp+0x64>
 8004946:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <__sfp+0x88>)
 8004948:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800494c:	60e3      	str	r3, [r4, #12]
 800494e:	6665      	str	r5, [r4, #100]	; 0x64
 8004950:	f000 f86c 	bl	8004a2c <__retarget_lock_init_recursive>
 8004954:	f7ff ff96 	bl	8004884 <__sfp_lock_release>
 8004958:	2208      	movs	r2, #8
 800495a:	4629      	mov	r1, r5
 800495c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004964:	6025      	str	r5, [r4, #0]
 8004966:	61a5      	str	r5, [r4, #24]
 8004968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800496c:	f000 f86f 	bl	8004a4e <memset>
 8004970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004978:	4620      	mov	r0, r4
 800497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800497c:	3468      	adds	r4, #104	; 0x68
 800497e:	e7d9      	b.n	8004934 <__sfp+0x1c>
 8004980:	2104      	movs	r1, #4
 8004982:	4638      	mov	r0, r7
 8004984:	f7ff ff62 	bl	800484c <__sfmoreglue>
 8004988:	4604      	mov	r4, r0
 800498a:	6030      	str	r0, [r6, #0]
 800498c:	2800      	cmp	r0, #0
 800498e:	d1d5      	bne.n	800493c <__sfp+0x24>
 8004990:	f7ff ff78 	bl	8004884 <__sfp_lock_release>
 8004994:	230c      	movs	r3, #12
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	e7ee      	b.n	8004978 <__sfp+0x60>
 800499a:	bf00      	nop
 800499c:	08005aec 	.word	0x08005aec
 80049a0:	ffff0001 	.word	0xffff0001

080049a4 <_fwalk_reent>:
 80049a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a8:	4606      	mov	r6, r0
 80049aa:	4688      	mov	r8, r1
 80049ac:	2700      	movs	r7, #0
 80049ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049b6:	f1b9 0901 	subs.w	r9, r9, #1
 80049ba:	d505      	bpl.n	80049c8 <_fwalk_reent+0x24>
 80049bc:	6824      	ldr	r4, [r4, #0]
 80049be:	2c00      	cmp	r4, #0
 80049c0:	d1f7      	bne.n	80049b2 <_fwalk_reent+0xe>
 80049c2:	4638      	mov	r0, r7
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	89ab      	ldrh	r3, [r5, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d907      	bls.n	80049de <_fwalk_reent+0x3a>
 80049ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d2:	3301      	adds	r3, #1
 80049d4:	d003      	beq.n	80049de <_fwalk_reent+0x3a>
 80049d6:	4629      	mov	r1, r5
 80049d8:	4630      	mov	r0, r6
 80049da:	47c0      	blx	r8
 80049dc:	4307      	orrs	r7, r0
 80049de:	3568      	adds	r5, #104	; 0x68
 80049e0:	e7e9      	b.n	80049b6 <_fwalk_reent+0x12>
	...

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	2600      	movs	r6, #0
 80049e8:	4d0c      	ldr	r5, [pc, #48]	; (8004a1c <__libc_init_array+0x38>)
 80049ea:	4c0d      	ldr	r4, [pc, #52]	; (8004a20 <__libc_init_array+0x3c>)
 80049ec:	1b64      	subs	r4, r4, r5
 80049ee:	10a4      	asrs	r4, r4, #2
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	f000 ffb0 	bl	8005958 <_init>
 80049f8:	2600      	movs	r6, #0
 80049fa:	4d0a      	ldr	r5, [pc, #40]	; (8004a24 <__libc_init_array+0x40>)
 80049fc:	4c0a      	ldr	r4, [pc, #40]	; (8004a28 <__libc_init_array+0x44>)
 80049fe:	1b64      	subs	r4, r4, r5
 8004a00:	10a4      	asrs	r4, r4, #2
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08005b24 	.word	0x08005b24
 8004a20:	08005b24 	.word	0x08005b24
 8004a24:	08005b24 	.word	0x08005b24
 8004a28:	08005b28 	.word	0x08005b28

08004a2c <__retarget_lock_init_recursive>:
 8004a2c:	4770      	bx	lr

08004a2e <__retarget_lock_acquire_recursive>:
 8004a2e:	4770      	bx	lr

08004a30 <__retarget_lock_release_recursive>:
 8004a30:	4770      	bx	lr

08004a32 <memcpy>:
 8004a32:	440a      	add	r2, r1
 8004a34:	4291      	cmp	r1, r2
 8004a36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a3a:	d100      	bne.n	8004a3e <memcpy+0xc>
 8004a3c:	4770      	bx	lr
 8004a3e:	b510      	push	{r4, lr}
 8004a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a44:	4291      	cmp	r1, r2
 8004a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4a:	d1f9      	bne.n	8004a40 <memcpy+0xe>
 8004a4c:	bd10      	pop	{r4, pc}

08004a4e <memset>:
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4402      	add	r2, r0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d100      	bne.n	8004a58 <memset+0xa>
 8004a56:	4770      	bx	lr
 8004a58:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5c:	e7f9      	b.n	8004a52 <memset+0x4>
	...

08004a60 <sbrk_aligned>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	4e0e      	ldr	r6, [pc, #56]	; (8004a9c <sbrk_aligned+0x3c>)
 8004a64:	460c      	mov	r4, r1
 8004a66:	6831      	ldr	r1, [r6, #0]
 8004a68:	4605      	mov	r5, r0
 8004a6a:	b911      	cbnz	r1, 8004a72 <sbrk_aligned+0x12>
 8004a6c:	f000 f984 	bl	8004d78 <_sbrk_r>
 8004a70:	6030      	str	r0, [r6, #0]
 8004a72:	4621      	mov	r1, r4
 8004a74:	4628      	mov	r0, r5
 8004a76:	f000 f97f 	bl	8004d78 <_sbrk_r>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	d00a      	beq.n	8004a94 <sbrk_aligned+0x34>
 8004a7e:	1cc4      	adds	r4, r0, #3
 8004a80:	f024 0403 	bic.w	r4, r4, #3
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d007      	beq.n	8004a98 <sbrk_aligned+0x38>
 8004a88:	1a21      	subs	r1, r4, r0
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f974 	bl	8004d78 <_sbrk_r>
 8004a90:	3001      	adds	r0, #1
 8004a92:	d101      	bne.n	8004a98 <sbrk_aligned+0x38>
 8004a94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
 8004a9c:	20001144 	.word	0x20001144

08004aa0 <_malloc_r>:
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	1ccd      	adds	r5, r1, #3
 8004aa6:	f025 0503 	bic.w	r5, r5, #3
 8004aaa:	3508      	adds	r5, #8
 8004aac:	2d0c      	cmp	r5, #12
 8004aae:	bf38      	it	cc
 8004ab0:	250c      	movcc	r5, #12
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	db01      	blt.n	8004abc <_malloc_r+0x1c>
 8004ab8:	42a9      	cmp	r1, r5
 8004aba:	d905      	bls.n	8004ac8 <_malloc_r+0x28>
 8004abc:	230c      	movs	r3, #12
 8004abe:	2600      	movs	r6, #0
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac8:	4e2e      	ldr	r6, [pc, #184]	; (8004b84 <_malloc_r+0xe4>)
 8004aca:	f000 fbc1 	bl	8005250 <__malloc_lock>
 8004ace:	6833      	ldr	r3, [r6, #0]
 8004ad0:	461c      	mov	r4, r3
 8004ad2:	bb34      	cbnz	r4, 8004b22 <_malloc_r+0x82>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f7ff ffc2 	bl	8004a60 <sbrk_aligned>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	4604      	mov	r4, r0
 8004ae0:	d14d      	bne.n	8004b7e <_malloc_r+0xde>
 8004ae2:	6834      	ldr	r4, [r6, #0]
 8004ae4:	4626      	mov	r6, r4
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	d140      	bne.n	8004b6c <_malloc_r+0xcc>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	4631      	mov	r1, r6
 8004aee:	4638      	mov	r0, r7
 8004af0:	eb04 0803 	add.w	r8, r4, r3
 8004af4:	f000 f940 	bl	8004d78 <_sbrk_r>
 8004af8:	4580      	cmp	r8, r0
 8004afa:	d13a      	bne.n	8004b72 <_malloc_r+0xd2>
 8004afc:	6821      	ldr	r1, [r4, #0]
 8004afe:	3503      	adds	r5, #3
 8004b00:	1a6d      	subs	r5, r5, r1
 8004b02:	f025 0503 	bic.w	r5, r5, #3
 8004b06:	3508      	adds	r5, #8
 8004b08:	2d0c      	cmp	r5, #12
 8004b0a:	bf38      	it	cc
 8004b0c:	250c      	movcc	r5, #12
 8004b0e:	4638      	mov	r0, r7
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7ff ffa5 	bl	8004a60 <sbrk_aligned>
 8004b16:	3001      	adds	r0, #1
 8004b18:	d02b      	beq.n	8004b72 <_malloc_r+0xd2>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	442b      	add	r3, r5
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	e00e      	b.n	8004b40 <_malloc_r+0xa0>
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	1b52      	subs	r2, r2, r5
 8004b26:	d41e      	bmi.n	8004b66 <_malloc_r+0xc6>
 8004b28:	2a0b      	cmp	r2, #11
 8004b2a:	d916      	bls.n	8004b5a <_malloc_r+0xba>
 8004b2c:	1961      	adds	r1, r4, r5
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	6025      	str	r5, [r4, #0]
 8004b32:	bf18      	it	ne
 8004b34:	6059      	strne	r1, [r3, #4]
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	bf08      	it	eq
 8004b3a:	6031      	streq	r1, [r6, #0]
 8004b3c:	5162      	str	r2, [r4, r5]
 8004b3e:	604b      	str	r3, [r1, #4]
 8004b40:	4638      	mov	r0, r7
 8004b42:	f104 060b 	add.w	r6, r4, #11
 8004b46:	f000 fb89 	bl	800525c <__malloc_unlock>
 8004b4a:	f026 0607 	bic.w	r6, r6, #7
 8004b4e:	1d23      	adds	r3, r4, #4
 8004b50:	1af2      	subs	r2, r6, r3
 8004b52:	d0b6      	beq.n	8004ac2 <_malloc_r+0x22>
 8004b54:	1b9b      	subs	r3, r3, r6
 8004b56:	50a3      	str	r3, [r4, r2]
 8004b58:	e7b3      	b.n	8004ac2 <_malloc_r+0x22>
 8004b5a:	6862      	ldr	r2, [r4, #4]
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	bf0c      	ite	eq
 8004b60:	6032      	streq	r2, [r6, #0]
 8004b62:	605a      	strne	r2, [r3, #4]
 8004b64:	e7ec      	b.n	8004b40 <_malloc_r+0xa0>
 8004b66:	4623      	mov	r3, r4
 8004b68:	6864      	ldr	r4, [r4, #4]
 8004b6a:	e7b2      	b.n	8004ad2 <_malloc_r+0x32>
 8004b6c:	4634      	mov	r4, r6
 8004b6e:	6876      	ldr	r6, [r6, #4]
 8004b70:	e7b9      	b.n	8004ae6 <_malloc_r+0x46>
 8004b72:	230c      	movs	r3, #12
 8004b74:	4638      	mov	r0, r7
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	f000 fb70 	bl	800525c <__malloc_unlock>
 8004b7c:	e7a1      	b.n	8004ac2 <_malloc_r+0x22>
 8004b7e:	6025      	str	r5, [r4, #0]
 8004b80:	e7de      	b.n	8004b40 <_malloc_r+0xa0>
 8004b82:	bf00      	nop
 8004b84:	20001140 	.word	0x20001140

08004b88 <iprintf>:
 8004b88:	b40f      	push	{r0, r1, r2, r3}
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <iprintf+0x2c>)
 8004b8c:	b513      	push	{r0, r1, r4, lr}
 8004b8e:	681c      	ldr	r4, [r3, #0]
 8004b90:	b124      	cbz	r4, 8004b9c <iprintf+0x14>
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	b913      	cbnz	r3, 8004b9c <iprintf+0x14>
 8004b96:	4620      	mov	r0, r4
 8004b98:	f7ff fe86 	bl	80048a8 <__sinit>
 8004b9c:	ab05      	add	r3, sp, #20
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	9a04      	ldr	r2, [sp, #16]
 8004ba2:	68a1      	ldr	r1, [r4, #8]
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	f000 fbcf 	bl	8005348 <_vfiprintf_r>
 8004baa:	b002      	add	sp, #8
 8004bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr
 8004bb4:	20000010 	.word	0x20000010

08004bb8 <_puts_r>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	460e      	mov	r6, r1
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	b118      	cbz	r0, 8004bc8 <_puts_r+0x10>
 8004bc0:	6983      	ldr	r3, [r0, #24]
 8004bc2:	b90b      	cbnz	r3, 8004bc8 <_puts_r+0x10>
 8004bc4:	f7ff fe70 	bl	80048a8 <__sinit>
 8004bc8:	69ab      	ldr	r3, [r5, #24]
 8004bca:	68ac      	ldr	r4, [r5, #8]
 8004bcc:	b913      	cbnz	r3, 8004bd4 <_puts_r+0x1c>
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7ff fe6a 	bl	80048a8 <__sinit>
 8004bd4:	4b2c      	ldr	r3, [pc, #176]	; (8004c88 <_puts_r+0xd0>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d120      	bne.n	8004c1c <_puts_r+0x64>
 8004bda:	686c      	ldr	r4, [r5, #4]
 8004bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bde:	07db      	lsls	r3, r3, #31
 8004be0:	d405      	bmi.n	8004bee <_puts_r+0x36>
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	0598      	lsls	r0, r3, #22
 8004be6:	d402      	bmi.n	8004bee <_puts_r+0x36>
 8004be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bea:	f7ff ff20 	bl	8004a2e <__retarget_lock_acquire_recursive>
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	0719      	lsls	r1, r3, #28
 8004bf2:	d51d      	bpl.n	8004c30 <_puts_r+0x78>
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	b1db      	cbz	r3, 8004c30 <_puts_r+0x78>
 8004bf8:	3e01      	subs	r6, #1
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c00:	3b01      	subs	r3, #1
 8004c02:	60a3      	str	r3, [r4, #8]
 8004c04:	bb39      	cbnz	r1, 8004c56 <_puts_r+0x9e>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da38      	bge.n	8004c7c <_puts_r+0xc4>
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	210a      	movs	r1, #10
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 f906 	bl	8004e20 <__swbuf_r>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d011      	beq.n	8004c3c <_puts_r+0x84>
 8004c18:	250a      	movs	r5, #10
 8004c1a:	e011      	b.n	8004c40 <_puts_r+0x88>
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <_puts_r+0xd4>)
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d101      	bne.n	8004c26 <_puts_r+0x6e>
 8004c22:	68ac      	ldr	r4, [r5, #8]
 8004c24:	e7da      	b.n	8004bdc <_puts_r+0x24>
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <_puts_r+0xd8>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	bf08      	it	eq
 8004c2c:	68ec      	ldreq	r4, [r5, #12]
 8004c2e:	e7d5      	b.n	8004bdc <_puts_r+0x24>
 8004c30:	4621      	mov	r1, r4
 8004c32:	4628      	mov	r0, r5
 8004c34:	f000 f958 	bl	8004ee8 <__swsetup_r>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d0dd      	beq.n	8004bf8 <_puts_r+0x40>
 8004c3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c42:	07da      	lsls	r2, r3, #31
 8004c44:	d405      	bmi.n	8004c52 <_puts_r+0x9a>
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	059b      	lsls	r3, r3, #22
 8004c4a:	d402      	bmi.n	8004c52 <_puts_r+0x9a>
 8004c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c4e:	f7ff feef 	bl	8004a30 <__retarget_lock_release_recursive>
 8004c52:	4628      	mov	r0, r5
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da04      	bge.n	8004c64 <_puts_r+0xac>
 8004c5a:	69a2      	ldr	r2, [r4, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	dc06      	bgt.n	8004c6e <_puts_r+0xb6>
 8004c60:	290a      	cmp	r1, #10
 8004c62:	d004      	beq.n	8004c6e <_puts_r+0xb6>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	7019      	strb	r1, [r3, #0]
 8004c6c:	e7c5      	b.n	8004bfa <_puts_r+0x42>
 8004c6e:	4622      	mov	r2, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 f8d5 	bl	8004e20 <__swbuf_r>
 8004c76:	3001      	adds	r0, #1
 8004c78:	d1bf      	bne.n	8004bfa <_puts_r+0x42>
 8004c7a:	e7df      	b.n	8004c3c <_puts_r+0x84>
 8004c7c:	250a      	movs	r5, #10
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	6022      	str	r2, [r4, #0]
 8004c84:	701d      	strb	r5, [r3, #0]
 8004c86:	e7db      	b.n	8004c40 <_puts_r+0x88>
 8004c88:	08005aac 	.word	0x08005aac
 8004c8c:	08005acc 	.word	0x08005acc
 8004c90:	08005a8c 	.word	0x08005a8c

08004c94 <puts>:
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <puts+0xc>)
 8004c96:	4601      	mov	r1, r0
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	f7ff bf8d 	b.w	8004bb8 <_puts_r>
 8004c9e:	bf00      	nop
 8004ca0:	20000010 	.word	0x20000010

08004ca4 <cleanup_glue>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	6809      	ldr	r1, [r1, #0]
 8004caa:	4605      	mov	r5, r0
 8004cac:	b109      	cbz	r1, 8004cb2 <cleanup_glue+0xe>
 8004cae:	f7ff fff9 	bl	8004ca4 <cleanup_glue>
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cba:	f000 bad5 	b.w	8005268 <_free_r>
	...

08004cc0 <_reclaim_reent>:
 8004cc0:	4b2c      	ldr	r3, [pc, #176]	; (8004d74 <_reclaim_reent+0xb4>)
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4283      	cmp	r3, r0
 8004cca:	d051      	beq.n	8004d70 <_reclaim_reent+0xb0>
 8004ccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004cce:	b143      	cbz	r3, 8004ce2 <_reclaim_reent+0x22>
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d14a      	bne.n	8004d6c <_reclaim_reent+0xac>
 8004cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	b111      	cbz	r1, 8004ce2 <_reclaim_reent+0x22>
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 fac3 	bl	8005268 <_free_r>
 8004ce2:	6961      	ldr	r1, [r4, #20]
 8004ce4:	b111      	cbz	r1, 8004cec <_reclaim_reent+0x2c>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 fabe 	bl	8005268 <_free_r>
 8004cec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cee:	b111      	cbz	r1, 8004cf6 <_reclaim_reent+0x36>
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f000 fab9 	bl	8005268 <_free_r>
 8004cf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004cf8:	b111      	cbz	r1, 8004d00 <_reclaim_reent+0x40>
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 fab4 	bl	8005268 <_free_r>
 8004d00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d02:	b111      	cbz	r1, 8004d0a <_reclaim_reent+0x4a>
 8004d04:	4620      	mov	r0, r4
 8004d06:	f000 faaf 	bl	8005268 <_free_r>
 8004d0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004d0c:	b111      	cbz	r1, 8004d14 <_reclaim_reent+0x54>
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 faaa 	bl	8005268 <_free_r>
 8004d14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d16:	b111      	cbz	r1, 8004d1e <_reclaim_reent+0x5e>
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 faa5 	bl	8005268 <_free_r>
 8004d1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004d20:	b111      	cbz	r1, 8004d28 <_reclaim_reent+0x68>
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 faa0 	bl	8005268 <_free_r>
 8004d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d2a:	b111      	cbz	r1, 8004d32 <_reclaim_reent+0x72>
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 fa9b 	bl	8005268 <_free_r>
 8004d32:	69a3      	ldr	r3, [r4, #24]
 8004d34:	b1e3      	cbz	r3, 8004d70 <_reclaim_reent+0xb0>
 8004d36:	4620      	mov	r0, r4
 8004d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d3a:	4798      	blx	r3
 8004d3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d3e:	b1b9      	cbz	r1, 8004d70 <_reclaim_reent+0xb0>
 8004d40:	4620      	mov	r0, r4
 8004d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d46:	f7ff bfad 	b.w	8004ca4 <cleanup_glue>
 8004d4a:	5949      	ldr	r1, [r1, r5]
 8004d4c:	b941      	cbnz	r1, 8004d60 <_reclaim_reent+0xa0>
 8004d4e:	3504      	adds	r5, #4
 8004d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d52:	2d80      	cmp	r5, #128	; 0x80
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	d1f8      	bne.n	8004d4a <_reclaim_reent+0x8a>
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 fa85 	bl	8005268 <_free_r>
 8004d5e:	e7ba      	b.n	8004cd6 <_reclaim_reent+0x16>
 8004d60:	680e      	ldr	r6, [r1, #0]
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fa80 	bl	8005268 <_free_r>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	e7ef      	b.n	8004d4c <_reclaim_reent+0x8c>
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	e7ef      	b.n	8004d50 <_reclaim_reent+0x90>
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
 8004d72:	bf00      	nop
 8004d74:	20000010 	.word	0x20000010

08004d78 <_sbrk_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4d05      	ldr	r5, [pc, #20]	; (8004d94 <_sbrk_r+0x1c>)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fb fdd4 	bl	8000930 <_sbrk>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_sbrk_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_sbrk_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	20001148 	.word	0x20001148

08004d98 <__sread>:
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	f000 fd98 	bl	80058d4 <_read_r>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	bfab      	itete	ge
 8004da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004daa:	89a3      	ldrhlt	r3, [r4, #12]
 8004dac:	181b      	addge	r3, r3, r0
 8004dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004db2:	bfac      	ite	ge
 8004db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004db6:	81a3      	strhlt	r3, [r4, #12]
 8004db8:	bd10      	pop	{r4, pc}

08004dba <__swrite>:
 8004dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	898b      	ldrh	r3, [r1, #12]
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	05db      	lsls	r3, r3, #23
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4616      	mov	r6, r2
 8004dca:	d505      	bpl.n	8004dd8 <__swrite+0x1e>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd4:	f000 f9c4 	bl	8005160 <_lseek_r>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	4632      	mov	r2, r6
 8004ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	4628      	mov	r0, r5
 8004de4:	463b      	mov	r3, r7
 8004de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dee:	f000 b869 	b.w	8004ec4 <_write_r>

08004df2 <__sseek>:
 8004df2:	b510      	push	{r4, lr}
 8004df4:	460c      	mov	r4, r1
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 f9b1 	bl	8005160 <_lseek_r>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	bf15      	itete	ne
 8004e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e0e:	81a3      	strheq	r3, [r4, #12]
 8004e10:	bf18      	it	ne
 8004e12:	81a3      	strhne	r3, [r4, #12]
 8004e14:	bd10      	pop	{r4, pc}

08004e16 <__sclose>:
 8004e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1a:	f000 b8d3 	b.w	8004fc4 <_close_r>
	...

08004e20 <__swbuf_r>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	460e      	mov	r6, r1
 8004e24:	4614      	mov	r4, r2
 8004e26:	4605      	mov	r5, r0
 8004e28:	b118      	cbz	r0, 8004e32 <__swbuf_r+0x12>
 8004e2a:	6983      	ldr	r3, [r0, #24]
 8004e2c:	b90b      	cbnz	r3, 8004e32 <__swbuf_r+0x12>
 8004e2e:	f7ff fd3b 	bl	80048a8 <__sinit>
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <__swbuf_r+0x98>)
 8004e34:	429c      	cmp	r4, r3
 8004e36:	d12b      	bne.n	8004e90 <__swbuf_r+0x70>
 8004e38:	686c      	ldr	r4, [r5, #4]
 8004e3a:	69a3      	ldr	r3, [r4, #24]
 8004e3c:	60a3      	str	r3, [r4, #8]
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	071a      	lsls	r2, r3, #28
 8004e42:	d52f      	bpl.n	8004ea4 <__swbuf_r+0x84>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	b36b      	cbz	r3, 8004ea4 <__swbuf_r+0x84>
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	b2f6      	uxtb	r6, r6
 8004e4e:	1ac0      	subs	r0, r0, r3
 8004e50:	6963      	ldr	r3, [r4, #20]
 8004e52:	4637      	mov	r7, r6
 8004e54:	4283      	cmp	r3, r0
 8004e56:	dc04      	bgt.n	8004e62 <__swbuf_r+0x42>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f000 f944 	bl	80050e8 <_fflush_r>
 8004e60:	bb30      	cbnz	r0, 8004eb0 <__swbuf_r+0x90>
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	3001      	adds	r0, #1
 8004e66:	3b01      	subs	r3, #1
 8004e68:	60a3      	str	r3, [r4, #8]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	6022      	str	r2, [r4, #0]
 8004e70:	701e      	strb	r6, [r3, #0]
 8004e72:	6963      	ldr	r3, [r4, #20]
 8004e74:	4283      	cmp	r3, r0
 8004e76:	d004      	beq.n	8004e82 <__swbuf_r+0x62>
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	07db      	lsls	r3, r3, #31
 8004e7c:	d506      	bpl.n	8004e8c <__swbuf_r+0x6c>
 8004e7e:	2e0a      	cmp	r6, #10
 8004e80:	d104      	bne.n	8004e8c <__swbuf_r+0x6c>
 8004e82:	4621      	mov	r1, r4
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 f92f 	bl	80050e8 <_fflush_r>
 8004e8a:	b988      	cbnz	r0, 8004eb0 <__swbuf_r+0x90>
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <__swbuf_r+0x9c>)
 8004e92:	429c      	cmp	r4, r3
 8004e94:	d101      	bne.n	8004e9a <__swbuf_r+0x7a>
 8004e96:	68ac      	ldr	r4, [r5, #8]
 8004e98:	e7cf      	b.n	8004e3a <__swbuf_r+0x1a>
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <__swbuf_r+0xa0>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	bf08      	it	eq
 8004ea0:	68ec      	ldreq	r4, [r5, #12]
 8004ea2:	e7ca      	b.n	8004e3a <__swbuf_r+0x1a>
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 f81e 	bl	8004ee8 <__swsetup_r>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d0cb      	beq.n	8004e48 <__swbuf_r+0x28>
 8004eb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004eb4:	e7ea      	b.n	8004e8c <__swbuf_r+0x6c>
 8004eb6:	bf00      	nop
 8004eb8:	08005aac 	.word	0x08005aac
 8004ebc:	08005acc 	.word	0x08005acc
 8004ec0:	08005a8c 	.word	0x08005a8c

08004ec4 <_write_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	2200      	movs	r2, #0
 8004ece:	4d05      	ldr	r5, [pc, #20]	; (8004ee4 <_write_r+0x20>)
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fb f97a 	bl	80001cc <_write>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_write_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_write_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	20001148 	.word	0x20001148

08004ee8 <__swsetup_r>:
 8004ee8:	4b32      	ldr	r3, [pc, #200]	; (8004fb4 <__swsetup_r+0xcc>)
 8004eea:	b570      	push	{r4, r5, r6, lr}
 8004eec:	681d      	ldr	r5, [r3, #0]
 8004eee:	4606      	mov	r6, r0
 8004ef0:	460c      	mov	r4, r1
 8004ef2:	b125      	cbz	r5, 8004efe <__swsetup_r+0x16>
 8004ef4:	69ab      	ldr	r3, [r5, #24]
 8004ef6:	b913      	cbnz	r3, 8004efe <__swsetup_r+0x16>
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7ff fcd5 	bl	80048a8 <__sinit>
 8004efe:	4b2e      	ldr	r3, [pc, #184]	; (8004fb8 <__swsetup_r+0xd0>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	d10f      	bne.n	8004f24 <__swsetup_r+0x3c>
 8004f04:	686c      	ldr	r4, [r5, #4]
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f0c:	0719      	lsls	r1, r3, #28
 8004f0e:	d42c      	bmi.n	8004f6a <__swsetup_r+0x82>
 8004f10:	06dd      	lsls	r5, r3, #27
 8004f12:	d411      	bmi.n	8004f38 <__swsetup_r+0x50>
 8004f14:	2309      	movs	r3, #9
 8004f16:	6033      	str	r3, [r6, #0]
 8004f18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	e03e      	b.n	8004fa2 <__swsetup_r+0xba>
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <__swsetup_r+0xd4>)
 8004f26:	429c      	cmp	r4, r3
 8004f28:	d101      	bne.n	8004f2e <__swsetup_r+0x46>
 8004f2a:	68ac      	ldr	r4, [r5, #8]
 8004f2c:	e7eb      	b.n	8004f06 <__swsetup_r+0x1e>
 8004f2e:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <__swsetup_r+0xd8>)
 8004f30:	429c      	cmp	r4, r3
 8004f32:	bf08      	it	eq
 8004f34:	68ec      	ldreq	r4, [r5, #12]
 8004f36:	e7e6      	b.n	8004f06 <__swsetup_r+0x1e>
 8004f38:	0758      	lsls	r0, r3, #29
 8004f3a:	d512      	bpl.n	8004f62 <__swsetup_r+0x7a>
 8004f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3e:	b141      	cbz	r1, 8004f52 <__swsetup_r+0x6a>
 8004f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d002      	beq.n	8004f4e <__swsetup_r+0x66>
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f000 f98d 	bl	8005268 <_free_r>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6363      	str	r3, [r4, #52]	; 0x34
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	81a3      	strh	r3, [r4, #12]
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	b94b      	cbnz	r3, 8004f82 <__swsetup_r+0x9a>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f78:	d003      	beq.n	8004f82 <__swsetup_r+0x9a>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 f927 	bl	80051d0 <__smakebuf_r>
 8004f82:	89a0      	ldrh	r0, [r4, #12]
 8004f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f88:	f010 0301 	ands.w	r3, r0, #1
 8004f8c:	d00a      	beq.n	8004fa4 <__swsetup_r+0xbc>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60a3      	str	r3, [r4, #8]
 8004f92:	6963      	ldr	r3, [r4, #20]
 8004f94:	425b      	negs	r3, r3
 8004f96:	61a3      	str	r3, [r4, #24]
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	b943      	cbnz	r3, 8004fae <__swsetup_r+0xc6>
 8004f9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fa0:	d1ba      	bne.n	8004f18 <__swsetup_r+0x30>
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	0781      	lsls	r1, r0, #30
 8004fa6:	bf58      	it	pl
 8004fa8:	6963      	ldrpl	r3, [r4, #20]
 8004faa:	60a3      	str	r3, [r4, #8]
 8004fac:	e7f4      	b.n	8004f98 <__swsetup_r+0xb0>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e7f7      	b.n	8004fa2 <__swsetup_r+0xba>
 8004fb2:	bf00      	nop
 8004fb4:	20000010 	.word	0x20000010
 8004fb8:	08005aac 	.word	0x08005aac
 8004fbc:	08005acc 	.word	0x08005acc
 8004fc0:	08005a8c 	.word	0x08005a8c

08004fc4 <_close_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4d05      	ldr	r5, [pc, #20]	; (8004fe0 <_close_r+0x1c>)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fb fc7d 	bl	80008ce <_close>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_close_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_close_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20001148 	.word	0x20001148

08004fe4 <__sflush_r>:
 8004fe4:	898a      	ldrh	r2, [r1, #12]
 8004fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe8:	4605      	mov	r5, r0
 8004fea:	0710      	lsls	r0, r2, #28
 8004fec:	460c      	mov	r4, r1
 8004fee:	d457      	bmi.n	80050a0 <__sflush_r+0xbc>
 8004ff0:	684b      	ldr	r3, [r1, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dc04      	bgt.n	8005000 <__sflush_r+0x1c>
 8004ff6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dc01      	bgt.n	8005000 <__sflush_r+0x1c>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005002:	2e00      	cmp	r6, #0
 8005004:	d0fa      	beq.n	8004ffc <__sflush_r+0x18>
 8005006:	2300      	movs	r3, #0
 8005008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800500c:	682f      	ldr	r7, [r5, #0]
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	d032      	beq.n	8005078 <__sflush_r+0x94>
 8005012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	075a      	lsls	r2, r3, #29
 8005018:	d505      	bpl.n	8005026 <__sflush_r+0x42>
 800501a:	6863      	ldr	r3, [r4, #4]
 800501c:	1ac0      	subs	r0, r0, r3
 800501e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005020:	b10b      	cbz	r3, 8005026 <__sflush_r+0x42>
 8005022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005024:	1ac0      	subs	r0, r0, r3
 8005026:	2300      	movs	r3, #0
 8005028:	4602      	mov	r2, r0
 800502a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800502c:	4628      	mov	r0, r5
 800502e:	6a21      	ldr	r1, [r4, #32]
 8005030:	47b0      	blx	r6
 8005032:	1c43      	adds	r3, r0, #1
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	d106      	bne.n	8005046 <__sflush_r+0x62>
 8005038:	6829      	ldr	r1, [r5, #0]
 800503a:	291d      	cmp	r1, #29
 800503c:	d82c      	bhi.n	8005098 <__sflush_r+0xb4>
 800503e:	4a29      	ldr	r2, [pc, #164]	; (80050e4 <__sflush_r+0x100>)
 8005040:	40ca      	lsrs	r2, r1
 8005042:	07d6      	lsls	r6, r2, #31
 8005044:	d528      	bpl.n	8005098 <__sflush_r+0xb4>
 8005046:	2200      	movs	r2, #0
 8005048:	6062      	str	r2, [r4, #4]
 800504a:	6922      	ldr	r2, [r4, #16]
 800504c:	04d9      	lsls	r1, r3, #19
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	d504      	bpl.n	800505c <__sflush_r+0x78>
 8005052:	1c42      	adds	r2, r0, #1
 8005054:	d101      	bne.n	800505a <__sflush_r+0x76>
 8005056:	682b      	ldr	r3, [r5, #0]
 8005058:	b903      	cbnz	r3, 800505c <__sflush_r+0x78>
 800505a:	6560      	str	r0, [r4, #84]	; 0x54
 800505c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800505e:	602f      	str	r7, [r5, #0]
 8005060:	2900      	cmp	r1, #0
 8005062:	d0cb      	beq.n	8004ffc <__sflush_r+0x18>
 8005064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005068:	4299      	cmp	r1, r3
 800506a:	d002      	beq.n	8005072 <__sflush_r+0x8e>
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f8fb 	bl	8005268 <_free_r>
 8005072:	2000      	movs	r0, #0
 8005074:	6360      	str	r0, [r4, #52]	; 0x34
 8005076:	e7c2      	b.n	8004ffe <__sflush_r+0x1a>
 8005078:	6a21      	ldr	r1, [r4, #32]
 800507a:	2301      	movs	r3, #1
 800507c:	4628      	mov	r0, r5
 800507e:	47b0      	blx	r6
 8005080:	1c41      	adds	r1, r0, #1
 8005082:	d1c7      	bne.n	8005014 <__sflush_r+0x30>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0c4      	beq.n	8005014 <__sflush_r+0x30>
 800508a:	2b1d      	cmp	r3, #29
 800508c:	d001      	beq.n	8005092 <__sflush_r+0xae>
 800508e:	2b16      	cmp	r3, #22
 8005090:	d101      	bne.n	8005096 <__sflush_r+0xb2>
 8005092:	602f      	str	r7, [r5, #0]
 8005094:	e7b2      	b.n	8004ffc <__sflush_r+0x18>
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	e7ae      	b.n	8004ffe <__sflush_r+0x1a>
 80050a0:	690f      	ldr	r7, [r1, #16]
 80050a2:	2f00      	cmp	r7, #0
 80050a4:	d0aa      	beq.n	8004ffc <__sflush_r+0x18>
 80050a6:	0793      	lsls	r3, r2, #30
 80050a8:	bf18      	it	ne
 80050aa:	2300      	movne	r3, #0
 80050ac:	680e      	ldr	r6, [r1, #0]
 80050ae:	bf08      	it	eq
 80050b0:	694b      	ldreq	r3, [r1, #20]
 80050b2:	1bf6      	subs	r6, r6, r7
 80050b4:	600f      	str	r7, [r1, #0]
 80050b6:	608b      	str	r3, [r1, #8]
 80050b8:	2e00      	cmp	r6, #0
 80050ba:	dd9f      	ble.n	8004ffc <__sflush_r+0x18>
 80050bc:	4633      	mov	r3, r6
 80050be:	463a      	mov	r2, r7
 80050c0:	4628      	mov	r0, r5
 80050c2:	6a21      	ldr	r1, [r4, #32]
 80050c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80050c8:	47e0      	blx	ip
 80050ca:	2800      	cmp	r0, #0
 80050cc:	dc06      	bgt.n	80050dc <__sflush_r+0xf8>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	e790      	b.n	8004ffe <__sflush_r+0x1a>
 80050dc:	4407      	add	r7, r0
 80050de:	1a36      	subs	r6, r6, r0
 80050e0:	e7ea      	b.n	80050b8 <__sflush_r+0xd4>
 80050e2:	bf00      	nop
 80050e4:	20400001 	.word	0x20400001

080050e8 <_fflush_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	690b      	ldr	r3, [r1, #16]
 80050ec:	4605      	mov	r5, r0
 80050ee:	460c      	mov	r4, r1
 80050f0:	b913      	cbnz	r3, 80050f8 <_fflush_r+0x10>
 80050f2:	2500      	movs	r5, #0
 80050f4:	4628      	mov	r0, r5
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	b118      	cbz	r0, 8005102 <_fflush_r+0x1a>
 80050fa:	6983      	ldr	r3, [r0, #24]
 80050fc:	b90b      	cbnz	r3, 8005102 <_fflush_r+0x1a>
 80050fe:	f7ff fbd3 	bl	80048a8 <__sinit>
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <_fflush_r+0x6c>)
 8005104:	429c      	cmp	r4, r3
 8005106:	d11b      	bne.n	8005140 <_fflush_r+0x58>
 8005108:	686c      	ldr	r4, [r5, #4]
 800510a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ef      	beq.n	80050f2 <_fflush_r+0xa>
 8005112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005114:	07d0      	lsls	r0, r2, #31
 8005116:	d404      	bmi.n	8005122 <_fflush_r+0x3a>
 8005118:	0599      	lsls	r1, r3, #22
 800511a:	d402      	bmi.n	8005122 <_fflush_r+0x3a>
 800511c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800511e:	f7ff fc86 	bl	8004a2e <__retarget_lock_acquire_recursive>
 8005122:	4628      	mov	r0, r5
 8005124:	4621      	mov	r1, r4
 8005126:	f7ff ff5d 	bl	8004fe4 <__sflush_r>
 800512a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800512c:	4605      	mov	r5, r0
 800512e:	07da      	lsls	r2, r3, #31
 8005130:	d4e0      	bmi.n	80050f4 <_fflush_r+0xc>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	059b      	lsls	r3, r3, #22
 8005136:	d4dd      	bmi.n	80050f4 <_fflush_r+0xc>
 8005138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800513a:	f7ff fc79 	bl	8004a30 <__retarget_lock_release_recursive>
 800513e:	e7d9      	b.n	80050f4 <_fflush_r+0xc>
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <_fflush_r+0x70>)
 8005142:	429c      	cmp	r4, r3
 8005144:	d101      	bne.n	800514a <_fflush_r+0x62>
 8005146:	68ac      	ldr	r4, [r5, #8]
 8005148:	e7df      	b.n	800510a <_fflush_r+0x22>
 800514a:	4b04      	ldr	r3, [pc, #16]	; (800515c <_fflush_r+0x74>)
 800514c:	429c      	cmp	r4, r3
 800514e:	bf08      	it	eq
 8005150:	68ec      	ldreq	r4, [r5, #12]
 8005152:	e7da      	b.n	800510a <_fflush_r+0x22>
 8005154:	08005aac 	.word	0x08005aac
 8005158:	08005acc 	.word	0x08005acc
 800515c:	08005a8c 	.word	0x08005a8c

08005160 <_lseek_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	4611      	mov	r1, r2
 8005168:	2200      	movs	r2, #0
 800516a:	4d05      	ldr	r5, [pc, #20]	; (8005180 <_lseek_r+0x20>)
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	f7fb fbd1 	bl	8000916 <_lseek>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_lseek_r+0x1e>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_lseek_r+0x1e>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	20001148 	.word	0x20001148

08005184 <__swhatbuf_r>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	460e      	mov	r6, r1
 8005188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518c:	4614      	mov	r4, r2
 800518e:	2900      	cmp	r1, #0
 8005190:	461d      	mov	r5, r3
 8005192:	b096      	sub	sp, #88	; 0x58
 8005194:	da08      	bge.n	80051a8 <__swhatbuf_r+0x24>
 8005196:	2200      	movs	r2, #0
 8005198:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	061a      	lsls	r2, r3, #24
 80051a0:	d410      	bmi.n	80051c4 <__swhatbuf_r+0x40>
 80051a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a6:	e00e      	b.n	80051c6 <__swhatbuf_r+0x42>
 80051a8:	466a      	mov	r2, sp
 80051aa:	f000 fba5 	bl	80058f8 <_fstat_r>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	dbf1      	blt.n	8005196 <__swhatbuf_r+0x12>
 80051b2:	9a01      	ldr	r2, [sp, #4]
 80051b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051bc:	425a      	negs	r2, r3
 80051be:	415a      	adcs	r2, r3
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	e7ee      	b.n	80051a2 <__swhatbuf_r+0x1e>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	2000      	movs	r0, #0
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	b016      	add	sp, #88	; 0x58
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080051d0 <__smakebuf_r>:
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051d4:	079d      	lsls	r5, r3, #30
 80051d6:	4606      	mov	r6, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	d507      	bpl.n	80051ec <__smakebuf_r+0x1c>
 80051dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	2301      	movs	r3, #1
 80051e6:	6163      	str	r3, [r4, #20]
 80051e8:	b002      	add	sp, #8
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	466a      	mov	r2, sp
 80051ee:	ab01      	add	r3, sp, #4
 80051f0:	f7ff ffc8 	bl	8005184 <__swhatbuf_r>
 80051f4:	9900      	ldr	r1, [sp, #0]
 80051f6:	4605      	mov	r5, r0
 80051f8:	4630      	mov	r0, r6
 80051fa:	f7ff fc51 	bl	8004aa0 <_malloc_r>
 80051fe:	b948      	cbnz	r0, 8005214 <__smakebuf_r+0x44>
 8005200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005204:	059a      	lsls	r2, r3, #22
 8005206:	d4ef      	bmi.n	80051e8 <__smakebuf_r+0x18>
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	e7e3      	b.n	80051dc <__smakebuf_r+0xc>
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <__smakebuf_r+0x7c>)
 8005216:	62b3      	str	r3, [r6, #40]	; 0x28
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	6020      	str	r0, [r4, #0]
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	9b00      	ldr	r3, [sp, #0]
 8005224:	6120      	str	r0, [r4, #16]
 8005226:	6163      	str	r3, [r4, #20]
 8005228:	9b01      	ldr	r3, [sp, #4]
 800522a:	b15b      	cbz	r3, 8005244 <__smakebuf_r+0x74>
 800522c:	4630      	mov	r0, r6
 800522e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005232:	f000 fb73 	bl	800591c <_isatty_r>
 8005236:	b128      	cbz	r0, 8005244 <__smakebuf_r+0x74>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	81a3      	strh	r3, [r4, #12]
 8005244:	89a0      	ldrh	r0, [r4, #12]
 8005246:	4305      	orrs	r5, r0
 8005248:	81a5      	strh	r5, [r4, #12]
 800524a:	e7cd      	b.n	80051e8 <__smakebuf_r+0x18>
 800524c:	08004841 	.word	0x08004841

08005250 <__malloc_lock>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__malloc_lock+0x8>)
 8005252:	f7ff bbec 	b.w	8004a2e <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	2000113c 	.word	0x2000113c

0800525c <__malloc_unlock>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__malloc_unlock+0x8>)
 800525e:	f7ff bbe7 	b.w	8004a30 <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	2000113c 	.word	0x2000113c

08005268 <_free_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4605      	mov	r5, r0
 800526c:	2900      	cmp	r1, #0
 800526e:	d040      	beq.n	80052f2 <_free_r+0x8a>
 8005270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005274:	1f0c      	subs	r4, r1, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfb8      	it	lt
 800527a:	18e4      	addlt	r4, r4, r3
 800527c:	f7ff ffe8 	bl	8005250 <__malloc_lock>
 8005280:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <_free_r+0x8c>)
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	b933      	cbnz	r3, 8005294 <_free_r+0x2c>
 8005286:	6063      	str	r3, [r4, #4]
 8005288:	6014      	str	r4, [r2, #0]
 800528a:	4628      	mov	r0, r5
 800528c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005290:	f7ff bfe4 	b.w	800525c <__malloc_unlock>
 8005294:	42a3      	cmp	r3, r4
 8005296:	d908      	bls.n	80052aa <_free_r+0x42>
 8005298:	6820      	ldr	r0, [r4, #0]
 800529a:	1821      	adds	r1, r4, r0
 800529c:	428b      	cmp	r3, r1
 800529e:	bf01      	itttt	eq
 80052a0:	6819      	ldreq	r1, [r3, #0]
 80052a2:	685b      	ldreq	r3, [r3, #4]
 80052a4:	1809      	addeq	r1, r1, r0
 80052a6:	6021      	streq	r1, [r4, #0]
 80052a8:	e7ed      	b.n	8005286 <_free_r+0x1e>
 80052aa:	461a      	mov	r2, r3
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b10b      	cbz	r3, 80052b4 <_free_r+0x4c>
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	d9fa      	bls.n	80052aa <_free_r+0x42>
 80052b4:	6811      	ldr	r1, [r2, #0]
 80052b6:	1850      	adds	r0, r2, r1
 80052b8:	42a0      	cmp	r0, r4
 80052ba:	d10b      	bne.n	80052d4 <_free_r+0x6c>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	4401      	add	r1, r0
 80052c0:	1850      	adds	r0, r2, r1
 80052c2:	4283      	cmp	r3, r0
 80052c4:	6011      	str	r1, [r2, #0]
 80052c6:	d1e0      	bne.n	800528a <_free_r+0x22>
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4401      	add	r1, r0
 80052ce:	6011      	str	r1, [r2, #0]
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	e7da      	b.n	800528a <_free_r+0x22>
 80052d4:	d902      	bls.n	80052dc <_free_r+0x74>
 80052d6:	230c      	movs	r3, #12
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	e7d6      	b.n	800528a <_free_r+0x22>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	1821      	adds	r1, r4, r0
 80052e0:	428b      	cmp	r3, r1
 80052e2:	bf01      	itttt	eq
 80052e4:	6819      	ldreq	r1, [r3, #0]
 80052e6:	685b      	ldreq	r3, [r3, #4]
 80052e8:	1809      	addeq	r1, r1, r0
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	6063      	str	r3, [r4, #4]
 80052ee:	6054      	str	r4, [r2, #4]
 80052f0:	e7cb      	b.n	800528a <_free_r+0x22>
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20001140 	.word	0x20001140

080052f8 <__sfputc_r>:
 80052f8:	6893      	ldr	r3, [r2, #8]
 80052fa:	b410      	push	{r4}
 80052fc:	3b01      	subs	r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	6093      	str	r3, [r2, #8]
 8005302:	da07      	bge.n	8005314 <__sfputc_r+0x1c>
 8005304:	6994      	ldr	r4, [r2, #24]
 8005306:	42a3      	cmp	r3, r4
 8005308:	db01      	blt.n	800530e <__sfputc_r+0x16>
 800530a:	290a      	cmp	r1, #10
 800530c:	d102      	bne.n	8005314 <__sfputc_r+0x1c>
 800530e:	bc10      	pop	{r4}
 8005310:	f7ff bd86 	b.w	8004e20 <__swbuf_r>
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	1c58      	adds	r0, r3, #1
 8005318:	6010      	str	r0, [r2, #0]
 800531a:	7019      	strb	r1, [r3, #0]
 800531c:	4608      	mov	r0, r1
 800531e:	bc10      	pop	{r4}
 8005320:	4770      	bx	lr

08005322 <__sfputs_r>:
 8005322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	460f      	mov	r7, r1
 8005328:	4614      	mov	r4, r2
 800532a:	18d5      	adds	r5, r2, r3
 800532c:	42ac      	cmp	r4, r5
 800532e:	d101      	bne.n	8005334 <__sfputs_r+0x12>
 8005330:	2000      	movs	r0, #0
 8005332:	e007      	b.n	8005344 <__sfputs_r+0x22>
 8005334:	463a      	mov	r2, r7
 8005336:	4630      	mov	r0, r6
 8005338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533c:	f7ff ffdc 	bl	80052f8 <__sfputc_r>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d1f3      	bne.n	800532c <__sfputs_r+0xa>
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005348 <_vfiprintf_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	460d      	mov	r5, r1
 800534e:	4614      	mov	r4, r2
 8005350:	4698      	mov	r8, r3
 8005352:	4606      	mov	r6, r0
 8005354:	b09d      	sub	sp, #116	; 0x74
 8005356:	b118      	cbz	r0, 8005360 <_vfiprintf_r+0x18>
 8005358:	6983      	ldr	r3, [r0, #24]
 800535a:	b90b      	cbnz	r3, 8005360 <_vfiprintf_r+0x18>
 800535c:	f7ff faa4 	bl	80048a8 <__sinit>
 8005360:	4b89      	ldr	r3, [pc, #548]	; (8005588 <_vfiprintf_r+0x240>)
 8005362:	429d      	cmp	r5, r3
 8005364:	d11b      	bne.n	800539e <_vfiprintf_r+0x56>
 8005366:	6875      	ldr	r5, [r6, #4]
 8005368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d405      	bmi.n	800537a <_vfiprintf_r+0x32>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	059a      	lsls	r2, r3, #22
 8005372:	d402      	bmi.n	800537a <_vfiprintf_r+0x32>
 8005374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005376:	f7ff fb5a 	bl	8004a2e <__retarget_lock_acquire_recursive>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	071b      	lsls	r3, r3, #28
 800537e:	d501      	bpl.n	8005384 <_vfiprintf_r+0x3c>
 8005380:	692b      	ldr	r3, [r5, #16]
 8005382:	b9eb      	cbnz	r3, 80053c0 <_vfiprintf_r+0x78>
 8005384:	4629      	mov	r1, r5
 8005386:	4630      	mov	r0, r6
 8005388:	f7ff fdae 	bl	8004ee8 <__swsetup_r>
 800538c:	b1c0      	cbz	r0, 80053c0 <_vfiprintf_r+0x78>
 800538e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005390:	07dc      	lsls	r4, r3, #31
 8005392:	d50e      	bpl.n	80053b2 <_vfiprintf_r+0x6a>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005398:	b01d      	add	sp, #116	; 0x74
 800539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539e:	4b7b      	ldr	r3, [pc, #492]	; (800558c <_vfiprintf_r+0x244>)
 80053a0:	429d      	cmp	r5, r3
 80053a2:	d101      	bne.n	80053a8 <_vfiprintf_r+0x60>
 80053a4:	68b5      	ldr	r5, [r6, #8]
 80053a6:	e7df      	b.n	8005368 <_vfiprintf_r+0x20>
 80053a8:	4b79      	ldr	r3, [pc, #484]	; (8005590 <_vfiprintf_r+0x248>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	bf08      	it	eq
 80053ae:	68f5      	ldreq	r5, [r6, #12]
 80053b0:	e7da      	b.n	8005368 <_vfiprintf_r+0x20>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	0598      	lsls	r0, r3, #22
 80053b6:	d4ed      	bmi.n	8005394 <_vfiprintf_r+0x4c>
 80053b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ba:	f7ff fb39 	bl	8004a30 <__retarget_lock_release_recursive>
 80053be:	e7e9      	b.n	8005394 <_vfiprintf_r+0x4c>
 80053c0:	2300      	movs	r3, #0
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	2320      	movs	r3, #32
 80053c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053ca:	2330      	movs	r3, #48	; 0x30
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005594 <_vfiprintf_r+0x24c>
 80053d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053dc:	4623      	mov	r3, r4
 80053de:	469a      	mov	sl, r3
 80053e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e4:	b10a      	cbz	r2, 80053ea <_vfiprintf_r+0xa2>
 80053e6:	2a25      	cmp	r2, #37	; 0x25
 80053e8:	d1f9      	bne.n	80053de <_vfiprintf_r+0x96>
 80053ea:	ebba 0b04 	subs.w	fp, sl, r4
 80053ee:	d00b      	beq.n	8005408 <_vfiprintf_r+0xc0>
 80053f0:	465b      	mov	r3, fp
 80053f2:	4622      	mov	r2, r4
 80053f4:	4629      	mov	r1, r5
 80053f6:	4630      	mov	r0, r6
 80053f8:	f7ff ff93 	bl	8005322 <__sfputs_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	f000 80aa 	beq.w	8005556 <_vfiprintf_r+0x20e>
 8005402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005404:	445a      	add	r2, fp
 8005406:	9209      	str	r2, [sp, #36]	; 0x24
 8005408:	f89a 3000 	ldrb.w	r3, [sl]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a2 	beq.w	8005556 <_vfiprintf_r+0x20e>
 8005412:	2300      	movs	r3, #0
 8005414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800541c:	f10a 0a01 	add.w	sl, sl, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	9307      	str	r3, [sp, #28]
 8005424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005428:	931a      	str	r3, [sp, #104]	; 0x68
 800542a:	4654      	mov	r4, sl
 800542c:	2205      	movs	r2, #5
 800542e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005432:	4858      	ldr	r0, [pc, #352]	; (8005594 <_vfiprintf_r+0x24c>)
 8005434:	f000 fa82 	bl	800593c <memchr>
 8005438:	9a04      	ldr	r2, [sp, #16]
 800543a:	b9d8      	cbnz	r0, 8005474 <_vfiprintf_r+0x12c>
 800543c:	06d1      	lsls	r1, r2, #27
 800543e:	bf44      	itt	mi
 8005440:	2320      	movmi	r3, #32
 8005442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005446:	0713      	lsls	r3, r2, #28
 8005448:	bf44      	itt	mi
 800544a:	232b      	movmi	r3, #43	; 0x2b
 800544c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005450:	f89a 3000 	ldrb.w	r3, [sl]
 8005454:	2b2a      	cmp	r3, #42	; 0x2a
 8005456:	d015      	beq.n	8005484 <_vfiprintf_r+0x13c>
 8005458:	4654      	mov	r4, sl
 800545a:	2000      	movs	r0, #0
 800545c:	f04f 0c0a 	mov.w	ip, #10
 8005460:	9a07      	ldr	r2, [sp, #28]
 8005462:	4621      	mov	r1, r4
 8005464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005468:	3b30      	subs	r3, #48	; 0x30
 800546a:	2b09      	cmp	r3, #9
 800546c:	d94e      	bls.n	800550c <_vfiprintf_r+0x1c4>
 800546e:	b1b0      	cbz	r0, 800549e <_vfiprintf_r+0x156>
 8005470:	9207      	str	r2, [sp, #28]
 8005472:	e014      	b.n	800549e <_vfiprintf_r+0x156>
 8005474:	eba0 0308 	sub.w	r3, r0, r8
 8005478:	fa09 f303 	lsl.w	r3, r9, r3
 800547c:	4313      	orrs	r3, r2
 800547e:	46a2      	mov	sl, r4
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	e7d2      	b.n	800542a <_vfiprintf_r+0xe2>
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	1d19      	adds	r1, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	9103      	str	r1, [sp, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	bfbb      	ittet	lt
 8005490:	425b      	neglt	r3, r3
 8005492:	f042 0202 	orrlt.w	r2, r2, #2
 8005496:	9307      	strge	r3, [sp, #28]
 8005498:	9307      	strlt	r3, [sp, #28]
 800549a:	bfb8      	it	lt
 800549c:	9204      	strlt	r2, [sp, #16]
 800549e:	7823      	ldrb	r3, [r4, #0]
 80054a0:	2b2e      	cmp	r3, #46	; 0x2e
 80054a2:	d10c      	bne.n	80054be <_vfiprintf_r+0x176>
 80054a4:	7863      	ldrb	r3, [r4, #1]
 80054a6:	2b2a      	cmp	r3, #42	; 0x2a
 80054a8:	d135      	bne.n	8005516 <_vfiprintf_r+0x1ce>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3402      	adds	r4, #2
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	9203      	str	r2, [sp, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bfb8      	it	lt
 80054b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005598 <_vfiprintf_r+0x250>
 80054c2:	2203      	movs	r2, #3
 80054c4:	4650      	mov	r0, sl
 80054c6:	7821      	ldrb	r1, [r4, #0]
 80054c8:	f000 fa38 	bl	800593c <memchr>
 80054cc:	b140      	cbz	r0, 80054e0 <_vfiprintf_r+0x198>
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	eba0 000a 	sub.w	r0, r0, sl
 80054d4:	fa03 f000 	lsl.w	r0, r3, r0
 80054d8:	9b04      	ldr	r3, [sp, #16]
 80054da:	3401      	adds	r4, #1
 80054dc:	4303      	orrs	r3, r0
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e4:	2206      	movs	r2, #6
 80054e6:	482d      	ldr	r0, [pc, #180]	; (800559c <_vfiprintf_r+0x254>)
 80054e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ec:	f000 fa26 	bl	800593c <memchr>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d03f      	beq.n	8005574 <_vfiprintf_r+0x22c>
 80054f4:	4b2a      	ldr	r3, [pc, #168]	; (80055a0 <_vfiprintf_r+0x258>)
 80054f6:	bb1b      	cbnz	r3, 8005540 <_vfiprintf_r+0x1f8>
 80054f8:	9b03      	ldr	r3, [sp, #12]
 80054fa:	3307      	adds	r3, #7
 80054fc:	f023 0307 	bic.w	r3, r3, #7
 8005500:	3308      	adds	r3, #8
 8005502:	9303      	str	r3, [sp, #12]
 8005504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005506:	443b      	add	r3, r7
 8005508:	9309      	str	r3, [sp, #36]	; 0x24
 800550a:	e767      	b.n	80053dc <_vfiprintf_r+0x94>
 800550c:	460c      	mov	r4, r1
 800550e:	2001      	movs	r0, #1
 8005510:	fb0c 3202 	mla	r2, ip, r2, r3
 8005514:	e7a5      	b.n	8005462 <_vfiprintf_r+0x11a>
 8005516:	2300      	movs	r3, #0
 8005518:	f04f 0c0a 	mov.w	ip, #10
 800551c:	4619      	mov	r1, r3
 800551e:	3401      	adds	r4, #1
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	4620      	mov	r0, r4
 8005524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005528:	3a30      	subs	r2, #48	; 0x30
 800552a:	2a09      	cmp	r2, #9
 800552c:	d903      	bls.n	8005536 <_vfiprintf_r+0x1ee>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c5      	beq.n	80054be <_vfiprintf_r+0x176>
 8005532:	9105      	str	r1, [sp, #20]
 8005534:	e7c3      	b.n	80054be <_vfiprintf_r+0x176>
 8005536:	4604      	mov	r4, r0
 8005538:	2301      	movs	r3, #1
 800553a:	fb0c 2101 	mla	r1, ip, r1, r2
 800553e:	e7f0      	b.n	8005522 <_vfiprintf_r+0x1da>
 8005540:	ab03      	add	r3, sp, #12
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	462a      	mov	r2, r5
 8005546:	4630      	mov	r0, r6
 8005548:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <_vfiprintf_r+0x25c>)
 800554a:	a904      	add	r1, sp, #16
 800554c:	f3af 8000 	nop.w
 8005550:	4607      	mov	r7, r0
 8005552:	1c78      	adds	r0, r7, #1
 8005554:	d1d6      	bne.n	8005504 <_vfiprintf_r+0x1bc>
 8005556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005558:	07d9      	lsls	r1, r3, #31
 800555a:	d405      	bmi.n	8005568 <_vfiprintf_r+0x220>
 800555c:	89ab      	ldrh	r3, [r5, #12]
 800555e:	059a      	lsls	r2, r3, #22
 8005560:	d402      	bmi.n	8005568 <_vfiprintf_r+0x220>
 8005562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005564:	f7ff fa64 	bl	8004a30 <__retarget_lock_release_recursive>
 8005568:	89ab      	ldrh	r3, [r5, #12]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	f53f af12 	bmi.w	8005394 <_vfiprintf_r+0x4c>
 8005570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005572:	e711      	b.n	8005398 <_vfiprintf_r+0x50>
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	462a      	mov	r2, r5
 800557a:	4630      	mov	r0, r6
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <_vfiprintf_r+0x25c>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	f000 f882 	bl	8005688 <_printf_i>
 8005584:	e7e4      	b.n	8005550 <_vfiprintf_r+0x208>
 8005586:	bf00      	nop
 8005588:	08005aac 	.word	0x08005aac
 800558c:	08005acc 	.word	0x08005acc
 8005590:	08005a8c 	.word	0x08005a8c
 8005594:	08005af0 	.word	0x08005af0
 8005598:	08005af6 	.word	0x08005af6
 800559c:	08005afa 	.word	0x08005afa
 80055a0:	00000000 	.word	0x00000000
 80055a4:	08005323 	.word	0x08005323

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4699      	mov	r9, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	4607      	mov	r7, r0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfb8      	it	lt
 80055ba:	4613      	movlt	r3, r2
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c2:	460c      	mov	r4, r1
 80055c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc28      	bgt.n	8005642 <_printf_common+0x9a>
 80055f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f4:	1e13      	subs	r3, r2, #0
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42d      	bmi.n	800565c <_printf_common+0xb4>
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d020      	beq.n	8005650 <_printf_common+0xa8>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	68e5      	ldr	r5, [r4, #12]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf18      	it	ne
 800561a:	2500      	movne	r5, #0
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	bf08      	it	eq
 8005626:	1aad      	subeq	r5, r5, r2
 8005628:	6922      	ldr	r2, [r4, #16]
 800562a:	bf08      	it	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	4293      	cmp	r3, r2
 8005632:	bfc4      	itt	gt
 8005634:	1a9b      	subgt	r3, r3, r2
 8005636:	18ed      	addgt	r5, r5, r3
 8005638:	341a      	adds	r4, #26
 800563a:	42b5      	cmp	r5, r6
 800563c:	d11a      	bne.n	8005674 <_printf_common+0xcc>
 800563e:	2000      	movs	r0, #0
 8005640:	e008      	b.n	8005654 <_printf_common+0xac>
 8005642:	2301      	movs	r3, #1
 8005644:	4652      	mov	r2, sl
 8005646:	4649      	mov	r1, r9
 8005648:	4638      	mov	r0, r7
 800564a:	47c0      	blx	r8
 800564c:	3001      	adds	r0, #1
 800564e:	d103      	bne.n	8005658 <_printf_common+0xb0>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	3501      	adds	r5, #1
 800565a:	e7c4      	b.n	80055e6 <_printf_common+0x3e>
 800565c:	2030      	movs	r0, #48	; 0x30
 800565e:	18e1      	adds	r1, r4, r3
 8005660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800566a:	4422      	add	r2, r4
 800566c:	3302      	adds	r3, #2
 800566e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005672:	e7c5      	b.n	8005600 <_printf_common+0x58>
 8005674:	2301      	movs	r3, #1
 8005676:	4622      	mov	r2, r4
 8005678:	4649      	mov	r1, r9
 800567a:	4638      	mov	r0, r7
 800567c:	47c0      	blx	r8
 800567e:	3001      	adds	r0, #1
 8005680:	d0e6      	beq.n	8005650 <_printf_common+0xa8>
 8005682:	3601      	adds	r6, #1
 8005684:	e7d9      	b.n	800563a <_printf_common+0x92>
	...

08005688 <_printf_i>:
 8005688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	7e0f      	ldrb	r7, [r1, #24]
 800568e:	4691      	mov	r9, r2
 8005690:	2f78      	cmp	r7, #120	; 0x78
 8005692:	4680      	mov	r8, r0
 8005694:	460c      	mov	r4, r1
 8005696:	469a      	mov	sl, r3
 8005698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800569a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800569e:	d807      	bhi.n	80056b0 <_printf_i+0x28>
 80056a0:	2f62      	cmp	r7, #98	; 0x62
 80056a2:	d80a      	bhi.n	80056ba <_printf_i+0x32>
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	f000 80d9 	beq.w	800585c <_printf_i+0x1d4>
 80056aa:	2f58      	cmp	r7, #88	; 0x58
 80056ac:	f000 80a4 	beq.w	80057f8 <_printf_i+0x170>
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b8:	e03a      	b.n	8005730 <_printf_i+0xa8>
 80056ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056be:	2b15      	cmp	r3, #21
 80056c0:	d8f6      	bhi.n	80056b0 <_printf_i+0x28>
 80056c2:	a101      	add	r1, pc, #4	; (adr r1, 80056c8 <_printf_i+0x40>)
 80056c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c8:	08005721 	.word	0x08005721
 80056cc:	08005735 	.word	0x08005735
 80056d0:	080056b1 	.word	0x080056b1
 80056d4:	080056b1 	.word	0x080056b1
 80056d8:	080056b1 	.word	0x080056b1
 80056dc:	080056b1 	.word	0x080056b1
 80056e0:	08005735 	.word	0x08005735
 80056e4:	080056b1 	.word	0x080056b1
 80056e8:	080056b1 	.word	0x080056b1
 80056ec:	080056b1 	.word	0x080056b1
 80056f0:	080056b1 	.word	0x080056b1
 80056f4:	08005843 	.word	0x08005843
 80056f8:	08005765 	.word	0x08005765
 80056fc:	08005825 	.word	0x08005825
 8005700:	080056b1 	.word	0x080056b1
 8005704:	080056b1 	.word	0x080056b1
 8005708:	08005865 	.word	0x08005865
 800570c:	080056b1 	.word	0x080056b1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056b1 	.word	0x080056b1
 8005718:	080056b1 	.word	0x080056b1
 800571c:	0800582d 	.word	0x0800582d
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	602a      	str	r2, [r5, #0]
 8005728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800572c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005730:	2301      	movs	r3, #1
 8005732:	e0a4      	b.n	800587e <_printf_i+0x1f6>
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	6829      	ldr	r1, [r5, #0]
 8005738:	0606      	lsls	r6, r0, #24
 800573a:	f101 0304 	add.w	r3, r1, #4
 800573e:	d50a      	bpl.n	8005756 <_printf_i+0xce>
 8005740:	680e      	ldr	r6, [r1, #0]
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	2e00      	cmp	r6, #0
 8005746:	da03      	bge.n	8005750 <_printf_i+0xc8>
 8005748:	232d      	movs	r3, #45	; 0x2d
 800574a:	4276      	negs	r6, r6
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005750:	230a      	movs	r3, #10
 8005752:	485e      	ldr	r0, [pc, #376]	; (80058cc <_printf_i+0x244>)
 8005754:	e019      	b.n	800578a <_printf_i+0x102>
 8005756:	680e      	ldr	r6, [r1, #0]
 8005758:	f010 0f40 	tst.w	r0, #64	; 0x40
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	bf18      	it	ne
 8005760:	b236      	sxthne	r6, r6
 8005762:	e7ef      	b.n	8005744 <_printf_i+0xbc>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	1d19      	adds	r1, r3, #4
 800576a:	6029      	str	r1, [r5, #0]
 800576c:	0601      	lsls	r1, r0, #24
 800576e:	d501      	bpl.n	8005774 <_printf_i+0xec>
 8005770:	681e      	ldr	r6, [r3, #0]
 8005772:	e002      	b.n	800577a <_printf_i+0xf2>
 8005774:	0646      	lsls	r6, r0, #25
 8005776:	d5fb      	bpl.n	8005770 <_printf_i+0xe8>
 8005778:	881e      	ldrh	r6, [r3, #0]
 800577a:	2f6f      	cmp	r7, #111	; 0x6f
 800577c:	bf0c      	ite	eq
 800577e:	2308      	moveq	r3, #8
 8005780:	230a      	movne	r3, #10
 8005782:	4852      	ldr	r0, [pc, #328]	; (80058cc <_printf_i+0x244>)
 8005784:	2100      	movs	r1, #0
 8005786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800578a:	6865      	ldr	r5, [r4, #4]
 800578c:	2d00      	cmp	r5, #0
 800578e:	bfa8      	it	ge
 8005790:	6821      	ldrge	r1, [r4, #0]
 8005792:	60a5      	str	r5, [r4, #8]
 8005794:	bfa4      	itt	ge
 8005796:	f021 0104 	bicge.w	r1, r1, #4
 800579a:	6021      	strge	r1, [r4, #0]
 800579c:	b90e      	cbnz	r6, 80057a2 <_printf_i+0x11a>
 800579e:	2d00      	cmp	r5, #0
 80057a0:	d04d      	beq.n	800583e <_printf_i+0x1b6>
 80057a2:	4615      	mov	r5, r2
 80057a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80057a8:	fb03 6711 	mls	r7, r3, r1, r6
 80057ac:	5dc7      	ldrb	r7, [r0, r7]
 80057ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057b2:	4637      	mov	r7, r6
 80057b4:	42bb      	cmp	r3, r7
 80057b6:	460e      	mov	r6, r1
 80057b8:	d9f4      	bls.n	80057a4 <_printf_i+0x11c>
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d10b      	bne.n	80057d6 <_printf_i+0x14e>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	07de      	lsls	r6, r3, #31
 80057c2:	d508      	bpl.n	80057d6 <_printf_i+0x14e>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	4299      	cmp	r1, r3
 80057ca:	bfde      	ittt	le
 80057cc:	2330      	movle	r3, #48	; 0x30
 80057ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057d6:	1b52      	subs	r2, r2, r5
 80057d8:	6122      	str	r2, [r4, #16]
 80057da:	464b      	mov	r3, r9
 80057dc:	4621      	mov	r1, r4
 80057de:	4640      	mov	r0, r8
 80057e0:	f8cd a000 	str.w	sl, [sp]
 80057e4:	aa03      	add	r2, sp, #12
 80057e6:	f7ff fedf 	bl	80055a8 <_printf_common>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d14c      	bne.n	8005888 <_printf_i+0x200>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057f2:	b004      	add	sp, #16
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	4834      	ldr	r0, [pc, #208]	; (80058cc <_printf_i+0x244>)
 80057fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057fe:	6829      	ldr	r1, [r5, #0]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f851 6b04 	ldr.w	r6, [r1], #4
 8005806:	6029      	str	r1, [r5, #0]
 8005808:	061d      	lsls	r5, r3, #24
 800580a:	d514      	bpl.n	8005836 <_printf_i+0x1ae>
 800580c:	07df      	lsls	r7, r3, #31
 800580e:	bf44      	itt	mi
 8005810:	f043 0320 	orrmi.w	r3, r3, #32
 8005814:	6023      	strmi	r3, [r4, #0]
 8005816:	b91e      	cbnz	r6, 8005820 <_printf_i+0x198>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2310      	movs	r3, #16
 8005822:	e7af      	b.n	8005784 <_printf_i+0xfc>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f043 0320 	orr.w	r3, r3, #32
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	2378      	movs	r3, #120	; 0x78
 800582e:	4828      	ldr	r0, [pc, #160]	; (80058d0 <_printf_i+0x248>)
 8005830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005834:	e7e3      	b.n	80057fe <_printf_i+0x176>
 8005836:	0659      	lsls	r1, r3, #25
 8005838:	bf48      	it	mi
 800583a:	b2b6      	uxthmi	r6, r6
 800583c:	e7e6      	b.n	800580c <_printf_i+0x184>
 800583e:	4615      	mov	r5, r2
 8005840:	e7bb      	b.n	80057ba <_printf_i+0x132>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	6826      	ldr	r6, [r4, #0]
 8005846:	1d18      	adds	r0, r3, #4
 8005848:	6961      	ldr	r1, [r4, #20]
 800584a:	6028      	str	r0, [r5, #0]
 800584c:	0635      	lsls	r5, r6, #24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x1ce>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x1d4>
 8005856:	0670      	lsls	r0, r6, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x1ca>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	4615      	mov	r5, r2
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	e7ba      	b.n	80057da <_printf_i+0x152>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	1d1a      	adds	r2, r3, #4
 800586a:	602a      	str	r2, [r5, #0]
 800586c:	681d      	ldr	r5, [r3, #0]
 800586e:	6862      	ldr	r2, [r4, #4]
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f863 	bl	800593c <memchr>
 8005876:	b108      	cbz	r0, 800587c <_printf_i+0x1f4>
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	6060      	str	r0, [r4, #4]
 800587c:	6863      	ldr	r3, [r4, #4]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2300      	movs	r3, #0
 8005882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005886:	e7a8      	b.n	80057da <_printf_i+0x152>
 8005888:	462a      	mov	r2, r5
 800588a:	4649      	mov	r1, r9
 800588c:	4640      	mov	r0, r8
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	47d0      	blx	sl
 8005892:	3001      	adds	r0, #1
 8005894:	d0ab      	beq.n	80057ee <_printf_i+0x166>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	d413      	bmi.n	80058c4 <_printf_i+0x23c>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e7a4      	b.n	80057f2 <_printf_i+0x16a>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4632      	mov	r2, r6
 80058ac:	4649      	mov	r1, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	47d0      	blx	sl
 80058b2:	3001      	adds	r0, #1
 80058b4:	d09b      	beq.n	80057ee <_printf_i+0x166>
 80058b6:	3501      	adds	r5, #1
 80058b8:	68e3      	ldr	r3, [r4, #12]
 80058ba:	9903      	ldr	r1, [sp, #12]
 80058bc:	1a5b      	subs	r3, r3, r1
 80058be:	42ab      	cmp	r3, r5
 80058c0:	dcf2      	bgt.n	80058a8 <_printf_i+0x220>
 80058c2:	e7eb      	b.n	800589c <_printf_i+0x214>
 80058c4:	2500      	movs	r5, #0
 80058c6:	f104 0619 	add.w	r6, r4, #25
 80058ca:	e7f5      	b.n	80058b8 <_printf_i+0x230>
 80058cc:	08005b01 	.word	0x08005b01
 80058d0:	08005b12 	.word	0x08005b12

080058d4 <_read_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	4d05      	ldr	r5, [pc, #20]	; (80058f4 <_read_r+0x20>)
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fa ffd6 	bl	8000894 <_read>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_read_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_read_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20001148 	.word	0x20001148

080058f8 <_fstat_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	2300      	movs	r3, #0
 80058fc:	4d06      	ldr	r5, [pc, #24]	; (8005918 <_fstat_r+0x20>)
 80058fe:	4604      	mov	r4, r0
 8005900:	4608      	mov	r0, r1
 8005902:	4611      	mov	r1, r2
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	f7fa ffed 	bl	80008e4 <_fstat>
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	d102      	bne.n	8005914 <_fstat_r+0x1c>
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	b103      	cbz	r3, 8005914 <_fstat_r+0x1c>
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	20001148 	.word	0x20001148

0800591c <_isatty_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	2300      	movs	r3, #0
 8005920:	4d05      	ldr	r5, [pc, #20]	; (8005938 <_isatty_r+0x1c>)
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fa ffeb 	bl	8000902 <_isatty>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_isatty_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_isatty_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20001148 	.word	0x20001148

0800593c <memchr>:
 800593c:	4603      	mov	r3, r0
 800593e:	b510      	push	{r4, lr}
 8005940:	b2c9      	uxtb	r1, r1
 8005942:	4402      	add	r2, r0
 8005944:	4293      	cmp	r3, r2
 8005946:	4618      	mov	r0, r3
 8005948:	d101      	bne.n	800594e <memchr+0x12>
 800594a:	2000      	movs	r0, #0
 800594c:	e003      	b.n	8005956 <memchr+0x1a>
 800594e:	7804      	ldrb	r4, [r0, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	428c      	cmp	r4, r1
 8005954:	d1f6      	bne.n	8005944 <memchr+0x8>
 8005956:	bd10      	pop	{r4, pc}

08005958 <_init>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr

08005964 <_fini>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr
